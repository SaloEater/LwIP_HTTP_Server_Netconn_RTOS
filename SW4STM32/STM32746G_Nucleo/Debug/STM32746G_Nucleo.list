
STM32746G_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018e74  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003cb8  08019048  08019048  00029048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cd00  0801cd00  0002cd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801cd08  0801cd08  0002cd08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801cd0c  0801cd0c  0002cd0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  20000000  0801cd10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000cde8  20000210  0801cf20  00030210  2**2
                  ALLOC
  8 ._user_heap_stack 00000660  2000cff8  0801cf20  0003cff8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 10 .TxDescripSection 00000080  2004c080  2004c080  0003c080  2**2
                  ALLOC
 11 .debug_line   0002cae6  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0003d6a3  00000000  00000000  0005cd26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007922  00000000  00000000  0009a3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef0  00000000  00000000  000a1cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0011a2e4  00000000  00000000  000a3be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d60  00000000  00000000  001bdec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034b78  00000000  00000000  001bfc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001f47a0  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000092e0  00000000  00000000  001f47f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .RxDecripSection 00000080  2004c000  2004c000  0003c000  2**2
                  ALLOC
 21 .RxarraySection 000017d0  2004c100  2004c100  0003c100  2**2
                  ALLOC
 22 .TxarraySection 000017d0  2004d8d0  2004d8d0  0003d8d0  2**2
                  ALLOC

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801902c 	.word	0x0801902c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	0801902c 	.word	0x0801902c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001064 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001030:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001032:	e003      	b.n	800103c <LoopCopyDataInit>

08001034 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001036:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001038:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800103a:	3104      	adds	r1, #4

0800103c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800103c:	480b      	ldr	r0, [pc, #44]	; (800106c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001040:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001042:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001044:	d3f6      	bcc.n	8001034 <CopyDataInit>
  ldr  r2, =_sbss
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001048:	e002      	b.n	8001050 <LoopFillZerobss>

0800104a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800104a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800104c:	f842 3b04 	str.w	r3, [r2], #4

08001050 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001052:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001054:	d3f9      	bcc.n	800104a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001056:	f001 ff31 	bl	8002ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105a:	f013 fd63 	bl	8014b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105e:	f000 fcc9 	bl	80019f4 <main>
  bx  lr    
 8001062:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001064:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001068:	0801cd10 	.word	0x0801cd10
  ldr  r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001070:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 8001074:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8001078:	2000cff8 	.word	0x2000cff8

0800107c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC_IRQHandler>
	...

08001080 <_sbrk>:




caddr_t _sbrk(int incr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <_sbrk+0x60>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <_sbrk+0x16>
		heap_end = &end;
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <_sbrk+0x60>)
 8001092:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <_sbrk+0x64>)
 8001094:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <_sbrk+0x60>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	60fb      	str	r3, [r7, #12]

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <_sbrk+0x68>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	60bb      	str	r3, [r7, #8]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80010aa:	60bb      	str	r3, [r7, #8]

	if (heap_end + incr > min_stack_ptr)
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <_sbrk+0x60>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4413      	add	r3, r2
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d207      	bcs.n	80010ca <_sbrk+0x4a>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80010ba:	f013 fd2d 	bl	8014b18 <__errno>
 80010be:	4603      	mov	r3, r0
 80010c0:	220c      	movs	r2, #12
 80010c2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	e006      	b.n	80010d8 <_sbrk+0x58>
	}

	heap_end += incr;
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <_sbrk+0x60>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a03      	ldr	r2, [pc, #12]	; (80010e0 <_sbrk+0x60>)
 80010d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000022c 	.word	0x2000022c
 80010e4:	2000cff8 	.word	0x2000cff8
 80010e8:	e000ed08 	.word	0xe000ed08

080010ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	return 1;
 80010f0:	2301      	movs	r3, #1
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <_kill>:

int _kill(int pid, int sig)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001106:	f013 fd07 	bl	8014b18 <__errno>
 800110a:	4603      	mov	r3, r0
 800110c:	2216      	movs	r2, #22
 800110e:	601a      	str	r2, [r3, #0]
	return -1;
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <_exit>:

void _exit (int status)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ffe7 	bl	80010fc <_kill>
	while (1) {}
 800112e:	e7fe      	b.n	800112e <_exit+0x12>

08001130 <_write>:
}

int _write(int file, char *ptr, int len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	e009      	b.n	8001156 <_write+0x26>
		{
		   __io_putchar( *ptr++ );
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	60ba      	str	r2, [r7, #8]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	3301      	adds	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	429a      	cmp	r2, r3
 800115c:	dbf1      	blt.n	8001142 <_write+0x12>
		}
	return len;
 800115e:	687b      	ldr	r3, [r7, #4]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <_close>:

int _close(int file)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	return -1;
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001190:	605a      	str	r2, [r3, #4]
	return 0;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <_isatty>:

int _isatty(int file)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	return 1;
 80011a8:	2301      	movs	r3, #1
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b085      	sub	sp, #20
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
	return 0;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <_read>:

int _read(int file, char *ptr, int len)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e00a      	b.n	80011f8 <_read+0x28>
	{
	  *ptr++ = __io_getchar();
 80011e2:	f3af 8000 	nop.w
 80011e6:	4601      	mov	r1, r0
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	60ba      	str	r2, [r7, #8]
 80011ee:	b2ca      	uxtb	r2, r1
 80011f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dbf0      	blt.n	80011e2 <_read+0x12>
	}

   return len;
 8001200:	687b      	ldr	r3, [r7, #4]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <User_notification>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
void User_notification(struct netif *netif) 
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <User_notification+0x20>
  {
#ifdef USE_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <User_notification+0x34>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
    DHCP_state = DHCP_LINK_DOWN;
#endif  /* USE_DHCP */
   /* Turn On LED 3 to indicate ETH and LwIP init error */
   BSP_LED_On(LED3);
  } 
}
 800122a:	e005      	b.n	8001238 <User_notification+0x2c>
    DHCP_state = DHCP_LINK_DOWN;
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <User_notification+0x34>)
 800122e:	2205      	movs	r2, #5
 8001230:	701a      	strb	r2, [r3, #0]
   BSP_LED_On(LED3);
 8001232:	2002      	movs	r0, #2
 8001234:	f001 fe0e 	bl	8002e54 <BSP_LED_On>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000230 	.word	0x20000230

08001244 <DHCP_thread>:
* @brief  DHCP Process
* @param  argument: network interface
* @retval None
*/
void DHCP_thread(void const * argument)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	61fb      	str	r3, [r7, #28]
  ip_addr_t gw;
  struct dhcp *dhcp;
  
  for (;;)
  {
    switch (DHCP_state)
 8001250:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <DHCP_thread+0xcc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b05      	cmp	r3, #5
 8001258:	d04e      	beq.n	80012f8 <DHCP_thread+0xb4>
 800125a:	2b05      	cmp	r3, #5
 800125c:	dc53      	bgt.n	8001306 <DHCP_thread+0xc2>
 800125e:	2b01      	cmp	r3, #1
 8001260:	d002      	beq.n	8001268 <DHCP_thread+0x24>
 8001262:	2b02      	cmp	r3, #2
 8001264:	d010      	beq.n	8001288 <DHCP_thread+0x44>
      /* Stop DHCP */
      dhcp_stop(netif);
      DHCP_state = DHCP_OFF; 
    }
    break;
    default: break;
 8001266:	e04e      	b.n	8001306 <DHCP_thread+0xc2>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	2200      	movs	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);       
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
        dhcp_start(netif);
 800127a:	69f8      	ldr	r0, [r7, #28]
 800127c:	f007 fcda 	bl	8008c34 <dhcp_start>
        DHCP_state = DHCP_WAIT_ADDRESS;
 8001280:	4b23      	ldr	r3, [pc, #140]	; (8001310 <DHCP_thread+0xcc>)
 8001282:	2202      	movs	r2, #2
 8001284:	701a      	strb	r2, [r3, #0]
      break;
 8001286:	e03f      	b.n	8001308 <DHCP_thread+0xc4>
        if (dhcp_supplied_address(netif)) 
 8001288:	69f8      	ldr	r0, [r7, #28]
 800128a:	f008 ff93 	bl	800a1b4 <dhcp_supplied_address>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d009      	beq.n	80012a8 <DHCP_thread+0x64>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;	
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <DHCP_thread+0xcc>)
 8001296:	2203      	movs	r2, #3
 8001298:	701a      	strb	r2, [r3, #0]
          BSP_LED_Off(LED3);
 800129a:	2002      	movs	r0, #2
 800129c:	f001 fdf4 	bl	8002e88 <BSP_LED_Off>
          BSP_LED_On(LED1); 
 80012a0:	2000      	movs	r0, #0
 80012a2:	f001 fdd7 	bl	8002e54 <BSP_LED_On>
      break;
 80012a6:	e02f      	b.n	8001308 <DHCP_thread+0xc4>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	61bb      	str	r3, [r7, #24]
          if (dhcp->tries > MAX_DHCP_TRIES)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	799b      	ldrb	r3, [r3, #6]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d91c      	bls.n	80012f0 <DHCP_thread+0xac>
            DHCP_state = DHCP_TIMEOUT;
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <DHCP_thread+0xcc>)
 80012b8:	2204      	movs	r2, #4
 80012ba:	701a      	strb	r2, [r3, #0]
            dhcp_stop(netif);
 80012bc:	69f8      	ldr	r0, [r7, #28]
 80012be:	f008 f9dd 	bl	800967c <dhcp_stop>
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <DHCP_thread+0xd0>)
 80012c4:	617b      	str	r3, [r7, #20]
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 80012c6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80012ca:	613b      	str	r3, [r7, #16]
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <DHCP_thread+0xd4>)
 80012ce:	60fb      	str	r3, [r7, #12]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	f107 0210 	add.w	r2, r7, #16
 80012d8:	f107 0114 	add.w	r1, r7, #20
 80012dc:	69f8      	ldr	r0, [r7, #28]
 80012de:	f00c f8f9 	bl	800d4d4 <netif_set_addr>
            BSP_LED_Off(LED3);
 80012e2:	2002      	movs	r0, #2
 80012e4:	f001 fdd0 	bl	8002e88 <BSP_LED_Off>
            BSP_LED_On(LED1);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f001 fdb3 	bl	8002e54 <BSP_LED_On>
      break;
 80012ee:	e00b      	b.n	8001308 <DHCP_thread+0xc4>
            BSP_LED_On(LED3);
 80012f0:	2002      	movs	r0, #2
 80012f2:	f001 fdaf 	bl	8002e54 <BSP_LED_On>
      break;
 80012f6:	e007      	b.n	8001308 <DHCP_thread+0xc4>
      dhcp_stop(netif);
 80012f8:	69f8      	ldr	r0, [r7, #28]
 80012fa:	f008 f9bf 	bl	800967c <dhcp_stop>
      DHCP_state = DHCP_OFF; 
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <DHCP_thread+0xcc>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
    break;
 8001304:	e000      	b.n	8001308 <DHCP_thread+0xc4>
    default: break;
 8001306:	bf00      	nop
    }
    
    /* wait 250 ms */
    osDelay(250);
 8001308:	20fa      	movs	r0, #250	; 0xfa
 800130a:	f006 f977 	bl	80075fc <osDelay>
    switch (DHCP_state)
 800130e:	e79f      	b.n	8001250 <DHCP_thread+0xc>
 8001310:	20000230 	.word	0x20000230
 8001314:	6502a9c0 	.word	0x6502a9c0
 8001318:	0102a9c0 	.word	0x0102a9c0

0800131c <HAL_ETH_MspInit>:
  * @brief  Initializes the ETH MSP.
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	; 0x38
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b44      	ldr	r3, [pc, #272]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	4a43      	ldr	r2, [pc, #268]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6313      	str	r3, [r2, #48]	; 0x30
 8001330:	4b41      	ldr	r3, [pc, #260]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	623b      	str	r3, [r7, #32]
 800133a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133c:	4b3e      	ldr	r3, [pc, #248]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	4a3d      	ldr	r2, [pc, #244]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 8001342:	f043 0302 	orr.w	r3, r3, #2
 8001346:	6313      	str	r3, [r2, #48]	; 0x30
 8001348:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	61fb      	str	r3, [r7, #28]
 8001352:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001354:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a37      	ldr	r2, [pc, #220]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6313      	str	r3, [r2, #48]	; 0x30
 8001360:	4b35      	ldr	r3, [pc, #212]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800136c:	4b32      	ldr	r3, [pc, #200]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	4a31      	ldr	r2, [pc, #196]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 8001372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001376:	6313      	str	r3, [r2, #48]	; 0x30
 8001378:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	697b      	ldr	r3, [r7, #20]
        RMII_MII_TXD0 ---------------------> PG13
        RMII_MII_TXD1 ---------------------> PB13
  */

  /* Configure PA1, PA2 and PA7 */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 8001390:	230b      	movs	r3, #11
 8001392:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8001394:	2386      	movs	r3, #134	; 0x86
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	4827      	ldr	r0, [pc, #156]	; (800143c <HAL_ETH_MspInit+0x120>)
 80013a0:	f002 ff72 	bl	8004288 <HAL_GPIO_Init>
  
  /* Configure PB13 */
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 80013a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	4619      	mov	r1, r3
 80013b0:	4823      	ldr	r0, [pc, #140]	; (8001440 <HAL_ETH_MspInit+0x124>)
 80013b2:	f002 ff69 	bl	8004288 <HAL_GPIO_Init>
  
  /* Configure PC1, PC4 and PC5 */
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 80013b6:	2332      	movs	r3, #50	; 0x32
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	4619      	mov	r1, r3
 80013c0:	4820      	ldr	r0, [pc, #128]	; (8001444 <HAL_ETH_MspInit+0x128>)
 80013c2:	f002 ff61 	bl	8004288 <HAL_GPIO_Init>

  /* Configure PG2, PG11, PG13 and PG14 */
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 80013c6:	f642 0304 	movw	r3, #10244	; 0x2804
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80013cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d0:	4619      	mov	r1, r3
 80013d2:	481d      	ldr	r0, [pc, #116]	; (8001448 <HAL_ETH_MspInit+0x12c>)
 80013d4:	f002 ff58 	bl	8004288 <HAL_GPIO_Init>
  
  /* Enable the Ethernet global Interrupt */
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2107      	movs	r1, #7
 80013dc:	203d      	movs	r0, #61	; 0x3d
 80013de:	f001 febd 	bl	800315c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 80013e2:	203d      	movs	r0, #61	; 0x3d
 80013e4:	f001 fed6 	bl	8003194 <HAL_NVIC_EnableIRQ>
  
  /* Enable ETHERNET clock  */
  __HAL_RCC_ETH_CLK_ENABLE();
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 80013ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013f2:	6313      	str	r3, [r2, #48]	; 0x30
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 8001406:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800140a:	6313      	str	r3, [r2, #48]	; 0x30
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 800141e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001422:	6313      	str	r3, [r2, #48]	; 0x30
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <HAL_ETH_MspInit+0x11c>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
}
 8001430:	bf00      	nop
 8001432:	3738      	adds	r7, #56	; 0x38
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020400 	.word	0x40020400
 8001444:	40020800 	.word	0x40020800
 8001448:	40021800 	.word	0x40021800

0800144c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <HAL_ETH_RxCpltCallback+0x1c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f006 f9e5 	bl	8007828 <osSemaphoreRelease>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000234 	.word	0x20000234

0800146c <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static void low_level_init(struct netif *netif)
{
 800146c:	b5b0      	push	{r4, r5, r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 8001474:	4a45      	ldr	r2, [pc, #276]	; (800158c <low_level_init+0x120>)
 8001476:	f107 0320 	add.w	r3, r7, #32
 800147a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800147e:	6018      	str	r0, [r3, #0]
 8001480:	3304      	adds	r3, #4
 8001482:	8019      	strh	r1, [r3, #0]
  
  EthHandle.Instance = ETH;  
 8001484:	4b42      	ldr	r3, [pc, #264]	; (8001590 <low_level_init+0x124>)
 8001486:	4a43      	ldr	r2, [pc, #268]	; (8001594 <low_level_init+0x128>)
 8001488:	601a      	str	r2, [r3, #0]
  EthHandle.Init.MACAddr = macaddress;
 800148a:	4a41      	ldr	r2, [pc, #260]	; (8001590 <low_level_init+0x124>)
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	6153      	str	r3, [r2, #20]
  EthHandle.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <low_level_init+0x124>)
 8001494:	2201      	movs	r2, #1
 8001496:	605a      	str	r2, [r3, #4]
  EthHandle.Init.Speed = ETH_SPEED_100M;
 8001498:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <low_level_init+0x124>)
 800149a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800149e:	609a      	str	r2, [r3, #8]
  EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80014a0:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <low_level_init+0x124>)
 80014a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014a6:	60da      	str	r2, [r3, #12]
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80014a8:	4b39      	ldr	r3, [pc, #228]	; (8001590 <low_level_init+0x124>)
 80014aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014ae:	621a      	str	r2, [r3, #32]
  EthHandle.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80014b0:	4b37      	ldr	r3, [pc, #220]	; (8001590 <low_level_init+0x124>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	619a      	str	r2, [r3, #24]
  EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80014b6:	4b36      	ldr	r3, [pc, #216]	; (8001590 <low_level_init+0x124>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	61da      	str	r2, [r3, #28]
  EthHandle.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <low_level_init+0x124>)
 80014be:	2200      	movs	r2, #0
 80014c0:	821a      	strh	r2, [r3, #16]
  
  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  if (HAL_ETH_Init(&EthHandle) == HAL_OK)
 80014c2:	4833      	ldr	r0, [pc, #204]	; (8001590 <low_level_init+0x124>)
 80014c4:	f001 fef0 	bl	80032a8 <HAL_ETH_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d108      	bne.n	80014e0 <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80014e0:	2304      	movs	r3, #4
 80014e2:	4a2d      	ldr	r2, [pc, #180]	; (8001598 <low_level_init+0x12c>)
 80014e4:	492d      	ldr	r1, [pc, #180]	; (800159c <low_level_init+0x130>)
 80014e6:	482a      	ldr	r0, [pc, #168]	; (8001590 <low_level_init+0x124>)
 80014e8:	f002 f878 	bl	80035dc <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&EthHandle, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80014ec:	2304      	movs	r3, #4
 80014ee:	4a2c      	ldr	r2, [pc, #176]	; (80015a0 <low_level_init+0x134>)
 80014f0:	492c      	ldr	r1, [pc, #176]	; (80015a4 <low_level_init+0x138>)
 80014f2:	4827      	ldr	r0, [pc, #156]	; (8001590 <low_level_init+0x124>)
 80014f4:	f002 f8db 	bl	80036ae <HAL_ETH_DMARxDescListInit>
  
  /* set netif MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2206      	movs	r2, #6
 80014fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set netif MAC hardware address */
  netif->hwaddr[0] =  MAC_ADDR0;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2202      	movs	r2, #2
 8001504:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  MAC_ADDR1;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  MAC_ADDR2;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  MAC_ADDR3;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  MAC_ADDR4;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  MAC_ADDR5;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* set netif maximum transfer unit */
  netif->mtu = 1500;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001536:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800153e:	f043 030a 	orr.w	r3, r3, #10
 8001542:	b2da      	uxtb	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	2101      	movs	r1, #1
 8001554:	4618      	mov	r0, r3
 8001556:	f006 f8f5 	bl	8007744 <osSemaphoreCreate>
 800155a:	4603      	mov	r3, r0
 800155c:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <low_level_init+0x13c>)
 800155e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <low_level_init+0x140>)
 8001562:	f107 0408 	add.w	r4, r7, #8
 8001566:	461d      	mov	r5, r3
 8001568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800156a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4618      	mov	r0, r3
 8001578:	f006 f80d 	bl	8007596 <osThreadCreate>

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&EthHandle);
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <low_level_init+0x124>)
 800157e:	f002 fbbe 	bl	8003cfe <HAL_ETH_Start>
}
 8001582:	bf00      	nop
 8001584:	3728      	adds	r7, #40	; 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bdb0      	pop	{r4, r5, r7, pc}
 800158a:	bf00      	nop
 800158c:	08019050 	.word	0x08019050
 8001590:	20006918 	.word	0x20006918
 8001594:	40028000 	.word	0x40028000
 8001598:	2004d8d0 	.word	0x2004d8d0
 800159c:	2004c080 	.word	0x2004c080
 80015a0:	2004c100 	.word	0x2004c100
 80015a4:	2004c000 	.word	0x2004c000
 80015a8:	20000234 	.word	0x20000234
 80015ac:	08019058 	.word	0x08019058

080015b0 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 80015ba:	4b4b      	ldr	r3, [pc, #300]	; (80016e8 <low_level_output+0x138>)
 80015bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]

  DmaTxDesc = EthHandle.TxDesc;
 80015d2:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <low_level_output+0x138>)
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	623b      	str	r3, [r7, #32]
 80015e0:	e05a      	b.n	8001698 <low_level_output+0xe8>
  {
    /* Is this buffer available? If not, goto error */
    if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	da03      	bge.n	80015f2 <low_level_output+0x42>
    {
      errval = ERR_USE;
 80015ea:	23f8      	movs	r3, #248	; 0xf8
 80015ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80015f0:	e05c      	b.n	80016ac <low_level_output+0xfc>
    }
    
    /* Get bytes in current lwIP buffer */
    byteslefttocopy = q->len;
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	895b      	ldrh	r3, [r3, #10]
 80015f6:	60fb      	str	r3, [r7, #12]
    payloadoffset = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
    
    /* Check if the length of data to copy is bigger than Tx buffer size*/
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80015fc:	e02f      	b.n	800165e <low_level_output+0xae>
    {
      /* Copy data to Tx buffer*/
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	18d0      	adds	r0, r2, r3
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	18d1      	adds	r1, r2, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	461a      	mov	r2, r3
 8001616:	f013 fac7 	bl	8014ba8 <memcpy>
      
      /* Point to next descriptor */
      DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	61bb      	str	r3, [r7, #24]
      
      /* Check if the buffer is available */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	da03      	bge.n	8001630 <low_level_output+0x80>
      {
        errval = ERR_USE;
 8001628:	23f8      	movs	r3, #248	; 0xf8
 800162a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800162e:	e03d      	b.n	80016ac <low_level_output+0xfc>
      }
      
      buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	61fb      	str	r3, [r7, #28]
      
      byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8001640:	60fb      	str	r3, [r7, #12]
      payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800164c:	60bb      	str	r3, [r7, #8]
      framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001658:	617b      	str	r3, [r7, #20]
      bufferoffset = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4413      	add	r3, r2
 8001664:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001668:	4293      	cmp	r3, r2
 800166a:	d8c8      	bhi.n	80015fe <low_level_output+0x4e>
    }
    
    /* Copy the remaining bytes */
    memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	18d0      	adds	r0, r2, r3
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	4413      	add	r3, r2
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4619      	mov	r1, r3
 800167e:	f013 fa93 	bl	8014ba8 <memcpy>
    bufferoffset = bufferoffset + byteslefttocopy;
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
    framelength = framelength + byteslefttocopy;
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	623b      	str	r3, [r7, #32]
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1a1      	bne.n	80015e2 <low_level_output+0x32>
  }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&EthHandle, framelength);
 800169e:	6979      	ldr	r1, [r7, #20]
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <low_level_output+0x138>)
 80016a2:	f002 f871 	bl	8003788 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((EthHandle.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <low_level_output+0x138>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	f241 0314 	movw	r3, #4116	; 0x1014
 80016b4:	4413      	add	r3, r2
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0320 	and.w	r3, r3, #32
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00d      	beq.n	80016dc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    EthHandle.Instance->DMASR = ETH_DMASR_TUS;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <low_level_output+0x138>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	f241 0314 	movw	r3, #4116	; 0x1014
 80016c8:	4413      	add	r3, r2
 80016ca:	2220      	movs	r2, #32
 80016cc:	601a      	str	r2, [r3, #0]
    
    /* Resume DMA transmission*/
    EthHandle.Instance->DMATPDR = 0;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <low_level_output+0x138>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	f241 0304 	movw	r3, #4100	; 0x1004
 80016d6:	4413      	add	r3, r2
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80016dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3728      	adds	r7, #40	; 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20006918 	.word	0x20006918

080016ec <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08c      	sub	sp, #48	; 0x30
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL, *q = NULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f8:	2300      	movs	r3, #0
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
  
  /* get received frame */
  if(HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 8001710:	484f      	ldr	r0, [pc, #316]	; (8001850 <low_level_input+0x164>)
 8001712:	f002 f923 	bl	800395c <HAL_ETH_GetReceivedFrame_IT>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <low_level_input+0x34>
    return NULL;
 800171c:	2300      	movs	r3, #0
 800171e:	e092      	b.n	8001846 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = EthHandle.RxFrameInfos.length;
 8001720:	4b4b      	ldr	r3, [pc, #300]	; (8001850 <low_level_input+0x164>)
 8001722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001724:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 8001726:	4b4a      	ldr	r3, [pc, #296]	; (8001850 <low_level_input+0x164>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 800172c:	89fb      	ldrh	r3, [r7, #14]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8001732:	89fb      	ldrh	r3, [r7, #14]
 8001734:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001738:	4619      	mov	r1, r3
 800173a:	2000      	movs	r0, #0
 800173c:	f00c f820 	bl	800d780 <pbuf_alloc>
 8001740:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8001742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001744:	2b00      	cmp	r3, #0
 8001746:	d04b      	beq.n	80017e0 <low_level_input+0xf4>
  {
    dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 8001748:	4b41      	ldr	r3, [pc, #260]	; (8001850 <low_level_input+0x164>)
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
    
    for(q = p; q != NULL; q = q->next)
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
 8001756:	e040      	b.n	80017da <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8001758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175a:	895b      	ldrh	r3, [r3, #10]
 800175c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size */
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8001762:	e021      	b.n	80017a8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8001764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	18d0      	adds	r0, r2, r3
 800176c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	18d1      	adds	r1, r2, r3
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8001778:	1a9b      	subs	r3, r3, r2
 800177a:	461a      	mov	r2, r3
 800177c:	f013 fa14 	bl	8014ba8 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	4413      	add	r3, r2
 8001792:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8001796:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80017a2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d8d6      	bhi.n	8001764 <low_level_input+0x78>
      }
      
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80017b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	18d0      	adds	r0, r2, r3
 80017be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	4413      	add	r3, r2
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	4619      	mov	r1, r3
 80017c8:	f013 f9ee 	bl	8014ba8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	4413      	add	r3, r2
 80017d2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80017d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80017da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1bb      	bne.n	8001758 <low_level_input+0x6c>
    }
  }
    
  /* Release descriptors to DMA */
  /* Point to first descriptor */
  dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <low_level_input+0x164>)
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	623b      	str	r3, [r7, #32]
  /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	e00b      	b.n	8001804 <low_level_input+0x118>
  {  
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	601a      	str	r2, [r3, #0]
    dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	623b      	str	r3, [r7, #32]
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	3301      	adds	r3, #1
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <low_level_input+0x164>)
 8001806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	429a      	cmp	r2, r3
 800180c:	d3ee      	bcc.n	80017ec <low_level_input+0x100>
  }
    
  /* Clear Segment_Count */
  EthHandle.RxFrameInfos.SegCount =0;
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <low_level_input+0x164>)
 8001810:	2200      	movs	r2, #0
 8001812:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <low_level_input+0x164>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	f241 0314 	movw	r3, #4116	; 0x1014
 800181c:	4413      	add	r3, r2
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00d      	beq.n	8001844 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    EthHandle.Instance->DMASR = ETH_DMASR_RBUS;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <low_level_input+0x164>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001830:	4413      	add	r3, r2
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    EthHandle.Instance->DMARPDR = 0;
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <low_level_input+0x164>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	f241 0308 	movw	r3, #4104	; 0x1008
 800183e:	4413      	add	r3, r2
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
  }
  return p;
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001846:	4618      	mov	r0, r3
 8001848:	3730      	adds	r7, #48	; 0x30
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20006918 	.word	0x20006918

08001854 <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input( void const * argument )
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <ethernetif_input+0x58>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	4618      	mov	r0, r3
 800186a:	f005 ff8f 	bl	800778c <osSemaphoreWait>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f5      	bne.n	8001860 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8001874:	480e      	ldr	r0, [pc, #56]	; (80018b0 <ethernetif_input+0x5c>)
 8001876:	f013 f8f3 	bl	8014a60 <sys_mutex_lock>

        p = low_level_input( netif );
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f7ff ff36 	bl	80016ec <low_level_input>
 8001880:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00a      	beq.n	800189e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	68f9      	ldr	r1, [r7, #12]
 800188e:	68b8      	ldr	r0, [r7, #8]
 8001890:	4798      	blx	r3
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8001898:	68b8      	ldr	r0, [r7, #8]
 800189a:	f00c fa55 	bl	800dd48 <pbuf_free>
          }
        }

        UNLOCK_TCPIP_CORE();
 800189e:	4804      	ldr	r0, [pc, #16]	; (80018b0 <ethernetif_input+0x5c>)
 80018a0:	f013 f8ed 	bl	8014a7e <sys_mutex_unlock>

      }while(p!=NULL);
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1e4      	bne.n	8001874 <ethernetif_input+0x20>
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80018aa:	e7d9      	b.n	8001860 <ethernetif_input+0xc>
 80018ac:	20000234 	.word	0x20000234
 80018b0:	20006a5c 	.word	0x20006a5c

080018b4 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d106      	bne.n	80018d0 <ethernetif_init+0x1c>
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <ethernetif_init+0x48>)
 80018c4:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 80018c8:	490d      	ldr	r1, [pc, #52]	; (8001900 <ethernetif_init+0x4c>)
 80018ca:	480e      	ldr	r0, [pc, #56]	; (8001904 <ethernetif_init+0x50>)
 80018cc:	f013 feb0 	bl	8015630 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2273      	movs	r2, #115	; 0x73
 80018d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2274      	movs	r2, #116	; 0x74
 80018dc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <ethernetif_init+0x54>)
 80018e4:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a08      	ldr	r2, [pc, #32]	; (800190c <ethernetif_init+0x58>)
 80018ea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fdbd 	bl	800146c <low_level_init>

  return ERR_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	0801906c 	.word	0x0801906c
 8001900:	080190e0 	.word	0x080190e0
 8001904:	080190f0 	.word	0x080190f0
 8001908:	0800aaa1 	.word	0x0800aaa1
 800190c:	080015b1 	.word	0x080015b1

08001910 <sys_now>:
  *         when LWIP_TIMERS == 1 and NO_SYS == 1
  * @param  None
  * @retval Time
  */
u32_t sys_now(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001914:	f001 fb3a 	bl	8002f8c <HAL_GetTick>
 8001918:	4603      	mov	r3, r0
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001924:	f3bf 8f4f 	dsb	sy
}
 8001928:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192a:	f3bf 8f6f 	isb	sy
}
 800192e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001930:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <SCB_EnableICache+0x48>)
 8001932:	2200      	movs	r2, #0
 8001934:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001938:	f3bf 8f4f 	dsb	sy
}
 800193c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800193e:	f3bf 8f6f 	isb	sy
}
 8001942:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <SCB_EnableICache+0x48>)
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	4a07      	ldr	r2, [pc, #28]	; (8001968 <SCB_EnableICache+0x48>)
 800194a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001950:	f3bf 8f4f 	dsb	sy
}
 8001954:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001956:	f3bf 8f6f 	isb	sy
}
 800195a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <SCB_EnableDCache+0x84>)
 8001974:	2200      	movs	r2, #0
 8001976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800197a:	f3bf 8f4f 	dsb	sy
}
 800197e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001980:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <SCB_EnableDCache+0x84>)
 8001982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001986:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	0b5b      	lsrs	r3, r3, #13
 800198c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001990:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800199a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	015a      	lsls	r2, r3, #5
 80019a0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80019a4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80019aa:	4911      	ldr	r1, [pc, #68]	; (80019f0 <SCB_EnableDCache+0x84>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1e5a      	subs	r2, r3, #1
 80019b6:	60ba      	str	r2, [r7, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1ef      	bne.n	800199c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1e5a      	subs	r2, r3, #1
 80019c0:	60fa      	str	r2, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1e5      	bne.n	8001992 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80019c6:	f3bf 8f4f 	dsb	sy
}
 80019ca:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <SCB_EnableDCache+0x84>)
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	4a07      	ldr	r2, [pc, #28]	; (80019f0 <SCB_EnableDCache+0x84>)
 80019d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d8:	f3bf 8f4f 	dsb	sy
}
 80019dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019de:	f3bf 8f6f 	isb	sy
}
 80019e2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80019f4:	b5b0      	push	{r4, r5, r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Device memory for ETH DMA descriptors */
  MPU_Config();
 80019fa:	f000 f8e1 	bl	8001bc0 <MPU_Config>
  
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 80019fe:	f000 f921 	bl	8001c44 <CPU_CACHE_Enable>
       - Configure the Flash ART accelerator on ITCM interface
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();  
 8001a02:	f001 fa91 	bl	8002f28 <HAL_Init>
  
  /* Configure the system clock to 216 MHz */
  SystemClock_Config(); 
 8001a06:	f000 f895 	bl	8001b34 <SystemClock_Config>

  MX_GPIO_Init();
 8001a0a:	f000 f923 	bl	8001c54 <MX_GPIO_Init>

  /*configure LED1 and LED3 */
  BSP_LED_Init(LED1);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f001 f9d4 	bl	8002dbc <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8001a14:	2001      	movs	r0, #1
 8001a16:	f001 f9d1 	bl	8002dbc <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	f001 f9ce 	bl	8002dbc <BSP_LED_Init>

  /* Init thread */
#if defined(__GNUC__)
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <main+0x80>)
 8001a22:	1d3c      	adds	r4, r7, #4
 8001a24:	461d      	mov	r5, r3
 8001a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a2a:	682b      	ldr	r3, [r5, #0]
 8001a2c:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 2);
#endif
  
  osThreadCreate (osThread(Start), NULL);
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f005 fdaf 	bl	8007596 <osThreadCreate>

  /* Start scheduler */
  osKernelStart();
 8001a38:	f005 fd96 	bl	8007568 <osKernelStart>

  while (1)
  {
    /* USER CODE END WHILE */

	  if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 8001a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <main+0x84>)
 8001a42:	f002 fdcd 	bl	80045e0 <HAL_GPIO_ReadPin>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f7      	beq.n	8001a3c <main+0x48>
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2101      	movs	r1, #1
 8001a50:	480a      	ldr	r0, [pc, #40]	; (8001a7c <main+0x88>)
 8001a52:	f002 fddd 	bl	8004610 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	4808      	ldr	r0, [pc, #32]	; (8001a7c <main+0x88>)
 8001a5c:	f002 fdd8 	bl	8004610 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <main+0x88>)
 8001a68:	f002 fdd2 	bl	8004610 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, DIR2_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOE, DIR3_Pin, GPIO_PIN_SET);
		//  HAL_GPIO_WritePin(GPIOE, RELAY1_ONOFF_Pin, GPIO_PIN_SET);
		//  HAL_GPIO_WritePin(GPIOE, RELAY1_UPDOWN_Pin, GPIO_PIN_SET);
		  */
		  HAL_Delay(10);
 8001a6c:	200a      	movs	r0, #10
 8001a6e:	f001 fa99 	bl	8002fa4 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 8001a72:	e7e3      	b.n	8001a3c <main+0x48>
 8001a74:	08019128 	.word	0x08019128
 8001a78:	40020800 	.word	0x40020800
 8001a7c:	40020400 	.word	0x40020400

08001a80 <StartThread>:
  * @brief  Start Thread 
  * @param  argument not used
  * @retval None
  */
static void StartThread(void const * argument)
{ 
 8001a80:	b5b0      	push	{r4, r5, r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	//todo HAL_UART_Transmit(&huart3, "tcpip_init\r\n", 12, 100);
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f006 fd0a 	bl	80084a4 <tcpip_init>
  
  //todo HAL_UART_Transmit(&huart3, "Netif_Config\r\n", 14, 100);
  /* Initialize the LwIP stack */
  Netif_Config();
 8001a90:	f000 f81c 	bl	8001acc <Netif_Config>
//  }


  //todo HAL_UART_Transmit(&huart3, "tcp_echoserver_init_Before\r\n", 28, 100);
	/* tcp echo server Init */
	tcp_echoserver_init();
 8001a94:	f000 fa88 	bl	8001fa8 <tcp_echoserver_init>
	//todo HAL_UART_Transmit(&huart3, "tcp_echoserver_init\r\n", 21, 100);

  
  /* Notify user about the network interface config */
  User_notification(&gnetif);
 8001a98:	480a      	ldr	r0, [pc, #40]	; (8001ac4 <StartThread+0x44>)
 8001a9a:	f7ff fbb7 	bl	800120c <User_notification>
  
#ifdef USE_DHCP
  /* Start DHCPClient */
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <StartThread+0x48>)
 8001aa0:	f107 040c 	add.w	r4, r7, #12
 8001aa4:	461d      	mov	r5, r3
 8001aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	4904      	ldr	r1, [pc, #16]	; (8001ac4 <StartThread+0x44>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f005 fd6e 	bl	8007596 <osThreadCreate>

  for( ;; )
  {
	  //todo HAL_UART_Transmit(&huart3, "osThreadTerminate_Before\r\n", 26, 100);
    /* Delete the Init Thread */ 
    osThreadTerminate(NULL);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f005 fd92 	bl	80075e4 <osThreadTerminate>
 8001ac0:	e7fb      	b.n	8001aba <StartThread+0x3a>
 8001ac2:	bf00      	nop
 8001ac4:	200069e0 	.word	0x200069e0
 8001ac8:	0801913c 	.word	0x0801913c

08001acc <Netif_Config>:
  * @brief  Initializes the lwIP stack
  * @param  None
  * @retval None
  */
static void Netif_Config(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af04      	add	r7, sp, #16
  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;
 
#ifdef USE_DHCP
  ip_addr_set_zero_ip4(&ipaddr);
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
  ip_addr_set_zero_ip4(&netmask);
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
  ip_addr_set_zero_ip4(&gw);
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif /* USE_DHCP */
  
  /* add the network interface */    
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	f107 0208 	add.w	r2, r7, #8
 8001ae4:	f107 010c 	add.w	r1, r7, #12
 8001ae8:	480f      	ldr	r0, [pc, #60]	; (8001b28 <Netif_Config+0x5c>)
 8001aea:	9002      	str	r0, [sp, #8]
 8001aec:	480f      	ldr	r0, [pc, #60]	; (8001b2c <Netif_Config+0x60>)
 8001aee:	9001      	str	r0, [sp, #4]
 8001af0:	2000      	movs	r0, #0
 8001af2:	9000      	str	r0, [sp, #0]
 8001af4:	480e      	ldr	r0, [pc, #56]	; (8001b30 <Netif_Config+0x64>)
 8001af6:	f00b fb7d 	bl	800d1f4 <netif_add>
  
  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <Netif_Config+0x64>)
 8001afc:	f00b fd34 	bl	800d568 <netif_set_default>
  
  if (netif_is_link_up(&gnetif))
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <Netif_Config+0x64>)
 8001b02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <Netif_Config+0x4e>
  {
    /* When the netif is fully configured this function must be called.*/
    netif_set_up(&gnetif);
 8001b12:	4807      	ldr	r0, [pc, #28]	; (8001b30 <Netif_Config+0x64>)
 8001b14:	f00b fd38 	bl	800d588 <netif_set_up>
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }
}
 8001b18:	e002      	b.n	8001b20 <Netif_Config+0x54>
    netif_set_down(&gnetif);
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <Netif_Config+0x64>)
 8001b1c:	f00b fda0 	bl	800d660 <netif_set_down>
}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	08008461 	.word	0x08008461
 8001b2c:	080018b5 	.word	0x080018b5
 8001b30:	200069e0 	.word	0x200069e0

08001b34 <SystemClock_Config>:
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b092      	sub	sp, #72	; 0x48
 8001b38:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b3e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b42:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b52:	2308      	movs	r3, #8
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8001b56:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001b60:	2309      	movs	r3, #9
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 fdbc 	bl	80046e4 <HAL_RCC_OscConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8001b72:	f000 f822 	bl	8001bba <Error_Handler>
  }

  /* activate the OverDrive to reach the 216 Mhz Frequency */
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b76:	f002 fd65 	bl	8004644 <HAL_PWREx_EnableOverDrive>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001b80:	f000 f81b 	bl	8001bba <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001b84:	230f      	movs	r3, #15
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8001b90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9a:	647b      	str	r3, [r7, #68]	; 0x44
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001b9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ba0:	2107      	movs	r1, #7
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f003 f842 	bl	8004c2c <HAL_RCC_ClockConfig>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001bae:	f000 f804 	bl	8001bba <Error_Handler>
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3748      	adds	r7, #72	; 0x48
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 8001bbe:	e7fe      	b.n	8001bbe <Error_Handler+0x4>

08001bc0 <MPU_Config>:
  * @brief  Configure the MPU attributes .
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;
  
  /* Disable the MPU */
  HAL_MPU_Disable();
 8001bc6:	f001 faf3 	bl	80031b0 <HAL_MPU_Disable>
  
  /* Configure the MPU as Normal Non Cacheable for Ethernet Buffers in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x2004C000;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <MPU_Config+0x80>)
 8001bd0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001bd2:	230d      	movs	r3, #13
 8001bd4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001be2:	2301      	movs	r3, #1
 8001be4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001bea:	2301      	movs	r3, #1
 8001bec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 fb11 	bl	8003220 <HAL_MPU_ConfigRegion>
  
  /* Configure the MPU as Device for Ethernet Descriptors in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x2004C000;
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <MPU_Config+0x80>)
 8001c04:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001c06:	2307      	movs	r3, #7
 8001c08:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001c16:	2301      	movs	r3, #1
 8001c18:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001c22:	2300      	movs	r3, #0
 8001c24:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 faf7 	bl	8003220 <HAL_MPU_ConfigRegion>
  
  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001c32:	2004      	movs	r0, #4
 8001c34:	f001 fad4 	bl	80031e0 <HAL_MPU_Enable>
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2004c000 	.word	0x2004c000

08001c44 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Enable I-Cache */
  SCB_EnableICache();
 8001c48:	f7ff fe6a 	bl	8001920 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 8001c4c:	f7ff fe8e 	bl	800196c <SCB_EnableDCache>
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08e      	sub	sp, #56	; 0x38
 8001c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6a:	4b77      	ldr	r3, [pc, #476]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a76      	ldr	r2, [pc, #472]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b74      	ldr	r3, [pc, #464]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	623b      	str	r3, [r7, #32]
 8001c80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c82:	4b71      	ldr	r3, [pc, #452]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a70      	ldr	r2, [pc, #448]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001c88:	f043 0320 	orr.w	r3, r3, #32
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b6e      	ldr	r3, [pc, #440]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c9a:	4b6b      	ldr	r3, [pc, #428]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a6a      	ldr	r2, [pc, #424]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b68      	ldr	r3, [pc, #416]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a64      	ldr	r2, [pc, #400]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b62      	ldr	r3, [pc, #392]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a5e      	ldr	r2, [pc, #376]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b5c      	ldr	r3, [pc, #368]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ce2:	4b59      	ldr	r3, [pc, #356]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a58      	ldr	r2, [pc, #352]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001ce8:	f043 0310 	orr.w	r3, r3, #16
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b56      	ldr	r3, [pc, #344]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfa:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a52      	ldr	r2, [pc, #328]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001d00:	f043 0308 	orr.w	r3, r3, #8
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b50      	ldr	r3, [pc, #320]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d12:	4b4d      	ldr	r3, [pc, #308]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a4c      	ldr	r2, [pc, #304]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <MX_GPIO_Init+0x1f4>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d30:	4846      	ldr	r0, [pc, #280]	; (8001e4c <MX_GPIO_Init+0x1f8>)
 8001d32:	f002 fc6d 	bl	8004610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	f244 0181 	movw	r1, #16513	; 0x4081
 8001d3c:	4844      	ldr	r0, [pc, #272]	; (8001e50 <MX_GPIO_Init+0x1fc>)
 8001d3e:	f002 fc67 	bl	8004610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR2_Pin, GPIO_PIN_RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2180      	movs	r1, #128	; 0x80
 8001d46:	4843      	ldr	r0, [pc, #268]	; (8001e54 <MX_GPIO_Init+0x200>)
 8001d48:	f002 fc62 	bl	8004610 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOF, PILLAR_UPDOWN_Pin, GPIO_PIN_SET);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d52:	483e      	ldr	r0, [pc, #248]	; (8001e4c <MX_GPIO_Init+0x1f8>)
 8001d54:	f002 fc5c 	bl	8004610 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STEP3_Pin|STEP2_Pin|STEP1_Pin|DIR3_Pin, GPIO_PIN_RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8001d5e:	483e      	ldr	r0, [pc, #248]	; (8001e58 <MX_GPIO_Init+0x204>)
 8001d60:	f002 fc56 	bl	8004610 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOE, MAGNET1_ONOFF_Pin|MAGNET2_ONOFF_Pin|PILLAR_ONOFF_Pin, GPIO_PIN_SET);
 8001d64:	2201      	movs	r2, #1
 8001d66:	f44f 41a4 	mov.w	r1, #20992	; 0x5200
 8001d6a:	483a      	ldr	r0, [pc, #232]	; (8001e54 <MX_GPIO_Init+0x200>)
 8001d6c:	f002 fc50 	bl	8004610 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2140      	movs	r1, #64	; 0x40
 8001d74:	4839      	ldr	r0, [pc, #228]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001d76:	f002 fc4b 	bl	8004610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d80:	4b37      	ldr	r3, [pc, #220]	; (8001e60 <MX_GPIO_Init+0x20c>)
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4835      	ldr	r0, [pc, #212]	; (8001e64 <MX_GPIO_Init+0x210>)
 8001d90:	f002 fa7a 	bl	8004288 <HAL_GPIO_Init>


  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001d94:	f244 0381 	movw	r3, #16513	; 0x4081
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001daa:	4619      	mov	r1, r3
 8001dac:	4828      	ldr	r0, [pc, #160]	; (8001e50 <MX_GPIO_Init+0x1fc>)
 8001dae:	f002 fa6b 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY1_UPDOWN_Pin */


  /*Configure GPIO pins : STEP3_Pin STEP2_Pin STEP1_Pin DIR3_Pin */
  GPIO_InitStruct.Pin = STEP3_Pin|STEP2_Pin|STEP1_Pin|DIR3_Pin|DIR4_Pin;
 8001db2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4823      	ldr	r0, [pc, #140]	; (8001e58 <MX_GPIO_Init+0x204>)
 8001dcc:	f002 fa5c 	bl	8004288 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DIR5_Pin|STEP5_Pin|STEP4_Pin|MAGNET1_ONOFF_Pin|MAGNET2_ONOFF_Pin|PILLAR_ONOFF_Pin|DIR2_Pin;
 8001dd0:	f44f 43fd 	mov.w	r3, #32384	; 0x7e80
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001dde:	2301      	movs	r3, #1
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de6:	4619      	mov	r1, r3
 8001de8:	481a      	ldr	r0, [pc, #104]	; (8001e54 <MX_GPIO_Init+0x200>)
 8001dea:	f002 fa4d 	bl	8004288 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DIR6_Pin|STEP6_Pin|PILLAR_UPDOWN_Pin|DIR1_Pin;
 8001dee:	f246 4308 	movw	r3, #25608	; 0x6408
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e04:	4619      	mov	r1, r3
 8001e06:	4811      	ldr	r0, [pc, #68]	; (8001e4c <MX_GPIO_Init+0x1f8>)
 8001e08:	f002 fa3e 	bl	8004288 <HAL_GPIO_Init>


  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e0c:	2340      	movs	r3, #64	; 0x40
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e20:	4619      	mov	r1, r3
 8001e22:	480e      	ldr	r0, [pc, #56]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001e24:	f002 fa30 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4808      	ldr	r0, [pc, #32]	; (8001e5c <MX_GPIO_Init+0x208>)
 8001e3c:	f002 fa24 	bl	8004288 <HAL_GPIO_Init>

}
 8001e40:	bf00      	nop
 8001e42:	3738      	adds	r7, #56	; 0x38
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40021400 	.word	0x40021400
 8001e50:	40020400 	.word	0x40020400
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40020c00 	.word	0x40020c00
 8001e5c:	40021800 	.word	0x40021800
 8001e60:	10110000 	.word	0x10110000
 8001e64:	40020800 	.word	0x40020800

08001e68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	2036      	movs	r0, #54	; 0x36
 8001e7e:	f001 f96d 	bl	800315c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e82:	2036      	movs	r0, #54	; 0x36
 8001e84:	f001 f986 	bl	8003194 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e88:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <HAL_InitTick+0xb4>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	4a23      	ldr	r2, [pc, #140]	; (8001f1c <HAL_InitTick+0xb4>)
 8001e8e:	f043 0310 	orr.w	r3, r3, #16
 8001e92:	6413      	str	r3, [r2, #64]	; 0x40
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <HAL_InitTick+0xb4>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ea0:	f107 020c 	add.w	r2, r7, #12
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 f8ac 	bl	8005008 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d103      	bne.n	8001ec2 <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001eba:	f003 f891 	bl	8004fe0 <HAL_RCC_GetPCLK1Freq>
 8001ebe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001ec0:	e004      	b.n	8001ecc <HAL_InitTick+0x64>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001ec2:	f003 f88d 	bl	8004fe0 <HAL_RCC_GetPCLK1Freq>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ece:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <HAL_InitTick+0xb8>)
 8001ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed4:	0c9b      	lsrs	r3, r3, #18
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_InitTick+0xbc>)
 8001edc:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <HAL_InitTick+0xc0>)
 8001ede:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8001ee0:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <HAL_InitTick+0xbc>)
 8001ee2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ee6:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8001ee8:	4a0e      	ldr	r2, [pc, #56]	; (8001f24 <HAL_InitTick+0xbc>)
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <HAL_InitTick+0xbc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_InitTick+0xbc>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001efa:	480a      	ldr	r0, [pc, #40]	; (8001f24 <HAL_InitTick+0xbc>)
 8001efc:	f003 f8b6 	bl	800506c <HAL_TIM_Base_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d104      	bne.n	8001f10 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8001f06:	4807      	ldr	r0, [pc, #28]	; (8001f24 <HAL_InitTick+0xbc>)
 8001f08:	f003 f8e6 	bl	80050d8 <HAL_TIM_Base_Start_IT>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	e000      	b.n	8001f12 <HAL_InitTick+0xaa>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3730      	adds	r7, #48	; 0x30
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	431bde83 	.word	0x431bde83
 8001f24:	20006a18 	.word	0x20006a18
 8001f28:	40001000 	.word	0x40001000

08001f2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 8001f34:	f001 f816 	bl	8002f64 <HAL_IncTick>
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <TIM6_DAC_IRQHandler+0x10>)
 8001f46:	f003 f8f1 	bl	800512c <HAL_TIM_IRQHandler>
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20006a18 	.word	0x20006a18

08001f54 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <HardFault_Handler+0x4>

08001f68 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <MemManage_Handler+0x4>

08001f6e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <BusFault_Handler+0x4>

08001f74 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <UsageFault_Handler+0x4>

08001f7a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  osSystickHandler();
 8001f8c:	f005 fd48 	bl	8007a20 <osSystickHandler>
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <ETH_IRQHandler>:
  * @brief  This function handles Ethernet interrupt request.
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  HAL_ETH_IRQHandler(&EthHandle);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <ETH_IRQHandler+0x10>)
 8001f9a:	f001 fd67 	bl	8003a6c <HAL_ETH_IRQHandler>
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20006918 	.word	0x20006918

08001fa8 <tcp_echoserver_init>:
 * @brief  Initializes the tcp echo server
 * @param  None
 * @retval None
 */
void tcp_echoserver_init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
	/* create new tcp pcb */
	tcp_echoserver_pcb = tcp_new();
 8001fae:	f00d fcd7 	bl	800f960 <tcp_new>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4a16      	ldr	r2, [pc, #88]	; (8002010 <tcp_echoserver_init+0x68>)
 8001fb6:	6013      	str	r3, [r2, #0]

	if (tcp_echoserver_pcb != NULL)
 8001fb8:	4b15      	ldr	r3, [pc, #84]	; (8002010 <tcp_echoserver_init+0x68>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d022      	beq.n	8002006 <tcp_echoserver_init+0x5e>
	{
		err_t err;

		/* bind echo_pcb to port 7 (ECHO protocol) */
		err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, SERVER_PORT);
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <tcp_echoserver_init+0x68>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2250      	movs	r2, #80	; 0x50
 8001fc6:	4913      	ldr	r1, [pc, #76]	; (8002014 <tcp_echoserver_init+0x6c>)
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f00c fc63 	bl	800e894 <tcp_bind>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]

		if (err == ERR_OK)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10f      	bne.n	8001ffa <tcp_echoserver_init+0x52>
		{
			/* start tcp listening for echo_pcb */
			tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <tcp_echoserver_init+0x68>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	21ff      	movs	r1, #255	; 0xff
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f00c fd0f 	bl	800ea04 <tcp_listen_with_backlog>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4a09      	ldr	r2, [pc, #36]	; (8002010 <tcp_echoserver_init+0x68>)
 8001fea:	6013      	str	r3, [r2, #0]

			/* initialize LwIP tcp_accept callback function */
			tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <tcp_echoserver_init+0x68>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4909      	ldr	r1, [pc, #36]	; (8002018 <tcp_echoserver_init+0x70>)
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f00d fd32 	bl	800fa5c <tcp_accept>
		{
			/* deallocate the pcb */
			memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
		}
	}
}
 8001ff8:	e005      	b.n	8002006 <tcp_echoserver_init+0x5e>
			memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <tcp_echoserver_init+0x68>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4619      	mov	r1, r3
 8002000:	2001      	movs	r0, #1
 8002002:	f00b f8c5 	bl	800d190 <memp_free>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000238 	.word	0x20000238
 8002014:	08019c70 	.word	0x08019c70
 8002018:	0800201d 	.word	0x0800201d

0800201c <tcp_echoserver_accept>:
 * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
 * @param  err: not used
 * @retval err_t: error status
 */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	4613      	mov	r3, r2
 8002028:	71fb      	strb	r3, [r7, #7]

	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);

	/* set priority for the newly accepted tcp connection newpcb */
	tcp_setprio(newpcb, TCP_PRIO_MIN);
 800202a:	2101      	movs	r1, #1
 800202c:	68b8      	ldr	r0, [r7, #8]
 800202e:	f00d fad1 	bl	800f5d4 <tcp_setprio>

	/* allocate structure es to maintain tcp connection informations */
	es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8002032:	200c      	movs	r0, #12
 8002034:	f00a fed8 	bl	800cde8 <mem_malloc>
 8002038:	6138      	str	r0, [r7, #16]
	if (es != NULL)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d01f      	beq.n	8002080 <tcp_echoserver_accept+0x64>
	{
		es->state = ES_ACCEPTED;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
		es->pcb = newpcb;
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	605a      	str	r2, [r3, #4]
		es->retries = 0;
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	2200      	movs	r2, #0
 8002050:	705a      	strb	r2, [r3, #1]
		es->p = NULL;
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]

		/* pass newly allocated es structure as argument to newpcb */
		tcp_arg(newpcb, es);
 8002058:	6939      	ldr	r1, [r7, #16]
 800205a:	68b8      	ldr	r0, [r7, #8]
 800205c:	f00d fc88 	bl	800f970 <tcp_arg>

		/* initialize lwip tcp_recv callback function for newpcb  */
		tcp_recv(newpcb, tcp_echoserver_recv);
 8002060:	490d      	ldr	r1, [pc, #52]	; (8002098 <tcp_echoserver_accept+0x7c>)
 8002062:	68b8      	ldr	r0, [r7, #8]
 8002064:	f00d fc96 	bl	800f994 <tcp_recv>

		/* initialize lwip tcp_err callback function for newpcb  */
		tcp_err(newpcb, tcp_echoserver_error);
 8002068:	490c      	ldr	r1, [pc, #48]	; (800209c <tcp_echoserver_accept+0x80>)
 800206a:	68b8      	ldr	r0, [r7, #8]
 800206c:	f00d fcd4 	bl	800fa18 <tcp_err>

		/* initialize lwip tcp_poll callback function for newpcb */
		tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8002070:	2200      	movs	r2, #0
 8002072:	490b      	ldr	r1, [pc, #44]	; (80020a0 <tcp_echoserver_accept+0x84>)
 8002074:	68b8      	ldr	r0, [r7, #8]
 8002076:	f00d fd09 	bl	800fa8c <tcp_poll>

		ret_err = ERR_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	75fb      	strb	r3, [r7, #23]
 800207e:	e005      	b.n	800208c <tcp_echoserver_accept+0x70>
	}
	else
	{
		/*  close tcp connection */
		tcp_echoserver_connection_close(newpcb, es);
 8002080:	6939      	ldr	r1, [r7, #16]
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	f000 fe73 	bl	8002d6e <tcp_echoserver_connection_close>
		/* return memory error */
		ret_err = ERR_MEM;
 8002088:	23ff      	movs	r3, #255	; 0xff
 800208a:	75fb      	strb	r3, [r7, #23]
	}
	return ret_err;
 800208c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	080029cd 	.word	0x080029cd
 800209c:	08002bf5 	.word	0x08002bf5
 80020a0:	08002c19 	.word	0x08002c19
 80020a4:	00000000 	.word	0x00000000

080020a8 <parse_string>:


#define DEBUG_OK {BSP_LED_On(LED2); BSP_LED_Off(LED3);}
#define DEBUG_BAD {BSP_LED_On(LED3); BSP_LED_Off(LED2);}

char *  parse_string(char * s, const unsigned int len){
 80020a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ac:	b0b0      	sub	sp, #192	; 0xc0
 80020ae:	af0e      	add	r7, sp, #56	; 0x38
 80020b0:	6278      	str	r0, [r7, #36]	; 0x24
 80020b2:	6239      	str	r1, [r7, #32]
	BSP_LED_Off(LED3);
 80020b4:	2002      	movs	r0, #2
 80020b6:	f000 fee7 	bl	8002e88 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f000 fee4 	bl	8002e88 <BSP_LED_Off>

#define str_robot_len 5 // robot
	static char str_robot[str_robot_len] = {"robot"};
	static char str_GO[2] = {"GO"};

	float drive1 = 0;
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	65fb      	str	r3, [r7, #92]	; 0x5c
	float drive2 = 0;
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	65bb      	str	r3, [r7, #88]	; 0x58
	float instrument = 0;
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	657b      	str	r3, [r7, #84]	; 0x54
	float kolonna=0;
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	653b      	str	r3, [r7, #80]	; 0x50
	float rotation=0;
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	float rezka=0;
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	64bb      	str	r3, [r7, #72]	; 0x48
	float magnit1=0;
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	647b      	str	r3, [r7, #68]	; 0x44
	float magnit2=0;
 80020ea:	f04f 0300 	mov.w	r3, #0
 80020ee:	643b      	str	r3, [r7, #64]	; 0x40

	int velosity_delay = 1; //
 80020f0:	2301      	movs	r3, #1
 80020f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	int steps_count = 10;
 80020f4:	230a      	movs	r3, #10
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38

	int pos = -1;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
	char * pch = NULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	633b      	str	r3, [r7, #48]	; 0x30

	pch = strtok(s, ":");
 8002102:	49c2      	ldr	r1, [pc, #776]	; (800240c <parse_string+0x364>)
 8002104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002106:	f014 f961 	bl	80163cc <strtok>
 800210a:	6338      	str	r0, [r7, #48]	; 0x30
	//    printf("pch = %s\n", pch);
	  if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 800210c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002110:	48bf      	ldr	r0, [pc, #764]	; (8002410 <parse_string+0x368>)
 8002112:	f002 fa65 	bl	80045e0 <HAL_GPIO_ReadPin>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <parse_string+0x8a>
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 800211c:	2201      	movs	r2, #1
 800211e:	2101      	movs	r1, #1
 8002120:	48bc      	ldr	r0, [pc, #752]	; (8002414 <parse_string+0x36c>)
 8002122:	f002 fa75 	bl	8004610 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8002126:	2201      	movs	r2, #1
 8002128:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800212c:	48b9      	ldr	r0, [pc, #740]	; (8002414 <parse_string+0x36c>)
 800212e:	f002 fa6f 	bl	8004610 <HAL_GPIO_WritePin>
	  }


	if(pch != NULL) {
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 842a 	beq.w	800298e <parse_string+0x8e6>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800213a:	2201      	movs	r2, #1
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	48b5      	ldr	r0, [pc, #724]	; (8002414 <parse_string+0x36c>)
 8002140:	f002 fa66 	bl	8004610 <HAL_GPIO_WritePin>
		pos = memcmp(s, &str_robot, str_robot_len);
 8002144:	2205      	movs	r2, #5
 8002146:	49b4      	ldr	r1, [pc, #720]	; (8002418 <parse_string+0x370>)
 8002148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800214a:	f012 fd1f 	bl	8014b8c <memcmp>
 800214e:	6378      	str	r0, [r7, #52]	; 0x34
		if(pos==0){   // в начале "robot"
 8002150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 841b 	bne.w	800298e <parse_string+0x8e6>
			pch = strtok(NULL, ":");   // следующая лексема GO
 8002158:	49ac      	ldr	r1, [pc, #688]	; (800240c <parse_string+0x364>)
 800215a:	2000      	movs	r0, #0
 800215c:	f014 f936 	bl	80163cc <strtok>
 8002160:	6338      	str	r0, [r7, #48]	; 0x30
			//            printf("pch = %s\n", pch);

			pos = memcmp(pch, &str_GO, 2);
 8002162:	2202      	movs	r2, #2
 8002164:	49ad      	ldr	r1, [pc, #692]	; (800241c <parse_string+0x374>)
 8002166:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002168:	f012 fd10 	bl	8014b8c <memcmp>
 800216c:	6378      	str	r0, [r7, #52]	; 0x34
			if(pos==0){   // в начале "GO"
 800216e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002170:	2b00      	cmp	r3, #0
 8002172:	f040 840c 	bne.w	800298e <parse_string+0x8e6>
				pch = strtok(NULL, ";");   // число drive1
 8002176:	49aa      	ldr	r1, [pc, #680]	; (8002420 <parse_string+0x378>)
 8002178:	2000      	movs	r0, #0
 800217a:	f014 f927 	bl	80163cc <strtok>
 800217e:	6338      	str	r0, [r7, #48]	; 0x30
				//                printf("pch = %s\n", pch);
				if (pch != NULL) {
 8002180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8403 	beq.w	800298e <parse_string+0x8e6>
					drive1 = atof(pch);
 8002188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800218a:	f012 fcc1 	bl	8014b10 <atof>
 800218e:	ec53 2b10 	vmov	r2, r3, d0
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f7fe fd47 	bl	8000c28 <__aeabi_d2f>
 800219a:	4603      	mov	r3, r0
 800219c:	65fb      	str	r3, [r7, #92]	; 0x5c

					pch = strtok(NULL, ";");   // число drive2
 800219e:	49a0      	ldr	r1, [pc, #640]	; (8002420 <parse_string+0x378>)
 80021a0:	2000      	movs	r0, #0
 80021a2:	f014 f913 	bl	80163cc <strtok>
 80021a6:	6338      	str	r0, [r7, #48]	; 0x30
					if (pch != NULL) {
 80021a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 83ef 	beq.w	800298e <parse_string+0x8e6>
						drive2 = atof(pch);
 80021b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021b2:	f012 fcad 	bl	8014b10 <atof>
 80021b6:	ec53 2b10 	vmov	r2, r3, d0
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f7fe fd33 	bl	8000c28 <__aeabi_d2f>
 80021c2:	4603      	mov	r3, r0
 80021c4:	65bb      	str	r3, [r7, #88]	; 0x58

						pch = strtok(NULL, ";");   // число instrument
 80021c6:	4996      	ldr	r1, [pc, #600]	; (8002420 <parse_string+0x378>)
 80021c8:	2000      	movs	r0, #0
 80021ca:	f014 f8ff 	bl	80163cc <strtok>
 80021ce:	6338      	str	r0, [r7, #48]	; 0x30
						if (pch != NULL) {
 80021d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 83db 	beq.w	800298e <parse_string+0x8e6>
							instrument = atof(pch);
 80021d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021da:	f012 fc99 	bl	8014b10 <atof>
 80021de:	ec53 2b10 	vmov	r2, r3, d0
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f7fe fd1f 	bl	8000c28 <__aeabi_d2f>
 80021ea:	4603      	mov	r3, r0
 80021ec:	657b      	str	r3, [r7, #84]	; 0x54

							pch = strtok(NULL, ";");   // число kolonna
 80021ee:	498c      	ldr	r1, [pc, #560]	; (8002420 <parse_string+0x378>)
 80021f0:	2000      	movs	r0, #0
 80021f2:	f014 f8eb 	bl	80163cc <strtok>
 80021f6:	6338      	str	r0, [r7, #48]	; 0x30
								if (pch != NULL) {
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 83c7 	beq.w	800298e <parse_string+0x8e6>
									kolonna = atof(pch);
 8002200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002202:	f012 fc85 	bl	8014b10 <atof>
 8002206:	ec53 2b10 	vmov	r2, r3, d0
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f7fe fd0b 	bl	8000c28 <__aeabi_d2f>
 8002212:	4603      	mov	r3, r0
 8002214:	653b      	str	r3, [r7, #80]	; 0x50
									pch = strtok(NULL, ";");   // число rotation
 8002216:	4982      	ldr	r1, [pc, #520]	; (8002420 <parse_string+0x378>)
 8002218:	2000      	movs	r0, #0
 800221a:	f014 f8d7 	bl	80163cc <strtok>
 800221e:	6338      	str	r0, [r7, #48]	; 0x30
										if (pch != NULL) {
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 83b3 	beq.w	800298e <parse_string+0x8e6>
											rotation = atof(pch);
 8002228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800222a:	f012 fc71 	bl	8014b10 <atof>
 800222e:	ec53 2b10 	vmov	r2, r3, d0
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f7fe fcf7 	bl	8000c28 <__aeabi_d2f>
 800223a:	4603      	mov	r3, r0
 800223c:	64fb      	str	r3, [r7, #76]	; 0x4c
											pch = strtok(NULL, ";");   // число rezka
 800223e:	4978      	ldr	r1, [pc, #480]	; (8002420 <parse_string+0x378>)
 8002240:	2000      	movs	r0, #0
 8002242:	f014 f8c3 	bl	80163cc <strtok>
 8002246:	6338      	str	r0, [r7, #48]	; 0x30
												if (pch != NULL) {
 8002248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 839f 	beq.w	800298e <parse_string+0x8e6>
													rezka = atof(pch);
 8002250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002252:	f012 fc5d 	bl	8014b10 <atof>
 8002256:	ec53 2b10 	vmov	r2, r3, d0
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f7fe fce3 	bl	8000c28 <__aeabi_d2f>
 8002262:	4603      	mov	r3, r0
 8002264:	64bb      	str	r3, [r7, #72]	; 0x48
													pch = strtok(NULL, ";");   // число magnit1
 8002266:	496e      	ldr	r1, [pc, #440]	; (8002420 <parse_string+0x378>)
 8002268:	2000      	movs	r0, #0
 800226a:	f014 f8af 	bl	80163cc <strtok>
 800226e:	6338      	str	r0, [r7, #48]	; 0x30
														if (pch != NULL) {
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 838b 	beq.w	800298e <parse_string+0x8e6>
															magnit1 = atof(pch);
 8002278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800227a:	f012 fc49 	bl	8014b10 <atof>
 800227e:	ec53 2b10 	vmov	r2, r3, d0
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f7fe fccf 	bl	8000c28 <__aeabi_d2f>
 800228a:	4603      	mov	r3, r0
 800228c:	647b      	str	r3, [r7, #68]	; 0x44

															pch = strtok(NULL, ";");   // число magnit2
 800228e:	4964      	ldr	r1, [pc, #400]	; (8002420 <parse_string+0x378>)
 8002290:	2000      	movs	r0, #0
 8002292:	f014 f89b 	bl	80163cc <strtok>
 8002296:	6338      	str	r0, [r7, #48]	; 0x30
																if (pch != NULL) {
 8002298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8377 	beq.w	800298e <parse_string+0x8e6>
																	magnit2 = atof(pch);
 80022a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022a2:	f012 fc35 	bl	8014b10 <atof>
 80022a6:	ec53 2b10 	vmov	r2, r3, d0
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe fcbb 	bl	8000c28 <__aeabi_d2f>
 80022b2:	4603      	mov	r3, r0
 80022b4:	643b      	str	r3, [r7, #64]	; 0x40
/////////////////
																	///////////////////
																	DEBUG_OK
 80022b6:	2001      	movs	r0, #1
 80022b8:	f000 fdcc 	bl	8002e54 <BSP_LED_On>
 80022bc:	2002      	movs	r0, #2
 80022be:	f000 fde3 	bl	8002e88 <BSP_LED_Off>
																	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	4853      	ldr	r0, [pc, #332]	; (8002414 <parse_string+0x36c>)
 80022c8:	f002 f9a2 	bl	8004610 <HAL_GPIO_WritePin>
																	/*
																	 *  robot:Go drive1, drive2 instrument
																	 *
																	 *
																	 * */
																	if (drive1 > 10) {
 80022cc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022dc:	dd34      	ble.n	8002348 <parse_string+0x2a0>
																	//

																		HAL_GPIO_WritePin(GPIOF, DIR1_Pin, GPIO_PIN_SET);
 80022de:	2201      	movs	r2, #1
 80022e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022e4:	484f      	ldr	r0, [pc, #316]	; (8002424 <parse_string+0x37c>)
 80022e6:	f002 f993 	bl	8004610 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022f0:	e024      	b.n	800233c <parse_string+0x294>
																			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80022f2:	2201      	movs	r2, #1
 80022f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022f8:	4846      	ldr	r0, [pc, #280]	; (8002414 <parse_string+0x36c>)
 80022fa:	f002 f989 	bl	8004610 <HAL_GPIO_WritePin>
																			HAL_GPIO_WritePin(GPIOD, STEP1_Pin, GPIO_PIN_SET);
 80022fe:	2201      	movs	r2, #1
 8002300:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002304:	4848      	ldr	r0, [pc, #288]	; (8002428 <parse_string+0x380>)
 8002306:	f002 f983 	bl	8004610 <HAL_GPIO_WritePin>
																			HAL_Delay(velosity_delay);
 800230a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fe49 	bl	8002fa4 <HAL_Delay>
																			HAL_GPIO_WritePin(GPIOD, STEP1_Pin, GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002318:	4843      	ldr	r0, [pc, #268]	; (8002428 <parse_string+0x380>)
 800231a:	f002 f979 	bl	8004610 <HAL_GPIO_WritePin>
																			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800231e:	2200      	movs	r2, #0
 8002320:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002324:	483b      	ldr	r0, [pc, #236]	; (8002414 <parse_string+0x36c>)
 8002326:	f002 f973 	bl	8004610 <HAL_GPIO_WritePin>
																			HAL_Delay(velosity_delay);
 800232a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fe39 	bl	8002fa4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 8002332:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002336:	3301      	adds	r3, #1
 8002338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800233c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002342:	429a      	cmp	r2, r3
 8002344:	dbd5      	blt.n	80022f2 <parse_string+0x24a>
 8002346:	e049      	b.n	80023dc <parse_string+0x334>
																		}
																		//

																	} else if (drive1 < -10 ){
 8002348:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800234c:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8002350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002358:	d534      	bpl.n	80023c4 <parse_string+0x31c>
																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);

																		HAL_GPIO_WritePin(GPIOF, DIR1_Pin, GPIO_PIN_RESET);
 800235a:	2200      	movs	r2, #0
 800235c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002360:	4830      	ldr	r0, [pc, #192]	; (8002424 <parse_string+0x37c>)
 8002362:	f002 f955 	bl	8004610 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800236c:	e024      	b.n	80023b8 <parse_string+0x310>
																			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800236e:	2201      	movs	r2, #1
 8002370:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002374:	4827      	ldr	r0, [pc, #156]	; (8002414 <parse_string+0x36c>)
 8002376:	f002 f94b 	bl	8004610 <HAL_GPIO_WritePin>
																			HAL_GPIO_WritePin(GPIOD, STEP1_Pin, GPIO_PIN_SET);
 800237a:	2201      	movs	r2, #1
 800237c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002380:	4829      	ldr	r0, [pc, #164]	; (8002428 <parse_string+0x380>)
 8002382:	f002 f945 	bl	8004610 <HAL_GPIO_WritePin>
																			HAL_Delay(velosity_delay);
 8002386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fe0b 	bl	8002fa4 <HAL_Delay>
																			HAL_GPIO_WritePin(GPIOD, STEP1_Pin, GPIO_PIN_RESET);
 800238e:	2200      	movs	r2, #0
 8002390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002394:	4824      	ldr	r0, [pc, #144]	; (8002428 <parse_string+0x380>)
 8002396:	f002 f93b 	bl	8004610 <HAL_GPIO_WritePin>
																			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800239a:	2200      	movs	r2, #0
 800239c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023a0:	481c      	ldr	r0, [pc, #112]	; (8002414 <parse_string+0x36c>)
 80023a2:	f002 f935 	bl	8004610 <HAL_GPIO_WritePin>
																			HAL_Delay(velosity_delay);
 80023a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fdfb 	bl	8002fa4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 80023ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023b2:	3301      	adds	r3, #1
 80023b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80023bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023be:	429a      	cmp	r2, r3
 80023c0:	dbd5      	blt.n	800236e <parse_string+0x2c6>
 80023c2:	e00b      	b.n	80023dc <parse_string+0x334>
																		}
																	}else {
																			HAL_GPIO_WritePin(GPIOF, DIR1_Pin, GPIO_PIN_RESET);
 80023c4:	2200      	movs	r2, #0
 80023c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ca:	4816      	ldr	r0, [pc, #88]	; (8002424 <parse_string+0x37c>)
 80023cc:	f002 f920 	bl	8004610 <HAL_GPIO_WritePin>
																			HAL_GPIO_WritePin(GPIOD, STEP1_Pin, GPIO_PIN_RESET);
 80023d0:	2200      	movs	r2, #0
 80023d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023d6:	4814      	ldr	r0, [pc, #80]	; (8002428 <parse_string+0x380>)
 80023d8:	f002 f91a 	bl	8004610 <HAL_GPIO_WritePin>
																	}

																	if (drive2 > 10) {
 80023dc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80023e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ec:	dd42      	ble.n	8002474 <parse_string+0x3cc>


																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80023ee:	2201      	movs	r2, #1
 80023f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023f4:	4807      	ldr	r0, [pc, #28]	; (8002414 <parse_string+0x36c>)
 80023f6:	f002 f90b 	bl	8004610 <HAL_GPIO_WritePin>

																		HAL_GPIO_WritePin(GPIOE, DIR2_Pin, GPIO_PIN_SET);
 80023fa:	2201      	movs	r2, #1
 80023fc:	2180      	movs	r1, #128	; 0x80
 80023fe:	480b      	ldr	r0, [pc, #44]	; (800242c <parse_string+0x384>)
 8002400:	f002 f906 	bl	8004610 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 8002404:	2300      	movs	r3, #0
 8002406:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002408:	e029      	b.n	800245e <parse_string+0x3b6>
 800240a:	bf00      	nop
 800240c:	08019150 	.word	0x08019150
 8002410:	40020800 	.word	0x40020800
 8002414:	40020400 	.word	0x40020400
 8002418:	20000000 	.word	0x20000000
 800241c:	20000008 	.word	0x20000008
 8002420:	08019154 	.word	0x08019154
 8002424:	40021400 	.word	0x40021400
 8002428:	40020c00 	.word	0x40020c00
 800242c:	40021000 	.word	0x40021000
																		HAL_GPIO_WritePin(GPIOD, STEP2_Pin, GPIO_PIN_SET);
 8002430:	2201      	movs	r2, #1
 8002432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002436:	48c2      	ldr	r0, [pc, #776]	; (8002740 <parse_string+0x698>)
 8002438:	f002 f8ea 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 800243c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fdb0 	bl	8002fa4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOD, STEP2_Pin, GPIO_PIN_RESET);
 8002444:	2200      	movs	r2, #0
 8002446:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800244a:	48bd      	ldr	r0, [pc, #756]	; (8002740 <parse_string+0x698>)
 800244c:	f002 f8e0 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fda6 	bl	8002fa4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 8002458:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800245a:	3301      	adds	r3, #1
 800245c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800245e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002462:	429a      	cmp	r2, r3
 8002464:	dbe4      	blt.n	8002430 <parse_string+0x388>
																		}

																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8002466:	2200      	movs	r2, #0
 8002468:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800246c:	48b5      	ldr	r0, [pc, #724]	; (8002744 <parse_string+0x69c>)
 800246e:	f002 f8cf 	bl	8004610 <HAL_GPIO_WritePin>
 8002472:	e043      	b.n	80024fc <parse_string+0x454>

																	} else if (drive2 < -10){
 8002474:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002478:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800247c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002484:	d52f      	bpl.n	80024e6 <parse_string+0x43e>

																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8002486:	2201      	movs	r2, #1
 8002488:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800248c:	48ad      	ldr	r0, [pc, #692]	; (8002744 <parse_string+0x69c>)
 800248e:	f002 f8bf 	bl	8004610 <HAL_GPIO_WritePin>

																		HAL_GPIO_WritePin(GPIOE, DIR2_Pin, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	2180      	movs	r1, #128	; 0x80
 8002496:	48ac      	ldr	r0, [pc, #688]	; (8002748 <parse_string+0x6a0>)
 8002498:	f002 f8ba 	bl	8004610 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 800249c:	2300      	movs	r3, #0
 800249e:	67bb      	str	r3, [r7, #120]	; 0x78
 80024a0:	e016      	b.n	80024d0 <parse_string+0x428>
																		HAL_GPIO_WritePin(GPIOD, STEP2_Pin, GPIO_PIN_SET);
 80024a2:	2201      	movs	r2, #1
 80024a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024a8:	48a5      	ldr	r0, [pc, #660]	; (8002740 <parse_string+0x698>)
 80024aa:	f002 f8b1 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 80024ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fd77 	bl	8002fa4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOD, STEP2_Pin, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024bc:	48a0      	ldr	r0, [pc, #640]	; (8002740 <parse_string+0x698>)
 80024be:	f002 f8a7 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 80024c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fd6d 	bl	8002fa4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 80024ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024cc:	3301      	adds	r3, #1
 80024ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80024d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80024d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d4:	429a      	cmp	r2, r3
 80024d6:	dbe4      	blt.n	80024a2 <parse_string+0x3fa>
																		}
																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024de:	4899      	ldr	r0, [pc, #612]	; (8002744 <parse_string+0x69c>)
 80024e0:	f002 f896 	bl	8004610 <HAL_GPIO_WritePin>
 80024e4:	e00a      	b.n	80024fc <parse_string+0x454>

																	}else {
																		HAL_GPIO_WritePin(GPIOE, DIR2_Pin, GPIO_PIN_RESET);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2180      	movs	r1, #128	; 0x80
 80024ea:	4897      	ldr	r0, [pc, #604]	; (8002748 <parse_string+0x6a0>)
 80024ec:	f002 f890 	bl	8004610 <HAL_GPIO_WritePin>
																		  HAL_GPIO_WritePin(GPIOD, STEP2_Pin, GPIO_PIN_RESET);
 80024f0:	2200      	movs	r2, #0
 80024f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024f6:	4892      	ldr	r0, [pc, #584]	; (8002740 <parse_string+0x698>)
 80024f8:	f002 f88a 	bl	8004610 <HAL_GPIO_WritePin>
																	}

																	if (instrument > 0.9) {
 80024fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80024fe:	f7fe f843 	bl	8000588 <__aeabi_f2d>
 8002502:	a38b      	add	r3, pc, #556	; (adr r3, 8002730 <parse_string+0x688>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	f7fe fb26 	bl	8000b58 <__aeabi_dcmpgt>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d024      	beq.n	800255c <parse_string+0x4b4>

																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);

																		HAL_GPIO_WritePin(GPIOD, DIR3_Pin, GPIO_PIN_SET);
 8002512:	2201      	movs	r2, #1
 8002514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002518:	4889      	ldr	r0, [pc, #548]	; (8002740 <parse_string+0x698>)
 800251a:	f002 f879 	bl	8004610 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 800251e:	2300      	movs	r3, #0
 8002520:	677b      	str	r3, [r7, #116]	; 0x74
 8002522:	e016      	b.n	8002552 <parse_string+0x4aa>
																		HAL_GPIO_WritePin(GPIOD, STEP3_Pin, GPIO_PIN_SET);
 8002524:	2201      	movs	r2, #1
 8002526:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800252a:	4885      	ldr	r0, [pc, #532]	; (8002740 <parse_string+0x698>)
 800252c:	f002 f870 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002532:	4618      	mov	r0, r3
 8002534:	f000 fd36 	bl	8002fa4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOD, STEP3_Pin, GPIO_PIN_RESET);
 8002538:	2200      	movs	r2, #0
 800253a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800253e:	4880      	ldr	r0, [pc, #512]	; (8002740 <parse_string+0x698>)
 8002540:	f002 f866 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fd2c 	bl	8002fa4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 800254c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800254e:	3301      	adds	r3, #1
 8002550:	677b      	str	r3, [r7, #116]	; 0x74
 8002552:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002556:	429a      	cmp	r2, r3
 8002558:	dbe4      	blt.n	8002524 <parse_string+0x47c>
 800255a:	e03b      	b.n	80025d4 <parse_string+0x52c>
																		}

																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);

																	} else if (instrument < -0.9){
 800255c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800255e:	f7fe f813 	bl	8000588 <__aeabi_f2d>
 8002562:	a375      	add	r3, pc, #468	; (adr r3, 8002738 <parse_string+0x690>)
 8002564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002568:	f7fe fad8 	bl	8000b1c <__aeabi_dcmplt>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d024      	beq.n	80025bc <parse_string+0x514>

																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);

																	    HAL_GPIO_WritePin(GPIOD, DIR3_Pin, GPIO_PIN_RESET);
 8002572:	2200      	movs	r2, #0
 8002574:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002578:	4871      	ldr	r0, [pc, #452]	; (8002740 <parse_string+0x698>)
 800257a:	f002 f849 	bl	8004610 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 800257e:	2300      	movs	r3, #0
 8002580:	673b      	str	r3, [r7, #112]	; 0x70
 8002582:	e016      	b.n	80025b2 <parse_string+0x50a>
																		HAL_GPIO_WritePin(GPIOD, STEP3_Pin, GPIO_PIN_SET);
 8002584:	2201      	movs	r2, #1
 8002586:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800258a:	486d      	ldr	r0, [pc, #436]	; (8002740 <parse_string+0x698>)
 800258c:	f002 f840 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fd06 	bl	8002fa4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOD, STEP3_Pin, GPIO_PIN_RESET);
 8002598:	2200      	movs	r2, #0
 800259a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800259e:	4868      	ldr	r0, [pc, #416]	; (8002740 <parse_string+0x698>)
 80025a0:	f002 f836 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 80025a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fcfc 	bl	8002fa4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 80025ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ae:	3301      	adds	r3, #1
 80025b0:	673b      	str	r3, [r7, #112]	; 0x70
 80025b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80025b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b6:	429a      	cmp	r2, r3
 80025b8:	dbe4      	blt.n	8002584 <parse_string+0x4dc>
 80025ba:	e00b      	b.n	80025d4 <parse_string+0x52c>
																		}
																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);

																	}else {
																		HAL_GPIO_WritePin(GPIOD, DIR3_Pin, GPIO_PIN_RESET);
 80025bc:	2200      	movs	r2, #0
 80025be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025c2:	485f      	ldr	r0, [pc, #380]	; (8002740 <parse_string+0x698>)
 80025c4:	f002 f824 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOD, STEP3_Pin, GPIO_PIN_RESET);
 80025c8:	2200      	movs	r2, #0
 80025ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025ce:	485c      	ldr	r0, [pc, #368]	; (8002740 <parse_string+0x698>)
 80025d0:	f002 f81e 	bl	8004610 <HAL_GPIO_WritePin>
																	}
																	//rotation
																	if (rotation > 0.9) {
 80025d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80025d6:	f7fd ffd7 	bl	8000588 <__aeabi_f2d>
 80025da:	a355      	add	r3, pc, #340	; (adr r3, 8002730 <parse_string+0x688>)
 80025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e0:	f7fe faba 	bl	8000b58 <__aeabi_dcmpgt>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d030      	beq.n	800264c <parse_string+0x5a4>

																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80025ea:	2201      	movs	r2, #1
 80025ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025f0:	4854      	ldr	r0, [pc, #336]	; (8002744 <parse_string+0x69c>)
 80025f2:	f002 f80d 	bl	8004610 <HAL_GPIO_WritePin>

																		HAL_GPIO_WritePin(GPIOE, DIR5_Pin, GPIO_PIN_SET);
 80025f6:	2201      	movs	r2, #1
 80025f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025fc:	4852      	ldr	r0, [pc, #328]	; (8002748 <parse_string+0x6a0>)
 80025fe:	f002 f807 	bl	8004610 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 8002602:	2300      	movs	r3, #0
 8002604:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002606:	e016      	b.n	8002636 <parse_string+0x58e>
																		HAL_GPIO_WritePin(GPIOE, STEP5_Pin, GPIO_PIN_SET);
 8002608:	2201      	movs	r2, #1
 800260a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800260e:	484e      	ldr	r0, [pc, #312]	; (8002748 <parse_string+0x6a0>)
 8002610:	f001 fffe 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fcc4 	bl	8002fa4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOE, STEP5_Pin, GPIO_PIN_RESET);
 800261c:	2200      	movs	r2, #0
 800261e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002622:	4849      	ldr	r0, [pc, #292]	; (8002748 <parse_string+0x6a0>)
 8002624:	f001 fff4 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fcba 	bl	8002fa4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 8002630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002632:	3301      	adds	r3, #1
 8002634:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002636:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263a:	429a      	cmp	r2, r3
 800263c:	dbe4      	blt.n	8002608 <parse_string+0x560>
																		}


																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002644:	483f      	ldr	r0, [pc, #252]	; (8002744 <parse_string+0x69c>)
 8002646:	f001 ffe3 	bl	8004610 <HAL_GPIO_WritePin>
 800264a:	e041      	b.n	80026d0 <parse_string+0x628>

																	} else if (rotation < -0.9){
 800264c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800264e:	f7fd ff9b 	bl	8000588 <__aeabi_f2d>
 8002652:	a339      	add	r3, pc, #228	; (adr r3, 8002738 <parse_string+0x690>)
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	f7fe fa60 	bl	8000b1c <__aeabi_dcmplt>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d02a      	beq.n	80026b8 <parse_string+0x610>

																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8002662:	2201      	movs	r2, #1
 8002664:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002668:	4836      	ldr	r0, [pc, #216]	; (8002744 <parse_string+0x69c>)
 800266a:	f001 ffd1 	bl	8004610 <HAL_GPIO_WritePin>

																		for(int i=0; i<steps_count; i++){
 800266e:	2300      	movs	r3, #0
 8002670:	66bb      	str	r3, [r7, #104]	; 0x68
 8002672:	e016      	b.n	80026a2 <parse_string+0x5fa>
																		HAL_GPIO_WritePin(GPIOE, STEP5_Pin, GPIO_PIN_SET);
 8002674:	2201      	movs	r2, #1
 8002676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800267a:	4833      	ldr	r0, [pc, #204]	; (8002748 <parse_string+0x6a0>)
 800267c:	f001 ffc8 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fc8e 	bl	8002fa4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOE, STEP5_Pin, GPIO_PIN_RESET);
 8002688:	2200      	movs	r2, #0
 800268a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800268e:	482e      	ldr	r0, [pc, #184]	; (8002748 <parse_string+0x6a0>)
 8002690:	f001 ffbe 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fc84 	bl	8002fa4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 800269c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800269e:	3301      	adds	r3, #1
 80026a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80026a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80026a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a6:	429a      	cmp	r2, r3
 80026a8:	dbe4      	blt.n	8002674 <parse_string+0x5cc>
																		}
																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80026aa:	2200      	movs	r2, #0
 80026ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026b0:	4824      	ldr	r0, [pc, #144]	; (8002744 <parse_string+0x69c>)
 80026b2:	f001 ffad 	bl	8004610 <HAL_GPIO_WritePin>
 80026b6:	e00b      	b.n	80026d0 <parse_string+0x628>

																	}else {
																		HAL_GPIO_WritePin(GPIOE, DIR5_Pin, GPIO_PIN_RESET);
 80026b8:	2200      	movs	r2, #0
 80026ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026be:	4822      	ldr	r0, [pc, #136]	; (8002748 <parse_string+0x6a0>)
 80026c0:	f001 ffa6 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOE, STEP5_Pin, GPIO_PIN_RESET);
 80026c4:	2200      	movs	r2, #0
 80026c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026ca:	481f      	ldr	r0, [pc, #124]	; (8002748 <parse_string+0x6a0>)
 80026cc:	f001 ffa0 	bl	8004610 <HAL_GPIO_WritePin>
																	}
																	//rezka
																	if (rezka > 0.9) {
 80026d0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80026d2:	f7fd ff59 	bl	8000588 <__aeabi_f2d>
 80026d6:	a316      	add	r3, pc, #88	; (adr r3, 8002730 <parse_string+0x688>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fe fa3c 	bl	8000b58 <__aeabi_dcmpgt>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d032      	beq.n	800274c <parse_string+0x6a4>

																		//HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);

																		HAL_GPIO_WritePin(GPIOD, DIR4_Pin, GPIO_PIN_SET);
 80026e6:	2201      	movs	r2, #1
 80026e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026ec:	4814      	ldr	r0, [pc, #80]	; (8002740 <parse_string+0x698>)
 80026ee:	f001 ff8f 	bl	8004610 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 80026f2:	2300      	movs	r3, #0
 80026f4:	667b      	str	r3, [r7, #100]	; 0x64
 80026f6:	e016      	b.n	8002726 <parse_string+0x67e>
																		HAL_GPIO_WritePin(GPIOE, STEP4_Pin, GPIO_PIN_SET);
 80026f8:	2201      	movs	r2, #1
 80026fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026fe:	4812      	ldr	r0, [pc, #72]	; (8002748 <parse_string+0x6a0>)
 8002700:	f001 ff86 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fc4c 	bl	8002fa4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOE, STEP4_Pin, GPIO_PIN_RESET);
 800270c:	2200      	movs	r2, #0
 800270e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002712:	480d      	ldr	r0, [pc, #52]	; (8002748 <parse_string+0x6a0>)
 8002714:	f001 ff7c 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fc42 	bl	8002fa4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 8002720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002722:	3301      	adds	r3, #1
 8002724:	667b      	str	r3, [r7, #100]	; 0x64
 8002726:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272a:	429a      	cmp	r2, r3
 800272c:	dbe4      	blt.n	80026f8 <parse_string+0x650>
 800272e:	e049      	b.n	80027c4 <parse_string+0x71c>
 8002730:	cccccccd 	.word	0xcccccccd
 8002734:	3feccccc 	.word	0x3feccccc
 8002738:	cccccccd 	.word	0xcccccccd
 800273c:	bfeccccc 	.word	0xbfeccccc
 8002740:	40020c00 	.word	0x40020c00
 8002744:	40020400 	.word	0x40020400
 8002748:	40021000 	.word	0x40021000
																		}

																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);

																	} else if (rezka < -0.9){
 800274c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800274e:	f7fd ff1b 	bl	8000588 <__aeabi_f2d>
 8002752:	a397      	add	r3, pc, #604	; (adr r3, 80029b0 <parse_string+0x908>)
 8002754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002758:	f7fe f9e0 	bl	8000b1c <__aeabi_dcmplt>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d024      	beq.n	80027ac <parse_string+0x704>

																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);

																		HAL_GPIO_WritePin(GPIOD, DIR4_Pin, GPIO_PIN_RESET);
 8002762:	2200      	movs	r2, #0
 8002764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002768:	4893      	ldr	r0, [pc, #588]	; (80029b8 <parse_string+0x910>)
 800276a:	f001 ff51 	bl	8004610 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 800276e:	2300      	movs	r3, #0
 8002770:	663b      	str	r3, [r7, #96]	; 0x60
 8002772:	e016      	b.n	80027a2 <parse_string+0x6fa>
																			HAL_GPIO_WritePin(GPIOE, STEP4_Pin, GPIO_PIN_SET);
 8002774:	2201      	movs	r2, #1
 8002776:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800277a:	4890      	ldr	r0, [pc, #576]	; (80029bc <parse_string+0x914>)
 800277c:	f001 ff48 	bl	8004610 <HAL_GPIO_WritePin>
																			HAL_Delay(velosity_delay);
 8002780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fc0e 	bl	8002fa4 <HAL_Delay>
																			HAL_GPIO_WritePin(GPIOE, STEP4_Pin, GPIO_PIN_RESET);
 8002788:	2200      	movs	r2, #0
 800278a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800278e:	488b      	ldr	r0, [pc, #556]	; (80029bc <parse_string+0x914>)
 8002790:	f001 ff3e 	bl	8004610 <HAL_GPIO_WritePin>
																			HAL_Delay(velosity_delay);
 8002794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fc04 	bl	8002fa4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 800279c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800279e:	3301      	adds	r3, #1
 80027a0:	663b      	str	r3, [r7, #96]	; 0x60
 80027a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a6:	429a      	cmp	r2, r3
 80027a8:	dbe4      	blt.n	8002774 <parse_string+0x6cc>
 80027aa:	e00b      	b.n	80027c4 <parse_string+0x71c>
																		}
																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);

																	}else {
																		HAL_GPIO_WritePin(GPIOD, DIR4_Pin, GPIO_PIN_RESET);
 80027ac:	2200      	movs	r2, #0
 80027ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027b2:	4881      	ldr	r0, [pc, #516]	; (80029b8 <parse_string+0x910>)
 80027b4:	f001 ff2c 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOE, STEP4_Pin, GPIO_PIN_RESET);
 80027b8:	2200      	movs	r2, #0
 80027ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027be:	487f      	ldr	r0, [pc, #508]	; (80029bc <parse_string+0x914>)
 80027c0:	f001 ff26 	bl	8004610 <HAL_GPIO_WritePin>
																	}

//// INVERSIA !!!!
																	if ( kolonna > 0.9) {
 80027c4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80027c6:	f7fd fedf 	bl	8000588 <__aeabi_f2d>
 80027ca:	a377      	add	r3, pc, #476	; (adr r3, 80029a8 <parse_string+0x900>)
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	f7fe f9c2 	bl	8000b58 <__aeabi_dcmpgt>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01c      	beq.n	8002814 <parse_string+0x76c>
																		 HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80027da:	2201      	movs	r2, #1
 80027dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027e0:	4877      	ldr	r0, [pc, #476]	; (80029c0 <parse_string+0x918>)
 80027e2:	f001 ff15 	bl	8004610 <HAL_GPIO_WritePin>
																		 HAL_GPIO_WritePin(GPIOE, PILLAR_ONOFF_Pin, GPIO_PIN_RESET);
 80027e6:	2200      	movs	r2, #0
 80027e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ec:	4873      	ldr	r0, [pc, #460]	; (80029bc <parse_string+0x914>)
 80027ee:	f001 ff0f 	bl	8004610 <HAL_GPIO_WritePin>
																		 HAL_GPIO_WritePin(GPIOF, PILLAR_UPDOWN_Pin, GPIO_PIN_RESET);
 80027f2:	2200      	movs	r2, #0
 80027f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027f8:	4872      	ldr	r0, [pc, #456]	; (80029c4 <parse_string+0x91c>)
 80027fa:	f001 ff09 	bl	8004610 <HAL_GPIO_WritePin>
																		 HAL_Delay(500);
 80027fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002802:	f000 fbcf 	bl	8002fa4 <HAL_Delay>
																		 HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8002806:	2200      	movs	r2, #0
 8002808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800280c:	486c      	ldr	r0, [pc, #432]	; (80029c0 <parse_string+0x918>)
 800280e:	f001 feff 	bl	8004610 <HAL_GPIO_WritePin>
 8002812:	e033      	b.n	800287c <parse_string+0x7d4>

																	} else if ( kolonna < -0.9){
 8002814:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002816:	f7fd feb7 	bl	8000588 <__aeabi_f2d>
 800281a:	a365      	add	r3, pc, #404	; (adr r3, 80029b0 <parse_string+0x908>)
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	f7fe f97c 	bl	8000b1c <__aeabi_dcmplt>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01c      	beq.n	8002864 <parse_string+0x7bc>
																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800282a:	2201      	movs	r2, #1
 800282c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002830:	4863      	ldr	r0, [pc, #396]	; (80029c0 <parse_string+0x918>)
 8002832:	f001 feed 	bl	8004610 <HAL_GPIO_WritePin>

																		 HAL_GPIO_WritePin(GPIOE, PILLAR_ONOFF_Pin, GPIO_PIN_RESET);
 8002836:	2200      	movs	r2, #0
 8002838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800283c:	485f      	ldr	r0, [pc, #380]	; (80029bc <parse_string+0x914>)
 800283e:	f001 fee7 	bl	8004610 <HAL_GPIO_WritePin>
																		 HAL_GPIO_WritePin(GPIOF, PILLAR_UPDOWN_Pin, GPIO_PIN_SET);
 8002842:	2201      	movs	r2, #1
 8002844:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002848:	485e      	ldr	r0, [pc, #376]	; (80029c4 <parse_string+0x91c>)
 800284a:	f001 fee1 	bl	8004610 <HAL_GPIO_WritePin>
																		 HAL_Delay(500);
 800284e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002852:	f000 fba7 	bl	8002fa4 <HAL_Delay>
																		 HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8002856:	2200      	movs	r2, #0
 8002858:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800285c:	4858      	ldr	r0, [pc, #352]	; (80029c0 <parse_string+0x918>)
 800285e:	f001 fed7 	bl	8004610 <HAL_GPIO_WritePin>
 8002862:	e00b      	b.n	800287c <parse_string+0x7d4>

																	}else {
																		HAL_GPIO_WritePin(GPIOE, PILLAR_ONOFF_Pin, GPIO_PIN_SET);
 8002864:	2201      	movs	r2, #1
 8002866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800286a:	4854      	ldr	r0, [pc, #336]	; (80029bc <parse_string+0x914>)
 800286c:	f001 fed0 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOF, PILLAR_UPDOWN_Pin, GPIO_PIN_SET);
 8002870:	2201      	movs	r2, #1
 8002872:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002876:	4853      	ldr	r0, [pc, #332]	; (80029c4 <parse_string+0x91c>)
 8002878:	f001 feca 	bl	8004610 <HAL_GPIO_WritePin>
																	}

																	if (magnit1 > 0) {
 800287c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002880:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002888:	dd0c      	ble.n	80028a4 <parse_string+0x7fc>
																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800288a:	2201      	movs	r2, #1
 800288c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002890:	484b      	ldr	r0, [pc, #300]	; (80029c0 <parse_string+0x918>)
 8002892:	f001 febd 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOE, MAGNET1_ONOFF_Pin, GPIO_PIN_RESET);
 8002896:	2200      	movs	r2, #0
 8002898:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800289c:	4847      	ldr	r0, [pc, #284]	; (80029bc <parse_string+0x914>)
 800289e:	f001 feb7 	bl	8004610 <HAL_GPIO_WritePin>
 80028a2:	e00b      	b.n	80028bc <parse_string+0x814>
																	} else {
																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80028a4:	2200      	movs	r2, #0
 80028a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028aa:	4845      	ldr	r0, [pc, #276]	; (80029c0 <parse_string+0x918>)
 80028ac:	f001 feb0 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOE, MAGNET1_ONOFF_Pin, GPIO_PIN_SET);
 80028b0:	2201      	movs	r2, #1
 80028b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028b6:	4841      	ldr	r0, [pc, #260]	; (80029bc <parse_string+0x914>)
 80028b8:	f001 feaa 	bl	8004610 <HAL_GPIO_WritePin>
																	}

																	if (magnit2 > 0) {
 80028bc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80028c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c8:	dd0c      	ble.n	80028e4 <parse_string+0x83c>
																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80028ca:	2201      	movs	r2, #1
 80028cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028d0:	483b      	ldr	r0, [pc, #236]	; (80029c0 <parse_string+0x918>)
 80028d2:	f001 fe9d 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOE, MAGNET2_ONOFF_Pin, GPIO_PIN_RESET);
 80028d6:	2200      	movs	r2, #0
 80028d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028dc:	4837      	ldr	r0, [pc, #220]	; (80029bc <parse_string+0x914>)
 80028de:	f001 fe97 	bl	8004610 <HAL_GPIO_WritePin>
 80028e2:	e00b      	b.n	80028fc <parse_string+0x854>
																	} else {
																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80028e4:	2200      	movs	r2, #0
 80028e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028ea:	4835      	ldr	r0, [pc, #212]	; (80029c0 <parse_string+0x918>)
 80028ec:	f001 fe90 	bl	8004610 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOE, MAGNET2_ONOFF_Pin, GPIO_PIN_SET);
 80028f0:	2201      	movs	r2, #1
 80028f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028f6:	4831      	ldr	r0, [pc, #196]	; (80029bc <parse_string+0x914>)
 80028f8:	f001 fe8a 	bl	8004610 <HAL_GPIO_WritePin>



																	// run robot
																	char *buf;
																	buf = (char *) malloc(100);
 80028fc:	2064      	movs	r0, #100	; 0x64
 80028fe:	f012 f935 	bl	8014b6c <malloc>
 8002902:	4603      	mov	r3, r0
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
																	sprintf(buf,"rcvd: %f; %f; %f; %f; %f; %f; %f; %f;\n", drive1, drive2, instrument, kolonna, rotation, rezka, magnit1, magnit2);
 8002906:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002908:	f7fd fe3e 	bl	8000588 <__aeabi_f2d>
 800290c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002910:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002912:	f7fd fe39 	bl	8000588 <__aeabi_f2d>
 8002916:	4682      	mov	sl, r0
 8002918:	468b      	mov	fp, r1
 800291a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800291c:	f7fd fe34 	bl	8000588 <__aeabi_f2d>
 8002920:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002924:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002926:	f7fd fe2f 	bl	8000588 <__aeabi_f2d>
 800292a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800292e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002930:	f7fd fe2a 	bl	8000588 <__aeabi_f2d>
 8002934:	e9c7 0100 	strd	r0, r1, [r7]
 8002938:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800293a:	f7fd fe25 	bl	8000588 <__aeabi_f2d>
 800293e:	4680      	mov	r8, r0
 8002940:	4689      	mov	r9, r1
 8002942:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002944:	f7fd fe20 	bl	8000588 <__aeabi_f2d>
 8002948:	4604      	mov	r4, r0
 800294a:	460d      	mov	r5, r1
 800294c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800294e:	f7fd fe1b 	bl	8000588 <__aeabi_f2d>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800295a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800295e:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002962:	ed97 7b00 	vldr	d7, [r7]
 8002966:	ed8d 7b06 	vstr	d7, [sp, #24]
 800296a:	ed97 7b02 	vldr	d7, [r7, #8]
 800296e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002972:	ed97 7b04 	vldr	d7, [r7, #16]
 8002976:	ed8d 7b02 	vstr	d7, [sp, #8]
 800297a:	e9cd ab00 	strd	sl, fp, [sp]
 800297e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002982:	4911      	ldr	r1, [pc, #68]	; (80029c8 <parse_string+0x920>)
 8002984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002986:	f012 febb 	bl	8015700 <siprintf>
																	return buf;
 800298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298c:	e006      	b.n	800299c <parse_string+0x8f4>
					}
				}
			}
		}
	}
	DEBUG_BAD
 800298e:	2002      	movs	r0, #2
 8002990:	f000 fa60 	bl	8002e54 <BSP_LED_On>
 8002994:	2001      	movs	r0, #1
 8002996:	f000 fa77 	bl	8002e88 <BSP_LED_Off>
	return NULL;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3788      	adds	r7, #136	; 0x88
 80029a0:	46bd      	mov	sp, r7
 80029a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029a6:	bf00      	nop
 80029a8:	cccccccd 	.word	0xcccccccd
 80029ac:	3feccccc 	.word	0x3feccccc
 80029b0:	cccccccd 	.word	0xcccccccd
 80029b4:	bfeccccc 	.word	0xbfeccccc
 80029b8:	40020c00 	.word	0x40020c00
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40020400 	.word	0x40020400
 80029c4:	40021400 	.word	0x40021400
 80029c8:	08019158 	.word	0x08019158

080029cc <tcp_echoserver_recv>:
 * @param  pbuf: pointer on the received pbuf
 * @param  err: error information regarding the reveived pbuf
 * @retval err_t: error code
 */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b096      	sub	sp, #88	; 0x58
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	70fb      	strb	r3, [r7, #3]
	err_t ret_err;

	char str[50];
	char *buf;

	LWIP_ASSERT("arg != NULL",arg != NULL);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d106      	bne.n	80029ee <tcp_echoserver_recv+0x22>
 80029e0:	4b80      	ldr	r3, [pc, #512]	; (8002be4 <tcp_echoserver_recv+0x218>)
 80029e2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80029e6:	4980      	ldr	r1, [pc, #512]	; (8002be8 <tcp_echoserver_recv+0x21c>)
 80029e8:	4880      	ldr	r0, [pc, #512]	; (8002bec <tcp_echoserver_recv+0x220>)
 80029ea:	f012 fe21 	bl	8015630 <iprintf>

	es = (struct tcp_echoserver_struct *)arg;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	653b      	str	r3, [r7, #80]	; 0x50

	/* if we receive an empty tcp frame from client => close connection */
	if (p == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d13e      	bne.n	8002a76 <tcp_echoserver_recv+0xaa>
	{
		/* remote host closed connection */
		es->state = ES_CLOSING;
 80029f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029fa:	2203      	movs	r2, #3
 80029fc:	701a      	strb	r2, [r3, #0]
		if(es->p == NULL)
 80029fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d104      	bne.n	8002a10 <tcp_echoserver_recv+0x44>
		{
			/* we're done sending, close connection */
			tcp_echoserver_connection_close(tpcb, es);
 8002a06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002a08:	68b8      	ldr	r0, [r7, #8]
 8002a0a:	f000 f9b0 	bl	8002d6e <tcp_echoserver_connection_close>
 8002a0e:	e02e      	b.n	8002a6e <tcp_echoserver_recv+0xa2>
		}
		else
		{
			/* we're not done yet */
			/* acknowledge received packet */
			tcp_sent(tpcb, tcp_echoserver_sent);
 8002a10:	4977      	ldr	r1, [pc, #476]	; (8002bf0 <tcp_echoserver_recv+0x224>)
 8002a12:	68b8      	ldr	r0, [r7, #8]
 8002a14:	f00c ffe0 	bl	800f9d8 <tcp_sent>

			/* send remaining data*/
			//tcp_echoserver_send(tpcb, es);

			memcpy(str, p -> payload, p -> len);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	895b      	ldrh	r3, [r3, #10]
 8002a20:	461a      	mov	r2, r3
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4618      	mov	r0, r3
 8002a28:	f012 f8be 	bl	8014ba8 <memcpy>
			buf = parse_string(str, p->len);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	895b      	ldrh	r3, [r3, #10]
 8002a30:	461a      	mov	r2, r3
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fb35 	bl	80020a8 <parse_string>
 8002a3e:	64b8      	str	r0, [r7, #72]	; 0x48

			/*
			 * Отсылка данных не столько важна, но для отладки это хорошо
			 * */
			if(buf!=NULL){
 8002a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d013      	beq.n	8002a6e <tcp_echoserver_recv+0xa2>
				p -> payload = buf;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a4a:	605a      	str	r2, [r3, #4]
				p -> len = strlen(buf);
 8002a4c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002a4e:	f7fd fbdf 	bl	8000210 <strlen>
 8002a52:	4603      	mov	r3, r0
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	815a      	strh	r2, [r3, #10]
				es->p = p;
 8002a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	609a      	str	r2, [r3, #8]

				tcp_echoserver_send(tpcb, es);
 8002a60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002a62:	68b8      	ldr	r0, [r7, #8]
 8002a64:	f000 f930 	bl	8002cc8 <tcp_echoserver_send>
				free(buf);
 8002a68:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002a6a:	f012 f887 	bl	8014b7c <free>
			}


		}
		ret_err = ERR_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002a74:	e0af      	b.n	8002bd6 <tcp_echoserver_recv+0x20a>
	}
	/* else : a non empty frame was received from client but for some reason err != ERR_OK */
	else if(err != ERR_OK)
 8002a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00c      	beq.n	8002a98 <tcp_echoserver_recv+0xcc>
	{
		/* free received pbuf*/
		if (p != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <tcp_echoserver_recv+0xc4>
		{
			es->p = NULL;
 8002a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
			pbuf_free(p);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f00b f95c 	bl	800dd48 <pbuf_free>
		}
		ret_err = err;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002a96:	e09e      	b.n	8002bd6 <tcp_echoserver_recv+0x20a>
	}
	else if(es->state == ES_ACCEPTED)
 8002a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d138      	bne.n	8002b12 <tcp_echoserver_recv+0x146>
	{
		/* first data chunk in p->payload */
		es->state = ES_RECEIVED;
 8002aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	701a      	strb	r2, [r3, #0]

		/* store reference to incoming pbuf (chain) */
		es->p = p;
 8002aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	609a      	str	r2, [r3, #8]

		/* initialize LwIP tcp_sent callback function */
		tcp_sent(tpcb, tcp_echoserver_sent);
 8002aac:	4950      	ldr	r1, [pc, #320]	; (8002bf0 <tcp_echoserver_recv+0x224>)
 8002aae:	68b8      	ldr	r0, [r7, #8]
 8002ab0:	f00c ff92 	bl	800f9d8 <tcp_sent>

		/* send back the received data (echo) */
		//tcp_echoserver_send(tpcb, es);

		memcpy(str, p -> payload, p -> len);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	895b      	ldrh	r3, [r3, #10]
 8002abc:	461a      	mov	r2, r3
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f012 f870 	bl	8014ba8 <memcpy>
		buf = parse_string(str, p->len);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	895b      	ldrh	r3, [r3, #10]
 8002acc:	461a      	mov	r2, r3
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fae7 	bl	80020a8 <parse_string>
 8002ada:	64b8      	str	r0, [r7, #72]	; 0x48

		/*
		 * Отсылка данных не столько важна, но для отладки это хорошо
		 * */
		if(buf!=NULL){
 8002adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d013      	beq.n	8002b0a <tcp_echoserver_recv+0x13e>
			p -> payload = buf;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ae6:	605a      	str	r2, [r3, #4]
			p -> len = strlen(buf);
 8002ae8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002aea:	f7fd fb91 	bl	8000210 <strlen>
 8002aee:	4603      	mov	r3, r0
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	815a      	strh	r2, [r3, #10]
			es->p = p;
 8002af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	609a      	str	r2, [r3, #8]

			tcp_echoserver_send(tpcb, es);
 8002afc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002afe:	68b8      	ldr	r0, [r7, #8]
 8002b00:	f000 f8e2 	bl	8002cc8 <tcp_echoserver_send>
			free(buf);
 8002b04:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b06:	f012 f839 	bl	8014b7c <free>
		}

		ret_err = ERR_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002b10:	e061      	b.n	8002bd6 <tcp_echoserver_recv+0x20a>
	}
	else if (es->state == ES_RECEIVED)
 8002b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d13a      	bne.n	8002b90 <tcp_echoserver_recv+0x1c4>
	{
		/* more data received from client and previous data has been already sent*/
		if(es->p == NULL)
 8002b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d12b      	bne.n	8002b7a <tcp_echoserver_recv+0x1ae>
		{
			//			es->p = p;
			/* send back received data */
			//			tcp_echoserver_send(tpcb, es);

			memcpy(str, p -> payload, p -> len);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6859      	ldr	r1, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	895b      	ldrh	r3, [r3, #10]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	4618      	mov	r0, r3
 8002b32:	f012 f839 	bl	8014ba8 <memcpy>
			buf = parse_string(str, p->len);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	895b      	ldrh	r3, [r3, #10]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fab0 	bl	80020a8 <parse_string>
 8002b48:	64b8      	str	r0, [r7, #72]	; 0x48

			/*
			 * Отсылка данных не столько важна, но для отладки это хорошо
			 * */
			if(buf!=NULL){
 8002b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01b      	beq.n	8002b88 <tcp_echoserver_recv+0x1bc>
				p -> payload = buf;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b54:	605a      	str	r2, [r3, #4]
				p -> len = strlen(buf);
 8002b56:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b58:	f7fd fb5a 	bl	8000210 <strlen>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	815a      	strh	r2, [r3, #10]
				es->p = p;
 8002b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	609a      	str	r2, [r3, #8]

				tcp_echoserver_send(tpcb, es);
 8002b6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002b6c:	68b8      	ldr	r0, [r7, #8]
 8002b6e:	f000 f8ab 	bl	8002cc8 <tcp_echoserver_send>
				free(buf);
 8002b72:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b74:	f012 f802 	bl	8014b7c <free>
 8002b78:	e006      	b.n	8002b88 <tcp_echoserver_recv+0x1bc>
		else
		{
			struct pbuf *ptr;

			/* chain pbufs to the end of what we recv'ed previously  */
			ptr = es->p;
 8002b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
			pbuf_chain(ptr,p);
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002b84:	f00b fa04 	bl	800df90 <pbuf_chain>
		}
		ret_err = ERR_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002b8e:	e022      	b.n	8002bd6 <tcp_echoserver_recv+0x20a>
	}
	else if(es->state == ES_CLOSING)
 8002b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d10f      	bne.n	8002bb8 <tcp_echoserver_recv+0x1ec>
	{
		/* odd case, remote side closing twice, trash data */
		tcp_recved(tpcb, p->tot_len);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	891b      	ldrh	r3, [r3, #8]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	68b8      	ldr	r0, [r7, #8]
 8002ba0:	f00c f846 	bl	800ec30 <tcp_recved>
		es->p = NULL;
 8002ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f00b f8cc 	bl	800dd48 <pbuf_free>
		ret_err = ERR_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002bb6:	e00e      	b.n	8002bd6 <tcp_echoserver_recv+0x20a>
	}
	else
	{
		/* unkown es->state, trash data  */
		tcp_recved(tpcb, p->tot_len);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	891b      	ldrh	r3, [r3, #8]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	68b8      	ldr	r0, [r7, #8]
 8002bc0:	f00c f836 	bl	800ec30 <tcp_recved>
		es->p = NULL;
 8002bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f00b f8bc 	bl	800dd48 <pbuf_free>
		ret_err = ERR_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	return ret_err;
 8002bd6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3758      	adds	r7, #88	; 0x58
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	08019180 	.word	0x08019180
 8002be8:	080191a8 	.word	0x080191a8
 8002bec:	080191b4 	.word	0x080191b4
 8002bf0:	08002c79 	.word	0x08002c79

08002bf4 <tcp_echoserver_error>:
 * @param  arg: pointer on argument parameter
 * @param  err: not used
 * @retval None
 */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	70fb      	strb	r3, [r7, #3]
	struct tcp_echoserver_struct *es;

	LWIP_UNUSED_ARG(err);

	es = (struct tcp_echoserver_struct *)arg;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	60fb      	str	r3, [r7, #12]
	if (es != NULL)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <tcp_echoserver_error+0x1c>
	{
		/*  free es structure */
		mem_free(es);
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f009 ff52 	bl	800cab4 <mem_free>
	}
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <tcp_echoserver_poll>:
 * @param  arg: pointer on argument passed to callback
 * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
 * @retval err_t: error code
 */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
	err_t ret_err;
	struct tcp_echoserver_struct *es;

	es = (struct tcp_echoserver_struct *)arg;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	60bb      	str	r3, [r7, #8]
	if (es != NULL)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d017      	beq.n	8002c5c <tcp_echoserver_poll+0x44>
	{
		if (es->p != NULL)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <tcp_echoserver_poll+0x2e>
		{
			tcp_sent(tpcb, tcp_echoserver_sent);
 8002c34:	490f      	ldr	r1, [pc, #60]	; (8002c74 <tcp_echoserver_poll+0x5c>)
 8002c36:	6838      	ldr	r0, [r7, #0]
 8002c38:	f00c fece 	bl	800f9d8 <tcp_sent>
			/* there is a remaining pbuf (chain) , try to send data */
			tcp_echoserver_send(tpcb, es);
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	6838      	ldr	r0, [r7, #0]
 8002c40:	f000 f842 	bl	8002cc8 <tcp_echoserver_send>
 8002c44:	e007      	b.n	8002c56 <tcp_echoserver_poll+0x3e>
		}
		else
		{
			/* no remaining pbuf (chain)  */
			if(es->state == ES_CLOSING)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d103      	bne.n	8002c56 <tcp_echoserver_poll+0x3e>
			{
				/*  close tcp connection */
				tcp_echoserver_connection_close(tpcb, es);
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	6838      	ldr	r0, [r7, #0]
 8002c52:	f000 f88c 	bl	8002d6e <tcp_echoserver_connection_close>
			}
		}
		ret_err = ERR_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
 8002c5a:	e004      	b.n	8002c66 <tcp_echoserver_poll+0x4e>
	}
	else
	{
		/* nothing to be done */
		tcp_abort(tpcb);
 8002c5c:	6838      	ldr	r0, [r7, #0]
 8002c5e:	f00b fe0d 	bl	800e87c <tcp_abort>
		ret_err = ERR_ABRT;
 8002c62:	23f3      	movs	r3, #243	; 0xf3
 8002c64:	73fb      	strb	r3, [r7, #15]
	}
	return ret_err;
 8002c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	08002c79 	.word	0x08002c79

08002c78 <tcp_echoserver_sent>:
 *         is received from remote host for sent data)
 * @param  None
 * @retval None
 */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	4613      	mov	r3, r2
 8002c84:	80fb      	strh	r3, [r7, #6]
	struct tcp_echoserver_struct *es;

	LWIP_UNUSED_ARG(len);

	es = (struct tcp_echoserver_struct *)arg;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	617b      	str	r3, [r7, #20]
	es->retries = 0;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	705a      	strb	r2, [r3, #1]

	if(es->p != NULL)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <tcp_echoserver_sent+0x32>
	{
		/* still got pbufs to send */
		tcp_sent(tpcb, tcp_echoserver_sent);
 8002c98:	490a      	ldr	r1, [pc, #40]	; (8002cc4 <tcp_echoserver_sent+0x4c>)
 8002c9a:	68b8      	ldr	r0, [r7, #8]
 8002c9c:	f00c fe9c 	bl	800f9d8 <tcp_sent>
		tcp_echoserver_send(tpcb, es);
 8002ca0:	6979      	ldr	r1, [r7, #20]
 8002ca2:	68b8      	ldr	r0, [r7, #8]
 8002ca4:	f000 f810 	bl	8002cc8 <tcp_echoserver_send>
 8002ca8:	e007      	b.n	8002cba <tcp_echoserver_sent+0x42>
	}
	else
	{
		/* if no more data to send and client closed connection*/
		if(es->state == ES_CLOSING)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d103      	bne.n	8002cba <tcp_echoserver_sent+0x42>
			tcp_echoserver_connection_close(tpcb, es);
 8002cb2:	6979      	ldr	r1, [r7, #20]
 8002cb4:	68b8      	ldr	r0, [r7, #8]
 8002cb6:	f000 f85a 	bl	8002d6e <tcp_echoserver_connection_close>
	}
	return ERR_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	08002c79 	.word	0x08002c79

08002cc8 <tcp_echoserver_send>:
 * @param  tpcb: pointer on the tcp_pcb connection
 * @param  es: pointer on echo_state structure
 * @retval None
 */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
	struct pbuf *ptr;
	err_t wr_err = ERR_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	75fb      	strb	r3, [r7, #23]

	while ((wr_err == ERR_OK) &&
 8002cd6:	e036      	b.n	8002d46 <tcp_echoserver_send+0x7e>
			(es->p != NULL) &&
			(es->p->len <= tcp_sndbuf(tpcb)))
	{

		/* get pointer on pbuf from es structure */
		ptr = es->p;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	613b      	str	r3, [r7, #16]

		/* enqueue data for transmission */
		wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	6859      	ldr	r1, [r3, #4]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	895a      	ldrh	r2, [r3, #10]
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f00f f99d 	bl	8012028 <tcp_write>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	75fb      	strb	r3, [r7, #23]

		if (wr_err == ERR_OK)
 8002cf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d11d      	bne.n	8002d36 <tcp_echoserver_send+0x6e>
		{
			u16_t plen;
			u8_t freed;

			plen = ptr->len;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	895b      	ldrh	r3, [r3, #10]
 8002cfe:	81fb      	strh	r3, [r7, #14]

			/* continue with next pbuf in chain (if any) */
			es->p = ptr->next;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	609a      	str	r2, [r3, #8]

			if(es->p != NULL)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d004      	beq.n	8002d1a <tcp_echoserver_send+0x52>
			{
				/* increment reference count for es->p */
				pbuf_ref(es->p);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f00b f8bd 	bl	800de94 <pbuf_ref>

			/* chop first pbuf from chain */
			do
			{
				/* try hard to free pbuf */
				freed = pbuf_free(ptr);
 8002d1a:	6938      	ldr	r0, [r7, #16]
 8002d1c:	f00b f814 	bl	800dd48 <pbuf_free>
 8002d20:	4603      	mov	r3, r0
 8002d22:	737b      	strb	r3, [r7, #13]
			}
			while(freed == 0);
 8002d24:	7b7b      	ldrb	r3, [r7, #13]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f7      	beq.n	8002d1a <tcp_echoserver_send+0x52>
			/* we can read more data now */
			tcp_recved(tpcb, plen);
 8002d2a:	89fb      	ldrh	r3, [r7, #14]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f00b ff7e 	bl	800ec30 <tcp_recved>
 8002d34:	e007      	b.n	8002d46 <tcp_echoserver_send+0x7e>
		}
		else if(wr_err == ERR_MEM)
 8002d36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3e:	d102      	bne.n	8002d46 <tcp_echoserver_send+0x7e>
		{
			/* we are low on memory, try later / harder, defer to poll */
			es->p = ptr;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	609a      	str	r2, [r3, #8]
	while ((wr_err == ERR_OK) &&
 8002d46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <tcp_echoserver_send+0x9e>
			(es->p != NULL) &&
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
	while ((wr_err == ERR_OK) &&
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <tcp_echoserver_send+0x9e>
			(es->p->len <= tcp_sndbuf(tpcb)))
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	895a      	ldrh	r2, [r3, #10]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
			(es->p != NULL) &&
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d9b8      	bls.n	8002cd8 <tcp_echoserver_send+0x10>
		else
		{
			/* other problem ?? */
		}
	}
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <tcp_echoserver_connection_close>:
 * @param  tcp_pcb: pointer on the tcp connection
 * @param  es: pointer on echo_state structure
 * @retval None
 */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]

	/* remove all callbacks */
	tcp_arg(tpcb, NULL);
 8002d78:	2100      	movs	r1, #0
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f00c fdf8 	bl	800f970 <tcp_arg>
	tcp_sent(tpcb, NULL);
 8002d80:	2100      	movs	r1, #0
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f00c fe28 	bl	800f9d8 <tcp_sent>
	tcp_recv(tpcb, NULL);
 8002d88:	2100      	movs	r1, #0
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f00c fe02 	bl	800f994 <tcp_recv>
	tcp_err(tpcb, NULL);
 8002d90:	2100      	movs	r1, #0
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f00c fe40 	bl	800fa18 <tcp_err>
	tcp_poll(tpcb, NULL, 0);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f00c fe75 	bl	800fa8c <tcp_poll>

	/* delete es structure */
	if (es != NULL)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <tcp_echoserver_connection_close+0x40>
	{
		mem_free(es);
 8002da8:	6838      	ldr	r0, [r7, #0]
 8002daa:	f009 fe83 	bl	800cab4 <mem_free>
	}

	/* close tcp connection */
	tcp_close(tpcb);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f00b fc84 	bl	800e6bc <tcp_close>
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10c      	bne.n	8002de6 <BSP_LED_Init+0x2a>
 8002dcc:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <BSP_LED_Init+0x8c>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <BSP_LED_Init+0x8c>)
 8002dd2:	f043 0302 	orr.w	r3, r3, #2
 8002dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <BSP_LED_Init+0x8c>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	e00b      	b.n	8002dfe <BSP_LED_Init+0x42>
 8002de6:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <BSP_LED_Init+0x8c>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	4a17      	ldr	r2, [pc, #92]	; (8002e48 <BSP_LED_Init+0x8c>)
 8002dec:	f043 0302 	orr.w	r3, r3, #2
 8002df0:	6313      	str	r3, [r2, #48]	; 0x30
 8002df2:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <BSP_LED_Init+0x8c>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <BSP_LED_Init+0x90>)
 8002e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e10:	2303      	movs	r3, #3
 8002e12:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <BSP_LED_Init+0x94>)
 8002e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1c:	f107 0214 	add.w	r2, r7, #20
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 fa30 	bl	8004288 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <BSP_LED_Init+0x94>)
 8002e2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	4a06      	ldr	r2, [pc, #24]	; (8002e4c <BSP_LED_Init+0x90>)
 8002e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f001 fbe8 	bl	8004610 <HAL_GPIO_WritePin>
}
 8002e40:	bf00      	nop
 8002e42:	3728      	adds	r7, #40	; 0x28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	080191dc 	.word	0x080191dc
 8002e50:	2000000c 	.word	0x2000000c

08002e54 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <BSP_LED_On+0x2c>)
 8002e62:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	4a06      	ldr	r2, [pc, #24]	; (8002e84 <BSP_LED_On+0x30>)
 8002e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4619      	mov	r1, r3
 8002e72:	f001 fbcd 	bl	8004610 <HAL_GPIO_WritePin>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	2000000c 	.word	0x2000000c
 8002e84:	080191dc 	.word	0x080191dc

08002e88 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	4a07      	ldr	r2, [pc, #28]	; (8002eb4 <BSP_LED_Off+0x2c>)
 8002e96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	4a06      	ldr	r2, [pc, #24]	; (8002eb8 <BSP_LED_Off+0x30>)
 8002e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f001 fbb3 	bl	8004610 <HAL_GPIO_WritePin>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	2000000c 	.word	0x2000000c
 8002eb8:	080191dc 	.word	0x080191dc

08002ebc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ec0:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <SystemInit+0x5c>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <SystemInit+0x5c>)
 8002ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002ed0:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <SystemInit+0x60>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a11      	ldr	r2, [pc, #68]	; (8002f1c <SystemInit+0x60>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002edc:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <SystemInit+0x60>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <SystemInit+0x60>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	490d      	ldr	r1, [pc, #52]	; (8002f1c <SystemInit+0x60>)
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <SystemInit+0x64>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <SystemInit+0x60>)
 8002ef0:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <SystemInit+0x68>)
 8002ef2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <SystemInit+0x60>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <SystemInit+0x60>)
 8002efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <SystemInit+0x60>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f06:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <SystemInit+0x5c>)
 8002f08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f0c:	609a      	str	r2, [r3, #8]
#endif
}
 8002f0e:	bf00      	nop
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	e000ed00 	.word	0xe000ed00
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	fef6ffff 	.word	0xfef6ffff
 8002f24:	24003010 	.word	0x24003010

08002f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <HAL_Init+0x28>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <HAL_Init+0x28>)
 8002f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f36:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f38:	2003      	movs	r0, #3
 8002f3a:	f000 f904 	bl	8003146 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f3e:	200f      	movs	r0, #15
 8002f40:	f7fe ff92 	bl	8001e68 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002f44:	f000 f806 	bl	8002f54 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023c00 	.word	0x40023c00

08002f54 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_IncTick+0x20>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_IncTick+0x24>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4413      	add	r3, r2
 8002f74:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <HAL_IncTick+0x24>)
 8002f76:	6013      	str	r3, [r2, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000024 	.word	0x20000024
 8002f88:	20006a58 	.word	0x20006a58

08002f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <HAL_GetTick+0x14>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20006a58 	.word	0x20006a58

08002fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fac:	f7ff ffee 	bl	8002f8c <HAL_GetTick>
 8002fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d005      	beq.n	8002fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <HAL_Delay+0x44>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fca:	bf00      	nop
 8002fcc:	f7ff ffde 	bl	8002f8c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d8f7      	bhi.n	8002fcc <HAL_Delay+0x28>
  {
  }
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000024 	.word	0x20000024

08002fec <__NVIC_SetPriorityGrouping>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <__NVIC_SetPriorityGrouping+0x40>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003008:	4013      	ands	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <__NVIC_SetPriorityGrouping+0x44>)
 8003016:	4313      	orrs	r3, r2
 8003018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301a:	4a04      	ldr	r2, [pc, #16]	; (800302c <__NVIC_SetPriorityGrouping+0x40>)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	60d3      	str	r3, [r2, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00
 8003030:	05fa0000 	.word	0x05fa0000

08003034 <__NVIC_GetPriorityGrouping>:
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <__NVIC_GetPriorityGrouping+0x18>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	f003 0307 	and.w	r3, r3, #7
}
 8003042:	4618      	mov	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <__NVIC_EnableIRQ>:
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305e:	2b00      	cmp	r3, #0
 8003060:	db0b      	blt.n	800307a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	f003 021f 	and.w	r2, r3, #31
 8003068:	4907      	ldr	r1, [pc, #28]	; (8003088 <__NVIC_EnableIRQ+0x38>)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	2001      	movs	r0, #1
 8003072:	fa00 f202 	lsl.w	r2, r0, r2
 8003076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	e000e100 	.word	0xe000e100

0800308c <__NVIC_SetPriority>:
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	6039      	str	r1, [r7, #0]
 8003096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309c:	2b00      	cmp	r3, #0
 800309e:	db0a      	blt.n	80030b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	490c      	ldr	r1, [pc, #48]	; (80030d8 <__NVIC_SetPriority+0x4c>)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	0112      	lsls	r2, r2, #4
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	440b      	add	r3, r1
 80030b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030b4:	e00a      	b.n	80030cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4908      	ldr	r1, [pc, #32]	; (80030dc <__NVIC_SetPriority+0x50>)
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	3b04      	subs	r3, #4
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	440b      	add	r3, r1
 80030ca:	761a      	strb	r2, [r3, #24]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000e100 	.word	0xe000e100
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <NVIC_EncodePriority>:
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f1c3 0307 	rsb	r3, r3, #7
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	bf28      	it	cs
 80030fe:	2304      	movcs	r3, #4
 8003100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3304      	adds	r3, #4
 8003106:	2b06      	cmp	r3, #6
 8003108:	d902      	bls.n	8003110 <NVIC_EncodePriority+0x30>
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3b03      	subs	r3, #3
 800310e:	e000      	b.n	8003112 <NVIC_EncodePriority+0x32>
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003114:	f04f 32ff 	mov.w	r2, #4294967295
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43da      	mvns	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	401a      	ands	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003128:	f04f 31ff 	mov.w	r1, #4294967295
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	43d9      	mvns	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003138:	4313      	orrs	r3, r2
}
 800313a:	4618      	mov	r0, r3
 800313c:	3724      	adds	r7, #36	; 0x24
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ff4c 	bl	8002fec <__NVIC_SetPriorityGrouping>
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800316e:	f7ff ff61 	bl	8003034 <__NVIC_GetPriorityGrouping>
 8003172:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	6978      	ldr	r0, [r7, #20]
 800317a:	f7ff ffb1 	bl	80030e0 <NVIC_EncodePriority>
 800317e:	4602      	mov	r2, r0
 8003180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff80 	bl	800308c <__NVIC_SetPriority>
}
 800318c:	bf00      	nop
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff ff54 	bl	8003050 <__NVIC_EnableIRQ>
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80031b4:	f3bf 8f5f 	dmb	sy
}
 80031b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <HAL_MPU_Disable+0x28>)
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	4a06      	ldr	r2, [pc, #24]	; (80031d8 <HAL_MPU_Disable+0x28>)
 80031c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_MPU_Disable+0x2c>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	605a      	str	r2, [r3, #4]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	e000ed00 	.word	0xe000ed00
 80031dc:	e000ed90 	.word	0xe000ed90

080031e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80031e8:	4a0b      	ldr	r2, [pc, #44]	; (8003218 <HAL_MPU_Enable+0x38>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_MPU_Enable+0x3c>)
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_MPU_Enable+0x3c>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80031fe:	f3bf 8f4f 	dsb	sy
}
 8003202:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003204:	f3bf 8f6f 	isb	sy
}
 8003208:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000ed90 	.word	0xe000ed90
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	785a      	ldrb	r2, [r3, #1]
 800322c:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <HAL_MPU_ConfigRegion+0x84>)
 800322e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d029      	beq.n	800328c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8003238:	4a1a      	ldr	r2, [pc, #104]	; (80032a4 <HAL_MPU_ConfigRegion+0x84>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7b1b      	ldrb	r3, [r3, #12]
 8003244:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7adb      	ldrb	r3, [r3, #11]
 800324a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800324c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	7a9b      	ldrb	r3, [r3, #10]
 8003252:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003254:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7b5b      	ldrb	r3, [r3, #13]
 800325a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800325c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	7b9b      	ldrb	r3, [r3, #14]
 8003262:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003264:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7bdb      	ldrb	r3, [r3, #15]
 800326a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800326c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	7a5b      	ldrb	r3, [r3, #9]
 8003272:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003274:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	7a1b      	ldrb	r3, [r3, #8]
 800327a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800327c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	7812      	ldrb	r2, [r2, #0]
 8003282:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003284:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003286:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003288:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800328a:	e005      	b.n	8003298 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_MPU_ConfigRegion+0x84>)
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003292:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <HAL_MPU_ConfigRegion+0x84>)
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000ed90 	.word	0xe000ed90

080032a8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80032b8:	4ba9      	ldr	r3, [pc, #676]	; (8003560 <HAL_ETH_Init+0x2b8>)
 80032ba:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80032c0:	2300      	movs	r3, #0
 80032c2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e181      	b.n	80035d2 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fe f81a 	bl	800131c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e8:	4b9e      	ldr	r3, [pc, #632]	; (8003564 <HAL_ETH_Init+0x2bc>)
 80032ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ec:	4a9d      	ldr	r2, [pc, #628]	; (8003564 <HAL_ETH_Init+0x2bc>)
 80032ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f2:	6453      	str	r3, [r2, #68]	; 0x44
 80032f4:	4b9b      	ldr	r3, [pc, #620]	; (8003564 <HAL_ETH_Init+0x2bc>)
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003300:	4b99      	ldr	r3, [pc, #612]	; (8003568 <HAL_ETH_Init+0x2c0>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4a98      	ldr	r2, [pc, #608]	; (8003568 <HAL_ETH_Init+0x2c0>)
 8003306:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800330a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800330c:	4b96      	ldr	r3, [pc, #600]	; (8003568 <HAL_ETH_Init+0x2c0>)
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	4994      	ldr	r1, [pc, #592]	; (8003568 <HAL_ETH_Init+0x2c0>)
 8003316:	4313      	orrs	r3, r2
 8003318:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003330:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003332:	f7ff fe2b 	bl	8002f8c <HAL_GetTick>
 8003336:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003338:	e011      	b.n	800335e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800333a:	f7ff fe27 	bl	8002f8c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003348:	d909      	bls.n	800335e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2203      	movs	r2, #3
 800334e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e139      	b.n	80035d2 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e4      	bne.n	800333a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f023 031c 	bic.w	r3, r3, #28
 800337e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003380:	f001 fe22 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 8003384:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	4a78      	ldr	r2, [pc, #480]	; (800356c <HAL_ETH_Init+0x2c4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d908      	bls.n	80033a0 <HAL_ETH_Init+0xf8>
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	4a77      	ldr	r2, [pc, #476]	; (8003570 <HAL_ETH_Init+0x2c8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d804      	bhi.n	80033a0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f043 0308 	orr.w	r3, r3, #8
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	e027      	b.n	80033f0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	4a73      	ldr	r2, [pc, #460]	; (8003570 <HAL_ETH_Init+0x2c8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d908      	bls.n	80033ba <HAL_ETH_Init+0x112>
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	4a6d      	ldr	r2, [pc, #436]	; (8003560 <HAL_ETH_Init+0x2b8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d204      	bcs.n	80033ba <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f043 030c 	orr.w	r3, r3, #12
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	e01a      	b.n	80033f0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	4a68      	ldr	r2, [pc, #416]	; (8003560 <HAL_ETH_Init+0x2b8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d303      	bcc.n	80033ca <HAL_ETH_Init+0x122>
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	4a6b      	ldr	r2, [pc, #428]	; (8003574 <HAL_ETH_Init+0x2cc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d911      	bls.n	80033ee <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4a69      	ldr	r2, [pc, #420]	; (8003574 <HAL_ETH_Init+0x2cc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d908      	bls.n	80033e4 <HAL_ETH_Init+0x13c>
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	4a68      	ldr	r2, [pc, #416]	; (8003578 <HAL_ETH_Init+0x2d0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d804      	bhi.n	80033e4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f043 0304 	orr.w	r3, r3, #4
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	e005      	b.n	80033f0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f043 0310 	orr.w	r3, r3, #16
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	e000      	b.n	80033f0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80033ee:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80033f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80033fc:	2100      	movs	r1, #0
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fc17 	bl	8003c32 <HAL_ETH_WritePHYRegister>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800340e:	6939      	ldr	r1, [r7, #16]
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fca3 	bl	8003d5c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e0d7      	b.n	80035d2 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003422:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003426:	f7ff fdbd 	bl	8002fa4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80a4 	beq.w	800357c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003434:	f7ff fdaa 	bl	8002f8c <HAL_GetTick>
 8003438:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800343a:	f107 030c 	add.w	r3, r7, #12
 800343e:	461a      	mov	r2, r3
 8003440:	2101      	movs	r1, #1
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fb8d 	bl	8003b62 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003448:	f7ff fda0 	bl	8002f8c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	; 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d90f      	bls.n	800347a <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800345e:	6939      	ldr	r1, [r7, #16]
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fc7b 	bl	8003d5c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e0ab      	b.n	80035d2 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0da      	beq.n	800343a <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003488:	2100      	movs	r1, #0
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fbd1 	bl	8003c32 <HAL_ETH_WritePHYRegister>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800349a:	6939      	ldr	r1, [r7, #16]
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fc5d 	bl	8003d5c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80034aa:	2301      	movs	r3, #1
 80034ac:	e091      	b.n	80035d2 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80034ae:	f7ff fd6d 	bl	8002f8c <HAL_GetTick>
 80034b2:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80034b4:	f107 030c 	add.w	r3, r7, #12
 80034b8:	461a      	mov	r2, r3
 80034ba:	2101      	movs	r1, #1
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fb50 	bl	8003b62 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80034c2:	f7ff fd63 	bl	8002f8c <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d90f      	bls.n	80034f4 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80034d8:	6939      	ldr	r1, [r7, #16]
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fc3e 	bl	8003d5c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e06e      	b.n	80035d2 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0da      	beq.n	80034b4 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80034fe:	f107 030c 	add.w	r3, r7, #12
 8003502:	461a      	mov	r2, r3
 8003504:	211f      	movs	r1, #31
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fb2b 	bl	8003b62 <HAL_ETH_ReadPHYRegister>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00b      	beq.n	800352a <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003516:	6939      	ldr	r1, [r7, #16]
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fc1f 	bl	8003d5c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003526:	2301      	movs	r3, #1
 8003528:	e053      	b.n	80035d2 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b00      	cmp	r3, #0
 8003532:	d004      	beq.n	800353e <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800353a:	60da      	str	r2, [r3, #12]
 800353c:	e002      	b.n	8003544 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	e034      	b.n	80035c0 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800355c:	609a      	str	r2, [r3, #8]
 800355e:	e02f      	b.n	80035c0 <HAL_ETH_Init+0x318>
 8003560:	03938700 	.word	0x03938700
 8003564:	40023800 	.word	0x40023800
 8003568:	40013800 	.word	0x40013800
 800356c:	01312cff 	.word	0x01312cff
 8003570:	02160ebf 	.word	0x02160ebf
 8003574:	05f5e0ff 	.word	0x05f5e0ff
 8003578:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	08db      	lsrs	r3, r3, #3
 8003582:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800358c:	4313      	orrs	r3, r2
 800358e:	b29b      	uxth	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	2100      	movs	r1, #0
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fb4c 	bl	8003c32 <HAL_ETH_WritePHYRegister>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00b      	beq.n	80035b8 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80035a4:	6939      	ldr	r1, [r7, #16]
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fbd8 	bl	8003d5c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e00c      	b.n	80035d2 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80035b8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80035bc:	f7ff fcf2 	bl	8002fa4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80035c0:	6939      	ldr	r1, [r7, #16]
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fbca 	bl	8003d5c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop

080035dc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_ETH_DMATxDescListInit+0x20>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e052      	b.n	80036a2 <HAL_ETH_DMATxDescListInit+0xc6>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e030      	b.n	800367a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	015b      	lsls	r3, r3, #5
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	4413      	add	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003628:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	4413      	add	r3, r2
 8003638:	461a      	mov	r2, r3
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d105      	bne.n	8003652 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	3b01      	subs	r3, #1
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	d208      	bcs.n	800366e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3301      	adds	r3, #1
 8003660:	015b      	lsls	r3, r3, #5
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	4413      	add	r3, r2
 8003666:	461a      	mov	r2, r3
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	60da      	str	r2, [r3, #12]
 800366c:	e002      	b.n	8003674 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	3301      	adds	r3, #1
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d3ca      	bcc.n	8003618 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6819      	ldr	r1, [r3, #0]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	f241 0310 	movw	r3, #4112	; 0x1010
 800368c:	440b      	add	r3, r1
 800368e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b087      	sub	sp, #28
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_ETH_DMARxDescListInit+0x20>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e056      	b.n	800377c <HAL_ETH_DMARxDescListInit+0xce>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2202      	movs	r2, #2
 80036da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	e034      	b.n	8003754 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	015b      	lsls	r3, r3, #5
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	4413      	add	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036fa:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003702:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	461a      	mov	r2, r3
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	3b01      	subs	r3, #1
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	429a      	cmp	r2, r3
 8003734:	d208      	bcs.n	8003748 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	3301      	adds	r3, #1
 800373a:	015b      	lsls	r3, r3, #5
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	4413      	add	r3, r2
 8003740:	461a      	mov	r2, r3
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	e002      	b.n	800374e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	3301      	adds	r3, #1
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d3c6      	bcc.n	80036ea <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	f241 030c 	movw	r3, #4108	; 0x100c
 8003766:	440b      	add	r3, r1
 8003768:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_ETH_TransmitFrame+0x24>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e0cd      	b.n	8003948 <HAL_ETH_TransmitFrame+0x1c0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0b8      	b.n	8003948 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	da09      	bge.n	80037f4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2212      	movs	r2, #18
 80037e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0a9      	b.n	8003948 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d915      	bls.n	800382a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	4a54      	ldr	r2, [pc, #336]	; (8003954 <HAL_ETH_TransmitFrame+0x1cc>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0a9b      	lsrs	r3, r3, #10
 8003808:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	4b51      	ldr	r3, [pc, #324]	; (8003954 <HAL_ETH_TransmitFrame+0x1cc>)
 800380e:	fba3 1302 	umull	r1, r3, r3, r2
 8003812:	0a9b      	lsrs	r3, r3, #10
 8003814:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	3301      	adds	r3, #1
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e001      	b.n	800382e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800382a:	2301      	movs	r3, #1
 800382c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d11c      	bne.n	800386e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003842:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800384e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800385e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	461a      	mov	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	62da      	str	r2, [r3, #44]	; 0x2c
 800386c:	e04b      	b.n	8003906 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	e044      	b.n	80038fe <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003882:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d107      	bne.n	800389a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003898:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80038a2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d116      	bne.n	80038dc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80038bc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	4a25      	ldr	r2, [pc, #148]	; (8003958 <HAL_ETH_TransmitFrame+0x1d0>)
 80038c2:	fb02 f203 	mul.w	r2, r2, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	4413      	add	r3, r2
 80038ca:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80038ce:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80038da:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80038ea:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	461a      	mov	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	3301      	adds	r3, #1
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	429a      	cmp	r2, r3
 8003904:	d3b6      	bcc.n	8003874 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	f241 0314 	movw	r3, #4116	; 0x1014
 800390e:	4413      	add	r3, r2
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00d      	beq.n	8003936 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	f241 0314 	movw	r3, #4116	; 0x1014
 8003922:	4413      	add	r3, r2
 8003924:	2204      	movs	r2, #4
 8003926:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	f241 0304 	movw	r3, #4100	; 0x1004
 8003930:	4413      	add	r3, r2
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	ac02b00b 	.word	0xac02b00b
 8003958:	fffffa0c 	.word	0xfffffa0c

0800395c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8003972:	2302      	movs	r3, #2
 8003974:	e074      	b.n	8003a60 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003986:	e05a      	b.n	8003a3e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3301      	adds	r3, #1
 800398c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800399c:	d10d      	bne.n	80039ba <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	461a      	mov	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28
 80039b8:	e041      	b.n	8003a3e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	461a      	mov	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28
 80039de:	e02e      	b.n	8003a3e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d103      	bne.n	8003a02 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003a0e:	1f1a      	subs	r2, r3, #4
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	461a      	mov	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e010      	b.n	8003a60 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	db02      	blt.n	8003a4e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d99c      	bls.n	8003988 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a7c:	4413      	add	r3, r2
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d112      	bne.n	8003aae <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fd fcdf 	bl	800144c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a96:	4413      	add	r3, r2
 8003a98:	2240      	movs	r2, #64	; 0x40
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aac:	e01b      	b.n	8003ae6 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	f241 0314 	movw	r3, #4116	; 0x1014
 8003ab6:	4413      	add	r3, r2
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d111      	bne.n	8003ae6 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f839 	bl	8003b3a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	f241 0314 	movw	r3, #4116	; 0x1014
 8003ad0:	4413      	add	r3, r2
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	f241 0314 	movw	r3, #4116	; 0x1014
 8003aee:	4413      	add	r3, r2
 8003af0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003af4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	f241 0314 	movw	r3, #4116	; 0x1014
 8003afe:	4413      	add	r3, r2
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0a:	d112      	bne.n	8003b32 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f81e 	bl	8003b4e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	f241 0314 	movw	r3, #4116	; 0x1014
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b20:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b086      	sub	sp, #24
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b82      	cmp	r3, #130	; 0x82
 8003b82:	d101      	bne.n	8003b88 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
 8003b86:	e050      	b.n	8003c2a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2282      	movs	r2, #130	; 0x82
 8003b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f003 031c 	and.w	r3, r3, #28
 8003b9e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8a1b      	ldrh	r3, [r3, #16]
 8003ba4:	02db      	lsls	r3, r3, #11
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003bae:	897b      	ldrh	r3, [r7, #10]
 8003bb0:	019b      	lsls	r3, r3, #6
 8003bb2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f023 0302 	bic.w	r3, r3, #2
 8003bc2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003bd4:	f7ff f9da 	bl	8002f8c <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003bda:	e015      	b.n	8003c08 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003bdc:	f7ff f9d6 	bl	8002f8c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bea:	d309      	bcc.n	8003c00 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e014      	b.n	8003c2a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1e4      	bne.n	8003bdc <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b086      	sub	sp, #24
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b42      	cmp	r3, #66	; 0x42
 8003c52:	d101      	bne.n	8003c58 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
 8003c56:	e04e      	b.n	8003cf6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2242      	movs	r2, #66	; 0x42
 8003c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f003 031c 	and.w	r3, r3, #28
 8003c6e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8a1b      	ldrh	r3, [r3, #16]
 8003c74:	02db      	lsls	r3, r3, #11
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003c7e:	897b      	ldrh	r3, [r7, #10]
 8003c80:	019b      	lsls	r3, r3, #6
 8003c82:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f043 0302 	orr.w	r3, r3, #2
 8003c92:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003cae:	f7ff f96d 	bl	8002f8c <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003cb4:	e015      	b.n	8003ce2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003cb6:	f7ff f969 	bl	8002f8c <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc4:	d309      	bcc.n	8003cda <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e00d      	b.n	8003cf6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e4      	bne.n	8003cb6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_ETH_Start+0x16>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e01f      	b.n	8003d54 <HAL_ETH_Start+0x56>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fa1b 	bl	8004160 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fa35 	bl	800419a <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fa7f 	bl	8004234 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa4c 	bl	80041d4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fa61 	bl	8004204 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b0b0      	sub	sp, #192	; 0xc0
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d78:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d80:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003d82:	2300      	movs	r3, #0
 8003d84:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003da6:	663b      	str	r3, [r7, #96]	; 0x60
 8003da8:	e001      	b.n	8003dae <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003daa:	2300      	movs	r3, #0
 8003dac:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003db2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003db8:	2300      	movs	r3, #0
 8003dba:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003dc8:	2340      	movs	r3, #64	; 0x40
 8003dca:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003dde:	2300      	movs	r3, #0
 8003de0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003de4:	2300      	movs	r3, #0
 8003de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003e30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e34:	4bab      	ldr	r3, [pc, #684]	; (80040e4 <ETH_MACDMAConfig+0x388>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003e3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003e40:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003e44:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003e48:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003e4e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003e50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003e52:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003e56:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003e5c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003e60:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003e64:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003e66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003e68:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003e6c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003e70:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003e72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e84:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e90:	2001      	movs	r0, #1
 8003e92:	f7ff f887 	bl	8002fa4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e9e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003ea0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003ea4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003ea6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003ea8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003eaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003eae:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003eb4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003eb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003eba:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003ec0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003ec4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003ecc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003ece:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003eda:	2001      	movs	r0, #1
 8003edc:	f7ff f862 	bl	8002fa4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ee8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ef2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003efc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003f08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f0c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003f10:	4013      	ands	r3, r2
 8003f12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003f16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f1a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003f1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003f20:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003f22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003f26:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003f28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003f2c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003f32:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003f34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003f38:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003f3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f4c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f58:	2001      	movs	r0, #1
 8003f5a:	f7ff f823 	bl	8002fa4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f66:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003f68:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003f6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f82:	2001      	movs	r0, #1
 8003f84:	f7ff f80e 	bl	8002fa4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f90:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f9a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003fa0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fa4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003fb6:	2304      	movs	r3, #4
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003fc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fc4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003fc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fca:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fd0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	f241 0318 	movw	r3, #4120	; 0x1018
 8003fe6:	4413      	add	r3, r2
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003fee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ff2:	4b3d      	ldr	r3, [pc, #244]	; (80040e8 <ETH_MACDMAConfig+0x38c>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003ffa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003ffc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003ffe:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004000:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004002:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004004:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004006:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004008:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800400a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800400c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800400e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004010:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004012:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004016:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800401a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800401c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	f241 0318 	movw	r3, #4120	; 0x1018
 800402e:	4413      	add	r3, r2
 8004030:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004034:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	f241 0318 	movw	r3, #4120	; 0x1018
 800403e:	4413      	add	r3, r2
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004046:	2001      	movs	r0, #1
 8004048:	f7fe ffac 	bl	8002fa4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	f241 0318 	movw	r3, #4120	; 0x1018
 8004054:	4413      	add	r3, r2
 8004056:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800405a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800405c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004060:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004064:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004068:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800406a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800406c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800406e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004070:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004072:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8004076:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004084:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004094:	2001      	movs	r0, #1
 8004096:	f7fe ff85 	bl	8002fa4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040a6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d10d      	bne.n	80040cc <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	f241 031c 	movw	r3, #4124	; 0x101c
 80040b8:	4413      	add	r3, r2
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6811      	ldr	r1, [r2, #0]
 80040c0:	4a0a      	ldr	r2, [pc, #40]	; (80040ec <ETH_MACDMAConfig+0x390>)
 80040c2:	431a      	orrs	r2, r3
 80040c4:	f241 031c 	movw	r3, #4124	; 0x101c
 80040c8:	440b      	add	r3, r1
 80040ca:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	461a      	mov	r2, r3
 80040d2:	2100      	movs	r1, #0
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f80b 	bl	80040f0 <ETH_MACAddressConfig>
}
 80040da:	bf00      	nop
 80040dc:	37c0      	adds	r7, #192	; 0xc0
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	ff20810f 	.word	0xff20810f
 80040e8:	f8de3f23 	.word	0xf8de3f23
 80040ec:	00010040 	.word	0x00010040

080040f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3305      	adds	r3, #5
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	3204      	adds	r2, #4
 8004108:	7812      	ldrb	r2, [r2, #0]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	4b11      	ldr	r3, [pc, #68]	; (8004158 <ETH_MACAddressConfig+0x68>)
 8004112:	4413      	add	r3, r2
 8004114:	461a      	mov	r2, r3
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3303      	adds	r3, #3
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	061a      	lsls	r2, r3, #24
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3302      	adds	r3, #2
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	041b      	lsls	r3, r3, #16
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3301      	adds	r3, #1
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	4313      	orrs	r3, r2
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	7812      	ldrb	r2, [r2, #0]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <ETH_MACAddressConfig+0x6c>)
 8004142:	4413      	add	r3, r2
 8004144:	461a      	mov	r2, r3
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	6013      	str	r3, [r2, #0]
}
 800414a:	bf00      	nop
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40028040 	.word	0x40028040
 800415c:	40028044 	.word	0x40028044

08004160 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0208 	orr.w	r2, r2, #8
 800417a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004184:	2001      	movs	r0, #1
 8004186:	f7fe ff0d 	bl	8002fa4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	601a      	str	r2, [r3, #0]
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f042 0204 	orr.w	r2, r2, #4
 80041b4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041be:	2001      	movs	r0, #1
 80041c0:	f7fe fef0 	bl	8002fa4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	601a      	str	r2, [r3, #0]
}
 80041cc:	bf00      	nop
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	f241 0318 	movw	r3, #4120	; 0x1018
 80041e4:	4413      	add	r3, r2
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6811      	ldr	r1, [r2, #0]
 80041ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80041f0:	f241 0318 	movw	r3, #4120	; 0x1018
 80041f4:	440b      	add	r3, r1
 80041f6:	601a      	str	r2, [r3, #0]
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	f241 0318 	movw	r3, #4120	; 0x1018
 8004214:	4413      	add	r3, r2
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6811      	ldr	r1, [r2, #0]
 800421c:	f043 0202 	orr.w	r2, r3, #2
 8004220:	f241 0318 	movw	r3, #4120	; 0x1018
 8004224:	440b      	add	r3, r1
 8004226:	601a      	str	r2, [r3, #0]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	f241 0318 	movw	r3, #4120	; 0x1018
 8004248:	4413      	add	r3, r2
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6811      	ldr	r1, [r2, #0]
 8004250:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004254:	f241 0318 	movw	r3, #4120	; 0x1018
 8004258:	440b      	add	r3, r1
 800425a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	f241 0318 	movw	r3, #4120	; 0x1018
 8004264:	4413      	add	r3, r2
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800426a:	2001      	movs	r0, #1
 800426c:	f7fe fe9a 	bl	8002fa4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	f241 0318 	movw	r3, #4120	; 0x1018
 800427a:	440b      	add	r3, r1
 800427c:	601a      	str	r2, [r3, #0]
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004288:	b480      	push	{r7}
 800428a:	b089      	sub	sp, #36	; 0x24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004292:	2300      	movs	r3, #0
 8004294:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800429e:	2300      	movs	r3, #0
 80042a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	e175      	b.n	8004594 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80042a8:	2201      	movs	r2, #1
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4013      	ands	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	f040 8164 	bne.w	800458e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d00b      	beq.n	80042e6 <HAL_GPIO_Init+0x5e>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d007      	beq.n	80042e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042da:	2b11      	cmp	r3, #17
 80042dc:	d003      	beq.n	80042e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b12      	cmp	r3, #18
 80042e4:	d130      	bne.n	8004348 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	2203      	movs	r2, #3
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4013      	ands	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4313      	orrs	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800431c:	2201      	movs	r2, #1
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	091b      	lsrs	r3, r3, #4
 8004332:	f003 0201 	and.w	r2, r3, #1
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4313      	orrs	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	2203      	movs	r2, #3
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d003      	beq.n	8004388 <HAL_GPIO_Init+0x100>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b12      	cmp	r3, #18
 8004386:	d123      	bne.n	80043d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	08da      	lsrs	r2, r3, #3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3208      	adds	r2, #8
 8004390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	220f      	movs	r2, #15
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4013      	ands	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4313      	orrs	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	08da      	lsrs	r2, r3, #3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3208      	adds	r2, #8
 80043ca:	69b9      	ldr	r1, [r7, #24]
 80043cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	2203      	movs	r2, #3
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 0203 	and.w	r2, r3, #3
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 80be 	beq.w	800458e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004412:	4b66      	ldr	r3, [pc, #408]	; (80045ac <HAL_GPIO_Init+0x324>)
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	4a65      	ldr	r2, [pc, #404]	; (80045ac <HAL_GPIO_Init+0x324>)
 8004418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800441c:	6453      	str	r3, [r2, #68]	; 0x44
 800441e:	4b63      	ldr	r3, [pc, #396]	; (80045ac <HAL_GPIO_Init+0x324>)
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800442a:	4a61      	ldr	r2, [pc, #388]	; (80045b0 <HAL_GPIO_Init+0x328>)
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	089b      	lsrs	r3, r3, #2
 8004430:	3302      	adds	r3, #2
 8004432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004436:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	220f      	movs	r2, #15
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43db      	mvns	r3, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4013      	ands	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a58      	ldr	r2, [pc, #352]	; (80045b4 <HAL_GPIO_Init+0x32c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d037      	beq.n	80044c6 <HAL_GPIO_Init+0x23e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a57      	ldr	r2, [pc, #348]	; (80045b8 <HAL_GPIO_Init+0x330>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d031      	beq.n	80044c2 <HAL_GPIO_Init+0x23a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a56      	ldr	r2, [pc, #344]	; (80045bc <HAL_GPIO_Init+0x334>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d02b      	beq.n	80044be <HAL_GPIO_Init+0x236>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a55      	ldr	r2, [pc, #340]	; (80045c0 <HAL_GPIO_Init+0x338>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d025      	beq.n	80044ba <HAL_GPIO_Init+0x232>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a54      	ldr	r2, [pc, #336]	; (80045c4 <HAL_GPIO_Init+0x33c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d01f      	beq.n	80044b6 <HAL_GPIO_Init+0x22e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a53      	ldr	r2, [pc, #332]	; (80045c8 <HAL_GPIO_Init+0x340>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d019      	beq.n	80044b2 <HAL_GPIO_Init+0x22a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a52      	ldr	r2, [pc, #328]	; (80045cc <HAL_GPIO_Init+0x344>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d013      	beq.n	80044ae <HAL_GPIO_Init+0x226>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a51      	ldr	r2, [pc, #324]	; (80045d0 <HAL_GPIO_Init+0x348>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00d      	beq.n	80044aa <HAL_GPIO_Init+0x222>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a50      	ldr	r2, [pc, #320]	; (80045d4 <HAL_GPIO_Init+0x34c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d007      	beq.n	80044a6 <HAL_GPIO_Init+0x21e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a4f      	ldr	r2, [pc, #316]	; (80045d8 <HAL_GPIO_Init+0x350>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d101      	bne.n	80044a2 <HAL_GPIO_Init+0x21a>
 800449e:	2309      	movs	r3, #9
 80044a0:	e012      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044a2:	230a      	movs	r3, #10
 80044a4:	e010      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044a6:	2308      	movs	r3, #8
 80044a8:	e00e      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044aa:	2307      	movs	r3, #7
 80044ac:	e00c      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044ae:	2306      	movs	r3, #6
 80044b0:	e00a      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044b2:	2305      	movs	r3, #5
 80044b4:	e008      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044b6:	2304      	movs	r3, #4
 80044b8:	e006      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044ba:	2303      	movs	r3, #3
 80044bc:	e004      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044be:	2302      	movs	r3, #2
 80044c0:	e002      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <HAL_GPIO_Init+0x240>
 80044c6:	2300      	movs	r3, #0
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	f002 0203 	and.w	r2, r2, #3
 80044ce:	0092      	lsls	r2, r2, #2
 80044d0:	4093      	lsls	r3, r2
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80044d8:	4935      	ldr	r1, [pc, #212]	; (80045b0 <HAL_GPIO_Init+0x328>)
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	089b      	lsrs	r3, r3, #2
 80044de:	3302      	adds	r3, #2
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044e6:	4b3d      	ldr	r3, [pc, #244]	; (80045dc <HAL_GPIO_Init+0x354>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	43db      	mvns	r3, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4013      	ands	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800450a:	4a34      	ldr	r2, [pc, #208]	; (80045dc <HAL_GPIO_Init+0x354>)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004510:	4b32      	ldr	r3, [pc, #200]	; (80045dc <HAL_GPIO_Init+0x354>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	43db      	mvns	r3, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4013      	ands	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004534:	4a29      	ldr	r2, [pc, #164]	; (80045dc <HAL_GPIO_Init+0x354>)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800453a:	4b28      	ldr	r3, [pc, #160]	; (80045dc <HAL_GPIO_Init+0x354>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	43db      	mvns	r3, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4013      	ands	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800455e:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <HAL_GPIO_Init+0x354>)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <HAL_GPIO_Init+0x354>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004588:	4a14      	ldr	r2, [pc, #80]	; (80045dc <HAL_GPIO_Init+0x354>)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3301      	adds	r3, #1
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2b0f      	cmp	r3, #15
 8004598:	f67f ae86 	bls.w	80042a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800459c:	bf00      	nop
 800459e:	bf00      	nop
 80045a0:	3724      	adds	r7, #36	; 0x24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40013800 	.word	0x40013800
 80045b4:	40020000 	.word	0x40020000
 80045b8:	40020400 	.word	0x40020400
 80045bc:	40020800 	.word	0x40020800
 80045c0:	40020c00 	.word	0x40020c00
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40021400 	.word	0x40021400
 80045cc:	40021800 	.word	0x40021800
 80045d0:	40021c00 	.word	0x40021c00
 80045d4:	40022000 	.word	0x40022000
 80045d8:	40022400 	.word	0x40022400
 80045dc:	40013c00 	.word	0x40013c00

080045e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	887b      	ldrh	r3, [r7, #2]
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
 80045fc:	e001      	b.n	8004602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004602:	7bfb      	ldrb	r3, [r7, #15]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	807b      	strh	r3, [r7, #2]
 800461c:	4613      	mov	r3, r2
 800461e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004620:	787b      	ldrb	r3, [r7, #1]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004626:	887a      	ldrh	r2, [r7, #2]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800462c:	e003      	b.n	8004636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800462e:	887b      	ldrh	r3, [r7, #2]
 8004630:	041a      	lsls	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	619a      	str	r2, [r3, #24]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800464e:	4b23      	ldr	r3, [pc, #140]	; (80046dc <HAL_PWREx_EnableOverDrive+0x98>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	4a22      	ldr	r2, [pc, #136]	; (80046dc <HAL_PWREx_EnableOverDrive+0x98>)
 8004654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004658:	6413      	str	r3, [r2, #64]	; 0x40
 800465a:	4b20      	ldr	r3, [pc, #128]	; (80046dc <HAL_PWREx_EnableOverDrive+0x98>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004666:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1d      	ldr	r2, [pc, #116]	; (80046e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800466c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004670:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004672:	f7fe fc8b 	bl	8002f8c <HAL_GetTick>
 8004676:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004678:	e009      	b.n	800468e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800467a:	f7fe fc87 	bl	8002f8c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004688:	d901      	bls.n	800468e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e022      	b.n	80046d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800468e:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469a:	d1ee      	bne.n	800467a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800469c:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a0f      	ldr	r2, [pc, #60]	; (80046e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046a8:	f7fe fc70 	bl	8002f8c <HAL_GetTick>
 80046ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046ae:	e009      	b.n	80046c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046b0:	f7fe fc6c 	bl	8002f8c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046be:	d901      	bls.n	80046c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e007      	b.n	80046d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046c4:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046d0:	d1ee      	bne.n	80046b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40023800 	.word	0x40023800
 80046e0:	40007000 	.word	0x40007000

080046e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80046ec:	2300      	movs	r3, #0
 80046ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e291      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8087 	beq.w	8004816 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004708:	4b96      	ldr	r3, [pc, #600]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	2b04      	cmp	r3, #4
 8004712:	d00c      	beq.n	800472e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004714:	4b93      	ldr	r3, [pc, #588]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b08      	cmp	r3, #8
 800471e:	d112      	bne.n	8004746 <HAL_RCC_OscConfig+0x62>
 8004720:	4b90      	ldr	r3, [pc, #576]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800472c:	d10b      	bne.n	8004746 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472e:	4b8d      	ldr	r3, [pc, #564]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d06c      	beq.n	8004814 <HAL_RCC_OscConfig+0x130>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d168      	bne.n	8004814 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e26b      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474e:	d106      	bne.n	800475e <HAL_RCC_OscConfig+0x7a>
 8004750:	4b84      	ldr	r3, [pc, #528]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a83      	ldr	r2, [pc, #524]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	e02e      	b.n	80047bc <HAL_RCC_OscConfig+0xd8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0x9c>
 8004766:	4b7f      	ldr	r3, [pc, #508]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a7e      	ldr	r2, [pc, #504]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 800476c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4b7c      	ldr	r3, [pc, #496]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a7b      	ldr	r2, [pc, #492]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	e01d      	b.n	80047bc <HAL_RCC_OscConfig+0xd8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004788:	d10c      	bne.n	80047a4 <HAL_RCC_OscConfig+0xc0>
 800478a:	4b76      	ldr	r3, [pc, #472]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a75      	ldr	r2, [pc, #468]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	4b73      	ldr	r3, [pc, #460]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a72      	ldr	r2, [pc, #456]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 800479c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	e00b      	b.n	80047bc <HAL_RCC_OscConfig+0xd8>
 80047a4:	4b6f      	ldr	r3, [pc, #444]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a6e      	ldr	r2, [pc, #440]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 80047aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	4b6c      	ldr	r3, [pc, #432]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a6b      	ldr	r2, [pc, #428]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 80047b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d013      	beq.n	80047ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fe fbe2 	bl	8002f8c <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047cc:	f7fe fbde 	bl	8002f8c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b64      	cmp	r3, #100	; 0x64
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e21f      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047de:	4b61      	ldr	r3, [pc, #388]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0xe8>
 80047ea:	e014      	b.n	8004816 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fe fbce 	bl	8002f8c <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f4:	f7fe fbca 	bl	8002f8c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b64      	cmp	r3, #100	; 0x64
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e20b      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004806:	4b57      	ldr	r3, [pc, #348]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x110>
 8004812:	e000      	b.n	8004816 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d069      	beq.n	80048f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004822:	4b50      	ldr	r3, [pc, #320]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800482e:	4b4d      	ldr	r3, [pc, #308]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b08      	cmp	r3, #8
 8004838:	d11c      	bne.n	8004874 <HAL_RCC_OscConfig+0x190>
 800483a:	4b4a      	ldr	r3, [pc, #296]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d116      	bne.n	8004874 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004846:	4b47      	ldr	r3, [pc, #284]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_RCC_OscConfig+0x17a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d001      	beq.n	800485e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e1df      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485e:	4b41      	ldr	r3, [pc, #260]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	493d      	ldr	r1, [pc, #244]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 800486e:	4313      	orrs	r3, r2
 8004870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004872:	e040      	b.n	80048f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d023      	beq.n	80048c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800487c:	4b39      	ldr	r3, [pc, #228]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a38      	ldr	r2, [pc, #224]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7fe fb80 	bl	8002f8c <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004890:	f7fe fb7c 	bl	8002f8c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e1bd      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a2:	4b30      	ldr	r3, [pc, #192]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ae:	4b2d      	ldr	r3, [pc, #180]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	4929      	ldr	r1, [pc, #164]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	600b      	str	r3, [r1, #0]
 80048c2:	e018      	b.n	80048f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048c4:	4b27      	ldr	r3, [pc, #156]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a26      	ldr	r2, [pc, #152]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 80048ca:	f023 0301 	bic.w	r3, r3, #1
 80048ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fe fb5c 	bl	8002f8c <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d8:	f7fe fb58 	bl	8002f8c <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e199      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ea:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d038      	beq.n	8004974 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d019      	beq.n	800493e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800490a:	4b16      	ldr	r3, [pc, #88]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 800490c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490e:	4a15      	ldr	r2, [pc, #84]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004916:	f7fe fb39 	bl	8002f8c <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800491e:	f7fe fb35 	bl	8002f8c <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e176      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0f0      	beq.n	800491e <HAL_RCC_OscConfig+0x23a>
 800493c:	e01a      	b.n	8004974 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800493e:	4b09      	ldr	r3, [pc, #36]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004942:	4a08      	ldr	r2, [pc, #32]	; (8004964 <HAL_RCC_OscConfig+0x280>)
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494a:	f7fe fb1f 	bl	8002f8c <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004950:	e00a      	b.n	8004968 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004952:	f7fe fb1b 	bl	8002f8c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d903      	bls.n	8004968 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e15c      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>
 8004964:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004968:	4b91      	ldr	r3, [pc, #580]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 800496a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1ee      	bne.n	8004952 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80a4 	beq.w	8004aca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004982:	4b8b      	ldr	r3, [pc, #556]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10d      	bne.n	80049aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800498e:	4b88      	ldr	r3, [pc, #544]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	4a87      	ldr	r2, [pc, #540]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004998:	6413      	str	r3, [r2, #64]	; 0x40
 800499a:	4b85      	ldr	r3, [pc, #532]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049aa:	4b82      	ldr	r3, [pc, #520]	; (8004bb4 <HAL_RCC_OscConfig+0x4d0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d118      	bne.n	80049e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80049b6:	4b7f      	ldr	r3, [pc, #508]	; (8004bb4 <HAL_RCC_OscConfig+0x4d0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a7e      	ldr	r2, [pc, #504]	; (8004bb4 <HAL_RCC_OscConfig+0x4d0>)
 80049bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c2:	f7fe fae3 	bl	8002f8c <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ca:	f7fe fadf 	bl	8002f8c <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b64      	cmp	r3, #100	; 0x64
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e120      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049dc:	4b75      	ldr	r3, [pc, #468]	; (8004bb4 <HAL_RCC_OscConfig+0x4d0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d106      	bne.n	80049fe <HAL_RCC_OscConfig+0x31a>
 80049f0:	4b6f      	ldr	r3, [pc, #444]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 80049f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f4:	4a6e      	ldr	r2, [pc, #440]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	6713      	str	r3, [r2, #112]	; 0x70
 80049fc:	e02d      	b.n	8004a5a <HAL_RCC_OscConfig+0x376>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCC_OscConfig+0x33c>
 8004a06:	4b6a      	ldr	r3, [pc, #424]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0a:	4a69      	ldr	r2, [pc, #420]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a0c:	f023 0301 	bic.w	r3, r3, #1
 8004a10:	6713      	str	r3, [r2, #112]	; 0x70
 8004a12:	4b67      	ldr	r3, [pc, #412]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	4a66      	ldr	r2, [pc, #408]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a18:	f023 0304 	bic.w	r3, r3, #4
 8004a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a1e:	e01c      	b.n	8004a5a <HAL_RCC_OscConfig+0x376>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b05      	cmp	r3, #5
 8004a26:	d10c      	bne.n	8004a42 <HAL_RCC_OscConfig+0x35e>
 8004a28:	4b61      	ldr	r3, [pc, #388]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2c:	4a60      	ldr	r2, [pc, #384]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a2e:	f043 0304 	orr.w	r3, r3, #4
 8004a32:	6713      	str	r3, [r2, #112]	; 0x70
 8004a34:	4b5e      	ldr	r3, [pc, #376]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	4a5d      	ldr	r2, [pc, #372]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a40:	e00b      	b.n	8004a5a <HAL_RCC_OscConfig+0x376>
 8004a42:	4b5b      	ldr	r3, [pc, #364]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a46:	4a5a      	ldr	r2, [pc, #360]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a48:	f023 0301 	bic.w	r3, r3, #1
 8004a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a4e:	4b58      	ldr	r3, [pc, #352]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a52:	4a57      	ldr	r2, [pc, #348]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a54:	f023 0304 	bic.w	r3, r3, #4
 8004a58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d015      	beq.n	8004a8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a62:	f7fe fa93 	bl	8002f8c <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a68:	e00a      	b.n	8004a80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6a:	f7fe fa8f 	bl	8002f8c <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e0ce      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a80:	4b4b      	ldr	r3, [pc, #300]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0ee      	beq.n	8004a6a <HAL_RCC_OscConfig+0x386>
 8004a8c:	e014      	b.n	8004ab8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8e:	f7fe fa7d 	bl	8002f8c <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a94:	e00a      	b.n	8004aac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a96:	f7fe fa79 	bl	8002f8c <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e0b8      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aac:	4b40      	ldr	r3, [pc, #256]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1ee      	bne.n	8004a96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d105      	bne.n	8004aca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004abe:	4b3c      	ldr	r3, [pc, #240]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	4a3b      	ldr	r2, [pc, #236]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 80a4 	beq.w	8004c1c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ad4:	4b36      	ldr	r3, [pc, #216]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 030c 	and.w	r3, r3, #12
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d06b      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d149      	bne.n	8004b7c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae8:	4b31      	ldr	r3, [pc, #196]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a30      	ldr	r2, [pc, #192]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fe fa4a 	bl	8002f8c <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afc:	f7fe fa46 	bl	8002f8c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e087      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0e:	4b28      	ldr	r3, [pc, #160]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69da      	ldr	r2, [r3, #28]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	019b      	lsls	r3, r3, #6
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	3b01      	subs	r3, #1
 8004b34:	041b      	lsls	r3, r3, #16
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	061b      	lsls	r3, r3, #24
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b46:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fe fa1a 	bl	8002f8c <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5c:	f7fe fa16 	bl	8002f8c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e057      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b6e:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x478>
 8004b7a:	e04f      	b.n	8004c1c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0b      	ldr	r2, [pc, #44]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fe fa00 	bl	8002f8c <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b90:	f7fe f9fc 	bl	8002f8c <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e03d      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba2:	4b03      	ldr	r3, [pc, #12]	; (8004bb0 <HAL_RCC_OscConfig+0x4cc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f0      	bne.n	8004b90 <HAL_RCC_OscConfig+0x4ac>
 8004bae:	e035      	b.n	8004c1c <HAL_RCC_OscConfig+0x538>
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004bb8:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <HAL_RCC_OscConfig+0x544>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d028      	beq.n	8004c18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d121      	bne.n	8004c18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d11a      	bne.n	8004c18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004be8:	4013      	ands	r3, r2
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d111      	bne.n	8004c18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	3b01      	subs	r3, #1
 8004c02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d107      	bne.n	8004c18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800

08004c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0d0      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c44:	4b6a      	ldr	r3, [pc, #424]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d910      	bls.n	8004c74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c52:	4b67      	ldr	r3, [pc, #412]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 020f 	bic.w	r2, r3, #15
 8004c5a:	4965      	ldr	r1, [pc, #404]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c62:	4b63      	ldr	r3, [pc, #396]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0b8      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d020      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c8c:	4b59      	ldr	r3, [pc, #356]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	4a58      	ldr	r2, [pc, #352]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ca4:	4b53      	ldr	r3, [pc, #332]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4a52      	ldr	r2, [pc, #328]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004caa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb0:	4b50      	ldr	r3, [pc, #320]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	494d      	ldr	r1, [pc, #308]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d040      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d107      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd6:	4b47      	ldr	r3, [pc, #284]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d115      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e07f      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d107      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cee:	4b41      	ldr	r3, [pc, #260]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e073      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfe:	4b3d      	ldr	r3, [pc, #244]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e06b      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d0e:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f023 0203 	bic.w	r2, r3, #3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	4936      	ldr	r1, [pc, #216]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d20:	f7fe f934 	bl	8002f8c <HAL_GetTick>
 8004d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d26:	e00a      	b.n	8004d3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d28:	f7fe f930 	bl	8002f8c <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e053      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3e:	4b2d      	ldr	r3, [pc, #180]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 020c 	and.w	r2, r3, #12
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d1eb      	bne.n	8004d28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d50:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d210      	bcs.n	8004d80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5e:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 020f 	bic.w	r2, r3, #15
 8004d66:	4922      	ldr	r1, [pc, #136]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6e:	4b20      	ldr	r3, [pc, #128]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e032      	b.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d8c:	4b19      	ldr	r3, [pc, #100]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4916      	ldr	r1, [pc, #88]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004daa:	4b12      	ldr	r3, [pc, #72]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	490e      	ldr	r1, [pc, #56]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dbe:	f000 f821 	bl	8004e04 <HAL_RCC_GetSysClockFreq>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	091b      	lsrs	r3, r3, #4
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	490a      	ldr	r1, [pc, #40]	; (8004df8 <HAL_RCC_ClockConfig+0x1cc>)
 8004dd0:	5ccb      	ldrb	r3, [r1, r3]
 8004dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd6:	4a09      	ldr	r2, [pc, #36]	; (8004dfc <HAL_RCC_ClockConfig+0x1d0>)
 8004dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dda:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <HAL_RCC_ClockConfig+0x1d4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fd f842 	bl	8001e68 <HAL_InitTick>

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40023c00 	.word	0x40023c00
 8004df4:	40023800 	.word	0x40023800
 8004df8:	080191ec 	.word	0x080191ec
 8004dfc:	2000001c 	.word	0x2000001c
 8004e00:	20000020 	.word	0x20000020

08004e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	2300      	movs	r3, #0
 8004e16:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e1c:	4b67      	ldr	r3, [pc, #412]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 030c 	and.w	r3, r3, #12
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d00d      	beq.n	8004e44 <HAL_RCC_GetSysClockFreq+0x40>
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	f200 80bd 	bhi.w	8004fa8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0x34>
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d003      	beq.n	8004e3e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e36:	e0b7      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e38:	4b61      	ldr	r3, [pc, #388]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e3a:	60bb      	str	r3, [r7, #8]
      break;
 8004e3c:	e0b7      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e3e:	4b61      	ldr	r3, [pc, #388]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004e40:	60bb      	str	r3, [r7, #8]
      break;
 8004e42:	e0b4      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e44:	4b5d      	ldr	r3, [pc, #372]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e4c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e4e:	4b5b      	ldr	r3, [pc, #364]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d04d      	beq.n	8004ef6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e5a:	4b58      	ldr	r3, [pc, #352]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	099b      	lsrs	r3, r3, #6
 8004e60:	461a      	mov	r2, r3
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e6a:	f04f 0100 	mov.w	r1, #0
 8004e6e:	ea02 0800 	and.w	r8, r2, r0
 8004e72:	ea03 0901 	and.w	r9, r3, r1
 8004e76:	4640      	mov	r0, r8
 8004e78:	4649      	mov	r1, r9
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	014b      	lsls	r3, r1, #5
 8004e84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e88:	0142      	lsls	r2, r0, #5
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	ebb0 0008 	subs.w	r0, r0, r8
 8004e92:	eb61 0109 	sbc.w	r1, r1, r9
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	018b      	lsls	r3, r1, #6
 8004ea0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ea4:	0182      	lsls	r2, r0, #6
 8004ea6:	1a12      	subs	r2, r2, r0
 8004ea8:	eb63 0301 	sbc.w	r3, r3, r1
 8004eac:	f04f 0000 	mov.w	r0, #0
 8004eb0:	f04f 0100 	mov.w	r1, #0
 8004eb4:	00d9      	lsls	r1, r3, #3
 8004eb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eba:	00d0      	lsls	r0, r2, #3
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	eb12 0208 	adds.w	r2, r2, r8
 8004ec4:	eb43 0309 	adc.w	r3, r3, r9
 8004ec8:	f04f 0000 	mov.w	r0, #0
 8004ecc:	f04f 0100 	mov.w	r1, #0
 8004ed0:	0259      	lsls	r1, r3, #9
 8004ed2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004ed6:	0250      	lsls	r0, r2, #9
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4610      	mov	r0, r2
 8004ede:	4619      	mov	r1, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	f7fb feee 	bl	8000cc8 <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e04a      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef6:	4b31      	ldr	r3, [pc, #196]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	099b      	lsrs	r3, r3, #6
 8004efc:	461a      	mov	r2, r3
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f06:	f04f 0100 	mov.w	r1, #0
 8004f0a:	ea02 0400 	and.w	r4, r2, r0
 8004f0e:	ea03 0501 	and.w	r5, r3, r1
 8004f12:	4620      	mov	r0, r4
 8004f14:	4629      	mov	r1, r5
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	014b      	lsls	r3, r1, #5
 8004f20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f24:	0142      	lsls	r2, r0, #5
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	1b00      	subs	r0, r0, r4
 8004f2c:	eb61 0105 	sbc.w	r1, r1, r5
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	018b      	lsls	r3, r1, #6
 8004f3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f3e:	0182      	lsls	r2, r0, #6
 8004f40:	1a12      	subs	r2, r2, r0
 8004f42:	eb63 0301 	sbc.w	r3, r3, r1
 8004f46:	f04f 0000 	mov.w	r0, #0
 8004f4a:	f04f 0100 	mov.w	r1, #0
 8004f4e:	00d9      	lsls	r1, r3, #3
 8004f50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f54:	00d0      	lsls	r0, r2, #3
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	1912      	adds	r2, r2, r4
 8004f5c:	eb45 0303 	adc.w	r3, r5, r3
 8004f60:	f04f 0000 	mov.w	r0, #0
 8004f64:	f04f 0100 	mov.w	r1, #0
 8004f68:	0299      	lsls	r1, r3, #10
 8004f6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f6e:	0290      	lsls	r0, r2, #10
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	4610      	mov	r0, r2
 8004f76:	4619      	mov	r1, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	f7fb fea2 	bl	8000cc8 <__aeabi_uldivmod>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4613      	mov	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	0c1b      	lsrs	r3, r3, #16
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	3301      	adds	r3, #1
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	60bb      	str	r3, [r7, #8]
      break;
 8004fa6:	e002      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fa8:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004faa:	60bb      	str	r3, [r7, #8]
      break;
 8004fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fae:	68bb      	ldr	r3, [r7, #8]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004fba:	bf00      	nop
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	00f42400 	.word	0x00f42400
 8004fc4:	007a1200 	.word	0x007a1200

08004fc8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fcc:	4b03      	ldr	r3, [pc, #12]	; (8004fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fce:	681b      	ldr	r3, [r3, #0]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	2000001c 	.word	0x2000001c

08004fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fe4:	f7ff fff0 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b05      	ldr	r3, [pc, #20]	; (8005000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	0a9b      	lsrs	r3, r3, #10
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	4903      	ldr	r1, [pc, #12]	; (8005004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40023800 	.word	0x40023800
 8005004:	080191fc 	.word	0x080191fc

08005008 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	220f      	movs	r2, #15
 8005016:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005018:	4b12      	ldr	r3, [pc, #72]	; (8005064 <HAL_RCC_GetClockConfig+0x5c>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0203 	and.w	r2, r3, #3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005024:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <HAL_RCC_GetClockConfig+0x5c>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005030:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <HAL_RCC_GetClockConfig+0x5c>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800503c:	4b09      	ldr	r3, [pc, #36]	; (8005064 <HAL_RCC_GetClockConfig+0x5c>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	08db      	lsrs	r3, r3, #3
 8005042:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800504a:	4b07      	ldr	r3, [pc, #28]	; (8005068 <HAL_RCC_GetClockConfig+0x60>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 020f 	and.w	r2, r3, #15
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	601a      	str	r2, [r3, #0]
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40023800 	.word	0x40023800
 8005068:	40023c00 	.word	0x40023c00

0800506c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e01d      	b.n	80050ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f815 	bl	80050c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f000 f986 	bl	80053bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <HAL_TIM_Base_Start_IT+0x50>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b06      	cmp	r3, #6
 8005100:	d00b      	beq.n	800511a <HAL_TIM_Base_Start_IT+0x42>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005108:	d007      	beq.n	800511a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0201 	orr.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	00010007 	.word	0x00010007

0800512c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b02      	cmp	r3, #2
 8005140:	d122      	bne.n	8005188 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b02      	cmp	r3, #2
 800514e:	d11b      	bne.n	8005188 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0202 	mvn.w	r2, #2
 8005158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f905 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 8005174:	e005      	b.n	8005182 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f8f7 	bl	800536a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f908 	bl	8005392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b04      	cmp	r3, #4
 8005194:	d122      	bne.n	80051dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d11b      	bne.n	80051dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0204 	mvn.w	r2, #4
 80051ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f8db 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 80051c8:	e005      	b.n	80051d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f8cd 	bl	800536a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f8de 	bl	8005392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d122      	bne.n	8005230 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d11b      	bne.n	8005230 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0208 	mvn.w	r2, #8
 8005200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2204      	movs	r2, #4
 8005206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f8b1 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 800521c:	e005      	b.n	800522a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f8a3 	bl	800536a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f8b4 	bl	8005392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2b10      	cmp	r3, #16
 800523c:	d122      	bne.n	8005284 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b10      	cmp	r3, #16
 800524a:	d11b      	bne.n	8005284 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0210 	mvn.w	r2, #16
 8005254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2208      	movs	r2, #8
 800525a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f887 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 8005270:	e005      	b.n	800527e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f879 	bl	800536a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f88a 	bl	8005392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b01      	cmp	r3, #1
 8005290:	d10e      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b01      	cmp	r3, #1
 800529e:	d107      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0201 	mvn.w	r2, #1
 80052a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fc fe3e 	bl	8001f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ba:	2b80      	cmp	r3, #128	; 0x80
 80052bc:	d10e      	bne.n	80052dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c8:	2b80      	cmp	r3, #128	; 0x80
 80052ca:	d107      	bne.n	80052dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f91a 	bl	8005510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ea:	d10e      	bne.n	800530a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f6:	2b80      	cmp	r3, #128	; 0x80
 80052f8:	d107      	bne.n	800530a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f90d 	bl	8005524 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005314:	2b40      	cmp	r3, #64	; 0x40
 8005316:	d10e      	bne.n	8005336 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b40      	cmp	r3, #64	; 0x40
 8005324:	d107      	bne.n	8005336 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800532e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f838 	bl	80053a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b20      	cmp	r3, #32
 8005342:	d10e      	bne.n	8005362 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b20      	cmp	r3, #32
 8005350:	d107      	bne.n	8005362 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f06f 0220 	mvn.w	r2, #32
 800535a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f8cd 	bl	80054fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a40      	ldr	r2, [pc, #256]	; (80054d0 <TIM_Base_SetConfig+0x114>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d013      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053da:	d00f      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a3d      	ldr	r2, [pc, #244]	; (80054d4 <TIM_Base_SetConfig+0x118>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00b      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a3c      	ldr	r2, [pc, #240]	; (80054d8 <TIM_Base_SetConfig+0x11c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d007      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a3b      	ldr	r2, [pc, #236]	; (80054dc <TIM_Base_SetConfig+0x120>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d003      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a3a      	ldr	r2, [pc, #232]	; (80054e0 <TIM_Base_SetConfig+0x124>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d108      	bne.n	800540e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a2f      	ldr	r2, [pc, #188]	; (80054d0 <TIM_Base_SetConfig+0x114>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d02b      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541c:	d027      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a2c      	ldr	r2, [pc, #176]	; (80054d4 <TIM_Base_SetConfig+0x118>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d023      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2b      	ldr	r2, [pc, #172]	; (80054d8 <TIM_Base_SetConfig+0x11c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d01f      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2a      	ldr	r2, [pc, #168]	; (80054dc <TIM_Base_SetConfig+0x120>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01b      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a29      	ldr	r2, [pc, #164]	; (80054e0 <TIM_Base_SetConfig+0x124>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d017      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a28      	ldr	r2, [pc, #160]	; (80054e4 <TIM_Base_SetConfig+0x128>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a27      	ldr	r2, [pc, #156]	; (80054e8 <TIM_Base_SetConfig+0x12c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00f      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a26      	ldr	r2, [pc, #152]	; (80054ec <TIM_Base_SetConfig+0x130>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a25      	ldr	r2, [pc, #148]	; (80054f0 <TIM_Base_SetConfig+0x134>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a24      	ldr	r2, [pc, #144]	; (80054f4 <TIM_Base_SetConfig+0x138>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a23      	ldr	r2, [pc, #140]	; (80054f8 <TIM_Base_SetConfig+0x13c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d108      	bne.n	8005480 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <TIM_Base_SetConfig+0x114>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_Base_SetConfig+0xf8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a0c      	ldr	r2, [pc, #48]	; (80054e0 <TIM_Base_SetConfig+0x124>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d103      	bne.n	80054bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	615a      	str	r2, [r3, #20]
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40000800 	.word	0x40000800
 80054dc:	40000c00 	.word	0x40000c00
 80054e0:	40010400 	.word	0x40010400
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40014400 	.word	0x40014400
 80054ec:	40014800 	.word	0x40014800
 80054f0:	40001800 	.word	0x40001800
 80054f4:	40001c00 	.word	0x40001c00
 80054f8:	40002000 	.word	0x40002000

080054fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f103 0208 	add.w	r2, r3, #8
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f04f 32ff 	mov.w	r2, #4294967295
 8005550:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f103 0208 	add.w	r2, r3, #8
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f103 0208 	add.w	r2, r3, #8
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005592:	b480      	push	{r7}
 8005594:	b085      	sub	sp, #20
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	601a      	str	r2, [r3, #0]
}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d103      	bne.n	80055fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	e00c      	b.n	8005614 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	3308      	adds	r3, #8
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e002      	b.n	8005608 <vListInsert+0x2e>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	429a      	cmp	r2, r3
 8005612:	d2f6      	bcs.n	8005602 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	601a      	str	r2, [r3, #0]
}
 8005640:	bf00      	nop
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6892      	ldr	r2, [r2, #8]
 8005662:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6852      	ldr	r2, [r2, #4]
 800566c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	429a      	cmp	r2, r3
 8005676:	d103      	bne.n	8005680 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	1e5a      	subs	r2, r3, #1
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10c      	bne.n	80056ce <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	b672      	cpsid	i
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	b662      	cpsie	i
 80056c8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056ca:	bf00      	nop
 80056cc:	e7fe      	b.n	80056cc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80056ce:	f002 fca5 	bl	800801c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056da:	68f9      	ldr	r1, [r7, #12]
 80056dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056de:	fb01 f303 	mul.w	r3, r1, r3
 80056e2:	441a      	add	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fe:	3b01      	subs	r3, #1
 8005700:	68f9      	ldr	r1, [r7, #12]
 8005702:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005704:	fb01 f303 	mul.w	r3, r1, r3
 8005708:	441a      	add	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	22ff      	movs	r2, #255	; 0xff
 8005712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	22ff      	movs	r2, #255	; 0xff
 800571a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d114      	bne.n	800574e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d01a      	beq.n	8005762 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3310      	adds	r3, #16
 8005730:	4618      	mov	r0, r3
 8005732:	f001 fb2d 	bl	8006d90 <xTaskRemoveFromEventList>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d012      	beq.n	8005762 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800573c:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <xQueueGenericReset+0xd0>)
 800573e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	e009      	b.n	8005762 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3310      	adds	r3, #16
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff fef0 	bl	8005538 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3324      	adds	r3, #36	; 0x24
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff feeb 	bl	8005538 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005762:	f002 fc8f 	bl	8008084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005766:	2301      	movs	r3, #1
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	e000ed04 	.word	0xe000ed04

08005774 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af02      	add	r7, sp, #8
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10c      	bne.n	80057a2 <xQueueGenericCreate+0x2e>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	b672      	cpsid	i
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	b662      	cpsie	i
 800579c:	613b      	str	r3, [r7, #16]
}
 800579e:	bf00      	nop
 80057a0:	e7fe      	b.n	80057a0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d102      	bne.n	80057ae <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80057a8:	2300      	movs	r3, #0
 80057aa:	61fb      	str	r3, [r7, #28]
 80057ac:	e004      	b.n	80057b8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	fb02 f303 	mul.w	r3, r2, r3
 80057b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	3350      	adds	r3, #80	; 0x50
 80057bc:	4618      	mov	r0, r3
 80057be:	f002 f93b 	bl	8007a38 <pvPortMalloc>
 80057c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00d      	beq.n	80057e6 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	3350      	adds	r3, #80	; 0x50
 80057d2:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057d4:	79fa      	ldrb	r2, [r7, #7]
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	4613      	mov	r3, r2
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	68b9      	ldr	r1, [r7, #8]
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 f805 	bl	80057f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057e6:	69bb      	ldr	r3, [r7, #24]
	}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d103      	bne.n	800580c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	e002      	b.n	8005812 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800581e:	2101      	movs	r1, #1
 8005820:	69b8      	ldr	r0, [r7, #24]
 8005822:	f7ff ff3d 	bl	80056a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800582e:	bf00      	nop
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005836:	b580      	push	{r7, lr}
 8005838:	b082      	sub	sp, #8
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00e      	beq.n	8005862 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005856:	2300      	movs	r3, #0
 8005858:	2200      	movs	r2, #0
 800585a:	2100      	movs	r1, #0
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f853 	bl	8005908 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005862:	bf00      	nop
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800586a:	b580      	push	{r7, lr}
 800586c:	b086      	sub	sp, #24
 800586e:	af00      	add	r7, sp, #0
 8005870:	4603      	mov	r3, r0
 8005872:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005874:	2301      	movs	r3, #1
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	2300      	movs	r3, #0
 800587a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	461a      	mov	r2, r3
 8005880:	6939      	ldr	r1, [r7, #16]
 8005882:	6978      	ldr	r0, [r7, #20]
 8005884:	f7ff ff76 	bl	8005774 <xQueueGenericCreate>
 8005888:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f7ff ffd3 	bl	8005836 <prvInitialiseMutex>

		return xNewQueue;
 8005890:	68fb      	ldr	r3, [r7, #12]
	}
 8005892:	4618      	mov	r0, r3
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800589a:	b580      	push	{r7, lr}
 800589c:	b086      	sub	sp, #24
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10c      	bne.n	80058c4 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	b672      	cpsid	i
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	b662      	cpsie	i
 80058be:	613b      	str	r3, [r7, #16]
}
 80058c0:	bf00      	nop
 80058c2:	e7fe      	b.n	80058c2 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d90c      	bls.n	80058e6 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	b672      	cpsid	i
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	b662      	cpsie	i
 80058e0:	60fb      	str	r3, [r7, #12]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80058e6:	2202      	movs	r2, #2
 80058e8:	2100      	movs	r1, #0
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff ff42 	bl	8005774 <xQueueGenericCreate>
 80058f0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80058fe:	697b      	ldr	r3, [r7, #20]
	}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08e      	sub	sp, #56	; 0x38
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005916:	2300      	movs	r3, #0
 8005918:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10c      	bne.n	800593e <xQueueGenericSend+0x36>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	b672      	cpsid	i
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	b662      	cpsie	i
 8005938:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800593a:	bf00      	nop
 800593c:	e7fe      	b.n	800593c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d103      	bne.n	800594c <xQueueGenericSend+0x44>
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <xQueueGenericSend+0x48>
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <xQueueGenericSend+0x4a>
 8005950:	2300      	movs	r3, #0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10c      	bne.n	8005970 <xQueueGenericSend+0x68>
	__asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	b672      	cpsid	i
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	b662      	cpsie	i
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800596c:	bf00      	nop
 800596e:	e7fe      	b.n	800596e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d103      	bne.n	800597e <xQueueGenericSend+0x76>
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <xQueueGenericSend+0x7a>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <xQueueGenericSend+0x7c>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10c      	bne.n	80059a2 <xQueueGenericSend+0x9a>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	b672      	cpsid	i
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	b662      	cpsie	i
 800599c:	623b      	str	r3, [r7, #32]
}
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059a2:	f001 fb89 	bl	80070b8 <xTaskGetSchedulerState>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <xQueueGenericSend+0xaa>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <xQueueGenericSend+0xae>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <xQueueGenericSend+0xb0>
 80059b6:	2300      	movs	r3, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10c      	bne.n	80059d6 <xQueueGenericSend+0xce>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	b672      	cpsid	i
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	b662      	cpsie	i
 80059d0:	61fb      	str	r3, [r7, #28]
}
 80059d2:	bf00      	nop
 80059d4:	e7fe      	b.n	80059d4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059d6:	f002 fb21 	bl	800801c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d302      	bcc.n	80059ec <xQueueGenericSend+0xe4>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d129      	bne.n	8005a40 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059f2:	f000 fc5d 	bl	80062b0 <prvCopyDataToQueue>
 80059f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d010      	beq.n	8005a22 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	3324      	adds	r3, #36	; 0x24
 8005a04:	4618      	mov	r0, r3
 8005a06:	f001 f9c3 	bl	8006d90 <xTaskRemoveFromEventList>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d013      	beq.n	8005a38 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a10:	4b3f      	ldr	r3, [pc, #252]	; (8005b10 <xQueueGenericSend+0x208>)
 8005a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	e00a      	b.n	8005a38 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d007      	beq.n	8005a38 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a28:	4b39      	ldr	r3, [pc, #228]	; (8005b10 <xQueueGenericSend+0x208>)
 8005a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a38:	f002 fb24 	bl	8008084 <vPortExitCritical>
				return pdPASS;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e063      	b.n	8005b08 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a46:	f002 fb1d 	bl	8008084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e05c      	b.n	8005b08 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d106      	bne.n	8005a62 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a54:	f107 0314 	add.w	r3, r7, #20
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f001 f9fd 	bl	8006e58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a62:	f002 fb0f 	bl	8008084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a66:	f000 ff87 	bl	8006978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a6a:	f002 fad7 	bl	800801c <vPortEnterCritical>
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a74:	b25b      	sxtb	r3, r3
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	d103      	bne.n	8005a84 <xQueueGenericSend+0x17c>
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a8a:	b25b      	sxtb	r3, r3
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d103      	bne.n	8005a9a <xQueueGenericSend+0x192>
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a9a:	f002 faf3 	bl	8008084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a9e:	1d3a      	adds	r2, r7, #4
 8005aa0:	f107 0314 	add.w	r3, r7, #20
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f001 f9ec 	bl	8006e84 <xTaskCheckForTimeOut>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d124      	bne.n	8005afc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ab4:	f000 fcf4 	bl	80064a0 <prvIsQueueFull>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d018      	beq.n	8005af0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	3310      	adds	r3, #16
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 f93c 	bl	8006d44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ace:	f000 fc7f 	bl	80063d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ad2:	f000 ff5f 	bl	8006994 <xTaskResumeAll>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f47f af7c 	bne.w	80059d6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005ade:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <xQueueGenericSend+0x208>)
 8005ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	e772      	b.n	80059d6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005af2:	f000 fc6d 	bl	80063d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005af6:	f000 ff4d 	bl	8006994 <xTaskResumeAll>
 8005afa:	e76c      	b.n	80059d6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005afe:	f000 fc67 	bl	80063d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b02:	f000 ff47 	bl	8006994 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3738      	adds	r7, #56	; 0x38
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	e000ed04 	.word	0xe000ed04

08005b14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08e      	sub	sp, #56	; 0x38
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10c      	bne.n	8005b46 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	b672      	cpsid	i
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	b662      	cpsie	i
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d103      	bne.n	8005b54 <xQueueGenericSendFromISR+0x40>
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <xQueueGenericSendFromISR+0x44>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <xQueueGenericSendFromISR+0x46>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10c      	bne.n	8005b78 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	b672      	cpsid	i
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	b662      	cpsie	i
 8005b72:	623b      	str	r3, [r7, #32]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d103      	bne.n	8005b86 <xQueueGenericSendFromISR+0x72>
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <xQueueGenericSendFromISR+0x76>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <xQueueGenericSendFromISR+0x78>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10c      	bne.n	8005baa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	b672      	cpsid	i
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	b662      	cpsie	i
 8005ba4:	61fb      	str	r3, [r7, #28]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005baa:	f002 fb1f 	bl	80081ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bae:	f3ef 8211 	mrs	r2, BASEPRI
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	b672      	cpsid	i
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	b662      	cpsie	i
 8005bc6:	61ba      	str	r2, [r7, #24]
 8005bc8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005bca:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d302      	bcc.n	8005be0 <xQueueGenericSendFromISR+0xcc>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d12c      	bne.n	8005c3a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bf0:	f000 fb5e 	bl	80062b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bf4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfc:	d112      	bne.n	8005c24 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d016      	beq.n	8005c34 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	3324      	adds	r3, #36	; 0x24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f001 f8c0 	bl	8006d90 <xTaskRemoveFromEventList>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00e      	beq.n	8005c34 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00b      	beq.n	8005c34 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	e007      	b.n	8005c34 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c28:	3301      	adds	r3, #1
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	b25a      	sxtb	r2, r3
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c34:	2301      	movs	r3, #1
 8005c36:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005c38:	e001      	b.n	8005c3e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3738      	adds	r7, #56	; 0x38
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08e      	sub	sp, #56	; 0x38
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10c      	bne.n	8005c82 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6c:	b672      	cpsid	i
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	b662      	cpsie	i
 8005c7c:	623b      	str	r3, [r7, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00c      	beq.n	8005ca4 <xQueueGiveFromISR+0x50>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	b672      	cpsid	i
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	b662      	cpsie	i
 8005c9e:	61fb      	str	r3, [r7, #28]
}
 8005ca0:	bf00      	nop
 8005ca2:	e7fe      	b.n	8005ca2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d103      	bne.n	8005cb4 <xQueueGiveFromISR+0x60>
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <xQueueGiveFromISR+0x64>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <xQueueGiveFromISR+0x66>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10c      	bne.n	8005cd8 <xQueueGiveFromISR+0x84>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	b672      	cpsid	i
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	b662      	cpsie	i
 8005cd2:	61bb      	str	r3, [r7, #24]
}
 8005cd4:	bf00      	nop
 8005cd6:	e7fe      	b.n	8005cd6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cd8:	f002 fa88 	bl	80081ec <vPortValidateInterruptPriority>
	__asm volatile
 8005cdc:	f3ef 8211 	mrs	r2, BASEPRI
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	b672      	cpsid	i
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	b662      	cpsie	i
 8005cf4:	617a      	str	r2, [r7, #20]
 8005cf6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005cf8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d22b      	bcs.n	8005d64 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	d112      	bne.n	8005d4e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d016      	beq.n	8005d5e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	3324      	adds	r3, #36	; 0x24
 8005d34:	4618      	mov	r0, r3
 8005d36:	f001 f82b 	bl	8006d90 <xTaskRemoveFromEventList>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00e      	beq.n	8005d5e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00b      	beq.n	8005d5e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	e007      	b.n	8005d5e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d52:	3301      	adds	r3, #1
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	b25a      	sxtb	r2, r3
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	637b      	str	r3, [r7, #52]	; 0x34
 8005d62:	e001      	b.n	8005d68 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	637b      	str	r3, [r7, #52]	; 0x34
 8005d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f383 8811 	msr	BASEPRI, r3
}
 8005d72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3738      	adds	r7, #56	; 0x38
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08c      	sub	sp, #48	; 0x30
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10c      	bne.n	8005db4 <xQueueReceive+0x34>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	b672      	cpsid	i
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	b662      	cpsie	i
 8005dae:	623b      	str	r3, [r7, #32]
}
 8005db0:	bf00      	nop
 8005db2:	e7fe      	b.n	8005db2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d103      	bne.n	8005dc2 <xQueueReceive+0x42>
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <xQueueReceive+0x46>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <xQueueReceive+0x48>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10c      	bne.n	8005de6 <xQueueReceive+0x66>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	b672      	cpsid	i
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	b662      	cpsie	i
 8005de0:	61fb      	str	r3, [r7, #28]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005de6:	f001 f967 	bl	80070b8 <xTaskGetSchedulerState>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <xQueueReceive+0x76>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <xQueueReceive+0x7a>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <xQueueReceive+0x7c>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10c      	bne.n	8005e1a <xQueueReceive+0x9a>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	b672      	cpsid	i
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	b662      	cpsie	i
 8005e14:	61bb      	str	r3, [r7, #24]
}
 8005e16:	bf00      	nop
 8005e18:	e7fe      	b.n	8005e18 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e1a:	f002 f8ff 	bl	800801c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d01f      	beq.n	8005e6a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e2e:	f000 faa9 	bl	8006384 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	1e5a      	subs	r2, r3, #1
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00f      	beq.n	8005e62 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	3310      	adds	r3, #16
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 ffa2 	bl	8006d90 <xTaskRemoveFromEventList>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d007      	beq.n	8005e62 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e52:	4b3d      	ldr	r3, [pc, #244]	; (8005f48 <xQueueReceive+0x1c8>)
 8005e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e62:	f002 f90f 	bl	8008084 <vPortExitCritical>
				return pdPASS;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e069      	b.n	8005f3e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d103      	bne.n	8005e78 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e70:	f002 f908 	bl	8008084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e74:	2300      	movs	r3, #0
 8005e76:	e062      	b.n	8005f3e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e7e:	f107 0310 	add.w	r3, r7, #16
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 ffe8 	bl	8006e58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e8c:	f002 f8fa 	bl	8008084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e90:	f000 fd72 	bl	8006978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e94:	f002 f8c2 	bl	800801c <vPortEnterCritical>
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e9e:	b25b      	sxtb	r3, r3
 8005ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea4:	d103      	bne.n	8005eae <xQueueReceive+0x12e>
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eb4:	b25b      	sxtb	r3, r3
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	d103      	bne.n	8005ec4 <xQueueReceive+0x144>
 8005ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ec4:	f002 f8de 	bl	8008084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ec8:	1d3a      	adds	r2, r7, #4
 8005eca:	f107 0310 	add.w	r3, r7, #16
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 ffd7 	bl	8006e84 <xTaskCheckForTimeOut>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d123      	bne.n	8005f24 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ede:	f000 fac9 	bl	8006474 <prvIsQueueEmpty>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d017      	beq.n	8005f18 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	3324      	adds	r3, #36	; 0x24
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	4611      	mov	r1, r2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 ff27 	bl	8006d44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ef8:	f000 fa6a 	bl	80063d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005efc:	f000 fd4a 	bl	8006994 <xTaskResumeAll>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d189      	bne.n	8005e1a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005f06:	4b10      	ldr	r3, [pc, #64]	; (8005f48 <xQueueReceive+0x1c8>)
 8005f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	e780      	b.n	8005e1a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f1a:	f000 fa59 	bl	80063d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f1e:	f000 fd39 	bl	8006994 <xTaskResumeAll>
 8005f22:	e77a      	b.n	8005e1a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f26:	f000 fa53 	bl	80063d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f2a:	f000 fd33 	bl	8006994 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f30:	f000 faa0 	bl	8006474 <prvIsQueueEmpty>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f43f af6f 	beq.w	8005e1a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3730      	adds	r7, #48	; 0x30
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08e      	sub	sp, #56	; 0x38
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10c      	bne.n	8005f82 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6c:	b672      	cpsid	i
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	b662      	cpsie	i
 8005f7c:	623b      	str	r3, [r7, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	e7fe      	b.n	8005f80 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00c      	beq.n	8005fa4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	b672      	cpsid	i
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	b662      	cpsie	i
 8005f9e:	61fb      	str	r3, [r7, #28]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fa4:	f001 f888 	bl	80070b8 <xTaskGetSchedulerState>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d102      	bne.n	8005fb4 <xQueueSemaphoreTake+0x68>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <xQueueSemaphoreTake+0x6c>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <xQueueSemaphoreTake+0x6e>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10c      	bne.n	8005fd8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	b672      	cpsid	i
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	b662      	cpsie	i
 8005fd2:	61bb      	str	r3, [r7, #24]
}
 8005fd4:	bf00      	nop
 8005fd6:	e7fe      	b.n	8005fd6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fd8:	f002 f820 	bl	800801c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d024      	beq.n	8006032 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	1e5a      	subs	r2, r3, #1
 8005fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ff8:	f001 fa24 	bl	8007444 <pvTaskIncrementMutexHeldCount>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00f      	beq.n	800602a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	3310      	adds	r3, #16
 800600e:	4618      	mov	r0, r3
 8006010:	f000 febe 	bl	8006d90 <xTaskRemoveFromEventList>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d007      	beq.n	800602a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800601a:	4b55      	ldr	r3, [pc, #340]	; (8006170 <xQueueSemaphoreTake+0x224>)
 800601c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800602a:	f002 f82b 	bl	8008084 <vPortExitCritical>
				return pdPASS;
 800602e:	2301      	movs	r3, #1
 8006030:	e099      	b.n	8006166 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d113      	bne.n	8006060 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00c      	beq.n	8006058 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	b672      	cpsid	i
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	b662      	cpsie	i
 8006052:	617b      	str	r3, [r7, #20]
}
 8006054:	bf00      	nop
 8006056:	e7fe      	b.n	8006056 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006058:	f002 f814 	bl	8008084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800605c:	2300      	movs	r3, #0
 800605e:	e082      	b.n	8006166 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006066:	f107 030c 	add.w	r3, r7, #12
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fef4 	bl	8006e58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006070:	2301      	movs	r3, #1
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006074:	f002 f806 	bl	8008084 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006078:	f000 fc7e 	bl	8006978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800607c:	f001 ffce 	bl	800801c <vPortEnterCritical>
 8006080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006082:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006086:	b25b      	sxtb	r3, r3
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d103      	bne.n	8006096 <xQueueSemaphoreTake+0x14a>
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800609c:	b25b      	sxtb	r3, r3
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a2:	d103      	bne.n	80060ac <xQueueSemaphoreTake+0x160>
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060ac:	f001 ffea 	bl	8008084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060b0:	463a      	mov	r2, r7
 80060b2:	f107 030c 	add.w	r3, r7, #12
 80060b6:	4611      	mov	r1, r2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fee3 	bl	8006e84 <xTaskCheckForTimeOut>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d132      	bne.n	800612a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060c6:	f000 f9d5 	bl	8006474 <prvIsQueueEmpty>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d026      	beq.n	800611e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d109      	bne.n	80060ec <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80060d8:	f001 ffa0 	bl	800801c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f001 f807 	bl	80070f4 <xTaskPriorityInherit>
 80060e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80060e8:	f001 ffcc 	bl	8008084 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	3324      	adds	r3, #36	; 0x24
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	4611      	mov	r1, r2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fe25 	bl	8006d44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060fc:	f000 f968 	bl	80063d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006100:	f000 fc48 	bl	8006994 <xTaskResumeAll>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	f47f af66 	bne.w	8005fd8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800610c:	4b18      	ldr	r3, [pc, #96]	; (8006170 <xQueueSemaphoreTake+0x224>)
 800610e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	e75c      	b.n	8005fd8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800611e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006120:	f000 f956 	bl	80063d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006124:	f000 fc36 	bl	8006994 <xTaskResumeAll>
 8006128:	e756      	b.n	8005fd8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800612a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800612c:	f000 f950 	bl	80063d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006130:	f000 fc30 	bl	8006994 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006134:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006136:	f000 f99d 	bl	8006474 <prvIsQueueEmpty>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	f43f af4b 	beq.w	8005fd8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00d      	beq.n	8006164 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006148:	f001 ff68 	bl	800801c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800614c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800614e:	f000 f897 	bl	8006280 <prvGetDisinheritPriorityAfterTimeout>
 8006152:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800615a:	4618      	mov	r0, r3
 800615c:	f001 f8d4 	bl	8007308 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006160:	f001 ff90 	bl	8008084 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006164:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006166:	4618      	mov	r0, r3
 8006168:	3738      	adds	r7, #56	; 0x38
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	e000ed04 	.word	0xe000ed04

08006174 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08e      	sub	sp, #56	; 0x38
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10c      	bne.n	80061a4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	b672      	cpsid	i
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	b662      	cpsie	i
 800619e:	623b      	str	r3, [r7, #32]
}
 80061a0:	bf00      	nop
 80061a2:	e7fe      	b.n	80061a2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d103      	bne.n	80061b2 <xQueueReceiveFromISR+0x3e>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <xQueueReceiveFromISR+0x42>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <xQueueReceiveFromISR+0x44>
 80061b6:	2300      	movs	r3, #0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10c      	bne.n	80061d6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	b672      	cpsid	i
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	b662      	cpsie	i
 80061d0:	61fb      	str	r3, [r7, #28]
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061d6:	f002 f809 	bl	80081ec <vPortValidateInterruptPriority>
	__asm volatile
 80061da:	f3ef 8211 	mrs	r2, BASEPRI
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	b672      	cpsid	i
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	b662      	cpsie	i
 80061f2:	61ba      	str	r2, [r7, #24]
 80061f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80061f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	2b00      	cmp	r3, #0
 8006204:	d02f      	beq.n	8006266 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800620c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006214:	f000 f8b6 	bl	8006384 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	1e5a      	subs	r2, r3, #1
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006220:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006228:	d112      	bne.n	8006250 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d016      	beq.n	8006260 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	3310      	adds	r3, #16
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fdaa 	bl	8006d90 <xTaskRemoveFromEventList>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00e      	beq.n	8006260 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00b      	beq.n	8006260 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	e007      	b.n	8006260 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006254:	3301      	adds	r3, #1
 8006256:	b2db      	uxtb	r3, r3
 8006258:	b25a      	sxtb	r2, r3
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006260:	2301      	movs	r3, #1
 8006262:	637b      	str	r3, [r7, #52]	; 0x34
 8006264:	e001      	b.n	800626a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8006266:	2300      	movs	r3, #0
 8006268:	637b      	str	r3, [r7, #52]	; 0x34
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f383 8811 	msr	BASEPRI, r3
}
 8006274:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006278:	4618      	mov	r0, r3
 800627a:	3738      	adds	r7, #56	; 0x38
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	2b00      	cmp	r3, #0
 800628e:	d006      	beq.n	800629e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f1c3 0307 	rsb	r3, r3, #7
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	e001      	b.n	80062a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80062a2:	68fb      	ldr	r3, [r7, #12]
	}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062bc:	2300      	movs	r3, #0
 80062be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10d      	bne.n	80062ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d14d      	bne.n	8006372 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 ff8a 	bl	80071f4 <xTaskPriorityDisinherit>
 80062e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	609a      	str	r2, [r3, #8]
 80062e8:	e043      	b.n	8006372 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d119      	bne.n	8006324 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6858      	ldr	r0, [r3, #4]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	461a      	mov	r2, r3
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	f00e fc54 	bl	8014ba8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	441a      	add	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	d32b      	bcc.n	8006372 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	605a      	str	r2, [r3, #4]
 8006322:	e026      	b.n	8006372 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68d8      	ldr	r0, [r3, #12]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632c:	461a      	mov	r2, r3
 800632e:	68b9      	ldr	r1, [r7, #8]
 8006330:	f00e fc3a 	bl	8014ba8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	425b      	negs	r3, r3
 800633e:	441a      	add	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	429a      	cmp	r2, r3
 800634e:	d207      	bcs.n	8006360 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	425b      	negs	r3, r3
 800635a:	441a      	add	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b02      	cmp	r3, #2
 8006364:	d105      	bne.n	8006372 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	3b01      	subs	r3, #1
 8006370:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800637a:	697b      	ldr	r3, [r7, #20]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d018      	beq.n	80063c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	441a      	add	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d303      	bcc.n	80063b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68d9      	ldr	r1, [r3, #12]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	461a      	mov	r2, r3
 80063c2:	6838      	ldr	r0, [r7, #0]
 80063c4:	f00e fbf0 	bl	8014ba8 <memcpy>
	}
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063d8:	f001 fe20 	bl	800801c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063e4:	e011      	b.n	800640a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d012      	beq.n	8006414 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3324      	adds	r3, #36	; 0x24
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fccc 	bl	8006d90 <xTaskRemoveFromEventList>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063fe:	f000 fd9f 	bl	8006f40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	3b01      	subs	r3, #1
 8006406:	b2db      	uxtb	r3, r3
 8006408:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800640a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800640e:	2b00      	cmp	r3, #0
 8006410:	dce9      	bgt.n	80063e6 <prvUnlockQueue+0x16>
 8006412:	e000      	b.n	8006416 <prvUnlockQueue+0x46>
					break;
 8006414:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	22ff      	movs	r2, #255	; 0xff
 800641a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800641e:	f001 fe31 	bl	8008084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006422:	f001 fdfb 	bl	800801c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800642c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800642e:	e011      	b.n	8006454 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d012      	beq.n	800645e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3310      	adds	r3, #16
 800643c:	4618      	mov	r0, r3
 800643e:	f000 fca7 	bl	8006d90 <xTaskRemoveFromEventList>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006448:	f000 fd7a 	bl	8006f40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	3b01      	subs	r3, #1
 8006450:	b2db      	uxtb	r3, r3
 8006452:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006458:	2b00      	cmp	r3, #0
 800645a:	dce9      	bgt.n	8006430 <prvUnlockQueue+0x60>
 800645c:	e000      	b.n	8006460 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800645e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	22ff      	movs	r2, #255	; 0xff
 8006464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006468:	f001 fe0c 	bl	8008084 <vPortExitCritical>
}
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800647c:	f001 fdce 	bl	800801c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006488:	2301      	movs	r3, #1
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	e001      	b.n	8006492 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006492:	f001 fdf7 	bl	8008084 <vPortExitCritical>

	return xReturn;
 8006496:	68fb      	ldr	r3, [r7, #12]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064a8:	f001 fdb8 	bl	800801c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d102      	bne.n	80064be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064b8:	2301      	movs	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	e001      	b.n	80064c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064c2:	f001 fddf 	bl	8008084 <vPortExitCritical>

	return xReturn;
 80064c6:	68fb      	ldr	r3, [r7, #12]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08c      	sub	sp, #48	; 0x30
 80064d4:	af04      	add	r7, sp, #16
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	4613      	mov	r3, r2
 80064de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 faa7 	bl	8007a38 <pvPortMalloc>
 80064ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00e      	beq.n	8006510 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064f2:	205c      	movs	r0, #92	; 0x5c
 80064f4:	f001 faa0 	bl	8007a38 <pvPortMalloc>
 80064f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	631a      	str	r2, [r3, #48]	; 0x30
 8006506:	e005      	b.n	8006514 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006508:	6978      	ldr	r0, [r7, #20]
 800650a:	f001 fb5f 	bl	8007bcc <vPortFree>
 800650e:	e001      	b.n	8006514 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006510:	2300      	movs	r3, #0
 8006512:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d013      	beq.n	8006542 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800651a:	88fa      	ldrh	r2, [r7, #6]
 800651c:	2300      	movs	r3, #0
 800651e:	9303      	str	r3, [sp, #12]
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	9302      	str	r3, [sp, #8]
 8006524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	68b9      	ldr	r1, [r7, #8]
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f80e 	bl	8006552 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006536:	69f8      	ldr	r0, [r7, #28]
 8006538:	f000 f89c 	bl	8006674 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800653c:	2301      	movs	r3, #1
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	e002      	b.n	8006548 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006542:	f04f 33ff 	mov.w	r3, #4294967295
 8006546:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006548:	69bb      	ldr	r3, [r7, #24]
	}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b088      	sub	sp, #32
 8006556:	af00      	add	r7, sp, #0
 8006558:	60f8      	str	r0, [r7, #12]
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	607a      	str	r2, [r7, #4]
 800655e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	461a      	mov	r2, r3
 800656a:	21a5      	movs	r1, #165	; 0xa5
 800656c:	f00e fb44 	bl	8014bf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006574:	6879      	ldr	r1, [r7, #4]
 8006576:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800657a:	440b      	add	r3, r1
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	f023 0307 	bic.w	r3, r3, #7
 8006588:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	f003 0307 	and.w	r3, r3, #7
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00c      	beq.n	80065ae <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	b672      	cpsid	i
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	b662      	cpsie	i
 80065a8:	617b      	str	r3, [r7, #20]
}
 80065aa:	bf00      	nop
 80065ac:	e7fe      	b.n	80065ac <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01f      	beq.n	80065f4 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065b4:	2300      	movs	r3, #0
 80065b6:	61fb      	str	r3, [r7, #28]
 80065b8:	e012      	b.n	80065e0 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	4413      	add	r3, r2
 80065c0:	7819      	ldrb	r1, [r3, #0]
 80065c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	4413      	add	r3, r2
 80065c8:	3334      	adds	r3, #52	; 0x34
 80065ca:	460a      	mov	r2, r1
 80065cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	4413      	add	r3, r2
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d006      	beq.n	80065e8 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	3301      	adds	r3, #1
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	2b0f      	cmp	r3, #15
 80065e4:	d9e9      	bls.n	80065ba <prvInitialiseNewTask+0x68>
 80065e6:	e000      	b.n	80065ea <prvInitialiseNewTask+0x98>
			{
				break;
 80065e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065f2:	e003      	b.n	80065fc <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	2b06      	cmp	r3, #6
 8006600:	d901      	bls.n	8006606 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006602:	2306      	movs	r3, #6
 8006604:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800660a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006610:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	2200      	movs	r2, #0
 8006616:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	3304      	adds	r3, #4
 800661c:	4618      	mov	r0, r3
 800661e:	f7fe ffab 	bl	8005578 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	3318      	adds	r3, #24
 8006626:	4618      	mov	r0, r3
 8006628:	f7fe ffa6 	bl	8005578 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006630:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	f1c3 0207 	rsb	r2, r3, #7
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006640:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	2200      	movs	r2, #0
 8006646:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	68f9      	ldr	r1, [r7, #12]
 8006654:	69b8      	ldr	r0, [r7, #24]
 8006656:	f001 fbd3 	bl	8007e00 <pxPortInitialiseStack>
 800665a:	4602      	mov	r2, r0
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800666c:	bf00      	nop
 800666e:	3720      	adds	r7, #32
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800667c:	f001 fcce 	bl	800801c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006680:	4b2c      	ldr	r3, [pc, #176]	; (8006734 <prvAddNewTaskToReadyList+0xc0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3301      	adds	r3, #1
 8006686:	4a2b      	ldr	r2, [pc, #172]	; (8006734 <prvAddNewTaskToReadyList+0xc0>)
 8006688:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800668a:	4b2b      	ldr	r3, [pc, #172]	; (8006738 <prvAddNewTaskToReadyList+0xc4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d109      	bne.n	80066a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006692:	4a29      	ldr	r2, [pc, #164]	; (8006738 <prvAddNewTaskToReadyList+0xc4>)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006698:	4b26      	ldr	r3, [pc, #152]	; (8006734 <prvAddNewTaskToReadyList+0xc0>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d110      	bne.n	80066c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066a0:	f000 fc72 	bl	8006f88 <prvInitialiseTaskLists>
 80066a4:	e00d      	b.n	80066c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066a6:	4b25      	ldr	r3, [pc, #148]	; (800673c <prvAddNewTaskToReadyList+0xc8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066ae:	4b22      	ldr	r3, [pc, #136]	; (8006738 <prvAddNewTaskToReadyList+0xc4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d802      	bhi.n	80066c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066bc:	4a1e      	ldr	r2, [pc, #120]	; (8006738 <prvAddNewTaskToReadyList+0xc4>)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066c2:	4b1f      	ldr	r3, [pc, #124]	; (8006740 <prvAddNewTaskToReadyList+0xcc>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3301      	adds	r3, #1
 80066c8:	4a1d      	ldr	r2, [pc, #116]	; (8006740 <prvAddNewTaskToReadyList+0xcc>)
 80066ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066cc:	4b1c      	ldr	r3, [pc, #112]	; (8006740 <prvAddNewTaskToReadyList+0xcc>)
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	2201      	movs	r2, #1
 80066da:	409a      	lsls	r2, r3
 80066dc:	4b19      	ldr	r3, [pc, #100]	; (8006744 <prvAddNewTaskToReadyList+0xd0>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	4a18      	ldr	r2, [pc, #96]	; (8006744 <prvAddNewTaskToReadyList+0xd0>)
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ea:	4613      	mov	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4a15      	ldr	r2, [pc, #84]	; (8006748 <prvAddNewTaskToReadyList+0xd4>)
 80066f4:	441a      	add	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	3304      	adds	r3, #4
 80066fa:	4619      	mov	r1, r3
 80066fc:	4610      	mov	r0, r2
 80066fe:	f7fe ff48 	bl	8005592 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006702:	f001 fcbf 	bl	8008084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006706:	4b0d      	ldr	r3, [pc, #52]	; (800673c <prvAddNewTaskToReadyList+0xc8>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00e      	beq.n	800672c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800670e:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <prvAddNewTaskToReadyList+0xc4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	429a      	cmp	r2, r3
 800671a:	d207      	bcs.n	800672c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800671c:	4b0b      	ldr	r3, [pc, #44]	; (800674c <prvAddNewTaskToReadyList+0xd8>)
 800671e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800672c:	bf00      	nop
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20000328 	.word	0x20000328
 8006738:	2000023c 	.word	0x2000023c
 800673c:	20000334 	.word	0x20000334
 8006740:	20000344 	.word	0x20000344
 8006744:	20000330 	.word	0x20000330
 8006748:	20000240 	.word	0x20000240
 800674c:	e000ed04 	.word	0xe000ed04

08006750 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006758:	f001 fc60 	bl	800801c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d102      	bne.n	8006768 <vTaskDelete+0x18>
 8006762:	4b3a      	ldr	r3, [pc, #232]	; (800684c <vTaskDelete+0xfc>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	e000      	b.n	800676a <vTaskDelete+0x1a>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3304      	adds	r3, #4
 8006770:	4618      	mov	r0, r3
 8006772:	f7fe ff6b 	bl	800564c <uxListRemove>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d115      	bne.n	80067a8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006780:	4933      	ldr	r1, [pc, #204]	; (8006850 <vTaskDelete+0x100>)
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	440b      	add	r3, r1
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <vTaskDelete+0x58>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006796:	2201      	movs	r2, #1
 8006798:	fa02 f303 	lsl.w	r3, r2, r3
 800679c:	43da      	mvns	r2, r3
 800679e:	4b2d      	ldr	r3, [pc, #180]	; (8006854 <vTaskDelete+0x104>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4013      	ands	r3, r2
 80067a4:	4a2b      	ldr	r2, [pc, #172]	; (8006854 <vTaskDelete+0x104>)
 80067a6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d004      	beq.n	80067ba <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3318      	adds	r3, #24
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fe ff49 	bl	800564c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80067ba:	4b27      	ldr	r3, [pc, #156]	; (8006858 <vTaskDelete+0x108>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3301      	adds	r3, #1
 80067c0:	4a25      	ldr	r2, [pc, #148]	; (8006858 <vTaskDelete+0x108>)
 80067c2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80067c4:	4b21      	ldr	r3, [pc, #132]	; (800684c <vTaskDelete+0xfc>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d10b      	bne.n	80067e6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3304      	adds	r3, #4
 80067d2:	4619      	mov	r1, r3
 80067d4:	4821      	ldr	r0, [pc, #132]	; (800685c <vTaskDelete+0x10c>)
 80067d6:	f7fe fedc 	bl	8005592 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80067da:	4b21      	ldr	r3, [pc, #132]	; (8006860 <vTaskDelete+0x110>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3301      	adds	r3, #1
 80067e0:	4a1f      	ldr	r2, [pc, #124]	; (8006860 <vTaskDelete+0x110>)
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	e009      	b.n	80067fa <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80067e6:	4b1f      	ldr	r3, [pc, #124]	; (8006864 <vTaskDelete+0x114>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	4a1d      	ldr	r2, [pc, #116]	; (8006864 <vTaskDelete+0x114>)
 80067ee:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 fc31 	bl	8007058 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80067f6:	f000 fc3f 	bl	8007078 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80067fa:	f001 fc43 	bl	8008084 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80067fe:	4b1a      	ldr	r3, [pc, #104]	; (8006868 <vTaskDelete+0x118>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d01d      	beq.n	8006842 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 8006806:	4b11      	ldr	r3, [pc, #68]	; (800684c <vTaskDelete+0xfc>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	429a      	cmp	r2, r3
 800680e:	d118      	bne.n	8006842 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006810:	4b16      	ldr	r3, [pc, #88]	; (800686c <vTaskDelete+0x11c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00c      	beq.n	8006832 <vTaskDelete+0xe2>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	b672      	cpsid	i
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	b662      	cpsie	i
 800682c:	60bb      	str	r3, [r7, #8]
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8006832:	4b0f      	ldr	r3, [pc, #60]	; (8006870 <vTaskDelete+0x120>)
 8006834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006842:	bf00      	nop
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	2000023c 	.word	0x2000023c
 8006850:	20000240 	.word	0x20000240
 8006854:	20000330 	.word	0x20000330
 8006858:	20000344 	.word	0x20000344
 800685c:	20000310 	.word	0x20000310
 8006860:	20000324 	.word	0x20000324
 8006864:	20000328 	.word	0x20000328
 8006868:	20000334 	.word	0x20000334
 800686c:	20000350 	.word	0x20000350
 8006870:	e000ed04 	.word	0xe000ed04

08006874 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800687c:	2300      	movs	r3, #0
 800687e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d019      	beq.n	80068ba <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006886:	4b14      	ldr	r3, [pc, #80]	; (80068d8 <vTaskDelay+0x64>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00c      	beq.n	80068a8 <vTaskDelay+0x34>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	b672      	cpsid	i
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	b662      	cpsie	i
 80068a2:	60bb      	str	r3, [r7, #8]
}
 80068a4:	bf00      	nop
 80068a6:	e7fe      	b.n	80068a6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80068a8:	f000 f866 	bl	8006978 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068ac:	2100      	movs	r1, #0
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fddc 	bl	800746c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068b4:	f000 f86e 	bl	8006994 <xTaskResumeAll>
 80068b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d107      	bne.n	80068d0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80068c0:	4b06      	ldr	r3, [pc, #24]	; (80068dc <vTaskDelay+0x68>)
 80068c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000350 	.word	0x20000350
 80068dc:	e000ed04 	.word	0xe000ed04

080068e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80068e6:	4b1e      	ldr	r3, [pc, #120]	; (8006960 <vTaskStartScheduler+0x80>)
 80068e8:	9301      	str	r3, [sp, #4]
 80068ea:	2300      	movs	r3, #0
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	2300      	movs	r3, #0
 80068f0:	2280      	movs	r2, #128	; 0x80
 80068f2:	491c      	ldr	r1, [pc, #112]	; (8006964 <vTaskStartScheduler+0x84>)
 80068f4:	481c      	ldr	r0, [pc, #112]	; (8006968 <vTaskStartScheduler+0x88>)
 80068f6:	f7ff fdeb 	bl	80064d0 <xTaskCreate>
 80068fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d118      	bne.n	8006934 <vTaskStartScheduler+0x54>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	b672      	cpsid	i
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	b662      	cpsie	i
 8006916:	60bb      	str	r3, [r7, #8]
}
 8006918:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800691a:	4b14      	ldr	r3, [pc, #80]	; (800696c <vTaskStartScheduler+0x8c>)
 800691c:	f04f 32ff 	mov.w	r2, #4294967295
 8006920:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006922:	4b13      	ldr	r3, [pc, #76]	; (8006970 <vTaskStartScheduler+0x90>)
 8006924:	2201      	movs	r2, #1
 8006926:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006928:	4b12      	ldr	r3, [pc, #72]	; (8006974 <vTaskStartScheduler+0x94>)
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800692e:	f001 faf7 	bl	8007f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006932:	e010      	b.n	8006956 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d10c      	bne.n	8006956 <vTaskStartScheduler+0x76>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	b672      	cpsid	i
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	b662      	cpsie	i
 8006950:	607b      	str	r3, [r7, #4]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <vTaskStartScheduler+0x74>
}
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	2000034c 	.word	0x2000034c
 8006964:	08019204 	.word	0x08019204
 8006968:	08006f59 	.word	0x08006f59
 800696c:	20000348 	.word	0x20000348
 8006970:	20000334 	.word	0x20000334
 8006974:	2000032c 	.word	0x2000032c

08006978 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800697c:	4b04      	ldr	r3, [pc, #16]	; (8006990 <vTaskSuspendAll+0x18>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3301      	adds	r3, #1
 8006982:	4a03      	ldr	r2, [pc, #12]	; (8006990 <vTaskSuspendAll+0x18>)
 8006984:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006986:	bf00      	nop
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	20000350 	.word	0x20000350

08006994 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800699e:	2300      	movs	r3, #0
 80069a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069a2:	4b42      	ldr	r3, [pc, #264]	; (8006aac <xTaskResumeAll+0x118>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10c      	bne.n	80069c4 <xTaskResumeAll+0x30>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	b672      	cpsid	i
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	b662      	cpsie	i
 80069be:	603b      	str	r3, [r7, #0]
}
 80069c0:	bf00      	nop
 80069c2:	e7fe      	b.n	80069c2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069c4:	f001 fb2a 	bl	800801c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069c8:	4b38      	ldr	r3, [pc, #224]	; (8006aac <xTaskResumeAll+0x118>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	4a37      	ldr	r2, [pc, #220]	; (8006aac <xTaskResumeAll+0x118>)
 80069d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069d2:	4b36      	ldr	r3, [pc, #216]	; (8006aac <xTaskResumeAll+0x118>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d161      	bne.n	8006a9e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069da:	4b35      	ldr	r3, [pc, #212]	; (8006ab0 <xTaskResumeAll+0x11c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d05d      	beq.n	8006a9e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069e2:	e02e      	b.n	8006a42 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e4:	4b33      	ldr	r3, [pc, #204]	; (8006ab4 <xTaskResumeAll+0x120>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3318      	adds	r3, #24
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fe fe2b 	bl	800564c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3304      	adds	r3, #4
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe fe26 	bl	800564c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	2201      	movs	r2, #1
 8006a06:	409a      	lsls	r2, r3
 8006a08:	4b2b      	ldr	r3, [pc, #172]	; (8006ab8 <xTaskResumeAll+0x124>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	4a2a      	ldr	r2, [pc, #168]	; (8006ab8 <xTaskResumeAll+0x124>)
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4a27      	ldr	r2, [pc, #156]	; (8006abc <xTaskResumeAll+0x128>)
 8006a20:	441a      	add	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3304      	adds	r3, #4
 8006a26:	4619      	mov	r1, r3
 8006a28:	4610      	mov	r0, r2
 8006a2a:	f7fe fdb2 	bl	8005592 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a32:	4b23      	ldr	r3, [pc, #140]	; (8006ac0 <xTaskResumeAll+0x12c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d302      	bcc.n	8006a42 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006a3c:	4b21      	ldr	r3, [pc, #132]	; (8006ac4 <xTaskResumeAll+0x130>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a42:	4b1c      	ldr	r3, [pc, #112]	; (8006ab4 <xTaskResumeAll+0x120>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1cc      	bne.n	80069e4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a50:	f000 fb12 	bl	8007078 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a54:	4b1c      	ldr	r3, [pc, #112]	; (8006ac8 <xTaskResumeAll+0x134>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d010      	beq.n	8006a82 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a60:	f000 f858 	bl	8006b14 <xTaskIncrementTick>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006a6a:	4b16      	ldr	r3, [pc, #88]	; (8006ac4 <xTaskResumeAll+0x130>)
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1f1      	bne.n	8006a60 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006a7c:	4b12      	ldr	r3, [pc, #72]	; (8006ac8 <xTaskResumeAll+0x134>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a82:	4b10      	ldr	r3, [pc, #64]	; (8006ac4 <xTaskResumeAll+0x130>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a8e:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <xTaskResumeAll+0x138>)
 8006a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a9e:	f001 faf1 	bl	8008084 <vPortExitCritical>

	return xAlreadyYielded;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20000350 	.word	0x20000350
 8006ab0:	20000328 	.word	0x20000328
 8006ab4:	200002fc 	.word	0x200002fc
 8006ab8:	20000330 	.word	0x20000330
 8006abc:	20000240 	.word	0x20000240
 8006ac0:	2000023c 	.word	0x2000023c
 8006ac4:	2000033c 	.word	0x2000033c
 8006ac8:	20000338 	.word	0x20000338
 8006acc:	e000ed04 	.word	0xe000ed04

08006ad0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ad6:	4b05      	ldr	r3, [pc, #20]	; (8006aec <xTaskGetTickCount+0x1c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006adc:	687b      	ldr	r3, [r7, #4]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	2000032c 	.word	0x2000032c

08006af0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006af6:	f001 fb79 	bl	80081ec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006afa:	2300      	movs	r3, #0
 8006afc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006afe:	4b04      	ldr	r3, [pc, #16]	; (8006b10 <xTaskGetTickCountFromISR+0x20>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b04:	683b      	ldr	r3, [r7, #0]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	2000032c 	.word	0x2000032c

08006b14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b1e:	4b4f      	ldr	r3, [pc, #316]	; (8006c5c <xTaskIncrementTick+0x148>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f040 808a 	bne.w	8006c3c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b28:	4b4d      	ldr	r3, [pc, #308]	; (8006c60 <xTaskIncrementTick+0x14c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b30:	4a4b      	ldr	r2, [pc, #300]	; (8006c60 <xTaskIncrementTick+0x14c>)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d122      	bne.n	8006b82 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b3c:	4b49      	ldr	r3, [pc, #292]	; (8006c64 <xTaskIncrementTick+0x150>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00c      	beq.n	8006b60 <xTaskIncrementTick+0x4c>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	b672      	cpsid	i
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	b662      	cpsie	i
 8006b5a:	603b      	str	r3, [r7, #0]
}
 8006b5c:	bf00      	nop
 8006b5e:	e7fe      	b.n	8006b5e <xTaskIncrementTick+0x4a>
 8006b60:	4b40      	ldr	r3, [pc, #256]	; (8006c64 <xTaskIncrementTick+0x150>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	4b40      	ldr	r3, [pc, #256]	; (8006c68 <xTaskIncrementTick+0x154>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a3e      	ldr	r2, [pc, #248]	; (8006c64 <xTaskIncrementTick+0x150>)
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	4a3e      	ldr	r2, [pc, #248]	; (8006c68 <xTaskIncrementTick+0x154>)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	4b3d      	ldr	r3, [pc, #244]	; (8006c6c <xTaskIncrementTick+0x158>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	4a3c      	ldr	r2, [pc, #240]	; (8006c6c <xTaskIncrementTick+0x158>)
 8006b7c:	6013      	str	r3, [r2, #0]
 8006b7e:	f000 fa7b 	bl	8007078 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b82:	4b3b      	ldr	r3, [pc, #236]	; (8006c70 <xTaskIncrementTick+0x15c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d348      	bcc.n	8006c1e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b8c:	4b35      	ldr	r3, [pc, #212]	; (8006c64 <xTaskIncrementTick+0x150>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d104      	bne.n	8006ba0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b96:	4b36      	ldr	r3, [pc, #216]	; (8006c70 <xTaskIncrementTick+0x15c>)
 8006b98:	f04f 32ff 	mov.w	r2, #4294967295
 8006b9c:	601a      	str	r2, [r3, #0]
					break;
 8006b9e:	e03e      	b.n	8006c1e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ba0:	4b30      	ldr	r3, [pc, #192]	; (8006c64 <xTaskIncrementTick+0x150>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d203      	bcs.n	8006bc0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006bb8:	4a2d      	ldr	r2, [pc, #180]	; (8006c70 <xTaskIncrementTick+0x15c>)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006bbe:	e02e      	b.n	8006c1e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe fd41 	bl	800564c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d004      	beq.n	8006bdc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	3318      	adds	r3, #24
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fe fd38 	bl	800564c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	2201      	movs	r2, #1
 8006be2:	409a      	lsls	r2, r3
 8006be4:	4b23      	ldr	r3, [pc, #140]	; (8006c74 <xTaskIncrementTick+0x160>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	4a22      	ldr	r2, [pc, #136]	; (8006c74 <xTaskIncrementTick+0x160>)
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4a1f      	ldr	r2, [pc, #124]	; (8006c78 <xTaskIncrementTick+0x164>)
 8006bfc:	441a      	add	r2, r3
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	3304      	adds	r3, #4
 8006c02:	4619      	mov	r1, r3
 8006c04:	4610      	mov	r0, r2
 8006c06:	f7fe fcc4 	bl	8005592 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0e:	4b1b      	ldr	r3, [pc, #108]	; (8006c7c <xTaskIncrementTick+0x168>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d3b9      	bcc.n	8006b8c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c1c:	e7b6      	b.n	8006b8c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c1e:	4b17      	ldr	r3, [pc, #92]	; (8006c7c <xTaskIncrementTick+0x168>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c24:	4914      	ldr	r1, [pc, #80]	; (8006c78 <xTaskIncrementTick+0x164>)
 8006c26:	4613      	mov	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	440b      	add	r3, r1
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d907      	bls.n	8006c46 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006c36:	2301      	movs	r3, #1
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	e004      	b.n	8006c46 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006c3c:	4b10      	ldr	r3, [pc, #64]	; (8006c80 <xTaskIncrementTick+0x16c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3301      	adds	r3, #1
 8006c42:	4a0f      	ldr	r2, [pc, #60]	; (8006c80 <xTaskIncrementTick+0x16c>)
 8006c44:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006c46:	4b0f      	ldr	r3, [pc, #60]	; (8006c84 <xTaskIncrementTick+0x170>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006c52:	697b      	ldr	r3, [r7, #20]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	20000350 	.word	0x20000350
 8006c60:	2000032c 	.word	0x2000032c
 8006c64:	200002f4 	.word	0x200002f4
 8006c68:	200002f8 	.word	0x200002f8
 8006c6c:	20000340 	.word	0x20000340
 8006c70:	20000348 	.word	0x20000348
 8006c74:	20000330 	.word	0x20000330
 8006c78:	20000240 	.word	0x20000240
 8006c7c:	2000023c 	.word	0x2000023c
 8006c80:	20000338 	.word	0x20000338
 8006c84:	2000033c 	.word	0x2000033c

08006c88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c8e:	4b28      	ldr	r3, [pc, #160]	; (8006d30 <vTaskSwitchContext+0xa8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c96:	4b27      	ldr	r3, [pc, #156]	; (8006d34 <vTaskSwitchContext+0xac>)
 8006c98:	2201      	movs	r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c9c:	e041      	b.n	8006d22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006c9e:	4b25      	ldr	r3, [pc, #148]	; (8006d34 <vTaskSwitchContext+0xac>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ca4:	4b24      	ldr	r3, [pc, #144]	; (8006d38 <vTaskSwitchContext+0xb0>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	fab3 f383 	clz	r3, r3
 8006cb0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006cb2:	7afb      	ldrb	r3, [r7, #11]
 8006cb4:	f1c3 031f 	rsb	r3, r3, #31
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	4920      	ldr	r1, [pc, #128]	; (8006d3c <vTaskSwitchContext+0xb4>)
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10c      	bne.n	8006ce8 <vTaskSwitchContext+0x60>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	b672      	cpsid	i
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	b662      	cpsie	i
 8006ce2:	607b      	str	r3, [r7, #4]
}
 8006ce4:	bf00      	nop
 8006ce6:	e7fe      	b.n	8006ce6 <vTaskSwitchContext+0x5e>
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4a12      	ldr	r2, [pc, #72]	; (8006d3c <vTaskSwitchContext+0xb4>)
 8006cf4:	4413      	add	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	605a      	str	r2, [r3, #4]
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	3308      	adds	r3, #8
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d104      	bne.n	8006d18 <vTaskSwitchContext+0x90>
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	605a      	str	r2, [r3, #4]
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	4a08      	ldr	r2, [pc, #32]	; (8006d40 <vTaskSwitchContext+0xb8>)
 8006d20:	6013      	str	r3, [r2, #0]
}
 8006d22:	bf00      	nop
 8006d24:	371c      	adds	r7, #28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000350 	.word	0x20000350
 8006d34:	2000033c 	.word	0x2000033c
 8006d38:	20000330 	.word	0x20000330
 8006d3c:	20000240 	.word	0x20000240
 8006d40:	2000023c 	.word	0x2000023c

08006d44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10c      	bne.n	8006d6e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	b672      	cpsid	i
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	b662      	cpsie	i
 8006d68:	60fb      	str	r3, [r7, #12]
}
 8006d6a:	bf00      	nop
 8006d6c:	e7fe      	b.n	8006d6c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d6e:	4b07      	ldr	r3, [pc, #28]	; (8006d8c <vTaskPlaceOnEventList+0x48>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3318      	adds	r3, #24
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fe fc2f 	bl	80055da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	6838      	ldr	r0, [r7, #0]
 8006d80:	f000 fb74 	bl	800746c <prvAddCurrentTaskToDelayedList>
}
 8006d84:	bf00      	nop
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	2000023c 	.word	0x2000023c

08006d90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10c      	bne.n	8006dc0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006daa:	b672      	cpsid	i
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	b662      	cpsie	i
 8006dba:	60fb      	str	r3, [r7, #12]
}
 8006dbc:	bf00      	nop
 8006dbe:	e7fe      	b.n	8006dbe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	3318      	adds	r3, #24
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fe fc41 	bl	800564c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dca:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <xTaskRemoveFromEventList+0xb0>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d11c      	bne.n	8006e0c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe fc38 	bl	800564c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	2201      	movs	r2, #1
 8006de2:	409a      	lsls	r2, r3
 8006de4:	4b17      	ldr	r3, [pc, #92]	; (8006e44 <xTaskRemoveFromEventList+0xb4>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	4a16      	ldr	r2, [pc, #88]	; (8006e44 <xTaskRemoveFromEventList+0xb4>)
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4a13      	ldr	r2, [pc, #76]	; (8006e48 <xTaskRemoveFromEventList+0xb8>)
 8006dfc:	441a      	add	r2, r3
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f7fe fbc4 	bl	8005592 <vListInsertEnd>
 8006e0a:	e005      	b.n	8006e18 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	3318      	adds	r3, #24
 8006e10:	4619      	mov	r1, r3
 8006e12:	480e      	ldr	r0, [pc, #56]	; (8006e4c <xTaskRemoveFromEventList+0xbc>)
 8006e14:	f7fe fbbd 	bl	8005592 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <xTaskRemoveFromEventList+0xc0>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d905      	bls.n	8006e32 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e26:	2301      	movs	r3, #1
 8006e28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e2a:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <xTaskRemoveFromEventList+0xc4>)
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	e001      	b.n	8006e36 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e36:	697b      	ldr	r3, [r7, #20]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20000350 	.word	0x20000350
 8006e44:	20000330 	.word	0x20000330
 8006e48:	20000240 	.word	0x20000240
 8006e4c:	200002fc 	.word	0x200002fc
 8006e50:	2000023c 	.word	0x2000023c
 8006e54:	2000033c 	.word	0x2000033c

08006e58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e60:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <vTaskInternalSetTimeOutState+0x24>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <vTaskInternalSetTimeOutState+0x28>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	605a      	str	r2, [r3, #4]
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	20000340 	.word	0x20000340
 8006e80:	2000032c 	.word	0x2000032c

08006e84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10c      	bne.n	8006eae <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	b672      	cpsid	i
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	b662      	cpsie	i
 8006ea8:	613b      	str	r3, [r7, #16]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10c      	bne.n	8006ece <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	b672      	cpsid	i
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	b662      	cpsie	i
 8006ec8:	60fb      	str	r3, [r7, #12]
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006ece:	f001 f8a5 	bl	800801c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ed2:	4b19      	ldr	r3, [pc, #100]	; (8006f38 <xTaskCheckForTimeOut+0xb4>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	617b      	str	r3, [r7, #20]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	4b15      	ldr	r3, [pc, #84]	; (8006f3c <xTaskCheckForTimeOut+0xb8>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d007      	beq.n	8006efe <xTaskCheckForTimeOut+0x7a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d302      	bcc.n	8006efe <xTaskCheckForTimeOut+0x7a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	e015      	b.n	8006f2a <xTaskCheckForTimeOut+0xa6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d20b      	bcs.n	8006f20 <xTaskCheckForTimeOut+0x9c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	1ad2      	subs	r2, r2, r3
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff ff9f 	bl	8006e58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61fb      	str	r3, [r7, #28]
 8006f1e:	e004      	b.n	8006f2a <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f26:	2301      	movs	r3, #1
 8006f28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f2a:	f001 f8ab 	bl	8008084 <vPortExitCritical>

	return xReturn;
 8006f2e:	69fb      	ldr	r3, [r7, #28]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3720      	adds	r7, #32
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	2000032c 	.word	0x2000032c
 8006f3c:	20000340 	.word	0x20000340

08006f40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f40:	b480      	push	{r7}
 8006f42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f44:	4b03      	ldr	r3, [pc, #12]	; (8006f54 <vTaskMissedYield+0x14>)
 8006f46:	2201      	movs	r2, #1
 8006f48:	601a      	str	r2, [r3, #0]
}
 8006f4a:	bf00      	nop
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	2000033c 	.word	0x2000033c

08006f58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f60:	f000 f84c 	bl	8006ffc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f64:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <prvIdleTask+0x28>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d9f9      	bls.n	8006f60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f6c:	4b05      	ldr	r3, [pc, #20]	; (8006f84 <prvIdleTask+0x2c>)
 8006f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f7c:	e7f0      	b.n	8006f60 <prvIdleTask+0x8>
 8006f7e:	bf00      	nop
 8006f80:	20000240 	.word	0x20000240
 8006f84:	e000ed04 	.word	0xe000ed04

08006f88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f8e:	2300      	movs	r3, #0
 8006f90:	607b      	str	r3, [r7, #4]
 8006f92:	e00c      	b.n	8006fae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4a10      	ldr	r2, [pc, #64]	; (8006fe0 <prvInitialiseTaskLists+0x58>)
 8006fa0:	4413      	add	r3, r2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe fac8 	bl	8005538 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3301      	adds	r3, #1
 8006fac:	607b      	str	r3, [r7, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b06      	cmp	r3, #6
 8006fb2:	d9ef      	bls.n	8006f94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fb4:	480b      	ldr	r0, [pc, #44]	; (8006fe4 <prvInitialiseTaskLists+0x5c>)
 8006fb6:	f7fe fabf 	bl	8005538 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fba:	480b      	ldr	r0, [pc, #44]	; (8006fe8 <prvInitialiseTaskLists+0x60>)
 8006fbc:	f7fe fabc 	bl	8005538 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fc0:	480a      	ldr	r0, [pc, #40]	; (8006fec <prvInitialiseTaskLists+0x64>)
 8006fc2:	f7fe fab9 	bl	8005538 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fc6:	480a      	ldr	r0, [pc, #40]	; (8006ff0 <prvInitialiseTaskLists+0x68>)
 8006fc8:	f7fe fab6 	bl	8005538 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fcc:	4b09      	ldr	r3, [pc, #36]	; (8006ff4 <prvInitialiseTaskLists+0x6c>)
 8006fce:	4a05      	ldr	r2, [pc, #20]	; (8006fe4 <prvInitialiseTaskLists+0x5c>)
 8006fd0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fd2:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <prvInitialiseTaskLists+0x70>)
 8006fd4:	4a04      	ldr	r2, [pc, #16]	; (8006fe8 <prvInitialiseTaskLists+0x60>)
 8006fd6:	601a      	str	r2, [r3, #0]
}
 8006fd8:	bf00      	nop
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	20000240 	.word	0x20000240
 8006fe4:	200002cc 	.word	0x200002cc
 8006fe8:	200002e0 	.word	0x200002e0
 8006fec:	200002fc 	.word	0x200002fc
 8006ff0:	20000310 	.word	0x20000310
 8006ff4:	200002f4 	.word	0x200002f4
 8006ff8:	200002f8 	.word	0x200002f8

08006ffc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007002:	e019      	b.n	8007038 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007004:	f001 f80a 	bl	800801c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007008:	4b10      	ldr	r3, [pc, #64]	; (800704c <prvCheckTasksWaitingTermination+0x50>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3304      	adds	r3, #4
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe fb19 	bl	800564c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800701a:	4b0d      	ldr	r3, [pc, #52]	; (8007050 <prvCheckTasksWaitingTermination+0x54>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3b01      	subs	r3, #1
 8007020:	4a0b      	ldr	r2, [pc, #44]	; (8007050 <prvCheckTasksWaitingTermination+0x54>)
 8007022:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007024:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <prvCheckTasksWaitingTermination+0x58>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3b01      	subs	r3, #1
 800702a:	4a0a      	ldr	r2, [pc, #40]	; (8007054 <prvCheckTasksWaitingTermination+0x58>)
 800702c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800702e:	f001 f829 	bl	8008084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f810 	bl	8007058 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007038:	4b06      	ldr	r3, [pc, #24]	; (8007054 <prvCheckTasksWaitingTermination+0x58>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e1      	bne.n	8007004 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007040:	bf00      	nop
 8007042:	bf00      	nop
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20000310 	.word	0x20000310
 8007050:	20000328 	.word	0x20000328
 8007054:	20000324 	.word	0x20000324

08007058 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fdb1 	bl	8007bcc <vPortFree>
			vPortFree( pxTCB );
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fdae 	bl	8007bcc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007070:	bf00      	nop
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800707e:	4b0c      	ldr	r3, [pc, #48]	; (80070b0 <prvResetNextTaskUnblockTime+0x38>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d104      	bne.n	8007092 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007088:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <prvResetNextTaskUnblockTime+0x3c>)
 800708a:	f04f 32ff 	mov.w	r2, #4294967295
 800708e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007090:	e008      	b.n	80070a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007092:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <prvResetNextTaskUnblockTime+0x38>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	4a04      	ldr	r2, [pc, #16]	; (80070b4 <prvResetNextTaskUnblockTime+0x3c>)
 80070a2:	6013      	str	r3, [r2, #0]
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	200002f4 	.word	0x200002f4
 80070b4:	20000348 	.word	0x20000348

080070b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070be:	4b0b      	ldr	r3, [pc, #44]	; (80070ec <xTaskGetSchedulerState+0x34>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070c6:	2301      	movs	r3, #1
 80070c8:	607b      	str	r3, [r7, #4]
 80070ca:	e008      	b.n	80070de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070cc:	4b08      	ldr	r3, [pc, #32]	; (80070f0 <xTaskGetSchedulerState+0x38>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d102      	bne.n	80070da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070d4:	2302      	movs	r3, #2
 80070d6:	607b      	str	r3, [r7, #4]
 80070d8:	e001      	b.n	80070de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070da:	2300      	movs	r3, #0
 80070dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070de:	687b      	ldr	r3, [r7, #4]
	}
 80070e0:	4618      	mov	r0, r3
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	20000334 	.word	0x20000334
 80070f0:	20000350 	.word	0x20000350

080070f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007100:	2300      	movs	r3, #0
 8007102:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d069      	beq.n	80071de <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710e:	4b36      	ldr	r3, [pc, #216]	; (80071e8 <xTaskPriorityInherit+0xf4>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	429a      	cmp	r2, r3
 8007116:	d259      	bcs.n	80071cc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	db06      	blt.n	800712e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007120:	4b31      	ldr	r3, [pc, #196]	; (80071e8 <xTaskPriorityInherit+0xf4>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	f1c3 0207 	rsb	r2, r3, #7
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	6959      	ldr	r1, [r3, #20]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4a2b      	ldr	r2, [pc, #172]	; (80071ec <xTaskPriorityInherit+0xf8>)
 8007140:	4413      	add	r3, r2
 8007142:	4299      	cmp	r1, r3
 8007144:	d13a      	bne.n	80071bc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	3304      	adds	r3, #4
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe fa7e 	bl	800564c <uxListRemove>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d115      	bne.n	8007182 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715a:	4924      	ldr	r1, [pc, #144]	; (80071ec <xTaskPriorityInherit+0xf8>)
 800715c:	4613      	mov	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	440b      	add	r3, r1
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10a      	bne.n	8007182 <xTaskPriorityInherit+0x8e>
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	2201      	movs	r2, #1
 8007172:	fa02 f303 	lsl.w	r3, r2, r3
 8007176:	43da      	mvns	r2, r3
 8007178:	4b1d      	ldr	r3, [pc, #116]	; (80071f0 <xTaskPriorityInherit+0xfc>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4013      	ands	r3, r2
 800717e:	4a1c      	ldr	r2, [pc, #112]	; (80071f0 <xTaskPriorityInherit+0xfc>)
 8007180:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007182:	4b19      	ldr	r3, [pc, #100]	; (80071e8 <xTaskPriorityInherit+0xf4>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	2201      	movs	r2, #1
 8007192:	409a      	lsls	r2, r3
 8007194:	4b16      	ldr	r3, [pc, #88]	; (80071f0 <xTaskPriorityInherit+0xfc>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4313      	orrs	r3, r2
 800719a:	4a15      	ldr	r2, [pc, #84]	; (80071f0 <xTaskPriorityInherit+0xfc>)
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a2:	4613      	mov	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4a10      	ldr	r2, [pc, #64]	; (80071ec <xTaskPriorityInherit+0xf8>)
 80071ac:	441a      	add	r2, r3
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	3304      	adds	r3, #4
 80071b2:	4619      	mov	r1, r3
 80071b4:	4610      	mov	r0, r2
 80071b6:	f7fe f9ec 	bl	8005592 <vListInsertEnd>
 80071ba:	e004      	b.n	80071c6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071bc:	4b0a      	ldr	r3, [pc, #40]	; (80071e8 <xTaskPriorityInherit+0xf4>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80071c6:	2301      	movs	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	e008      	b.n	80071de <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071d0:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <xTaskPriorityInherit+0xf4>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d201      	bcs.n	80071de <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80071da:	2301      	movs	r3, #1
 80071dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071de:	68fb      	ldr	r3, [r7, #12]
	}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	2000023c 	.word	0x2000023c
 80071ec:	20000240 	.word	0x20000240
 80071f0:	20000330 	.word	0x20000330

080071f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d072      	beq.n	80072f0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800720a:	4b3c      	ldr	r3, [pc, #240]	; (80072fc <xTaskPriorityDisinherit+0x108>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	429a      	cmp	r2, r3
 8007212:	d00c      	beq.n	800722e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	b672      	cpsid	i
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	b662      	cpsie	i
 8007228:	60fb      	str	r3, [r7, #12]
}
 800722a:	bf00      	nop
 800722c:	e7fe      	b.n	800722c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10c      	bne.n	8007250 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	b672      	cpsid	i
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	b662      	cpsie	i
 800724a:	60bb      	str	r3, [r7, #8]
}
 800724c:	bf00      	nop
 800724e:	e7fe      	b.n	800724e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007254:	1e5a      	subs	r2, r3, #1
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007262:	429a      	cmp	r2, r3
 8007264:	d044      	beq.n	80072f0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726a:	2b00      	cmp	r3, #0
 800726c:	d140      	bne.n	80072f0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	3304      	adds	r3, #4
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe f9ea 	bl	800564c <uxListRemove>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d115      	bne.n	80072aa <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007282:	491f      	ldr	r1, [pc, #124]	; (8007300 <xTaskPriorityDisinherit+0x10c>)
 8007284:	4613      	mov	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	440b      	add	r3, r1
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10a      	bne.n	80072aa <xTaskPriorityDisinherit+0xb6>
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	2201      	movs	r2, #1
 800729a:	fa02 f303 	lsl.w	r3, r2, r3
 800729e:	43da      	mvns	r2, r3
 80072a0:	4b18      	ldr	r3, [pc, #96]	; (8007304 <xTaskPriorityDisinherit+0x110>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4013      	ands	r3, r2
 80072a6:	4a17      	ldr	r2, [pc, #92]	; (8007304 <xTaskPriorityDisinherit+0x110>)
 80072a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b6:	f1c3 0207 	rsb	r2, r3, #7
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c2:	2201      	movs	r2, #1
 80072c4:	409a      	lsls	r2, r3
 80072c6:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <xTaskPriorityDisinherit+0x110>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	4a0d      	ldr	r2, [pc, #52]	; (8007304 <xTaskPriorityDisinherit+0x110>)
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4a08      	ldr	r2, [pc, #32]	; (8007300 <xTaskPriorityDisinherit+0x10c>)
 80072de:	441a      	add	r2, r3
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	3304      	adds	r3, #4
 80072e4:	4619      	mov	r1, r3
 80072e6:	4610      	mov	r0, r2
 80072e8:	f7fe f953 	bl	8005592 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072ec:	2301      	movs	r3, #1
 80072ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072f0:	697b      	ldr	r3, [r7, #20]
	}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	2000023c 	.word	0x2000023c
 8007300:	20000240 	.word	0x20000240
 8007304:	20000330 	.word	0x20000330

08007308 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007308:	b580      	push	{r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007316:	2301      	movs	r3, #1
 8007318:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 8087 	beq.w	8007430 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10c      	bne.n	8007344 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	b672      	cpsid	i
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	b662      	cpsie	i
 800733e:	60fb      	str	r3, [r7, #12]
}
 8007340:	bf00      	nop
 8007342:	e7fe      	b.n	8007342 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d902      	bls.n	8007354 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	61fb      	str	r3, [r7, #28]
 8007352:	e002      	b.n	800735a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007358:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	69fa      	ldr	r2, [r7, #28]
 8007360:	429a      	cmp	r2, r3
 8007362:	d065      	beq.n	8007430 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	429a      	cmp	r2, r3
 800736c:	d160      	bne.n	8007430 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800736e:	4b32      	ldr	r3, [pc, #200]	; (8007438 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	429a      	cmp	r2, r3
 8007376:	d10c      	bne.n	8007392 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	b672      	cpsid	i
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	b662      	cpsie	i
 800738c:	60bb      	str	r3, [r7, #8]
}
 800738e:	bf00      	nop
 8007390:	e7fe      	b.n	8007390 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007396:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	69fa      	ldr	r2, [r7, #28]
 800739c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	db04      	blt.n	80073b0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	f1c3 0207 	rsb	r2, r3, #7
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	6959      	ldr	r1, [r3, #20]
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4a1f      	ldr	r2, [pc, #124]	; (800743c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80073c0:	4413      	add	r3, r2
 80073c2:	4299      	cmp	r1, r3
 80073c4:	d134      	bne.n	8007430 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	3304      	adds	r3, #4
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fe f93e 	bl	800564c <uxListRemove>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d115      	bne.n	8007402 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073da:	4918      	ldr	r1, [pc, #96]	; (800743c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80073dc:	4613      	mov	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f0:	2201      	movs	r2, #1
 80073f2:	fa02 f303 	lsl.w	r3, r2, r3
 80073f6:	43da      	mvns	r2, r3
 80073f8:	4b11      	ldr	r3, [pc, #68]	; (8007440 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4013      	ands	r3, r2
 80073fe:	4a10      	ldr	r2, [pc, #64]	; (8007440 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007400:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	2201      	movs	r2, #1
 8007408:	409a      	lsls	r2, r3
 800740a:	4b0d      	ldr	r3, [pc, #52]	; (8007440 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4313      	orrs	r3, r2
 8007410:	4a0b      	ldr	r2, [pc, #44]	; (8007440 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007418:	4613      	mov	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4a06      	ldr	r2, [pc, #24]	; (800743c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007422:	441a      	add	r2, r3
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	3304      	adds	r3, #4
 8007428:	4619      	mov	r1, r3
 800742a:	4610      	mov	r0, r2
 800742c:	f7fe f8b1 	bl	8005592 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007430:	bf00      	nop
 8007432:	3720      	adds	r7, #32
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	2000023c 	.word	0x2000023c
 800743c:	20000240 	.word	0x20000240
 8007440:	20000330 	.word	0x20000330

08007444 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007444:	b480      	push	{r7}
 8007446:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007448:	4b07      	ldr	r3, [pc, #28]	; (8007468 <pvTaskIncrementMutexHeldCount+0x24>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d004      	beq.n	800745a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007450:	4b05      	ldr	r3, [pc, #20]	; (8007468 <pvTaskIncrementMutexHeldCount+0x24>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007456:	3201      	adds	r2, #1
 8007458:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800745a:	4b03      	ldr	r3, [pc, #12]	; (8007468 <pvTaskIncrementMutexHeldCount+0x24>)
 800745c:	681b      	ldr	r3, [r3, #0]
	}
 800745e:	4618      	mov	r0, r3
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	2000023c 	.word	0x2000023c

0800746c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007476:	4b21      	ldr	r3, [pc, #132]	; (80074fc <prvAddCurrentTaskToDelayedList+0x90>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800747c:	4b20      	ldr	r3, [pc, #128]	; (8007500 <prvAddCurrentTaskToDelayedList+0x94>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3304      	adds	r3, #4
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe f8e2 	bl	800564c <uxListRemove>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10b      	bne.n	80074a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800748e:	4b1c      	ldr	r3, [pc, #112]	; (8007500 <prvAddCurrentTaskToDelayedList+0x94>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	2201      	movs	r2, #1
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	43da      	mvns	r2, r3
 800749c:	4b19      	ldr	r3, [pc, #100]	; (8007504 <prvAddCurrentTaskToDelayedList+0x98>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4013      	ands	r3, r2
 80074a2:	4a18      	ldr	r2, [pc, #96]	; (8007504 <prvAddCurrentTaskToDelayedList+0x98>)
 80074a4:	6013      	str	r3, [r2, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4413      	add	r3, r2
 80074ac:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074ae:	4b14      	ldr	r3, [pc, #80]	; (8007500 <prvAddCurrentTaskToDelayedList+0x94>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d209      	bcs.n	80074d2 <prvAddCurrentTaskToDelayedList+0x66>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074be:	4b12      	ldr	r3, [pc, #72]	; (8007508 <prvAddCurrentTaskToDelayedList+0x9c>)
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <prvAddCurrentTaskToDelayedList+0x94>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3304      	adds	r3, #4
 80074c8:	4619      	mov	r1, r3
 80074ca:	4610      	mov	r0, r2
 80074cc:	f7fe f885 	bl	80055da <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074d0:	e010      	b.n	80074f4 <prvAddCurrentTaskToDelayedList+0x88>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074d2:	4b0e      	ldr	r3, [pc, #56]	; (800750c <prvAddCurrentTaskToDelayedList+0xa0>)
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	4b0a      	ldr	r3, [pc, #40]	; (8007500 <prvAddCurrentTaskToDelayedList+0x94>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3304      	adds	r3, #4
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	f7fe f87b 	bl	80055da <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 80074e4:	4b0a      	ldr	r3, [pc, #40]	; (8007510 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d202      	bcs.n	80074f4 <prvAddCurrentTaskToDelayedList+0x88>
				xNextTaskUnblockTime = xTimeToWake;
 80074ee:	4a08      	ldr	r2, [pc, #32]	; (8007510 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	6013      	str	r3, [r2, #0]
}
 80074f4:	bf00      	nop
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	2000032c 	.word	0x2000032c
 8007500:	2000023c 	.word	0x2000023c
 8007504:	20000330 	.word	0x20000330
 8007508:	200002f8 	.word	0x200002f8
 800750c:	200002f4 	.word	0x200002f4
 8007510:	20000348 	.word	0x20000348

08007514 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800751e:	2300      	movs	r3, #0
 8007520:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007526:	2b84      	cmp	r3, #132	; 0x84
 8007528:	d005      	beq.n	8007536 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800752a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4413      	add	r3, r2
 8007532:	3303      	adds	r3, #3
 8007534:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007536:	68fb      	ldr	r3, [r7, #12]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800754a:	f3ef 8305 	mrs	r3, IPSR
 800754e:	607b      	str	r3, [r7, #4]
  return(result);
 8007550:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007552:	2b00      	cmp	r3, #0
 8007554:	bf14      	ite	ne
 8007556:	2301      	movne	r3, #1
 8007558:	2300      	moveq	r3, #0
 800755a:	b2db      	uxtb	r3, r3
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800756c:	f7ff f9b8 	bl	80068e0 <vTaskStartScheduler>
  
  return osOK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	bd80      	pop	{r7, pc}

08007576 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800757a:	f7ff ffe3 	bl	8007544 <inHandlerMode>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d003      	beq.n	800758c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007584:	f7ff fab4 	bl	8006af0 <xTaskGetTickCountFromISR>
 8007588:	4603      	mov	r3, r0
 800758a:	e002      	b.n	8007592 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800758c:	f7ff faa0 	bl	8006ad0 <xTaskGetTickCount>
 8007590:	4603      	mov	r3, r0
  }
}
 8007592:	4618      	mov	r0, r3
 8007594:	bd80      	pop	{r7, pc}

08007596 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007598:	b087      	sub	sp, #28
 800759a:	af02      	add	r7, sp, #8
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685c      	ldr	r4, [r3, #4]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075ac:	b29e      	uxth	r6, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7ff ffad 	bl	8007514 <makeFreeRtosPriority>
 80075ba:	4602      	mov	r2, r0
 80075bc:	f107 030c 	add.w	r3, r7, #12
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	9200      	str	r2, [sp, #0]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	4632      	mov	r2, r6
 80075c8:	4629      	mov	r1, r5
 80075ca:	4620      	mov	r0, r4
 80075cc:	f7fe ff80 	bl	80064d0 <xTaskCreate>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d001      	beq.n	80075da <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	e000      	b.n	80075dc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80075da:	68fb      	ldr	r3, [r7, #12]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075e4 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7ff f8af 	bl	8006750 <vTaskDelete>
  return osOK;
 80075f2:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <osDelay+0x16>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	e000      	b.n	8007614 <osDelay+0x18>
 8007612:	2301      	movs	r3, #1
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff f92d 	bl	8006874 <vTaskDelay>
  
  return osOK;
 800761a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800762c:	2001      	movs	r0, #1
 800762e:	f7fe f91c 	bl	800586a <xQueueCreateMutex>
 8007632:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007646:	2300      	movs	r3, #0
 8007648:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <osMutexWait+0x18>
    return osErrorParameter;
 8007650:	2380      	movs	r3, #128	; 0x80
 8007652:	e03a      	b.n	80076ca <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765e:	d103      	bne.n	8007668 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007660:	f04f 33ff 	mov.w	r3, #4294967295
 8007664:	60fb      	str	r3, [r7, #12]
 8007666:	e009      	b.n	800767c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d006      	beq.n	800767c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <osMutexWait+0x40>
      ticks = 1;
 8007678:	2301      	movs	r3, #1
 800767a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800767c:	f7ff ff62 	bl	8007544 <inHandlerMode>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d017      	beq.n	80076b6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007686:	f107 0308 	add.w	r3, r7, #8
 800768a:	461a      	mov	r2, r3
 800768c:	2100      	movs	r1, #0
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7fe fd70 	bl	8006174 <xQueueReceiveFromISR>
 8007694:	4603      	mov	r3, r0
 8007696:	2b01      	cmp	r3, #1
 8007698:	d001      	beq.n	800769e <osMutexWait+0x62>
      return osErrorOS;
 800769a:	23ff      	movs	r3, #255	; 0xff
 800769c:	e015      	b.n	80076ca <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d011      	beq.n	80076c8 <osMutexWait+0x8c>
 80076a4:	4b0b      	ldr	r3, [pc, #44]	; (80076d4 <osMutexWait+0x98>)
 80076a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	e008      	b.n	80076c8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80076b6:	68f9      	ldr	r1, [r7, #12]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7fe fc47 	bl	8005f4c <xQueueSemaphoreTake>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d001      	beq.n	80076c8 <osMutexWait+0x8c>
    return osErrorOS;
 80076c4:	23ff      	movs	r3, #255	; 0xff
 80076c6:	e000      	b.n	80076ca <osMutexWait+0x8e>
  }
  
  return osOK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	e000ed04 	.word	0xe000ed04

080076d8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80076e4:	2300      	movs	r3, #0
 80076e6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80076e8:	f7ff ff2c 	bl	8007544 <inHandlerMode>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d016      	beq.n	8007720 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80076f2:	f107 0308 	add.w	r3, r7, #8
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7fe faab 	bl	8005c54 <xQueueGiveFromISR>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b01      	cmp	r3, #1
 8007702:	d001      	beq.n	8007708 <osMutexRelease+0x30>
      return osErrorOS;
 8007704:	23ff      	movs	r3, #255	; 0xff
 8007706:	e017      	b.n	8007738 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d013      	beq.n	8007736 <osMutexRelease+0x5e>
 800770e:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <osMutexRelease+0x68>)
 8007710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	e00a      	b.n	8007736 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007720:	2300      	movs	r3, #0
 8007722:	2200      	movs	r2, #0
 8007724:	2100      	movs	r1, #0
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fe f8ee 	bl	8005908 <xQueueGenericSend>
 800772c:	4603      	mov	r3, r0
 800772e:	2b01      	cmp	r3, #1
 8007730:	d001      	beq.n	8007736 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007732:	23ff      	movs	r3, #255	; 0xff
 8007734:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007736:	68fb      	ldr	r3, [r7, #12]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	e000ed04 	.word	0xe000ed04

08007744 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d110      	bne.n	8007776 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8007754:	2203      	movs	r2, #3
 8007756:	2100      	movs	r1, #0
 8007758:	2001      	movs	r0, #1
 800775a:	f7fe f80b 	bl	8005774 <xQueueGenericCreate>
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d005      	beq.n	8007772 <osSemaphoreCreate+0x2e>
 8007766:	2300      	movs	r3, #0
 8007768:	2200      	movs	r2, #0
 800776a:	2100      	movs	r1, #0
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f7fe f8cb 	bl	8005908 <xQueueGenericSend>
    return sema;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	e006      	b.n	8007784 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	4611      	mov	r1, r2
 800777c:	4618      	mov	r0, r3
 800777e:	f7fe f88c 	bl	800589a <xQueueCreateCountingSemaphore>
 8007782:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007796:	2300      	movs	r3, #0
 8007798:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80077a0:	2380      	movs	r3, #128	; 0x80
 80077a2:	e03a      	b.n	800781a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80077a4:	2300      	movs	r3, #0
 80077a6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ae:	d103      	bne.n	80077b8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80077b0:	f04f 33ff 	mov.w	r3, #4294967295
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	e009      	b.n	80077cc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d006      	beq.n	80077cc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <osSemaphoreWait+0x40>
      ticks = 1;
 80077c8:	2301      	movs	r3, #1
 80077ca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80077cc:	f7ff feba 	bl	8007544 <inHandlerMode>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d017      	beq.n	8007806 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80077d6:	f107 0308 	add.w	r3, r7, #8
 80077da:	461a      	mov	r2, r3
 80077dc:	2100      	movs	r1, #0
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7fe fcc8 	bl	8006174 <xQueueReceiveFromISR>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d001      	beq.n	80077ee <osSemaphoreWait+0x62>
      return osErrorOS;
 80077ea:	23ff      	movs	r3, #255	; 0xff
 80077ec:	e015      	b.n	800781a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d011      	beq.n	8007818 <osSemaphoreWait+0x8c>
 80077f4:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <osSemaphoreWait+0x98>)
 80077f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	e008      	b.n	8007818 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007806:	68f9      	ldr	r1, [r7, #12]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7fe fb9f 	bl	8005f4c <xQueueSemaphoreTake>
 800780e:	4603      	mov	r3, r0
 8007810:	2b01      	cmp	r3, #1
 8007812:	d001      	beq.n	8007818 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007814:	23ff      	movs	r3, #255	; 0xff
 8007816:	e000      	b.n	800781a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	e000ed04 	.word	0xe000ed04

08007828 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007830:	2300      	movs	r3, #0
 8007832:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007834:	2300      	movs	r3, #0
 8007836:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007838:	f7ff fe84 	bl	8007544 <inHandlerMode>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d016      	beq.n	8007870 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007842:	f107 0308 	add.w	r3, r7, #8
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7fe fa03 	bl	8005c54 <xQueueGiveFromISR>
 800784e:	4603      	mov	r3, r0
 8007850:	2b01      	cmp	r3, #1
 8007852:	d001      	beq.n	8007858 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007854:	23ff      	movs	r3, #255	; 0xff
 8007856:	e017      	b.n	8007888 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d013      	beq.n	8007886 <osSemaphoreRelease+0x5e>
 800785e:	4b0c      	ldr	r3, [pc, #48]	; (8007890 <osSemaphoreRelease+0x68>)
 8007860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	e00a      	b.n	8007886 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007870:	2300      	movs	r3, #0
 8007872:	2200      	movs	r2, #0
 8007874:	2100      	movs	r1, #0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7fe f846 	bl	8005908 <xQueueGenericSend>
 800787c:	4603      	mov	r3, r0
 800787e:	2b01      	cmp	r3, #1
 8007880:	d001      	beq.n	8007886 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007882:	23ff      	movs	r3, #255	; 0xff
 8007884:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007886:	68fb      	ldr	r3, [r7, #12]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	e000ed04 	.word	0xe000ed04

08007894 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	4619      	mov	r1, r3
 80078aa:	f7fd ff63 	bl	8005774 <xQueueGenericCreate>
 80078ae:	4603      	mov	r3, r0
#endif
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80078c4:	2300      	movs	r3, #0
 80078c6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <osMessagePut+0x1e>
    ticks = 1;
 80078d2:	2301      	movs	r3, #1
 80078d4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80078d6:	f7ff fe35 	bl	8007544 <inHandlerMode>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d018      	beq.n	8007912 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80078e0:	f107 0210 	add.w	r2, r7, #16
 80078e4:	f107 0108 	add.w	r1, r7, #8
 80078e8:	2300      	movs	r3, #0
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7fe f912 	bl	8005b14 <xQueueGenericSendFromISR>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d001      	beq.n	80078fa <osMessagePut+0x42>
      return osErrorOS;
 80078f6:	23ff      	movs	r3, #255	; 0xff
 80078f8:	e018      	b.n	800792c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d014      	beq.n	800792a <osMessagePut+0x72>
 8007900:	4b0c      	ldr	r3, [pc, #48]	; (8007934 <osMessagePut+0x7c>)
 8007902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	e00b      	b.n	800792a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007912:	f107 0108 	add.w	r1, r7, #8
 8007916:	2300      	movs	r3, #0
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f7fd fff4 	bl	8005908 <xQueueGenericSend>
 8007920:	4603      	mov	r3, r0
 8007922:	2b01      	cmp	r3, #1
 8007924:	d001      	beq.n	800792a <osMessagePut+0x72>
      return osErrorOS;
 8007926:	23ff      	movs	r3, #255	; 0xff
 8007928:	e000      	b.n	800792c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	e000ed04 	.word	0xe000ed04

08007938 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007938:	b590      	push	{r4, r7, lr}
 800793a:	b08b      	sub	sp, #44	; 0x2c
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10a      	bne.n	8007968 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007952:	2380      	movs	r3, #128	; 0x80
 8007954:	617b      	str	r3, [r7, #20]
    return event;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	461c      	mov	r4, r3
 800795a:	f107 0314 	add.w	r3, r7, #20
 800795e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007962:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007966:	e054      	b.n	8007a12 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007968:	2300      	movs	r3, #0
 800796a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007976:	d103      	bne.n	8007980 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007978:	f04f 33ff 	mov.w	r3, #4294967295
 800797c:	627b      	str	r3, [r7, #36]	; 0x24
 800797e:	e009      	b.n	8007994 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d006      	beq.n	8007994 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <osMessageGet+0x5c>
      ticks = 1;
 8007990:	2301      	movs	r3, #1
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007994:	f7ff fdd6 	bl	8007544 <inHandlerMode>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d01c      	beq.n	80079d8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800799e:	f107 0220 	add.w	r2, r7, #32
 80079a2:	f107 0314 	add.w	r3, r7, #20
 80079a6:	3304      	adds	r3, #4
 80079a8:	4619      	mov	r1, r3
 80079aa:	68b8      	ldr	r0, [r7, #8]
 80079ac:	f7fe fbe2 	bl	8006174 <xQueueReceiveFromISR>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d102      	bne.n	80079bc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80079b6:	2310      	movs	r3, #16
 80079b8:	617b      	str	r3, [r7, #20]
 80079ba:	e001      	b.n	80079c0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80079bc:	2300      	movs	r3, #0
 80079be:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01d      	beq.n	8007a02 <osMessageGet+0xca>
 80079c6:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <osMessageGet+0xe4>)
 80079c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	e014      	b.n	8007a02 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80079d8:	f107 0314 	add.w	r3, r7, #20
 80079dc:	3304      	adds	r3, #4
 80079de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e0:	4619      	mov	r1, r3
 80079e2:	68b8      	ldr	r0, [r7, #8]
 80079e4:	f7fe f9cc 	bl	8005d80 <xQueueReceive>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d102      	bne.n	80079f4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80079ee:	2310      	movs	r3, #16
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	e006      	b.n	8007a02 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <osMessageGet+0xc6>
 80079fa:	2300      	movs	r3, #0
 80079fc:	e000      	b.n	8007a00 <osMessageGet+0xc8>
 80079fe:	2340      	movs	r3, #64	; 0x40
 8007a00:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	461c      	mov	r4, r3
 8007a06:	f107 0314 	add.w	r3, r7, #20
 8007a0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	372c      	adds	r7, #44	; 0x2c
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd90      	pop	{r4, r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	e000ed04 	.word	0xe000ed04

08007a20 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8007a24:	f7ff fb48 	bl	80070b8 <xTaskGetSchedulerState>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d001      	beq.n	8007a32 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8007a2e:	f000 fb8b 	bl	8008148 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8007a32:	bf00      	nop
 8007a34:	bd80      	pop	{r7, pc}
	...

08007a38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a40:	2300      	movs	r3, #0
 8007a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a44:	f7fe ff98 	bl	8006978 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a48:	4b5b      	ldr	r3, [pc, #364]	; (8007bb8 <pvPortMalloc+0x180>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a50:	f000 f91a 	bl	8007c88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a54:	4b59      	ldr	r3, [pc, #356]	; (8007bbc <pvPortMalloc+0x184>)
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f040 8092 	bne.w	8007b86 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01f      	beq.n	8007aa8 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007a68:	2208      	movs	r2, #8
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d016      	beq.n	8007aa8 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f023 0307 	bic.w	r3, r3, #7
 8007a80:	3308      	adds	r3, #8
 8007a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00c      	beq.n	8007aa8 <pvPortMalloc+0x70>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	b672      	cpsid	i
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	b662      	cpsie	i
 8007aa2:	617b      	str	r3, [r7, #20]
}
 8007aa4:	bf00      	nop
 8007aa6:	e7fe      	b.n	8007aa6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d06b      	beq.n	8007b86 <pvPortMalloc+0x14e>
 8007aae:	4b44      	ldr	r3, [pc, #272]	; (8007bc0 <pvPortMalloc+0x188>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d866      	bhi.n	8007b86 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ab8:	4b42      	ldr	r3, [pc, #264]	; (8007bc4 <pvPortMalloc+0x18c>)
 8007aba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007abc:	4b41      	ldr	r3, [pc, #260]	; (8007bc4 <pvPortMalloc+0x18c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ac2:	e004      	b.n	8007ace <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d903      	bls.n	8007ae0 <pvPortMalloc+0xa8>
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1f1      	bne.n	8007ac4 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ae0:	4b35      	ldr	r3, [pc, #212]	; (8007bb8 <pvPortMalloc+0x180>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d04d      	beq.n	8007b86 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2208      	movs	r2, #8
 8007af0:	4413      	add	r3, r2
 8007af2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	1ad2      	subs	r2, r2, r3
 8007b04:	2308      	movs	r3, #8
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d921      	bls.n	8007b50 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4413      	add	r3, r2
 8007b12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00c      	beq.n	8007b38 <pvPortMalloc+0x100>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	b672      	cpsid	i
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	b662      	cpsie	i
 8007b32:	613b      	str	r3, [r7, #16]
}
 8007b34:	bf00      	nop
 8007b36:	e7fe      	b.n	8007b36 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	1ad2      	subs	r2, r2, r3
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b4a:	69b8      	ldr	r0, [r7, #24]
 8007b4c:	f000 f8fe 	bl	8007d4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b50:	4b1b      	ldr	r3, [pc, #108]	; (8007bc0 <pvPortMalloc+0x188>)
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	4a19      	ldr	r2, [pc, #100]	; (8007bc0 <pvPortMalloc+0x188>)
 8007b5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b5e:	4b18      	ldr	r3, [pc, #96]	; (8007bc0 <pvPortMalloc+0x188>)
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <pvPortMalloc+0x190>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d203      	bcs.n	8007b72 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b6a:	4b15      	ldr	r3, [pc, #84]	; (8007bc0 <pvPortMalloc+0x188>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a16      	ldr	r2, [pc, #88]	; (8007bc8 <pvPortMalloc+0x190>)
 8007b70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	4b11      	ldr	r3, [pc, #68]	; (8007bbc <pvPortMalloc+0x184>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b86:	f7fe ff05 	bl	8006994 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	f003 0307 	and.w	r3, r3, #7
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00c      	beq.n	8007bae <pvPortMalloc+0x176>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	b672      	cpsid	i
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	b662      	cpsie	i
 8007ba8:	60fb      	str	r3, [r7, #12]
}
 8007baa:	bf00      	nop
 8007bac:	e7fe      	b.n	8007bac <pvPortMalloc+0x174>
	return pvReturn;
 8007bae:	69fb      	ldr	r3, [r7, #28]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3728      	adds	r7, #40	; 0x28
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	2000675c 	.word	0x2000675c
 8007bbc:	20006768 	.word	0x20006768
 8007bc0:	20006760 	.word	0x20006760
 8007bc4:	20006754 	.word	0x20006754
 8007bc8:	20006764 	.word	0x20006764

08007bcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d04c      	beq.n	8007c78 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bde:	2308      	movs	r3, #8
 8007be0:	425b      	negs	r3, r3
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	4413      	add	r3, r2
 8007be6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	4b23      	ldr	r3, [pc, #140]	; (8007c80 <vPortFree+0xb4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10c      	bne.n	8007c14 <vPortFree+0x48>
	__asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfe:	b672      	cpsid	i
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	b662      	cpsie	i
 8007c0e:	60fb      	str	r3, [r7, #12]
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00c      	beq.n	8007c36 <vPortFree+0x6a>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	b672      	cpsid	i
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	b662      	cpsie	i
 8007c30:	60bb      	str	r3, [r7, #8]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	4b11      	ldr	r3, [pc, #68]	; (8007c80 <vPortFree+0xb4>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d019      	beq.n	8007c78 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d115      	bne.n	8007c78 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	4b0b      	ldr	r3, [pc, #44]	; (8007c80 <vPortFree+0xb4>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	43db      	mvns	r3, r3
 8007c56:	401a      	ands	r2, r3
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c5c:	f7fe fe8c 	bl	8006978 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	4b07      	ldr	r3, [pc, #28]	; (8007c84 <vPortFree+0xb8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4413      	add	r3, r2
 8007c6a:	4a06      	ldr	r2, [pc, #24]	; (8007c84 <vPortFree+0xb8>)
 8007c6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c6e:	6938      	ldr	r0, [r7, #16]
 8007c70:	f000 f86c 	bl	8007d4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007c74:	f7fe fe8e 	bl	8006994 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c78:	bf00      	nop
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20006768 	.word	0x20006768
 8007c84:	20006760 	.word	0x20006760

08007c88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c8e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007c92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c94:	4b27      	ldr	r3, [pc, #156]	; (8007d34 <prvHeapInit+0xac>)
 8007c96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0307 	and.w	r3, r3, #7
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00c      	beq.n	8007cbc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3307      	adds	r3, #7
 8007ca6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f023 0307 	bic.w	r3, r3, #7
 8007cae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	4a1f      	ldr	r2, [pc, #124]	; (8007d34 <prvHeapInit+0xac>)
 8007cb8:	4413      	add	r3, r2
 8007cba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cc0:	4a1d      	ldr	r2, [pc, #116]	; (8007d38 <prvHeapInit+0xb0>)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cc6:	4b1c      	ldr	r3, [pc, #112]	; (8007d38 <prvHeapInit+0xb0>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007cd4:	2208      	movs	r2, #8
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0307 	bic.w	r3, r3, #7
 8007ce2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4a15      	ldr	r2, [pc, #84]	; (8007d3c <prvHeapInit+0xb4>)
 8007ce8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007cea:	4b14      	ldr	r3, [pc, #80]	; (8007d3c <prvHeapInit+0xb4>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cf2:	4b12      	ldr	r3, [pc, #72]	; (8007d3c <prvHeapInit+0xb4>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	1ad2      	subs	r2, r2, r3
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <prvHeapInit+0xb4>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	4a0a      	ldr	r2, [pc, #40]	; (8007d40 <prvHeapInit+0xb8>)
 8007d16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	4a09      	ldr	r2, [pc, #36]	; (8007d44 <prvHeapInit+0xbc>)
 8007d1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d20:	4b09      	ldr	r3, [pc, #36]	; (8007d48 <prvHeapInit+0xc0>)
 8007d22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d26:	601a      	str	r2, [r3, #0]
}
 8007d28:	bf00      	nop
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	20000354 	.word	0x20000354
 8007d38:	20006754 	.word	0x20006754
 8007d3c:	2000675c 	.word	0x2000675c
 8007d40:	20006764 	.word	0x20006764
 8007d44:	20006760 	.word	0x20006760
 8007d48:	20006768 	.word	0x20006768

08007d4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d54:	4b28      	ldr	r3, [pc, #160]	; (8007df8 <prvInsertBlockIntoFreeList+0xac>)
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	e002      	b.n	8007d60 <prvInsertBlockIntoFreeList+0x14>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d8f7      	bhi.n	8007d5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	4413      	add	r3, r2
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d108      	bne.n	8007d8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	441a      	add	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	441a      	add	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d118      	bne.n	8007dd4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	4b15      	ldr	r3, [pc, #84]	; (8007dfc <prvInsertBlockIntoFreeList+0xb0>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d00d      	beq.n	8007dca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	441a      	add	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	e008      	b.n	8007ddc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dca:	4b0c      	ldr	r3, [pc, #48]	; (8007dfc <prvInsertBlockIntoFreeList+0xb0>)
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	e003      	b.n	8007ddc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d002      	beq.n	8007dea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dea:	bf00      	nop
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	20006754 	.word	0x20006754
 8007dfc:	2000675c 	.word	0x2000675c

08007e00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3b04      	subs	r3, #4
 8007e10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3b04      	subs	r3, #4
 8007e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f023 0201 	bic.w	r2, r3, #1
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	3b04      	subs	r3, #4
 8007e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e30:	4a0c      	ldr	r2, [pc, #48]	; (8007e64 <pxPortInitialiseStack+0x64>)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3b14      	subs	r3, #20
 8007e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3b04      	subs	r3, #4
 8007e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f06f 0202 	mvn.w	r2, #2
 8007e4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3b20      	subs	r3, #32
 8007e54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e56:	68fb      	ldr	r3, [r7, #12]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	08007e69 	.word	0x08007e69

08007e68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e72:	4b14      	ldr	r3, [pc, #80]	; (8007ec4 <prvTaskExitError+0x5c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7a:	d00c      	beq.n	8007e96 <prvTaskExitError+0x2e>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	b672      	cpsid	i
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	b662      	cpsie	i
 8007e90:	60fb      	str	r3, [r7, #12]
}
 8007e92:	bf00      	nop
 8007e94:	e7fe      	b.n	8007e94 <prvTaskExitError+0x2c>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9a:	b672      	cpsid	i
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	b662      	cpsie	i
 8007eaa:	60bb      	str	r3, [r7, #8]
}
 8007eac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007eae:	bf00      	nop
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0fc      	beq.n	8007eb0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007eb6:	bf00      	nop
 8007eb8:	bf00      	nop
 8007eba:	3714      	adds	r7, #20
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	20000028 	.word	0x20000028
	...

08007ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ed0:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <pxCurrentTCBConst2>)
 8007ed2:	6819      	ldr	r1, [r3, #0]
 8007ed4:	6808      	ldr	r0, [r1, #0]
 8007ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eda:	f380 8809 	msr	PSP, r0
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f04f 0000 	mov.w	r0, #0
 8007ee6:	f380 8811 	msr	BASEPRI, r0
 8007eea:	4770      	bx	lr
 8007eec:	f3af 8000 	nop.w

08007ef0 <pxCurrentTCBConst2>:
 8007ef0:	2000023c 	.word	0x2000023c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop

08007ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ef8:	4808      	ldr	r0, [pc, #32]	; (8007f1c <prvPortStartFirstTask+0x24>)
 8007efa:	6800      	ldr	r0, [r0, #0]
 8007efc:	6800      	ldr	r0, [r0, #0]
 8007efe:	f380 8808 	msr	MSP, r0
 8007f02:	f04f 0000 	mov.w	r0, #0
 8007f06:	f380 8814 	msr	CONTROL, r0
 8007f0a:	b662      	cpsie	i
 8007f0c:	b661      	cpsie	f
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	df00      	svc	0
 8007f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f1a:	bf00      	nop
 8007f1c:	e000ed08 	.word	0xe000ed08

08007f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f26:	4b37      	ldr	r3, [pc, #220]	; (8008004 <xPortStartScheduler+0xe4>)
 8007f28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	22ff      	movs	r2, #255	; 0xff
 8007f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f40:	78fb      	ldrb	r3, [r7, #3]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	4b2f      	ldr	r3, [pc, #188]	; (8008008 <xPortStartScheduler+0xe8>)
 8007f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f4e:	4b2f      	ldr	r3, [pc, #188]	; (800800c <xPortStartScheduler+0xec>)
 8007f50:	2207      	movs	r2, #7
 8007f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f54:	e009      	b.n	8007f6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007f56:	4b2d      	ldr	r3, [pc, #180]	; (800800c <xPortStartScheduler+0xec>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	4a2b      	ldr	r2, [pc, #172]	; (800800c <xPortStartScheduler+0xec>)
 8007f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f6a:	78fb      	ldrb	r3, [r7, #3]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f72:	2b80      	cmp	r3, #128	; 0x80
 8007f74:	d0ef      	beq.n	8007f56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f76:	4b25      	ldr	r3, [pc, #148]	; (800800c <xPortStartScheduler+0xec>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f1c3 0307 	rsb	r3, r3, #7
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d00c      	beq.n	8007f9c <xPortStartScheduler+0x7c>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	b672      	cpsid	i
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	b662      	cpsie	i
 8007f96:	60bb      	str	r3, [r7, #8]
}
 8007f98:	bf00      	nop
 8007f9a:	e7fe      	b.n	8007f9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f9c:	4b1b      	ldr	r3, [pc, #108]	; (800800c <xPortStartScheduler+0xec>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	4a1a      	ldr	r2, [pc, #104]	; (800800c <xPortStartScheduler+0xec>)
 8007fa4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fa6:	4b19      	ldr	r3, [pc, #100]	; (800800c <xPortStartScheduler+0xec>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fae:	4a17      	ldr	r2, [pc, #92]	; (800800c <xPortStartScheduler+0xec>)
 8007fb0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fba:	4b15      	ldr	r3, [pc, #84]	; (8008010 <xPortStartScheduler+0xf0>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a14      	ldr	r2, [pc, #80]	; (8008010 <xPortStartScheduler+0xf0>)
 8007fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fc4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fc6:	4b12      	ldr	r3, [pc, #72]	; (8008010 <xPortStartScheduler+0xf0>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a11      	ldr	r2, [pc, #68]	; (8008010 <xPortStartScheduler+0xf0>)
 8007fcc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007fd0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fd2:	f000 f8dd 	bl	8008190 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fd6:	4b0f      	ldr	r3, [pc, #60]	; (8008014 <xPortStartScheduler+0xf4>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fdc:	f000 f8fc 	bl	80081d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fe0:	4b0d      	ldr	r3, [pc, #52]	; (8008018 <xPortStartScheduler+0xf8>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a0c      	ldr	r2, [pc, #48]	; (8008018 <xPortStartScheduler+0xf8>)
 8007fe6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007fea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fec:	f7ff ff84 	bl	8007ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ff0:	f7fe fe4a 	bl	8006c88 <vTaskSwitchContext>
	prvTaskExitError();
 8007ff4:	f7ff ff38 	bl	8007e68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	e000e400 	.word	0xe000e400
 8008008:	2000676c 	.word	0x2000676c
 800800c:	20006770 	.word	0x20006770
 8008010:	e000ed20 	.word	0xe000ed20
 8008014:	20000028 	.word	0x20000028
 8008018:	e000ef34 	.word	0xe000ef34

0800801c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	b672      	cpsid	i
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	b662      	cpsie	i
 8008036:	607b      	str	r3, [r7, #4]
}
 8008038:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800803a:	4b10      	ldr	r3, [pc, #64]	; (800807c <vPortEnterCritical+0x60>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3301      	adds	r3, #1
 8008040:	4a0e      	ldr	r2, [pc, #56]	; (800807c <vPortEnterCritical+0x60>)
 8008042:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008044:	4b0d      	ldr	r3, [pc, #52]	; (800807c <vPortEnterCritical+0x60>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d111      	bne.n	8008070 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800804c:	4b0c      	ldr	r3, [pc, #48]	; (8008080 <vPortEnterCritical+0x64>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00c      	beq.n	8008070 <vPortEnterCritical+0x54>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	b672      	cpsid	i
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	b662      	cpsie	i
 800806a:	603b      	str	r3, [r7, #0]
}
 800806c:	bf00      	nop
 800806e:	e7fe      	b.n	800806e <vPortEnterCritical+0x52>
	}
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	20000028 	.word	0x20000028
 8008080:	e000ed04 	.word	0xe000ed04

08008084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800808a:	4b13      	ldr	r3, [pc, #76]	; (80080d8 <vPortExitCritical+0x54>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10c      	bne.n	80080ac <vPortExitCritical+0x28>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008096:	b672      	cpsid	i
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	b662      	cpsie	i
 80080a6:	607b      	str	r3, [r7, #4]
}
 80080a8:	bf00      	nop
 80080aa:	e7fe      	b.n	80080aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80080ac:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <vPortExitCritical+0x54>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	4a09      	ldr	r2, [pc, #36]	; (80080d8 <vPortExitCritical+0x54>)
 80080b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080b6:	4b08      	ldr	r3, [pc, #32]	; (80080d8 <vPortExitCritical+0x54>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d105      	bne.n	80080ca <vPortExitCritical+0x46>
 80080be:	2300      	movs	r3, #0
 80080c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	f383 8811 	msr	BASEPRI, r3
}
 80080c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	20000028 	.word	0x20000028
 80080dc:	00000000 	.word	0x00000000

080080e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080e0:	f3ef 8009 	mrs	r0, PSP
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	4b15      	ldr	r3, [pc, #84]	; (8008140 <pxCurrentTCBConst>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	f01e 0f10 	tst.w	lr, #16
 80080f0:	bf08      	it	eq
 80080f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fa:	6010      	str	r0, [r2, #0]
 80080fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008104:	b672      	cpsid	i
 8008106:	f380 8811 	msr	BASEPRI, r0
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	b662      	cpsie	i
 8008114:	f7fe fdb8 	bl	8006c88 <vTaskSwitchContext>
 8008118:	f04f 0000 	mov.w	r0, #0
 800811c:	f380 8811 	msr	BASEPRI, r0
 8008120:	bc09      	pop	{r0, r3}
 8008122:	6819      	ldr	r1, [r3, #0]
 8008124:	6808      	ldr	r0, [r1, #0]
 8008126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812a:	f01e 0f10 	tst.w	lr, #16
 800812e:	bf08      	it	eq
 8008130:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008134:	f380 8809 	msr	PSP, r0
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop

08008140 <pxCurrentTCBConst>:
 8008140:	2000023c 	.word	0x2000023c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop

08008148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	b672      	cpsid	i
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	b662      	cpsie	i
 8008162:	607b      	str	r3, [r7, #4]
}
 8008164:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008166:	f7fe fcd5 	bl	8006b14 <xTaskIncrementTick>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008170:	4b06      	ldr	r3, [pc, #24]	; (800818c <xPortSysTickHandler+0x44>)
 8008172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	2300      	movs	r3, #0
 800817a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	f383 8811 	msr	BASEPRI, r3
}
 8008182:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008184:	bf00      	nop
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	e000ed04 	.word	0xe000ed04

08008190 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008190:	b480      	push	{r7}
 8008192:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008194:	4b0b      	ldr	r3, [pc, #44]	; (80081c4 <vPortSetupTimerInterrupt+0x34>)
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800819a:	4b0b      	ldr	r3, [pc, #44]	; (80081c8 <vPortSetupTimerInterrupt+0x38>)
 800819c:	2200      	movs	r2, #0
 800819e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081a0:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <vPortSetupTimerInterrupt+0x3c>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a0a      	ldr	r2, [pc, #40]	; (80081d0 <vPortSetupTimerInterrupt+0x40>)
 80081a6:	fba2 2303 	umull	r2, r3, r2, r3
 80081aa:	099b      	lsrs	r3, r3, #6
 80081ac:	4a09      	ldr	r2, [pc, #36]	; (80081d4 <vPortSetupTimerInterrupt+0x44>)
 80081ae:	3b01      	subs	r3, #1
 80081b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081b2:	4b04      	ldr	r3, [pc, #16]	; (80081c4 <vPortSetupTimerInterrupt+0x34>)
 80081b4:	2207      	movs	r2, #7
 80081b6:	601a      	str	r2, [r3, #0]
}
 80081b8:	bf00      	nop
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	e000e010 	.word	0xe000e010
 80081c8:	e000e018 	.word	0xe000e018
 80081cc:	2000001c 	.word	0x2000001c
 80081d0:	10624dd3 	.word	0x10624dd3
 80081d4:	e000e014 	.word	0xe000e014

080081d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081e8 <vPortEnableVFP+0x10>
 80081dc:	6801      	ldr	r1, [r0, #0]
 80081de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081e2:	6001      	str	r1, [r0, #0]
 80081e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081e6:	bf00      	nop
 80081e8:	e000ed88 	.word	0xe000ed88

080081ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081f2:	f3ef 8305 	mrs	r3, IPSR
 80081f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b0f      	cmp	r3, #15
 80081fc:	d916      	bls.n	800822c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081fe:	4a19      	ldr	r2, [pc, #100]	; (8008264 <vPortValidateInterruptPriority+0x78>)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4413      	add	r3, r2
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008208:	4b17      	ldr	r3, [pc, #92]	; (8008268 <vPortValidateInterruptPriority+0x7c>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	7afa      	ldrb	r2, [r7, #11]
 800820e:	429a      	cmp	r2, r3
 8008210:	d20c      	bcs.n	800822c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	b672      	cpsid	i
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	b662      	cpsie	i
 8008226:	607b      	str	r3, [r7, #4]
}
 8008228:	bf00      	nop
 800822a:	e7fe      	b.n	800822a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800822c:	4b0f      	ldr	r3, [pc, #60]	; (800826c <vPortValidateInterruptPriority+0x80>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008234:	4b0e      	ldr	r3, [pc, #56]	; (8008270 <vPortValidateInterruptPriority+0x84>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	429a      	cmp	r2, r3
 800823a:	d90c      	bls.n	8008256 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	b672      	cpsid	i
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	b662      	cpsie	i
 8008250:	603b      	str	r3, [r7, #0]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <vPortValidateInterruptPriority+0x68>
	}
 8008256:	bf00      	nop
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	e000e3f0 	.word	0xe000e3f0
 8008268:	2000676c 	.word	0x2000676c
 800826c:	e000ed0c 	.word	0xe000ed0c
 8008270:	20006770 	.word	0x20006770

08008274 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800827e:	f00b fd75 	bl	8013d6c <sys_timeouts_sleeptime>
 8008282:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828a:	d10b      	bne.n	80082a4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800828c:	4813      	ldr	r0, [pc, #76]	; (80082dc <tcpip_timeouts_mbox_fetch+0x68>)
 800828e:	f00c fbf6 	bl	8014a7e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8008292:	2200      	movs	r2, #0
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f00c fb6a 	bl	8014970 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800829c:	480f      	ldr	r0, [pc, #60]	; (80082dc <tcpip_timeouts_mbox_fetch+0x68>)
 800829e:	f00c fbdf 	bl	8014a60 <sys_mutex_lock>
    return;
 80082a2:	e018      	b.n	80082d6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d102      	bne.n	80082b0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80082aa:	f00b fd25 	bl	8013cf8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80082ae:	e7e6      	b.n	800827e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80082b0:	480a      	ldr	r0, [pc, #40]	; (80082dc <tcpip_timeouts_mbox_fetch+0x68>)
 80082b2:	f00c fbe4 	bl	8014a7e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f00c fb58 	bl	8014970 <sys_arch_mbox_fetch>
 80082c0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80082c2:	4806      	ldr	r0, [pc, #24]	; (80082dc <tcpip_timeouts_mbox_fetch+0x68>)
 80082c4:	f00c fbcc 	bl	8014a60 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ce:	d102      	bne.n	80082d6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80082d0:	f00b fd12 	bl	8013cf8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80082d4:	e7d3      	b.n	800827e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	20006a5c 	.word	0x20006a5c

080082e0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80082e8:	4810      	ldr	r0, [pc, #64]	; (800832c <tcpip_thread+0x4c>)
 80082ea:	f00c fbb9 	bl	8014a60 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80082ee:	4b10      	ldr	r3, [pc, #64]	; (8008330 <tcpip_thread+0x50>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d005      	beq.n	8008302 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80082f6:	4b0e      	ldr	r3, [pc, #56]	; (8008330 <tcpip_thread+0x50>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a0e      	ldr	r2, [pc, #56]	; (8008334 <tcpip_thread+0x54>)
 80082fc:	6812      	ldr	r2, [r2, #0]
 80082fe:	4610      	mov	r0, r2
 8008300:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008302:	f107 030c 	add.w	r3, r7, #12
 8008306:	4619      	mov	r1, r3
 8008308:	480b      	ldr	r0, [pc, #44]	; (8008338 <tcpip_thread+0x58>)
 800830a:	f7ff ffb3 	bl	8008274 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d106      	bne.n	8008322 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008314:	4b09      	ldr	r3, [pc, #36]	; (800833c <tcpip_thread+0x5c>)
 8008316:	2291      	movs	r2, #145	; 0x91
 8008318:	4909      	ldr	r1, [pc, #36]	; (8008340 <tcpip_thread+0x60>)
 800831a:	480a      	ldr	r0, [pc, #40]	; (8008344 <tcpip_thread+0x64>)
 800831c:	f00d f988 	bl	8015630 <iprintf>
      continue;
 8008320:	e003      	b.n	800832a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4618      	mov	r0, r3
 8008326:	f000 f80f 	bl	8008348 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800832a:	e7ea      	b.n	8008302 <tcpip_thread+0x22>
 800832c:	20006a5c 	.word	0x20006a5c
 8008330:	20006774 	.word	0x20006774
 8008334:	20006778 	.word	0x20006778
 8008338:	2000677c 	.word	0x2000677c
 800833c:	0801921c 	.word	0x0801921c
 8008340:	080192ac 	.word	0x080192ac
 8008344:	080192cc 	.word	0x080192cc

08008348 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	2b02      	cmp	r3, #2
 8008356:	d026      	beq.n	80083a6 <tcpip_thread_handle_msg+0x5e>
 8008358:	2b02      	cmp	r3, #2
 800835a:	dc2b      	bgt.n	80083b4 <tcpip_thread_handle_msg+0x6c>
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <tcpip_thread_handle_msg+0x1e>
 8008360:	2b01      	cmp	r3, #1
 8008362:	d015      	beq.n	8008390 <tcpip_thread_handle_msg+0x48>
 8008364:	e026      	b.n	80083b4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	6850      	ldr	r0, [r2, #4]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6892      	ldr	r2, [r2, #8]
 8008372:	4611      	mov	r1, r2
 8008374:	4798      	blx	r3
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d004      	beq.n	8008386 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	4618      	mov	r0, r3
 8008382:	f005 fce1 	bl	800dd48 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	2009      	movs	r0, #9
 800838a:	f004 ff01 	bl	800d190 <memp_free>
      break;
 800838e:	e018      	b.n	80083c2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	6892      	ldr	r2, [r2, #8]
 8008398:	4610      	mov	r0, r2
 800839a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	2008      	movs	r0, #8
 80083a0:	f004 fef6 	bl	800d190 <memp_free>
      break;
 80083a4:	e00d      	b.n	80083c2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	6892      	ldr	r2, [r2, #8]
 80083ae:	4610      	mov	r0, r2
 80083b0:	4798      	blx	r3
      break;
 80083b2:	e006      	b.n	80083c2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80083b4:	4b05      	ldr	r3, [pc, #20]	; (80083cc <tcpip_thread_handle_msg+0x84>)
 80083b6:	22cf      	movs	r2, #207	; 0xcf
 80083b8:	4905      	ldr	r1, [pc, #20]	; (80083d0 <tcpip_thread_handle_msg+0x88>)
 80083ba:	4806      	ldr	r0, [pc, #24]	; (80083d4 <tcpip_thread_handle_msg+0x8c>)
 80083bc:	f00d f938 	bl	8015630 <iprintf>
      break;
 80083c0:	bf00      	nop
  }
}
 80083c2:	bf00      	nop
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	0801921c 	.word	0x0801921c
 80083d0:	080192ac 	.word	0x080192ac
 80083d4:	080192cc 	.word	0x080192cc

080083d8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80083e4:	481a      	ldr	r0, [pc, #104]	; (8008450 <tcpip_inpkt+0x78>)
 80083e6:	f00c fb02 	bl	80149ee <sys_mbox_valid>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d105      	bne.n	80083fc <tcpip_inpkt+0x24>
 80083f0:	4b18      	ldr	r3, [pc, #96]	; (8008454 <tcpip_inpkt+0x7c>)
 80083f2:	22fc      	movs	r2, #252	; 0xfc
 80083f4:	4918      	ldr	r1, [pc, #96]	; (8008458 <tcpip_inpkt+0x80>)
 80083f6:	4819      	ldr	r0, [pc, #100]	; (800845c <tcpip_inpkt+0x84>)
 80083f8:	f00d f91a 	bl	8015630 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80083fc:	2009      	movs	r0, #9
 80083fe:	f004 fe75 	bl	800d0ec <memp_malloc>
 8008402:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d102      	bne.n	8008410 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800840a:	f04f 33ff 	mov.w	r3, #4294967295
 800840e:	e01a      	b.n	8008446 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2200      	movs	r2, #0
 8008414:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008428:	6979      	ldr	r1, [r7, #20]
 800842a:	4809      	ldr	r0, [pc, #36]	; (8008450 <tcpip_inpkt+0x78>)
 800842c:	f00c fa86 	bl	801493c <sys_mbox_trypost>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d006      	beq.n	8008444 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008436:	6979      	ldr	r1, [r7, #20]
 8008438:	2009      	movs	r0, #9
 800843a:	f004 fea9 	bl	800d190 <memp_free>
    return ERR_MEM;
 800843e:	f04f 33ff 	mov.w	r3, #4294967295
 8008442:	e000      	b.n	8008446 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8008444:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008446:	4618      	mov	r0, r3
 8008448:	3718      	adds	r7, #24
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	2000677c 	.word	0x2000677c
 8008454:	0801921c 	.word	0x0801921c
 8008458:	080192f4 	.word	0x080192f4
 800845c:	080192cc 	.word	0x080192cc

08008460 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008470:	f003 0318 	and.w	r3, r3, #24
 8008474:	2b00      	cmp	r3, #0
 8008476:	d006      	beq.n	8008486 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008478:	4a08      	ldr	r2, [pc, #32]	; (800849c <tcpip_input+0x3c>)
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7ff ffab 	bl	80083d8 <tcpip_inpkt>
 8008482:	4603      	mov	r3, r0
 8008484:	e005      	b.n	8008492 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8008486:	4a06      	ldr	r2, [pc, #24]	; (80084a0 <tcpip_input+0x40>)
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7ff ffa4 	bl	80083d8 <tcpip_inpkt>
 8008490:	4603      	mov	r3, r0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	08014755 	.word	0x08014755
 80084a0:	0800b505 	.word	0x0800b505

080084a4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  lwip_init();
 80084ae:	f004 f995 	bl	800c7dc <lwip_init>

  tcpip_init_done = initfunc;
 80084b2:	4a17      	ldr	r2, [pc, #92]	; (8008510 <tcpip_init+0x6c>)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80084b8:	4a16      	ldr	r2, [pc, #88]	; (8008514 <tcpip_init+0x70>)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80084be:	2106      	movs	r1, #6
 80084c0:	4815      	ldr	r0, [pc, #84]	; (8008518 <tcpip_init+0x74>)
 80084c2:	f00c fa1d 	bl	8014900 <sys_mbox_new>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d006      	beq.n	80084da <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80084cc:	4b13      	ldr	r3, [pc, #76]	; (800851c <tcpip_init+0x78>)
 80084ce:	f240 2261 	movw	r2, #609	; 0x261
 80084d2:	4913      	ldr	r1, [pc, #76]	; (8008520 <tcpip_init+0x7c>)
 80084d4:	4813      	ldr	r0, [pc, #76]	; (8008524 <tcpip_init+0x80>)
 80084d6:	f00d f8ab 	bl	8015630 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80084da:	4813      	ldr	r0, [pc, #76]	; (8008528 <tcpip_init+0x84>)
 80084dc:	f00c faa6 	bl	8014a2c <sys_mutex_new>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d006      	beq.n	80084f4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80084e6:	4b0d      	ldr	r3, [pc, #52]	; (800851c <tcpip_init+0x78>)
 80084e8:	f240 2265 	movw	r2, #613	; 0x265
 80084ec:	490f      	ldr	r1, [pc, #60]	; (800852c <tcpip_init+0x88>)
 80084ee:	480d      	ldr	r0, [pc, #52]	; (8008524 <tcpip_init+0x80>)
 80084f0:	f00d f89e 	bl	8015630 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80084f4:	2302      	movs	r3, #2
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084fc:	2200      	movs	r2, #0
 80084fe:	490c      	ldr	r1, [pc, #48]	; (8008530 <tcpip_init+0x8c>)
 8008500:	480c      	ldr	r0, [pc, #48]	; (8008534 <tcpip_init+0x90>)
 8008502:	f00c fac9 	bl	8014a98 <sys_thread_new>
}
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20006774 	.word	0x20006774
 8008514:	20006778 	.word	0x20006778
 8008518:	2000677c 	.word	0x2000677c
 800851c:	0801921c 	.word	0x0801921c
 8008520:	08019304 	.word	0x08019304
 8008524:	080192cc 	.word	0x080192cc
 8008528:	20006a5c 	.word	0x20006a5c
 800852c:	08019328 	.word	0x08019328
 8008530:	080082e1 	.word	0x080082e1
 8008534:	0801934c 	.word	0x0801934c

08008538 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800853c:	4b20      	ldr	r3, [pc, #128]	; (80085c0 <dhcp_inc_pcb_refcount+0x88>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d133      	bne.n	80085ac <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8008544:	4b1f      	ldr	r3, [pc, #124]	; (80085c4 <dhcp_inc_pcb_refcount+0x8c>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d005      	beq.n	8008558 <dhcp_inc_pcb_refcount+0x20>
 800854c:	4b1e      	ldr	r3, [pc, #120]	; (80085c8 <dhcp_inc_pcb_refcount+0x90>)
 800854e:	22e5      	movs	r2, #229	; 0xe5
 8008550:	491e      	ldr	r1, [pc, #120]	; (80085cc <dhcp_inc_pcb_refcount+0x94>)
 8008552:	481f      	ldr	r0, [pc, #124]	; (80085d0 <dhcp_inc_pcb_refcount+0x98>)
 8008554:	f00d f86c 	bl	8015630 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8008558:	f00c f8b4 	bl	80146c4 <udp_new>
 800855c:	4603      	mov	r3, r0
 800855e:	4a19      	ldr	r2, [pc, #100]	; (80085c4 <dhcp_inc_pcb_refcount+0x8c>)
 8008560:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8008562:	4b18      	ldr	r3, [pc, #96]	; (80085c4 <dhcp_inc_pcb_refcount+0x8c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d102      	bne.n	8008570 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800856a:	f04f 33ff 	mov.w	r3, #4294967295
 800856e:	e024      	b.n	80085ba <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8008570:	4b14      	ldr	r3, [pc, #80]	; (80085c4 <dhcp_inc_pcb_refcount+0x8c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	7a5a      	ldrb	r2, [r3, #9]
 8008576:	4b13      	ldr	r3, [pc, #76]	; (80085c4 <dhcp_inc_pcb_refcount+0x8c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f042 0220 	orr.w	r2, r2, #32
 800857e:	b2d2      	uxtb	r2, r2
 8008580:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8008582:	4b10      	ldr	r3, [pc, #64]	; (80085c4 <dhcp_inc_pcb_refcount+0x8c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2244      	movs	r2, #68	; 0x44
 8008588:	4912      	ldr	r1, [pc, #72]	; (80085d4 <dhcp_inc_pcb_refcount+0x9c>)
 800858a:	4618      	mov	r0, r3
 800858c:	f00b ff42 	bl	8014414 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8008590:	4b0c      	ldr	r3, [pc, #48]	; (80085c4 <dhcp_inc_pcb_refcount+0x8c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2243      	movs	r2, #67	; 0x43
 8008596:	490f      	ldr	r1, [pc, #60]	; (80085d4 <dhcp_inc_pcb_refcount+0x9c>)
 8008598:	4618      	mov	r0, r3
 800859a:	f00b ffc3 	bl	8014524 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800859e:	4b09      	ldr	r3, [pc, #36]	; (80085c4 <dhcp_inc_pcb_refcount+0x8c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2200      	movs	r2, #0
 80085a4:	490c      	ldr	r1, [pc, #48]	; (80085d8 <dhcp_inc_pcb_refcount+0xa0>)
 80085a6:	4618      	mov	r0, r3
 80085a8:	f00c f82a 	bl	8014600 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80085ac:	4b04      	ldr	r3, [pc, #16]	; (80085c0 <dhcp_inc_pcb_refcount+0x88>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	3301      	adds	r3, #1
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	4b02      	ldr	r3, [pc, #8]	; (80085c0 <dhcp_inc_pcb_refcount+0x88>)
 80085b6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20006784 	.word	0x20006784
 80085c4:	20006780 	.word	0x20006780
 80085c8:	08019354 	.word	0x08019354
 80085cc:	080193e8 	.word	0x080193e8
 80085d0:	08019410 	.word	0x08019410
 80085d4:	08019c70 	.word	0x08019c70
 80085d8:	08009e11 	.word	0x08009e11

080085dc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80085e0:	4b0e      	ldr	r3, [pc, #56]	; (800861c <dhcp_dec_pcb_refcount+0x40>)
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d105      	bne.n	80085f4 <dhcp_dec_pcb_refcount+0x18>
 80085e8:	4b0d      	ldr	r3, [pc, #52]	; (8008620 <dhcp_dec_pcb_refcount+0x44>)
 80085ea:	22ff      	movs	r2, #255	; 0xff
 80085ec:	490d      	ldr	r1, [pc, #52]	; (8008624 <dhcp_dec_pcb_refcount+0x48>)
 80085ee:	480e      	ldr	r0, [pc, #56]	; (8008628 <dhcp_dec_pcb_refcount+0x4c>)
 80085f0:	f00d f81e 	bl	8015630 <iprintf>
  dhcp_pcb_refcount--;
 80085f4:	4b09      	ldr	r3, [pc, #36]	; (800861c <dhcp_dec_pcb_refcount+0x40>)
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	4b07      	ldr	r3, [pc, #28]	; (800861c <dhcp_dec_pcb_refcount+0x40>)
 80085fe:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8008600:	4b06      	ldr	r3, [pc, #24]	; (800861c <dhcp_dec_pcb_refcount+0x40>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d107      	bne.n	8008618 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8008608:	4b08      	ldr	r3, [pc, #32]	; (800862c <dhcp_dec_pcb_refcount+0x50>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4618      	mov	r0, r3
 800860e:	f00c f817 	bl	8014640 <udp_remove>
    dhcp_pcb = NULL;
 8008612:	4b06      	ldr	r3, [pc, #24]	; (800862c <dhcp_dec_pcb_refcount+0x50>)
 8008614:	2200      	movs	r2, #0
 8008616:	601a      	str	r2, [r3, #0]
  }
}
 8008618:	bf00      	nop
 800861a:	bd80      	pop	{r7, pc}
 800861c:	20006784 	.word	0x20006784
 8008620:	08019354 	.word	0x08019354
 8008624:	08019438 	.word	0x08019438
 8008628:	08019410 	.word	0x08019410
 800862c:	20006780 	.word	0x20006780

08008630 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800863e:	210c      	movs	r1, #12
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f001 f826 	bl	8009692 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8008646:	4b06      	ldr	r3, [pc, #24]	; (8008660 <dhcp_handle_nak+0x30>)
 8008648:	4a05      	ldr	r2, [pc, #20]	; (8008660 <dhcp_handle_nak+0x30>)
 800864a:	4905      	ldr	r1, [pc, #20]	; (8008660 <dhcp_handle_nak+0x30>)
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f004 ff41 	bl	800d4d4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fc0e 	bl	8008e74 <dhcp_discover>
}
 8008658:	bf00      	nop
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	08019c70 	.word	0x08019c70

08008664 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8008672:	2108      	movs	r1, #8
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f001 f80c 	bl	8009692 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	331c      	adds	r3, #28
 800867e:	2200      	movs	r2, #0
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f002 fb0e 	bl	800aca4 <etharp_query>
 8008688:	4603      	mov	r3, r0
 800868a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	799b      	ldrb	r3, [r3, #6]
 8008690:	2bff      	cmp	r3, #255	; 0xff
 8008692:	d005      	beq.n	80086a0 <dhcp_check+0x3c>
    dhcp->tries++;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	799b      	ldrb	r3, [r3, #6]
 8008698:	3301      	adds	r3, #1
 800869a:	b2da      	uxtb	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80086a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80086a4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80086a6:	893b      	ldrh	r3, [r7, #8]
 80086a8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80086ac:	4a06      	ldr	r2, [pc, #24]	; (80086c8 <dhcp_check+0x64>)
 80086ae:	fb82 1203 	smull	r1, r2, r2, r3
 80086b2:	1152      	asrs	r2, r2, #5
 80086b4:	17db      	asrs	r3, r3, #31
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80086be:	bf00      	nop
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	10624dd3 	.word	0x10624dd3

080086cc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086da:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80086dc:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <dhcp_handle_offer+0x44>)
 80086de:	789b      	ldrb	r3, [r3, #2]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d011      	beq.n	8008708 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80086ea:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <dhcp_handle_offer+0x48>)
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f003 ffb1 	bl	800c656 <lwip_htonl>
 80086f4:	4602      	mov	r2, r0
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	691a      	ldr	r2, [r3, #16]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f808 	bl	8008718 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8008708:	bf00      	nop
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20006a60 	.word	0x20006a60
 8008714:	20006a68 	.word	0x20006a68

08008718 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8008718:	b5b0      	push	{r4, r5, r7, lr}
 800871a:	b08a      	sub	sp, #40	; 0x28
 800871c:	af02      	add	r7, sp, #8
 800871e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d109      	bne.n	800873a <dhcp_select+0x22>
 8008726:	4b71      	ldr	r3, [pc, #452]	; (80088ec <dhcp_select+0x1d4>)
 8008728:	f240 1277 	movw	r2, #375	; 0x177
 800872c:	4970      	ldr	r1, [pc, #448]	; (80088f0 <dhcp_select+0x1d8>)
 800872e:	4871      	ldr	r0, [pc, #452]	; (80088f4 <dhcp_select+0x1dc>)
 8008730:	f00c ff7e 	bl	8015630 <iprintf>
 8008734:	f06f 030f 	mvn.w	r3, #15
 8008738:	e0d3      	b.n	80088e2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d109      	bne.n	800875a <dhcp_select+0x42>
 8008746:	4b69      	ldr	r3, [pc, #420]	; (80088ec <dhcp_select+0x1d4>)
 8008748:	f240 1279 	movw	r2, #377	; 0x179
 800874c:	496a      	ldr	r1, [pc, #424]	; (80088f8 <dhcp_select+0x1e0>)
 800874e:	4869      	ldr	r0, [pc, #420]	; (80088f4 <dhcp_select+0x1dc>)
 8008750:	f00c ff6e 	bl	8015630 <iprintf>
 8008754:	f06f 0305 	mvn.w	r3, #5
 8008758:	e0c3      	b.n	80088e2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800875a:	2101      	movs	r1, #1
 800875c:	69b8      	ldr	r0, [r7, #24]
 800875e:	f000 ff98 	bl	8009692 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008762:	f107 030c 	add.w	r3, r7, #12
 8008766:	2203      	movs	r2, #3
 8008768:	69b9      	ldr	r1, [r7, #24]
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f001 fc1e 	bl	8009fac <dhcp_create_msg>
 8008770:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2b00      	cmp	r3, #0
 8008776:	f000 8085 	beq.w	8008884 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008780:	89b8      	ldrh	r0, [r7, #12]
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008788:	2302      	movs	r3, #2
 800878a:	2239      	movs	r2, #57	; 0x39
 800878c:	f000 ff9c 	bl	80096c8 <dhcp_option>
 8008790:	4603      	mov	r3, r0
 8008792:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008794:	89b8      	ldrh	r0, [r7, #12]
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a0:	461a      	mov	r2, r3
 80087a2:	f000 ffeb 	bl	800977c <dhcp_option_short>
 80087a6:	4603      	mov	r3, r0
 80087a8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80087aa:	89b8      	ldrh	r0, [r7, #12]
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80087b2:	2304      	movs	r3, #4
 80087b4:	2232      	movs	r2, #50	; 0x32
 80087b6:	f000 ff87 	bl	80096c8 <dhcp_option>
 80087ba:	4603      	mov	r3, r0
 80087bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80087be:	89bc      	ldrh	r4, [r7, #12]
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f003 ff43 	bl	800c656 <lwip_htonl>
 80087d0:	4603      	mov	r3, r0
 80087d2:	461a      	mov	r2, r3
 80087d4:	4629      	mov	r1, r5
 80087d6:	4620      	mov	r0, r4
 80087d8:	f001 f802 	bl	80097e0 <dhcp_option_long>
 80087dc:	4603      	mov	r3, r0
 80087de:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80087e0:	89b8      	ldrh	r0, [r7, #12]
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80087e8:	2304      	movs	r3, #4
 80087ea:	2236      	movs	r2, #54	; 0x36
 80087ec:	f000 ff6c 	bl	80096c8 <dhcp_option>
 80087f0:	4603      	mov	r3, r0
 80087f2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80087f4:	89bc      	ldrh	r4, [r7, #12]
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	4618      	mov	r0, r3
 8008802:	f003 ff28 	bl	800c656 <lwip_htonl>
 8008806:	4603      	mov	r3, r0
 8008808:	461a      	mov	r2, r3
 800880a:	4629      	mov	r1, r5
 800880c:	4620      	mov	r0, r4
 800880e:	f000 ffe7 	bl	80097e0 <dhcp_option_long>
 8008812:	4603      	mov	r3, r0
 8008814:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008816:	89b8      	ldrh	r0, [r7, #12]
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800881e:	2303      	movs	r3, #3
 8008820:	2237      	movs	r2, #55	; 0x37
 8008822:	f000 ff51 	bl	80096c8 <dhcp_option>
 8008826:	4603      	mov	r3, r0
 8008828:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800882a:	2300      	movs	r3, #0
 800882c:	77bb      	strb	r3, [r7, #30]
 800882e:	e00e      	b.n	800884e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008830:	89b8      	ldrh	r0, [r7, #12]
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008838:	7fbb      	ldrb	r3, [r7, #30]
 800883a:	4a30      	ldr	r2, [pc, #192]	; (80088fc <dhcp_select+0x1e4>)
 800883c:	5cd3      	ldrb	r3, [r2, r3]
 800883e:	461a      	mov	r2, r3
 8008840:	f000 ff76 	bl	8009730 <dhcp_option_byte>
 8008844:	4603      	mov	r3, r0
 8008846:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008848:	7fbb      	ldrb	r3, [r7, #30]
 800884a:	3301      	adds	r3, #1
 800884c:	77bb      	strb	r3, [r7, #30]
 800884e:	7fbb      	ldrb	r3, [r7, #30]
 8008850:	2b02      	cmp	r3, #2
 8008852:	d9ed      	bls.n	8008830 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008854:	89b8      	ldrh	r0, [r7, #12]
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	33f0      	adds	r3, #240	; 0xf0
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	4619      	mov	r1, r3
 800885e:	f001 fc7b 	bl	800a158 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8008862:	4b27      	ldr	r3, [pc, #156]	; (8008900 <dhcp_select+0x1e8>)
 8008864:	6818      	ldr	r0, [r3, #0]
 8008866:	4b27      	ldr	r3, [pc, #156]	; (8008904 <dhcp_select+0x1ec>)
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	2343      	movs	r3, #67	; 0x43
 8008870:	4a25      	ldr	r2, [pc, #148]	; (8008908 <dhcp_select+0x1f0>)
 8008872:	6979      	ldr	r1, [r7, #20]
 8008874:	f00b fce8 	bl	8014248 <udp_sendto_if_src>
 8008878:	4603      	mov	r3, r0
 800887a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800887c:	6978      	ldr	r0, [r7, #20]
 800887e:	f005 fa63 	bl	800dd48 <pbuf_free>
 8008882:	e001      	b.n	8008888 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8008884:	23ff      	movs	r3, #255	; 0xff
 8008886:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	799b      	ldrb	r3, [r3, #6]
 800888c:	2bff      	cmp	r3, #255	; 0xff
 800888e:	d005      	beq.n	800889c <dhcp_select+0x184>
    dhcp->tries++;
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	799b      	ldrb	r3, [r3, #6]
 8008894:	3301      	adds	r3, #1
 8008896:	b2da      	uxtb	r2, r3
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	799b      	ldrb	r3, [r3, #6]
 80088a0:	2b05      	cmp	r3, #5
 80088a2:	d80d      	bhi.n	80088c0 <dhcp_select+0x1a8>
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	799b      	ldrb	r3, [r3, #6]
 80088a8:	461a      	mov	r2, r3
 80088aa:	2301      	movs	r3, #1
 80088ac:	4093      	lsls	r3, r2
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	461a      	mov	r2, r3
 80088b2:	0152      	lsls	r2, r2, #5
 80088b4:	1ad2      	subs	r2, r2, r3
 80088b6:	0092      	lsls	r2, r2, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	b29b      	uxth	r3, r3
 80088be:	e001      	b.n	80088c4 <dhcp_select+0x1ac>
 80088c0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80088c4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80088c6:	89fb      	ldrh	r3, [r7, #14]
 80088c8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80088cc:	4a0f      	ldr	r2, [pc, #60]	; (800890c <dhcp_select+0x1f4>)
 80088ce:	fb82 1203 	smull	r1, r2, r2, r3
 80088d2:	1152      	asrs	r2, r2, #5
 80088d4:	17db      	asrs	r3, r3, #31
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	b29a      	uxth	r2, r3
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80088de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3720      	adds	r7, #32
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bdb0      	pop	{r4, r5, r7, pc}
 80088ea:	bf00      	nop
 80088ec:	08019354 	.word	0x08019354
 80088f0:	0801945c 	.word	0x0801945c
 80088f4:	08019410 	.word	0x08019410
 80088f8:	08019478 	.word	0x08019478
 80088fc:	2000002c 	.word	0x2000002c
 8008900:	20006780 	.word	0x20006780
 8008904:	08019c70 	.word	0x08019c70
 8008908:	08019c74 	.word	0x08019c74
 800890c:	10624dd3 	.word	0x10624dd3

08008910 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8008916:	4b27      	ldr	r3, [pc, #156]	; (80089b4 <dhcp_coarse_tmr+0xa4>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	607b      	str	r3, [r7, #4]
 800891c:	e042      	b.n	80089a4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008922:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d039      	beq.n	800899e <dhcp_coarse_tmr+0x8e>
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	795b      	ldrb	r3, [r3, #5]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d035      	beq.n	800899e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	8a9b      	ldrh	r3, [r3, #20]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d012      	beq.n	8008960 <dhcp_coarse_tmr+0x50>
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	8a5b      	ldrh	r3, [r3, #18]
 800893e:	3301      	adds	r3, #1
 8008940:	b29a      	uxth	r2, r3
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	825a      	strh	r2, [r3, #18]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	8a5a      	ldrh	r2, [r3, #18]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	8a9b      	ldrh	r3, [r3, #20]
 800894e:	429a      	cmp	r2, r3
 8008950:	d106      	bne.n	8008960 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fdf8 	bl	8009548 <dhcp_release_and_stop>
        dhcp_start(netif);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f96b 	bl	8008c34 <dhcp_start>
 800895e:	e01e      	b.n	800899e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	8a1b      	ldrh	r3, [r3, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00b      	beq.n	8008980 <dhcp_coarse_tmr+0x70>
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	8a1b      	ldrh	r3, [r3, #16]
 800896c:	1e5a      	subs	r2, r3, #1
 800896e:	b291      	uxth	r1, r2
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	8211      	strh	r1, [r2, #16]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d103      	bne.n	8008980 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f8c7 	bl	8008b0c <dhcp_t2_timeout>
 800897e:	e00e      	b.n	800899e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	89db      	ldrh	r3, [r3, #14]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00a      	beq.n	800899e <dhcp_coarse_tmr+0x8e>
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	89db      	ldrh	r3, [r3, #14]
 800898c:	1e5a      	subs	r2, r3, #1
 800898e:	b291      	uxth	r1, r2
 8008990:	683a      	ldr	r2, [r7, #0]
 8008992:	81d1      	strh	r1, [r2, #14]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d102      	bne.n	800899e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f888 	bl	8008aae <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	607b      	str	r3, [r7, #4]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1b9      	bne.n	800891e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80089aa:	bf00      	nop
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	2000cfbc 	.word	0x2000cfbc

080089b8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80089be:	4b16      	ldr	r3, [pc, #88]	; (8008a18 <dhcp_fine_tmr+0x60>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	607b      	str	r3, [r7, #4]
 80089c4:	e020      	b.n	8008a08 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ca:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d017      	beq.n	8008a02 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	891b      	ldrh	r3, [r3, #8]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d906      	bls.n	80089e8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	891b      	ldrh	r3, [r3, #8]
 80089de:	3b01      	subs	r3, #1
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	811a      	strh	r2, [r3, #8]
 80089e6:	e00c      	b.n	8008a02 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	891b      	ldrh	r3, [r3, #8]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d108      	bne.n	8008a02 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	891b      	ldrh	r3, [r3, #8]
 80089f4:	3b01      	subs	r3, #1
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f80d 	bl	8008a1c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	607b      	str	r3, [r7, #4]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1db      	bne.n	80089c6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8008a0e:	bf00      	nop
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	2000cfbc 	.word	0x2000cfbc

08008a1c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	795b      	ldrb	r3, [r3, #5]
 8008a2e:	2b0c      	cmp	r3, #12
 8008a30:	d003      	beq.n	8008a3a <dhcp_timeout+0x1e>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	795b      	ldrb	r3, [r3, #5]
 8008a36:	2b06      	cmp	r3, #6
 8008a38:	d103      	bne.n	8008a42 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fa1a 	bl	8008e74 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8008a40:	e031      	b.n	8008aa6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	795b      	ldrb	r3, [r3, #5]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d10e      	bne.n	8008a68 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	799b      	ldrb	r3, [r3, #6]
 8008a4e:	2b05      	cmp	r3, #5
 8008a50:	d803      	bhi.n	8008a5a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7ff fe60 	bl	8008718 <dhcp_select>
}
 8008a58:	e025      	b.n	8008aa6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fd74 	bl	8009548 <dhcp_release_and_stop>
      dhcp_start(netif);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f8e7 	bl	8008c34 <dhcp_start>
}
 8008a66:	e01e      	b.n	8008aa6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	795b      	ldrb	r3, [r3, #5]
 8008a6c:	2b08      	cmp	r3, #8
 8008a6e:	d10b      	bne.n	8008a88 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	799b      	ldrb	r3, [r3, #6]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d803      	bhi.n	8008a80 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7ff fdf3 	bl	8008664 <dhcp_check>
}
 8008a7e:	e012      	b.n	8008aa6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fa99 	bl	8008fb8 <dhcp_bind>
}
 8008a86:	e00e      	b.n	8008aa6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	795b      	ldrb	r3, [r3, #5]
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d10a      	bne.n	8008aa6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	799b      	ldrb	r3, [r3, #6]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d803      	bhi.n	8008aa0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fc9f 	bl	80093dc <dhcp_reboot>
}
 8008a9e:	e002      	b.n	8008aa6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f9e7 	bl	8008e74 <dhcp_discover>
}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	795b      	ldrb	r3, [r3, #5]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d007      	beq.n	8008ad4 <dhcp_t1_timeout+0x26>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	795b      	ldrb	r3, [r3, #5]
 8008ac8:	2b0a      	cmp	r3, #10
 8008aca:	d003      	beq.n	8008ad4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8008ad0:	2b05      	cmp	r3, #5
 8008ad2:	d117      	bne.n	8008b04 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fb49 	bl	800916c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	899b      	ldrh	r3, [r3, #12]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	8a5b      	ldrh	r3, [r3, #18]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	dd0c      	ble.n	8008b04 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	899b      	ldrh	r3, [r3, #12]
 8008aee:	461a      	mov	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	8a5b      	ldrh	r3, [r3, #18]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	da00      	bge.n	8008afc <dhcp_t1_timeout+0x4e>
 8008afa:	3301      	adds	r3, #1
 8008afc:	105b      	asrs	r3, r3, #1
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8008b04:	bf00      	nop
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	795b      	ldrb	r3, [r3, #5]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d00b      	beq.n	8008b3a <dhcp_t2_timeout+0x2e>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	795b      	ldrb	r3, [r3, #5]
 8008b26:	2b0a      	cmp	r3, #10
 8008b28:	d007      	beq.n	8008b3a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8008b2e:	2b05      	cmp	r3, #5
 8008b30:	d003      	beq.n	8008b3a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	795b      	ldrb	r3, [r3, #5]
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	d117      	bne.n	8008b6a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fbb2 	bl	80092a4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	8a9b      	ldrh	r3, [r3, #20]
 8008b44:	461a      	mov	r2, r3
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	8a5b      	ldrh	r3, [r3, #18]
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	dd0c      	ble.n	8008b6a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	8a9b      	ldrh	r3, [r3, #20]
 8008b54:	461a      	mov	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	8a5b      	ldrh	r3, [r3, #18]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	da00      	bge.n	8008b62 <dhcp_t2_timeout+0x56>
 8008b60:	3301      	adds	r3, #1
 8008b62:	105b      	asrs	r3, r3, #1
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8008b6a:	bf00      	nop
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
	...

08008b74 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8008b90:	4b26      	ldr	r3, [pc, #152]	; (8008c2c <dhcp_handle_ack+0xb8>)
 8008b92:	78db      	ldrb	r3, [r3, #3]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8008b98:	4b25      	ldr	r3, [pc, #148]	; (8008c30 <dhcp_handle_ack+0xbc>)
 8008b9a:	68da      	ldr	r2, [r3, #12]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8008ba0:	4b22      	ldr	r3, [pc, #136]	; (8008c2c <dhcp_handle_ack+0xb8>)
 8008ba2:	791b      	ldrb	r3, [r3, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d004      	beq.n	8008bb2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8008ba8:	4b21      	ldr	r3, [pc, #132]	; (8008c30 <dhcp_handle_ack+0xbc>)
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	62da      	str	r2, [r3, #44]	; 0x2c
 8008bb0:	e004      	b.n	8008bbc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb6:	085a      	lsrs	r2, r3, #1
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8008bbc:	4b1b      	ldr	r3, [pc, #108]	; (8008c2c <dhcp_handle_ack+0xb8>)
 8008bbe:	795b      	ldrb	r3, [r3, #5]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d004      	beq.n	8008bce <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8008bc4:	4b1a      	ldr	r3, [pc, #104]	; (8008c30 <dhcp_handle_ack+0xbc>)
 8008bc6:	695a      	ldr	r2, [r3, #20]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	631a      	str	r2, [r3, #48]	; 0x30
 8008bcc:	e007      	b.n	8008bde <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	00db      	lsls	r3, r3, #3
 8008bd6:	1a9b      	subs	r3, r3, r2
 8008bd8:	08da      	lsrs	r2, r3, #3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	691a      	ldr	r2, [r3, #16]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8008be6:	4b11      	ldr	r3, [pc, #68]	; (8008c2c <dhcp_handle_ack+0xb8>)
 8008be8:	799b      	ldrb	r3, [r3, #6]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00b      	beq.n	8008c06 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8008bee:	4b10      	ldr	r3, [pc, #64]	; (8008c30 <dhcp_handle_ack+0xbc>)
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f003 fd2f 	bl	800c656 <lwip_htonl>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2201      	movs	r2, #1
 8008c02:	71da      	strb	r2, [r3, #7]
 8008c04:	e002      	b.n	8008c0c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8008c0c:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <dhcp_handle_ack+0xb8>)
 8008c0e:	79db      	ldrb	r3, [r3, #7]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d007      	beq.n	8008c24 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8008c14:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <dhcp_handle_ack+0xbc>)
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f003 fd1c 	bl	800c656 <lwip_htonl>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8008c24:	bf00      	nop
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	20006a60 	.word	0x20006a60
 8008c30:	20006a68 	.word	0x20006a68

08008c34 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d109      	bne.n	8008c56 <dhcp_start+0x22>
 8008c42:	4b37      	ldr	r3, [pc, #220]	; (8008d20 <dhcp_start+0xec>)
 8008c44:	f240 22e7 	movw	r2, #743	; 0x2e7
 8008c48:	4936      	ldr	r1, [pc, #216]	; (8008d24 <dhcp_start+0xf0>)
 8008c4a:	4837      	ldr	r0, [pc, #220]	; (8008d28 <dhcp_start+0xf4>)
 8008c4c:	f00c fcf0 	bl	8015630 <iprintf>
 8008c50:	f06f 030f 	mvn.w	r3, #15
 8008c54:	e060      	b.n	8008d18 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d109      	bne.n	8008c78 <dhcp_start+0x44>
 8008c64:	4b2e      	ldr	r3, [pc, #184]	; (8008d20 <dhcp_start+0xec>)
 8008c66:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8008c6a:	4930      	ldr	r1, [pc, #192]	; (8008d2c <dhcp_start+0xf8>)
 8008c6c:	482e      	ldr	r0, [pc, #184]	; (8008d28 <dhcp_start+0xf4>)
 8008c6e:	f00c fcdf 	bl	8015630 <iprintf>
 8008c72:	f06f 030f 	mvn.w	r3, #15
 8008c76:	e04f      	b.n	8008d18 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c82:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008c86:	d202      	bcs.n	8008c8e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8008c88:	f04f 33ff 	mov.w	r3, #4294967295
 8008c8c:	e044      	b.n	8008d18 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10d      	bne.n	8008cb0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8008c94:	2034      	movs	r0, #52	; 0x34
 8008c96:	f004 f8a7 	bl	800cde8 <mem_malloc>
 8008c9a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d102      	bne.n	8008ca8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8008ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca6:	e037      	b.n	8008d18 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	625a      	str	r2, [r3, #36]	; 0x24
 8008cae:	e005      	b.n	8008cbc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	791b      	ldrb	r3, [r3, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8008cb8:	f7ff fc90 	bl	80085dc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8008cbc:	2234      	movs	r2, #52	; 0x34
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f00b ff99 	bl	8014bf8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8008cc6:	f7ff fc37 	bl	8008538 <dhcp_inc_pcb_refcount>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <dhcp_start+0xa2>
    return ERR_MEM;
 8008cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd4:	e020      	b.n	8008d18 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008ce2:	f003 0304 	and.w	r3, r3, #4
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d105      	bne.n	8008cf6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8008cea:	2102      	movs	r1, #2
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f000 fcd0 	bl	8009692 <dhcp_set_state>
    return ERR_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	e010      	b.n	8008d18 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f8bc 	bl	8008e74 <dhcp_discover>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8008d00:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d005      	beq.n	8008d14 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fc1d 	bl	8009548 <dhcp_release_and_stop>
    return ERR_MEM;
 8008d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d12:	e001      	b.n	8008d18 <dhcp_start+0xe4>
  }
  return result;
 8008d14:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	08019354 	.word	0x08019354
 8008d24:	08019494 	.word	0x08019494
 8008d28:	08019410 	.word	0x08019410
 8008d2c:	080194d8 	.word	0x080194d8

08008d30 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d107      	bne.n	8008d50 <dhcp_arp_reply+0x20>
 8008d40:	4b0e      	ldr	r3, [pc, #56]	; (8008d7c <dhcp_arp_reply+0x4c>)
 8008d42:	f240 328b 	movw	r2, #907	; 0x38b
 8008d46:	490e      	ldr	r1, [pc, #56]	; (8008d80 <dhcp_arp_reply+0x50>)
 8008d48:	480e      	ldr	r0, [pc, #56]	; (8008d84 <dhcp_arp_reply+0x54>)
 8008d4a:	f00c fc71 	bl	8015630 <iprintf>
 8008d4e:	e012      	b.n	8008d76 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00c      	beq.n	8008d76 <dhcp_arp_reply+0x46>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	795b      	ldrb	r3, [r3, #5]
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d108      	bne.n	8008d76 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d102      	bne.n	8008d76 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f809 	bl	8008d88 <dhcp_decline>
    }
  }
}
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	08019354 	.word	0x08019354
 8008d80:	08019494 	.word	0x08019494
 8008d84:	08019410 	.word	0x08019410

08008d88 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8008d88:	b5b0      	push	{r4, r5, r7, lr}
 8008d8a:	b08a      	sub	sp, #40	; 0x28
 8008d8c:	af02      	add	r7, sp, #8
 8008d8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8008d96:	210c      	movs	r1, #12
 8008d98:	69b8      	ldr	r0, [r7, #24]
 8008d9a:	f000 fc7a 	bl	8009692 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8008d9e:	f107 030c 	add.w	r3, r7, #12
 8008da2:	2204      	movs	r2, #4
 8008da4:	69b9      	ldr	r1, [r7, #24]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f001 f900 	bl	8009fac <dhcp_create_msg>
 8008dac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d035      	beq.n	8008e20 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8008dba:	89b8      	ldrh	r0, [r7, #12]
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008dc2:	2304      	movs	r3, #4
 8008dc4:	2232      	movs	r2, #50	; 0x32
 8008dc6:	f000 fc7f 	bl	80096c8 <dhcp_option>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008dce:	89bc      	ldrh	r4, [r7, #12]
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f003 fc3b 	bl	800c656 <lwip_htonl>
 8008de0:	4603      	mov	r3, r0
 8008de2:	461a      	mov	r2, r3
 8008de4:	4629      	mov	r1, r5
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 fcfa 	bl	80097e0 <dhcp_option_long>
 8008dec:	4603      	mov	r3, r0
 8008dee:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008df0:	89b8      	ldrh	r0, [r7, #12]
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	33f0      	adds	r3, #240	; 0xf0
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	4619      	mov	r1, r3
 8008dfa:	f001 f9ad 	bl	800a158 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8008dfe:	4b19      	ldr	r3, [pc, #100]	; (8008e64 <dhcp_decline+0xdc>)
 8008e00:	6818      	ldr	r0, [r3, #0]
 8008e02:	4b19      	ldr	r3, [pc, #100]	; (8008e68 <dhcp_decline+0xe0>)
 8008e04:	9301      	str	r3, [sp, #4]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	2343      	movs	r3, #67	; 0x43
 8008e0c:	4a17      	ldr	r2, [pc, #92]	; (8008e6c <dhcp_decline+0xe4>)
 8008e0e:	6979      	ldr	r1, [r7, #20]
 8008e10:	f00b fa1a 	bl	8014248 <udp_sendto_if_src>
 8008e14:	4603      	mov	r3, r0
 8008e16:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8008e18:	6978      	ldr	r0, [r7, #20]
 8008e1a:	f004 ff95 	bl	800dd48 <pbuf_free>
 8008e1e:	e001      	b.n	8008e24 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8008e20:	23ff      	movs	r3, #255	; 0xff
 8008e22:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	799b      	ldrb	r3, [r3, #6]
 8008e28:	2bff      	cmp	r3, #255	; 0xff
 8008e2a:	d005      	beq.n	8008e38 <dhcp_decline+0xb0>
    dhcp->tries++;
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	799b      	ldrb	r3, [r3, #6]
 8008e30:	3301      	adds	r3, #1
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8008e38:	f242 7310 	movw	r3, #10000	; 0x2710
 8008e3c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008e3e:	89fb      	ldrh	r3, [r7, #14]
 8008e40:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008e44:	4a0a      	ldr	r2, [pc, #40]	; (8008e70 <dhcp_decline+0xe8>)
 8008e46:	fb82 1203 	smull	r1, r2, r2, r3
 8008e4a:	1152      	asrs	r2, r2, #5
 8008e4c:	17db      	asrs	r3, r3, #31
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008e56:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3720      	adds	r7, #32
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bdb0      	pop	{r4, r5, r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20006780 	.word	0x20006780
 8008e68:	08019c70 	.word	0x08019c70
 8008e6c:	08019c74 	.word	0x08019c74
 8008e70:	10624dd3 	.word	0x10624dd3

08008e74 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08a      	sub	sp, #40	; 0x28
 8008e78:	af02      	add	r7, sp, #8
 8008e7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e80:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8008e8c:	2106      	movs	r1, #6
 8008e8e:	69b8      	ldr	r0, [r7, #24]
 8008e90:	f000 fbff 	bl	8009692 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8008e94:	f107 0308 	add.w	r3, r7, #8
 8008e98:	2201      	movs	r2, #1
 8008e9a:	69b9      	ldr	r1, [r7, #24]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 f885 	bl	8009fac <dhcp_create_msg>
 8008ea2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d04b      	beq.n	8008f42 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008eb0:	8938      	ldrh	r0, [r7, #8]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008eb8:	2302      	movs	r3, #2
 8008eba:	2239      	movs	r2, #57	; 0x39
 8008ebc:	f000 fc04 	bl	80096c8 <dhcp_option>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008ec4:	8938      	ldrh	r0, [r7, #8]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	f000 fc53 	bl	800977c <dhcp_option_short>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008eda:	8938      	ldrh	r0, [r7, #8]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	2237      	movs	r2, #55	; 0x37
 8008ee6:	f000 fbef 	bl	80096c8 <dhcp_option>
 8008eea:	4603      	mov	r3, r0
 8008eec:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008eee:	2300      	movs	r3, #0
 8008ef0:	77fb      	strb	r3, [r7, #31]
 8008ef2:	e00e      	b.n	8008f12 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008ef4:	8938      	ldrh	r0, [r7, #8]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008efc:	7ffb      	ldrb	r3, [r7, #31]
 8008efe:	4a29      	ldr	r2, [pc, #164]	; (8008fa4 <dhcp_discover+0x130>)
 8008f00:	5cd3      	ldrb	r3, [r2, r3]
 8008f02:	461a      	mov	r2, r3
 8008f04:	f000 fc14 	bl	8009730 <dhcp_option_byte>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008f0c:	7ffb      	ldrb	r3, [r7, #31]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	77fb      	strb	r3, [r7, #31]
 8008f12:	7ffb      	ldrb	r3, [r7, #31]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d9ed      	bls.n	8008ef4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008f18:	8938      	ldrh	r0, [r7, #8]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	33f0      	adds	r3, #240	; 0xf0
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	4619      	mov	r1, r3
 8008f22:	f001 f919 	bl	800a158 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8008f26:	4b20      	ldr	r3, [pc, #128]	; (8008fa8 <dhcp_discover+0x134>)
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	4b20      	ldr	r3, [pc, #128]	; (8008fac <dhcp_discover+0x138>)
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	2343      	movs	r3, #67	; 0x43
 8008f34:	4a1e      	ldr	r2, [pc, #120]	; (8008fb0 <dhcp_discover+0x13c>)
 8008f36:	6939      	ldr	r1, [r7, #16]
 8008f38:	f00b f986 	bl	8014248 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8008f3c:	6938      	ldr	r0, [r7, #16]
 8008f3e:	f004 ff03 	bl	800dd48 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	799b      	ldrb	r3, [r3, #6]
 8008f46:	2bff      	cmp	r3, #255	; 0xff
 8008f48:	d005      	beq.n	8008f56 <dhcp_discover+0xe2>
    dhcp->tries++;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	799b      	ldrb	r3, [r3, #6]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	b2da      	uxtb	r2, r3
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	799b      	ldrb	r3, [r3, #6]
 8008f5a:	2b05      	cmp	r3, #5
 8008f5c:	d80d      	bhi.n	8008f7a <dhcp_discover+0x106>
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	799b      	ldrb	r3, [r3, #6]
 8008f62:	461a      	mov	r2, r3
 8008f64:	2301      	movs	r3, #1
 8008f66:	4093      	lsls	r3, r2
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	0152      	lsls	r2, r2, #5
 8008f6e:	1ad2      	subs	r2, r2, r3
 8008f70:	0092      	lsls	r2, r2, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	00db      	lsls	r3, r3, #3
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	e001      	b.n	8008f7e <dhcp_discover+0x10a>
 8008f7a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008f7e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008f80:	897b      	ldrh	r3, [r7, #10]
 8008f82:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008f86:	4a0b      	ldr	r2, [pc, #44]	; (8008fb4 <dhcp_discover+0x140>)
 8008f88:	fb82 1203 	smull	r1, r2, r2, r3
 8008f8c:	1152      	asrs	r2, r2, #5
 8008f8e:	17db      	asrs	r3, r3, #31
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008f98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3720      	adds	r7, #32
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	2000002c 	.word	0x2000002c
 8008fa8:	20006780 	.word	0x20006780
 8008fac:	08019c70 	.word	0x08019c70
 8008fb0:	08019c74 	.word	0x08019c74
 8008fb4:	10624dd3 	.word	0x10624dd3

08008fb8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d107      	bne.n	8008fd6 <dhcp_bind+0x1e>
 8008fc6:	4b64      	ldr	r3, [pc, #400]	; (8009158 <dhcp_bind+0x1a0>)
 8008fc8:	f240 4215 	movw	r2, #1045	; 0x415
 8008fcc:	4963      	ldr	r1, [pc, #396]	; (800915c <dhcp_bind+0x1a4>)
 8008fce:	4864      	ldr	r0, [pc, #400]	; (8009160 <dhcp_bind+0x1a8>)
 8008fd0:	f00c fb2e 	bl	8015630 <iprintf>
 8008fd4:	e0bc      	b.n	8009150 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fda:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d107      	bne.n	8008ff2 <dhcp_bind+0x3a>
 8008fe2:	4b5d      	ldr	r3, [pc, #372]	; (8009158 <dhcp_bind+0x1a0>)
 8008fe4:	f240 4217 	movw	r2, #1047	; 0x417
 8008fe8:	495e      	ldr	r1, [pc, #376]	; (8009164 <dhcp_bind+0x1ac>)
 8008fea:	485d      	ldr	r0, [pc, #372]	; (8009160 <dhcp_bind+0x1a8>)
 8008fec:	f00c fb20 	bl	8015630 <iprintf>
 8008ff0:	e0ae      	b.n	8009150 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009000:	d019      	beq.n	8009036 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009006:	331e      	adds	r3, #30
 8009008:	4a57      	ldr	r2, [pc, #348]	; (8009168 <dhcp_bind+0x1b0>)
 800900a:	fba2 2303 	umull	r2, r3, r2, r3
 800900e:	095b      	lsrs	r3, r3, #5
 8009010:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009018:	d302      	bcc.n	8009020 <dhcp_bind+0x68>
      timeout = 0xffff;
 800901a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800901e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	b29a      	uxth	r2, r3
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	8a9b      	ldrh	r3, [r3, #20]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d102      	bne.n	8009036 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	2201      	movs	r2, #1
 8009034:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903e:	d01d      	beq.n	800907c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009044:	331e      	adds	r3, #30
 8009046:	4a48      	ldr	r2, [pc, #288]	; (8009168 <dhcp_bind+0x1b0>)
 8009048:	fba2 2303 	umull	r2, r3, r2, r3
 800904c:	095b      	lsrs	r3, r3, #5
 800904e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009056:	d302      	bcc.n	800905e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8009058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800905c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	b29a      	uxth	r2, r3
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	895b      	ldrh	r3, [r3, #10]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d102      	bne.n	8009074 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	2201      	movs	r2, #1
 8009072:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	895a      	ldrh	r2, [r3, #10]
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009084:	d01d      	beq.n	80090c2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908a:	331e      	adds	r3, #30
 800908c:	4a36      	ldr	r2, [pc, #216]	; (8009168 <dhcp_bind+0x1b0>)
 800908e:	fba2 2303 	umull	r2, r3, r2, r3
 8009092:	095b      	lsrs	r3, r3, #5
 8009094:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800909c:	d302      	bcc.n	80090a4 <dhcp_bind+0xec>
      timeout = 0xffff;
 800909e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090a2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	899b      	ldrh	r3, [r3, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d102      	bne.n	80090ba <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	2201      	movs	r2, #1
 80090b8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	899a      	ldrh	r2, [r3, #12]
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	895a      	ldrh	r2, [r3, #10]
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	899b      	ldrh	r3, [r3, #12]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d306      	bcc.n	80090dc <dhcp_bind+0x124>
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	899b      	ldrh	r3, [r3, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2200      	movs	r2, #0
 80090da:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	79db      	ldrb	r3, [r3, #7]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	613b      	str	r3, [r7, #16]
 80090ea:	e014      	b.n	8009116 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	331c      	adds	r3, #28
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80090f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	db02      	blt.n	8009102 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80090fc:	23ff      	movs	r3, #255	; 0xff
 80090fe:	613b      	str	r3, [r7, #16]
 8009100:	e009      	b.n	8009116 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	2bbf      	cmp	r3, #191	; 0xbf
 8009106:	d903      	bls.n	8009110 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8009108:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800910c:	613b      	str	r3, [r7, #16]
 800910e:	e002      	b.n	8009116 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8009110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009114:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d108      	bne.n	8009134 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	69da      	ldr	r2, [r3, #28]
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	4013      	ands	r3, r2
 800912a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009132:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8009134:	210a      	movs	r1, #10
 8009136:	69b8      	ldr	r0, [r7, #24]
 8009138:	f000 faab 	bl	8009692 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	f103 011c 	add.w	r1, r3, #28
 8009142:	f107 030c 	add.w	r3, r7, #12
 8009146:	f107 0210 	add.w	r2, r7, #16
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f004 f9c2 	bl	800d4d4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8009150:	3720      	adds	r7, #32
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	08019354 	.word	0x08019354
 800915c:	08019510 	.word	0x08019510
 8009160:	08019410 	.word	0x08019410
 8009164:	0801952c 	.word	0x0801952c
 8009168:	88888889 	.word	0x88888889

0800916c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b08a      	sub	sp, #40	; 0x28
 8009170:	af02      	add	r7, sp, #8
 8009172:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800917a:	2105      	movs	r1, #5
 800917c:	69b8      	ldr	r0, [r7, #24]
 800917e:	f000 fa88 	bl	8009692 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8009182:	f107 030c 	add.w	r3, r7, #12
 8009186:	2203      	movs	r2, #3
 8009188:	69b9      	ldr	r1, [r7, #24]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 ff0e 	bl	8009fac <dhcp_create_msg>
 8009190:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d04e      	beq.n	8009236 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800919e:	89b8      	ldrh	r0, [r7, #12]
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80091a6:	2302      	movs	r3, #2
 80091a8:	2239      	movs	r2, #57	; 0x39
 80091aa:	f000 fa8d 	bl	80096c8 <dhcp_option>
 80091ae:	4603      	mov	r3, r0
 80091b0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80091b2:	89b8      	ldrh	r0, [r7, #12]
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091be:	461a      	mov	r2, r3
 80091c0:	f000 fadc 	bl	800977c <dhcp_option_short>
 80091c4:	4603      	mov	r3, r0
 80091c6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80091c8:	89b8      	ldrh	r0, [r7, #12]
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80091d0:	2303      	movs	r3, #3
 80091d2:	2237      	movs	r2, #55	; 0x37
 80091d4:	f000 fa78 	bl	80096c8 <dhcp_option>
 80091d8:	4603      	mov	r3, r0
 80091da:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80091dc:	2300      	movs	r3, #0
 80091de:	77bb      	strb	r3, [r7, #30]
 80091e0:	e00e      	b.n	8009200 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80091e2:	89b8      	ldrh	r0, [r7, #12]
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80091ea:	7fbb      	ldrb	r3, [r7, #30]
 80091ec:	4a2a      	ldr	r2, [pc, #168]	; (8009298 <dhcp_renew+0x12c>)
 80091ee:	5cd3      	ldrb	r3, [r2, r3]
 80091f0:	461a      	mov	r2, r3
 80091f2:	f000 fa9d 	bl	8009730 <dhcp_option_byte>
 80091f6:	4603      	mov	r3, r0
 80091f8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80091fa:	7fbb      	ldrb	r3, [r7, #30]
 80091fc:	3301      	adds	r3, #1
 80091fe:	77bb      	strb	r3, [r7, #30]
 8009200:	7fbb      	ldrb	r3, [r7, #30]
 8009202:	2b02      	cmp	r3, #2
 8009204:	d9ed      	bls.n	80091e2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8009206:	89b8      	ldrh	r0, [r7, #12]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	33f0      	adds	r3, #240	; 0xf0
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	4619      	mov	r1, r3
 8009210:	f000 ffa2 	bl	800a158 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8009214:	4b21      	ldr	r3, [pc, #132]	; (800929c <dhcp_renew+0x130>)
 8009216:	6818      	ldr	r0, [r3, #0]
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	f103 0218 	add.w	r2, r3, #24
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	2343      	movs	r3, #67	; 0x43
 8009224:	6979      	ldr	r1, [r7, #20]
 8009226:	f00a ff9b 	bl	8014160 <udp_sendto_if>
 800922a:	4603      	mov	r3, r0
 800922c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800922e:	6978      	ldr	r0, [r7, #20]
 8009230:	f004 fd8a 	bl	800dd48 <pbuf_free>
 8009234:	e001      	b.n	800923a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8009236:	23ff      	movs	r3, #255	; 0xff
 8009238:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	799b      	ldrb	r3, [r3, #6]
 800923e:	2bff      	cmp	r3, #255	; 0xff
 8009240:	d005      	beq.n	800924e <dhcp_renew+0xe2>
    dhcp->tries++;
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	799b      	ldrb	r3, [r3, #6]
 8009246:	3301      	adds	r3, #1
 8009248:	b2da      	uxtb	r2, r3
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	799b      	ldrb	r3, [r3, #6]
 8009252:	2b09      	cmp	r3, #9
 8009254:	d80a      	bhi.n	800926c <dhcp_renew+0x100>
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	799b      	ldrb	r3, [r3, #6]
 800925a:	b29b      	uxth	r3, r3
 800925c:	461a      	mov	r2, r3
 800925e:	0152      	lsls	r2, r2, #5
 8009260:	1ad2      	subs	r2, r2, r3
 8009262:	0092      	lsls	r2, r2, #2
 8009264:	4413      	add	r3, r2
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	b29b      	uxth	r3, r3
 800926a:	e001      	b.n	8009270 <dhcp_renew+0x104>
 800926c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009270:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8009272:	89fb      	ldrh	r3, [r7, #14]
 8009274:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009278:	4a09      	ldr	r2, [pc, #36]	; (80092a0 <dhcp_renew+0x134>)
 800927a:	fb82 1203 	smull	r1, r2, r2, r3
 800927e:	1152      	asrs	r2, r2, #5
 8009280:	17db      	asrs	r3, r3, #31
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	b29a      	uxth	r2, r3
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800928a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3720      	adds	r7, #32
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	2000002c 	.word	0x2000002c
 800929c:	20006780 	.word	0x20006780
 80092a0:	10624dd3 	.word	0x10624dd3

080092a4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b08a      	sub	sp, #40	; 0x28
 80092a8:	af02      	add	r7, sp, #8
 80092aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80092b2:	2104      	movs	r1, #4
 80092b4:	69b8      	ldr	r0, [r7, #24]
 80092b6:	f000 f9ec 	bl	8009692 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80092ba:	f107 030c 	add.w	r3, r7, #12
 80092be:	2203      	movs	r2, #3
 80092c0:	69b9      	ldr	r1, [r7, #24]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fe72 	bl	8009fac <dhcp_create_msg>
 80092c8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d04c      	beq.n	800936a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80092d6:	89b8      	ldrh	r0, [r7, #12]
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80092de:	2302      	movs	r3, #2
 80092e0:	2239      	movs	r2, #57	; 0x39
 80092e2:	f000 f9f1 	bl	80096c8 <dhcp_option>
 80092e6:	4603      	mov	r3, r0
 80092e8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80092ea:	89b8      	ldrh	r0, [r7, #12]
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f6:	461a      	mov	r2, r3
 80092f8:	f000 fa40 	bl	800977c <dhcp_option_short>
 80092fc:	4603      	mov	r3, r0
 80092fe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009300:	89b8      	ldrh	r0, [r7, #12]
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8009308:	2303      	movs	r3, #3
 800930a:	2237      	movs	r2, #55	; 0x37
 800930c:	f000 f9dc 	bl	80096c8 <dhcp_option>
 8009310:	4603      	mov	r3, r0
 8009312:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009314:	2300      	movs	r3, #0
 8009316:	77bb      	strb	r3, [r7, #30]
 8009318:	e00e      	b.n	8009338 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800931a:	89b8      	ldrh	r0, [r7, #12]
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8009322:	7fbb      	ldrb	r3, [r7, #30]
 8009324:	4a29      	ldr	r2, [pc, #164]	; (80093cc <dhcp_rebind+0x128>)
 8009326:	5cd3      	ldrb	r3, [r2, r3]
 8009328:	461a      	mov	r2, r3
 800932a:	f000 fa01 	bl	8009730 <dhcp_option_byte>
 800932e:	4603      	mov	r3, r0
 8009330:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009332:	7fbb      	ldrb	r3, [r7, #30]
 8009334:	3301      	adds	r3, #1
 8009336:	77bb      	strb	r3, [r7, #30]
 8009338:	7fbb      	ldrb	r3, [r7, #30]
 800933a:	2b02      	cmp	r3, #2
 800933c:	d9ed      	bls.n	800931a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800933e:	89b8      	ldrh	r0, [r7, #12]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	33f0      	adds	r3, #240	; 0xf0
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	4619      	mov	r1, r3
 8009348:	f000 ff06 	bl	800a158 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800934c:	4b20      	ldr	r3, [pc, #128]	; (80093d0 <dhcp_rebind+0x12c>)
 800934e:	6818      	ldr	r0, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	2343      	movs	r3, #67	; 0x43
 8009356:	4a1f      	ldr	r2, [pc, #124]	; (80093d4 <dhcp_rebind+0x130>)
 8009358:	6979      	ldr	r1, [r7, #20]
 800935a:	f00a ff01 	bl	8014160 <udp_sendto_if>
 800935e:	4603      	mov	r3, r0
 8009360:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8009362:	6978      	ldr	r0, [r7, #20]
 8009364:	f004 fcf0 	bl	800dd48 <pbuf_free>
 8009368:	e001      	b.n	800936e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800936a:	23ff      	movs	r3, #255	; 0xff
 800936c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	799b      	ldrb	r3, [r3, #6]
 8009372:	2bff      	cmp	r3, #255	; 0xff
 8009374:	d005      	beq.n	8009382 <dhcp_rebind+0xde>
    dhcp->tries++;
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	799b      	ldrb	r3, [r3, #6]
 800937a:	3301      	adds	r3, #1
 800937c:	b2da      	uxtb	r2, r3
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	799b      	ldrb	r3, [r3, #6]
 8009386:	2b09      	cmp	r3, #9
 8009388:	d80a      	bhi.n	80093a0 <dhcp_rebind+0xfc>
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	799b      	ldrb	r3, [r3, #6]
 800938e:	b29b      	uxth	r3, r3
 8009390:	461a      	mov	r2, r3
 8009392:	0152      	lsls	r2, r2, #5
 8009394:	1ad2      	subs	r2, r2, r3
 8009396:	0092      	lsls	r2, r2, #2
 8009398:	4413      	add	r3, r2
 800939a:	00db      	lsls	r3, r3, #3
 800939c:	b29b      	uxth	r3, r3
 800939e:	e001      	b.n	80093a4 <dhcp_rebind+0x100>
 80093a0:	f242 7310 	movw	r3, #10000	; 0x2710
 80093a4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80093a6:	89fb      	ldrh	r3, [r7, #14]
 80093a8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80093ac:	4a0a      	ldr	r2, [pc, #40]	; (80093d8 <dhcp_rebind+0x134>)
 80093ae:	fb82 1203 	smull	r1, r2, r2, r3
 80093b2:	1152      	asrs	r2, r2, #5
 80093b4:	17db      	asrs	r3, r3, #31
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80093be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3720      	adds	r7, #32
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	2000002c 	.word	0x2000002c
 80093d0:	20006780 	.word	0x20006780
 80093d4:	08019c74 	.word	0x08019c74
 80093d8:	10624dd3 	.word	0x10624dd3

080093dc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80093dc:	b5b0      	push	{r4, r5, r7, lr}
 80093de:	b08a      	sub	sp, #40	; 0x28
 80093e0:	af02      	add	r7, sp, #8
 80093e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80093ea:	2103      	movs	r1, #3
 80093ec:	69b8      	ldr	r0, [r7, #24]
 80093ee:	f000 f950 	bl	8009692 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80093f2:	f107 030c 	add.w	r3, r7, #12
 80093f6:	2203      	movs	r2, #3
 80093f8:	69b9      	ldr	r1, [r7, #24]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fdd6 	bl	8009fac <dhcp_create_msg>
 8009400:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d066      	beq.n	80094d6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800940e:	89b8      	ldrh	r0, [r7, #12]
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8009416:	2302      	movs	r3, #2
 8009418:	2239      	movs	r2, #57	; 0x39
 800941a:	f000 f955 	bl	80096c8 <dhcp_option>
 800941e:	4603      	mov	r3, r0
 8009420:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8009422:	89b8      	ldrh	r0, [r7, #12]
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	33f0      	adds	r3, #240	; 0xf0
 8009428:	f44f 7210 	mov.w	r2, #576	; 0x240
 800942c:	4619      	mov	r1, r3
 800942e:	f000 f9a5 	bl	800977c <dhcp_option_short>
 8009432:	4603      	mov	r3, r0
 8009434:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8009436:	89b8      	ldrh	r0, [r7, #12]
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800943e:	2304      	movs	r3, #4
 8009440:	2232      	movs	r2, #50	; 0x32
 8009442:	f000 f941 	bl	80096c8 <dhcp_option>
 8009446:	4603      	mov	r3, r0
 8009448:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800944a:	89bc      	ldrh	r4, [r7, #12]
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	4618      	mov	r0, r3
 8009458:	f003 f8fd 	bl	800c656 <lwip_htonl>
 800945c:	4603      	mov	r3, r0
 800945e:	461a      	mov	r2, r3
 8009460:	4629      	mov	r1, r5
 8009462:	4620      	mov	r0, r4
 8009464:	f000 f9bc 	bl	80097e0 <dhcp_option_long>
 8009468:	4603      	mov	r3, r0
 800946a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800946c:	89b8      	ldrh	r0, [r7, #12]
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8009474:	2303      	movs	r3, #3
 8009476:	2237      	movs	r2, #55	; 0x37
 8009478:	f000 f926 	bl	80096c8 <dhcp_option>
 800947c:	4603      	mov	r3, r0
 800947e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009480:	2300      	movs	r3, #0
 8009482:	77bb      	strb	r3, [r7, #30]
 8009484:	e00e      	b.n	80094a4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8009486:	89b8      	ldrh	r0, [r7, #12]
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800948e:	7fbb      	ldrb	r3, [r7, #30]
 8009490:	4a29      	ldr	r2, [pc, #164]	; (8009538 <dhcp_reboot+0x15c>)
 8009492:	5cd3      	ldrb	r3, [r2, r3]
 8009494:	461a      	mov	r2, r3
 8009496:	f000 f94b 	bl	8009730 <dhcp_option_byte>
 800949a:	4603      	mov	r3, r0
 800949c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800949e:	7fbb      	ldrb	r3, [r7, #30]
 80094a0:	3301      	adds	r3, #1
 80094a2:	77bb      	strb	r3, [r7, #30]
 80094a4:	7fbb      	ldrb	r3, [r7, #30]
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d9ed      	bls.n	8009486 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80094aa:	89b8      	ldrh	r0, [r7, #12]
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	33f0      	adds	r3, #240	; 0xf0
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	4619      	mov	r1, r3
 80094b4:	f000 fe50 	bl	800a158 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80094b8:	4b20      	ldr	r3, [pc, #128]	; (800953c <dhcp_reboot+0x160>)
 80094ba:	6818      	ldr	r0, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	2343      	movs	r3, #67	; 0x43
 80094c2:	4a1f      	ldr	r2, [pc, #124]	; (8009540 <dhcp_reboot+0x164>)
 80094c4:	6979      	ldr	r1, [r7, #20]
 80094c6:	f00a fe4b 	bl	8014160 <udp_sendto_if>
 80094ca:	4603      	mov	r3, r0
 80094cc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80094ce:	6978      	ldr	r0, [r7, #20]
 80094d0:	f004 fc3a 	bl	800dd48 <pbuf_free>
 80094d4:	e001      	b.n	80094da <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80094d6:	23ff      	movs	r3, #255	; 0xff
 80094d8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	799b      	ldrb	r3, [r3, #6]
 80094de:	2bff      	cmp	r3, #255	; 0xff
 80094e0:	d005      	beq.n	80094ee <dhcp_reboot+0x112>
    dhcp->tries++;
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	799b      	ldrb	r3, [r3, #6]
 80094e6:	3301      	adds	r3, #1
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	799b      	ldrb	r3, [r3, #6]
 80094f2:	2b09      	cmp	r3, #9
 80094f4:	d80a      	bhi.n	800950c <dhcp_reboot+0x130>
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	799b      	ldrb	r3, [r3, #6]
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	461a      	mov	r2, r3
 80094fe:	0152      	lsls	r2, r2, #5
 8009500:	1ad2      	subs	r2, r2, r3
 8009502:	0092      	lsls	r2, r2, #2
 8009504:	4413      	add	r3, r2
 8009506:	00db      	lsls	r3, r3, #3
 8009508:	b29b      	uxth	r3, r3
 800950a:	e001      	b.n	8009510 <dhcp_reboot+0x134>
 800950c:	f242 7310 	movw	r3, #10000	; 0x2710
 8009510:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8009512:	89fb      	ldrh	r3, [r7, #14]
 8009514:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009518:	4a0a      	ldr	r2, [pc, #40]	; (8009544 <dhcp_reboot+0x168>)
 800951a:	fb82 1203 	smull	r1, r2, r2, r3
 800951e:	1152      	asrs	r2, r2, #5
 8009520:	17db      	asrs	r3, r3, #31
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	b29a      	uxth	r2, r3
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800952a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3720      	adds	r7, #32
 8009532:	46bd      	mov	sp, r7
 8009534:	bdb0      	pop	{r4, r5, r7, pc}
 8009536:	bf00      	nop
 8009538:	2000002c 	.word	0x2000002c
 800953c:	20006780 	.word	0x20006780
 8009540:	08019c74 	.word	0x08019c74
 8009544:	10624dd3 	.word	0x10624dd3

08009548 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8009548:	b5b0      	push	{r4, r5, r7, lr}
 800954a:	b08a      	sub	sp, #40	; 0x28
 800954c:	af02      	add	r7, sp, #8
 800954e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009554:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 8084 	beq.w	8009666 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	795b      	ldrb	r3, [r3, #5]
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 8081 	beq.w	800966a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	2200      	movs	r2, #0
 8009572:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	2200      	movs	r2, #0
 8009578:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	2200      	movs	r2, #0
 800957e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	2200      	movs	r2, #0
 8009584:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	2200      	movs	r2, #0
 800958a:	631a      	str	r2, [r3, #48]	; 0x30
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	62da      	str	r2, [r3, #44]	; 0x2c
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	2200      	movs	r2, #0
 80095a0:	829a      	strh	r2, [r3, #20]
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	8a9a      	ldrh	r2, [r3, #20]
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	825a      	strh	r2, [r3, #18]
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	8a5a      	ldrh	r2, [r3, #18]
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	821a      	strh	r2, [r3, #16]
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	8a1a      	ldrh	r2, [r3, #16]
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fdfa 	bl	800a1b4 <dhcp_supplied_address>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d03b      	beq.n	800963e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80095c6:	f107 030e 	add.w	r3, r7, #14
 80095ca:	2207      	movs	r2, #7
 80095cc:	69f9      	ldr	r1, [r7, #28]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fcec 	bl	8009fac <dhcp_create_msg>
 80095d4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d030      	beq.n	800963e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80095e2:	89f8      	ldrh	r0, [r7, #14]
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80095ea:	2304      	movs	r3, #4
 80095ec:	2236      	movs	r2, #54	; 0x36
 80095ee:	f000 f86b 	bl	80096c8 <dhcp_option>
 80095f2:	4603      	mov	r3, r0
 80095f4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80095f6:	89fc      	ldrh	r4, [r7, #14]
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	4618      	mov	r0, r3
 8009602:	f003 f828 	bl	800c656 <lwip_htonl>
 8009606:	4603      	mov	r3, r0
 8009608:	461a      	mov	r2, r3
 800960a:	4629      	mov	r1, r5
 800960c:	4620      	mov	r0, r4
 800960e:	f000 f8e7 	bl	80097e0 <dhcp_option_long>
 8009612:	4603      	mov	r3, r0
 8009614:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8009616:	89f8      	ldrh	r0, [r7, #14]
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	33f0      	adds	r3, #240	; 0xf0
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	4619      	mov	r1, r3
 8009620:	f000 fd9a 	bl	800a158 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8009624:	4b13      	ldr	r3, [pc, #76]	; (8009674 <dhcp_release_and_stop+0x12c>)
 8009626:	6818      	ldr	r0, [r3, #0]
 8009628:	f107 0210 	add.w	r2, r7, #16
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	2343      	movs	r3, #67	; 0x43
 8009632:	69b9      	ldr	r1, [r7, #24]
 8009634:	f00a fd94 	bl	8014160 <udp_sendto_if>
      pbuf_free(p_out);
 8009638:	69b8      	ldr	r0, [r7, #24]
 800963a:	f004 fb85 	bl	800dd48 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800963e:	4b0e      	ldr	r3, [pc, #56]	; (8009678 <dhcp_release_and_stop+0x130>)
 8009640:	4a0d      	ldr	r2, [pc, #52]	; (8009678 <dhcp_release_and_stop+0x130>)
 8009642:	490d      	ldr	r1, [pc, #52]	; (8009678 <dhcp_release_and_stop+0x130>)
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f003 ff45 	bl	800d4d4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800964a:	2100      	movs	r1, #0
 800964c:	69f8      	ldr	r0, [r7, #28]
 800964e:	f000 f820 	bl	8009692 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	791b      	ldrb	r3, [r3, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d008      	beq.n	800966c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800965a:	f7fe ffbf 	bl	80085dc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	2200      	movs	r2, #0
 8009662:	711a      	strb	r2, [r3, #4]
 8009664:	e002      	b.n	800966c <dhcp_release_and_stop+0x124>
    return;
 8009666:	bf00      	nop
 8009668:	e000      	b.n	800966c <dhcp_release_and_stop+0x124>
    return;
 800966a:	bf00      	nop
  }
}
 800966c:	3720      	adds	r7, #32
 800966e:	46bd      	mov	sp, r7
 8009670:	bdb0      	pop	{r4, r5, r7, pc}
 8009672:	bf00      	nop
 8009674:	20006780 	.word	0x20006780
 8009678:	08019c70 	.word	0x08019c70

0800967c <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff ff5f 	bl	8009548 <dhcp_release_and_stop>
}
 800968a:	bf00      	nop
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8009692:	b480      	push	{r7}
 8009694:	b083      	sub	sp, #12
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	460b      	mov	r3, r1
 800969c:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	795b      	ldrb	r3, [r3, #5]
 80096a2:	78fa      	ldrb	r2, [r7, #3]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d008      	beq.n	80096ba <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	78fa      	ldrb	r2, [r7, #3]
 80096ac:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	811a      	strh	r2, [r3, #8]
  }
}
 80096ba:	bf00      	nop
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
	...

080096c8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6039      	str	r1, [r7, #0]
 80096d0:	4611      	mov	r1, r2
 80096d2:	461a      	mov	r2, r3
 80096d4:	4603      	mov	r3, r0
 80096d6:	80fb      	strh	r3, [r7, #6]
 80096d8:	460b      	mov	r3, r1
 80096da:	717b      	strb	r3, [r7, #5]
 80096dc:	4613      	mov	r3, r2
 80096de:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80096e0:	88fa      	ldrh	r2, [r7, #6]
 80096e2:	793b      	ldrb	r3, [r7, #4]
 80096e4:	4413      	add	r3, r2
 80096e6:	3302      	adds	r3, #2
 80096e8:	2b44      	cmp	r3, #68	; 0x44
 80096ea:	d906      	bls.n	80096fa <dhcp_option+0x32>
 80096ec:	4b0d      	ldr	r3, [pc, #52]	; (8009724 <dhcp_option+0x5c>)
 80096ee:	f240 529a 	movw	r2, #1434	; 0x59a
 80096f2:	490d      	ldr	r1, [pc, #52]	; (8009728 <dhcp_option+0x60>)
 80096f4:	480d      	ldr	r0, [pc, #52]	; (800972c <dhcp_option+0x64>)
 80096f6:	f00b ff9b 	bl	8015630 <iprintf>
  options[options_out_len++] = option_type;
 80096fa:	88fb      	ldrh	r3, [r7, #6]
 80096fc:	1c5a      	adds	r2, r3, #1
 80096fe:	80fa      	strh	r2, [r7, #6]
 8009700:	461a      	mov	r2, r3
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	4413      	add	r3, r2
 8009706:	797a      	ldrb	r2, [r7, #5]
 8009708:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800970a:	88fb      	ldrh	r3, [r7, #6]
 800970c:	1c5a      	adds	r2, r3, #1
 800970e:	80fa      	strh	r2, [r7, #6]
 8009710:	461a      	mov	r2, r3
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	4413      	add	r3, r2
 8009716:	793a      	ldrb	r2, [r7, #4]
 8009718:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800971a:	88fb      	ldrh	r3, [r7, #6]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	08019354 	.word	0x08019354
 8009728:	08019544 	.word	0x08019544
 800972c:	08019410 	.word	0x08019410

08009730 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	6039      	str	r1, [r7, #0]
 800973a:	80fb      	strh	r3, [r7, #6]
 800973c:	4613      	mov	r3, r2
 800973e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8009740:	88fb      	ldrh	r3, [r7, #6]
 8009742:	2b43      	cmp	r3, #67	; 0x43
 8009744:	d906      	bls.n	8009754 <dhcp_option_byte+0x24>
 8009746:	4b0a      	ldr	r3, [pc, #40]	; (8009770 <dhcp_option_byte+0x40>)
 8009748:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800974c:	4909      	ldr	r1, [pc, #36]	; (8009774 <dhcp_option_byte+0x44>)
 800974e:	480a      	ldr	r0, [pc, #40]	; (8009778 <dhcp_option_byte+0x48>)
 8009750:	f00b ff6e 	bl	8015630 <iprintf>
  options[options_out_len++] = value;
 8009754:	88fb      	ldrh	r3, [r7, #6]
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	80fa      	strh	r2, [r7, #6]
 800975a:	461a      	mov	r2, r3
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	4413      	add	r3, r2
 8009760:	797a      	ldrb	r2, [r7, #5]
 8009762:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8009764:	88fb      	ldrh	r3, [r7, #6]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	08019354 	.word	0x08019354
 8009774:	08019588 	.word	0x08019588
 8009778:	08019410 	.word	0x08019410

0800977c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	6039      	str	r1, [r7, #0]
 8009786:	80fb      	strh	r3, [r7, #6]
 8009788:	4613      	mov	r3, r2
 800978a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800978c:	88fb      	ldrh	r3, [r7, #6]
 800978e:	3302      	adds	r3, #2
 8009790:	2b44      	cmp	r3, #68	; 0x44
 8009792:	d906      	bls.n	80097a2 <dhcp_option_short+0x26>
 8009794:	4b0f      	ldr	r3, [pc, #60]	; (80097d4 <dhcp_option_short+0x58>)
 8009796:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800979a:	490f      	ldr	r1, [pc, #60]	; (80097d8 <dhcp_option_short+0x5c>)
 800979c:	480f      	ldr	r0, [pc, #60]	; (80097dc <dhcp_option_short+0x60>)
 800979e:	f00b ff47 	bl	8015630 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80097a2:	88bb      	ldrh	r3, [r7, #4]
 80097a4:	0a1b      	lsrs	r3, r3, #8
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	88fb      	ldrh	r3, [r7, #6]
 80097aa:	1c59      	adds	r1, r3, #1
 80097ac:	80f9      	strh	r1, [r7, #6]
 80097ae:	4619      	mov	r1, r3
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	440b      	add	r3, r1
 80097b4:	b2d2      	uxtb	r2, r2
 80097b6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80097b8:	88fb      	ldrh	r3, [r7, #6]
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	80fa      	strh	r2, [r7, #6]
 80097be:	461a      	mov	r2, r3
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	4413      	add	r3, r2
 80097c4:	88ba      	ldrh	r2, [r7, #4]
 80097c6:	b2d2      	uxtb	r2, r2
 80097c8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80097ca:	88fb      	ldrh	r3, [r7, #6]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	08019354 	.word	0x08019354
 80097d8:	080195c0 	.word	0x080195c0
 80097dc:	08019410 	.word	0x08019410

080097e0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
 80097ec:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80097ee:	89fb      	ldrh	r3, [r7, #14]
 80097f0:	3304      	adds	r3, #4
 80097f2:	2b44      	cmp	r3, #68	; 0x44
 80097f4:	d906      	bls.n	8009804 <dhcp_option_long+0x24>
 80097f6:	4b19      	ldr	r3, [pc, #100]	; (800985c <dhcp_option_long+0x7c>)
 80097f8:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80097fc:	4918      	ldr	r1, [pc, #96]	; (8009860 <dhcp_option_long+0x80>)
 80097fe:	4819      	ldr	r0, [pc, #100]	; (8009864 <dhcp_option_long+0x84>)
 8009800:	f00b ff16 	bl	8015630 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	0e1a      	lsrs	r2, r3, #24
 8009808:	89fb      	ldrh	r3, [r7, #14]
 800980a:	1c59      	adds	r1, r3, #1
 800980c:	81f9      	strh	r1, [r7, #14]
 800980e:	4619      	mov	r1, r3
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	440b      	add	r3, r1
 8009814:	b2d2      	uxtb	r2, r2
 8009816:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	0c1a      	lsrs	r2, r3, #16
 800981c:	89fb      	ldrh	r3, [r7, #14]
 800981e:	1c59      	adds	r1, r3, #1
 8009820:	81f9      	strh	r1, [r7, #14]
 8009822:	4619      	mov	r1, r3
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	440b      	add	r3, r1
 8009828:	b2d2      	uxtb	r2, r2
 800982a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	0a1a      	lsrs	r2, r3, #8
 8009830:	89fb      	ldrh	r3, [r7, #14]
 8009832:	1c59      	adds	r1, r3, #1
 8009834:	81f9      	strh	r1, [r7, #14]
 8009836:	4619      	mov	r1, r3
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	440b      	add	r3, r1
 800983c:	b2d2      	uxtb	r2, r2
 800983e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8009840:	89fb      	ldrh	r3, [r7, #14]
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	81fa      	strh	r2, [r7, #14]
 8009846:	461a      	mov	r2, r3
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	4413      	add	r3, r2
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	b2d2      	uxtb	r2, r2
 8009850:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8009852:	89fb      	ldrh	r3, [r7, #14]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	08019354 	.word	0x08019354
 8009860:	080195fc 	.word	0x080195fc
 8009864:	08019410 	.word	0x08019410

08009868 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b090      	sub	sp, #64	; 0x40
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8009876:	2300      	movs	r3, #0
 8009878:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800987a:	2208      	movs	r2, #8
 800987c:	2100      	movs	r1, #0
 800987e:	48be      	ldr	r0, [pc, #760]	; (8009b78 <dhcp_parse_reply+0x310>)
 8009880:	f00b f9ba 	bl	8014bf8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	895b      	ldrh	r3, [r3, #10]
 8009888:	2b2b      	cmp	r3, #43	; 0x2b
 800988a:	d802      	bhi.n	8009892 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800988c:	f06f 0301 	mvn.w	r3, #1
 8009890:	e2a8      	b.n	8009de4 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8009898:	23f0      	movs	r3, #240	; 0xf0
 800989a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	891b      	ldrh	r3, [r3, #8]
 80098a0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80098a6:	e00c      	b.n	80098c2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	895b      	ldrh	r3, [r3, #10]
 80098ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80098b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b4:	895b      	ldrh	r3, [r3, #10]
 80098b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80098bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80098c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d004      	beq.n	80098d2 <dhcp_parse_reply+0x6a>
 80098c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ca:	895b      	ldrh	r3, [r3, #10]
 80098cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d2ea      	bcs.n	80098a8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80098d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d102      	bne.n	80098de <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80098d8:	f06f 0301 	mvn.w	r3, #1
 80098dc:	e282      	b.n	8009de4 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 80098de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80098e0:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80098e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80098e4:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80098e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80098ec:	e23a      	b.n	8009d64 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 80098ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80098f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098f2:	4413      	add	r3, r2
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80098fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009902:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8009904:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009906:	3302      	adds	r3, #2
 8009908:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800990a:	8bfa      	ldrh	r2, [r7, #30]
 800990c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800990e:	429a      	cmp	r2, r3
 8009910:	d202      	bcs.n	8009918 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8009912:	f06f 0301 	mvn.w	r3, #1
 8009916:	e265      	b.n	8009de4 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8009918:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800991a:	3301      	adds	r3, #1
 800991c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800991e:	8952      	ldrh	r2, [r2, #10]
 8009920:	4293      	cmp	r3, r2
 8009922:	da07      	bge.n	8009934 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8009924:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009926:	3301      	adds	r3, #1
 8009928:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800992a:	4413      	add	r3, r2
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009932:	e00b      	b.n	800994c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d004      	beq.n	8009946 <dhcp_parse_reply+0xde>
 800993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	e000      	b.n	8009948 <dhcp_parse_reply+0xe0>
 8009946:	2300      	movs	r3, #0
 8009948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800994c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8009954:	7dfb      	ldrb	r3, [r7, #23]
 8009956:	2b3b      	cmp	r3, #59	; 0x3b
 8009958:	f200 812d 	bhi.w	8009bb6 <dhcp_parse_reply+0x34e>
 800995c:	a201      	add	r2, pc, #4	; (adr r2, 8009964 <dhcp_parse_reply+0xfc>)
 800995e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009962:	bf00      	nop
 8009964:	08009a55 	.word	0x08009a55
 8009968:	08009a65 	.word	0x08009a65
 800996c:	08009bb7 	.word	0x08009bb7
 8009970:	08009a87 	.word	0x08009a87
 8009974:	08009bb7 	.word	0x08009bb7
 8009978:	08009bb7 	.word	0x08009bb7
 800997c:	08009bb7 	.word	0x08009bb7
 8009980:	08009bb7 	.word	0x08009bb7
 8009984:	08009bb7 	.word	0x08009bb7
 8009988:	08009bb7 	.word	0x08009bb7
 800998c:	08009bb7 	.word	0x08009bb7
 8009990:	08009bb7 	.word	0x08009bb7
 8009994:	08009bb7 	.word	0x08009bb7
 8009998:	08009bb7 	.word	0x08009bb7
 800999c:	08009bb7 	.word	0x08009bb7
 80099a0:	08009bb7 	.word	0x08009bb7
 80099a4:	08009bb7 	.word	0x08009bb7
 80099a8:	08009bb7 	.word	0x08009bb7
 80099ac:	08009bb7 	.word	0x08009bb7
 80099b0:	08009bb7 	.word	0x08009bb7
 80099b4:	08009bb7 	.word	0x08009bb7
 80099b8:	08009bb7 	.word	0x08009bb7
 80099bc:	08009bb7 	.word	0x08009bb7
 80099c0:	08009bb7 	.word	0x08009bb7
 80099c4:	08009bb7 	.word	0x08009bb7
 80099c8:	08009bb7 	.word	0x08009bb7
 80099cc:	08009bb7 	.word	0x08009bb7
 80099d0:	08009bb7 	.word	0x08009bb7
 80099d4:	08009bb7 	.word	0x08009bb7
 80099d8:	08009bb7 	.word	0x08009bb7
 80099dc:	08009bb7 	.word	0x08009bb7
 80099e0:	08009bb7 	.word	0x08009bb7
 80099e4:	08009bb7 	.word	0x08009bb7
 80099e8:	08009bb7 	.word	0x08009bb7
 80099ec:	08009bb7 	.word	0x08009bb7
 80099f0:	08009bb7 	.word	0x08009bb7
 80099f4:	08009bb7 	.word	0x08009bb7
 80099f8:	08009bb7 	.word	0x08009bb7
 80099fc:	08009bb7 	.word	0x08009bb7
 8009a00:	08009bb7 	.word	0x08009bb7
 8009a04:	08009bb7 	.word	0x08009bb7
 8009a08:	08009bb7 	.word	0x08009bb7
 8009a0c:	08009bb7 	.word	0x08009bb7
 8009a10:	08009bb7 	.word	0x08009bb7
 8009a14:	08009bb7 	.word	0x08009bb7
 8009a18:	08009bb7 	.word	0x08009bb7
 8009a1c:	08009bb7 	.word	0x08009bb7
 8009a20:	08009bb7 	.word	0x08009bb7
 8009a24:	08009bb7 	.word	0x08009bb7
 8009a28:	08009bb7 	.word	0x08009bb7
 8009a2c:	08009bb7 	.word	0x08009bb7
 8009a30:	08009ab3 	.word	0x08009ab3
 8009a34:	08009ad5 	.word	0x08009ad5
 8009a38:	08009b11 	.word	0x08009b11
 8009a3c:	08009b33 	.word	0x08009b33
 8009a40:	08009bb7 	.word	0x08009bb7
 8009a44:	08009bb7 	.word	0x08009bb7
 8009a48:	08009bb7 	.word	0x08009bb7
 8009a4c:	08009b55 	.word	0x08009b55
 8009a50:	08009b95 	.word	0x08009b95
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8009a54:	2300      	movs	r3, #0
 8009a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8009a62:	e0ac      	b.n	8009bbe <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a68:	2b04      	cmp	r3, #4
 8009a6a:	d009      	beq.n	8009a80 <dhcp_parse_reply+0x218>
 8009a6c:	4b43      	ldr	r3, [pc, #268]	; (8009b7c <dhcp_parse_reply+0x314>)
 8009a6e:	f240 622e 	movw	r2, #1582	; 0x62e
 8009a72:	4943      	ldr	r1, [pc, #268]	; (8009b80 <dhcp_parse_reply+0x318>)
 8009a74:	4843      	ldr	r0, [pc, #268]	; (8009b84 <dhcp_parse_reply+0x31c>)
 8009a76:	f00b fddb 	bl	8015630 <iprintf>
 8009a7a:	f06f 0305 	mvn.w	r3, #5
 8009a7e:	e1b1      	b.n	8009de4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8009a80:	2306      	movs	r3, #6
 8009a82:	623b      	str	r3, [r7, #32]
        break;
 8009a84:	e09b      	b.n	8009bbe <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8009a86:	2304      	movs	r3, #4
 8009a88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8009a8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009a90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d209      	bcs.n	8009aac <dhcp_parse_reply+0x244>
 8009a98:	4b38      	ldr	r3, [pc, #224]	; (8009b7c <dhcp_parse_reply+0x314>)
 8009a9a:	f240 6233 	movw	r2, #1587	; 0x633
 8009a9e:	493a      	ldr	r1, [pc, #232]	; (8009b88 <dhcp_parse_reply+0x320>)
 8009aa0:	4838      	ldr	r0, [pc, #224]	; (8009b84 <dhcp_parse_reply+0x31c>)
 8009aa2:	f00b fdc5 	bl	8015630 <iprintf>
 8009aa6:	f06f 0305 	mvn.w	r3, #5
 8009aaa:	e19b      	b.n	8009de4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8009aac:	2307      	movs	r3, #7
 8009aae:	623b      	str	r3, [r7, #32]
        break;
 8009ab0:	e085      	b.n	8009bbe <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ab6:	2b04      	cmp	r3, #4
 8009ab8:	d009      	beq.n	8009ace <dhcp_parse_reply+0x266>
 8009aba:	4b30      	ldr	r3, [pc, #192]	; (8009b7c <dhcp_parse_reply+0x314>)
 8009abc:	f240 6241 	movw	r2, #1601	; 0x641
 8009ac0:	492f      	ldr	r1, [pc, #188]	; (8009b80 <dhcp_parse_reply+0x318>)
 8009ac2:	4830      	ldr	r0, [pc, #192]	; (8009b84 <dhcp_parse_reply+0x31c>)
 8009ac4:	f00b fdb4 	bl	8015630 <iprintf>
 8009ac8:	f06f 0305 	mvn.w	r3, #5
 8009acc:	e18a      	b.n	8009de4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	623b      	str	r3, [r7, #32]
        break;
 8009ad2:	e074      	b.n	8009bbe <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8009ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d009      	beq.n	8009af0 <dhcp_parse_reply+0x288>
 8009adc:	4b27      	ldr	r3, [pc, #156]	; (8009b7c <dhcp_parse_reply+0x314>)
 8009ade:	f240 624f 	movw	r2, #1615	; 0x64f
 8009ae2:	492a      	ldr	r1, [pc, #168]	; (8009b8c <dhcp_parse_reply+0x324>)
 8009ae4:	4827      	ldr	r0, [pc, #156]	; (8009b84 <dhcp_parse_reply+0x31c>)
 8009ae6:	f00b fda3 	bl	8015630 <iprintf>
 8009aea:	f06f 0305 	mvn.w	r3, #5
 8009aee:	e179      	b.n	8009de4 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8009af0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009af2:	2bf0      	cmp	r3, #240	; 0xf0
 8009af4:	d009      	beq.n	8009b0a <dhcp_parse_reply+0x2a2>
 8009af6:	4b21      	ldr	r3, [pc, #132]	; (8009b7c <dhcp_parse_reply+0x314>)
 8009af8:	f240 6251 	movw	r2, #1617	; 0x651
 8009afc:	4924      	ldr	r1, [pc, #144]	; (8009b90 <dhcp_parse_reply+0x328>)
 8009afe:	4821      	ldr	r0, [pc, #132]	; (8009b84 <dhcp_parse_reply+0x31c>)
 8009b00:	f00b fd96 	bl	8015630 <iprintf>
 8009b04:	f06f 0305 	mvn.w	r3, #5
 8009b08:	e16c      	b.n	8009de4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	623b      	str	r3, [r7, #32]
        break;
 8009b0e:	e056      	b.n	8009bbe <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8009b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d009      	beq.n	8009b2c <dhcp_parse_reply+0x2c4>
 8009b18:	4b18      	ldr	r3, [pc, #96]	; (8009b7c <dhcp_parse_reply+0x314>)
 8009b1a:	f240 6255 	movw	r2, #1621	; 0x655
 8009b1e:	491b      	ldr	r1, [pc, #108]	; (8009b8c <dhcp_parse_reply+0x324>)
 8009b20:	4818      	ldr	r0, [pc, #96]	; (8009b84 <dhcp_parse_reply+0x31c>)
 8009b22:	f00b fd85 	bl	8015630 <iprintf>
 8009b26:	f06f 0305 	mvn.w	r3, #5
 8009b2a:	e15b      	b.n	8009de4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	623b      	str	r3, [r7, #32]
        break;
 8009b30:	e045      	b.n	8009bbe <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009b32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b36:	2b04      	cmp	r3, #4
 8009b38:	d009      	beq.n	8009b4e <dhcp_parse_reply+0x2e6>
 8009b3a:	4b10      	ldr	r3, [pc, #64]	; (8009b7c <dhcp_parse_reply+0x314>)
 8009b3c:	f240 6259 	movw	r2, #1625	; 0x659
 8009b40:	490f      	ldr	r1, [pc, #60]	; (8009b80 <dhcp_parse_reply+0x318>)
 8009b42:	4810      	ldr	r0, [pc, #64]	; (8009b84 <dhcp_parse_reply+0x31c>)
 8009b44:	f00b fd74 	bl	8015630 <iprintf>
 8009b48:	f06f 0305 	mvn.w	r3, #5
 8009b4c:	e14a      	b.n	8009de4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8009b4e:	2302      	movs	r3, #2
 8009b50:	623b      	str	r3, [r7, #32]
        break;
 8009b52:	e034      	b.n	8009bbe <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b58:	2b04      	cmp	r3, #4
 8009b5a:	d009      	beq.n	8009b70 <dhcp_parse_reply+0x308>
 8009b5c:	4b07      	ldr	r3, [pc, #28]	; (8009b7c <dhcp_parse_reply+0x314>)
 8009b5e:	f240 625d 	movw	r2, #1629	; 0x65d
 8009b62:	4907      	ldr	r1, [pc, #28]	; (8009b80 <dhcp_parse_reply+0x318>)
 8009b64:	4807      	ldr	r0, [pc, #28]	; (8009b84 <dhcp_parse_reply+0x31c>)
 8009b66:	f00b fd63 	bl	8015630 <iprintf>
 8009b6a:	f06f 0305 	mvn.w	r3, #5
 8009b6e:	e139      	b.n	8009de4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8009b70:	2304      	movs	r3, #4
 8009b72:	623b      	str	r3, [r7, #32]
        break;
 8009b74:	e023      	b.n	8009bbe <dhcp_parse_reply+0x356>
 8009b76:	bf00      	nop
 8009b78:	20006a60 	.word	0x20006a60
 8009b7c:	08019354 	.word	0x08019354
 8009b80:	08019638 	.word	0x08019638
 8009b84:	08019410 	.word	0x08019410
 8009b88:	08019644 	.word	0x08019644
 8009b8c:	08019658 	.word	0x08019658
 8009b90:	08019664 	.word	0x08019664
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b98:	2b04      	cmp	r3, #4
 8009b9a:	d009      	beq.n	8009bb0 <dhcp_parse_reply+0x348>
 8009b9c:	4b93      	ldr	r3, [pc, #588]	; (8009dec <dhcp_parse_reply+0x584>)
 8009b9e:	f240 6261 	movw	r2, #1633	; 0x661
 8009ba2:	4993      	ldr	r1, [pc, #588]	; (8009df0 <dhcp_parse_reply+0x588>)
 8009ba4:	4893      	ldr	r0, [pc, #588]	; (8009df4 <dhcp_parse_reply+0x58c>)
 8009ba6:	f00b fd43 	bl	8015630 <iprintf>
 8009baa:	f06f 0305 	mvn.w	r3, #5
 8009bae:	e119      	b.n	8009de4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8009bb0:	2305      	movs	r3, #5
 8009bb2:	623b      	str	r3, [r7, #32]
        break;
 8009bb4:	e003      	b.n	8009bbe <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8009bbc:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d103      	bne.n	8009bcc <dhcp_parse_reply+0x364>
      offset++;
 8009bc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009bca:	e0a1      	b.n	8009d10 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8009bcc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	dd02      	ble.n	8009be2 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8009bdc:	f06f 0301 	mvn.w	r3, #1
 8009be0:	e100      	b.n	8009de4 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8009be2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009bea:	4413      	add	r3, r2
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	3302      	adds	r3, #2
 8009bf0:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8009bf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f000 808a 	beq.w	8009d10 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	db02      	blt.n	8009c0c <dhcp_parse_reply+0x3a4>
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	2b07      	cmp	r3, #7
 8009c0a:	dd06      	ble.n	8009c1a <dhcp_parse_reply+0x3b2>
 8009c0c:	4b77      	ldr	r3, [pc, #476]	; (8009dec <dhcp_parse_reply+0x584>)
 8009c0e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8009c12:	4979      	ldr	r1, [pc, #484]	; (8009df8 <dhcp_parse_reply+0x590>)
 8009c14:	4877      	ldr	r0, [pc, #476]	; (8009df4 <dhcp_parse_reply+0x58c>)
 8009c16:	f00b fd0b 	bl	8015630 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8009c1a:	4a78      	ldr	r2, [pc, #480]	; (8009dfc <dhcp_parse_reply+0x594>)
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
 8009c1e:	4413      	add	r3, r2
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d174      	bne.n	8009d10 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8009c26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c2a:	2b04      	cmp	r3, #4
 8009c2c:	bf28      	it	cs
 8009c2e:	2304      	movcs	r3, #4
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8009c34:	8bfb      	ldrh	r3, [r7, #30]
 8009c36:	8aba      	ldrh	r2, [r7, #20]
 8009c38:	f107 0108 	add.w	r1, r7, #8
 8009c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c3e:	f004 fa89 	bl	800e154 <pbuf_copy_partial>
 8009c42:	4603      	mov	r3, r0
 8009c44:	461a      	mov	r2, r3
 8009c46:	8abb      	ldrh	r3, [r7, #20]
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d002      	beq.n	8009c52 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8009c4c:	f06f 0301 	mvn.w	r3, #1
 8009c50:	e0c8      	b.n	8009de4 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8009c52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c56:	2b04      	cmp	r3, #4
 8009c58:	d933      	bls.n	8009cc2 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8009c5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c5e:	f003 0303 	and.w	r3, r3, #3
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d009      	beq.n	8009c7c <dhcp_parse_reply+0x414>
 8009c68:	4b60      	ldr	r3, [pc, #384]	; (8009dec <dhcp_parse_reply+0x584>)
 8009c6a:	f240 6281 	movw	r2, #1665	; 0x681
 8009c6e:	4964      	ldr	r1, [pc, #400]	; (8009e00 <dhcp_parse_reply+0x598>)
 8009c70:	4860      	ldr	r0, [pc, #384]	; (8009df4 <dhcp_parse_reply+0x58c>)
 8009c72:	f00b fcdd 	bl	8015630 <iprintf>
 8009c76:	f06f 0305 	mvn.w	r3, #5
 8009c7a:	e0b3      	b.n	8009de4 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8009c7c:	4a5f      	ldr	r2, [pc, #380]	; (8009dfc <dhcp_parse_reply+0x594>)
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	4413      	add	r3, r2
 8009c82:	2201      	movs	r2, #1
 8009c84:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f002 fce4 	bl	800c656 <lwip_htonl>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	495c      	ldr	r1, [pc, #368]	; (8009e04 <dhcp_parse_reply+0x59c>)
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8009c98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c9c:	3b04      	subs	r3, #4
 8009c9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8009ca2:	8bfb      	ldrh	r3, [r7, #30]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8009ca8:	8a7a      	ldrh	r2, [r7, #18]
 8009caa:	8bfb      	ldrh	r3, [r7, #30]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d202      	bcs.n	8009cb6 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8009cb0:	f06f 0301 	mvn.w	r3, #1
 8009cb4:	e096      	b.n	8009de4 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8009cb6:	8a7b      	ldrh	r3, [r7, #18]
 8009cb8:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8009cc0:	e79e      	b.n	8009c00 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8009cc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009cc6:	2b04      	cmp	r3, #4
 8009cc8:	d106      	bne.n	8009cd8 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f002 fcc2 	bl	800c656 <lwip_htonl>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	60bb      	str	r3, [r7, #8]
 8009cd6:	e011      	b.n	8009cfc <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8009cd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d009      	beq.n	8009cf4 <dhcp_parse_reply+0x48c>
 8009ce0:	4b42      	ldr	r3, [pc, #264]	; (8009dec <dhcp_parse_reply+0x584>)
 8009ce2:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8009ce6:	4948      	ldr	r1, [pc, #288]	; (8009e08 <dhcp_parse_reply+0x5a0>)
 8009ce8:	4842      	ldr	r0, [pc, #264]	; (8009df4 <dhcp_parse_reply+0x58c>)
 8009cea:	f00b fca1 	bl	8015630 <iprintf>
 8009cee:	f06f 0305 	mvn.w	r3, #5
 8009cf2:	e077      	b.n	8009de4 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8009cf4:	f107 0308 	add.w	r3, r7, #8
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8009cfc:	4a3f      	ldr	r2, [pc, #252]	; (8009dfc <dhcp_parse_reply+0x594>)
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	4413      	add	r3, r2
 8009d02:	2201      	movs	r2, #1
 8009d04:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	493e      	ldr	r1, [pc, #248]	; (8009e04 <dhcp_parse_reply+0x59c>)
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8009d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d12:	895b      	ldrh	r3, [r3, #10]
 8009d14:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d324      	bcc.n	8009d64 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1c:	895b      	ldrh	r3, [r3, #10]
 8009d1e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8009d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d26:	895b      	ldrh	r3, [r3, #10]
 8009d28:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8009d2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009d30:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d213      	bcs.n	8009d5e <dhcp_parse_reply+0x4f6>
        q = q->next;
 8009d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d109      	bne.n	8009d56 <dhcp_parse_reply+0x4ee>
 8009d42:	4b2a      	ldr	r3, [pc, #168]	; (8009dec <dhcp_parse_reply+0x584>)
 8009d44:	f240 629d 	movw	r2, #1693	; 0x69d
 8009d48:	4930      	ldr	r1, [pc, #192]	; (8009e0c <dhcp_parse_reply+0x5a4>)
 8009d4a:	482a      	ldr	r0, [pc, #168]	; (8009df4 <dhcp_parse_reply+0x58c>)
 8009d4c:	f00b fc70 	bl	8015630 <iprintf>
 8009d50:	f06f 0305 	mvn.w	r3, #5
 8009d54:	e046      	b.n	8009de4 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d5c:	e002      	b.n	8009d64 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8009d5e:	f06f 0301 	mvn.w	r3, #1
 8009d62:	e03f      	b.n	8009de4 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8009d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00a      	beq.n	8009d80 <dhcp_parse_reply+0x518>
 8009d6a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009d6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d206      	bcs.n	8009d80 <dhcp_parse_reply+0x518>
 8009d72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d76:	4413      	add	r3, r2
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	2bff      	cmp	r3, #255	; 0xff
 8009d7c:	f47f adb7 	bne.w	80098ee <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8009d80:	4b1e      	ldr	r3, [pc, #120]	; (8009dfc <dhcp_parse_reply+0x594>)
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d018      	beq.n	8009dba <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009d88:	4b1e      	ldr	r3, [pc, #120]	; (8009e04 <dhcp_parse_reply+0x59c>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009d8e:	4b1b      	ldr	r3, [pc, #108]	; (8009dfc <dhcp_parse_reply+0x594>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d102      	bne.n	8009da0 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d9e:	e00c      	b.n	8009dba <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d102      	bne.n	8009dac <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8009da6:	2301      	movs	r3, #1
 8009da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009daa:	e006      	b.n	8009dba <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d103      	bne.n	8009dba <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8009db2:	2301      	movs	r3, #1
 8009db4:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8009db6:	2301      	movs	r3, #1
 8009db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8009dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d006      	beq.n	8009dce <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8009dc4:	236c      	movs	r3, #108	; 0x6c
 8009dc6:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8009dc8:	23ec      	movs	r3, #236	; 0xec
 8009dca:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8009dcc:	e569      	b.n	80098a2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8009dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d006      	beq.n	8009de2 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8009dd8:	232c      	movs	r3, #44	; 0x2c
 8009dda:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8009ddc:	236c      	movs	r3, #108	; 0x6c
 8009dde:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8009de0:	e55f      	b.n	80098a2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3740      	adds	r7, #64	; 0x40
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	08019354 	.word	0x08019354
 8009df0:	08019638 	.word	0x08019638
 8009df4:	08019410 	.word	0x08019410
 8009df8:	0801967c 	.word	0x0801967c
 8009dfc:	20006a60 	.word	0x20006a60
 8009e00:	08019690 	.word	0x08019690
 8009e04:	20006a68 	.word	0x20006a68
 8009e08:	080196a8 	.word	0x080196a8
 8009e0c:	080196bc 	.word	0x080196bc

08009e10 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b08a      	sub	sp, #40	; 0x28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
 8009e1c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8009e1e:	4b60      	ldr	r3, [pc, #384]	; (8009fa0 <dhcp_recv+0x190>)
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e28:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 809d 	beq.w	8009f72 <dhcp_recv+0x162>
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	791b      	ldrb	r3, [r3, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 8098 	beq.w	8009f72 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	895b      	ldrh	r3, [r3, #10]
 8009e46:	2b2b      	cmp	r3, #43	; 0x2b
 8009e48:	f240 8095 	bls.w	8009f76 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	f040 8092 	bne.w	8009f7a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8009e56:	2300      	movs	r3, #0
 8009e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e5c:	e012      	b.n	8009e84 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8009e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e62:	6a3a      	ldr	r2, [r7, #32]
 8009e64:	4413      	add	r3, r2
 8009e66:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8009e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e6e:	69b9      	ldr	r1, [r7, #24]
 8009e70:	440b      	add	r3, r1
 8009e72:	7f1b      	ldrb	r3, [r3, #28]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	f040 8082 	bne.w	8009f7e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8009e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e7e:	3301      	adds	r3, #1
 8009e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e8a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d203      	bcs.n	8009e9a <dhcp_recv+0x8a>
 8009e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e96:	2b05      	cmp	r3, #5
 8009e98:	d9e1      	bls.n	8009e5e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f002 fbd9 	bl	800c656 <lwip_htonl>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d169      	bne.n	8009f82 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8009eae:	69f9      	ldr	r1, [r7, #28]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f7ff fcd9 	bl	8009868 <dhcp_parse_reply>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d164      	bne.n	8009f86 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8009ebc:	4b39      	ldr	r3, [pc, #228]	; (8009fa4 <dhcp_recv+0x194>)
 8009ebe:	785b      	ldrb	r3, [r3, #1]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d062      	beq.n	8009f8a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8009eca:	4b37      	ldr	r3, [pc, #220]	; (8009fa8 <dhcp_recv+0x198>)
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8009ed0:	7cfb      	ldrb	r3, [r7, #19]
 8009ed2:	2b05      	cmp	r3, #5
 8009ed4:	d12a      	bne.n	8009f2c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	795b      	ldrb	r3, [r3, #5]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d112      	bne.n	8009f04 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8009ede:	6979      	ldr	r1, [r7, #20]
 8009ee0:	6a38      	ldr	r0, [r7, #32]
 8009ee2:	f7fe fe47 	bl	8008b74 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8009ee6:	6a3b      	ldr	r3, [r7, #32]
 8009ee8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009eec:	f003 0308 	and.w	r3, r3, #8
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d003      	beq.n	8009efc <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8009ef4:	6a38      	ldr	r0, [r7, #32]
 8009ef6:	f7fe fbb5 	bl	8008664 <dhcp_check>
 8009efa:	e049      	b.n	8009f90 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8009efc:	6a38      	ldr	r0, [r7, #32]
 8009efe:	f7ff f85b 	bl	8008fb8 <dhcp_bind>
 8009f02:	e045      	b.n	8009f90 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	795b      	ldrb	r3, [r3, #5]
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d007      	beq.n	8009f1c <dhcp_recv+0x10c>
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	795b      	ldrb	r3, [r3, #5]
 8009f10:	2b04      	cmp	r3, #4
 8009f12:	d003      	beq.n	8009f1c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8009f18:	2b05      	cmp	r3, #5
 8009f1a:	d139      	bne.n	8009f90 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8009f1c:	6979      	ldr	r1, [r7, #20]
 8009f1e:	6a38      	ldr	r0, [r7, #32]
 8009f20:	f7fe fe28 	bl	8008b74 <dhcp_handle_ack>
      dhcp_bind(netif);
 8009f24:	6a38      	ldr	r0, [r7, #32]
 8009f26:	f7ff f847 	bl	8008fb8 <dhcp_bind>
 8009f2a:	e031      	b.n	8009f90 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8009f2c:	7cfb      	ldrb	r3, [r7, #19]
 8009f2e:	2b06      	cmp	r3, #6
 8009f30:	d113      	bne.n	8009f5a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d00b      	beq.n	8009f52 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	795b      	ldrb	r3, [r3, #5]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d007      	beq.n	8009f52 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8009f46:	2b04      	cmp	r3, #4
 8009f48:	d003      	beq.n	8009f52 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	795b      	ldrb	r3, [r3, #5]
 8009f4e:	2b05      	cmp	r3, #5
 8009f50:	d103      	bne.n	8009f5a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8009f52:	6a38      	ldr	r0, [r7, #32]
 8009f54:	f7fe fb6c 	bl	8008630 <dhcp_handle_nak>
 8009f58:	e01a      	b.n	8009f90 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8009f5a:	7cfb      	ldrb	r3, [r7, #19]
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d116      	bne.n	8009f8e <dhcp_recv+0x17e>
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	795b      	ldrb	r3, [r3, #5]
 8009f64:	2b06      	cmp	r3, #6
 8009f66:	d112      	bne.n	8009f8e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8009f68:	6979      	ldr	r1, [r7, #20]
 8009f6a:	6a38      	ldr	r0, [r7, #32]
 8009f6c:	f7fe fbae 	bl	80086cc <dhcp_handle_offer>
 8009f70:	e00e      	b.n	8009f90 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8009f72:	bf00      	nop
 8009f74:	e00c      	b.n	8009f90 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8009f76:	bf00      	nop
 8009f78:	e00a      	b.n	8009f90 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8009f7a:	bf00      	nop
 8009f7c:	e008      	b.n	8009f90 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8009f7e:	bf00      	nop
 8009f80:	e006      	b.n	8009f90 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8009f82:	bf00      	nop
 8009f84:	e004      	b.n	8009f90 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8009f86:	bf00      	nop
 8009f88:	e002      	b.n	8009f90 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8009f8a:	bf00      	nop
 8009f8c:	e000      	b.n	8009f90 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8009f8e:	bf00      	nop
  pbuf_free(p);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f003 fed9 	bl	800dd48 <pbuf_free>
}
 8009f96:	bf00      	nop
 8009f98:	3728      	adds	r7, #40	; 0x28
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	20006a88 	.word	0x20006a88
 8009fa4:	20006a60 	.word	0x20006a60
 8009fa8:	20006a68 	.word	0x20006a68

08009fac <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b088      	sub	sp, #32
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	603b      	str	r3, [r7, #0]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d108      	bne.n	8009fd4 <dhcp_create_msg+0x28>
 8009fc2:	4b5f      	ldr	r3, [pc, #380]	; (800a140 <dhcp_create_msg+0x194>)
 8009fc4:	f240 7269 	movw	r2, #1897	; 0x769
 8009fc8:	495e      	ldr	r1, [pc, #376]	; (800a144 <dhcp_create_msg+0x198>)
 8009fca:	485f      	ldr	r0, [pc, #380]	; (800a148 <dhcp_create_msg+0x19c>)
 8009fcc:	f00b fb30 	bl	8015630 <iprintf>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	e0b1      	b.n	800a138 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d108      	bne.n	8009fec <dhcp_create_msg+0x40>
 8009fda:	4b59      	ldr	r3, [pc, #356]	; (800a140 <dhcp_create_msg+0x194>)
 8009fdc:	f240 726a 	movw	r2, #1898	; 0x76a
 8009fe0:	495a      	ldr	r1, [pc, #360]	; (800a14c <dhcp_create_msg+0x1a0>)
 8009fe2:	4859      	ldr	r0, [pc, #356]	; (800a148 <dhcp_create_msg+0x19c>)
 8009fe4:	f00b fb24 	bl	8015630 <iprintf>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	e0a5      	b.n	800a138 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8009fec:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009ff0:	f44f 719a 	mov.w	r1, #308	; 0x134
 8009ff4:	2036      	movs	r0, #54	; 0x36
 8009ff6:	f003 fbc3 	bl	800d780 <pbuf_alloc>
 8009ffa:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800a002:	2300      	movs	r3, #0
 800a004:	e098      	b.n	800a138 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	895b      	ldrh	r3, [r3, #10]
 800a00a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800a00e:	d206      	bcs.n	800a01e <dhcp_create_msg+0x72>
 800a010:	4b4b      	ldr	r3, [pc, #300]	; (800a140 <dhcp_create_msg+0x194>)
 800a012:	f240 7271 	movw	r2, #1905	; 0x771
 800a016:	494e      	ldr	r1, [pc, #312]	; (800a150 <dhcp_create_msg+0x1a4>)
 800a018:	484b      	ldr	r0, [pc, #300]	; (800a148 <dhcp_create_msg+0x19c>)
 800a01a:	f00b fb09 	bl	8015630 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800a01e:	79fb      	ldrb	r3, [r7, #7]
 800a020:	2b03      	cmp	r3, #3
 800a022:	d103      	bne.n	800a02c <dhcp_create_msg+0x80>
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	795b      	ldrb	r3, [r3, #5]
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d10d      	bne.n	800a048 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	799b      	ldrb	r3, [r3, #6]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d105      	bne.n	800a040 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800a034:	f00b fb14 	bl	8015660 <rand>
 800a038:	4603      	mov	r3, r0
 800a03a:	461a      	mov	r2, r3
 800a03c:	4b45      	ldr	r3, [pc, #276]	; (800a154 <dhcp_create_msg+0x1a8>)
 800a03e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800a040:	4b44      	ldr	r3, [pc, #272]	; (800a154 <dhcp_create_msg+0x1a8>)
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800a04e:	f44f 729a 	mov.w	r2, #308	; 0x134
 800a052:	2100      	movs	r1, #0
 800a054:	6978      	ldr	r0, [r7, #20]
 800a056:	f00a fdcf 	bl	8014bf8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2201      	movs	r2, #1
 800a05e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	2201      	movs	r2, #1
 800a064:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4618      	mov	r0, r3
 800a076:	f002 faee 	bl	800c656 <lwip_htonl>
 800a07a:	4602      	mov	r2, r0
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800a080:	79fb      	ldrb	r3, [r7, #7]
 800a082:	2b08      	cmp	r3, #8
 800a084:	d010      	beq.n	800a0a8 <dhcp_create_msg+0xfc>
 800a086:	79fb      	ldrb	r3, [r7, #7]
 800a088:	2b04      	cmp	r3, #4
 800a08a:	d00d      	beq.n	800a0a8 <dhcp_create_msg+0xfc>
 800a08c:	79fb      	ldrb	r3, [r7, #7]
 800a08e:	2b07      	cmp	r3, #7
 800a090:	d00a      	beq.n	800a0a8 <dhcp_create_msg+0xfc>
 800a092:	79fb      	ldrb	r3, [r7, #7]
 800a094:	2b03      	cmp	r3, #3
 800a096:	d10c      	bne.n	800a0b2 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800a09c:	2b05      	cmp	r3, #5
 800a09e:	d003      	beq.n	800a0a8 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	795b      	ldrb	r3, [r3, #5]
 800a0a4:	2b04      	cmp	r3, #4
 800a0a6:	d104      	bne.n	800a0b2 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	3304      	adds	r3, #4
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	83fb      	strh	r3, [r7, #30]
 800a0b6:	e00c      	b.n	800a0d2 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800a0b8:	8bfa      	ldrh	r2, [r7, #30]
 800a0ba:	8bfb      	ldrh	r3, [r7, #30]
 800a0bc:	68f9      	ldr	r1, [r7, #12]
 800a0be:	440a      	add	r2, r1
 800a0c0:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	460a      	mov	r2, r1
 800a0ca:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800a0cc:	8bfb      	ldrh	r3, [r7, #30]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	83fb      	strh	r3, [r7, #30]
 800a0d2:	8bfb      	ldrh	r3, [r7, #30]
 800a0d4:	2b05      	cmp	r3, #5
 800a0d6:	d9ef      	bls.n	800a0b8 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800a0e0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800a0ea:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800a0f4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800a0fe:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800a108:	2301      	movs	r3, #1
 800a10a:	2235      	movs	r2, #53	; 0x35
 800a10c:	2000      	movs	r0, #0
 800a10e:	f7ff fadb 	bl	80096c8 <dhcp_option>
 800a112:	4603      	mov	r3, r0
 800a114:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800a11c:	79fa      	ldrb	r2, [r7, #7]
 800a11e:	8a7b      	ldrh	r3, [r7, #18]
 800a120:	4618      	mov	r0, r3
 800a122:	f7ff fb05 	bl	8009730 <dhcp_option_byte>
 800a126:	4603      	mov	r3, r0
 800a128:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d002      	beq.n	800a136 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	8a7a      	ldrh	r2, [r7, #18]
 800a134:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800a136:	69bb      	ldr	r3, [r7, #24]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3720      	adds	r7, #32
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	08019354 	.word	0x08019354
 800a144:	080196d0 	.word	0x080196d0
 800a148:	08019410 	.word	0x08019410
 800a14c:	080196f0 	.word	0x080196f0
 800a150:	08019710 	.word	0x08019710
 800a154:	20006788 	.word	0x20006788

0800a158 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
 800a164:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800a166:	89fb      	ldrh	r3, [r7, #14]
 800a168:	1c5a      	adds	r2, r3, #1
 800a16a:	81fa      	strh	r2, [r7, #14]
 800a16c:	461a      	mov	r2, r3
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	4413      	add	r3, r2
 800a172:	22ff      	movs	r2, #255	; 0xff
 800a174:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800a176:	e007      	b.n	800a188 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800a178:	89fb      	ldrh	r3, [r7, #14]
 800a17a:	1c5a      	adds	r2, r3, #1
 800a17c:	81fa      	strh	r2, [r7, #14]
 800a17e:	461a      	mov	r2, r3
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	4413      	add	r3, r2
 800a184:	2200      	movs	r2, #0
 800a186:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800a188:	89fb      	ldrh	r3, [r7, #14]
 800a18a:	2b43      	cmp	r3, #67	; 0x43
 800a18c:	d904      	bls.n	800a198 <dhcp_option_trailer+0x40>
 800a18e:	89fb      	ldrh	r3, [r7, #14]
 800a190:	f003 0303 	and.w	r3, r3, #3
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <dhcp_option_trailer+0x46>
 800a198:	89fb      	ldrh	r3, [r7, #14]
 800a19a:	2b43      	cmp	r3, #67	; 0x43
 800a19c:	d9ec      	bls.n	800a178 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800a19e:	89fb      	ldrh	r3, [r7, #14]
 800a1a0:	33f0      	adds	r3, #240	; 0xf0
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f003 fc48 	bl	800da3c <pbuf_realloc>
}
 800a1ac:	bf00      	nop
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d017      	beq.n	800a1f2 <dhcp_supplied_address+0x3e>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d013      	beq.n	800a1f2 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	795b      	ldrb	r3, [r3, #5]
 800a1d4:	2b0a      	cmp	r3, #10
 800a1d6:	d007      	beq.n	800a1e8 <dhcp_supplied_address+0x34>
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	795b      	ldrb	r3, [r3, #5]
 800a1dc:	2b05      	cmp	r3, #5
 800a1de:	d003      	beq.n	800a1e8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800a1e4:	2b04      	cmp	r3, #4
 800a1e6:	d101      	bne.n	800a1ec <dhcp_supplied_address+0x38>
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e000      	b.n	800a1ee <dhcp_supplied_address+0x3a>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	e000      	b.n	800a1f4 <dhcp_supplied_address+0x40>
  }
  return 0;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a208:	4915      	ldr	r1, [pc, #84]	; (800a260 <etharp_free_entry+0x60>)
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	4613      	mov	r3, r2
 800a20e:	005b      	lsls	r3, r3, #1
 800a210:	4413      	add	r3, r2
 800a212:	00db      	lsls	r3, r3, #3
 800a214:	440b      	add	r3, r1
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d013      	beq.n	800a244 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a21c:	4910      	ldr	r1, [pc, #64]	; (800a260 <etharp_free_entry+0x60>)
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	4613      	mov	r3, r2
 800a222:	005b      	lsls	r3, r3, #1
 800a224:	4413      	add	r3, r2
 800a226:	00db      	lsls	r3, r3, #3
 800a228:	440b      	add	r3, r1
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f003 fd8b 	bl	800dd48 <pbuf_free>
    arp_table[i].q = NULL;
 800a232:	490b      	ldr	r1, [pc, #44]	; (800a260 <etharp_free_entry+0x60>)
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	4613      	mov	r3, r2
 800a238:	005b      	lsls	r3, r3, #1
 800a23a:	4413      	add	r3, r2
 800a23c:	00db      	lsls	r3, r3, #3
 800a23e:	440b      	add	r3, r1
 800a240:	2200      	movs	r2, #0
 800a242:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a244:	4906      	ldr	r1, [pc, #24]	; (800a260 <etharp_free_entry+0x60>)
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	4613      	mov	r3, r2
 800a24a:	005b      	lsls	r3, r3, #1
 800a24c:	4413      	add	r3, r2
 800a24e:	00db      	lsls	r3, r3, #3
 800a250:	440b      	add	r3, r1
 800a252:	3314      	adds	r3, #20
 800a254:	2200      	movs	r2, #0
 800a256:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800a258:	bf00      	nop
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	2000678c 	.word	0x2000678c

0800a264 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a26a:	2300      	movs	r3, #0
 800a26c:	607b      	str	r3, [r7, #4]
 800a26e:	e096      	b.n	800a39e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800a270:	494f      	ldr	r1, [pc, #316]	; (800a3b0 <etharp_tmr+0x14c>)
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	4613      	mov	r3, r2
 800a276:	005b      	lsls	r3, r3, #1
 800a278:	4413      	add	r3, r2
 800a27a:	00db      	lsls	r3, r3, #3
 800a27c:	440b      	add	r3, r1
 800a27e:	3314      	adds	r3, #20
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800a284:	78fb      	ldrb	r3, [r7, #3]
 800a286:	2b00      	cmp	r3, #0
 800a288:	f000 8086 	beq.w	800a398 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800a28c:	4948      	ldr	r1, [pc, #288]	; (800a3b0 <etharp_tmr+0x14c>)
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	4613      	mov	r3, r2
 800a292:	005b      	lsls	r3, r3, #1
 800a294:	4413      	add	r3, r2
 800a296:	00db      	lsls	r3, r3, #3
 800a298:	440b      	add	r3, r1
 800a29a:	3312      	adds	r3, #18
 800a29c:	881b      	ldrh	r3, [r3, #0]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	b298      	uxth	r0, r3
 800a2a2:	4943      	ldr	r1, [pc, #268]	; (800a3b0 <etharp_tmr+0x14c>)
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	4413      	add	r3, r2
 800a2ac:	00db      	lsls	r3, r3, #3
 800a2ae:	440b      	add	r3, r1
 800a2b0:	3312      	adds	r3, #18
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a2b6:	493e      	ldr	r1, [pc, #248]	; (800a3b0 <etharp_tmr+0x14c>)
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	005b      	lsls	r3, r3, #1
 800a2be:	4413      	add	r3, r2
 800a2c0:	00db      	lsls	r3, r3, #3
 800a2c2:	440b      	add	r3, r1
 800a2c4:	3312      	adds	r3, #18
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a2cc:	d215      	bcs.n	800a2fa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a2ce:	4938      	ldr	r1, [pc, #224]	; (800a3b0 <etharp_tmr+0x14c>)
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	005b      	lsls	r3, r3, #1
 800a2d6:	4413      	add	r3, r2
 800a2d8:	00db      	lsls	r3, r3, #3
 800a2da:	440b      	add	r3, r1
 800a2dc:	3314      	adds	r3, #20
 800a2de:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d10e      	bne.n	800a302 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800a2e4:	4932      	ldr	r1, [pc, #200]	; (800a3b0 <etharp_tmr+0x14c>)
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	005b      	lsls	r3, r3, #1
 800a2ec:	4413      	add	r3, r2
 800a2ee:	00db      	lsls	r3, r3, #3
 800a2f0:	440b      	add	r3, r1
 800a2f2:	3312      	adds	r3, #18
 800a2f4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	d903      	bls.n	800a302 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f7ff ff80 	bl	800a200 <etharp_free_entry>
 800a300:	e04a      	b.n	800a398 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800a302:	492b      	ldr	r1, [pc, #172]	; (800a3b0 <etharp_tmr+0x14c>)
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	4613      	mov	r3, r2
 800a308:	005b      	lsls	r3, r3, #1
 800a30a:	4413      	add	r3, r2
 800a30c:	00db      	lsls	r3, r3, #3
 800a30e:	440b      	add	r3, r1
 800a310:	3314      	adds	r3, #20
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	2b03      	cmp	r3, #3
 800a316:	d10a      	bne.n	800a32e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a318:	4925      	ldr	r1, [pc, #148]	; (800a3b0 <etharp_tmr+0x14c>)
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	4613      	mov	r3, r2
 800a31e:	005b      	lsls	r3, r3, #1
 800a320:	4413      	add	r3, r2
 800a322:	00db      	lsls	r3, r3, #3
 800a324:	440b      	add	r3, r1
 800a326:	3314      	adds	r3, #20
 800a328:	2204      	movs	r2, #4
 800a32a:	701a      	strb	r2, [r3, #0]
 800a32c:	e034      	b.n	800a398 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800a32e:	4920      	ldr	r1, [pc, #128]	; (800a3b0 <etharp_tmr+0x14c>)
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	4613      	mov	r3, r2
 800a334:	005b      	lsls	r3, r3, #1
 800a336:	4413      	add	r3, r2
 800a338:	00db      	lsls	r3, r3, #3
 800a33a:	440b      	add	r3, r1
 800a33c:	3314      	adds	r3, #20
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	2b04      	cmp	r3, #4
 800a342:	d10a      	bne.n	800a35a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a344:	491a      	ldr	r1, [pc, #104]	; (800a3b0 <etharp_tmr+0x14c>)
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	4613      	mov	r3, r2
 800a34a:	005b      	lsls	r3, r3, #1
 800a34c:	4413      	add	r3, r2
 800a34e:	00db      	lsls	r3, r3, #3
 800a350:	440b      	add	r3, r1
 800a352:	3314      	adds	r3, #20
 800a354:	2202      	movs	r2, #2
 800a356:	701a      	strb	r2, [r3, #0]
 800a358:	e01e      	b.n	800a398 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a35a:	4915      	ldr	r1, [pc, #84]	; (800a3b0 <etharp_tmr+0x14c>)
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	4613      	mov	r3, r2
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	4413      	add	r3, r2
 800a364:	00db      	lsls	r3, r3, #3
 800a366:	440b      	add	r3, r1
 800a368:	3314      	adds	r3, #20
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d113      	bne.n	800a398 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a370:	490f      	ldr	r1, [pc, #60]	; (800a3b0 <etharp_tmr+0x14c>)
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	4613      	mov	r3, r2
 800a376:	005b      	lsls	r3, r3, #1
 800a378:	4413      	add	r3, r2
 800a37a:	00db      	lsls	r3, r3, #3
 800a37c:	440b      	add	r3, r1
 800a37e:	3308      	adds	r3, #8
 800a380:	6818      	ldr	r0, [r3, #0]
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	4613      	mov	r3, r2
 800a386:	005b      	lsls	r3, r3, #1
 800a388:	4413      	add	r3, r2
 800a38a:	00db      	lsls	r3, r3, #3
 800a38c:	4a08      	ldr	r2, [pc, #32]	; (800a3b0 <etharp_tmr+0x14c>)
 800a38e:	4413      	add	r3, r2
 800a390:	3304      	adds	r3, #4
 800a392:	4619      	mov	r1, r3
 800a394:	f000 fe72 	bl	800b07c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	3301      	adds	r3, #1
 800a39c:	607b      	str	r3, [r7, #4]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b09      	cmp	r3, #9
 800a3a2:	f77f af65 	ble.w	800a270 <etharp_tmr+0xc>
      }
    }
  }
}
 800a3a6:	bf00      	nop
 800a3a8:	bf00      	nop
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	2000678c 	.word	0x2000678c

0800a3b4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b08a      	sub	sp, #40	; 0x28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a3c2:	230a      	movs	r3, #10
 800a3c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a3c6:	230a      	movs	r3, #10
 800a3c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800a3ca:	230a      	movs	r3, #10
 800a3cc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800a3d2:	230a      	movs	r3, #10
 800a3d4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	83bb      	strh	r3, [r7, #28]
 800a3da:	2300      	movs	r3, #0
 800a3dc:	837b      	strh	r3, [r7, #26]
 800a3de:	2300      	movs	r3, #0
 800a3e0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	843b      	strh	r3, [r7, #32]
 800a3e6:	e0ae      	b.n	800a546 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800a3e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a3ec:	49a6      	ldr	r1, [pc, #664]	; (800a688 <etharp_find_entry+0x2d4>)
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	005b      	lsls	r3, r3, #1
 800a3f2:	4413      	add	r3, r2
 800a3f4:	00db      	lsls	r3, r3, #3
 800a3f6:	440b      	add	r3, r1
 800a3f8:	3314      	adds	r3, #20
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a3fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a402:	2b0a      	cmp	r3, #10
 800a404:	d105      	bne.n	800a412 <etharp_find_entry+0x5e>
 800a406:	7dfb      	ldrb	r3, [r7, #23]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d102      	bne.n	800a412 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800a40c:	8c3b      	ldrh	r3, [r7, #32]
 800a40e:	847b      	strh	r3, [r7, #34]	; 0x22
 800a410:	e095      	b.n	800a53e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a412:	7dfb      	ldrb	r3, [r7, #23]
 800a414:	2b00      	cmp	r3, #0
 800a416:	f000 8092 	beq.w	800a53e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d009      	beq.n	800a434 <etharp_find_entry+0x80>
 800a420:	7dfb      	ldrb	r3, [r7, #23]
 800a422:	2b01      	cmp	r3, #1
 800a424:	d806      	bhi.n	800a434 <etharp_find_entry+0x80>
 800a426:	4b99      	ldr	r3, [pc, #612]	; (800a68c <etharp_find_entry+0x2d8>)
 800a428:	f240 1223 	movw	r2, #291	; 0x123
 800a42c:	4998      	ldr	r1, [pc, #608]	; (800a690 <etharp_find_entry+0x2dc>)
 800a42e:	4899      	ldr	r0, [pc, #612]	; (800a694 <etharp_find_entry+0x2e0>)
 800a430:	f00b f8fe 	bl	8015630 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d020      	beq.n	800a47c <etharp_find_entry+0xc8>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6819      	ldr	r1, [r3, #0]
 800a43e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a442:	4891      	ldr	r0, [pc, #580]	; (800a688 <etharp_find_entry+0x2d4>)
 800a444:	4613      	mov	r3, r2
 800a446:	005b      	lsls	r3, r3, #1
 800a448:	4413      	add	r3, r2
 800a44a:	00db      	lsls	r3, r3, #3
 800a44c:	4403      	add	r3, r0
 800a44e:	3304      	adds	r3, #4
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4299      	cmp	r1, r3
 800a454:	d112      	bne.n	800a47c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00c      	beq.n	800a476 <etharp_find_entry+0xc2>
 800a45c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a460:	4989      	ldr	r1, [pc, #548]	; (800a688 <etharp_find_entry+0x2d4>)
 800a462:	4613      	mov	r3, r2
 800a464:	005b      	lsls	r3, r3, #1
 800a466:	4413      	add	r3, r2
 800a468:	00db      	lsls	r3, r3, #3
 800a46a:	440b      	add	r3, r1
 800a46c:	3308      	adds	r3, #8
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	429a      	cmp	r2, r3
 800a474:	d102      	bne.n	800a47c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800a476:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a47a:	e100      	b.n	800a67e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d140      	bne.n	800a504 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800a482:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a486:	4980      	ldr	r1, [pc, #512]	; (800a688 <etharp_find_entry+0x2d4>)
 800a488:	4613      	mov	r3, r2
 800a48a:	005b      	lsls	r3, r3, #1
 800a48c:	4413      	add	r3, r2
 800a48e:	00db      	lsls	r3, r3, #3
 800a490:	440b      	add	r3, r1
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d01a      	beq.n	800a4ce <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800a498:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a49c:	497a      	ldr	r1, [pc, #488]	; (800a688 <etharp_find_entry+0x2d4>)
 800a49e:	4613      	mov	r3, r2
 800a4a0:	005b      	lsls	r3, r3, #1
 800a4a2:	4413      	add	r3, r2
 800a4a4:	00db      	lsls	r3, r3, #3
 800a4a6:	440b      	add	r3, r1
 800a4a8:	3312      	adds	r3, #18
 800a4aa:	881b      	ldrh	r3, [r3, #0]
 800a4ac:	8bba      	ldrh	r2, [r7, #28]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d845      	bhi.n	800a53e <etharp_find_entry+0x18a>
            old_queue = i;
 800a4b2:	8c3b      	ldrh	r3, [r7, #32]
 800a4b4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800a4b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a4ba:	4973      	ldr	r1, [pc, #460]	; (800a688 <etharp_find_entry+0x2d4>)
 800a4bc:	4613      	mov	r3, r2
 800a4be:	005b      	lsls	r3, r3, #1
 800a4c0:	4413      	add	r3, r2
 800a4c2:	00db      	lsls	r3, r3, #3
 800a4c4:	440b      	add	r3, r1
 800a4c6:	3312      	adds	r3, #18
 800a4c8:	881b      	ldrh	r3, [r3, #0]
 800a4ca:	83bb      	strh	r3, [r7, #28]
 800a4cc:	e037      	b.n	800a53e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800a4ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a4d2:	496d      	ldr	r1, [pc, #436]	; (800a688 <etharp_find_entry+0x2d4>)
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	005b      	lsls	r3, r3, #1
 800a4d8:	4413      	add	r3, r2
 800a4da:	00db      	lsls	r3, r3, #3
 800a4dc:	440b      	add	r3, r1
 800a4de:	3312      	adds	r3, #18
 800a4e0:	881b      	ldrh	r3, [r3, #0]
 800a4e2:	8b7a      	ldrh	r2, [r7, #26]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d82a      	bhi.n	800a53e <etharp_find_entry+0x18a>
            old_pending = i;
 800a4e8:	8c3b      	ldrh	r3, [r7, #32]
 800a4ea:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800a4ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a4f0:	4965      	ldr	r1, [pc, #404]	; (800a688 <etharp_find_entry+0x2d4>)
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	005b      	lsls	r3, r3, #1
 800a4f6:	4413      	add	r3, r2
 800a4f8:	00db      	lsls	r3, r3, #3
 800a4fa:	440b      	add	r3, r1
 800a4fc:	3312      	adds	r3, #18
 800a4fe:	881b      	ldrh	r3, [r3, #0]
 800a500:	837b      	strh	r3, [r7, #26]
 800a502:	e01c      	b.n	800a53e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800a504:	7dfb      	ldrb	r3, [r7, #23]
 800a506:	2b01      	cmp	r3, #1
 800a508:	d919      	bls.n	800a53e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800a50a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a50e:	495e      	ldr	r1, [pc, #376]	; (800a688 <etharp_find_entry+0x2d4>)
 800a510:	4613      	mov	r3, r2
 800a512:	005b      	lsls	r3, r3, #1
 800a514:	4413      	add	r3, r2
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	440b      	add	r3, r1
 800a51a:	3312      	adds	r3, #18
 800a51c:	881b      	ldrh	r3, [r3, #0]
 800a51e:	8b3a      	ldrh	r2, [r7, #24]
 800a520:	429a      	cmp	r2, r3
 800a522:	d80c      	bhi.n	800a53e <etharp_find_entry+0x18a>
            old_stable = i;
 800a524:	8c3b      	ldrh	r3, [r7, #32]
 800a526:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800a528:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a52c:	4956      	ldr	r1, [pc, #344]	; (800a688 <etharp_find_entry+0x2d4>)
 800a52e:	4613      	mov	r3, r2
 800a530:	005b      	lsls	r3, r3, #1
 800a532:	4413      	add	r3, r2
 800a534:	00db      	lsls	r3, r3, #3
 800a536:	440b      	add	r3, r1
 800a538:	3312      	adds	r3, #18
 800a53a:	881b      	ldrh	r3, [r3, #0]
 800a53c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a53e:	8c3b      	ldrh	r3, [r7, #32]
 800a540:	3301      	adds	r3, #1
 800a542:	b29b      	uxth	r3, r3
 800a544:	843b      	strh	r3, [r7, #32]
 800a546:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a54a:	2b09      	cmp	r3, #9
 800a54c:	f77f af4c 	ble.w	800a3e8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800a550:	7afb      	ldrb	r3, [r7, #11]
 800a552:	f003 0302 	and.w	r3, r3, #2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d108      	bne.n	800a56c <etharp_find_entry+0x1b8>
 800a55a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a55e:	2b0a      	cmp	r3, #10
 800a560:	d107      	bne.n	800a572 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800a562:	7afb      	ldrb	r3, [r7, #11]
 800a564:	f003 0301 	and.w	r3, r3, #1
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d102      	bne.n	800a572 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800a56c:	f04f 33ff 	mov.w	r3, #4294967295
 800a570:	e085      	b.n	800a67e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800a572:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a576:	2b09      	cmp	r3, #9
 800a578:	dc02      	bgt.n	800a580 <etharp_find_entry+0x1cc>
    i = empty;
 800a57a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a57c:	843b      	strh	r3, [r7, #32]
 800a57e:	e039      	b.n	800a5f4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800a580:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a584:	2b09      	cmp	r3, #9
 800a586:	dc14      	bgt.n	800a5b2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800a588:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a58a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a58c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a590:	493d      	ldr	r1, [pc, #244]	; (800a688 <etharp_find_entry+0x2d4>)
 800a592:	4613      	mov	r3, r2
 800a594:	005b      	lsls	r3, r3, #1
 800a596:	4413      	add	r3, r2
 800a598:	00db      	lsls	r3, r3, #3
 800a59a:	440b      	add	r3, r1
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d018      	beq.n	800a5d4 <etharp_find_entry+0x220>
 800a5a2:	4b3a      	ldr	r3, [pc, #232]	; (800a68c <etharp_find_entry+0x2d8>)
 800a5a4:	f240 126d 	movw	r2, #365	; 0x16d
 800a5a8:	493b      	ldr	r1, [pc, #236]	; (800a698 <etharp_find_entry+0x2e4>)
 800a5aa:	483a      	ldr	r0, [pc, #232]	; (800a694 <etharp_find_entry+0x2e0>)
 800a5ac:	f00b f840 	bl	8015630 <iprintf>
 800a5b0:	e010      	b.n	800a5d4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800a5b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a5b6:	2b09      	cmp	r3, #9
 800a5b8:	dc02      	bgt.n	800a5c0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800a5ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5bc:	843b      	strh	r3, [r7, #32]
 800a5be:	e009      	b.n	800a5d4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800a5c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a5c4:	2b09      	cmp	r3, #9
 800a5c6:	dc02      	bgt.n	800a5ce <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800a5c8:	8bfb      	ldrh	r3, [r7, #30]
 800a5ca:	843b      	strh	r3, [r7, #32]
 800a5cc:	e002      	b.n	800a5d4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800a5ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a5d2:	e054      	b.n	800a67e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a5d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a5d8:	2b09      	cmp	r3, #9
 800a5da:	dd06      	ble.n	800a5ea <etharp_find_entry+0x236>
 800a5dc:	4b2b      	ldr	r3, [pc, #172]	; (800a68c <etharp_find_entry+0x2d8>)
 800a5de:	f240 127f 	movw	r2, #383	; 0x17f
 800a5e2:	492e      	ldr	r1, [pc, #184]	; (800a69c <etharp_find_entry+0x2e8>)
 800a5e4:	482b      	ldr	r0, [pc, #172]	; (800a694 <etharp_find_entry+0x2e0>)
 800a5e6:	f00b f823 	bl	8015630 <iprintf>
    etharp_free_entry(i);
 800a5ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7ff fe06 	bl	800a200 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a5f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a5f8:	2b09      	cmp	r3, #9
 800a5fa:	dd06      	ble.n	800a60a <etharp_find_entry+0x256>
 800a5fc:	4b23      	ldr	r3, [pc, #140]	; (800a68c <etharp_find_entry+0x2d8>)
 800a5fe:	f240 1283 	movw	r2, #387	; 0x183
 800a602:	4926      	ldr	r1, [pc, #152]	; (800a69c <etharp_find_entry+0x2e8>)
 800a604:	4823      	ldr	r0, [pc, #140]	; (800a694 <etharp_find_entry+0x2e0>)
 800a606:	f00b f813 	bl	8015630 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a60a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a60e:	491e      	ldr	r1, [pc, #120]	; (800a688 <etharp_find_entry+0x2d4>)
 800a610:	4613      	mov	r3, r2
 800a612:	005b      	lsls	r3, r3, #1
 800a614:	4413      	add	r3, r2
 800a616:	00db      	lsls	r3, r3, #3
 800a618:	440b      	add	r3, r1
 800a61a:	3314      	adds	r3, #20
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d006      	beq.n	800a630 <etharp_find_entry+0x27c>
 800a622:	4b1a      	ldr	r3, [pc, #104]	; (800a68c <etharp_find_entry+0x2d8>)
 800a624:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800a628:	491d      	ldr	r1, [pc, #116]	; (800a6a0 <etharp_find_entry+0x2ec>)
 800a62a:	481a      	ldr	r0, [pc, #104]	; (800a694 <etharp_find_entry+0x2e0>)
 800a62c:	f00b f800 	bl	8015630 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00b      	beq.n	800a64e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a636:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6819      	ldr	r1, [r3, #0]
 800a63e:	4812      	ldr	r0, [pc, #72]	; (800a688 <etharp_find_entry+0x2d4>)
 800a640:	4613      	mov	r3, r2
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	4413      	add	r3, r2
 800a646:	00db      	lsls	r3, r3, #3
 800a648:	4403      	add	r3, r0
 800a64a:	3304      	adds	r3, #4
 800a64c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800a64e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a652:	490d      	ldr	r1, [pc, #52]	; (800a688 <etharp_find_entry+0x2d4>)
 800a654:	4613      	mov	r3, r2
 800a656:	005b      	lsls	r3, r3, #1
 800a658:	4413      	add	r3, r2
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	440b      	add	r3, r1
 800a65e:	3312      	adds	r3, #18
 800a660:	2200      	movs	r2, #0
 800a662:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800a664:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a668:	4907      	ldr	r1, [pc, #28]	; (800a688 <etharp_find_entry+0x2d4>)
 800a66a:	4613      	mov	r3, r2
 800a66c:	005b      	lsls	r3, r3, #1
 800a66e:	4413      	add	r3, r2
 800a670:	00db      	lsls	r3, r3, #3
 800a672:	440b      	add	r3, r1
 800a674:	3308      	adds	r3, #8
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800a67a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3728      	adds	r7, #40	; 0x28
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	2000678c 	.word	0x2000678c
 800a68c:	08019750 	.word	0x08019750
 800a690:	080197e4 	.word	0x080197e4
 800a694:	08019824 	.word	0x08019824
 800a698:	0801984c 	.word	0x0801984c
 800a69c:	08019864 	.word	0x08019864
 800a6a0:	08019878 	.word	0x08019878

0800a6a4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b088      	sub	sp, #32
 800a6a8:	af02      	add	r7, sp, #8
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
 800a6b0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a6b8:	2b06      	cmp	r3, #6
 800a6ba:	d006      	beq.n	800a6ca <etharp_update_arp_entry+0x26>
 800a6bc:	4b48      	ldr	r3, [pc, #288]	; (800a7e0 <etharp_update_arp_entry+0x13c>)
 800a6be:	f240 12a9 	movw	r2, #425	; 0x1a9
 800a6c2:	4948      	ldr	r1, [pc, #288]	; (800a7e4 <etharp_update_arp_entry+0x140>)
 800a6c4:	4848      	ldr	r0, [pc, #288]	; (800a7e8 <etharp_update_arp_entry+0x144>)
 800a6c6:	f00a ffb3 	bl	8015630 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d012      	beq.n	800a6f6 <etharp_update_arp_entry+0x52>
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00e      	beq.n	800a6f6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	68f9      	ldr	r1, [r7, #12]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f001 f92a 	bl	800b938 <ip4_addr_isbroadcast_u32>
 800a6e4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d105      	bne.n	800a6f6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a6f2:	2be0      	cmp	r3, #224	; 0xe0
 800a6f4:	d102      	bne.n	800a6fc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a6f6:	f06f 030f 	mvn.w	r3, #15
 800a6fa:	e06c      	b.n	800a7d6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	4619      	mov	r1, r3
 800a702:	68b8      	ldr	r0, [r7, #8]
 800a704:	f7ff fe56 	bl	800a3b4 <etharp_find_entry>
 800a708:	4603      	mov	r3, r0
 800a70a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800a70c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a710:	2b00      	cmp	r3, #0
 800a712:	da02      	bge.n	800a71a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800a714:	8afb      	ldrh	r3, [r7, #22]
 800a716:	b25b      	sxtb	r3, r3
 800a718:	e05d      	b.n	800a7d6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a71a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a71e:	4933      	ldr	r1, [pc, #204]	; (800a7ec <etharp_update_arp_entry+0x148>)
 800a720:	4613      	mov	r3, r2
 800a722:	005b      	lsls	r3, r3, #1
 800a724:	4413      	add	r3, r2
 800a726:	00db      	lsls	r3, r3, #3
 800a728:	440b      	add	r3, r1
 800a72a:	3314      	adds	r3, #20
 800a72c:	2202      	movs	r2, #2
 800a72e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800a730:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a734:	492d      	ldr	r1, [pc, #180]	; (800a7ec <etharp_update_arp_entry+0x148>)
 800a736:	4613      	mov	r3, r2
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	4413      	add	r3, r2
 800a73c:	00db      	lsls	r3, r3, #3
 800a73e:	440b      	add	r3, r1
 800a740:	3308      	adds	r3, #8
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800a746:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a74a:	4613      	mov	r3, r2
 800a74c:	005b      	lsls	r3, r3, #1
 800a74e:	4413      	add	r3, r2
 800a750:	00db      	lsls	r3, r3, #3
 800a752:	3308      	adds	r3, #8
 800a754:	4a25      	ldr	r2, [pc, #148]	; (800a7ec <etharp_update_arp_entry+0x148>)
 800a756:	4413      	add	r3, r2
 800a758:	3304      	adds	r3, #4
 800a75a:	2206      	movs	r2, #6
 800a75c:	6879      	ldr	r1, [r7, #4]
 800a75e:	4618      	mov	r0, r3
 800a760:	f00a fa22 	bl	8014ba8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800a764:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a768:	4920      	ldr	r1, [pc, #128]	; (800a7ec <etharp_update_arp_entry+0x148>)
 800a76a:	4613      	mov	r3, r2
 800a76c:	005b      	lsls	r3, r3, #1
 800a76e:	4413      	add	r3, r2
 800a770:	00db      	lsls	r3, r3, #3
 800a772:	440b      	add	r3, r1
 800a774:	3312      	adds	r3, #18
 800a776:	2200      	movs	r2, #0
 800a778:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800a77a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a77e:	491b      	ldr	r1, [pc, #108]	; (800a7ec <etharp_update_arp_entry+0x148>)
 800a780:	4613      	mov	r3, r2
 800a782:	005b      	lsls	r3, r3, #1
 800a784:	4413      	add	r3, r2
 800a786:	00db      	lsls	r3, r3, #3
 800a788:	440b      	add	r3, r1
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d021      	beq.n	800a7d4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800a790:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a794:	4915      	ldr	r1, [pc, #84]	; (800a7ec <etharp_update_arp_entry+0x148>)
 800a796:	4613      	mov	r3, r2
 800a798:	005b      	lsls	r3, r3, #1
 800a79a:	4413      	add	r3, r2
 800a79c:	00db      	lsls	r3, r3, #3
 800a79e:	440b      	add	r3, r1
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800a7a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a7a8:	4910      	ldr	r1, [pc, #64]	; (800a7ec <etharp_update_arp_entry+0x148>)
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	005b      	lsls	r3, r3, #1
 800a7ae:	4413      	add	r3, r2
 800a7b0:	00db      	lsls	r3, r3, #3
 800a7b2:	440b      	add	r3, r1
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800a7be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6939      	ldr	r1, [r7, #16]
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f00a f851 	bl	8014870 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800a7ce:	6938      	ldr	r0, [r7, #16]
 800a7d0:	f003 faba 	bl	800dd48 <pbuf_free>
  }
  return ERR_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3718      	adds	r7, #24
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	08019750 	.word	0x08019750
 800a7e4:	080198a4 	.word	0x080198a4
 800a7e8:	08019824 	.word	0x08019824
 800a7ec:	2000678c 	.word	0x2000678c

0800a7f0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	60fb      	str	r3, [r7, #12]
 800a7fc:	e01e      	b.n	800a83c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800a7fe:	4913      	ldr	r1, [pc, #76]	; (800a84c <etharp_cleanup_netif+0x5c>)
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	4613      	mov	r3, r2
 800a804:	005b      	lsls	r3, r3, #1
 800a806:	4413      	add	r3, r2
 800a808:	00db      	lsls	r3, r3, #3
 800a80a:	440b      	add	r3, r1
 800a80c:	3314      	adds	r3, #20
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800a812:	7afb      	ldrb	r3, [r7, #11]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00e      	beq.n	800a836 <etharp_cleanup_netif+0x46>
 800a818:	490c      	ldr	r1, [pc, #48]	; (800a84c <etharp_cleanup_netif+0x5c>)
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	4613      	mov	r3, r2
 800a81e:	005b      	lsls	r3, r3, #1
 800a820:	4413      	add	r3, r2
 800a822:	00db      	lsls	r3, r3, #3
 800a824:	440b      	add	r3, r1
 800a826:	3308      	adds	r3, #8
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d102      	bne.n	800a836 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f7ff fce5 	bl	800a200 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	3301      	adds	r3, #1
 800a83a:	60fb      	str	r3, [r7, #12]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2b09      	cmp	r3, #9
 800a840:	dddd      	ble.n	800a7fe <etharp_cleanup_netif+0xe>
    }
  }
}
 800a842:	bf00      	nop
 800a844:	bf00      	nop
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	2000678c 	.word	0x2000678c

0800a850 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800a850:	b5b0      	push	{r4, r5, r7, lr}
 800a852:	b08a      	sub	sp, #40	; 0x28
 800a854:	af04      	add	r7, sp, #16
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d107      	bne.n	800a870 <etharp_input+0x20>
 800a860:	4b3f      	ldr	r3, [pc, #252]	; (800a960 <etharp_input+0x110>)
 800a862:	f240 228a 	movw	r2, #650	; 0x28a
 800a866:	493f      	ldr	r1, [pc, #252]	; (800a964 <etharp_input+0x114>)
 800a868:	483f      	ldr	r0, [pc, #252]	; (800a968 <etharp_input+0x118>)
 800a86a:	f00a fee1 	bl	8015630 <iprintf>
 800a86e:	e074      	b.n	800a95a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a880:	d10c      	bne.n	800a89c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a886:	2b06      	cmp	r3, #6
 800a888:	d108      	bne.n	800a89c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a88e:	2b04      	cmp	r3, #4
 800a890:	d104      	bne.n	800a89c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	885b      	ldrh	r3, [r3, #2]
 800a896:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a898:	2b08      	cmp	r3, #8
 800a89a:	d003      	beq.n	800a8a4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f003 fa53 	bl	800dd48 <pbuf_free>
    return;
 800a8a2:	e05a      	b.n	800a95a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	330e      	adds	r3, #14
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	3318      	adds	r3, #24
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d102      	bne.n	800a8c4 <etharp_input+0x74>
    for_us = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	75fb      	strb	r3, [r7, #23]
 800a8c2:	e009      	b.n	800a8d8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	bf0c      	ite	eq
 800a8d0:	2301      	moveq	r3, #1
 800a8d2:	2300      	movne	r3, #0
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	f103 0208 	add.w	r2, r3, #8
 800a8de:	7dfb      	ldrb	r3, [r7, #23]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d001      	beq.n	800a8e8 <etharp_input+0x98>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e000      	b.n	800a8ea <etharp_input+0x9a>
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	f107 010c 	add.w	r1, r7, #12
 800a8ee:	6838      	ldr	r0, [r7, #0]
 800a8f0:	f7ff fed8 	bl	800a6a4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	88db      	ldrh	r3, [r3, #6]
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8fe:	d003      	beq.n	800a908 <etharp_input+0xb8>
 800a900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a904:	d01e      	beq.n	800a944 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800a906:	e025      	b.n	800a954 <etharp_input+0x104>
      if (for_us) {
 800a908:	7dfb      	ldrb	r3, [r7, #23]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d021      	beq.n	800a952 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	3208      	adds	r2, #8
        etharp_raw(netif,
 800a928:	2102      	movs	r1, #2
 800a92a:	9103      	str	r1, [sp, #12]
 800a92c:	f107 010c 	add.w	r1, r7, #12
 800a930:	9102      	str	r1, [sp, #8]
 800a932:	9201      	str	r2, [sp, #4]
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	462b      	mov	r3, r5
 800a938:	4622      	mov	r2, r4
 800a93a:	4601      	mov	r1, r0
 800a93c:	6838      	ldr	r0, [r7, #0]
 800a93e:	f000 faef 	bl	800af20 <etharp_raw>
      break;
 800a942:	e006      	b.n	800a952 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800a944:	f107 030c 	add.w	r3, r7, #12
 800a948:	4619      	mov	r1, r3
 800a94a:	6838      	ldr	r0, [r7, #0]
 800a94c:	f7fe f9f0 	bl	8008d30 <dhcp_arp_reply>
      break;
 800a950:	e000      	b.n	800a954 <etharp_input+0x104>
      break;
 800a952:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f003 f9f7 	bl	800dd48 <pbuf_free>
}
 800a95a:	3718      	adds	r7, #24
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bdb0      	pop	{r4, r5, r7, pc}
 800a960:	08019750 	.word	0x08019750
 800a964:	080198fc 	.word	0x080198fc
 800a968:	08019824 	.word	0x08019824

0800a96c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b086      	sub	sp, #24
 800a970:	af02      	add	r7, sp, #8
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	4613      	mov	r3, r2
 800a978:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a97a:	79fa      	ldrb	r2, [r7, #7]
 800a97c:	4944      	ldr	r1, [pc, #272]	; (800aa90 <etharp_output_to_arp_index+0x124>)
 800a97e:	4613      	mov	r3, r2
 800a980:	005b      	lsls	r3, r3, #1
 800a982:	4413      	add	r3, r2
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	440b      	add	r3, r1
 800a988:	3314      	adds	r3, #20
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d806      	bhi.n	800a99e <etharp_output_to_arp_index+0x32>
 800a990:	4b40      	ldr	r3, [pc, #256]	; (800aa94 <etharp_output_to_arp_index+0x128>)
 800a992:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a996:	4940      	ldr	r1, [pc, #256]	; (800aa98 <etharp_output_to_arp_index+0x12c>)
 800a998:	4840      	ldr	r0, [pc, #256]	; (800aa9c <etharp_output_to_arp_index+0x130>)
 800a99a:	f00a fe49 	bl	8015630 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a99e:	79fa      	ldrb	r2, [r7, #7]
 800a9a0:	493b      	ldr	r1, [pc, #236]	; (800aa90 <etharp_output_to_arp_index+0x124>)
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	005b      	lsls	r3, r3, #1
 800a9a6:	4413      	add	r3, r2
 800a9a8:	00db      	lsls	r3, r3, #3
 800a9aa:	440b      	add	r3, r1
 800a9ac:	3314      	adds	r3, #20
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d153      	bne.n	800aa5c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a9b4:	79fa      	ldrb	r2, [r7, #7]
 800a9b6:	4936      	ldr	r1, [pc, #216]	; (800aa90 <etharp_output_to_arp_index+0x124>)
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	005b      	lsls	r3, r3, #1
 800a9bc:	4413      	add	r3, r2
 800a9be:	00db      	lsls	r3, r3, #3
 800a9c0:	440b      	add	r3, r1
 800a9c2:	3312      	adds	r3, #18
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800a9ca:	d919      	bls.n	800aa00 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a9cc:	79fa      	ldrb	r2, [r7, #7]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	005b      	lsls	r3, r3, #1
 800a9d2:	4413      	add	r3, r2
 800a9d4:	00db      	lsls	r3, r3, #3
 800a9d6:	4a2e      	ldr	r2, [pc, #184]	; (800aa90 <etharp_output_to_arp_index+0x124>)
 800a9d8:	4413      	add	r3, r2
 800a9da:	3304      	adds	r3, #4
 800a9dc:	4619      	mov	r1, r3
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f000 fb4c 	bl	800b07c <etharp_request>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d138      	bne.n	800aa5c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a9ea:	79fa      	ldrb	r2, [r7, #7]
 800a9ec:	4928      	ldr	r1, [pc, #160]	; (800aa90 <etharp_output_to_arp_index+0x124>)
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	005b      	lsls	r3, r3, #1
 800a9f2:	4413      	add	r3, r2
 800a9f4:	00db      	lsls	r3, r3, #3
 800a9f6:	440b      	add	r3, r1
 800a9f8:	3314      	adds	r3, #20
 800a9fa:	2203      	movs	r2, #3
 800a9fc:	701a      	strb	r2, [r3, #0]
 800a9fe:	e02d      	b.n	800aa5c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800aa00:	79fa      	ldrb	r2, [r7, #7]
 800aa02:	4923      	ldr	r1, [pc, #140]	; (800aa90 <etharp_output_to_arp_index+0x124>)
 800aa04:	4613      	mov	r3, r2
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	4413      	add	r3, r2
 800aa0a:	00db      	lsls	r3, r3, #3
 800aa0c:	440b      	add	r3, r1
 800aa0e:	3312      	adds	r3, #18
 800aa10:	881b      	ldrh	r3, [r3, #0]
 800aa12:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800aa16:	d321      	bcc.n	800aa5c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800aa18:	79fa      	ldrb	r2, [r7, #7]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	005b      	lsls	r3, r3, #1
 800aa1e:	4413      	add	r3, r2
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	4a1b      	ldr	r2, [pc, #108]	; (800aa90 <etharp_output_to_arp_index+0x124>)
 800aa24:	4413      	add	r3, r2
 800aa26:	1d19      	adds	r1, r3, #4
 800aa28:	79fa      	ldrb	r2, [r7, #7]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	005b      	lsls	r3, r3, #1
 800aa2e:	4413      	add	r3, r2
 800aa30:	00db      	lsls	r3, r3, #3
 800aa32:	3308      	adds	r3, #8
 800aa34:	4a16      	ldr	r2, [pc, #88]	; (800aa90 <etharp_output_to_arp_index+0x124>)
 800aa36:	4413      	add	r3, r2
 800aa38:	3304      	adds	r3, #4
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 fafb 	bl	800b038 <etharp_request_dst>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d109      	bne.n	800aa5c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800aa48:	79fa      	ldrb	r2, [r7, #7]
 800aa4a:	4911      	ldr	r1, [pc, #68]	; (800aa90 <etharp_output_to_arp_index+0x124>)
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	005b      	lsls	r3, r3, #1
 800aa50:	4413      	add	r3, r2
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	440b      	add	r3, r1
 800aa56:	3314      	adds	r3, #20
 800aa58:	2203      	movs	r2, #3
 800aa5a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800aa62:	79fa      	ldrb	r2, [r7, #7]
 800aa64:	4613      	mov	r3, r2
 800aa66:	005b      	lsls	r3, r3, #1
 800aa68:	4413      	add	r3, r2
 800aa6a:	00db      	lsls	r3, r3, #3
 800aa6c:	3308      	adds	r3, #8
 800aa6e:	4a08      	ldr	r2, [pc, #32]	; (800aa90 <etharp_output_to_arp_index+0x124>)
 800aa70:	4413      	add	r3, r2
 800aa72:	3304      	adds	r3, #4
 800aa74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa78:	9200      	str	r2, [sp, #0]
 800aa7a:	460a      	mov	r2, r1
 800aa7c:	68b9      	ldr	r1, [r7, #8]
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	f009 fef6 	bl	8014870 <ethernet_output>
 800aa84:	4603      	mov	r3, r0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	2000678c 	.word	0x2000678c
 800aa94:	08019750 	.word	0x08019750
 800aa98:	0801991c 	.word	0x0801991c
 800aa9c:	08019824 	.word	0x08019824

0800aaa0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b08a      	sub	sp, #40	; 0x28
 800aaa4:	af02      	add	r7, sp, #8
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d106      	bne.n	800aac4 <etharp_output+0x24>
 800aab6:	4b73      	ldr	r3, [pc, #460]	; (800ac84 <etharp_output+0x1e4>)
 800aab8:	f240 321e 	movw	r2, #798	; 0x31e
 800aabc:	4972      	ldr	r1, [pc, #456]	; (800ac88 <etharp_output+0x1e8>)
 800aabe:	4873      	ldr	r0, [pc, #460]	; (800ac8c <etharp_output+0x1ec>)
 800aac0:	f00a fdb6 	bl	8015630 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d106      	bne.n	800aad8 <etharp_output+0x38>
 800aaca:	4b6e      	ldr	r3, [pc, #440]	; (800ac84 <etharp_output+0x1e4>)
 800aacc:	f240 321f 	movw	r2, #799	; 0x31f
 800aad0:	496f      	ldr	r1, [pc, #444]	; (800ac90 <etharp_output+0x1f0>)
 800aad2:	486e      	ldr	r0, [pc, #440]	; (800ac8c <etharp_output+0x1ec>)
 800aad4:	f00a fdac 	bl	8015630 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d106      	bne.n	800aaec <etharp_output+0x4c>
 800aade:	4b69      	ldr	r3, [pc, #420]	; (800ac84 <etharp_output+0x1e4>)
 800aae0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800aae4:	496b      	ldr	r1, [pc, #428]	; (800ac94 <etharp_output+0x1f4>)
 800aae6:	4869      	ldr	r0, [pc, #420]	; (800ac8c <etharp_output+0x1ec>)
 800aae8:	f00a fda2 	bl	8015630 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68f9      	ldr	r1, [r7, #12]
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f000 ff20 	bl	800b938 <ip4_addr_isbroadcast_u32>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d002      	beq.n	800ab04 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800aafe:	4b66      	ldr	r3, [pc, #408]	; (800ac98 <etharp_output+0x1f8>)
 800ab00:	61fb      	str	r3, [r7, #28]
 800ab02:	e0af      	b.n	800ac64 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab0c:	2be0      	cmp	r3, #224	; 0xe0
 800ab0e:	d118      	bne.n	800ab42 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ab10:	2301      	movs	r3, #1
 800ab12:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ab14:	2300      	movs	r3, #0
 800ab16:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ab18:	235e      	movs	r3, #94	; 0x5e
 800ab1a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	3302      	adds	r3, #2
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	3303      	adds	r3, #3
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ab3a:	f107 0310 	add.w	r3, r7, #16
 800ab3e:	61fb      	str	r3, [r7, #28]
 800ab40:	e090      	b.n	800ac64 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	3304      	adds	r3, #4
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	405a      	eors	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	3308      	adds	r3, #8
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4013      	ands	r3, r2
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d012      	beq.n	800ab80 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ab60:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d00b      	beq.n	800ab80 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	330c      	adds	r3, #12
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d003      	beq.n	800ab7a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	330c      	adds	r3, #12
 800ab76:	61bb      	str	r3, [r7, #24]
 800ab78:	e002      	b.n	800ab80 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ab7a:	f06f 0303 	mvn.w	r3, #3
 800ab7e:	e07d      	b.n	800ac7c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ab80:	4b46      	ldr	r3, [pc, #280]	; (800ac9c <etharp_output+0x1fc>)
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	4619      	mov	r1, r3
 800ab86:	4a46      	ldr	r2, [pc, #280]	; (800aca0 <etharp_output+0x200>)
 800ab88:	460b      	mov	r3, r1
 800ab8a:	005b      	lsls	r3, r3, #1
 800ab8c:	440b      	add	r3, r1
 800ab8e:	00db      	lsls	r3, r3, #3
 800ab90:	4413      	add	r3, r2
 800ab92:	3314      	adds	r3, #20
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d925      	bls.n	800abe6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ab9a:	4b40      	ldr	r3, [pc, #256]	; (800ac9c <etharp_output+0x1fc>)
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	4619      	mov	r1, r3
 800aba0:	4a3f      	ldr	r2, [pc, #252]	; (800aca0 <etharp_output+0x200>)
 800aba2:	460b      	mov	r3, r1
 800aba4:	005b      	lsls	r3, r3, #1
 800aba6:	440b      	add	r3, r1
 800aba8:	00db      	lsls	r3, r3, #3
 800abaa:	4413      	add	r3, r2
 800abac:	3308      	adds	r3, #8
 800abae:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d117      	bne.n	800abe6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	4b38      	ldr	r3, [pc, #224]	; (800ac9c <etharp_output+0x1fc>)
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	4618      	mov	r0, r3
 800abc0:	4937      	ldr	r1, [pc, #220]	; (800aca0 <etharp_output+0x200>)
 800abc2:	4603      	mov	r3, r0
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	4403      	add	r3, r0
 800abc8:	00db      	lsls	r3, r3, #3
 800abca:	440b      	add	r3, r1
 800abcc:	3304      	adds	r3, #4
 800abce:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d108      	bne.n	800abe6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800abd4:	4b31      	ldr	r3, [pc, #196]	; (800ac9c <etharp_output+0x1fc>)
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	461a      	mov	r2, r3
 800abda:	68b9      	ldr	r1, [r7, #8]
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f7ff fec5 	bl	800a96c <etharp_output_to_arp_index>
 800abe2:	4603      	mov	r3, r0
 800abe4:	e04a      	b.n	800ac7c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800abe6:	2300      	movs	r3, #0
 800abe8:	75fb      	strb	r3, [r7, #23]
 800abea:	e031      	b.n	800ac50 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800abec:	7dfa      	ldrb	r2, [r7, #23]
 800abee:	492c      	ldr	r1, [pc, #176]	; (800aca0 <etharp_output+0x200>)
 800abf0:	4613      	mov	r3, r2
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	4413      	add	r3, r2
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	440b      	add	r3, r1
 800abfa:	3314      	adds	r3, #20
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d923      	bls.n	800ac4a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ac02:	7dfa      	ldrb	r2, [r7, #23]
 800ac04:	4926      	ldr	r1, [pc, #152]	; (800aca0 <etharp_output+0x200>)
 800ac06:	4613      	mov	r3, r2
 800ac08:	005b      	lsls	r3, r3, #1
 800ac0a:	4413      	add	r3, r2
 800ac0c:	00db      	lsls	r3, r3, #3
 800ac0e:	440b      	add	r3, r1
 800ac10:	3308      	adds	r3, #8
 800ac12:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d117      	bne.n	800ac4a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	6819      	ldr	r1, [r3, #0]
 800ac1e:	7dfa      	ldrb	r2, [r7, #23]
 800ac20:	481f      	ldr	r0, [pc, #124]	; (800aca0 <etharp_output+0x200>)
 800ac22:	4613      	mov	r3, r2
 800ac24:	005b      	lsls	r3, r3, #1
 800ac26:	4413      	add	r3, r2
 800ac28:	00db      	lsls	r3, r3, #3
 800ac2a:	4403      	add	r3, r0
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ac30:	4299      	cmp	r1, r3
 800ac32:	d10a      	bne.n	800ac4a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ac34:	4a19      	ldr	r2, [pc, #100]	; (800ac9c <etharp_output+0x1fc>)
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
 800ac38:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	68b9      	ldr	r1, [r7, #8]
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f7ff fe93 	bl	800a96c <etharp_output_to_arp_index>
 800ac46:	4603      	mov	r3, r0
 800ac48:	e018      	b.n	800ac7c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ac4a:	7dfb      	ldrb	r3, [r7, #23]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	75fb      	strb	r3, [r7, #23]
 800ac50:	7dfb      	ldrb	r3, [r7, #23]
 800ac52:	2b09      	cmp	r3, #9
 800ac54:	d9ca      	bls.n	800abec <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ac56:	68ba      	ldr	r2, [r7, #8]
 800ac58:	69b9      	ldr	r1, [r7, #24]
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f000 f822 	bl	800aca4 <etharp_query>
 800ac60:	4603      	mov	r3, r0
 800ac62:	e00b      	b.n	800ac7c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800ac6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac6e:	9300      	str	r3, [sp, #0]
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	68b9      	ldr	r1, [r7, #8]
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f009 fdfb 	bl	8014870 <ethernet_output>
 800ac7a:	4603      	mov	r3, r0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3720      	adds	r7, #32
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	08019750 	.word	0x08019750
 800ac88:	080198fc 	.word	0x080198fc
 800ac8c:	08019824 	.word	0x08019824
 800ac90:	0801994c 	.word	0x0801994c
 800ac94:	080198ec 	.word	0x080198ec
 800ac98:	0801c684 	.word	0x0801c684
 800ac9c:	2000687c 	.word	0x2000687c
 800aca0:	2000678c 	.word	0x2000678c

0800aca4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b08c      	sub	sp, #48	; 0x30
 800aca8:	af02      	add	r7, sp, #8
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	332a      	adds	r3, #42	; 0x2a
 800acb4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800acb6:	23ff      	movs	r3, #255	; 0xff
 800acb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	68f9      	ldr	r1, [r7, #12]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 fe36 	bl	800b938 <ip4_addr_isbroadcast_u32>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d10c      	bne.n	800acec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800acda:	2be0      	cmp	r3, #224	; 0xe0
 800acdc:	d006      	beq.n	800acec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d003      	beq.n	800acec <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d102      	bne.n	800acf2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800acec:	f06f 030f 	mvn.w	r3, #15
 800acf0:	e101      	b.n	800aef6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	2101      	movs	r1, #1
 800acf6:	68b8      	ldr	r0, [r7, #8]
 800acf8:	f7ff fb5c 	bl	800a3b4 <etharp_find_entry>
 800acfc:	4603      	mov	r3, r0
 800acfe:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ad00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	da02      	bge.n	800ad0e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ad08:	8a7b      	ldrh	r3, [r7, #18]
 800ad0a:	b25b      	sxtb	r3, r3
 800ad0c:	e0f3      	b.n	800aef6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ad0e:	8a7b      	ldrh	r3, [r7, #18]
 800ad10:	2b7e      	cmp	r3, #126	; 0x7e
 800ad12:	d906      	bls.n	800ad22 <etharp_query+0x7e>
 800ad14:	4b7a      	ldr	r3, [pc, #488]	; (800af00 <etharp_query+0x25c>)
 800ad16:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ad1a:	497a      	ldr	r1, [pc, #488]	; (800af04 <etharp_query+0x260>)
 800ad1c:	487a      	ldr	r0, [pc, #488]	; (800af08 <etharp_query+0x264>)
 800ad1e:	f00a fc87 	bl	8015630 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ad22:	8a7b      	ldrh	r3, [r7, #18]
 800ad24:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ad26:	7c7a      	ldrb	r2, [r7, #17]
 800ad28:	4978      	ldr	r1, [pc, #480]	; (800af0c <etharp_query+0x268>)
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	005b      	lsls	r3, r3, #1
 800ad2e:	4413      	add	r3, r2
 800ad30:	00db      	lsls	r3, r3, #3
 800ad32:	440b      	add	r3, r1
 800ad34:	3314      	adds	r3, #20
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d115      	bne.n	800ad68 <etharp_query+0xc4>
    is_new_entry = 1;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ad40:	7c7a      	ldrb	r2, [r7, #17]
 800ad42:	4972      	ldr	r1, [pc, #456]	; (800af0c <etharp_query+0x268>)
 800ad44:	4613      	mov	r3, r2
 800ad46:	005b      	lsls	r3, r3, #1
 800ad48:	4413      	add	r3, r2
 800ad4a:	00db      	lsls	r3, r3, #3
 800ad4c:	440b      	add	r3, r1
 800ad4e:	3314      	adds	r3, #20
 800ad50:	2201      	movs	r2, #1
 800ad52:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ad54:	7c7a      	ldrb	r2, [r7, #17]
 800ad56:	496d      	ldr	r1, [pc, #436]	; (800af0c <etharp_query+0x268>)
 800ad58:	4613      	mov	r3, r2
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	4413      	add	r3, r2
 800ad5e:	00db      	lsls	r3, r3, #3
 800ad60:	440b      	add	r3, r1
 800ad62:	3308      	adds	r3, #8
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ad68:	7c7a      	ldrb	r2, [r7, #17]
 800ad6a:	4968      	ldr	r1, [pc, #416]	; (800af0c <etharp_query+0x268>)
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	005b      	lsls	r3, r3, #1
 800ad70:	4413      	add	r3, r2
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	440b      	add	r3, r1
 800ad76:	3314      	adds	r3, #20
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d011      	beq.n	800ada2 <etharp_query+0xfe>
 800ad7e:	7c7a      	ldrb	r2, [r7, #17]
 800ad80:	4962      	ldr	r1, [pc, #392]	; (800af0c <etharp_query+0x268>)
 800ad82:	4613      	mov	r3, r2
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	4413      	add	r3, r2
 800ad88:	00db      	lsls	r3, r3, #3
 800ad8a:	440b      	add	r3, r1
 800ad8c:	3314      	adds	r3, #20
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d806      	bhi.n	800ada2 <etharp_query+0xfe>
 800ad94:	4b5a      	ldr	r3, [pc, #360]	; (800af00 <etharp_query+0x25c>)
 800ad96:	f240 32cd 	movw	r2, #973	; 0x3cd
 800ad9a:	495d      	ldr	r1, [pc, #372]	; (800af10 <etharp_query+0x26c>)
 800ad9c:	485a      	ldr	r0, [pc, #360]	; (800af08 <etharp_query+0x264>)
 800ad9e:	f00a fc47 	bl	8015630 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ada2:	6a3b      	ldr	r3, [r7, #32]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d102      	bne.n	800adae <etharp_query+0x10a>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d10c      	bne.n	800adc8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800adae:	68b9      	ldr	r1, [r7, #8]
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f000 f963 	bl	800b07c <etharp_request>
 800adb6:	4603      	mov	r3, r0
 800adb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d102      	bne.n	800adc8 <etharp_query+0x124>
      return result;
 800adc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800adc6:	e096      	b.n	800aef6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d106      	bne.n	800addc <etharp_query+0x138>
 800adce:	4b4c      	ldr	r3, [pc, #304]	; (800af00 <etharp_query+0x25c>)
 800add0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800add4:	494f      	ldr	r1, [pc, #316]	; (800af14 <etharp_query+0x270>)
 800add6:	484c      	ldr	r0, [pc, #304]	; (800af08 <etharp_query+0x264>)
 800add8:	f00a fc2a 	bl	8015630 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800addc:	7c7a      	ldrb	r2, [r7, #17]
 800adde:	494b      	ldr	r1, [pc, #300]	; (800af0c <etharp_query+0x268>)
 800ade0:	4613      	mov	r3, r2
 800ade2:	005b      	lsls	r3, r3, #1
 800ade4:	4413      	add	r3, r2
 800ade6:	00db      	lsls	r3, r3, #3
 800ade8:	440b      	add	r3, r1
 800adea:	3314      	adds	r3, #20
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d917      	bls.n	800ae22 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800adf2:	4a49      	ldr	r2, [pc, #292]	; (800af18 <etharp_query+0x274>)
 800adf4:	7c7b      	ldrb	r3, [r7, #17]
 800adf6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800adf8:	7c7a      	ldrb	r2, [r7, #17]
 800adfa:	4613      	mov	r3, r2
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	4413      	add	r3, r2
 800ae00:	00db      	lsls	r3, r3, #3
 800ae02:	3308      	adds	r3, #8
 800ae04:	4a41      	ldr	r2, [pc, #260]	; (800af0c <etharp_query+0x268>)
 800ae06:	4413      	add	r3, r2
 800ae08:	3304      	adds	r3, #4
 800ae0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae0e:	9200      	str	r2, [sp, #0]
 800ae10:	697a      	ldr	r2, [r7, #20]
 800ae12:	6879      	ldr	r1, [r7, #4]
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f009 fd2b 	bl	8014870 <ethernet_output>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae20:	e067      	b.n	800aef2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ae22:	7c7a      	ldrb	r2, [r7, #17]
 800ae24:	4939      	ldr	r1, [pc, #228]	; (800af0c <etharp_query+0x268>)
 800ae26:	4613      	mov	r3, r2
 800ae28:	005b      	lsls	r3, r3, #1
 800ae2a:	4413      	add	r3, r2
 800ae2c:	00db      	lsls	r3, r3, #3
 800ae2e:	440b      	add	r3, r1
 800ae30:	3314      	adds	r3, #20
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d15c      	bne.n	800aef2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ae40:	e01c      	b.n	800ae7c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	895a      	ldrh	r2, [r3, #10]
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	891b      	ldrh	r3, [r3, #8]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d10a      	bne.n	800ae64 <etharp_query+0x1c0>
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d006      	beq.n	800ae64 <etharp_query+0x1c0>
 800ae56:	4b2a      	ldr	r3, [pc, #168]	; (800af00 <etharp_query+0x25c>)
 800ae58:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ae5c:	492f      	ldr	r1, [pc, #188]	; (800af1c <etharp_query+0x278>)
 800ae5e:	482a      	ldr	r0, [pc, #168]	; (800af08 <etharp_query+0x264>)
 800ae60:	f00a fbe6 	bl	8015630 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	7b1b      	ldrb	r3, [r3, #12]
 800ae68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <etharp_query+0x1d2>
        copy_needed = 1;
 800ae70:	2301      	movs	r3, #1
 800ae72:	61bb      	str	r3, [r7, #24]
        break;
 800ae74:	e005      	b.n	800ae82 <etharp_query+0x1de>
      }
      p = p->next;
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1df      	bne.n	800ae42 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d007      	beq.n	800ae98 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ae8e:	200e      	movs	r0, #14
 800ae90:	f003 f9d2 	bl	800e238 <pbuf_clone>
 800ae94:	61f8      	str	r0, [r7, #28]
 800ae96:	e004      	b.n	800aea2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ae9c:	69f8      	ldr	r0, [r7, #28]
 800ae9e:	f002 fff9 	bl	800de94 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d021      	beq.n	800aeec <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800aea8:	7c7a      	ldrb	r2, [r7, #17]
 800aeaa:	4918      	ldr	r1, [pc, #96]	; (800af0c <etharp_query+0x268>)
 800aeac:	4613      	mov	r3, r2
 800aeae:	005b      	lsls	r3, r3, #1
 800aeb0:	4413      	add	r3, r2
 800aeb2:	00db      	lsls	r3, r3, #3
 800aeb4:	440b      	add	r3, r1
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00a      	beq.n	800aed2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800aebc:	7c7a      	ldrb	r2, [r7, #17]
 800aebe:	4913      	ldr	r1, [pc, #76]	; (800af0c <etharp_query+0x268>)
 800aec0:	4613      	mov	r3, r2
 800aec2:	005b      	lsls	r3, r3, #1
 800aec4:	4413      	add	r3, r2
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	440b      	add	r3, r1
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4618      	mov	r0, r3
 800aece:	f002 ff3b 	bl	800dd48 <pbuf_free>
      }
      arp_table[i].q = p;
 800aed2:	7c7a      	ldrb	r2, [r7, #17]
 800aed4:	490d      	ldr	r1, [pc, #52]	; (800af0c <etharp_query+0x268>)
 800aed6:	4613      	mov	r3, r2
 800aed8:	005b      	lsls	r3, r3, #1
 800aeda:	4413      	add	r3, r2
 800aedc:	00db      	lsls	r3, r3, #3
 800aede:	440b      	add	r3, r1
 800aee0:	69fa      	ldr	r2, [r7, #28]
 800aee2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800aee4:	2300      	movs	r3, #0
 800aee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aeea:	e002      	b.n	800aef2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800aeec:	23ff      	movs	r3, #255	; 0xff
 800aeee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800aef2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3728      	adds	r7, #40	; 0x28
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	08019750 	.word	0x08019750
 800af04:	08019958 	.word	0x08019958
 800af08:	08019824 	.word	0x08019824
 800af0c:	2000678c 	.word	0x2000678c
 800af10:	08019968 	.word	0x08019968
 800af14:	0801994c 	.word	0x0801994c
 800af18:	2000687c 	.word	0x2000687c
 800af1c:	08019990 	.word	0x08019990

0800af20 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b08a      	sub	sp, #40	; 0x28
 800af24:	af02      	add	r7, sp, #8
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
 800af2c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d106      	bne.n	800af46 <etharp_raw+0x26>
 800af38:	4b3a      	ldr	r3, [pc, #232]	; (800b024 <etharp_raw+0x104>)
 800af3a:	f240 4257 	movw	r2, #1111	; 0x457
 800af3e:	493a      	ldr	r1, [pc, #232]	; (800b028 <etharp_raw+0x108>)
 800af40:	483a      	ldr	r0, [pc, #232]	; (800b02c <etharp_raw+0x10c>)
 800af42:	f00a fb75 	bl	8015630 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800af46:	f44f 7220 	mov.w	r2, #640	; 0x280
 800af4a:	211c      	movs	r1, #28
 800af4c:	200e      	movs	r0, #14
 800af4e:	f002 fc17 	bl	800d780 <pbuf_alloc>
 800af52:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d102      	bne.n	800af60 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800af5a:	f04f 33ff 	mov.w	r3, #4294967295
 800af5e:	e05d      	b.n	800b01c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	895b      	ldrh	r3, [r3, #10]
 800af64:	2b1b      	cmp	r3, #27
 800af66:	d806      	bhi.n	800af76 <etharp_raw+0x56>
 800af68:	4b2e      	ldr	r3, [pc, #184]	; (800b024 <etharp_raw+0x104>)
 800af6a:	f240 4262 	movw	r2, #1122	; 0x462
 800af6e:	4930      	ldr	r1, [pc, #192]	; (800b030 <etharp_raw+0x110>)
 800af70:	482e      	ldr	r0, [pc, #184]	; (800b02c <etharp_raw+0x10c>)
 800af72:	f00a fb5d 	bl	8015630 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800af7c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800af7e:	4618      	mov	r0, r3
 800af80:	f001 fb54 	bl	800c62c <lwip_htons>
 800af84:	4603      	mov	r3, r0
 800af86:	461a      	mov	r2, r3
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af92:	2b06      	cmp	r3, #6
 800af94:	d006      	beq.n	800afa4 <etharp_raw+0x84>
 800af96:	4b23      	ldr	r3, [pc, #140]	; (800b024 <etharp_raw+0x104>)
 800af98:	f240 4269 	movw	r2, #1129	; 0x469
 800af9c:	4925      	ldr	r1, [pc, #148]	; (800b034 <etharp_raw+0x114>)
 800af9e:	4823      	ldr	r0, [pc, #140]	; (800b02c <etharp_raw+0x10c>)
 800afa0:	f00a fb46 	bl	8015630 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	3308      	adds	r3, #8
 800afa8:	2206      	movs	r2, #6
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	4618      	mov	r0, r3
 800afae:	f009 fdfb 	bl	8014ba8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	3312      	adds	r3, #18
 800afb6:	2206      	movs	r2, #6
 800afb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afba:	4618      	mov	r0, r3
 800afbc:	f009 fdf4 	bl	8014ba8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	330e      	adds	r3, #14
 800afc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afc6:	6812      	ldr	r2, [r2, #0]
 800afc8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	3318      	adds	r3, #24
 800afce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afd0:	6812      	ldr	r2, [r2, #0]
 800afd2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2200      	movs	r2, #0
 800afd8:	701a      	strb	r2, [r3, #0]
 800afda:	2200      	movs	r2, #0
 800afdc:	f042 0201 	orr.w	r2, r2, #1
 800afe0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f042 0208 	orr.w	r2, r2, #8
 800afea:	709a      	strb	r2, [r3, #2]
 800afec:	2200      	movs	r2, #0
 800afee:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	2206      	movs	r2, #6
 800aff4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	2204      	movs	r2, #4
 800affa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800affc:	f640 0306 	movw	r3, #2054	; 0x806
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	68ba      	ldr	r2, [r7, #8]
 800b006:	69b9      	ldr	r1, [r7, #24]
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f009 fc31 	bl	8014870 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800b00e:	69b8      	ldr	r0, [r7, #24]
 800b010:	f002 fe9a 	bl	800dd48 <pbuf_free>
  p = NULL;
 800b014:	2300      	movs	r3, #0
 800b016:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800b018:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3720      	adds	r7, #32
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	08019750 	.word	0x08019750
 800b028:	080198fc 	.word	0x080198fc
 800b02c:	08019824 	.word	0x08019824
 800b030:	080199ac 	.word	0x080199ac
 800b034:	080199e0 	.word	0x080199e0

0800b038 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b088      	sub	sp, #32
 800b03c:	af04      	add	r7, sp, #16
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b054:	2201      	movs	r2, #1
 800b056:	9203      	str	r2, [sp, #12]
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	9202      	str	r2, [sp, #8]
 800b05c:	4a06      	ldr	r2, [pc, #24]	; (800b078 <etharp_request_dst+0x40>)
 800b05e:	9201      	str	r2, [sp, #4]
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	4603      	mov	r3, r0
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f7ff ff5a 	bl	800af20 <etharp_raw>
 800b06c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	0801c68c 	.word	0x0801c68c

0800b07c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800b086:	4a05      	ldr	r2, [pc, #20]	; (800b09c <etharp_request+0x20>)
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7ff ffd4 	bl	800b038 <etharp_request_dst>
 800b090:	4603      	mov	r3, r0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	0801c684 	.word	0x0801c684

0800b0a0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b08e      	sub	sp, #56	; 0x38
 800b0a4:	af04      	add	r7, sp, #16
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800b0aa:	4b7e      	ldr	r3, [pc, #504]	; (800b2a4 <icmp_input+0x204>)
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800b0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	f003 030f 	and.w	r3, r3, #15
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800b0c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0c2:	2b13      	cmp	r3, #19
 800b0c4:	f240 80d7 	bls.w	800b276 <icmp_input+0x1d6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	895b      	ldrh	r3, [r3, #10]
 800b0cc:	2b03      	cmp	r3, #3
 800b0ce:	f240 80d4 	bls.w	800b27a <icmp_input+0x1da>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800b0dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 80c1 	beq.w	800b268 <icmp_input+0x1c8>
 800b0e6:	2b08      	cmp	r3, #8
 800b0e8:	f040 80c1 	bne.w	800b26e <icmp_input+0x1ce>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800b0ec:	4b6e      	ldr	r3, [pc, #440]	; (800b2a8 <icmp_input+0x208>)
 800b0ee:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b0f0:	4b6c      	ldr	r3, [pc, #432]	; (800b2a4 <icmp_input+0x204>)
 800b0f2:	695b      	ldr	r3, [r3, #20]
 800b0f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0f8:	2be0      	cmp	r3, #224	; 0xe0
 800b0fa:	f000 80c5 	beq.w	800b288 <icmp_input+0x1e8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800b0fe:	4b69      	ldr	r3, [pc, #420]	; (800b2a4 <icmp_input+0x204>)
 800b100:	695b      	ldr	r3, [r3, #20]
 800b102:	4a68      	ldr	r2, [pc, #416]	; (800b2a4 <icmp_input+0x204>)
 800b104:	6812      	ldr	r2, [r2, #0]
 800b106:	4611      	mov	r1, r2
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 fc15 	bl	800b938 <ip4_addr_isbroadcast_u32>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	f040 80bb 	bne.w	800b28c <icmp_input+0x1ec>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	891b      	ldrh	r3, [r3, #8]
 800b11a:	2b07      	cmp	r3, #7
 800b11c:	f240 80af 	bls.w	800b27e <icmp_input+0x1de>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f001 fb0e 	bl	800c742 <inet_chksum_pbuf>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f002 fe0b 	bl	800dd48 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800b132:	e0b4      	b.n	800b29e <icmp_input+0x1fe>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b134:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b136:	330e      	adds	r3, #14
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f002 fd6e 	bl	800dc1c <pbuf_add_header>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d04b      	beq.n	800b1de <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	891a      	ldrh	r2, [r3, #8]
 800b14a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b14c:	4413      	add	r3, r2
 800b14e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	891b      	ldrh	r3, [r3, #8]
 800b154:	8b7a      	ldrh	r2, [r7, #26]
 800b156:	429a      	cmp	r2, r3
 800b158:	f0c0 809a 	bcc.w	800b290 <icmp_input+0x1f0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800b15c:	8b7b      	ldrh	r3, [r7, #26]
 800b15e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b162:	4619      	mov	r1, r3
 800b164:	200e      	movs	r0, #14
 800b166:	f002 fb0b 	bl	800d780 <pbuf_alloc>
 800b16a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f000 8090 	beq.w	800b294 <icmp_input+0x1f4>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	895b      	ldrh	r3, [r3, #10]
 800b178:	461a      	mov	r2, r3
 800b17a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b17c:	3308      	adds	r3, #8
 800b17e:	429a      	cmp	r2, r3
 800b180:	d203      	bcs.n	800b18a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800b182:	6978      	ldr	r0, [r7, #20]
 800b184:	f002 fde0 	bl	800dd48 <pbuf_free>
          goto icmperr;
 800b188:	e085      	b.n	800b296 <icmp_input+0x1f6>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b192:	4618      	mov	r0, r3
 800b194:	f009 fd08 	bl	8014ba8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800b198:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b19a:	4619      	mov	r1, r3
 800b19c:	6978      	ldr	r0, [r7, #20]
 800b19e:	f002 fd4d 	bl	800dc3c <pbuf_remove_header>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d009      	beq.n	800b1bc <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b1a8:	4b40      	ldr	r3, [pc, #256]	; (800b2ac <icmp_input+0x20c>)
 800b1aa:	22b6      	movs	r2, #182	; 0xb6
 800b1ac:	4940      	ldr	r1, [pc, #256]	; (800b2b0 <icmp_input+0x210>)
 800b1ae:	4841      	ldr	r0, [pc, #260]	; (800b2b4 <icmp_input+0x214>)
 800b1b0:	f00a fa3e 	bl	8015630 <iprintf>
          pbuf_free(r);
 800b1b4:	6978      	ldr	r0, [r7, #20]
 800b1b6:	f002 fdc7 	bl	800dd48 <pbuf_free>
          goto icmperr;
 800b1ba:	e06c      	b.n	800b296 <icmp_input+0x1f6>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	6978      	ldr	r0, [r7, #20]
 800b1c0:	f002 fef6 	bl	800dfb0 <pbuf_copy>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800b1ca:	6978      	ldr	r0, [r7, #20]
 800b1cc:	f002 fdbc 	bl	800dd48 <pbuf_free>
          goto icmperr;
 800b1d0:	e061      	b.n	800b296 <icmp_input+0x1f6>
        }
        /* free the original p */
        pbuf_free(p);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f002 fdb8 	bl	800dd48 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	607b      	str	r3, [r7, #4]
 800b1dc:	e00f      	b.n	800b1fe <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b1de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1e0:	330e      	adds	r3, #14
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f002 fd29 	bl	800dc3c <pbuf_remove_header>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d006      	beq.n	800b1fe <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800b1f0:	4b2e      	ldr	r3, [pc, #184]	; (800b2ac <icmp_input+0x20c>)
 800b1f2:	22c7      	movs	r2, #199	; 0xc7
 800b1f4:	4930      	ldr	r1, [pc, #192]	; (800b2b8 <icmp_input+0x218>)
 800b1f6:	482f      	ldr	r0, [pc, #188]	; (800b2b4 <icmp_input+0x214>)
 800b1f8:	f00a fa1a 	bl	8015630 <iprintf>
          goto icmperr;
 800b1fc:	e04b      	b.n	800b296 <icmp_input+0x1f6>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800b204:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f002 fd07 	bl	800dc1c <pbuf_add_header>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d12b      	bne.n	800b26c <icmp_input+0x1cc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b222:	4b20      	ldr	r3, [pc, #128]	; (800b2a4 <icmp_input+0x204>)
 800b224:	691a      	ldr	r2, [r3, #16]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	2200      	movs	r2, #0
 800b22e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	2200      	movs	r2, #0
 800b234:	709a      	strb	r2, [r3, #2]
 800b236:	2200      	movs	r2, #0
 800b238:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	22ff      	movs	r2, #255	; 0xff
 800b23e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2200      	movs	r2, #0
 800b244:	729a      	strb	r2, [r3, #10]
 800b246:	2200      	movs	r2, #0
 800b248:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	9302      	str	r3, [sp, #8]
 800b24e:	2301      	movs	r3, #1
 800b250:	9301      	str	r3, [sp, #4]
 800b252:	2300      	movs	r3, #0
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	23ff      	movs	r3, #255	; 0xff
 800b258:	2200      	movs	r2, #0
 800b25a:	69f9      	ldr	r1, [r7, #28]
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 fa93 	bl	800b788 <ip4_output_if>
 800b262:	4603      	mov	r3, r0
 800b264:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800b266:	e001      	b.n	800b26c <icmp_input+0x1cc>
      break;
 800b268:	bf00      	nop
 800b26a:	e000      	b.n	800b26e <icmp_input+0x1ce>
      break;
 800b26c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f002 fd6a 	bl	800dd48 <pbuf_free>
  return;
 800b274:	e013      	b.n	800b29e <icmp_input+0x1fe>
    goto lenerr;
 800b276:	bf00      	nop
 800b278:	e002      	b.n	800b280 <icmp_input+0x1e0>
    goto lenerr;
 800b27a:	bf00      	nop
 800b27c:	e000      	b.n	800b280 <icmp_input+0x1e0>
        goto lenerr;
 800b27e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f002 fd61 	bl	800dd48 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b286:	e00a      	b.n	800b29e <icmp_input+0x1fe>
        goto icmperr;
 800b288:	bf00      	nop
 800b28a:	e004      	b.n	800b296 <icmp_input+0x1f6>
        goto icmperr;
 800b28c:	bf00      	nop
 800b28e:	e002      	b.n	800b296 <icmp_input+0x1f6>
          goto icmperr;
 800b290:	bf00      	nop
 800b292:	e000      	b.n	800b296 <icmp_input+0x1f6>
          goto icmperr;
 800b294:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f002 fd56 	bl	800dd48 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b29c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800b29e:	3728      	adds	r7, #40	; 0x28
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	20006a88 	.word	0x20006a88
 800b2a8:	20006a9c 	.word	0x20006a9c
 800b2ac:	08019a24 	.word	0x08019a24
 800b2b0:	08019ab8 	.word	0x08019ab8
 800b2b4:	08019af0 	.word	0x08019af0
 800b2b8:	08019b18 	.word	0x08019b18

0800b2bc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800b2c8:	78fb      	ldrb	r3, [r7, #3]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	2103      	movs	r1, #3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 f814 	bl	800b2fc <icmp_send_response>
}
 800b2d4:	bf00      	nop
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800b2e8:	78fb      	ldrb	r3, [r7, #3]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	210b      	movs	r1, #11
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 f804 	bl	800b2fc <icmp_send_response>
}
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08c      	sub	sp, #48	; 0x30
 800b300:	af04      	add	r7, sp, #16
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	460b      	mov	r3, r1
 800b306:	70fb      	strb	r3, [r7, #3]
 800b308:	4613      	mov	r3, r2
 800b30a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b30c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b310:	2124      	movs	r1, #36	; 0x24
 800b312:	2022      	movs	r0, #34	; 0x22
 800b314:	f002 fa34 	bl	800d780 <pbuf_alloc>
 800b318:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d04c      	beq.n	800b3ba <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	895b      	ldrh	r3, [r3, #10]
 800b324:	2b23      	cmp	r3, #35	; 0x23
 800b326:	d806      	bhi.n	800b336 <icmp_send_response+0x3a>
 800b328:	4b26      	ldr	r3, [pc, #152]	; (800b3c4 <icmp_send_response+0xc8>)
 800b32a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b32e:	4926      	ldr	r1, [pc, #152]	; (800b3c8 <icmp_send_response+0xcc>)
 800b330:	4826      	ldr	r0, [pc, #152]	; (800b3cc <icmp_send_response+0xd0>)
 800b332:	f00a f97d 	bl	8015630 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	78fa      	ldrb	r2, [r7, #3]
 800b346:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	78ba      	ldrb	r2, [r7, #2]
 800b34c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	2200      	movs	r2, #0
 800b352:	711a      	strb	r2, [r3, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	2200      	movs	r2, #0
 800b35c:	719a      	strb	r2, [r3, #6]
 800b35e:	2200      	movs	r2, #0
 800b360:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	f103 0008 	add.w	r0, r3, #8
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	221c      	movs	r2, #28
 800b370:	4619      	mov	r1, r3
 800b372:	f009 fc19 	bl	8014ba8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800b37c:	f107 030c 	add.w	r3, r7, #12
 800b380:	4618      	mov	r0, r3
 800b382:	f000 f825 	bl	800b3d0 <ip4_route>
 800b386:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d011      	beq.n	800b3b2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2200      	movs	r2, #0
 800b392:	709a      	strb	r2, [r3, #2]
 800b394:	2200      	movs	r2, #0
 800b396:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800b398:	f107 020c 	add.w	r2, r7, #12
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	9302      	str	r3, [sp, #8]
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	23ff      	movs	r3, #255	; 0xff
 800b3aa:	2100      	movs	r1, #0
 800b3ac:	69f8      	ldr	r0, [r7, #28]
 800b3ae:	f000 f9eb 	bl	800b788 <ip4_output_if>
  }
  pbuf_free(q);
 800b3b2:	69f8      	ldr	r0, [r7, #28]
 800b3b4:	f002 fcc8 	bl	800dd48 <pbuf_free>
 800b3b8:	e000      	b.n	800b3bc <icmp_send_response+0xc0>
    return;
 800b3ba:	bf00      	nop
}
 800b3bc:	3720      	adds	r7, #32
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	08019a24 	.word	0x08019a24
 800b3c8:	08019b4c 	.word	0x08019b4c
 800b3cc:	08019af0 	.word	0x08019af0

0800b3d0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800b3d8:	4b33      	ldr	r3, [pc, #204]	; (800b4a8 <ip4_route+0xd8>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	60fb      	str	r3, [r7, #12]
 800b3de:	e036      	b.n	800b44e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b3e6:	f003 0301 	and.w	r3, r3, #1
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d02b      	beq.n	800b448 <ip4_route+0x78>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b3f6:	089b      	lsrs	r3, r3, #2
 800b3f8:	f003 0301 	and.w	r3, r3, #1
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d022      	beq.n	800b448 <ip4_route+0x78>
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	3304      	adds	r3, #4
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d01d      	beq.n	800b448 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	3304      	adds	r3, #4
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	405a      	eors	r2, r3
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	3308      	adds	r3, #8
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4013      	ands	r3, r2
 800b420:	2b00      	cmp	r3, #0
 800b422:	d101      	bne.n	800b428 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	e038      	b.n	800b49a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b42e:	f003 0302 	and.w	r3, r3, #2
 800b432:	2b00      	cmp	r3, #0
 800b434:	d108      	bne.n	800b448 <ip4_route+0x78>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	330c      	adds	r3, #12
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	429a      	cmp	r2, r3
 800b442:	d101      	bne.n	800b448 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	e028      	b.n	800b49a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	60fb      	str	r3, [r7, #12]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1c5      	bne.n	800b3e0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b454:	4b15      	ldr	r3, [pc, #84]	; (800b4ac <ip4_route+0xdc>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d01a      	beq.n	800b492 <ip4_route+0xc2>
 800b45c:	4b13      	ldr	r3, [pc, #76]	; (800b4ac <ip4_route+0xdc>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b464:	f003 0301 	and.w	r3, r3, #1
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d012      	beq.n	800b492 <ip4_route+0xc2>
 800b46c:	4b0f      	ldr	r3, [pc, #60]	; (800b4ac <ip4_route+0xdc>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b474:	f003 0304 	and.w	r3, r3, #4
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00a      	beq.n	800b492 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b47c:	4b0b      	ldr	r3, [pc, #44]	; (800b4ac <ip4_route+0xdc>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	3304      	adds	r3, #4
 800b482:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b484:	2b00      	cmp	r3, #0
 800b486:	d004      	beq.n	800b492 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	2b7f      	cmp	r3, #127	; 0x7f
 800b490:	d101      	bne.n	800b496 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800b492:	2300      	movs	r3, #0
 800b494:	e001      	b.n	800b49a <ip4_route+0xca>
  }

  return netif_default;
 800b496:	4b05      	ldr	r3, [pc, #20]	; (800b4ac <ip4_route+0xdc>)
 800b498:	681b      	ldr	r3, [r3, #0]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop
 800b4a8:	2000cfbc 	.word	0x2000cfbc
 800b4ac:	2000cfc0 	.word	0x2000cfc0

0800b4b0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b4be:	f003 0301 	and.w	r3, r3, #1
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d016      	beq.n	800b4f6 <ip4_input_accept+0x46>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	3304      	adds	r3, #4
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d011      	beq.n	800b4f6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b4d2:	4b0b      	ldr	r3, [pc, #44]	; (800b500 <ip4_input_accept+0x50>)
 800b4d4:	695a      	ldr	r2, [r3, #20]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	3304      	adds	r3, #4
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d008      	beq.n	800b4f2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800b4e0:	4b07      	ldr	r3, [pc, #28]	; (800b500 <ip4_input_accept+0x50>)
 800b4e2:	695b      	ldr	r3, [r3, #20]
 800b4e4:	6879      	ldr	r1, [r7, #4]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 fa26 	bl	800b938 <ip4_addr_isbroadcast_u32>
 800b4ec:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d001      	beq.n	800b4f6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e000      	b.n	800b4f8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3708      	adds	r7, #8
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	20006a88 	.word	0x20006a88

0800b504 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800b50e:	2301      	movs	r3, #1
 800b510:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	091b      	lsrs	r3, r3, #4
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	2b04      	cmp	r3, #4
 800b522:	d004      	beq.n	800b52e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f002 fc0f 	bl	800dd48 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800b52a:	2300      	movs	r3, #0
 800b52c:	e123      	b.n	800b776 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	f003 030f 	and.w	r3, r3, #15
 800b536:	b2db      	uxtb	r3, r3
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	885b      	ldrh	r3, [r3, #2]
 800b542:	b29b      	uxth	r3, r3
 800b544:	4618      	mov	r0, r3
 800b546:	f001 f871 	bl	800c62c <lwip_htons>
 800b54a:	4603      	mov	r3, r0
 800b54c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	891b      	ldrh	r3, [r3, #8]
 800b552:	8a3a      	ldrh	r2, [r7, #16]
 800b554:	429a      	cmp	r2, r3
 800b556:	d204      	bcs.n	800b562 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800b558:	8a3b      	ldrh	r3, [r7, #16]
 800b55a:	4619      	mov	r1, r3
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f002 fa6d 	bl	800da3c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	895b      	ldrh	r3, [r3, #10]
 800b566:	8a7a      	ldrh	r2, [r7, #18]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d807      	bhi.n	800b57c <ip4_input+0x78>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	891b      	ldrh	r3, [r3, #8]
 800b570:	8a3a      	ldrh	r2, [r7, #16]
 800b572:	429a      	cmp	r2, r3
 800b574:	d802      	bhi.n	800b57c <ip4_input+0x78>
 800b576:	8a7b      	ldrh	r3, [r7, #18]
 800b578:	2b13      	cmp	r3, #19
 800b57a:	d804      	bhi.n	800b586 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f002 fbe3 	bl	800dd48 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800b582:	2300      	movs	r3, #0
 800b584:	e0f7      	b.n	800b776 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800b586:	69fb      	ldr	r3, [r7, #28]
 800b588:	691b      	ldr	r3, [r3, #16]
 800b58a:	4a7d      	ldr	r2, [pc, #500]	; (800b780 <ip4_input+0x27c>)
 800b58c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	4a7b      	ldr	r2, [pc, #492]	; (800b780 <ip4_input+0x27c>)
 800b594:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b596:	4b7a      	ldr	r3, [pc, #488]	; (800b780 <ip4_input+0x27c>)
 800b598:	695b      	ldr	r3, [r3, #20]
 800b59a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b59e:	2be0      	cmp	r3, #224	; 0xe0
 800b5a0:	d112      	bne.n	800b5c8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b5a8:	f003 0301 	and.w	r3, r3, #1
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d007      	beq.n	800b5c2 <ip4_input+0xbe>
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	3304      	adds	r3, #4
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d002      	beq.n	800b5c2 <ip4_input+0xbe>
      netif = inp;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	61bb      	str	r3, [r7, #24]
 800b5c0:	e02a      	b.n	800b618 <ip4_input+0x114>
    } else {
      netif = NULL;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	61bb      	str	r3, [r7, #24]
 800b5c6:	e027      	b.n	800b618 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800b5c8:	6838      	ldr	r0, [r7, #0]
 800b5ca:	f7ff ff71 	bl	800b4b0 <ip4_input_accept>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d002      	beq.n	800b5da <ip4_input+0xd6>
      netif = inp;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	61bb      	str	r3, [r7, #24]
 800b5d8:	e01e      	b.n	800b618 <ip4_input+0x114>
    } else {
      netif = NULL;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800b5de:	4b68      	ldr	r3, [pc, #416]	; (800b780 <ip4_input+0x27c>)
 800b5e0:	695b      	ldr	r3, [r3, #20]
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	2b7f      	cmp	r3, #127	; 0x7f
 800b5e6:	d017      	beq.n	800b618 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800b5e8:	4b66      	ldr	r3, [pc, #408]	; (800b784 <ip4_input+0x280>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	61bb      	str	r3, [r7, #24]
 800b5ee:	e00e      	b.n	800b60e <ip4_input+0x10a>
          if (netif == inp) {
 800b5f0:	69ba      	ldr	r2, [r7, #24]
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d006      	beq.n	800b606 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800b5f8:	69b8      	ldr	r0, [r7, #24]
 800b5fa:	f7ff ff59 	bl	800b4b0 <ip4_input_accept>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d108      	bne.n	800b616 <ip4_input+0x112>
 800b604:	e000      	b.n	800b608 <ip4_input+0x104>
            continue;
 800b606:	bf00      	nop
        NETIF_FOREACH(netif) {
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	61bb      	str	r3, [r7, #24]
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d1ed      	bne.n	800b5f0 <ip4_input+0xec>
 800b614:	e000      	b.n	800b618 <ip4_input+0x114>
            break;
 800b616:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d111      	bne.n	800b642 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	7a5b      	ldrb	r3, [r3, #9]
 800b622:	2b11      	cmp	r3, #17
 800b624:	d10d      	bne.n	800b642 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800b626:	8a7b      	ldrh	r3, [r7, #18]
 800b628:	69fa      	ldr	r2, [r7, #28]
 800b62a:	4413      	add	r3, r2
 800b62c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	885b      	ldrh	r3, [r3, #2]
 800b632:	b29b      	uxth	r3, r3
 800b634:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800b638:	d103      	bne.n	800b642 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800b63e:	2300      	movs	r3, #0
 800b640:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d017      	beq.n	800b678 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800b648:	4b4d      	ldr	r3, [pc, #308]	; (800b780 <ip4_input+0x27c>)
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d013      	beq.n	800b678 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b650:	4b4b      	ldr	r3, [pc, #300]	; (800b780 <ip4_input+0x27c>)
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	6839      	ldr	r1, [r7, #0]
 800b656:	4618      	mov	r0, r3
 800b658:	f000 f96e 	bl	800b938 <ip4_addr_isbroadcast_u32>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d105      	bne.n	800b66e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800b662:	4b47      	ldr	r3, [pc, #284]	; (800b780 <ip4_input+0x27c>)
 800b664:	691b      	ldr	r3, [r3, #16]
 800b666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b66a:	2be0      	cmp	r3, #224	; 0xe0
 800b66c:	d104      	bne.n	800b678 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f002 fb6a 	bl	800dd48 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800b674:	2300      	movs	r3, #0
 800b676:	e07e      	b.n	800b776 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d104      	bne.n	800b688 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f002 fb62 	bl	800dd48 <pbuf_free>
    return ERR_OK;
 800b684:	2300      	movs	r3, #0
 800b686:	e076      	b.n	800b776 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	88db      	ldrh	r3, [r3, #6]
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	461a      	mov	r2, r3
 800b690:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800b694:	4013      	ands	r3, r2
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00b      	beq.n	800b6b2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fc92 	bl	800bfc4 <ip4_reass>
 800b6a0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <ip4_input+0x1a8>
      return ERR_OK;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	e064      	b.n	800b776 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800b6b2:	4a33      	ldr	r2, [pc, #204]	; (800b780 <ip4_input+0x27c>)
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800b6b8:	4a31      	ldr	r2, [pc, #196]	; (800b780 <ip4_input+0x27c>)
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b6be:	4a30      	ldr	r2, [pc, #192]	; (800b780 <ip4_input+0x27c>)
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f003 030f 	and.w	r3, r3, #15
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	4b2a      	ldr	r3, [pc, #168]	; (800b780 <ip4_input+0x27c>)
 800b6d6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800b6d8:	8a7b      	ldrh	r3, [r7, #18]
 800b6da:	4619      	mov	r1, r3
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f002 faad 	bl	800dc3c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	7a5b      	ldrb	r3, [r3, #9]
 800b6e6:	2b11      	cmp	r3, #17
 800b6e8:	d006      	beq.n	800b6f8 <ip4_input+0x1f4>
 800b6ea:	2b11      	cmp	r3, #17
 800b6ec:	dc13      	bgt.n	800b716 <ip4_input+0x212>
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d00c      	beq.n	800b70c <ip4_input+0x208>
 800b6f2:	2b06      	cmp	r3, #6
 800b6f4:	d005      	beq.n	800b702 <ip4_input+0x1fe>
 800b6f6:	e00e      	b.n	800b716 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800b6f8:	6839      	ldr	r1, [r7, #0]
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f008 fc1c 	bl	8013f38 <udp_input>
        break;
 800b700:	e026      	b.n	800b750 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800b702:	6839      	ldr	r1, [r7, #0]
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f004 fb91 	bl	800fe2c <tcp_input>
        break;
 800b70a:	e021      	b.n	800b750 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7ff fcc6 	bl	800b0a0 <icmp_input>
        break;
 800b714:	e01c      	b.n	800b750 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b716:	4b1a      	ldr	r3, [pc, #104]	; (800b780 <ip4_input+0x27c>)
 800b718:	695b      	ldr	r3, [r3, #20]
 800b71a:	69b9      	ldr	r1, [r7, #24]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 f90b 	bl	800b938 <ip4_addr_isbroadcast_u32>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d10f      	bne.n	800b748 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b728:	4b15      	ldr	r3, [pc, #84]	; (800b780 <ip4_input+0x27c>)
 800b72a:	695b      	ldr	r3, [r3, #20]
 800b72c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b730:	2be0      	cmp	r3, #224	; 0xe0
 800b732:	d009      	beq.n	800b748 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800b734:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b738:	4619      	mov	r1, r3
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f002 faf1 	bl	800dd22 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800b740:	2102      	movs	r1, #2
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f7ff fdba 	bl	800b2bc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f002 fafd 	bl	800dd48 <pbuf_free>
        break;
 800b74e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800b750:	4b0b      	ldr	r3, [pc, #44]	; (800b780 <ip4_input+0x27c>)
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800b756:	4b0a      	ldr	r3, [pc, #40]	; (800b780 <ip4_input+0x27c>)
 800b758:	2200      	movs	r2, #0
 800b75a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800b75c:	4b08      	ldr	r3, [pc, #32]	; (800b780 <ip4_input+0x27c>)
 800b75e:	2200      	movs	r2, #0
 800b760:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800b762:	4b07      	ldr	r3, [pc, #28]	; (800b780 <ip4_input+0x27c>)
 800b764:	2200      	movs	r2, #0
 800b766:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800b768:	4b05      	ldr	r3, [pc, #20]	; (800b780 <ip4_input+0x27c>)
 800b76a:	2200      	movs	r2, #0
 800b76c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800b76e:	4b04      	ldr	r3, [pc, #16]	; (800b780 <ip4_input+0x27c>)
 800b770:	2200      	movs	r2, #0
 800b772:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3720      	adds	r7, #32
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	20006a88 	.word	0x20006a88
 800b784:	2000cfbc 	.word	0x2000cfbc

0800b788 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b08a      	sub	sp, #40	; 0x28
 800b78c:	af04      	add	r7, sp, #16
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
 800b794:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d009      	beq.n	800b7b4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d003      	beq.n	800b7ae <ip4_output_if+0x26>
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d102      	bne.n	800b7b4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800b7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b0:	3304      	adds	r3, #4
 800b7b2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800b7b4:	78fa      	ldrb	r2, [r7, #3]
 800b7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b8:	9302      	str	r3, [sp, #8]
 800b7ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b7be:	9301      	str	r3, [sp, #4]
 800b7c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	6979      	ldr	r1, [r7, #20]
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f000 f805 	bl	800b7dc <ip4_output_if_src>
 800b7d2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3718      	adds	r7, #24
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b088      	sub	sp, #32
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	7b9b      	ldrb	r3, [r3, #14]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d006      	beq.n	800b800 <ip4_output_if_src+0x24>
 800b7f2:	4b4b      	ldr	r3, [pc, #300]	; (800b920 <ip4_output_if_src+0x144>)
 800b7f4:	f44f 7255 	mov.w	r2, #852	; 0x354
 800b7f8:	494a      	ldr	r1, [pc, #296]	; (800b924 <ip4_output_if_src+0x148>)
 800b7fa:	484b      	ldr	r0, [pc, #300]	; (800b928 <ip4_output_if_src+0x14c>)
 800b7fc:	f009 ff18 	bl	8015630 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d060      	beq.n	800b8c8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800b806:	2314      	movs	r3, #20
 800b808:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800b80a:	2114      	movs	r1, #20
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f002 fa05 	bl	800dc1c <pbuf_add_header>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d002      	beq.n	800b81e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b818:	f06f 0301 	mvn.w	r3, #1
 800b81c:	e07c      	b.n	800b918 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	895b      	ldrh	r3, [r3, #10]
 800b828:	2b13      	cmp	r3, #19
 800b82a:	d806      	bhi.n	800b83a <ip4_output_if_src+0x5e>
 800b82c:	4b3c      	ldr	r3, [pc, #240]	; (800b920 <ip4_output_if_src+0x144>)
 800b82e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800b832:	493e      	ldr	r1, [pc, #248]	; (800b92c <ip4_output_if_src+0x150>)
 800b834:	483c      	ldr	r0, [pc, #240]	; (800b928 <ip4_output_if_src+0x14c>)
 800b836:	f009 fefb 	bl	8015630 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	78fa      	ldrb	r2, [r7, #3]
 800b83e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b846:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800b850:	8b7b      	ldrh	r3, [r7, #26]
 800b852:	089b      	lsrs	r3, r3, #2
 800b854:	b29b      	uxth	r3, r3
 800b856:	b2db      	uxtb	r3, r3
 800b858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b85c:	b2da      	uxtb	r2, r3
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b868:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	891b      	ldrh	r3, [r3, #8]
 800b86e:	4618      	mov	r0, r3
 800b870:	f000 fedc 	bl	800c62c <lwip_htons>
 800b874:	4603      	mov	r3, r0
 800b876:	461a      	mov	r2, r3
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	2200      	movs	r2, #0
 800b880:	719a      	strb	r2, [r3, #6]
 800b882:	2200      	movs	r2, #0
 800b884:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800b886:	4b2a      	ldr	r3, [pc, #168]	; (800b930 <ip4_output_if_src+0x154>)
 800b888:	881b      	ldrh	r3, [r3, #0]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 fece 	bl	800c62c <lwip_htons>
 800b890:	4603      	mov	r3, r0
 800b892:	461a      	mov	r2, r3
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800b898:	4b25      	ldr	r3, [pc, #148]	; (800b930 <ip4_output_if_src+0x154>)
 800b89a:	881b      	ldrh	r3, [r3, #0]
 800b89c:	3301      	adds	r3, #1
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	4b23      	ldr	r3, [pc, #140]	; (800b930 <ip4_output_if_src+0x154>)
 800b8a2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d104      	bne.n	800b8b4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800b8aa:	4b22      	ldr	r3, [pc, #136]	; (800b934 <ip4_output_if_src+0x158>)
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	60da      	str	r2, [r3, #12]
 800b8b2:	e003      	b.n	800b8bc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	729a      	strb	r2, [r3, #10]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	72da      	strb	r2, [r3, #11]
 800b8c6:	e00f      	b.n	800b8e8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	895b      	ldrh	r3, [r3, #10]
 800b8cc:	2b13      	cmp	r3, #19
 800b8ce:	d802      	bhi.n	800b8d6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b8d0:	f06f 0301 	mvn.w	r3, #1
 800b8d4:	e020      	b.n	800b918 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	691b      	ldr	r3, [r3, #16]
 800b8e0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800b8e2:	f107 0314 	add.w	r3, r7, #20
 800b8e6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00c      	beq.n	800b90a <ip4_output_if_src+0x12e>
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	891a      	ldrh	r2, [r3, #8]
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d906      	bls.n	800b90a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f000 fd4d 	bl	800c3a0 <ip4_frag>
 800b906:	4603      	mov	r3, r0
 800b908:	e006      	b.n	800b918 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800b90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90c:	695b      	ldr	r3, [r3, #20]
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	68f9      	ldr	r1, [r7, #12]
 800b912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b914:	4798      	blx	r3
 800b916:	4603      	mov	r3, r0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3720      	adds	r7, #32
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	08019b78 	.word	0x08019b78
 800b924:	08019c0c 	.word	0x08019c0c
 800b928:	08019c18 	.word	0x08019c18
 800b92c:	08019c40 	.word	0x08019c40
 800b930:	2000687e 	.word	0x2000687e
 800b934:	08019c70 	.word	0x08019c70

0800b938 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94c:	d002      	beq.n	800b954 <ip4_addr_isbroadcast_u32+0x1c>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d101      	bne.n	800b958 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800b954:	2301      	movs	r3, #1
 800b956:	e02a      	b.n	800b9ae <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b95e:	f003 0302 	and.w	r3, r3, #2
 800b962:	2b00      	cmp	r3, #0
 800b964:	d101      	bne.n	800b96a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800b966:	2300      	movs	r3, #0
 800b968:	e021      	b.n	800b9ae <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	3304      	adds	r3, #4
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	429a      	cmp	r2, r3
 800b974:	d101      	bne.n	800b97a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800b976:	2300      	movs	r3, #0
 800b978:	e019      	b.n	800b9ae <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	3304      	adds	r3, #4
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	405a      	eors	r2, r3
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	3308      	adds	r3, #8
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4013      	ands	r3, r2
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10d      	bne.n	800b9ac <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	3308      	adds	r3, #8
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	43da      	mvns	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	3308      	adds	r3, #8
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d101      	bne.n	800b9ac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e000      	b.n	800b9ae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800b9ac:	2300      	movs	r3, #0
  }
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
	...

0800b9bc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800b9c6:	4b12      	ldr	r3, [pc, #72]	; (800ba10 <ip_reass_tmr+0x54>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800b9cc:	e018      	b.n	800ba00 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	7fdb      	ldrb	r3, [r3, #31]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00b      	beq.n	800b9ee <ip_reass_tmr+0x32>
      r->timer--;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	7fdb      	ldrb	r3, [r3, #31]
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	60fb      	str	r3, [r7, #12]
 800b9ec:	e008      	b.n	800ba00 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800b9f8:	68b9      	ldr	r1, [r7, #8]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f80a 	bl	800ba14 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1e3      	bne.n	800b9ce <ip_reass_tmr+0x12>
    }
  }
}
 800ba06:	bf00      	nop
 800ba08:	bf00      	nop
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	20006880 	.word	0x20006880

0800ba14 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b088      	sub	sp, #32
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d105      	bne.n	800ba36 <ip_reass_free_complete_datagram+0x22>
 800ba2a:	4b45      	ldr	r3, [pc, #276]	; (800bb40 <ip_reass_free_complete_datagram+0x12c>)
 800ba2c:	22ab      	movs	r2, #171	; 0xab
 800ba2e:	4945      	ldr	r1, [pc, #276]	; (800bb44 <ip_reass_free_complete_datagram+0x130>)
 800ba30:	4845      	ldr	r0, [pc, #276]	; (800bb48 <ip_reass_free_complete_datagram+0x134>)
 800ba32:	f009 fdfd 	bl	8015630 <iprintf>
  if (prev != NULL) {
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00a      	beq.n	800ba52 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d005      	beq.n	800ba52 <ip_reass_free_complete_datagram+0x3e>
 800ba46:	4b3e      	ldr	r3, [pc, #248]	; (800bb40 <ip_reass_free_complete_datagram+0x12c>)
 800ba48:	22ad      	movs	r2, #173	; 0xad
 800ba4a:	4940      	ldr	r1, [pc, #256]	; (800bb4c <ip_reass_free_complete_datagram+0x138>)
 800ba4c:	483e      	ldr	r0, [pc, #248]	; (800bb48 <ip_reass_free_complete_datagram+0x134>)
 800ba4e:	f009 fdef 	bl	8015630 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	889b      	ldrh	r3, [r3, #4]
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d12a      	bne.n	800baba <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	6858      	ldr	r0, [r3, #4]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	3308      	adds	r3, #8
 800ba7a:	2214      	movs	r2, #20
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	f009 f893 	bl	8014ba8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ba82:	2101      	movs	r1, #1
 800ba84:	69b8      	ldr	r0, [r7, #24]
 800ba86:	f7ff fc29 	bl	800b2dc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ba8a:	69b8      	ldr	r0, [r7, #24]
 800ba8c:	f002 f9ea 	bl	800de64 <pbuf_clen>
 800ba90:	4603      	mov	r3, r0
 800ba92:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ba94:	8bfa      	ldrh	r2, [r7, #30]
 800ba96:	8a7b      	ldrh	r3, [r7, #18]
 800ba98:	4413      	add	r3, r2
 800ba9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba9e:	db05      	blt.n	800baac <ip_reass_free_complete_datagram+0x98>
 800baa0:	4b27      	ldr	r3, [pc, #156]	; (800bb40 <ip_reass_free_complete_datagram+0x12c>)
 800baa2:	22bc      	movs	r2, #188	; 0xbc
 800baa4:	492a      	ldr	r1, [pc, #168]	; (800bb50 <ip_reass_free_complete_datagram+0x13c>)
 800baa6:	4828      	ldr	r0, [pc, #160]	; (800bb48 <ip_reass_free_complete_datagram+0x134>)
 800baa8:	f009 fdc2 	bl	8015630 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800baac:	8bfa      	ldrh	r2, [r7, #30]
 800baae:	8a7b      	ldrh	r3, [r7, #18]
 800bab0:	4413      	add	r3, r2
 800bab2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800bab4:	69b8      	ldr	r0, [r7, #24]
 800bab6:	f002 f947 	bl	800dd48 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800bac0:	e01f      	b.n	800bb02 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f002 f9c6 	bl	800de64 <pbuf_clen>
 800bad8:	4603      	mov	r3, r0
 800bada:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800badc:	8bfa      	ldrh	r2, [r7, #30]
 800bade:	8a7b      	ldrh	r3, [r7, #18]
 800bae0:	4413      	add	r3, r2
 800bae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bae6:	db05      	blt.n	800baf4 <ip_reass_free_complete_datagram+0xe0>
 800bae8:	4b15      	ldr	r3, [pc, #84]	; (800bb40 <ip_reass_free_complete_datagram+0x12c>)
 800baea:	22cc      	movs	r2, #204	; 0xcc
 800baec:	4918      	ldr	r1, [pc, #96]	; (800bb50 <ip_reass_free_complete_datagram+0x13c>)
 800baee:	4816      	ldr	r0, [pc, #88]	; (800bb48 <ip_reass_free_complete_datagram+0x134>)
 800baf0:	f009 fd9e 	bl	8015630 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800baf4:	8bfa      	ldrh	r2, [r7, #30]
 800baf6:	8a7b      	ldrh	r3, [r7, #18]
 800baf8:	4413      	add	r3, r2
 800bafa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f002 f923 	bl	800dd48 <pbuf_free>
  while (p != NULL) {
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1dc      	bne.n	800bac2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800bb08:	6839      	ldr	r1, [r7, #0]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f8c2 	bl	800bc94 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800bb10:	4b10      	ldr	r3, [pc, #64]	; (800bb54 <ip_reass_free_complete_datagram+0x140>)
 800bb12:	881b      	ldrh	r3, [r3, #0]
 800bb14:	8bfa      	ldrh	r2, [r7, #30]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d905      	bls.n	800bb26 <ip_reass_free_complete_datagram+0x112>
 800bb1a:	4b09      	ldr	r3, [pc, #36]	; (800bb40 <ip_reass_free_complete_datagram+0x12c>)
 800bb1c:	22d2      	movs	r2, #210	; 0xd2
 800bb1e:	490e      	ldr	r1, [pc, #56]	; (800bb58 <ip_reass_free_complete_datagram+0x144>)
 800bb20:	4809      	ldr	r0, [pc, #36]	; (800bb48 <ip_reass_free_complete_datagram+0x134>)
 800bb22:	f009 fd85 	bl	8015630 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800bb26:	4b0b      	ldr	r3, [pc, #44]	; (800bb54 <ip_reass_free_complete_datagram+0x140>)
 800bb28:	881a      	ldrh	r2, [r3, #0]
 800bb2a:	8bfb      	ldrh	r3, [r7, #30]
 800bb2c:	1ad3      	subs	r3, r2, r3
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	4b08      	ldr	r3, [pc, #32]	; (800bb54 <ip_reass_free_complete_datagram+0x140>)
 800bb32:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800bb34:	8bfb      	ldrh	r3, [r7, #30]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3720      	adds	r7, #32
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	08019d44 	.word	0x08019d44
 800bb44:	08019ddc 	.word	0x08019ddc
 800bb48:	08019de8 	.word	0x08019de8
 800bb4c:	08019e10 	.word	0x08019e10
 800bb50:	08019e24 	.word	0x08019e24
 800bb54:	20006884 	.word	0x20006884
 800bb58:	08019e44 	.word	0x08019e44

0800bb5c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08a      	sub	sp, #40	; 0x28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800bb66:	2300      	movs	r3, #0
 800bb68:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800bb72:	2300      	movs	r3, #0
 800bb74:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800bb76:	2300      	movs	r3, #0
 800bb78:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800bb7a:	4b28      	ldr	r3, [pc, #160]	; (800bc1c <ip_reass_remove_oldest_datagram+0xc0>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800bb80:	e030      	b.n	800bbe4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800bb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb84:	695a      	ldr	r2, [r3, #20]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d10c      	bne.n	800bba8 <ip_reass_remove_oldest_datagram+0x4c>
 800bb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb90:	699a      	ldr	r2, [r3, #24]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	691b      	ldr	r3, [r3, #16]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d106      	bne.n	800bba8 <ip_reass_remove_oldest_datagram+0x4c>
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9c:	899a      	ldrh	r2, [r3, #12]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	889b      	ldrh	r3, [r3, #4]
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d014      	beq.n	800bbd2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800bbae:	6a3b      	ldr	r3, [r7, #32]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d104      	bne.n	800bbbe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	61bb      	str	r3, [r7, #24]
 800bbbc:	e009      	b.n	800bbd2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc0:	7fda      	ldrb	r2, [r3, #31]
 800bbc2:	6a3b      	ldr	r3, [r7, #32]
 800bbc4:	7fdb      	ldrb	r3, [r3, #31]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d803      	bhi.n	800bbd2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800bbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbcc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d001      	beq.n	800bbde <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800bbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbdc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800bbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1cb      	bne.n	800bb82 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d008      	beq.n	800bc02 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800bbf0:	69b9      	ldr	r1, [r7, #24]
 800bbf2:	6a38      	ldr	r0, [r7, #32]
 800bbf4:	f7ff ff0e 	bl	800ba14 <ip_reass_free_complete_datagram>
 800bbf8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800bbfa:	697a      	ldr	r2, [r7, #20]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	4413      	add	r3, r2
 800bc00:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800bc02:	697a      	ldr	r2, [r7, #20]
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	da02      	bge.n	800bc10 <ip_reass_remove_oldest_datagram+0xb4>
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	dcac      	bgt.n	800bb6a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800bc10:	697b      	ldr	r3, [r7, #20]
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3728      	adds	r7, #40	; 0x28
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20006880 	.word	0x20006880

0800bc20 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800bc2a:	2004      	movs	r0, #4
 800bc2c:	f001 fa5e 	bl	800d0ec <memp_malloc>
 800bc30:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d110      	bne.n	800bc5a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7ff ff8e 	bl	800bb5c <ip_reass_remove_oldest_datagram>
 800bc40:	4602      	mov	r2, r0
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	4293      	cmp	r3, r2
 800bc46:	dc03      	bgt.n	800bc50 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800bc48:	2004      	movs	r0, #4
 800bc4a:	f001 fa4f 	bl	800d0ec <memp_malloc>
 800bc4e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d101      	bne.n	800bc5a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800bc56:	2300      	movs	r3, #0
 800bc58:	e016      	b.n	800bc88 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800bc5a:	2220      	movs	r2, #32
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f008 ffca 	bl	8014bf8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	220f      	movs	r2, #15
 800bc68:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800bc6a:	4b09      	ldr	r3, [pc, #36]	; (800bc90 <ip_reass_enqueue_new_datagram+0x70>)
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800bc72:	4a07      	ldr	r2, [pc, #28]	; (800bc90 <ip_reass_enqueue_new_datagram+0x70>)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	3308      	adds	r3, #8
 800bc7c:	2214      	movs	r2, #20
 800bc7e:	6879      	ldr	r1, [r7, #4]
 800bc80:	4618      	mov	r0, r3
 800bc82:	f008 ff91 	bl	8014ba8 <memcpy>
  return ipr;
 800bc86:	68fb      	ldr	r3, [r7, #12]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	20006880 	.word	0x20006880

0800bc94 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800bc9e:	4b10      	ldr	r3, [pc, #64]	; (800bce0 <ip_reass_dequeue_datagram+0x4c>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d104      	bne.n	800bcb2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a0c      	ldr	r2, [pc, #48]	; (800bce0 <ip_reass_dequeue_datagram+0x4c>)
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	e00d      	b.n	800bcce <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d106      	bne.n	800bcc6 <ip_reass_dequeue_datagram+0x32>
 800bcb8:	4b0a      	ldr	r3, [pc, #40]	; (800bce4 <ip_reass_dequeue_datagram+0x50>)
 800bcba:	f240 1245 	movw	r2, #325	; 0x145
 800bcbe:	490a      	ldr	r1, [pc, #40]	; (800bce8 <ip_reass_dequeue_datagram+0x54>)
 800bcc0:	480a      	ldr	r0, [pc, #40]	; (800bcec <ip_reass_dequeue_datagram+0x58>)
 800bcc2:	f009 fcb5 	bl	8015630 <iprintf>
    prev->next = ipr->next;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800bcce:	6879      	ldr	r1, [r7, #4]
 800bcd0:	2004      	movs	r0, #4
 800bcd2:	f001 fa5d 	bl	800d190 <memp_free>
}
 800bcd6:	bf00      	nop
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	20006880 	.word	0x20006880
 800bce4:	08019d44 	.word	0x08019d44
 800bce8:	08019e68 	.word	0x08019e68
 800bcec:	08019de8 	.word	0x08019de8

0800bcf0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b08c      	sub	sp, #48	; 0x30
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800bd00:	2301      	movs	r3, #1
 800bd02:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	885b      	ldrh	r3, [r3, #2]
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	4618      	mov	r0, r3
 800bd12:	f000 fc8b 	bl	800c62c <lwip_htons>
 800bd16:	4603      	mov	r3, r0
 800bd18:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	f003 030f 	and.w	r3, r3, #15
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800bd28:	7e7b      	ldrb	r3, [r7, #25]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	8b7a      	ldrh	r2, [r7, #26]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d202      	bcs.n	800bd38 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bd32:	f04f 33ff 	mov.w	r3, #4294967295
 800bd36:	e135      	b.n	800bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800bd38:	7e7b      	ldrb	r3, [r7, #25]
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	8b7a      	ldrh	r2, [r7, #26]
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	88db      	ldrh	r3, [r3, #6]
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 fc6f 	bl	800c62c <lwip_htons>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	00db      	lsls	r3, r3, #3
 800bd58:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800bd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd62:	2200      	movs	r2, #0
 800bd64:	701a      	strb	r2, [r3, #0]
 800bd66:	2200      	movs	r2, #0
 800bd68:	705a      	strb	r2, [r3, #1]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	709a      	strb	r2, [r3, #2]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800bd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd74:	8afa      	ldrh	r2, [r7, #22]
 800bd76:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800bd78:	8afa      	ldrh	r2, [r7, #22]
 800bd7a:	8b7b      	ldrh	r3, [r7, #26]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd82:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800bd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd86:	88db      	ldrh	r3, [r3, #6]
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	8afa      	ldrh	r2, [r7, #22]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d902      	bls.n	800bd96 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bd90:	f04f 33ff 	mov.w	r3, #4294967295
 800bd94:	e106      	b.n	800bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	627b      	str	r3, [r7, #36]	; 0x24
 800bd9c:	e068      	b.n	800be70 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800bda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda6:	889b      	ldrh	r3, [r3, #4]
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	889b      	ldrh	r3, [r3, #4]
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d235      	bcs.n	800be20 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800bdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdb8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800bdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d020      	beq.n	800be02 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800bdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc2:	889b      	ldrh	r3, [r3, #4]
 800bdc4:	b29a      	uxth	r2, r3
 800bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc8:	88db      	ldrh	r3, [r3, #6]
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d307      	bcc.n	800bde0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800bdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd2:	88db      	ldrh	r3, [r3, #6]
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	889b      	ldrh	r3, [r3, #4]
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d902      	bls.n	800bde6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bde0:	f04f 33ff 	mov.w	r3, #4294967295
 800bde4:	e0de      	b.n	800bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800bde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde8:	68ba      	ldr	r2, [r7, #8]
 800bdea:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdee:	88db      	ldrh	r3, [r3, #6]
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf4:	889b      	ldrh	r3, [r3, #4]
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d03d      	beq.n	800be78 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800be00:	e03a      	b.n	800be78 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800be02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be04:	88db      	ldrh	r3, [r3, #6]
 800be06:	b29a      	uxth	r2, r3
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	889b      	ldrh	r3, [r3, #4]
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	429a      	cmp	r2, r3
 800be10:	d902      	bls.n	800be18 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800be12:	f04f 33ff 	mov.w	r3, #4294967295
 800be16:	e0c5      	b.n	800bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	605a      	str	r2, [r3, #4]
      break;
 800be1e:	e02b      	b.n	800be78 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800be20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be22:	889b      	ldrh	r3, [r3, #4]
 800be24:	b29a      	uxth	r2, r3
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	889b      	ldrh	r3, [r3, #4]
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d102      	bne.n	800be36 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800be30:	f04f 33ff 	mov.w	r3, #4294967295
 800be34:	e0b6      	b.n	800bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be38:	889b      	ldrh	r3, [r3, #4]
 800be3a:	b29a      	uxth	r2, r3
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	88db      	ldrh	r3, [r3, #6]
 800be40:	b29b      	uxth	r3, r3
 800be42:	429a      	cmp	r2, r3
 800be44:	d202      	bcs.n	800be4c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800be46:	f04f 33ff 	mov.w	r3, #4294967295
 800be4a:	e0ab      	b.n	800bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800be4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d009      	beq.n	800be66 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be54:	88db      	ldrh	r3, [r3, #6]
 800be56:	b29a      	uxth	r2, r3
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	889b      	ldrh	r3, [r3, #4]
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	429a      	cmp	r2, r3
 800be60:	d001      	beq.n	800be66 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800be62:	2300      	movs	r3, #0
 800be64:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800be70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be72:	2b00      	cmp	r3, #0
 800be74:	d193      	bne.n	800bd9e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800be76:	e000      	b.n	800be7a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800be78:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d12d      	bne.n	800bedc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800be80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be82:	2b00      	cmp	r3, #0
 800be84:	d01c      	beq.n	800bec0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800be86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be88:	88db      	ldrh	r3, [r3, #6]
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8e:	889b      	ldrh	r3, [r3, #4]
 800be90:	b29b      	uxth	r3, r3
 800be92:	429a      	cmp	r2, r3
 800be94:	d906      	bls.n	800bea4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800be96:	4b45      	ldr	r3, [pc, #276]	; (800bfac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800be98:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800be9c:	4944      	ldr	r1, [pc, #272]	; (800bfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800be9e:	4845      	ldr	r0, [pc, #276]	; (800bfb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bea0:	f009 fbc6 	bl	8015630 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800bea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800beaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beac:	88db      	ldrh	r3, [r3, #6]
 800beae:	b29a      	uxth	r2, r3
 800beb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb2:	889b      	ldrh	r3, [r3, #4]
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d010      	beq.n	800bedc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	623b      	str	r3, [r7, #32]
 800bebe:	e00d      	b.n	800bedc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d006      	beq.n	800bed6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800bec8:	4b38      	ldr	r3, [pc, #224]	; (800bfac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800beca:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800bece:	493a      	ldr	r1, [pc, #232]	; (800bfb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800bed0:	4838      	ldr	r0, [pc, #224]	; (800bfb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bed2:	f009 fbad 	bl	8015630 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d105      	bne.n	800beee <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	7f9b      	ldrb	r3, [r3, #30]
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	2b00      	cmp	r3, #0
 800beec:	d059      	beq.n	800bfa2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800beee:	6a3b      	ldr	r3, [r7, #32]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d04f      	beq.n	800bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d006      	beq.n	800bf0a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	889b      	ldrh	r3, [r3, #4]
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	623b      	str	r3, [r7, #32]
 800bf0e:	e041      	b.n	800bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800bf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf12:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800bf1a:	e012      	b.n	800bf42 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800bf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800bf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf24:	88db      	ldrh	r3, [r3, #6]
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2a:	889b      	ldrh	r3, [r3, #4]
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d002      	beq.n	800bf38 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800bf32:	2300      	movs	r3, #0
 800bf34:	623b      	str	r3, [r7, #32]
            break;
 800bf36:	e007      	b.n	800bf48 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800bf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800bf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800bf42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1e9      	bne.n	800bf1c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800bf48:	6a3b      	ldr	r3, [r7, #32]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d022      	beq.n	800bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d106      	bne.n	800bf64 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800bf56:	4b15      	ldr	r3, [pc, #84]	; (800bfac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bf58:	f240 12df 	movw	r2, #479	; 0x1df
 800bf5c:	4917      	ldr	r1, [pc, #92]	; (800bfbc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800bf5e:	4815      	ldr	r0, [pc, #84]	; (800bfb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bf60:	f009 fb66 	bl	8015630 <iprintf>
          LWIP_ASSERT("sanity check",
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d106      	bne.n	800bf7e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800bf70:	4b0e      	ldr	r3, [pc, #56]	; (800bfac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bf72:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bf76:	4911      	ldr	r1, [pc, #68]	; (800bfbc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800bf78:	480e      	ldr	r0, [pc, #56]	; (800bfb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bf7a:	f009 fb59 	bl	8015630 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800bf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d006      	beq.n	800bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800bf86:	4b09      	ldr	r3, [pc, #36]	; (800bfac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bf88:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800bf8c:	490c      	ldr	r1, [pc, #48]	; (800bfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800bf8e:	4809      	ldr	r0, [pc, #36]	; (800bfb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bf90:	f009 fb4e 	bl	8015630 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800bf94:	6a3b      	ldr	r3, [r7, #32]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	bf14      	ite	ne
 800bf9a:	2301      	movne	r3, #1
 800bf9c:	2300      	moveq	r3, #0
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	e000      	b.n	800bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3730      	adds	r7, #48	; 0x30
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	08019d44 	.word	0x08019d44
 800bfb0:	08019e84 	.word	0x08019e84
 800bfb4:	08019de8 	.word	0x08019de8
 800bfb8:	08019ea4 	.word	0x08019ea4
 800bfbc:	08019edc 	.word	0x08019edc
 800bfc0:	08019eec 	.word	0x08019eec

0800bfc4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b08e      	sub	sp, #56	; 0x38
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	f003 030f 	and.w	r3, r3, #15
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	2b14      	cmp	r3, #20
 800bfe2:	f040 8167 	bne.w	800c2b4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800bfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe8:	88db      	ldrh	r3, [r3, #6]
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 fb1d 	bl	800c62c <lwip_htons>
 800bff2:	4603      	mov	r3, r0
 800bff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	00db      	lsls	r3, r3, #3
 800bffc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800bffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c000:	885b      	ldrh	r3, [r3, #2]
 800c002:	b29b      	uxth	r3, r3
 800c004:	4618      	mov	r0, r3
 800c006:	f000 fb11 	bl	800c62c <lwip_htons>
 800c00a:	4603      	mov	r3, r0
 800c00c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800c00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	f003 030f 	and.w	r3, r3, #15
 800c016:	b2db      	uxtb	r3, r3
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800c01e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c022:	b29b      	uxth	r3, r3
 800c024:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c026:	429a      	cmp	r2, r3
 800c028:	f0c0 8146 	bcc.w	800c2b8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800c02c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c030:	b29b      	uxth	r3, r3
 800c032:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f001 ff13 	bl	800de64 <pbuf_clen>
 800c03e:	4603      	mov	r3, r0
 800c040:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c042:	4b9f      	ldr	r3, [pc, #636]	; (800c2c0 <ip4_reass+0x2fc>)
 800c044:	881b      	ldrh	r3, [r3, #0]
 800c046:	461a      	mov	r2, r3
 800c048:	8c3b      	ldrh	r3, [r7, #32]
 800c04a:	4413      	add	r3, r2
 800c04c:	2b0a      	cmp	r3, #10
 800c04e:	dd10      	ble.n	800c072 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c050:	8c3b      	ldrh	r3, [r7, #32]
 800c052:	4619      	mov	r1, r3
 800c054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c056:	f7ff fd81 	bl	800bb5c <ip_reass_remove_oldest_datagram>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f000 812d 	beq.w	800c2bc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c062:	4b97      	ldr	r3, [pc, #604]	; (800c2c0 <ip4_reass+0x2fc>)
 800c064:	881b      	ldrh	r3, [r3, #0]
 800c066:	461a      	mov	r2, r3
 800c068:	8c3b      	ldrh	r3, [r7, #32]
 800c06a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c06c:	2b0a      	cmp	r3, #10
 800c06e:	f300 8125 	bgt.w	800c2bc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c072:	4b94      	ldr	r3, [pc, #592]	; (800c2c4 <ip4_reass+0x300>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	633b      	str	r3, [r7, #48]	; 0x30
 800c078:	e015      	b.n	800c0a6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07c:	695a      	ldr	r2, [r3, #20]
 800c07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	429a      	cmp	r2, r3
 800c084:	d10c      	bne.n	800c0a0 <ip4_reass+0xdc>
 800c086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c088:	699a      	ldr	r2, [r3, #24]
 800c08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08c:	691b      	ldr	r3, [r3, #16]
 800c08e:	429a      	cmp	r2, r3
 800c090:	d106      	bne.n	800c0a0 <ip4_reass+0xdc>
 800c092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c094:	899a      	ldrh	r2, [r3, #12]
 800c096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c098:	889b      	ldrh	r3, [r3, #4]
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d006      	beq.n	800c0ae <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	633b      	str	r3, [r7, #48]	; 0x30
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d1e6      	bne.n	800c07a <ip4_reass+0xb6>
 800c0ac:	e000      	b.n	800c0b0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800c0ae:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800c0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d109      	bne.n	800c0ca <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c0b6:	8c3b      	ldrh	r3, [r7, #32]
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0bc:	f7ff fdb0 	bl	800bc20 <ip_reass_enqueue_new_datagram>
 800c0c0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d11c      	bne.n	800c102 <ip4_reass+0x13e>
      goto nullreturn;
 800c0c8:	e109      	b.n	800c2de <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0cc:	88db      	ldrh	r3, [r3, #6]
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f000 faab 	bl	800c62c <lwip_htons>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d110      	bne.n	800c102 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e2:	89db      	ldrh	r3, [r3, #14]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f000 faa1 	bl	800c62c <lwip_htons>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d006      	beq.n	800c102 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f6:	3308      	adds	r3, #8
 800c0f8:	2214      	movs	r2, #20
 800c0fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f008 fd53 	bl	8014ba8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c104:	88db      	ldrh	r3, [r3, #6]
 800c106:	b29b      	uxth	r3, r3
 800c108:	f003 0320 	and.w	r3, r3, #32
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	bf0c      	ite	eq
 800c110:	2301      	moveq	r3, #1
 800c112:	2300      	movne	r3, #0
 800c114:	b2db      	uxtb	r3, r3
 800c116:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00e      	beq.n	800c13c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800c11e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c122:	4413      	add	r3, r2
 800c124:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800c126:	8b7a      	ldrh	r2, [r7, #26]
 800c128:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c12a:	429a      	cmp	r2, r3
 800c12c:	f0c0 80a0 	bcc.w	800c270 <ip4_reass+0x2ac>
 800c130:	8b7b      	ldrh	r3, [r7, #26]
 800c132:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800c136:	4293      	cmp	r3, r2
 800c138:	f200 809a 	bhi.w	800c270 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800c13c:	69fa      	ldr	r2, [r7, #28]
 800c13e:	6879      	ldr	r1, [r7, #4]
 800c140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c142:	f7ff fdd5 	bl	800bcf0 <ip_reass_chain_frag_into_datagram_and_validate>
 800c146:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c14e:	f000 8091 	beq.w	800c274 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c152:	4b5b      	ldr	r3, [pc, #364]	; (800c2c0 <ip4_reass+0x2fc>)
 800c154:	881a      	ldrh	r2, [r3, #0]
 800c156:	8c3b      	ldrh	r3, [r7, #32]
 800c158:	4413      	add	r3, r2
 800c15a:	b29a      	uxth	r2, r3
 800c15c:	4b58      	ldr	r3, [pc, #352]	; (800c2c0 <ip4_reass+0x2fc>)
 800c15e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d00d      	beq.n	800c182 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800c166:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c16a:	4413      	add	r3, r2
 800c16c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800c16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c170:	8a7a      	ldrh	r2, [r7, #18]
 800c172:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c176:	7f9b      	ldrb	r3, [r3, #30]
 800c178:	f043 0301 	orr.w	r3, r3, #1
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c180:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	2b01      	cmp	r3, #1
 800c186:	d171      	bne.n	800c26c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800c188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18a:	8b9b      	ldrh	r3, [r3, #28]
 800c18c:	3314      	adds	r3, #20
 800c18e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800c190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800c19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	2214      	movs	r2, #20
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1ac:	f008 fcfc 	bl	8014ba8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800c1b0:	8a3b      	ldrh	r3, [r7, #16]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f000 fa3a 	bl	800c62c <lwip_htons>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1be:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800c1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	719a      	strb	r2, [r3, #6]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	729a      	strb	r2, [r3, #10]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800c1da:	e00d      	b.n	800c1f8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800c1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800c1e2:	2114      	movs	r1, #20
 800c1e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c1e6:	f001 fd29 	bl	800dc3c <pbuf_remove_header>
      pbuf_cat(p, r);
 800c1ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f001 fe79 	bl	800dee4 <pbuf_cat>
      r = iprh->next_pbuf;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800c1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1ee      	bne.n	800c1dc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800c1fe:	4b31      	ldr	r3, [pc, #196]	; (800c2c4 <ip4_reass+0x300>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c204:	429a      	cmp	r2, r3
 800c206:	d102      	bne.n	800c20e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800c208:	2300      	movs	r3, #0
 800c20a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c20c:	e010      	b.n	800c230 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c20e:	4b2d      	ldr	r3, [pc, #180]	; (800c2c4 <ip4_reass+0x300>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c214:	e007      	b.n	800c226 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800c216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d006      	beq.n	800c22e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d1f4      	bne.n	800c216 <ip4_reass+0x252>
 800c22c:	e000      	b.n	800c230 <ip4_reass+0x26c>
          break;
 800c22e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800c230:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c234:	f7ff fd2e 	bl	800bc94 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f001 fe13 	bl	800de64 <pbuf_clen>
 800c23e:	4603      	mov	r3, r0
 800c240:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800c242:	4b1f      	ldr	r3, [pc, #124]	; (800c2c0 <ip4_reass+0x2fc>)
 800c244:	881b      	ldrh	r3, [r3, #0]
 800c246:	8c3a      	ldrh	r2, [r7, #32]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d906      	bls.n	800c25a <ip4_reass+0x296>
 800c24c:	4b1e      	ldr	r3, [pc, #120]	; (800c2c8 <ip4_reass+0x304>)
 800c24e:	f240 229b 	movw	r2, #667	; 0x29b
 800c252:	491e      	ldr	r1, [pc, #120]	; (800c2cc <ip4_reass+0x308>)
 800c254:	481e      	ldr	r0, [pc, #120]	; (800c2d0 <ip4_reass+0x30c>)
 800c256:	f009 f9eb 	bl	8015630 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800c25a:	4b19      	ldr	r3, [pc, #100]	; (800c2c0 <ip4_reass+0x2fc>)
 800c25c:	881a      	ldrh	r2, [r3, #0]
 800c25e:	8c3b      	ldrh	r3, [r7, #32]
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	b29a      	uxth	r2, r3
 800c264:	4b16      	ldr	r3, [pc, #88]	; (800c2c0 <ip4_reass+0x2fc>)
 800c266:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	e03c      	b.n	800c2e6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800c26c:	2300      	movs	r3, #0
 800c26e:	e03a      	b.n	800c2e6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800c270:	bf00      	nop
 800c272:	e000      	b.n	800c276 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800c274:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800c276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d106      	bne.n	800c28a <ip4_reass+0x2c6>
 800c27c:	4b12      	ldr	r3, [pc, #72]	; (800c2c8 <ip4_reass+0x304>)
 800c27e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800c282:	4914      	ldr	r1, [pc, #80]	; (800c2d4 <ip4_reass+0x310>)
 800c284:	4812      	ldr	r0, [pc, #72]	; (800c2d0 <ip4_reass+0x30c>)
 800c286:	f009 f9d3 	bl	8015630 <iprintf>
  if (ipr->p == NULL) {
 800c28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d124      	bne.n	800c2dc <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800c292:	4b0c      	ldr	r3, [pc, #48]	; (800c2c4 <ip4_reass+0x300>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c298:	429a      	cmp	r2, r3
 800c29a:	d006      	beq.n	800c2aa <ip4_reass+0x2e6>
 800c29c:	4b0a      	ldr	r3, [pc, #40]	; (800c2c8 <ip4_reass+0x304>)
 800c29e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c2a2:	490d      	ldr	r1, [pc, #52]	; (800c2d8 <ip4_reass+0x314>)
 800c2a4:	480a      	ldr	r0, [pc, #40]	; (800c2d0 <ip4_reass+0x30c>)
 800c2a6:	f009 f9c3 	bl	8015630 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2ae:	f7ff fcf1 	bl	800bc94 <ip_reass_dequeue_datagram>
 800c2b2:	e014      	b.n	800c2de <ip4_reass+0x31a>
    goto nullreturn;
 800c2b4:	bf00      	nop
 800c2b6:	e012      	b.n	800c2de <ip4_reass+0x31a>
    goto nullreturn;
 800c2b8:	bf00      	nop
 800c2ba:	e010      	b.n	800c2de <ip4_reass+0x31a>
      goto nullreturn;
 800c2bc:	bf00      	nop
 800c2be:	e00e      	b.n	800c2de <ip4_reass+0x31a>
 800c2c0:	20006884 	.word	0x20006884
 800c2c4:	20006880 	.word	0x20006880
 800c2c8:	08019d44 	.word	0x08019d44
 800c2cc:	08019f10 	.word	0x08019f10
 800c2d0:	08019de8 	.word	0x08019de8
 800c2d4:	08019f2c 	.word	0x08019f2c
 800c2d8:	08019f38 	.word	0x08019f38
  }

nullreturn:
 800c2dc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f001 fd32 	bl	800dd48 <pbuf_free>
  return NULL;
 800c2e4:	2300      	movs	r3, #0
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3738      	adds	r7, #56	; 0x38
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop

0800c2f0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800c2f4:	2005      	movs	r0, #5
 800c2f6:	f000 fef9 	bl	800d0ec <memp_malloc>
 800c2fa:	4603      	mov	r3, r0
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d106      	bne.n	800c31c <ip_frag_free_pbuf_custom_ref+0x1c>
 800c30e:	4b07      	ldr	r3, [pc, #28]	; (800c32c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800c310:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800c314:	4906      	ldr	r1, [pc, #24]	; (800c330 <ip_frag_free_pbuf_custom_ref+0x30>)
 800c316:	4807      	ldr	r0, [pc, #28]	; (800c334 <ip_frag_free_pbuf_custom_ref+0x34>)
 800c318:	f009 f98a 	bl	8015630 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800c31c:	6879      	ldr	r1, [r7, #4]
 800c31e:	2005      	movs	r0, #5
 800c320:	f000 ff36 	bl	800d190 <memp_free>
}
 800c324:	bf00      	nop
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	08019d44 	.word	0x08019d44
 800c330:	08019f58 	.word	0x08019f58
 800c334:	08019de8 	.word	0x08019de8

0800c338 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d106      	bne.n	800c358 <ipfrag_free_pbuf_custom+0x20>
 800c34a:	4b11      	ldr	r3, [pc, #68]	; (800c390 <ipfrag_free_pbuf_custom+0x58>)
 800c34c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800c350:	4910      	ldr	r1, [pc, #64]	; (800c394 <ipfrag_free_pbuf_custom+0x5c>)
 800c352:	4811      	ldr	r0, [pc, #68]	; (800c398 <ipfrag_free_pbuf_custom+0x60>)
 800c354:	f009 f96c 	bl	8015630 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d006      	beq.n	800c36e <ipfrag_free_pbuf_custom+0x36>
 800c360:	4b0b      	ldr	r3, [pc, #44]	; (800c390 <ipfrag_free_pbuf_custom+0x58>)
 800c362:	f240 22cf 	movw	r2, #719	; 0x2cf
 800c366:	490d      	ldr	r1, [pc, #52]	; (800c39c <ipfrag_free_pbuf_custom+0x64>)
 800c368:	480b      	ldr	r0, [pc, #44]	; (800c398 <ipfrag_free_pbuf_custom+0x60>)
 800c36a:	f009 f961 	bl	8015630 <iprintf>
  if (pcr->original != NULL) {
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	695b      	ldr	r3, [r3, #20]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d004      	beq.n	800c380 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f001 fce4 	bl	800dd48 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	f7ff ffbd 	bl	800c300 <ip_frag_free_pbuf_custom_ref>
}
 800c386:	bf00      	nop
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	08019d44 	.word	0x08019d44
 800c394:	08019f64 	.word	0x08019f64
 800c398:	08019de8 	.word	0x08019de8
 800c39c:	08019f70 	.word	0x08019f70

0800c3a0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b094      	sub	sp, #80	; 0x50
 800c3a4:	af02      	add	r7, sp, #8
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3b6:	3b14      	subs	r3, #20
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	da00      	bge.n	800c3be <ip4_frag+0x1e>
 800c3bc:	3307      	adds	r3, #7
 800c3be:	10db      	asrs	r3, r3, #3
 800c3c0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800c3c2:	2314      	movs	r3, #20
 800c3c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800c3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	f003 030f 	and.w	r3, r3, #15
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b14      	cmp	r3, #20
 800c3e0:	d002      	beq.n	800c3e8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800c3e2:	f06f 0305 	mvn.w	r3, #5
 800c3e6:	e110      	b.n	800c60a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	895b      	ldrh	r3, [r3, #10]
 800c3ec:	2b13      	cmp	r3, #19
 800c3ee:	d809      	bhi.n	800c404 <ip4_frag+0x64>
 800c3f0:	4b88      	ldr	r3, [pc, #544]	; (800c614 <ip4_frag+0x274>)
 800c3f2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800c3f6:	4988      	ldr	r1, [pc, #544]	; (800c618 <ip4_frag+0x278>)
 800c3f8:	4888      	ldr	r0, [pc, #544]	; (800c61c <ip4_frag+0x27c>)
 800c3fa:	f009 f919 	bl	8015630 <iprintf>
 800c3fe:	f06f 0305 	mvn.w	r3, #5
 800c402:	e102      	b.n	800c60a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800c404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c406:	88db      	ldrh	r3, [r3, #6]
 800c408:	b29b      	uxth	r3, r3
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 f90e 	bl	800c62c <lwip_htons>
 800c410:	4603      	mov	r3, r0
 800c412:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800c414:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c416:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c41a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800c41e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c424:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	891b      	ldrh	r3, [r3, #8]
 800c42a:	3b14      	subs	r3, #20
 800c42c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800c430:	e0e1      	b.n	800c5f6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c432:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c434:	00db      	lsls	r3, r3, #3
 800c436:	b29b      	uxth	r3, r3
 800c438:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c43c:	4293      	cmp	r3, r2
 800c43e:	bf28      	it	cs
 800c440:	4613      	movcs	r3, r2
 800c442:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c444:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c448:	2114      	movs	r1, #20
 800c44a:	200e      	movs	r0, #14
 800c44c:	f001 f998 	bl	800d780 <pbuf_alloc>
 800c450:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800c452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c454:	2b00      	cmp	r3, #0
 800c456:	f000 80d5 	beq.w	800c604 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45c:	895b      	ldrh	r3, [r3, #10]
 800c45e:	2b13      	cmp	r3, #19
 800c460:	d806      	bhi.n	800c470 <ip4_frag+0xd0>
 800c462:	4b6c      	ldr	r3, [pc, #432]	; (800c614 <ip4_frag+0x274>)
 800c464:	f44f 7249 	mov.w	r2, #804	; 0x324
 800c468:	496d      	ldr	r1, [pc, #436]	; (800c620 <ip4_frag+0x280>)
 800c46a:	486c      	ldr	r0, [pc, #432]	; (800c61c <ip4_frag+0x27c>)
 800c46c:	f009 f8e0 	bl	8015630 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	2214      	movs	r2, #20
 800c476:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c478:	4618      	mov	r0, r3
 800c47a:	f008 fb95 	bl	8014ba8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800c484:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c486:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800c48a:	e064      	b.n	800c556 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	895a      	ldrh	r2, [r3, #10]
 800c490:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c492:	1ad3      	subs	r3, r2, r3
 800c494:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	895b      	ldrh	r3, [r3, #10]
 800c49a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d906      	bls.n	800c4ae <ip4_frag+0x10e>
 800c4a0:	4b5c      	ldr	r3, [pc, #368]	; (800c614 <ip4_frag+0x274>)
 800c4a2:	f240 322d 	movw	r2, #813	; 0x32d
 800c4a6:	495f      	ldr	r1, [pc, #380]	; (800c624 <ip4_frag+0x284>)
 800c4a8:	485c      	ldr	r0, [pc, #368]	; (800c61c <ip4_frag+0x27c>)
 800c4aa:	f009 f8c1 	bl	8015630 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c4ae:	8bfa      	ldrh	r2, [r7, #30]
 800c4b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	bf28      	it	cs
 800c4b8:	4613      	movcs	r3, r2
 800c4ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800c4be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d105      	bne.n	800c4d2 <ip4_frag+0x132>
        poff = 0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	60fb      	str	r3, [r7, #12]
        continue;
 800c4d0:	e041      	b.n	800c556 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c4d2:	f7ff ff0d 	bl	800c2f0 <ip_frag_alloc_pbuf_custom_ref>
 800c4d6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d103      	bne.n	800c4e6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800c4de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4e0:	f001 fc32 	bl	800dd48 <pbuf_free>
        goto memerr;
 800c4e4:	e08f      	b.n	800c606 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c4e6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c4ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c4ee:	4413      	add	r3, r2
 800c4f0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800c4f4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800c4f8:	9201      	str	r2, [sp, #4]
 800c4fa:	9300      	str	r3, [sp, #0]
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2241      	movs	r2, #65	; 0x41
 800c500:	2000      	movs	r0, #0
 800c502:	f001 fa67 	bl	800d9d4 <pbuf_alloced_custom>
 800c506:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d106      	bne.n	800c51c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800c50e:	69b8      	ldr	r0, [r7, #24]
 800c510:	f7ff fef6 	bl	800c300 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800c514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c516:	f001 fc17 	bl	800dd48 <pbuf_free>
        goto memerr;
 800c51a:	e074      	b.n	800c606 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800c51c:	68f8      	ldr	r0, [r7, #12]
 800c51e:	f001 fcb9 	bl	800de94 <pbuf_ref>
      pcr->original = p;
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	4a3f      	ldr	r2, [pc, #252]	; (800c628 <ip4_frag+0x288>)
 800c52c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800c52e:	6979      	ldr	r1, [r7, #20]
 800c530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c532:	f001 fcd7 	bl	800dee4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800c536:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800c53a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c53e:	1ad3      	subs	r3, r2, r3
 800c540:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800c544:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d004      	beq.n	800c556 <ip4_frag+0x1b6>
        poff = 0;
 800c54c:	2300      	movs	r3, #0
 800c54e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800c556:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d196      	bne.n	800c48c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800c55e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c560:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c564:	4413      	add	r3, r2
 800c566:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c56c:	f1a3 0213 	sub.w	r2, r3, #19
 800c570:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c574:	429a      	cmp	r2, r3
 800c576:	bfcc      	ite	gt
 800c578:	2301      	movgt	r3, #1
 800c57a:	2300      	movle	r3, #0
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800c580:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c588:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800c58a:	6a3b      	ldr	r3, [r7, #32]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d002      	beq.n	800c596 <ip4_frag+0x1f6>
 800c590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c592:	2b00      	cmp	r3, #0
 800c594:	d003      	beq.n	800c59e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800c596:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c598:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c59c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800c59e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f000 f843 	bl	800c62c <lwip_htons>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ac:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800c5ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c5b0:	3314      	adds	r3, #20
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f000 f839 	bl	800c62c <lwip_htons>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	461a      	mov	r2, r3
 800c5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	729a      	strb	r2, [r3, #10]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	695b      	ldr	r3, [r3, #20]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5d4:	68b8      	ldr	r0, [r7, #8]
 800c5d6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800c5d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5da:	f001 fbb5 	bl	800dd48 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800c5de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c5e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c5e4:	1ad3      	subs	r3, r2, r3
 800c5e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800c5ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c5ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c5f0:	4413      	add	r3, r2
 800c5f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800c5f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f47f af19 	bne.w	800c432 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800c600:	2300      	movs	r3, #0
 800c602:	e002      	b.n	800c60a <ip4_frag+0x26a>
      goto memerr;
 800c604:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800c606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3748      	adds	r7, #72	; 0x48
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	08019d44 	.word	0x08019d44
 800c618:	08019f7c 	.word	0x08019f7c
 800c61c:	08019de8 	.word	0x08019de8
 800c620:	08019f98 	.word	0x08019f98
 800c624:	08019fb8 	.word	0x08019fb8
 800c628:	0800c339 	.word	0x0800c339

0800c62c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	4603      	mov	r3, r0
 800c634:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c636:	88fb      	ldrh	r3, [r7, #6]
 800c638:	021b      	lsls	r3, r3, #8
 800c63a:	b21a      	sxth	r2, r3
 800c63c:	88fb      	ldrh	r3, [r7, #6]
 800c63e:	0a1b      	lsrs	r3, r3, #8
 800c640:	b29b      	uxth	r3, r3
 800c642:	b21b      	sxth	r3, r3
 800c644:	4313      	orrs	r3, r2
 800c646:	b21b      	sxth	r3, r3
 800c648:	b29b      	uxth	r3, r3
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	370c      	adds	r7, #12
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr

0800c656 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c656:	b480      	push	{r7}
 800c658:	b083      	sub	sp, #12
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	061a      	lsls	r2, r3, #24
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	021b      	lsls	r3, r3, #8
 800c666:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c66a:	431a      	orrs	r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	0a1b      	lsrs	r3, r3, #8
 800c670:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c674:	431a      	orrs	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	0e1b      	lsrs	r3, r3, #24
 800c67a:	4313      	orrs	r3, r2
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800c688:	b480      	push	{r7}
 800c68a:	b089      	sub	sp, #36	; 0x24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800c696:	2300      	movs	r3, #0
 800c698:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	f003 0301 	and.w	r3, r3, #1
 800c6a4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00d      	beq.n	800c6c8 <lwip_standard_chksum+0x40>
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	dd0a      	ble.n	800c6c8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800c6b2:	69fa      	ldr	r2, [r7, #28]
 800c6b4:	1c53      	adds	r3, r2, #1
 800c6b6:	61fb      	str	r3, [r7, #28]
 800c6b8:	f107 030e 	add.w	r3, r7, #14
 800c6bc:	3301      	adds	r3, #1
 800c6be:	7812      	ldrb	r2, [r2, #0]
 800c6c0:	701a      	strb	r2, [r3, #0]
    len--;
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800c6cc:	e00a      	b.n	800c6e4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	1c9a      	adds	r2, r3, #2
 800c6d2:	61ba      	str	r2, [r7, #24]
 800c6d4:	881b      	ldrh	r3, [r3, #0]
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	4413      	add	r3, r2
 800c6dc:	617b      	str	r3, [r7, #20]
    len -= 2;
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	3b02      	subs	r3, #2
 800c6e2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	dcf1      	bgt.n	800c6ce <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	dd04      	ble.n	800c6fa <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800c6f0:	f107 030e 	add.w	r3, r7, #14
 800c6f4:	69ba      	ldr	r2, [r7, #24]
 800c6f6:	7812      	ldrb	r2, [r2, #0]
 800c6f8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800c6fa:	89fb      	ldrh	r3, [r7, #14]
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	4413      	add	r3, r2
 800c702:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	0c1a      	lsrs	r2, r3, #16
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	4413      	add	r3, r2
 800c70e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	0c1a      	lsrs	r2, r3, #16
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	b29b      	uxth	r3, r3
 800c718:	4413      	add	r3, r2
 800c71a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d007      	beq.n	800c732 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	021b      	lsls	r3, r3, #8
 800c726:	b29a      	uxth	r2, r3
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	0a1b      	lsrs	r3, r3, #8
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	4313      	orrs	r3, r2
 800c730:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	b29b      	uxth	r3, r3
}
 800c736:	4618      	mov	r0, r3
 800c738:	3724      	adds	r7, #36	; 0x24
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr

0800c742 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b086      	sub	sp, #24
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800c74a:	2300      	movs	r3, #0
 800c74c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800c74e:	2300      	movs	r3, #0
 800c750:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	613b      	str	r3, [r7, #16]
 800c756:	e02b      	b.n	800c7b0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	895b      	ldrh	r3, [r3, #10]
 800c760:	4619      	mov	r1, r3
 800c762:	4610      	mov	r0, r2
 800c764:	f7ff ff90 	bl	800c688 <lwip_standard_chksum>
 800c768:	4603      	mov	r3, r0
 800c76a:	461a      	mov	r2, r3
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	4413      	add	r3, r2
 800c770:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	0c1a      	lsrs	r2, r3, #16
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	b29b      	uxth	r3, r3
 800c77a:	4413      	add	r3, r2
 800c77c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	895b      	ldrh	r3, [r3, #10]
 800c782:	f003 0301 	and.w	r3, r3, #1
 800c786:	b29b      	uxth	r3, r3
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00e      	beq.n	800c7aa <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	bf0c      	ite	eq
 800c792:	2301      	moveq	r3, #1
 800c794:	2300      	movne	r3, #0
 800c796:	b2db      	uxtb	r3, r3
 800c798:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	021b      	lsls	r3, r3, #8
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	0a1b      	lsrs	r3, r3, #8
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	613b      	str	r3, [r7, #16]
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1d0      	bne.n	800c758 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d007      	beq.n	800c7cc <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	021b      	lsls	r3, r3, #8
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	0a1b      	lsrs	r3, r3, #8
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	43db      	mvns	r3, r3
 800c7d2:	b29b      	uxth	r3, r3
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3718      	adds	r7, #24
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c7e6:	f008 f913 	bl	8014a10 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c7ea:	f000 f8d5 	bl	800c998 <mem_init>
  memp_init();
 800c7ee:	f000 fc31 	bl	800d054 <memp_init>
  pbuf_init();
  netif_init();
 800c7f2:	f000 fcf7 	bl	800d1e4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c7f6:	f007 faf1 	bl	8013ddc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c7fa:	f001 fd4f 	bl	800e29c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c7fe:	f007 fa33 	bl	8013c68 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c802:	bf00      	nop
 800c804:	3708      	adds	r7, #8
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
	...

0800c80c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	4603      	mov	r3, r0
 800c814:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c816:	4b05      	ldr	r3, [pc, #20]	; (800c82c <ptr_to_mem+0x20>)
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	88fb      	ldrh	r3, [r7, #6]
 800c81c:	4413      	add	r3, r2
}
 800c81e:	4618      	mov	r0, r3
 800c820:	370c      	adds	r7, #12
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	20006888 	.word	0x20006888

0800c830 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c838:	4b05      	ldr	r3, [pc, #20]	; (800c850 <mem_to_ptr+0x20>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	1ad3      	subs	r3, r2, r3
 800c840:	b29b      	uxth	r3, r3
}
 800c842:	4618      	mov	r0, r3
 800c844:	370c      	adds	r7, #12
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	20006888 	.word	0x20006888

0800c854 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c854:	b590      	push	{r4, r7, lr}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c85c:	4b45      	ldr	r3, [pc, #276]	; (800c974 <plug_holes+0x120>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	429a      	cmp	r2, r3
 800c864:	d206      	bcs.n	800c874 <plug_holes+0x20>
 800c866:	4b44      	ldr	r3, [pc, #272]	; (800c978 <plug_holes+0x124>)
 800c868:	f240 12df 	movw	r2, #479	; 0x1df
 800c86c:	4943      	ldr	r1, [pc, #268]	; (800c97c <plug_holes+0x128>)
 800c86e:	4844      	ldr	r0, [pc, #272]	; (800c980 <plug_holes+0x12c>)
 800c870:	f008 fede 	bl	8015630 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c874:	4b43      	ldr	r3, [pc, #268]	; (800c984 <plug_holes+0x130>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d306      	bcc.n	800c88c <plug_holes+0x38>
 800c87e:	4b3e      	ldr	r3, [pc, #248]	; (800c978 <plug_holes+0x124>)
 800c880:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c884:	4940      	ldr	r1, [pc, #256]	; (800c988 <plug_holes+0x134>)
 800c886:	483e      	ldr	r0, [pc, #248]	; (800c980 <plug_holes+0x12c>)
 800c888:	f008 fed2 	bl	8015630 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	791b      	ldrb	r3, [r3, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d006      	beq.n	800c8a2 <plug_holes+0x4e>
 800c894:	4b38      	ldr	r3, [pc, #224]	; (800c978 <plug_holes+0x124>)
 800c896:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c89a:	493c      	ldr	r1, [pc, #240]	; (800c98c <plug_holes+0x138>)
 800c89c:	4838      	ldr	r0, [pc, #224]	; (800c980 <plug_holes+0x12c>)
 800c89e:	f008 fec7 	bl	8015630 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c8aa:	d906      	bls.n	800c8ba <plug_holes+0x66>
 800c8ac:	4b32      	ldr	r3, [pc, #200]	; (800c978 <plug_holes+0x124>)
 800c8ae:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c8b2:	4937      	ldr	r1, [pc, #220]	; (800c990 <plug_holes+0x13c>)
 800c8b4:	4832      	ldr	r0, [pc, #200]	; (800c980 <plug_holes+0x12c>)
 800c8b6:	f008 febb 	bl	8015630 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	881b      	ldrh	r3, [r3, #0]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7ff ffa4 	bl	800c80c <ptr_to_mem>
 800c8c4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d024      	beq.n	800c918 <plug_holes+0xc4>
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	791b      	ldrb	r3, [r3, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d120      	bne.n	800c918 <plug_holes+0xc4>
 800c8d6:	4b2b      	ldr	r3, [pc, #172]	; (800c984 <plug_holes+0x130>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	68fa      	ldr	r2, [r7, #12]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d01b      	beq.n	800c918 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c8e0:	4b2c      	ldr	r3, [pc, #176]	; (800c994 <plug_holes+0x140>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d102      	bne.n	800c8f0 <plug_holes+0x9c>
      lfree = mem;
 800c8ea:	4a2a      	ldr	r2, [pc, #168]	; (800c994 <plug_holes+0x140>)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	881a      	ldrh	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	881b      	ldrh	r3, [r3, #0]
 800c8fc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c900:	d00a      	beq.n	800c918 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	881b      	ldrh	r3, [r3, #0]
 800c906:	4618      	mov	r0, r3
 800c908:	f7ff ff80 	bl	800c80c <ptr_to_mem>
 800c90c:	4604      	mov	r4, r0
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f7ff ff8e 	bl	800c830 <mem_to_ptr>
 800c914:	4603      	mov	r3, r0
 800c916:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	885b      	ldrh	r3, [r3, #2]
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7ff ff75 	bl	800c80c <ptr_to_mem>
 800c922:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d01f      	beq.n	800c96c <plug_holes+0x118>
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	791b      	ldrb	r3, [r3, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d11b      	bne.n	800c96c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c934:	4b17      	ldr	r3, [pc, #92]	; (800c994 <plug_holes+0x140>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d102      	bne.n	800c944 <plug_holes+0xf0>
      lfree = pmem;
 800c93e:	4a15      	ldr	r2, [pc, #84]	; (800c994 <plug_holes+0x140>)
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	881a      	ldrh	r2, [r3, #0]
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	881b      	ldrh	r3, [r3, #0]
 800c950:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c954:	d00a      	beq.n	800c96c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	881b      	ldrh	r3, [r3, #0]
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7ff ff56 	bl	800c80c <ptr_to_mem>
 800c960:	4604      	mov	r4, r0
 800c962:	68b8      	ldr	r0, [r7, #8]
 800c964:	f7ff ff64 	bl	800c830 <mem_to_ptr>
 800c968:	4603      	mov	r3, r0
 800c96a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c96c:	bf00      	nop
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	bd90      	pop	{r4, r7, pc}
 800c974:	20006888 	.word	0x20006888
 800c978:	08019fc8 	.word	0x08019fc8
 800c97c:	0801a054 	.word	0x0801a054
 800c980:	0801a06c 	.word	0x0801a06c
 800c984:	2000688c 	.word	0x2000688c
 800c988:	0801a094 	.word	0x0801a094
 800c98c:	0801a0b0 	.word	0x0801a0b0
 800c990:	0801a0cc 	.word	0x0801a0cc
 800c994:	20006894 	.word	0x20006894

0800c998 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c99e:	4b1f      	ldr	r3, [pc, #124]	; (800ca1c <mem_init+0x84>)
 800c9a0:	3303      	adds	r3, #3
 800c9a2:	f023 0303 	bic.w	r3, r3, #3
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	4b1d      	ldr	r3, [pc, #116]	; (800ca20 <mem_init+0x88>)
 800c9aa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c9ac:	4b1c      	ldr	r3, [pc, #112]	; (800ca20 <mem_init+0x88>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c9b8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c9c6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800c9ca:	f7ff ff1f 	bl	800c80c <ptr_to_mem>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	4a14      	ldr	r2, [pc, #80]	; (800ca24 <mem_init+0x8c>)
 800c9d2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c9d4:	4b13      	ldr	r3, [pc, #76]	; (800ca24 <mem_init+0x8c>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c9dc:	4b11      	ldr	r3, [pc, #68]	; (800ca24 <mem_init+0x8c>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c9e4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c9e6:	4b0f      	ldr	r3, [pc, #60]	; (800ca24 <mem_init+0x8c>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c9ee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c9f0:	4b0b      	ldr	r3, [pc, #44]	; (800ca20 <mem_init+0x88>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a0c      	ldr	r2, [pc, #48]	; (800ca28 <mem_init+0x90>)
 800c9f6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c9f8:	480c      	ldr	r0, [pc, #48]	; (800ca2c <mem_init+0x94>)
 800c9fa:	f008 f817 	bl	8014a2c <sys_mutex_new>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d006      	beq.n	800ca12 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ca04:	4b0a      	ldr	r3, [pc, #40]	; (800ca30 <mem_init+0x98>)
 800ca06:	f240 221f 	movw	r2, #543	; 0x21f
 800ca0a:	490a      	ldr	r1, [pc, #40]	; (800ca34 <mem_init+0x9c>)
 800ca0c:	480a      	ldr	r0, [pc, #40]	; (800ca38 <mem_init+0xa0>)
 800ca0e:	f008 fe0f 	bl	8015630 <iprintf>
  }
}
 800ca12:	bf00      	nop
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	20006aa0 	.word	0x20006aa0
 800ca20:	20006888 	.word	0x20006888
 800ca24:	2000688c 	.word	0x2000688c
 800ca28:	20006894 	.word	0x20006894
 800ca2c:	20006890 	.word	0x20006890
 800ca30:	08019fc8 	.word	0x08019fc8
 800ca34:	0801a0f8 	.word	0x0801a0f8
 800ca38:	0801a06c 	.word	0x0801a06c

0800ca3c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b086      	sub	sp, #24
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f7ff fef3 	bl	800c830 <mem_to_ptr>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7ff feda 	bl	800c80c <ptr_to_mem>
 800ca58:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	885b      	ldrh	r3, [r3, #2]
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7ff fed4 	bl	800c80c <ptr_to_mem>
 800ca64:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	881b      	ldrh	r3, [r3, #0]
 800ca6a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ca6e:	d818      	bhi.n	800caa2 <mem_link_valid+0x66>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	885b      	ldrh	r3, [r3, #2]
 800ca74:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ca78:	d813      	bhi.n	800caa2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ca7e:	8afa      	ldrh	r2, [r7, #22]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d004      	beq.n	800ca8e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	881b      	ldrh	r3, [r3, #0]
 800ca88:	8afa      	ldrh	r2, [r7, #22]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d109      	bne.n	800caa2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ca8e:	4b08      	ldr	r3, [pc, #32]	; (800cab0 <mem_link_valid+0x74>)
 800ca90:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca92:	693a      	ldr	r2, [r7, #16]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d006      	beq.n	800caa6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	885b      	ldrh	r3, [r3, #2]
 800ca9c:	8afa      	ldrh	r2, [r7, #22]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d001      	beq.n	800caa6 <mem_link_valid+0x6a>
    return 0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	e000      	b.n	800caa8 <mem_link_valid+0x6c>
  }
  return 1;
 800caa6:	2301      	movs	r3, #1
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3718      	adds	r7, #24
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	2000688c 	.word	0x2000688c

0800cab4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b088      	sub	sp, #32
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d070      	beq.n	800cba4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f003 0303 	and.w	r3, r3, #3
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00d      	beq.n	800cae8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800cacc:	4b37      	ldr	r3, [pc, #220]	; (800cbac <mem_free+0xf8>)
 800cace:	f240 2273 	movw	r2, #627	; 0x273
 800cad2:	4937      	ldr	r1, [pc, #220]	; (800cbb0 <mem_free+0xfc>)
 800cad4:	4837      	ldr	r0, [pc, #220]	; (800cbb4 <mem_free+0x100>)
 800cad6:	f008 fdab 	bl	8015630 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cada:	f007 fffb 	bl	8014ad4 <sys_arch_protect>
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	68f8      	ldr	r0, [r7, #12]
 800cae2:	f008 f805 	bl	8014af0 <sys_arch_unprotect>
    return;
 800cae6:	e05e      	b.n	800cba6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	3b08      	subs	r3, #8
 800caec:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800caee:	4b32      	ldr	r3, [pc, #200]	; (800cbb8 <mem_free+0x104>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	69fa      	ldr	r2, [r7, #28]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d306      	bcc.n	800cb06 <mem_free+0x52>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f103 020c 	add.w	r2, r3, #12
 800cafe:	4b2f      	ldr	r3, [pc, #188]	; (800cbbc <mem_free+0x108>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d90d      	bls.n	800cb22 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cb06:	4b29      	ldr	r3, [pc, #164]	; (800cbac <mem_free+0xf8>)
 800cb08:	f240 227f 	movw	r2, #639	; 0x27f
 800cb0c:	492c      	ldr	r1, [pc, #176]	; (800cbc0 <mem_free+0x10c>)
 800cb0e:	4829      	ldr	r0, [pc, #164]	; (800cbb4 <mem_free+0x100>)
 800cb10:	f008 fd8e 	bl	8015630 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb14:	f007 ffde 	bl	8014ad4 <sys_arch_protect>
 800cb18:	6138      	str	r0, [r7, #16]
 800cb1a:	6938      	ldr	r0, [r7, #16]
 800cb1c:	f007 ffe8 	bl	8014af0 <sys_arch_unprotect>
    return;
 800cb20:	e041      	b.n	800cba6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cb22:	4828      	ldr	r0, [pc, #160]	; (800cbc4 <mem_free+0x110>)
 800cb24:	f007 ff9c 	bl	8014a60 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	791b      	ldrb	r3, [r3, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d110      	bne.n	800cb52 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cb30:	4b1e      	ldr	r3, [pc, #120]	; (800cbac <mem_free+0xf8>)
 800cb32:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800cb36:	4924      	ldr	r1, [pc, #144]	; (800cbc8 <mem_free+0x114>)
 800cb38:	481e      	ldr	r0, [pc, #120]	; (800cbb4 <mem_free+0x100>)
 800cb3a:	f008 fd79 	bl	8015630 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cb3e:	4821      	ldr	r0, [pc, #132]	; (800cbc4 <mem_free+0x110>)
 800cb40:	f007 ff9d 	bl	8014a7e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb44:	f007 ffc6 	bl	8014ad4 <sys_arch_protect>
 800cb48:	6178      	str	r0, [r7, #20]
 800cb4a:	6978      	ldr	r0, [r7, #20]
 800cb4c:	f007 ffd0 	bl	8014af0 <sys_arch_unprotect>
    return;
 800cb50:	e029      	b.n	800cba6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800cb52:	69f8      	ldr	r0, [r7, #28]
 800cb54:	f7ff ff72 	bl	800ca3c <mem_link_valid>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d110      	bne.n	800cb80 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cb5e:	4b13      	ldr	r3, [pc, #76]	; (800cbac <mem_free+0xf8>)
 800cb60:	f240 2295 	movw	r2, #661	; 0x295
 800cb64:	4919      	ldr	r1, [pc, #100]	; (800cbcc <mem_free+0x118>)
 800cb66:	4813      	ldr	r0, [pc, #76]	; (800cbb4 <mem_free+0x100>)
 800cb68:	f008 fd62 	bl	8015630 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cb6c:	4815      	ldr	r0, [pc, #84]	; (800cbc4 <mem_free+0x110>)
 800cb6e:	f007 ff86 	bl	8014a7e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb72:	f007 ffaf 	bl	8014ad4 <sys_arch_protect>
 800cb76:	61b8      	str	r0, [r7, #24]
 800cb78:	69b8      	ldr	r0, [r7, #24]
 800cb7a:	f007 ffb9 	bl	8014af0 <sys_arch_unprotect>
    return;
 800cb7e:	e012      	b.n	800cba6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	2200      	movs	r2, #0
 800cb84:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cb86:	4b12      	ldr	r3, [pc, #72]	; (800cbd0 <mem_free+0x11c>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	69fa      	ldr	r2, [r7, #28]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d202      	bcs.n	800cb96 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cb90:	4a0f      	ldr	r2, [pc, #60]	; (800cbd0 <mem_free+0x11c>)
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cb96:	69f8      	ldr	r0, [r7, #28]
 800cb98:	f7ff fe5c 	bl	800c854 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cb9c:	4809      	ldr	r0, [pc, #36]	; (800cbc4 <mem_free+0x110>)
 800cb9e:	f007 ff6e 	bl	8014a7e <sys_mutex_unlock>
 800cba2:	e000      	b.n	800cba6 <mem_free+0xf2>
    return;
 800cba4:	bf00      	nop
}
 800cba6:	3720      	adds	r7, #32
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	08019fc8 	.word	0x08019fc8
 800cbb0:	0801a114 	.word	0x0801a114
 800cbb4:	0801a06c 	.word	0x0801a06c
 800cbb8:	20006888 	.word	0x20006888
 800cbbc:	2000688c 	.word	0x2000688c
 800cbc0:	0801a138 	.word	0x0801a138
 800cbc4:	20006890 	.word	0x20006890
 800cbc8:	0801a154 	.word	0x0801a154
 800cbcc:	0801a17c 	.word	0x0801a17c
 800cbd0:	20006894 	.word	0x20006894

0800cbd4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	460b      	mov	r3, r1
 800cbde:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cbe0:	887b      	ldrh	r3, [r7, #2]
 800cbe2:	3303      	adds	r3, #3
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	f023 0303 	bic.w	r3, r3, #3
 800cbea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cbec:	8bfb      	ldrh	r3, [r7, #30]
 800cbee:	2b0b      	cmp	r3, #11
 800cbf0:	d801      	bhi.n	800cbf6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cbf2:	230c      	movs	r3, #12
 800cbf4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cbf6:	8bfb      	ldrh	r3, [r7, #30]
 800cbf8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cbfc:	d803      	bhi.n	800cc06 <mem_trim+0x32>
 800cbfe:	8bfa      	ldrh	r2, [r7, #30]
 800cc00:	887b      	ldrh	r3, [r7, #2]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d201      	bcs.n	800cc0a <mem_trim+0x36>
    return NULL;
 800cc06:	2300      	movs	r3, #0
 800cc08:	e0d8      	b.n	800cdbc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cc0a:	4b6e      	ldr	r3, [pc, #440]	; (800cdc4 <mem_trim+0x1f0>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d304      	bcc.n	800cc1e <mem_trim+0x4a>
 800cc14:	4b6c      	ldr	r3, [pc, #432]	; (800cdc8 <mem_trim+0x1f4>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d306      	bcc.n	800cc2c <mem_trim+0x58>
 800cc1e:	4b6b      	ldr	r3, [pc, #428]	; (800cdcc <mem_trim+0x1f8>)
 800cc20:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cc24:	496a      	ldr	r1, [pc, #424]	; (800cdd0 <mem_trim+0x1fc>)
 800cc26:	486b      	ldr	r0, [pc, #428]	; (800cdd4 <mem_trim+0x200>)
 800cc28:	f008 fd02 	bl	8015630 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cc2c:	4b65      	ldr	r3, [pc, #404]	; (800cdc4 <mem_trim+0x1f0>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d304      	bcc.n	800cc40 <mem_trim+0x6c>
 800cc36:	4b64      	ldr	r3, [pc, #400]	; (800cdc8 <mem_trim+0x1f4>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d307      	bcc.n	800cc50 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cc40:	f007 ff48 	bl	8014ad4 <sys_arch_protect>
 800cc44:	60b8      	str	r0, [r7, #8]
 800cc46:	68b8      	ldr	r0, [r7, #8]
 800cc48:	f007 ff52 	bl	8014af0 <sys_arch_unprotect>
    return rmem;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	e0b5      	b.n	800cdbc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	3b08      	subs	r3, #8
 800cc54:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cc56:	69b8      	ldr	r0, [r7, #24]
 800cc58:	f7ff fdea 	bl	800c830 <mem_to_ptr>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cc60:	69bb      	ldr	r3, [r7, #24]
 800cc62:	881a      	ldrh	r2, [r3, #0]
 800cc64:	8afb      	ldrh	r3, [r7, #22]
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	3b08      	subs	r3, #8
 800cc6c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cc6e:	8bfa      	ldrh	r2, [r7, #30]
 800cc70:	8abb      	ldrh	r3, [r7, #20]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d906      	bls.n	800cc84 <mem_trim+0xb0>
 800cc76:	4b55      	ldr	r3, [pc, #340]	; (800cdcc <mem_trim+0x1f8>)
 800cc78:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cc7c:	4956      	ldr	r1, [pc, #344]	; (800cdd8 <mem_trim+0x204>)
 800cc7e:	4855      	ldr	r0, [pc, #340]	; (800cdd4 <mem_trim+0x200>)
 800cc80:	f008 fcd6 	bl	8015630 <iprintf>
  if (newsize > size) {
 800cc84:	8bfa      	ldrh	r2, [r7, #30]
 800cc86:	8abb      	ldrh	r3, [r7, #20]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d901      	bls.n	800cc90 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	e095      	b.n	800cdbc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800cc90:	8bfa      	ldrh	r2, [r7, #30]
 800cc92:	8abb      	ldrh	r3, [r7, #20]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d101      	bne.n	800cc9c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	e08f      	b.n	800cdbc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cc9c:	484f      	ldr	r0, [pc, #316]	; (800cddc <mem_trim+0x208>)
 800cc9e:	f007 fedf 	bl	8014a60 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	881b      	ldrh	r3, [r3, #0]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7ff fdb0 	bl	800c80c <ptr_to_mem>
 800ccac:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	791b      	ldrb	r3, [r3, #4]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d13f      	bne.n	800cd36 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	881b      	ldrh	r3, [r3, #0]
 800ccba:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ccbe:	d106      	bne.n	800ccce <mem_trim+0xfa>
 800ccc0:	4b42      	ldr	r3, [pc, #264]	; (800cdcc <mem_trim+0x1f8>)
 800ccc2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ccc6:	4946      	ldr	r1, [pc, #280]	; (800cde0 <mem_trim+0x20c>)
 800ccc8:	4842      	ldr	r0, [pc, #264]	; (800cdd4 <mem_trim+0x200>)
 800ccca:	f008 fcb1 	bl	8015630 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	881b      	ldrh	r3, [r3, #0]
 800ccd2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ccd4:	8afa      	ldrh	r2, [r7, #22]
 800ccd6:	8bfb      	ldrh	r3, [r7, #30]
 800ccd8:	4413      	add	r3, r2
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	3308      	adds	r3, #8
 800ccde:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cce0:	4b40      	ldr	r3, [pc, #256]	; (800cde4 <mem_trim+0x210>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	693a      	ldr	r2, [r7, #16]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d106      	bne.n	800ccf8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ccea:	89fb      	ldrh	r3, [r7, #14]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff fd8d 	bl	800c80c <ptr_to_mem>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	4a3b      	ldr	r2, [pc, #236]	; (800cde4 <mem_trim+0x210>)
 800ccf6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ccf8:	89fb      	ldrh	r3, [r7, #14]
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7ff fd86 	bl	800c80c <ptr_to_mem>
 800cd00:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	2200      	movs	r2, #0
 800cd06:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	89ba      	ldrh	r2, [r7, #12]
 800cd0c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	8afa      	ldrh	r2, [r7, #22]
 800cd12:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cd14:	69bb      	ldr	r3, [r7, #24]
 800cd16:	89fa      	ldrh	r2, [r7, #14]
 800cd18:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	881b      	ldrh	r3, [r3, #0]
 800cd1e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cd22:	d047      	beq.n	800cdb4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7ff fd6f 	bl	800c80c <ptr_to_mem>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	89fb      	ldrh	r3, [r7, #14]
 800cd32:	8053      	strh	r3, [r2, #2]
 800cd34:	e03e      	b.n	800cdb4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cd36:	8bfb      	ldrh	r3, [r7, #30]
 800cd38:	f103 0214 	add.w	r2, r3, #20
 800cd3c:	8abb      	ldrh	r3, [r7, #20]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d838      	bhi.n	800cdb4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cd42:	8afa      	ldrh	r2, [r7, #22]
 800cd44:	8bfb      	ldrh	r3, [r7, #30]
 800cd46:	4413      	add	r3, r2
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	3308      	adds	r3, #8
 800cd4c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cd4e:	69bb      	ldr	r3, [r7, #24]
 800cd50:	881b      	ldrh	r3, [r3, #0]
 800cd52:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cd56:	d106      	bne.n	800cd66 <mem_trim+0x192>
 800cd58:	4b1c      	ldr	r3, [pc, #112]	; (800cdcc <mem_trim+0x1f8>)
 800cd5a:	f240 3216 	movw	r2, #790	; 0x316
 800cd5e:	4920      	ldr	r1, [pc, #128]	; (800cde0 <mem_trim+0x20c>)
 800cd60:	481c      	ldr	r0, [pc, #112]	; (800cdd4 <mem_trim+0x200>)
 800cd62:	f008 fc65 	bl	8015630 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cd66:	89fb      	ldrh	r3, [r7, #14]
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7ff fd4f 	bl	800c80c <ptr_to_mem>
 800cd6e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cd70:	4b1c      	ldr	r3, [pc, #112]	; (800cde4 <mem_trim+0x210>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	693a      	ldr	r2, [r7, #16]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d202      	bcs.n	800cd80 <mem_trim+0x1ac>
      lfree = mem2;
 800cd7a:	4a1a      	ldr	r2, [pc, #104]	; (800cde4 <mem_trim+0x210>)
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	2200      	movs	r2, #0
 800cd84:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	881a      	ldrh	r2, [r3, #0]
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	8afa      	ldrh	r2, [r7, #22]
 800cd92:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	89fa      	ldrh	r2, [r7, #14]
 800cd98:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	881b      	ldrh	r3, [r3, #0]
 800cd9e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cda2:	d007      	beq.n	800cdb4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	881b      	ldrh	r3, [r3, #0]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7ff fd2f 	bl	800c80c <ptr_to_mem>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	89fb      	ldrh	r3, [r7, #14]
 800cdb2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cdb4:	4809      	ldr	r0, [pc, #36]	; (800cddc <mem_trim+0x208>)
 800cdb6:	f007 fe62 	bl	8014a7e <sys_mutex_unlock>
  return rmem;
 800cdba:	687b      	ldr	r3, [r7, #4]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3720      	adds	r7, #32
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	20006888 	.word	0x20006888
 800cdc8:	2000688c 	.word	0x2000688c
 800cdcc:	08019fc8 	.word	0x08019fc8
 800cdd0:	0801a1b0 	.word	0x0801a1b0
 800cdd4:	0801a06c 	.word	0x0801a06c
 800cdd8:	0801a1c8 	.word	0x0801a1c8
 800cddc:	20006890 	.word	0x20006890
 800cde0:	0801a1e8 	.word	0x0801a1e8
 800cde4:	20006894 	.word	0x20006894

0800cde8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b088      	sub	sp, #32
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	4603      	mov	r3, r0
 800cdf0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cdf2:	88fb      	ldrh	r3, [r7, #6]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d101      	bne.n	800cdfc <mem_malloc+0x14>
    return NULL;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	e0e2      	b.n	800cfc2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cdfc:	88fb      	ldrh	r3, [r7, #6]
 800cdfe:	3303      	adds	r3, #3
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	f023 0303 	bic.w	r3, r3, #3
 800ce06:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ce08:	8bbb      	ldrh	r3, [r7, #28]
 800ce0a:	2b0b      	cmp	r3, #11
 800ce0c:	d801      	bhi.n	800ce12 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ce0e:	230c      	movs	r3, #12
 800ce10:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ce12:	8bbb      	ldrh	r3, [r7, #28]
 800ce14:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ce18:	d803      	bhi.n	800ce22 <mem_malloc+0x3a>
 800ce1a:	8bba      	ldrh	r2, [r7, #28]
 800ce1c:	88fb      	ldrh	r3, [r7, #6]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d201      	bcs.n	800ce26 <mem_malloc+0x3e>
    return NULL;
 800ce22:	2300      	movs	r3, #0
 800ce24:	e0cd      	b.n	800cfc2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ce26:	4869      	ldr	r0, [pc, #420]	; (800cfcc <mem_malloc+0x1e4>)
 800ce28:	f007 fe1a 	bl	8014a60 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ce2c:	4b68      	ldr	r3, [pc, #416]	; (800cfd0 <mem_malloc+0x1e8>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7ff fcfd 	bl	800c830 <mem_to_ptr>
 800ce36:	4603      	mov	r3, r0
 800ce38:	83fb      	strh	r3, [r7, #30]
 800ce3a:	e0b7      	b.n	800cfac <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ce3c:	8bfb      	ldrh	r3, [r7, #30]
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7ff fce4 	bl	800c80c <ptr_to_mem>
 800ce44:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	791b      	ldrb	r3, [r3, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f040 80a7 	bne.w	800cf9e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	881b      	ldrh	r3, [r3, #0]
 800ce54:	461a      	mov	r2, r3
 800ce56:	8bfb      	ldrh	r3, [r7, #30]
 800ce58:	1ad3      	subs	r3, r2, r3
 800ce5a:	f1a3 0208 	sub.w	r2, r3, #8
 800ce5e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ce60:	429a      	cmp	r2, r3
 800ce62:	f0c0 809c 	bcc.w	800cf9e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	881b      	ldrh	r3, [r3, #0]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	8bfb      	ldrh	r3, [r7, #30]
 800ce6e:	1ad3      	subs	r3, r2, r3
 800ce70:	f1a3 0208 	sub.w	r2, r3, #8
 800ce74:	8bbb      	ldrh	r3, [r7, #28]
 800ce76:	3314      	adds	r3, #20
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d333      	bcc.n	800cee4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ce7c:	8bfa      	ldrh	r2, [r7, #30]
 800ce7e:	8bbb      	ldrh	r3, [r7, #28]
 800ce80:	4413      	add	r3, r2
 800ce82:	b29b      	uxth	r3, r3
 800ce84:	3308      	adds	r3, #8
 800ce86:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ce88:	8a7b      	ldrh	r3, [r7, #18]
 800ce8a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ce8e:	d106      	bne.n	800ce9e <mem_malloc+0xb6>
 800ce90:	4b50      	ldr	r3, [pc, #320]	; (800cfd4 <mem_malloc+0x1ec>)
 800ce92:	f240 3287 	movw	r2, #903	; 0x387
 800ce96:	4950      	ldr	r1, [pc, #320]	; (800cfd8 <mem_malloc+0x1f0>)
 800ce98:	4850      	ldr	r0, [pc, #320]	; (800cfdc <mem_malloc+0x1f4>)
 800ce9a:	f008 fbc9 	bl	8015630 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ce9e:	8a7b      	ldrh	r3, [r7, #18]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7ff fcb3 	bl	800c80c <ptr_to_mem>
 800cea6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	881a      	ldrh	r2, [r3, #0]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	8bfa      	ldrh	r2, [r7, #30]
 800ceba:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	8a7a      	ldrh	r2, [r7, #18]
 800cec0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	2201      	movs	r2, #1
 800cec6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	881b      	ldrh	r3, [r3, #0]
 800cecc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ced0:	d00b      	beq.n	800ceea <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	881b      	ldrh	r3, [r3, #0]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7ff fc98 	bl	800c80c <ptr_to_mem>
 800cedc:	4602      	mov	r2, r0
 800cede:	8a7b      	ldrh	r3, [r7, #18]
 800cee0:	8053      	strh	r3, [r2, #2]
 800cee2:	e002      	b.n	800ceea <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	2201      	movs	r2, #1
 800cee8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ceea:	4b39      	ldr	r3, [pc, #228]	; (800cfd0 <mem_malloc+0x1e8>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	697a      	ldr	r2, [r7, #20]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d127      	bne.n	800cf44 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cef4:	4b36      	ldr	r3, [pc, #216]	; (800cfd0 <mem_malloc+0x1e8>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cefa:	e005      	b.n	800cf08 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	881b      	ldrh	r3, [r3, #0]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7ff fc83 	bl	800c80c <ptr_to_mem>
 800cf06:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	791b      	ldrb	r3, [r3, #4]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d004      	beq.n	800cf1a <mem_malloc+0x132>
 800cf10:	4b33      	ldr	r3, [pc, #204]	; (800cfe0 <mem_malloc+0x1f8>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	69ba      	ldr	r2, [r7, #24]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d1f0      	bne.n	800cefc <mem_malloc+0x114>
          }
          lfree = cur;
 800cf1a:	4a2d      	ldr	r2, [pc, #180]	; (800cfd0 <mem_malloc+0x1e8>)
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cf20:	4b2b      	ldr	r3, [pc, #172]	; (800cfd0 <mem_malloc+0x1e8>)
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	4b2e      	ldr	r3, [pc, #184]	; (800cfe0 <mem_malloc+0x1f8>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d00b      	beq.n	800cf44 <mem_malloc+0x15c>
 800cf2c:	4b28      	ldr	r3, [pc, #160]	; (800cfd0 <mem_malloc+0x1e8>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	791b      	ldrb	r3, [r3, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d006      	beq.n	800cf44 <mem_malloc+0x15c>
 800cf36:	4b27      	ldr	r3, [pc, #156]	; (800cfd4 <mem_malloc+0x1ec>)
 800cf38:	f240 32b5 	movw	r2, #949	; 0x3b5
 800cf3c:	4929      	ldr	r1, [pc, #164]	; (800cfe4 <mem_malloc+0x1fc>)
 800cf3e:	4827      	ldr	r0, [pc, #156]	; (800cfdc <mem_malloc+0x1f4>)
 800cf40:	f008 fb76 	bl	8015630 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800cf44:	4821      	ldr	r0, [pc, #132]	; (800cfcc <mem_malloc+0x1e4>)
 800cf46:	f007 fd9a 	bl	8014a7e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cf4a:	8bba      	ldrh	r2, [r7, #28]
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	4413      	add	r3, r2
 800cf50:	3308      	adds	r3, #8
 800cf52:	4a23      	ldr	r2, [pc, #140]	; (800cfe0 <mem_malloc+0x1f8>)
 800cf54:	6812      	ldr	r2, [r2, #0]
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d906      	bls.n	800cf68 <mem_malloc+0x180>
 800cf5a:	4b1e      	ldr	r3, [pc, #120]	; (800cfd4 <mem_malloc+0x1ec>)
 800cf5c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800cf60:	4921      	ldr	r1, [pc, #132]	; (800cfe8 <mem_malloc+0x200>)
 800cf62:	481e      	ldr	r0, [pc, #120]	; (800cfdc <mem_malloc+0x1f4>)
 800cf64:	f008 fb64 	bl	8015630 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	f003 0303 	and.w	r3, r3, #3
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d006      	beq.n	800cf80 <mem_malloc+0x198>
 800cf72:	4b18      	ldr	r3, [pc, #96]	; (800cfd4 <mem_malloc+0x1ec>)
 800cf74:	f240 32bb 	movw	r2, #955	; 0x3bb
 800cf78:	491c      	ldr	r1, [pc, #112]	; (800cfec <mem_malloc+0x204>)
 800cf7a:	4818      	ldr	r0, [pc, #96]	; (800cfdc <mem_malloc+0x1f4>)
 800cf7c:	f008 fb58 	bl	8015630 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	f003 0303 	and.w	r3, r3, #3
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d006      	beq.n	800cf98 <mem_malloc+0x1b0>
 800cf8a:	4b12      	ldr	r3, [pc, #72]	; (800cfd4 <mem_malloc+0x1ec>)
 800cf8c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cf90:	4917      	ldr	r1, [pc, #92]	; (800cff0 <mem_malloc+0x208>)
 800cf92:	4812      	ldr	r0, [pc, #72]	; (800cfdc <mem_malloc+0x1f4>)
 800cf94:	f008 fb4c 	bl	8015630 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	3308      	adds	r3, #8
 800cf9c:	e011      	b.n	800cfc2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800cf9e:	8bfb      	ldrh	r3, [r7, #30]
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7ff fc33 	bl	800c80c <ptr_to_mem>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	881b      	ldrh	r3, [r3, #0]
 800cfaa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cfac:	8bfa      	ldrh	r2, [r7, #30]
 800cfae:	8bbb      	ldrh	r3, [r7, #28]
 800cfb0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	f4ff af41 	bcc.w	800ce3c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800cfba:	4804      	ldr	r0, [pc, #16]	; (800cfcc <mem_malloc+0x1e4>)
 800cfbc:	f007 fd5f 	bl	8014a7e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3720      	adds	r7, #32
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	20006890 	.word	0x20006890
 800cfd0:	20006894 	.word	0x20006894
 800cfd4:	08019fc8 	.word	0x08019fc8
 800cfd8:	0801a1e8 	.word	0x0801a1e8
 800cfdc:	0801a06c 	.word	0x0801a06c
 800cfe0:	2000688c 	.word	0x2000688c
 800cfe4:	0801a1fc 	.word	0x0801a1fc
 800cfe8:	0801a218 	.word	0x0801a218
 800cfec:	0801a248 	.word	0x0801a248
 800cff0:	0801a278 	.word	0x0801a278

0800cff4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	2200      	movs	r2, #0
 800d002:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	3303      	adds	r3, #3
 800d00a:	f023 0303 	bic.w	r3, r3, #3
 800d00e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d010:	2300      	movs	r3, #0
 800d012:	60fb      	str	r3, [r7, #12]
 800d014:	e011      	b.n	800d03a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	689b      	ldr	r3, [r3, #8]
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	68ba      	ldr	r2, [r7, #8]
 800d026:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	881b      	ldrh	r3, [r3, #0]
 800d02c:	461a      	mov	r2, r3
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	4413      	add	r3, r2
 800d032:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	3301      	adds	r3, #1
 800d038:	60fb      	str	r3, [r7, #12]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	885b      	ldrh	r3, [r3, #2]
 800d03e:	461a      	mov	r2, r3
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	4293      	cmp	r3, r2
 800d044:	dbe7      	blt.n	800d016 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d046:	bf00      	nop
 800d048:	bf00      	nop
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d05a:	2300      	movs	r3, #0
 800d05c:	80fb      	strh	r3, [r7, #6]
 800d05e:	e009      	b.n	800d074 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d060:	88fb      	ldrh	r3, [r7, #6]
 800d062:	4a08      	ldr	r2, [pc, #32]	; (800d084 <memp_init+0x30>)
 800d064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d068:	4618      	mov	r0, r3
 800d06a:	f7ff ffc3 	bl	800cff4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d06e:	88fb      	ldrh	r3, [r7, #6]
 800d070:	3301      	adds	r3, #1
 800d072:	80fb      	strh	r3, [r7, #6]
 800d074:	88fb      	ldrh	r3, [r7, #6]
 800d076:	2b0c      	cmp	r3, #12
 800d078:	d9f2      	bls.n	800d060 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d07a:	bf00      	nop
 800d07c:	bf00      	nop
 800d07e:	3708      	adds	r7, #8
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	0801a338 	.word	0x0801a338

0800d088 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d090:	f007 fd20 	bl	8014ad4 <sys_arch_protect>
 800d094:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d015      	beq.n	800d0d0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	6812      	ldr	r2, [r2, #0]
 800d0ac:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	f003 0303 	and.w	r3, r3, #3
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d006      	beq.n	800d0c6 <do_memp_malloc_pool+0x3e>
 800d0b8:	4b09      	ldr	r3, [pc, #36]	; (800d0e0 <do_memp_malloc_pool+0x58>)
 800d0ba:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d0be:	4909      	ldr	r1, [pc, #36]	; (800d0e4 <do_memp_malloc_pool+0x5c>)
 800d0c0:	4809      	ldr	r0, [pc, #36]	; (800d0e8 <do_memp_malloc_pool+0x60>)
 800d0c2:	f008 fab5 	bl	8015630 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d0c6:	68f8      	ldr	r0, [r7, #12]
 800d0c8:	f007 fd12 	bl	8014af0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	e003      	b.n	800d0d8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d0d0:	68f8      	ldr	r0, [r7, #12]
 800d0d2:	f007 fd0d 	bl	8014af0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d0d6:	2300      	movs	r3, #0
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3710      	adds	r7, #16
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	0801a36c 	.word	0x0801a36c
 800d0e4:	0801a3fc 	.word	0x0801a3fc
 800d0e8:	0801a420 	.word	0x0801a420

0800d0ec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d0f6:	79fb      	ldrb	r3, [r7, #7]
 800d0f8:	2b0c      	cmp	r3, #12
 800d0fa:	d908      	bls.n	800d10e <memp_malloc+0x22>
 800d0fc:	4b0a      	ldr	r3, [pc, #40]	; (800d128 <memp_malloc+0x3c>)
 800d0fe:	f240 1257 	movw	r2, #343	; 0x157
 800d102:	490a      	ldr	r1, [pc, #40]	; (800d12c <memp_malloc+0x40>)
 800d104:	480a      	ldr	r0, [pc, #40]	; (800d130 <memp_malloc+0x44>)
 800d106:	f008 fa93 	bl	8015630 <iprintf>
 800d10a:	2300      	movs	r3, #0
 800d10c:	e008      	b.n	800d120 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d10e:	79fb      	ldrb	r3, [r7, #7]
 800d110:	4a08      	ldr	r2, [pc, #32]	; (800d134 <memp_malloc+0x48>)
 800d112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d116:	4618      	mov	r0, r3
 800d118:	f7ff ffb6 	bl	800d088 <do_memp_malloc_pool>
 800d11c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d11e:	68fb      	ldr	r3, [r7, #12]
}
 800d120:	4618      	mov	r0, r3
 800d122:	3710      	adds	r7, #16
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	0801a36c 	.word	0x0801a36c
 800d12c:	0801a45c 	.word	0x0801a45c
 800d130:	0801a420 	.word	0x0801a420
 800d134:	0801a338 	.word	0x0801a338

0800d138 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	f003 0303 	and.w	r3, r3, #3
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d006      	beq.n	800d15a <do_memp_free_pool+0x22>
 800d14c:	4b0d      	ldr	r3, [pc, #52]	; (800d184 <do_memp_free_pool+0x4c>)
 800d14e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d152:	490d      	ldr	r1, [pc, #52]	; (800d188 <do_memp_free_pool+0x50>)
 800d154:	480d      	ldr	r0, [pc, #52]	; (800d18c <do_memp_free_pool+0x54>)
 800d156:	f008 fa6b 	bl	8015630 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d15e:	f007 fcb9 	bl	8014ad4 <sys_arch_protect>
 800d162:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	689b      	ldr	r3, [r3, #8]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d176:	68b8      	ldr	r0, [r7, #8]
 800d178:	f007 fcba 	bl	8014af0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d17c:	bf00      	nop
 800d17e:	3710      	adds	r7, #16
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	0801a36c 	.word	0x0801a36c
 800d188:	0801a47c 	.word	0x0801a47c
 800d18c:	0801a420 	.word	0x0801a420

0800d190 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	4603      	mov	r3, r0
 800d198:	6039      	str	r1, [r7, #0]
 800d19a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d19c:	79fb      	ldrb	r3, [r7, #7]
 800d19e:	2b0c      	cmp	r3, #12
 800d1a0:	d907      	bls.n	800d1b2 <memp_free+0x22>
 800d1a2:	4b0c      	ldr	r3, [pc, #48]	; (800d1d4 <memp_free+0x44>)
 800d1a4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d1a8:	490b      	ldr	r1, [pc, #44]	; (800d1d8 <memp_free+0x48>)
 800d1aa:	480c      	ldr	r0, [pc, #48]	; (800d1dc <memp_free+0x4c>)
 800d1ac:	f008 fa40 	bl	8015630 <iprintf>
 800d1b0:	e00c      	b.n	800d1cc <memp_free+0x3c>

  if (mem == NULL) {
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d008      	beq.n	800d1ca <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d1b8:	79fb      	ldrb	r3, [r7, #7]
 800d1ba:	4a09      	ldr	r2, [pc, #36]	; (800d1e0 <memp_free+0x50>)
 800d1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1c0:	6839      	ldr	r1, [r7, #0]
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7ff ffb8 	bl	800d138 <do_memp_free_pool>
 800d1c8:	e000      	b.n	800d1cc <memp_free+0x3c>
    return;
 800d1ca:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d1cc:	3708      	adds	r7, #8
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	0801a36c 	.word	0x0801a36c
 800d1d8:	0801a49c 	.word	0x0801a49c
 800d1dc:	0801a420 	.word	0x0801a420
 800d1e0:	0801a338 	.word	0x0801a338

0800d1e4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d1e8:	bf00      	nop
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
	...

0800d1f4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b086      	sub	sp, #24
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
 800d200:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d108      	bne.n	800d21a <netif_add+0x26>
 800d208:	4b5b      	ldr	r3, [pc, #364]	; (800d378 <netif_add+0x184>)
 800d20a:	f240 1227 	movw	r2, #295	; 0x127
 800d20e:	495b      	ldr	r1, [pc, #364]	; (800d37c <netif_add+0x188>)
 800d210:	485b      	ldr	r0, [pc, #364]	; (800d380 <netif_add+0x18c>)
 800d212:	f008 fa0d 	bl	8015630 <iprintf>
 800d216:	2300      	movs	r3, #0
 800d218:	e0a9      	b.n	800d36e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d108      	bne.n	800d232 <netif_add+0x3e>
 800d220:	4b55      	ldr	r3, [pc, #340]	; (800d378 <netif_add+0x184>)
 800d222:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d226:	4957      	ldr	r1, [pc, #348]	; (800d384 <netif_add+0x190>)
 800d228:	4855      	ldr	r0, [pc, #340]	; (800d380 <netif_add+0x18c>)
 800d22a:	f008 fa01 	bl	8015630 <iprintf>
 800d22e:	2300      	movs	r3, #0
 800d230:	e09d      	b.n	800d36e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d101      	bne.n	800d23c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d238:	4b53      	ldr	r3, [pc, #332]	; (800d388 <netif_add+0x194>)
 800d23a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d101      	bne.n	800d246 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d242:	4b51      	ldr	r3, [pc, #324]	; (800d388 <netif_add+0x194>)
 800d244:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d101      	bne.n	800d250 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d24c:	4b4e      	ldr	r3, [pc, #312]	; (800d388 <netif_add+0x194>)
 800d24e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2200      	movs	r2, #0
 800d254:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2200      	movs	r2, #0
 800d25a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2200      	movs	r2, #0
 800d260:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	4a49      	ldr	r2, [pc, #292]	; (800d38c <netif_add+0x198>)
 800d266:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2200      	movs	r2, #0
 800d26c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2200      	movs	r2, #0
 800d272:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	3324      	adds	r3, #36	; 0x24
 800d27a:	2204      	movs	r2, #4
 800d27c:	2100      	movs	r1, #0
 800d27e:	4618      	mov	r0, r3
 800d280:	f007 fcba 	bl	8014bf8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2200      	movs	r2, #0
 800d288:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6a3a      	ldr	r2, [r7, #32]
 800d28e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d290:	4b3f      	ldr	r3, [pc, #252]	; (800d390 <netif_add+0x19c>)
 800d292:	781a      	ldrb	r2, [r3, #0]
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d29e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	68b9      	ldr	r1, [r7, #8]
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f000 f914 	bl	800d4d4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	4798      	blx	r3
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d001      	beq.n	800d2bc <netif_add+0xc8>
    return NULL;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	e058      	b.n	800d36e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d2c2:	2bff      	cmp	r3, #255	; 0xff
 800d2c4:	d103      	bne.n	800d2ce <netif_add+0xda>
        netif->num = 0;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d2d2:	4b30      	ldr	r3, [pc, #192]	; (800d394 <netif_add+0x1a0>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	617b      	str	r3, [r7, #20]
 800d2d8:	e02b      	b.n	800d332 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d2da:	697a      	ldr	r2, [r7, #20]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d106      	bne.n	800d2f0 <netif_add+0xfc>
 800d2e2:	4b25      	ldr	r3, [pc, #148]	; (800d378 <netif_add+0x184>)
 800d2e4:	f240 128b 	movw	r2, #395	; 0x18b
 800d2e8:	492b      	ldr	r1, [pc, #172]	; (800d398 <netif_add+0x1a4>)
 800d2ea:	4825      	ldr	r0, [pc, #148]	; (800d380 <netif_add+0x18c>)
 800d2ec:	f008 f9a0 	bl	8015630 <iprintf>
        num_netifs++;
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	2bff      	cmp	r3, #255	; 0xff
 800d2fa:	dd06      	ble.n	800d30a <netif_add+0x116>
 800d2fc:	4b1e      	ldr	r3, [pc, #120]	; (800d378 <netif_add+0x184>)
 800d2fe:	f240 128d 	movw	r2, #397	; 0x18d
 800d302:	4926      	ldr	r1, [pc, #152]	; (800d39c <netif_add+0x1a8>)
 800d304:	481e      	ldr	r0, [pc, #120]	; (800d380 <netif_add+0x18c>)
 800d306:	f008 f993 	bl	8015630 <iprintf>
        if (netif2->num == netif->num) {
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d316:	429a      	cmp	r2, r3
 800d318:	d108      	bne.n	800d32c <netif_add+0x138>
          netif->num++;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d320:	3301      	adds	r3, #1
 800d322:	b2da      	uxtb	r2, r3
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800d32a:	e005      	b.n	800d338 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	617b      	str	r3, [r7, #20]
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d1d0      	bne.n	800d2da <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d1be      	bne.n	800d2bc <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d344:	2bfe      	cmp	r3, #254	; 0xfe
 800d346:	d103      	bne.n	800d350 <netif_add+0x15c>
    netif_num = 0;
 800d348:	4b11      	ldr	r3, [pc, #68]	; (800d390 <netif_add+0x19c>)
 800d34a:	2200      	movs	r2, #0
 800d34c:	701a      	strb	r2, [r3, #0]
 800d34e:	e006      	b.n	800d35e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d356:	3301      	adds	r3, #1
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	4b0d      	ldr	r3, [pc, #52]	; (800d390 <netif_add+0x19c>)
 800d35c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d35e:	4b0d      	ldr	r3, [pc, #52]	; (800d394 <netif_add+0x1a0>)
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d366:	4a0b      	ldr	r2, [pc, #44]	; (800d394 <netif_add+0x1a0>)
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d36c:	68fb      	ldr	r3, [r7, #12]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3718      	adds	r7, #24
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	0801a4b8 	.word	0x0801a4b8
 800d37c:	0801a5a8 	.word	0x0801a5a8
 800d380:	0801a564 	.word	0x0801a564
 800d384:	0801a5c4 	.word	0x0801a5c4
 800d388:	08019c70 	.word	0x08019c70
 800d38c:	0800d6c5 	.word	0x0800d6c5
 800d390:	200068cc 	.word	0x200068cc
 800d394:	2000cfbc 	.word	0x2000cfbc
 800d398:	0801a5e8 	.word	0x0801a5e8
 800d39c:	0801a5fc 	.word	0x0801a5fc

0800d3a0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d3aa:	6839      	ldr	r1, [r7, #0]
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f002 fcff 	bl	800fdb0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d3b2:	6839      	ldr	r1, [r7, #0]
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f007 f99d 	bl	80146f4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d3ba:	bf00      	nop
 800d3bc:	3708      	adds	r7, #8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
	...

0800d3c4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b086      	sub	sp, #24
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d106      	bne.n	800d3e4 <netif_do_set_ipaddr+0x20>
 800d3d6:	4b1d      	ldr	r3, [pc, #116]	; (800d44c <netif_do_set_ipaddr+0x88>)
 800d3d8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d3dc:	491c      	ldr	r1, [pc, #112]	; (800d450 <netif_do_set_ipaddr+0x8c>)
 800d3de:	481d      	ldr	r0, [pc, #116]	; (800d454 <netif_do_set_ipaddr+0x90>)
 800d3e0:	f008 f926 	bl	8015630 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d106      	bne.n	800d3f8 <netif_do_set_ipaddr+0x34>
 800d3ea:	4b18      	ldr	r3, [pc, #96]	; (800d44c <netif_do_set_ipaddr+0x88>)
 800d3ec:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d3f0:	4917      	ldr	r1, [pc, #92]	; (800d450 <netif_do_set_ipaddr+0x8c>)
 800d3f2:	4818      	ldr	r0, [pc, #96]	; (800d454 <netif_do_set_ipaddr+0x90>)
 800d3f4:	f008 f91c 	bl	8015630 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	3304      	adds	r3, #4
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	429a      	cmp	r2, r3
 800d404:	d01c      	beq.n	800d440 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	3304      	adds	r3, #4
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d416:	f107 0314 	add.w	r3, r7, #20
 800d41a:	4619      	mov	r1, r3
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f7ff ffbf 	bl	800d3a0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d002      	beq.n	800d42e <netif_do_set_ipaddr+0x6a>
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	e000      	b.n	800d430 <netif_do_set_ipaddr+0x6c>
 800d42e:	2300      	movs	r3, #0
 800d430:	68fa      	ldr	r2, [r7, #12]
 800d432:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d434:	2101      	movs	r1, #1
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f000 f8d2 	bl	800d5e0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d43c:	2301      	movs	r3, #1
 800d43e:	e000      	b.n	800d442 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	3718      	adds	r7, #24
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	0801a4b8 	.word	0x0801a4b8
 800d450:	0801a62c 	.word	0x0801a62c
 800d454:	0801a564 	.word	0x0801a564

0800d458 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	3308      	adds	r3, #8
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d00a      	beq.n	800d488 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d002      	beq.n	800d47e <netif_do_set_netmask+0x26>
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	e000      	b.n	800d480 <netif_do_set_netmask+0x28>
 800d47e:	2300      	movs	r3, #0
 800d480:	68fa      	ldr	r2, [r7, #12]
 800d482:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d484:	2301      	movs	r3, #1
 800d486:	e000      	b.n	800d48a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3714      	adds	r7, #20
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr

0800d496 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d496:	b480      	push	{r7}
 800d498:	b085      	sub	sp, #20
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	60f8      	str	r0, [r7, #12]
 800d49e:	60b9      	str	r1, [r7, #8]
 800d4a0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	330c      	adds	r3, #12
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d00a      	beq.n	800d4c6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d002      	beq.n	800d4bc <netif_do_set_gw+0x26>
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	e000      	b.n	800d4be <netif_do_set_gw+0x28>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	68fa      	ldr	r2, [r7, #12]
 800d4c0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	e000      	b.n	800d4c8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3714      	adds	r7, #20
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b088      	sub	sp, #32
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
 800d4e0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d101      	bne.n	800d4f4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d4f0:	4b1c      	ldr	r3, [pc, #112]	; (800d564 <netif_set_addr+0x90>)
 800d4f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d101      	bne.n	800d4fe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d4fa:	4b1a      	ldr	r3, [pc, #104]	; (800d564 <netif_set_addr+0x90>)
 800d4fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d504:	4b17      	ldr	r3, [pc, #92]	; (800d564 <netif_set_addr+0x90>)
 800d506:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d003      	beq.n	800d516 <netif_set_addr+0x42>
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d101      	bne.n	800d51a <netif_set_addr+0x46>
 800d516:	2301      	movs	r3, #1
 800d518:	e000      	b.n	800d51c <netif_set_addr+0x48>
 800d51a:	2300      	movs	r3, #0
 800d51c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d006      	beq.n	800d532 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d524:	f107 0310 	add.w	r3, r7, #16
 800d528:	461a      	mov	r2, r3
 800d52a:	68b9      	ldr	r1, [r7, #8]
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f7ff ff49 	bl	800d3c4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d532:	69fa      	ldr	r2, [r7, #28]
 800d534:	6879      	ldr	r1, [r7, #4]
 800d536:	68f8      	ldr	r0, [r7, #12]
 800d538:	f7ff ff8e 	bl	800d458 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d53c:	69ba      	ldr	r2, [r7, #24]
 800d53e:	6839      	ldr	r1, [r7, #0]
 800d540:	68f8      	ldr	r0, [r7, #12]
 800d542:	f7ff ffa8 	bl	800d496 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d106      	bne.n	800d55a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d54c:	f107 0310 	add.w	r3, r7, #16
 800d550:	461a      	mov	r2, r3
 800d552:	68b9      	ldr	r1, [r7, #8]
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	f7ff ff35 	bl	800d3c4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d55a:	bf00      	nop
 800d55c:	3720      	adds	r7, #32
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	08019c70 	.word	0x08019c70

0800d568 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d570:	4a04      	ldr	r2, [pc, #16]	; (800d584 <netif_set_default+0x1c>)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d576:	bf00      	nop
 800d578:	370c      	adds	r7, #12
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	2000cfc0 	.word	0x2000cfc0

0800d588 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d107      	bne.n	800d5a6 <netif_set_up+0x1e>
 800d596:	4b0f      	ldr	r3, [pc, #60]	; (800d5d4 <netif_set_up+0x4c>)
 800d598:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d59c:	490e      	ldr	r1, [pc, #56]	; (800d5d8 <netif_set_up+0x50>)
 800d59e:	480f      	ldr	r0, [pc, #60]	; (800d5dc <netif_set_up+0x54>)
 800d5a0:	f008 f846 	bl	8015630 <iprintf>
 800d5a4:	e013      	b.n	800d5ce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d5ac:	f003 0301 	and.w	r3, r3, #1
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d10c      	bne.n	800d5ce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d5ba:	f043 0301 	orr.w	r3, r3, #1
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d5c6:	2103      	movs	r1, #3
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f809 	bl	800d5e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	0801a4b8 	.word	0x0801a4b8
 800d5d8:	0801a69c 	.word	0x0801a69c
 800d5dc:	0801a564 	.word	0x0801a564

0800d5e0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d106      	bne.n	800d600 <netif_issue_reports+0x20>
 800d5f2:	4b18      	ldr	r3, [pc, #96]	; (800d654 <netif_issue_reports+0x74>)
 800d5f4:	f240 326d 	movw	r2, #877	; 0x36d
 800d5f8:	4917      	ldr	r1, [pc, #92]	; (800d658 <netif_issue_reports+0x78>)
 800d5fa:	4818      	ldr	r0, [pc, #96]	; (800d65c <netif_issue_reports+0x7c>)
 800d5fc:	f008 f818 	bl	8015630 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d606:	f003 0304 	and.w	r3, r3, #4
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d01e      	beq.n	800d64c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d614:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d017      	beq.n	800d64c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d61c:	78fb      	ldrb	r3, [r7, #3]
 800d61e:	f003 0301 	and.w	r3, r3, #1
 800d622:	2b00      	cmp	r3, #0
 800d624:	d013      	beq.n	800d64e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	3304      	adds	r3, #4
 800d62a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00e      	beq.n	800d64e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d636:	f003 0308 	and.w	r3, r3, #8
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d007      	beq.n	800d64e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	3304      	adds	r3, #4
 800d642:	4619      	mov	r1, r3
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f7fd fd19 	bl	800b07c <etharp_request>
 800d64a:	e000      	b.n	800d64e <netif_issue_reports+0x6e>
    return;
 800d64c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	0801a4b8 	.word	0x0801a4b8
 800d658:	0801a6b8 	.word	0x0801a6b8
 800d65c:	0801a564 	.word	0x0801a564

0800d660 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d107      	bne.n	800d67e <netif_set_down+0x1e>
 800d66e:	4b12      	ldr	r3, [pc, #72]	; (800d6b8 <netif_set_down+0x58>)
 800d670:	f240 329b 	movw	r2, #923	; 0x39b
 800d674:	4911      	ldr	r1, [pc, #68]	; (800d6bc <netif_set_down+0x5c>)
 800d676:	4812      	ldr	r0, [pc, #72]	; (800d6c0 <netif_set_down+0x60>)
 800d678:	f007 ffda 	bl	8015630 <iprintf>
 800d67c:	e019      	b.n	800d6b2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d684:	f003 0301 	and.w	r3, r3, #1
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d012      	beq.n	800d6b2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d692:	f023 0301 	bic.w	r3, r3, #1
 800d696:	b2da      	uxtb	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d6a4:	f003 0308 	and.w	r3, r3, #8
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d002      	beq.n	800d6b2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f7fd f89f 	bl	800a7f0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d6b2:	3708      	adds	r7, #8
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	0801a4b8 	.word	0x0801a4b8
 800d6bc:	0801a6dc 	.word	0x0801a6dc
 800d6c0:	0801a564 	.word	0x0801a564

0800d6c4 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b085      	sub	sp, #20
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	60b9      	str	r1, [r7, #8]
 800d6ce:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d6d0:	f06f 030b 	mvn.w	r3, #11
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3714      	adds	r7, #20
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b085      	sub	sp, #20
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d6ea:	79fb      	ldrb	r3, [r7, #7]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d013      	beq.n	800d718 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d6f0:	4b0d      	ldr	r3, [pc, #52]	; (800d728 <netif_get_by_index+0x48>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	60fb      	str	r3, [r7, #12]
 800d6f6:	e00c      	b.n	800d712 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d6fe:	3301      	adds	r3, #1
 800d700:	b2db      	uxtb	r3, r3
 800d702:	79fa      	ldrb	r2, [r7, #7]
 800d704:	429a      	cmp	r2, r3
 800d706:	d101      	bne.n	800d70c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	e006      	b.n	800d71a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	60fb      	str	r3, [r7, #12]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1ef      	bne.n	800d6f8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d718:	2300      	movs	r3, #0
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3714      	adds	r7, #20
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop
 800d728:	2000cfbc 	.word	0x2000cfbc

0800d72c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b085      	sub	sp, #20
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	4611      	mov	r1, r2
 800d738:	461a      	mov	r2, r3
 800d73a:	460b      	mov	r3, r1
 800d73c:	80fb      	strh	r3, [r7, #6]
 800d73e:	4613      	mov	r3, r2
 800d740:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2200      	movs	r2, #0
 800d746:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	88fa      	ldrh	r2, [r7, #6]
 800d752:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	88ba      	ldrh	r2, [r7, #4]
 800d758:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d75a:	8b3b      	ldrh	r3, [r7, #24]
 800d75c:	b2da      	uxtb	r2, r3
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	7f3a      	ldrb	r2, [r7, #28]
 800d766:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2201      	movs	r2, #1
 800d76c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2200      	movs	r2, #0
 800d772:	73da      	strb	r2, [r3, #15]
}
 800d774:	bf00      	nop
 800d776:	3714      	adds	r7, #20
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b08c      	sub	sp, #48	; 0x30
 800d784:	af02      	add	r7, sp, #8
 800d786:	4603      	mov	r3, r0
 800d788:	71fb      	strb	r3, [r7, #7]
 800d78a:	460b      	mov	r3, r1
 800d78c:	80bb      	strh	r3, [r7, #4]
 800d78e:	4613      	mov	r3, r2
 800d790:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d792:	79fb      	ldrb	r3, [r7, #7]
 800d794:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d796:	887b      	ldrh	r3, [r7, #2]
 800d798:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d79c:	d07f      	beq.n	800d89e <pbuf_alloc+0x11e>
 800d79e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d7a2:	f300 80c8 	bgt.w	800d936 <pbuf_alloc+0x1b6>
 800d7a6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d7aa:	d010      	beq.n	800d7ce <pbuf_alloc+0x4e>
 800d7ac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d7b0:	f300 80c1 	bgt.w	800d936 <pbuf_alloc+0x1b6>
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d002      	beq.n	800d7be <pbuf_alloc+0x3e>
 800d7b8:	2b41      	cmp	r3, #65	; 0x41
 800d7ba:	f040 80bc 	bne.w	800d936 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d7be:	887a      	ldrh	r2, [r7, #2]
 800d7c0:	88bb      	ldrh	r3, [r7, #4]
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	2000      	movs	r0, #0
 800d7c6:	f000 f8d1 	bl	800d96c <pbuf_alloc_reference>
 800d7ca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d7cc:	e0bd      	b.n	800d94a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d7d6:	88bb      	ldrh	r3, [r7, #4]
 800d7d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d7da:	200c      	movs	r0, #12
 800d7dc:	f7ff fc86 	bl	800d0ec <memp_malloc>
 800d7e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d107      	bne.n	800d7f8 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d002      	beq.n	800d7f4 <pbuf_alloc+0x74>
            pbuf_free(p);
 800d7ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7f0:	f000 faaa 	bl	800dd48 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	e0a9      	b.n	800d94c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d7f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7fa:	3303      	adds	r3, #3
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	f023 0303 	bic.w	r3, r3, #3
 800d802:	b29a      	uxth	r2, r3
 800d804:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800d808:	1a9b      	subs	r3, r3, r2
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	8b7a      	ldrh	r2, [r7, #26]
 800d80e:	4293      	cmp	r3, r2
 800d810:	bf28      	it	cs
 800d812:	4613      	movcs	r3, r2
 800d814:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d816:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d818:	3310      	adds	r3, #16
 800d81a:	693a      	ldr	r2, [r7, #16]
 800d81c:	4413      	add	r3, r2
 800d81e:	3303      	adds	r3, #3
 800d820:	f023 0303 	bic.w	r3, r3, #3
 800d824:	4618      	mov	r0, r3
 800d826:	89f9      	ldrh	r1, [r7, #14]
 800d828:	8b7a      	ldrh	r2, [r7, #26]
 800d82a:	2300      	movs	r3, #0
 800d82c:	9301      	str	r3, [sp, #4]
 800d82e:	887b      	ldrh	r3, [r7, #2]
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	460b      	mov	r3, r1
 800d834:	4601      	mov	r1, r0
 800d836:	6938      	ldr	r0, [r7, #16]
 800d838:	f7ff ff78 	bl	800d72c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	f003 0303 	and.w	r3, r3, #3
 800d844:	2b00      	cmp	r3, #0
 800d846:	d006      	beq.n	800d856 <pbuf_alloc+0xd6>
 800d848:	4b42      	ldr	r3, [pc, #264]	; (800d954 <pbuf_alloc+0x1d4>)
 800d84a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d84e:	4942      	ldr	r1, [pc, #264]	; (800d958 <pbuf_alloc+0x1d8>)
 800d850:	4842      	ldr	r0, [pc, #264]	; (800d95c <pbuf_alloc+0x1dc>)
 800d852:	f007 feed 	bl	8015630 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d856:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d858:	3303      	adds	r3, #3
 800d85a:	f023 0303 	bic.w	r3, r3, #3
 800d85e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800d862:	4293      	cmp	r3, r2
 800d864:	d106      	bne.n	800d874 <pbuf_alloc+0xf4>
 800d866:	4b3b      	ldr	r3, [pc, #236]	; (800d954 <pbuf_alloc+0x1d4>)
 800d868:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d86c:	493c      	ldr	r1, [pc, #240]	; (800d960 <pbuf_alloc+0x1e0>)
 800d86e:	483b      	ldr	r0, [pc, #236]	; (800d95c <pbuf_alloc+0x1dc>)
 800d870:	f007 fede 	bl	8015630 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d876:	2b00      	cmp	r3, #0
 800d878:	d102      	bne.n	800d880 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	627b      	str	r3, [r7, #36]	; 0x24
 800d87e:	e002      	b.n	800d886 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	693a      	ldr	r2, [r7, #16]
 800d884:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d88a:	8b7a      	ldrh	r2, [r7, #26]
 800d88c:	89fb      	ldrh	r3, [r7, #14]
 800d88e:	1ad3      	subs	r3, r2, r3
 800d890:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d892:	2300      	movs	r3, #0
 800d894:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d896:	8b7b      	ldrh	r3, [r7, #26]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d19e      	bne.n	800d7da <pbuf_alloc+0x5a>
      break;
 800d89c:	e055      	b.n	800d94a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d89e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8a0:	3303      	adds	r3, #3
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	f023 0303 	bic.w	r3, r3, #3
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	88bb      	ldrh	r3, [r7, #4]
 800d8ac:	3303      	adds	r3, #3
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	f023 0303 	bic.w	r3, r3, #3
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	4413      	add	r3, r2
 800d8b8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d8ba:	8b3b      	ldrh	r3, [r7, #24]
 800d8bc:	3310      	adds	r3, #16
 800d8be:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d8c0:	8b3a      	ldrh	r2, [r7, #24]
 800d8c2:	88bb      	ldrh	r3, [r7, #4]
 800d8c4:	3303      	adds	r3, #3
 800d8c6:	f023 0303 	bic.w	r3, r3, #3
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d306      	bcc.n	800d8dc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d8ce:	8afa      	ldrh	r2, [r7, #22]
 800d8d0:	88bb      	ldrh	r3, [r7, #4]
 800d8d2:	3303      	adds	r3, #3
 800d8d4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d201      	bcs.n	800d8e0 <pbuf_alloc+0x160>
        return NULL;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	e035      	b.n	800d94c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d8e0:	8afb      	ldrh	r3, [r7, #22]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7ff fa80 	bl	800cde8 <mem_malloc>
 800d8e8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d101      	bne.n	800d8f4 <pbuf_alloc+0x174>
        return NULL;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	e02b      	b.n	800d94c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d8f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8f6:	3310      	adds	r3, #16
 800d8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8fa:	4413      	add	r3, r2
 800d8fc:	3303      	adds	r3, #3
 800d8fe:	f023 0303 	bic.w	r3, r3, #3
 800d902:	4618      	mov	r0, r3
 800d904:	88b9      	ldrh	r1, [r7, #4]
 800d906:	88ba      	ldrh	r2, [r7, #4]
 800d908:	2300      	movs	r3, #0
 800d90a:	9301      	str	r3, [sp, #4]
 800d90c:	887b      	ldrh	r3, [r7, #2]
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	460b      	mov	r3, r1
 800d912:	4601      	mov	r1, r0
 800d914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d916:	f7ff ff09 	bl	800d72c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	f003 0303 	and.w	r3, r3, #3
 800d922:	2b00      	cmp	r3, #0
 800d924:	d010      	beq.n	800d948 <pbuf_alloc+0x1c8>
 800d926:	4b0b      	ldr	r3, [pc, #44]	; (800d954 <pbuf_alloc+0x1d4>)
 800d928:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d92c:	490d      	ldr	r1, [pc, #52]	; (800d964 <pbuf_alloc+0x1e4>)
 800d92e:	480b      	ldr	r0, [pc, #44]	; (800d95c <pbuf_alloc+0x1dc>)
 800d930:	f007 fe7e 	bl	8015630 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d934:	e008      	b.n	800d948 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d936:	4b07      	ldr	r3, [pc, #28]	; (800d954 <pbuf_alloc+0x1d4>)
 800d938:	f240 1227 	movw	r2, #295	; 0x127
 800d93c:	490a      	ldr	r1, [pc, #40]	; (800d968 <pbuf_alloc+0x1e8>)
 800d93e:	4807      	ldr	r0, [pc, #28]	; (800d95c <pbuf_alloc+0x1dc>)
 800d940:	f007 fe76 	bl	8015630 <iprintf>
      return NULL;
 800d944:	2300      	movs	r3, #0
 800d946:	e001      	b.n	800d94c <pbuf_alloc+0x1cc>
      break;
 800d948:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3728      	adds	r7, #40	; 0x28
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	0801a744 	.word	0x0801a744
 800d958:	0801a7d4 	.word	0x0801a7d4
 800d95c:	0801a804 	.word	0x0801a804
 800d960:	0801a82c 	.word	0x0801a82c
 800d964:	0801a860 	.word	0x0801a860
 800d968:	0801a88c 	.word	0x0801a88c

0800d96c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b086      	sub	sp, #24
 800d970:	af02      	add	r7, sp, #8
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	460b      	mov	r3, r1
 800d976:	807b      	strh	r3, [r7, #2]
 800d978:	4613      	mov	r3, r2
 800d97a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d97c:	883b      	ldrh	r3, [r7, #0]
 800d97e:	2b41      	cmp	r3, #65	; 0x41
 800d980:	d009      	beq.n	800d996 <pbuf_alloc_reference+0x2a>
 800d982:	883b      	ldrh	r3, [r7, #0]
 800d984:	2b01      	cmp	r3, #1
 800d986:	d006      	beq.n	800d996 <pbuf_alloc_reference+0x2a>
 800d988:	4b0f      	ldr	r3, [pc, #60]	; (800d9c8 <pbuf_alloc_reference+0x5c>)
 800d98a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d98e:	490f      	ldr	r1, [pc, #60]	; (800d9cc <pbuf_alloc_reference+0x60>)
 800d990:	480f      	ldr	r0, [pc, #60]	; (800d9d0 <pbuf_alloc_reference+0x64>)
 800d992:	f007 fe4d 	bl	8015630 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d996:	200b      	movs	r0, #11
 800d998:	f7ff fba8 	bl	800d0ec <memp_malloc>
 800d99c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d101      	bne.n	800d9a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	e00b      	b.n	800d9c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d9a8:	8879      	ldrh	r1, [r7, #2]
 800d9aa:	887a      	ldrh	r2, [r7, #2]
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	9301      	str	r3, [sp, #4]
 800d9b0:	883b      	ldrh	r3, [r7, #0]
 800d9b2:	9300      	str	r3, [sp, #0]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	6879      	ldr	r1, [r7, #4]
 800d9b8:	68f8      	ldr	r0, [r7, #12]
 800d9ba:	f7ff feb7 	bl	800d72c <pbuf_init_alloced_pbuf>
  return p;
 800d9be:	68fb      	ldr	r3, [r7, #12]
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3710      	adds	r7, #16
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	0801a744 	.word	0x0801a744
 800d9cc:	0801a8a8 	.word	0x0801a8a8
 800d9d0:	0801a804 	.word	0x0801a804

0800d9d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b088      	sub	sp, #32
 800d9d8:	af02      	add	r7, sp, #8
 800d9da:	607b      	str	r3, [r7, #4]
 800d9dc:	4603      	mov	r3, r0
 800d9de:	73fb      	strb	r3, [r7, #15]
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	81bb      	strh	r3, [r7, #12]
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d9e8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d9ec:	8a7b      	ldrh	r3, [r7, #18]
 800d9ee:	3303      	adds	r3, #3
 800d9f0:	f023 0203 	bic.w	r2, r3, #3
 800d9f4:	89bb      	ldrh	r3, [r7, #12]
 800d9f6:	441a      	add	r2, r3
 800d9f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d901      	bls.n	800da02 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d9fe:	2300      	movs	r3, #0
 800da00:	e018      	b.n	800da34 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800da02:	6a3b      	ldr	r3, [r7, #32]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d007      	beq.n	800da18 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800da08:	8a7b      	ldrh	r3, [r7, #18]
 800da0a:	3303      	adds	r3, #3
 800da0c:	f023 0303 	bic.w	r3, r3, #3
 800da10:	6a3a      	ldr	r2, [r7, #32]
 800da12:	4413      	add	r3, r2
 800da14:	617b      	str	r3, [r7, #20]
 800da16:	e001      	b.n	800da1c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800da18:	2300      	movs	r3, #0
 800da1a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	89b9      	ldrh	r1, [r7, #12]
 800da20:	89ba      	ldrh	r2, [r7, #12]
 800da22:	2302      	movs	r3, #2
 800da24:	9301      	str	r3, [sp, #4]
 800da26:	897b      	ldrh	r3, [r7, #10]
 800da28:	9300      	str	r3, [sp, #0]
 800da2a:	460b      	mov	r3, r1
 800da2c:	6979      	ldr	r1, [r7, #20]
 800da2e:	f7ff fe7d 	bl	800d72c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800da32:	687b      	ldr	r3, [r7, #4]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3718      	adds	r7, #24
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	460b      	mov	r3, r1
 800da46:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d106      	bne.n	800da5c <pbuf_realloc+0x20>
 800da4e:	4b3a      	ldr	r3, [pc, #232]	; (800db38 <pbuf_realloc+0xfc>)
 800da50:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800da54:	4939      	ldr	r1, [pc, #228]	; (800db3c <pbuf_realloc+0x100>)
 800da56:	483a      	ldr	r0, [pc, #232]	; (800db40 <pbuf_realloc+0x104>)
 800da58:	f007 fdea 	bl	8015630 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	891b      	ldrh	r3, [r3, #8]
 800da60:	887a      	ldrh	r2, [r7, #2]
 800da62:	429a      	cmp	r2, r3
 800da64:	d263      	bcs.n	800db2e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	891a      	ldrh	r2, [r3, #8]
 800da6a:	887b      	ldrh	r3, [r7, #2]
 800da6c:	1ad3      	subs	r3, r2, r3
 800da6e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800da70:	887b      	ldrh	r3, [r7, #2]
 800da72:	817b      	strh	r3, [r7, #10]
  q = p;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800da78:	e018      	b.n	800daac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	895b      	ldrh	r3, [r3, #10]
 800da7e:	897a      	ldrh	r2, [r7, #10]
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	891a      	ldrh	r2, [r3, #8]
 800da88:	893b      	ldrh	r3, [r7, #8]
 800da8a:	1ad3      	subs	r3, r2, r3
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d106      	bne.n	800daac <pbuf_realloc+0x70>
 800da9e:	4b26      	ldr	r3, [pc, #152]	; (800db38 <pbuf_realloc+0xfc>)
 800daa0:	f240 12af 	movw	r2, #431	; 0x1af
 800daa4:	4927      	ldr	r1, [pc, #156]	; (800db44 <pbuf_realloc+0x108>)
 800daa6:	4826      	ldr	r0, [pc, #152]	; (800db40 <pbuf_realloc+0x104>)
 800daa8:	f007 fdc2 	bl	8015630 <iprintf>
  while (rem_len > q->len) {
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	895b      	ldrh	r3, [r3, #10]
 800dab0:	897a      	ldrh	r2, [r7, #10]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d8e1      	bhi.n	800da7a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	7b1b      	ldrb	r3, [r3, #12]
 800daba:	f003 030f 	and.w	r3, r3, #15
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d121      	bne.n	800db06 <pbuf_realloc+0xca>
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	895b      	ldrh	r3, [r3, #10]
 800dac6:	897a      	ldrh	r2, [r7, #10]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d01c      	beq.n	800db06 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	7b5b      	ldrb	r3, [r3, #13]
 800dad0:	f003 0302 	and.w	r3, r3, #2
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d116      	bne.n	800db06 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	685a      	ldr	r2, [r3, #4]
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	b29a      	uxth	r2, r3
 800dae2:	897b      	ldrh	r3, [r7, #10]
 800dae4:	4413      	add	r3, r2
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	4619      	mov	r1, r3
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	f7ff f872 	bl	800cbd4 <mem_trim>
 800daf0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d106      	bne.n	800db06 <pbuf_realloc+0xca>
 800daf8:	4b0f      	ldr	r3, [pc, #60]	; (800db38 <pbuf_realloc+0xfc>)
 800dafa:	f240 12bd 	movw	r2, #445	; 0x1bd
 800dafe:	4912      	ldr	r1, [pc, #72]	; (800db48 <pbuf_realloc+0x10c>)
 800db00:	480f      	ldr	r0, [pc, #60]	; (800db40 <pbuf_realloc+0x104>)
 800db02:	f007 fd95 	bl	8015630 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	897a      	ldrh	r2, [r7, #10]
 800db0a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	895a      	ldrh	r2, [r3, #10]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d004      	beq.n	800db26 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4618      	mov	r0, r3
 800db22:	f000 f911 	bl	800dd48 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2200      	movs	r2, #0
 800db2a:	601a      	str	r2, [r3, #0]
 800db2c:	e000      	b.n	800db30 <pbuf_realloc+0xf4>
    return;
 800db2e:	bf00      	nop

}
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	0801a744 	.word	0x0801a744
 800db3c:	0801a8bc 	.word	0x0801a8bc
 800db40:	0801a804 	.word	0x0801a804
 800db44:	0801a8d4 	.word	0x0801a8d4
 800db48:	0801a8ec 	.word	0x0801a8ec

0800db4c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b086      	sub	sp, #24
 800db50:	af00      	add	r7, sp, #0
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	60b9      	str	r1, [r7, #8]
 800db56:	4613      	mov	r3, r2
 800db58:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d106      	bne.n	800db6e <pbuf_add_header_impl+0x22>
 800db60:	4b2b      	ldr	r3, [pc, #172]	; (800dc10 <pbuf_add_header_impl+0xc4>)
 800db62:	f240 12df 	movw	r2, #479	; 0x1df
 800db66:	492b      	ldr	r1, [pc, #172]	; (800dc14 <pbuf_add_header_impl+0xc8>)
 800db68:	482b      	ldr	r0, [pc, #172]	; (800dc18 <pbuf_add_header_impl+0xcc>)
 800db6a:	f007 fd61 	bl	8015630 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d003      	beq.n	800db7c <pbuf_add_header_impl+0x30>
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db7a:	d301      	bcc.n	800db80 <pbuf_add_header_impl+0x34>
    return 1;
 800db7c:	2301      	movs	r3, #1
 800db7e:	e043      	b.n	800dc08 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d101      	bne.n	800db8a <pbuf_add_header_impl+0x3e>
    return 0;
 800db86:	2300      	movs	r3, #0
 800db88:	e03e      	b.n	800dc08 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	891a      	ldrh	r2, [r3, #8]
 800db92:	8a7b      	ldrh	r3, [r7, #18]
 800db94:	4413      	add	r3, r2
 800db96:	b29b      	uxth	r3, r3
 800db98:	8a7a      	ldrh	r2, [r7, #18]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d901      	bls.n	800dba2 <pbuf_add_header_impl+0x56>
    return 1;
 800db9e:	2301      	movs	r3, #1
 800dba0:	e032      	b.n	800dc08 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	7b1b      	ldrb	r3, [r3, #12]
 800dba6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dba8:	8a3b      	ldrh	r3, [r7, #16]
 800dbaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00c      	beq.n	800dbcc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	685a      	ldr	r2, [r3, #4]
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	425b      	negs	r3, r3
 800dbba:	4413      	add	r3, r2
 800dbbc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	3310      	adds	r3, #16
 800dbc2:	697a      	ldr	r2, [r7, #20]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d20d      	bcs.n	800dbe4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dbc8:	2301      	movs	r3, #1
 800dbca:	e01d      	b.n	800dc08 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dbcc:	79fb      	ldrb	r3, [r7, #7]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d006      	beq.n	800dbe0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	685a      	ldr	r2, [r3, #4]
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	425b      	negs	r3, r3
 800dbda:	4413      	add	r3, r2
 800dbdc:	617b      	str	r3, [r7, #20]
 800dbde:	e001      	b.n	800dbe4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	e011      	b.n	800dc08 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	697a      	ldr	r2, [r7, #20]
 800dbe8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	895a      	ldrh	r2, [r3, #10]
 800dbee:	8a7b      	ldrh	r3, [r7, #18]
 800dbf0:	4413      	add	r3, r2
 800dbf2:	b29a      	uxth	r2, r3
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	891a      	ldrh	r2, [r3, #8]
 800dbfc:	8a7b      	ldrh	r3, [r7, #18]
 800dbfe:	4413      	add	r3, r2
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	811a      	strh	r2, [r3, #8]


  return 0;
 800dc06:	2300      	movs	r3, #0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3718      	adds	r7, #24
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	0801a744 	.word	0x0801a744
 800dc14:	0801a908 	.word	0x0801a908
 800dc18:	0801a804 	.word	0x0801a804

0800dc1c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dc26:	2200      	movs	r2, #0
 800dc28:	6839      	ldr	r1, [r7, #0]
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7ff ff8e 	bl	800db4c <pbuf_add_header_impl>
 800dc30:	4603      	mov	r3, r0
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3708      	adds	r7, #8
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
	...

0800dc3c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d106      	bne.n	800dc5a <pbuf_remove_header+0x1e>
 800dc4c:	4b20      	ldr	r3, [pc, #128]	; (800dcd0 <pbuf_remove_header+0x94>)
 800dc4e:	f240 224b 	movw	r2, #587	; 0x24b
 800dc52:	4920      	ldr	r1, [pc, #128]	; (800dcd4 <pbuf_remove_header+0x98>)
 800dc54:	4820      	ldr	r0, [pc, #128]	; (800dcd8 <pbuf_remove_header+0x9c>)
 800dc56:	f007 fceb 	bl	8015630 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d003      	beq.n	800dc68 <pbuf_remove_header+0x2c>
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc66:	d301      	bcc.n	800dc6c <pbuf_remove_header+0x30>
    return 1;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e02c      	b.n	800dcc6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d101      	bne.n	800dc76 <pbuf_remove_header+0x3a>
    return 0;
 800dc72:	2300      	movs	r3, #0
 800dc74:	e027      	b.n	800dcc6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	895b      	ldrh	r3, [r3, #10]
 800dc7e:	89fa      	ldrh	r2, [r7, #14]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d908      	bls.n	800dc96 <pbuf_remove_header+0x5a>
 800dc84:	4b12      	ldr	r3, [pc, #72]	; (800dcd0 <pbuf_remove_header+0x94>)
 800dc86:	f240 2255 	movw	r2, #597	; 0x255
 800dc8a:	4914      	ldr	r1, [pc, #80]	; (800dcdc <pbuf_remove_header+0xa0>)
 800dc8c:	4812      	ldr	r0, [pc, #72]	; (800dcd8 <pbuf_remove_header+0x9c>)
 800dc8e:	f007 fccf 	bl	8015630 <iprintf>
 800dc92:	2301      	movs	r3, #1
 800dc94:	e017      	b.n	800dcc6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	685a      	ldr	r2, [r3, #4]
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	441a      	add	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	895a      	ldrh	r2, [r3, #10]
 800dcac:	89fb      	ldrh	r3, [r7, #14]
 800dcae:	1ad3      	subs	r3, r2, r3
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	891a      	ldrh	r2, [r3, #8]
 800dcba:	89fb      	ldrh	r3, [r7, #14]
 800dcbc:	1ad3      	subs	r3, r2, r3
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	0801a744 	.word	0x0801a744
 800dcd4:	0801a908 	.word	0x0801a908
 800dcd8:	0801a804 	.word	0x0801a804
 800dcdc:	0801a914 	.word	0x0801a914

0800dce0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	460b      	mov	r3, r1
 800dcea:	807b      	strh	r3, [r7, #2]
 800dcec:	4613      	mov	r3, r2
 800dcee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dcf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	da08      	bge.n	800dd0a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dcf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dcfc:	425b      	negs	r3, r3
 800dcfe:	4619      	mov	r1, r3
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f7ff ff9b 	bl	800dc3c <pbuf_remove_header>
 800dd06:	4603      	mov	r3, r0
 800dd08:	e007      	b.n	800dd1a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dd0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd0e:	787a      	ldrb	r2, [r7, #1]
 800dd10:	4619      	mov	r1, r3
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f7ff ff1a 	bl	800db4c <pbuf_add_header_impl>
 800dd18:	4603      	mov	r3, r0
  }
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3708      	adds	r7, #8
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b082      	sub	sp, #8
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dd2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd32:	2201      	movs	r2, #1
 800dd34:	4619      	mov	r1, r3
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f7ff ffd2 	bl	800dce0 <pbuf_header_impl>
 800dd3c:	4603      	mov	r3, r0
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3708      	adds	r7, #8
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
	...

0800dd48 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b088      	sub	sp, #32
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d10b      	bne.n	800dd6e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d106      	bne.n	800dd6a <pbuf_free+0x22>
 800dd5c:	4b3b      	ldr	r3, [pc, #236]	; (800de4c <pbuf_free+0x104>)
 800dd5e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800dd62:	493b      	ldr	r1, [pc, #236]	; (800de50 <pbuf_free+0x108>)
 800dd64:	483b      	ldr	r0, [pc, #236]	; (800de54 <pbuf_free+0x10c>)
 800dd66:	f007 fc63 	bl	8015630 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	e069      	b.n	800de42 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800dd72:	e062      	b.n	800de3a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800dd74:	f006 feae 	bl	8014ad4 <sys_arch_protect>
 800dd78:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	7b9b      	ldrb	r3, [r3, #14]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d106      	bne.n	800dd90 <pbuf_free+0x48>
 800dd82:	4b32      	ldr	r3, [pc, #200]	; (800de4c <pbuf_free+0x104>)
 800dd84:	f240 22f1 	movw	r2, #753	; 0x2f1
 800dd88:	4933      	ldr	r1, [pc, #204]	; (800de58 <pbuf_free+0x110>)
 800dd8a:	4832      	ldr	r0, [pc, #200]	; (800de54 <pbuf_free+0x10c>)
 800dd8c:	f007 fc50 	bl	8015630 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	7b9b      	ldrb	r3, [r3, #14]
 800dd94:	3b01      	subs	r3, #1
 800dd96:	b2da      	uxtb	r2, r3
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	739a      	strb	r2, [r3, #14]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	7b9b      	ldrb	r3, [r3, #14]
 800dda0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800dda2:	69b8      	ldr	r0, [r7, #24]
 800dda4:	f006 fea4 	bl	8014af0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800dda8:	7dfb      	ldrb	r3, [r7, #23]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d143      	bne.n	800de36 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	7b1b      	ldrb	r3, [r3, #12]
 800ddb8:	f003 030f 	and.w	r3, r3, #15
 800ddbc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	7b5b      	ldrb	r3, [r3, #13]
 800ddc2:	f003 0302 	and.w	r3, r3, #2
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d011      	beq.n	800ddee <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d106      	bne.n	800dde4 <pbuf_free+0x9c>
 800ddd6:	4b1d      	ldr	r3, [pc, #116]	; (800de4c <pbuf_free+0x104>)
 800ddd8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800dddc:	491f      	ldr	r1, [pc, #124]	; (800de5c <pbuf_free+0x114>)
 800ddde:	481d      	ldr	r0, [pc, #116]	; (800de54 <pbuf_free+0x10c>)
 800dde0:	f007 fc26 	bl	8015630 <iprintf>
        pc->custom_free_function(p);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	691b      	ldr	r3, [r3, #16]
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	4798      	blx	r3
 800ddec:	e01d      	b.n	800de2a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ddee:	7bfb      	ldrb	r3, [r7, #15]
 800ddf0:	2b02      	cmp	r3, #2
 800ddf2:	d104      	bne.n	800ddfe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ddf4:	6879      	ldr	r1, [r7, #4]
 800ddf6:	200c      	movs	r0, #12
 800ddf8:	f7ff f9ca 	bl	800d190 <memp_free>
 800ddfc:	e015      	b.n	800de2a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ddfe:	7bfb      	ldrb	r3, [r7, #15]
 800de00:	2b01      	cmp	r3, #1
 800de02:	d104      	bne.n	800de0e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800de04:	6879      	ldr	r1, [r7, #4]
 800de06:	200b      	movs	r0, #11
 800de08:	f7ff f9c2 	bl	800d190 <memp_free>
 800de0c:	e00d      	b.n	800de2a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800de0e:	7bfb      	ldrb	r3, [r7, #15]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d103      	bne.n	800de1c <pbuf_free+0xd4>
          mem_free(p);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f7fe fe4d 	bl	800cab4 <mem_free>
 800de1a:	e006      	b.n	800de2a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800de1c:	4b0b      	ldr	r3, [pc, #44]	; (800de4c <pbuf_free+0x104>)
 800de1e:	f240 320f 	movw	r2, #783	; 0x30f
 800de22:	490f      	ldr	r1, [pc, #60]	; (800de60 <pbuf_free+0x118>)
 800de24:	480b      	ldr	r0, [pc, #44]	; (800de54 <pbuf_free+0x10c>)
 800de26:	f007 fc03 	bl	8015630 <iprintf>
        }
      }
      count++;
 800de2a:	7ffb      	ldrb	r3, [r7, #31]
 800de2c:	3301      	adds	r3, #1
 800de2e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	607b      	str	r3, [r7, #4]
 800de34:	e001      	b.n	800de3a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800de36:	2300      	movs	r3, #0
 800de38:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d199      	bne.n	800dd74 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800de40:	7ffb      	ldrb	r3, [r7, #31]
}
 800de42:	4618      	mov	r0, r3
 800de44:	3720      	adds	r7, #32
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	0801a744 	.word	0x0801a744
 800de50:	0801a908 	.word	0x0801a908
 800de54:	0801a804 	.word	0x0801a804
 800de58:	0801a934 	.word	0x0801a934
 800de5c:	0801a94c 	.word	0x0801a94c
 800de60:	0801a970 	.word	0x0801a970

0800de64 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800de6c:	2300      	movs	r3, #0
 800de6e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800de70:	e005      	b.n	800de7e <pbuf_clen+0x1a>
    ++len;
 800de72:	89fb      	ldrh	r3, [r7, #14]
 800de74:	3301      	adds	r3, #1
 800de76:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d1f6      	bne.n	800de72 <pbuf_clen+0xe>
  }
  return len;
 800de84:	89fb      	ldrh	r3, [r7, #14]
}
 800de86:	4618      	mov	r0, r3
 800de88:	3714      	adds	r7, #20
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr
	...

0800de94 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d016      	beq.n	800ded0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800dea2:	f006 fe17 	bl	8014ad4 <sys_arch_protect>
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	7b9b      	ldrb	r3, [r3, #14]
 800deac:	3301      	adds	r3, #1
 800deae:	b2da      	uxtb	r2, r3
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	739a      	strb	r2, [r3, #14]
 800deb4:	68f8      	ldr	r0, [r7, #12]
 800deb6:	f006 fe1b 	bl	8014af0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	7b9b      	ldrb	r3, [r3, #14]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <pbuf_ref+0x3c>
 800dec2:	4b05      	ldr	r3, [pc, #20]	; (800ded8 <pbuf_ref+0x44>)
 800dec4:	f240 3242 	movw	r2, #834	; 0x342
 800dec8:	4904      	ldr	r1, [pc, #16]	; (800dedc <pbuf_ref+0x48>)
 800deca:	4805      	ldr	r0, [pc, #20]	; (800dee0 <pbuf_ref+0x4c>)
 800decc:	f007 fbb0 	bl	8015630 <iprintf>
  }
}
 800ded0:	bf00      	nop
 800ded2:	3710      	adds	r7, #16
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	0801a744 	.word	0x0801a744
 800dedc:	0801a984 	.word	0x0801a984
 800dee0:	0801a804 	.word	0x0801a804

0800dee4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d002      	beq.n	800defa <pbuf_cat+0x16>
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d107      	bne.n	800df0a <pbuf_cat+0x26>
 800defa:	4b20      	ldr	r3, [pc, #128]	; (800df7c <pbuf_cat+0x98>)
 800defc:	f240 3259 	movw	r2, #857	; 0x359
 800df00:	491f      	ldr	r1, [pc, #124]	; (800df80 <pbuf_cat+0x9c>)
 800df02:	4820      	ldr	r0, [pc, #128]	; (800df84 <pbuf_cat+0xa0>)
 800df04:	f007 fb94 	bl	8015630 <iprintf>
 800df08:	e034      	b.n	800df74 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	60fb      	str	r3, [r7, #12]
 800df0e:	e00a      	b.n	800df26 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	891a      	ldrh	r2, [r3, #8]
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	891b      	ldrh	r3, [r3, #8]
 800df18:	4413      	add	r3, r2
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	60fb      	str	r3, [r7, #12]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d1f0      	bne.n	800df10 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	891a      	ldrh	r2, [r3, #8]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	895b      	ldrh	r3, [r3, #10]
 800df36:	429a      	cmp	r2, r3
 800df38:	d006      	beq.n	800df48 <pbuf_cat+0x64>
 800df3a:	4b10      	ldr	r3, [pc, #64]	; (800df7c <pbuf_cat+0x98>)
 800df3c:	f240 3262 	movw	r2, #866	; 0x362
 800df40:	4911      	ldr	r1, [pc, #68]	; (800df88 <pbuf_cat+0xa4>)
 800df42:	4810      	ldr	r0, [pc, #64]	; (800df84 <pbuf_cat+0xa0>)
 800df44:	f007 fb74 	bl	8015630 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d006      	beq.n	800df5e <pbuf_cat+0x7a>
 800df50:	4b0a      	ldr	r3, [pc, #40]	; (800df7c <pbuf_cat+0x98>)
 800df52:	f240 3263 	movw	r2, #867	; 0x363
 800df56:	490d      	ldr	r1, [pc, #52]	; (800df8c <pbuf_cat+0xa8>)
 800df58:	480a      	ldr	r0, [pc, #40]	; (800df84 <pbuf_cat+0xa0>)
 800df5a:	f007 fb69 	bl	8015630 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	891a      	ldrh	r2, [r3, #8]
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	891b      	ldrh	r3, [r3, #8]
 800df66:	4413      	add	r3, r2
 800df68:	b29a      	uxth	r2, r3
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	683a      	ldr	r2, [r7, #0]
 800df72:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	0801a744 	.word	0x0801a744
 800df80:	0801a998 	.word	0x0801a998
 800df84:	0801a804 	.word	0x0801a804
 800df88:	0801a9d0 	.word	0x0801a9d0
 800df8c:	0801aa00 	.word	0x0801aa00

0800df90 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800df9a:	6839      	ldr	r1, [r7, #0]
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7ff ffa1 	bl	800dee4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800dfa2:	6838      	ldr	r0, [r7, #0]
 800dfa4:	f7ff ff76 	bl	800de94 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800dfa8:	bf00      	nop
 800dfaa:	3708      	adds	r7, #8
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b086      	sub	sp, #24
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	617b      	str	r3, [r7, #20]
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d008      	beq.n	800dfda <pbuf_copy+0x2a>
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d005      	beq.n	800dfda <pbuf_copy+0x2a>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	891a      	ldrh	r2, [r3, #8]
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	891b      	ldrh	r3, [r3, #8]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d209      	bcs.n	800dfee <pbuf_copy+0x3e>
 800dfda:	4b57      	ldr	r3, [pc, #348]	; (800e138 <pbuf_copy+0x188>)
 800dfdc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800dfe0:	4956      	ldr	r1, [pc, #344]	; (800e13c <pbuf_copy+0x18c>)
 800dfe2:	4857      	ldr	r0, [pc, #348]	; (800e140 <pbuf_copy+0x190>)
 800dfe4:	f007 fb24 	bl	8015630 <iprintf>
 800dfe8:	f06f 030f 	mvn.w	r3, #15
 800dfec:	e09f      	b.n	800e12e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	895b      	ldrh	r3, [r3, #10]
 800dff2:	461a      	mov	r2, r3
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	1ad2      	subs	r2, r2, r3
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	895b      	ldrh	r3, [r3, #10]
 800dffc:	4619      	mov	r1, r3
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	1acb      	subs	r3, r1, r3
 800e002:	429a      	cmp	r2, r3
 800e004:	d306      	bcc.n	800e014 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	895b      	ldrh	r3, [r3, #10]
 800e00a:	461a      	mov	r2, r3
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	1ad3      	subs	r3, r2, r3
 800e010:	60fb      	str	r3, [r7, #12]
 800e012:	e005      	b.n	800e020 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	895b      	ldrh	r3, [r3, #10]
 800e018:	461a      	mov	r2, r3
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	1ad3      	subs	r3, r2, r3
 800e01e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	685a      	ldr	r2, [r3, #4]
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	18d0      	adds	r0, r2, r3
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	685a      	ldr	r2, [r3, #4]
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	4413      	add	r3, r2
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	4619      	mov	r1, r3
 800e034:	f006 fdb8 	bl	8014ba8 <memcpy>
    offset_to += len;
 800e038:	697a      	ldr	r2, [r7, #20]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	4413      	add	r3, r2
 800e03e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e040:	693a      	ldr	r2, [r7, #16]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	4413      	add	r3, r2
 800e046:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	895b      	ldrh	r3, [r3, #10]
 800e04c:	461a      	mov	r2, r3
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	4293      	cmp	r3, r2
 800e052:	d906      	bls.n	800e062 <pbuf_copy+0xb2>
 800e054:	4b38      	ldr	r3, [pc, #224]	; (800e138 <pbuf_copy+0x188>)
 800e056:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e05a:	493a      	ldr	r1, [pc, #232]	; (800e144 <pbuf_copy+0x194>)
 800e05c:	4838      	ldr	r0, [pc, #224]	; (800e140 <pbuf_copy+0x190>)
 800e05e:	f007 fae7 	bl	8015630 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	895b      	ldrh	r3, [r3, #10]
 800e066:	461a      	mov	r2, r3
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d906      	bls.n	800e07c <pbuf_copy+0xcc>
 800e06e:	4b32      	ldr	r3, [pc, #200]	; (800e138 <pbuf_copy+0x188>)
 800e070:	f240 32da 	movw	r2, #986	; 0x3da
 800e074:	4934      	ldr	r1, [pc, #208]	; (800e148 <pbuf_copy+0x198>)
 800e076:	4832      	ldr	r0, [pc, #200]	; (800e140 <pbuf_copy+0x190>)
 800e078:	f007 fada 	bl	8015630 <iprintf>
    if (offset_from >= p_from->len) {
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	895b      	ldrh	r3, [r3, #10]
 800e080:	461a      	mov	r2, r3
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	4293      	cmp	r3, r2
 800e086:	d304      	bcc.n	800e092 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e088:	2300      	movs	r3, #0
 800e08a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	895b      	ldrh	r3, [r3, #10]
 800e096:	461a      	mov	r2, r3
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d114      	bne.n	800e0c8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d10c      	bne.n	800e0c8 <pbuf_copy+0x118>
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d009      	beq.n	800e0c8 <pbuf_copy+0x118>
 800e0b4:	4b20      	ldr	r3, [pc, #128]	; (800e138 <pbuf_copy+0x188>)
 800e0b6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e0ba:	4924      	ldr	r1, [pc, #144]	; (800e14c <pbuf_copy+0x19c>)
 800e0bc:	4820      	ldr	r0, [pc, #128]	; (800e140 <pbuf_copy+0x190>)
 800e0be:	f007 fab7 	bl	8015630 <iprintf>
 800e0c2:	f06f 030f 	mvn.w	r3, #15
 800e0c6:	e032      	b.n	800e12e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d013      	beq.n	800e0f6 <pbuf_copy+0x146>
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	895a      	ldrh	r2, [r3, #10]
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	891b      	ldrh	r3, [r3, #8]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d10d      	bne.n	800e0f6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d009      	beq.n	800e0f6 <pbuf_copy+0x146>
 800e0e2:	4b15      	ldr	r3, [pc, #84]	; (800e138 <pbuf_copy+0x188>)
 800e0e4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e0e8:	4919      	ldr	r1, [pc, #100]	; (800e150 <pbuf_copy+0x1a0>)
 800e0ea:	4815      	ldr	r0, [pc, #84]	; (800e140 <pbuf_copy+0x190>)
 800e0ec:	f007 faa0 	bl	8015630 <iprintf>
 800e0f0:	f06f 0305 	mvn.w	r3, #5
 800e0f4:	e01b      	b.n	800e12e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d013      	beq.n	800e124 <pbuf_copy+0x174>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	895a      	ldrh	r2, [r3, #10]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	891b      	ldrh	r3, [r3, #8]
 800e104:	429a      	cmp	r2, r3
 800e106:	d10d      	bne.n	800e124 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d009      	beq.n	800e124 <pbuf_copy+0x174>
 800e110:	4b09      	ldr	r3, [pc, #36]	; (800e138 <pbuf_copy+0x188>)
 800e112:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e116:	490e      	ldr	r1, [pc, #56]	; (800e150 <pbuf_copy+0x1a0>)
 800e118:	4809      	ldr	r0, [pc, #36]	; (800e140 <pbuf_copy+0x190>)
 800e11a:	f007 fa89 	bl	8015630 <iprintf>
 800e11e:	f06f 0305 	mvn.w	r3, #5
 800e122:	e004      	b.n	800e12e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	2b00      	cmp	r3, #0
 800e128:	f47f af61 	bne.w	800dfee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e12c:	2300      	movs	r3, #0
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3718      	adds	r7, #24
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	0801a744 	.word	0x0801a744
 800e13c:	0801aa4c 	.word	0x0801aa4c
 800e140:	0801a804 	.word	0x0801a804
 800e144:	0801aa7c 	.word	0x0801aa7c
 800e148:	0801aa94 	.word	0x0801aa94
 800e14c:	0801aab0 	.word	0x0801aab0
 800e150:	0801aac0 	.word	0x0801aac0

0800e154 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b088      	sub	sp, #32
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	4611      	mov	r1, r2
 800e160:	461a      	mov	r2, r3
 800e162:	460b      	mov	r3, r1
 800e164:	80fb      	strh	r3, [r7, #6]
 800e166:	4613      	mov	r3, r2
 800e168:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e16a:	2300      	movs	r3, #0
 800e16c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e16e:	2300      	movs	r3, #0
 800e170:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d108      	bne.n	800e18a <pbuf_copy_partial+0x36>
 800e178:	4b2b      	ldr	r3, [pc, #172]	; (800e228 <pbuf_copy_partial+0xd4>)
 800e17a:	f240 420a 	movw	r2, #1034	; 0x40a
 800e17e:	492b      	ldr	r1, [pc, #172]	; (800e22c <pbuf_copy_partial+0xd8>)
 800e180:	482b      	ldr	r0, [pc, #172]	; (800e230 <pbuf_copy_partial+0xdc>)
 800e182:	f007 fa55 	bl	8015630 <iprintf>
 800e186:	2300      	movs	r3, #0
 800e188:	e04a      	b.n	800e220 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d108      	bne.n	800e1a2 <pbuf_copy_partial+0x4e>
 800e190:	4b25      	ldr	r3, [pc, #148]	; (800e228 <pbuf_copy_partial+0xd4>)
 800e192:	f240 420b 	movw	r2, #1035	; 0x40b
 800e196:	4927      	ldr	r1, [pc, #156]	; (800e234 <pbuf_copy_partial+0xe0>)
 800e198:	4825      	ldr	r0, [pc, #148]	; (800e230 <pbuf_copy_partial+0xdc>)
 800e19a:	f007 fa49 	bl	8015630 <iprintf>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	e03e      	b.n	800e220 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	61fb      	str	r3, [r7, #28]
 800e1a6:	e034      	b.n	800e212 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e1a8:	88bb      	ldrh	r3, [r7, #4]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d00a      	beq.n	800e1c4 <pbuf_copy_partial+0x70>
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	895b      	ldrh	r3, [r3, #10]
 800e1b2:	88ba      	ldrh	r2, [r7, #4]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d305      	bcc.n	800e1c4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	895b      	ldrh	r3, [r3, #10]
 800e1bc:	88ba      	ldrh	r2, [r7, #4]
 800e1be:	1ad3      	subs	r3, r2, r3
 800e1c0:	80bb      	strh	r3, [r7, #4]
 800e1c2:	e023      	b.n	800e20c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	895a      	ldrh	r2, [r3, #10]
 800e1c8:	88bb      	ldrh	r3, [r7, #4]
 800e1ca:	1ad3      	subs	r3, r2, r3
 800e1cc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e1ce:	8b3a      	ldrh	r2, [r7, #24]
 800e1d0:	88fb      	ldrh	r3, [r7, #6]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d901      	bls.n	800e1da <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e1d6:	88fb      	ldrh	r3, [r7, #6]
 800e1d8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e1da:	8b7b      	ldrh	r3, [r7, #26]
 800e1dc:	68ba      	ldr	r2, [r7, #8]
 800e1de:	18d0      	adds	r0, r2, r3
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	685a      	ldr	r2, [r3, #4]
 800e1e4:	88bb      	ldrh	r3, [r7, #4]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	8b3a      	ldrh	r2, [r7, #24]
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	f006 fcdc 	bl	8014ba8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e1f0:	8afa      	ldrh	r2, [r7, #22]
 800e1f2:	8b3b      	ldrh	r3, [r7, #24]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e1f8:	8b7a      	ldrh	r2, [r7, #26]
 800e1fa:	8b3b      	ldrh	r3, [r7, #24]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e200:	88fa      	ldrh	r2, [r7, #6]
 800e202:	8b3b      	ldrh	r3, [r7, #24]
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e208:	2300      	movs	r3, #0
 800e20a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	61fb      	str	r3, [r7, #28]
 800e212:	88fb      	ldrh	r3, [r7, #6]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d002      	beq.n	800e21e <pbuf_copy_partial+0xca>
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d1c4      	bne.n	800e1a8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e21e:	8afb      	ldrh	r3, [r7, #22]
}
 800e220:	4618      	mov	r0, r3
 800e222:	3720      	adds	r7, #32
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	0801a744 	.word	0x0801a744
 800e22c:	0801aaec 	.word	0x0801aaec
 800e230:	0801a804 	.word	0x0801a804
 800e234:	0801ab0c 	.word	0x0801ab0c

0800e238 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	4603      	mov	r3, r0
 800e240:	603a      	str	r2, [r7, #0]
 800e242:	71fb      	strb	r3, [r7, #7]
 800e244:	460b      	mov	r3, r1
 800e246:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	8919      	ldrh	r1, [r3, #8]
 800e24c:	88ba      	ldrh	r2, [r7, #4]
 800e24e:	79fb      	ldrb	r3, [r7, #7]
 800e250:	4618      	mov	r0, r3
 800e252:	f7ff fa95 	bl	800d780 <pbuf_alloc>
 800e256:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <pbuf_clone+0x2a>
    return NULL;
 800e25e:	2300      	movs	r3, #0
 800e260:	e011      	b.n	800e286 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e262:	6839      	ldr	r1, [r7, #0]
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f7ff fea3 	bl	800dfb0 <pbuf_copy>
 800e26a:	4603      	mov	r3, r0
 800e26c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e26e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d006      	beq.n	800e284 <pbuf_clone+0x4c>
 800e276:	4b06      	ldr	r3, [pc, #24]	; (800e290 <pbuf_clone+0x58>)
 800e278:	f240 5224 	movw	r2, #1316	; 0x524
 800e27c:	4905      	ldr	r1, [pc, #20]	; (800e294 <pbuf_clone+0x5c>)
 800e27e:	4806      	ldr	r0, [pc, #24]	; (800e298 <pbuf_clone+0x60>)
 800e280:	f007 f9d6 	bl	8015630 <iprintf>
  return q;
 800e284:	68fb      	ldr	r3, [r7, #12]
}
 800e286:	4618      	mov	r0, r3
 800e288:	3710      	adds	r7, #16
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	0801a744 	.word	0x0801a744
 800e294:	0801ac18 	.word	0x0801ac18
 800e298:	0801a804 	.word	0x0801a804

0800e29c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e2a0:	f007 f9de 	bl	8015660 <rand>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e2b2:	b29a      	uxth	r2, r3
 800e2b4:	4b01      	ldr	r3, [pc, #4]	; (800e2bc <tcp_init+0x20>)
 800e2b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e2b8:	bf00      	nop
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	20000030 	.word	0x20000030

0800e2c0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	7d1b      	ldrb	r3, [r3, #20]
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d105      	bne.n	800e2dc <tcp_free+0x1c>
 800e2d0:	4b06      	ldr	r3, [pc, #24]	; (800e2ec <tcp_free+0x2c>)
 800e2d2:	22d4      	movs	r2, #212	; 0xd4
 800e2d4:	4906      	ldr	r1, [pc, #24]	; (800e2f0 <tcp_free+0x30>)
 800e2d6:	4807      	ldr	r0, [pc, #28]	; (800e2f4 <tcp_free+0x34>)
 800e2d8:	f007 f9aa 	bl	8015630 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e2dc:	6879      	ldr	r1, [r7, #4]
 800e2de:	2001      	movs	r0, #1
 800e2e0:	f7fe ff56 	bl	800d190 <memp_free>
}
 800e2e4:	bf00      	nop
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	0801acf8 	.word	0x0801acf8
 800e2f0:	0801ad84 	.word	0x0801ad84
 800e2f4:	0801ad98 	.word	0x0801ad98

0800e2f8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	7d1b      	ldrb	r3, [r3, #20]
 800e304:	2b01      	cmp	r3, #1
 800e306:	d105      	bne.n	800e314 <tcp_free_listen+0x1c>
 800e308:	4b06      	ldr	r3, [pc, #24]	; (800e324 <tcp_free_listen+0x2c>)
 800e30a:	22df      	movs	r2, #223	; 0xdf
 800e30c:	4906      	ldr	r1, [pc, #24]	; (800e328 <tcp_free_listen+0x30>)
 800e30e:	4807      	ldr	r0, [pc, #28]	; (800e32c <tcp_free_listen+0x34>)
 800e310:	f007 f98e 	bl	8015630 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e314:	6879      	ldr	r1, [r7, #4]
 800e316:	2002      	movs	r0, #2
 800e318:	f7fe ff3a 	bl	800d190 <memp_free>
}
 800e31c:	bf00      	nop
 800e31e:	3708      	adds	r7, #8
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	0801acf8 	.word	0x0801acf8
 800e328:	0801adc0 	.word	0x0801adc0
 800e32c:	0801ad98 	.word	0x0801ad98

0800e330 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e334:	f001 f83e 	bl	800f3b4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e338:	4b07      	ldr	r3, [pc, #28]	; (800e358 <tcp_tmr+0x28>)
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	3301      	adds	r3, #1
 800e33e:	b2da      	uxtb	r2, r3
 800e340:	4b05      	ldr	r3, [pc, #20]	; (800e358 <tcp_tmr+0x28>)
 800e342:	701a      	strb	r2, [r3, #0]
 800e344:	4b04      	ldr	r3, [pc, #16]	; (800e358 <tcp_tmr+0x28>)
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	f003 0301 	and.w	r3, r3, #1
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d001      	beq.n	800e354 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e350:	f000 fd06 	bl	800ed60 <tcp_slowtmr>
  }
}
 800e354:	bf00      	nop
 800e356:	bd80      	pop	{r7, pc}
 800e358:	200068cd 	.word	0x200068cd

0800e35c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d105      	bne.n	800e378 <tcp_remove_listener+0x1c>
 800e36c:	4b0d      	ldr	r3, [pc, #52]	; (800e3a4 <tcp_remove_listener+0x48>)
 800e36e:	22ff      	movs	r2, #255	; 0xff
 800e370:	490d      	ldr	r1, [pc, #52]	; (800e3a8 <tcp_remove_listener+0x4c>)
 800e372:	480e      	ldr	r0, [pc, #56]	; (800e3ac <tcp_remove_listener+0x50>)
 800e374:	f007 f95c 	bl	8015630 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	60fb      	str	r3, [r7, #12]
 800e37c:	e00a      	b.n	800e394 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e382:	683a      	ldr	r2, [r7, #0]
 800e384:	429a      	cmp	r2, r3
 800e386:	d102      	bne.n	800e38e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2200      	movs	r2, #0
 800e38c:	679a      	str	r2, [r3, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	60fb      	str	r3, [r7, #12]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d1f1      	bne.n	800e37e <tcp_remove_listener+0x22>
    }
  }
}
 800e39a:	bf00      	nop
 800e39c:	bf00      	nop
 800e39e:	3710      	adds	r7, #16
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	0801acf8 	.word	0x0801acf8
 800e3a8:	0801addc 	.word	0x0801addc
 800e3ac:	0801ad98 	.word	0x0801ad98

0800e3b0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d106      	bne.n	800e3cc <tcp_listen_closed+0x1c>
 800e3be:	4b14      	ldr	r3, [pc, #80]	; (800e410 <tcp_listen_closed+0x60>)
 800e3c0:	f240 1211 	movw	r2, #273	; 0x111
 800e3c4:	4913      	ldr	r1, [pc, #76]	; (800e414 <tcp_listen_closed+0x64>)
 800e3c6:	4814      	ldr	r0, [pc, #80]	; (800e418 <tcp_listen_closed+0x68>)
 800e3c8:	f007 f932 	bl	8015630 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	7d1b      	ldrb	r3, [r3, #20]
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d006      	beq.n	800e3e2 <tcp_listen_closed+0x32>
 800e3d4:	4b0e      	ldr	r3, [pc, #56]	; (800e410 <tcp_listen_closed+0x60>)
 800e3d6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e3da:	4910      	ldr	r1, [pc, #64]	; (800e41c <tcp_listen_closed+0x6c>)
 800e3dc:	480e      	ldr	r0, [pc, #56]	; (800e418 <tcp_listen_closed+0x68>)
 800e3de:	f007 f927 	bl	8015630 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	60fb      	str	r3, [r7, #12]
 800e3e6:	e00b      	b.n	800e400 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e3e8:	4a0d      	ldr	r2, [pc, #52]	; (800e420 <tcp_listen_closed+0x70>)
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	6879      	ldr	r1, [r7, #4]
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7ff ffb1 	bl	800e35c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	60fb      	str	r3, [r7, #12]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2b03      	cmp	r3, #3
 800e404:	d9f0      	bls.n	800e3e8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e406:	bf00      	nop
 800e408:	bf00      	nop
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	0801acf8 	.word	0x0801acf8
 800e414:	0801ae04 	.word	0x0801ae04
 800e418:	0801ad98 	.word	0x0801ad98
 800e41c:	0801ae10 	.word	0x0801ae10
 800e420:	0801ace8 	.word	0x0801ace8

0800e424 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e424:	b5b0      	push	{r4, r5, r7, lr}
 800e426:	b088      	sub	sp, #32
 800e428:	af04      	add	r7, sp, #16
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	460b      	mov	r3, r1
 800e42e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d106      	bne.n	800e444 <tcp_close_shutdown+0x20>
 800e436:	4b63      	ldr	r3, [pc, #396]	; (800e5c4 <tcp_close_shutdown+0x1a0>)
 800e438:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e43c:	4962      	ldr	r1, [pc, #392]	; (800e5c8 <tcp_close_shutdown+0x1a4>)
 800e43e:	4863      	ldr	r0, [pc, #396]	; (800e5cc <tcp_close_shutdown+0x1a8>)
 800e440:	f007 f8f6 	bl	8015630 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e444:	78fb      	ldrb	r3, [r7, #3]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d067      	beq.n	800e51a <tcp_close_shutdown+0xf6>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	7d1b      	ldrb	r3, [r3, #20]
 800e44e:	2b04      	cmp	r3, #4
 800e450:	d003      	beq.n	800e45a <tcp_close_shutdown+0x36>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	7d1b      	ldrb	r3, [r3, #20]
 800e456:	2b07      	cmp	r3, #7
 800e458:	d15f      	bne.n	800e51a <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d105      	bne.n	800e46e <tcp_close_shutdown+0x4a>
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e466:	f640 3268 	movw	r2, #2920	; 0xb68
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d055      	beq.n	800e51a <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	8b5b      	ldrh	r3, [r3, #26]
 800e472:	f003 0310 	and.w	r3, r3, #16
 800e476:	2b00      	cmp	r3, #0
 800e478:	d106      	bne.n	800e488 <tcp_close_shutdown+0x64>
 800e47a:	4b52      	ldr	r3, [pc, #328]	; (800e5c4 <tcp_close_shutdown+0x1a0>)
 800e47c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e480:	4953      	ldr	r1, [pc, #332]	; (800e5d0 <tcp_close_shutdown+0x1ac>)
 800e482:	4852      	ldr	r0, [pc, #328]	; (800e5cc <tcp_close_shutdown+0x1a8>)
 800e484:	f007 f8d4 	bl	8015630 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e490:	687d      	ldr	r5, [r7, #4]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	3304      	adds	r3, #4
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	8ad2      	ldrh	r2, [r2, #22]
 800e49a:	6879      	ldr	r1, [r7, #4]
 800e49c:	8b09      	ldrh	r1, [r1, #24]
 800e49e:	9102      	str	r1, [sp, #8]
 800e4a0:	9201      	str	r2, [sp, #4]
 800e4a2:	9300      	str	r3, [sp, #0]
 800e4a4:	462b      	mov	r3, r5
 800e4a6:	4622      	mov	r2, r4
 800e4a8:	4601      	mov	r1, r0
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f005 f95a 	bl	8013764 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f001 fb1b 	bl	800faec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e4b6:	4b47      	ldr	r3, [pc, #284]	; (800e5d4 <tcp_close_shutdown+0x1b0>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	687a      	ldr	r2, [r7, #4]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d105      	bne.n	800e4cc <tcp_close_shutdown+0xa8>
 800e4c0:	4b44      	ldr	r3, [pc, #272]	; (800e5d4 <tcp_close_shutdown+0x1b0>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	68db      	ldr	r3, [r3, #12]
 800e4c6:	4a43      	ldr	r2, [pc, #268]	; (800e5d4 <tcp_close_shutdown+0x1b0>)
 800e4c8:	6013      	str	r3, [r2, #0]
 800e4ca:	e013      	b.n	800e4f4 <tcp_close_shutdown+0xd0>
 800e4cc:	4b41      	ldr	r3, [pc, #260]	; (800e5d4 <tcp_close_shutdown+0x1b0>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	60fb      	str	r3, [r7, #12]
 800e4d2:	e00c      	b.n	800e4ee <tcp_close_shutdown+0xca>
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	68db      	ldr	r3, [r3, #12]
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d104      	bne.n	800e4e8 <tcp_close_shutdown+0xc4>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	68da      	ldr	r2, [r3, #12]
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	60da      	str	r2, [r3, #12]
 800e4e6:	e005      	b.n	800e4f4 <tcp_close_shutdown+0xd0>
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	68db      	ldr	r3, [r3, #12]
 800e4ec:	60fb      	str	r3, [r7, #12]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d1ef      	bne.n	800e4d4 <tcp_close_shutdown+0xb0>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	60da      	str	r2, [r3, #12]
 800e4fa:	4b37      	ldr	r3, [pc, #220]	; (800e5d8 <tcp_close_shutdown+0x1b4>)
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e500:	4b36      	ldr	r3, [pc, #216]	; (800e5dc <tcp_close_shutdown+0x1b8>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	429a      	cmp	r2, r3
 800e508:	d102      	bne.n	800e510 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e50a:	f003 fbcf 	bl	8011cac <tcp_trigger_input_pcb_close>
 800e50e:	e002      	b.n	800e516 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f7ff fed5 	bl	800e2c0 <tcp_free>
      }
      return ERR_OK;
 800e516:	2300      	movs	r3, #0
 800e518:	e050      	b.n	800e5bc <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	7d1b      	ldrb	r3, [r3, #20]
 800e51e:	2b02      	cmp	r3, #2
 800e520:	d03b      	beq.n	800e59a <tcp_close_shutdown+0x176>
 800e522:	2b02      	cmp	r3, #2
 800e524:	dc44      	bgt.n	800e5b0 <tcp_close_shutdown+0x18c>
 800e526:	2b00      	cmp	r3, #0
 800e528:	d002      	beq.n	800e530 <tcp_close_shutdown+0x10c>
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d02a      	beq.n	800e584 <tcp_close_shutdown+0x160>
 800e52e:	e03f      	b.n	800e5b0 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	8adb      	ldrh	r3, [r3, #22]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d021      	beq.n	800e57c <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e538:	4b29      	ldr	r3, [pc, #164]	; (800e5e0 <tcp_close_shutdown+0x1bc>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d105      	bne.n	800e54e <tcp_close_shutdown+0x12a>
 800e542:	4b27      	ldr	r3, [pc, #156]	; (800e5e0 <tcp_close_shutdown+0x1bc>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	4a25      	ldr	r2, [pc, #148]	; (800e5e0 <tcp_close_shutdown+0x1bc>)
 800e54a:	6013      	str	r3, [r2, #0]
 800e54c:	e013      	b.n	800e576 <tcp_close_shutdown+0x152>
 800e54e:	4b24      	ldr	r3, [pc, #144]	; (800e5e0 <tcp_close_shutdown+0x1bc>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	60bb      	str	r3, [r7, #8]
 800e554:	e00c      	b.n	800e570 <tcp_close_shutdown+0x14c>
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	687a      	ldr	r2, [r7, #4]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d104      	bne.n	800e56a <tcp_close_shutdown+0x146>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	68da      	ldr	r2, [r3, #12]
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	60da      	str	r2, [r3, #12]
 800e568:	e005      	b.n	800e576 <tcp_close_shutdown+0x152>
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	68db      	ldr	r3, [r3, #12]
 800e56e:	60bb      	str	r3, [r7, #8]
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d1ef      	bne.n	800e556 <tcp_close_shutdown+0x132>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f7ff fe9f 	bl	800e2c0 <tcp_free>
      break;
 800e582:	e01a      	b.n	800e5ba <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f7ff ff13 	bl	800e3b0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e58a:	6879      	ldr	r1, [r7, #4]
 800e58c:	4815      	ldr	r0, [pc, #84]	; (800e5e4 <tcp_close_shutdown+0x1c0>)
 800e58e:	f001 faf7 	bl	800fb80 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f7ff feb0 	bl	800e2f8 <tcp_free_listen>
      break;
 800e598:	e00f      	b.n	800e5ba <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e59a:	6879      	ldr	r1, [r7, #4]
 800e59c:	480d      	ldr	r0, [pc, #52]	; (800e5d4 <tcp_close_shutdown+0x1b0>)
 800e59e:	f001 faef 	bl	800fb80 <tcp_pcb_remove>
 800e5a2:	4b0d      	ldr	r3, [pc, #52]	; (800e5d8 <tcp_close_shutdown+0x1b4>)
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f7ff fe89 	bl	800e2c0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e5ae:	e004      	b.n	800e5ba <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f000 f819 	bl	800e5e8 <tcp_close_shutdown_fin>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	e000      	b.n	800e5bc <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800e5ba:	2300      	movs	r3, #0
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bdb0      	pop	{r4, r5, r7, pc}
 800e5c4:	0801acf8 	.word	0x0801acf8
 800e5c8:	0801ae28 	.word	0x0801ae28
 800e5cc:	0801ad98 	.word	0x0801ad98
 800e5d0:	0801ae48 	.word	0x0801ae48
 800e5d4:	2000cfc8 	.word	0x2000cfc8
 800e5d8:	2000cfc4 	.word	0x2000cfc4
 800e5dc:	2000cfdc 	.word	0x2000cfdc
 800e5e0:	2000cfd4 	.word	0x2000cfd4
 800e5e4:	2000cfd0 	.word	0x2000cfd0

0800e5e8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d106      	bne.n	800e604 <tcp_close_shutdown_fin+0x1c>
 800e5f6:	4b2e      	ldr	r3, [pc, #184]	; (800e6b0 <tcp_close_shutdown_fin+0xc8>)
 800e5f8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e5fc:	492d      	ldr	r1, [pc, #180]	; (800e6b4 <tcp_close_shutdown_fin+0xcc>)
 800e5fe:	482e      	ldr	r0, [pc, #184]	; (800e6b8 <tcp_close_shutdown_fin+0xd0>)
 800e600:	f007 f816 	bl	8015630 <iprintf>

  switch (pcb->state) {
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	7d1b      	ldrb	r3, [r3, #20]
 800e608:	2b07      	cmp	r3, #7
 800e60a:	d020      	beq.n	800e64e <tcp_close_shutdown_fin+0x66>
 800e60c:	2b07      	cmp	r3, #7
 800e60e:	dc2b      	bgt.n	800e668 <tcp_close_shutdown_fin+0x80>
 800e610:	2b03      	cmp	r3, #3
 800e612:	d002      	beq.n	800e61a <tcp_close_shutdown_fin+0x32>
 800e614:	2b04      	cmp	r3, #4
 800e616:	d00d      	beq.n	800e634 <tcp_close_shutdown_fin+0x4c>
 800e618:	e026      	b.n	800e668 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f004 f9b0 	bl	8012980 <tcp_send_fin>
 800e620:	4603      	mov	r3, r0
 800e622:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d11f      	bne.n	800e66c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2205      	movs	r2, #5
 800e630:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e632:	e01b      	b.n	800e66c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f004 f9a3 	bl	8012980 <tcp_send_fin>
 800e63a:	4603      	mov	r3, r0
 800e63c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e63e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d114      	bne.n	800e670 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2205      	movs	r2, #5
 800e64a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e64c:	e010      	b.n	800e670 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f004 f996 	bl	8012980 <tcp_send_fin>
 800e654:	4603      	mov	r3, r0
 800e656:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d109      	bne.n	800e674 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2209      	movs	r2, #9
 800e664:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e666:	e005      	b.n	800e674 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e668:	2300      	movs	r3, #0
 800e66a:	e01c      	b.n	800e6a6 <tcp_close_shutdown_fin+0xbe>
      break;
 800e66c:	bf00      	nop
 800e66e:	e002      	b.n	800e676 <tcp_close_shutdown_fin+0x8e>
      break;
 800e670:	bf00      	nop
 800e672:	e000      	b.n	800e676 <tcp_close_shutdown_fin+0x8e>
      break;
 800e674:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d103      	bne.n	800e686 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f004 fabc 	bl	8012bfc <tcp_output>
 800e684:	e00d      	b.n	800e6a2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e68e:	d108      	bne.n	800e6a2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	8b5b      	ldrh	r3, [r3, #26]
 800e694:	f043 0308 	orr.w	r3, r3, #8
 800e698:	b29a      	uxth	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	e001      	b.n	800e6a6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e6a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3710      	adds	r7, #16
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	0801acf8 	.word	0x0801acf8
 800e6b4:	0801ae04 	.word	0x0801ae04
 800e6b8:	0801ad98 	.word	0x0801ad98

0800e6bc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d109      	bne.n	800e6de <tcp_close+0x22>
 800e6ca:	4b0f      	ldr	r3, [pc, #60]	; (800e708 <tcp_close+0x4c>)
 800e6cc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e6d0:	490e      	ldr	r1, [pc, #56]	; (800e70c <tcp_close+0x50>)
 800e6d2:	480f      	ldr	r0, [pc, #60]	; (800e710 <tcp_close+0x54>)
 800e6d4:	f006 ffac 	bl	8015630 <iprintf>
 800e6d8:	f06f 030f 	mvn.w	r3, #15
 800e6dc:	e00f      	b.n	800e6fe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	7d1b      	ldrb	r3, [r3, #20]
 800e6e2:	2b01      	cmp	r3, #1
 800e6e4:	d006      	beq.n	800e6f4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	8b5b      	ldrh	r3, [r3, #26]
 800e6ea:	f043 0310 	orr.w	r3, r3, #16
 800e6ee:	b29a      	uxth	r2, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e6f4:	2101      	movs	r1, #1
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f7ff fe94 	bl	800e424 <tcp_close_shutdown>
 800e6fc:	4603      	mov	r3, r0
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	0801acf8 	.word	0x0801acf8
 800e70c:	0801ae64 	.word	0x0801ae64
 800e710:	0801ad98 	.word	0x0801ad98

0800e714 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b08e      	sub	sp, #56	; 0x38
 800e718:	af04      	add	r7, sp, #16
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d107      	bne.n	800e734 <tcp_abandon+0x20>
 800e724:	4b4d      	ldr	r3, [pc, #308]	; (800e85c <tcp_abandon+0x148>)
 800e726:	f240 223d 	movw	r2, #573	; 0x23d
 800e72a:	494d      	ldr	r1, [pc, #308]	; (800e860 <tcp_abandon+0x14c>)
 800e72c:	484d      	ldr	r0, [pc, #308]	; (800e864 <tcp_abandon+0x150>)
 800e72e:	f006 ff7f 	bl	8015630 <iprintf>
 800e732:	e090      	b.n	800e856 <tcp_abandon+0x142>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	7d1b      	ldrb	r3, [r3, #20]
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d106      	bne.n	800e74a <tcp_abandon+0x36>
 800e73c:	4b47      	ldr	r3, [pc, #284]	; (800e85c <tcp_abandon+0x148>)
 800e73e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e742:	4949      	ldr	r1, [pc, #292]	; (800e868 <tcp_abandon+0x154>)
 800e744:	4847      	ldr	r0, [pc, #284]	; (800e864 <tcp_abandon+0x150>)
 800e746:	f006 ff73 	bl	8015630 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	7d1b      	ldrb	r3, [r3, #20]
 800e74e:	2b0a      	cmp	r3, #10
 800e750:	d107      	bne.n	800e762 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e752:	6879      	ldr	r1, [r7, #4]
 800e754:	4845      	ldr	r0, [pc, #276]	; (800e86c <tcp_abandon+0x158>)
 800e756:	f001 fa13 	bl	800fb80 <tcp_pcb_remove>
    tcp_free(pcb);
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f7ff fdb0 	bl	800e2c0 <tcp_free>
 800e760:	e079      	b.n	800e856 <tcp_abandon+0x142>
  } else {
    int send_rst = 0;
 800e762:	2300      	movs	r3, #0
 800e764:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e766:	2300      	movs	r3, #0
 800e768:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e76e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e774:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e77c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	691b      	ldr	r3, [r3, #16]
 800e782:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	7d1b      	ldrb	r3, [r3, #20]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d126      	bne.n	800e7da <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	8adb      	ldrh	r3, [r3, #22]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d02e      	beq.n	800e7f2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e794:	4b36      	ldr	r3, [pc, #216]	; (800e870 <tcp_abandon+0x15c>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d105      	bne.n	800e7aa <tcp_abandon+0x96>
 800e79e:	4b34      	ldr	r3, [pc, #208]	; (800e870 <tcp_abandon+0x15c>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	4a32      	ldr	r2, [pc, #200]	; (800e870 <tcp_abandon+0x15c>)
 800e7a6:	6013      	str	r3, [r2, #0]
 800e7a8:	e013      	b.n	800e7d2 <tcp_abandon+0xbe>
 800e7aa:	4b31      	ldr	r3, [pc, #196]	; (800e870 <tcp_abandon+0x15c>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	61fb      	str	r3, [r7, #28]
 800e7b0:	e00c      	b.n	800e7cc <tcp_abandon+0xb8>
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d104      	bne.n	800e7c6 <tcp_abandon+0xb2>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	68da      	ldr	r2, [r3, #12]
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	60da      	str	r2, [r3, #12]
 800e7c4:	e005      	b.n	800e7d2 <tcp_abandon+0xbe>
 800e7c6:	69fb      	ldr	r3, [r7, #28]
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	61fb      	str	r3, [r7, #28]
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d1ef      	bne.n	800e7b2 <tcp_abandon+0x9e>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	60da      	str	r2, [r3, #12]
 800e7d8:	e00b      	b.n	800e7f2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	8adb      	ldrh	r3, [r3, #22]
 800e7e2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e7e4:	6879      	ldr	r1, [r7, #4]
 800e7e6:	4823      	ldr	r0, [pc, #140]	; (800e874 <tcp_abandon+0x160>)
 800e7e8:	f001 f9ca 	bl	800fb80 <tcp_pcb_remove>
 800e7ec:	4b22      	ldr	r3, [pc, #136]	; (800e878 <tcp_abandon+0x164>)
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d004      	beq.n	800e804 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7fe:	4618      	mov	r0, r3
 800e800:	f000 feba 	bl	800f578 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d004      	beq.n	800e816 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e810:	4618      	mov	r0, r3
 800e812:	f000 feb1 	bl	800f578 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d00e      	beq.n	800e83a <tcp_abandon+0x126>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e81c:	6879      	ldr	r1, [r7, #4]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	3304      	adds	r3, #4
 800e822:	687a      	ldr	r2, [r7, #4]
 800e824:	8b12      	ldrh	r2, [r2, #24]
 800e826:	9202      	str	r2, [sp, #8]
 800e828:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e82a:	9201      	str	r2, [sp, #4]
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	460b      	mov	r3, r1
 800e830:	697a      	ldr	r2, [r7, #20]
 800e832:	69b9      	ldr	r1, [r7, #24]
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f004 ff95 	bl	8013764 <tcp_rst>
    }
    last_state = pcb->state;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	7d1b      	ldrb	r3, [r3, #20]
 800e83e:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7ff fd3d 	bl	800e2c0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d004      	beq.n	800e856 <tcp_abandon+0x142>
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	f06f 010c 	mvn.w	r1, #12
 800e852:	68f8      	ldr	r0, [r7, #12]
 800e854:	4798      	blx	r3
  }
}
 800e856:	3728      	adds	r7, #40	; 0x28
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	0801acf8 	.word	0x0801acf8
 800e860:	0801ae98 	.word	0x0801ae98
 800e864:	0801ad98 	.word	0x0801ad98
 800e868:	0801aeb4 	.word	0x0801aeb4
 800e86c:	2000cfd8 	.word	0x2000cfd8
 800e870:	2000cfd4 	.word	0x2000cfd4
 800e874:	2000cfc8 	.word	0x2000cfc8
 800e878:	2000cfc4 	.word	0x2000cfc4

0800e87c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e884:	2101      	movs	r1, #1
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f7ff ff44 	bl	800e714 <tcp_abandon>
}
 800e88c:	bf00      	nop
 800e88e:	3708      	adds	r7, #8
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b088      	sub	sp, #32
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	4613      	mov	r3, r2
 800e8a0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e8a2:	2304      	movs	r3, #4
 800e8a4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d101      	bne.n	800e8b0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e8ac:	4b3e      	ldr	r3, [pc, #248]	; (800e9a8 <tcp_bind+0x114>)
 800e8ae:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d109      	bne.n	800e8ca <tcp_bind+0x36>
 800e8b6:	4b3d      	ldr	r3, [pc, #244]	; (800e9ac <tcp_bind+0x118>)
 800e8b8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e8bc:	493c      	ldr	r1, [pc, #240]	; (800e9b0 <tcp_bind+0x11c>)
 800e8be:	483d      	ldr	r0, [pc, #244]	; (800e9b4 <tcp_bind+0x120>)
 800e8c0:	f006 feb6 	bl	8015630 <iprintf>
 800e8c4:	f06f 030f 	mvn.w	r3, #15
 800e8c8:	e06a      	b.n	800e9a0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	7d1b      	ldrb	r3, [r3, #20]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d009      	beq.n	800e8e6 <tcp_bind+0x52>
 800e8d2:	4b36      	ldr	r3, [pc, #216]	; (800e9ac <tcp_bind+0x118>)
 800e8d4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e8d8:	4937      	ldr	r1, [pc, #220]	; (800e9b8 <tcp_bind+0x124>)
 800e8da:	4836      	ldr	r0, [pc, #216]	; (800e9b4 <tcp_bind+0x120>)
 800e8dc:	f006 fea8 	bl	8015630 <iprintf>
 800e8e0:	f06f 0305 	mvn.w	r3, #5
 800e8e4:	e05c      	b.n	800e9a0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e8e6:	88fb      	ldrh	r3, [r7, #6]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d109      	bne.n	800e900 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e8ec:	f000 f9f2 	bl	800ecd4 <tcp_new_port>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e8f4:	88fb      	ldrh	r3, [r7, #6]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d135      	bne.n	800e966 <tcp_bind+0xd2>
      return ERR_BUF;
 800e8fa:	f06f 0301 	mvn.w	r3, #1
 800e8fe:	e04f      	b.n	800e9a0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e900:	2300      	movs	r3, #0
 800e902:	61fb      	str	r3, [r7, #28]
 800e904:	e02b      	b.n	800e95e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e906:	4a2d      	ldr	r2, [pc, #180]	; (800e9bc <tcp_bind+0x128>)
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	61bb      	str	r3, [r7, #24]
 800e912:	e01e      	b.n	800e952 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e914:	69bb      	ldr	r3, [r7, #24]
 800e916:	8adb      	ldrh	r3, [r3, #22]
 800e918:	88fa      	ldrh	r2, [r7, #6]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d116      	bne.n	800e94c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e91e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e920:	2b00      	cmp	r3, #0
 800e922:	d010      	beq.n	800e946 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e924:	69bb      	ldr	r3, [r7, #24]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d00c      	beq.n	800e946 <tcp_bind+0xb2>
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d009      	beq.n	800e946 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d005      	beq.n	800e946 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e942:	429a      	cmp	r2, r3
 800e944:	d102      	bne.n	800e94c <tcp_bind+0xb8>
              return ERR_USE;
 800e946:	f06f 0307 	mvn.w	r3, #7
 800e94a:	e029      	b.n	800e9a0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e94c:	69bb      	ldr	r3, [r7, #24]
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	61bb      	str	r3, [r7, #24]
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d1dd      	bne.n	800e914 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	3301      	adds	r3, #1
 800e95c:	61fb      	str	r3, [r7, #28]
 800e95e:	69fa      	ldr	r2, [r7, #28]
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	429a      	cmp	r2, r3
 800e964:	dbcf      	blt.n	800e906 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d00c      	beq.n	800e986 <tcp_bind+0xf2>
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d008      	beq.n	800e986 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d002      	beq.n	800e980 <tcp_bind+0xec>
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	e000      	b.n	800e982 <tcp_bind+0xee>
 800e980:	2300      	movs	r3, #0
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	88fa      	ldrh	r2, [r7, #6]
 800e98a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e98c:	4b0c      	ldr	r3, [pc, #48]	; (800e9c0 <tcp_bind+0x12c>)
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	60da      	str	r2, [r3, #12]
 800e994:	4a0a      	ldr	r2, [pc, #40]	; (800e9c0 <tcp_bind+0x12c>)
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	6013      	str	r3, [r2, #0]
 800e99a:	f005 f8a5 	bl	8013ae8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e99e:	2300      	movs	r3, #0
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3720      	adds	r7, #32
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}
 800e9a8:	08019c70 	.word	0x08019c70
 800e9ac:	0801acf8 	.word	0x0801acf8
 800e9b0:	0801aee8 	.word	0x0801aee8
 800e9b4:	0801ad98 	.word	0x0801ad98
 800e9b8:	0801af00 	.word	0x0801af00
 800e9bc:	0801ace8 	.word	0x0801ace8
 800e9c0:	2000cfd4 	.word	0x2000cfd4

0800e9c4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	60b9      	str	r1, [r7, #8]
 800e9ce:	4613      	mov	r3, r2
 800e9d0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d106      	bne.n	800e9e6 <tcp_accept_null+0x22>
 800e9d8:	4b07      	ldr	r3, [pc, #28]	; (800e9f8 <tcp_accept_null+0x34>)
 800e9da:	f240 320f 	movw	r2, #783	; 0x30f
 800e9de:	4907      	ldr	r1, [pc, #28]	; (800e9fc <tcp_accept_null+0x38>)
 800e9e0:	4807      	ldr	r0, [pc, #28]	; (800ea00 <tcp_accept_null+0x3c>)
 800e9e2:	f006 fe25 	bl	8015630 <iprintf>

  tcp_abort(pcb);
 800e9e6:	68b8      	ldr	r0, [r7, #8]
 800e9e8:	f7ff ff48 	bl	800e87c <tcp_abort>

  return ERR_ABRT;
 800e9ec:	f06f 030c 	mvn.w	r3, #12
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3710      	adds	r7, #16
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	0801acf8 	.word	0x0801acf8
 800e9fc:	0801af28 	.word	0x0801af28
 800ea00:	0801ad98 	.word	0x0801ad98

0800ea04 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	460b      	mov	r3, r1
 800ea0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800ea10:	78fb      	ldrb	r3, [r7, #3]
 800ea12:	2200      	movs	r2, #0
 800ea14:	4619      	mov	r1, r3
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f000 f806 	bl	800ea28 <tcp_listen_with_backlog_and_err>
 800ea1c:	4603      	mov	r3, r0
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
	...

0800ea28 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b088      	sub	sp, #32
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	460b      	mov	r3, r1
 800ea32:	607a      	str	r2, [r7, #4]
 800ea34:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800ea36:	2300      	movs	r3, #0
 800ea38:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d109      	bne.n	800ea54 <tcp_listen_with_backlog_and_err+0x2c>
 800ea40:	4b47      	ldr	r3, [pc, #284]	; (800eb60 <tcp_listen_with_backlog_and_err+0x138>)
 800ea42:	f240 3259 	movw	r2, #857	; 0x359
 800ea46:	4947      	ldr	r1, [pc, #284]	; (800eb64 <tcp_listen_with_backlog_and_err+0x13c>)
 800ea48:	4847      	ldr	r0, [pc, #284]	; (800eb68 <tcp_listen_with_backlog_and_err+0x140>)
 800ea4a:	f006 fdf1 	bl	8015630 <iprintf>
 800ea4e:	23f0      	movs	r3, #240	; 0xf0
 800ea50:	76fb      	strb	r3, [r7, #27]
 800ea52:	e079      	b.n	800eb48 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	7d1b      	ldrb	r3, [r3, #20]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d009      	beq.n	800ea70 <tcp_listen_with_backlog_and_err+0x48>
 800ea5c:	4b40      	ldr	r3, [pc, #256]	; (800eb60 <tcp_listen_with_backlog_and_err+0x138>)
 800ea5e:	f240 325a 	movw	r2, #858	; 0x35a
 800ea62:	4942      	ldr	r1, [pc, #264]	; (800eb6c <tcp_listen_with_backlog_and_err+0x144>)
 800ea64:	4840      	ldr	r0, [pc, #256]	; (800eb68 <tcp_listen_with_backlog_and_err+0x140>)
 800ea66:	f006 fde3 	bl	8015630 <iprintf>
 800ea6a:	23f1      	movs	r3, #241	; 0xf1
 800ea6c:	76fb      	strb	r3, [r7, #27]
 800ea6e:	e06b      	b.n	800eb48 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	7d1b      	ldrb	r3, [r3, #20]
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d104      	bne.n	800ea82 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800ea7c:	23f7      	movs	r3, #247	; 0xf7
 800ea7e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ea80:	e062      	b.n	800eb48 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ea82:	2002      	movs	r0, #2
 800ea84:	f7fe fb32 	bl	800d0ec <memp_malloc>
 800ea88:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d102      	bne.n	800ea96 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800ea90:	23ff      	movs	r3, #255	; 0xff
 800ea92:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ea94:	e058      	b.n	800eb48 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	691a      	ldr	r2, [r3, #16]
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	8ada      	ldrh	r2, [r3, #22]
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	2201      	movs	r2, #1
 800eaaa:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	7d5a      	ldrb	r2, [r3, #21]
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	7a5a      	ldrb	r2, [r3, #9]
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	2200      	movs	r2, #0
 800eac0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	7ada      	ldrb	r2, [r3, #11]
 800eac6:	69fb      	ldr	r3, [r7, #28]
 800eac8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	7a9a      	ldrb	r2, [r3, #10]
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	8adb      	ldrh	r3, [r3, #22]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d021      	beq.n	800eb26 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800eae2:	4b23      	ldr	r3, [pc, #140]	; (800eb70 <tcp_listen_with_backlog_and_err+0x148>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	68fa      	ldr	r2, [r7, #12]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d105      	bne.n	800eaf8 <tcp_listen_with_backlog_and_err+0xd0>
 800eaec:	4b20      	ldr	r3, [pc, #128]	; (800eb70 <tcp_listen_with_backlog_and_err+0x148>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	4a1f      	ldr	r2, [pc, #124]	; (800eb70 <tcp_listen_with_backlog_and_err+0x148>)
 800eaf4:	6013      	str	r3, [r2, #0]
 800eaf6:	e013      	b.n	800eb20 <tcp_listen_with_backlog_and_err+0xf8>
 800eaf8:	4b1d      	ldr	r3, [pc, #116]	; (800eb70 <tcp_listen_with_backlog_and_err+0x148>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	617b      	str	r3, [r7, #20]
 800eafe:	e00c      	b.n	800eb1a <tcp_listen_with_backlog_and_err+0xf2>
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	68db      	ldr	r3, [r3, #12]
 800eb04:	68fa      	ldr	r2, [r7, #12]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d104      	bne.n	800eb14 <tcp_listen_with_backlog_and_err+0xec>
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	68da      	ldr	r2, [r3, #12]
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	60da      	str	r2, [r3, #12]
 800eb12:	e005      	b.n	800eb20 <tcp_listen_with_backlog_and_err+0xf8>
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	617b      	str	r3, [r7, #20]
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d1ef      	bne.n	800eb00 <tcp_listen_with_backlog_and_err+0xd8>
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	2200      	movs	r2, #0
 800eb24:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800eb26:	68f8      	ldr	r0, [r7, #12]
 800eb28:	f7ff fbca 	bl	800e2c0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	4a11      	ldr	r2, [pc, #68]	; (800eb74 <tcp_listen_with_backlog_and_err+0x14c>)
 800eb30:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800eb32:	4b11      	ldr	r3, [pc, #68]	; (800eb78 <tcp_listen_with_backlog_and_err+0x150>)
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	60da      	str	r2, [r3, #12]
 800eb3a:	4a0f      	ldr	r2, [pc, #60]	; (800eb78 <tcp_listen_with_backlog_and_err+0x150>)
 800eb3c:	69fb      	ldr	r3, [r7, #28]
 800eb3e:	6013      	str	r3, [r2, #0]
 800eb40:	f004 ffd2 	bl	8013ae8 <tcp_timer_needed>
  res = ERR_OK;
 800eb44:	2300      	movs	r3, #0
 800eb46:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d002      	beq.n	800eb54 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	7efa      	ldrb	r2, [r7, #27]
 800eb52:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800eb54:	69fb      	ldr	r3, [r7, #28]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3720      	adds	r7, #32
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	0801acf8 	.word	0x0801acf8
 800eb64:	0801af48 	.word	0x0801af48
 800eb68:	0801ad98 	.word	0x0801ad98
 800eb6c:	0801af78 	.word	0x0801af78
 800eb70:	2000cfd4 	.word	0x2000cfd4
 800eb74:	0800e9c5 	.word	0x0800e9c5
 800eb78:	2000cfd0 	.word	0x2000cfd0

0800eb7c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b084      	sub	sp, #16
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d106      	bne.n	800eb98 <tcp_update_rcv_ann_wnd+0x1c>
 800eb8a:	4b25      	ldr	r3, [pc, #148]	; (800ec20 <tcp_update_rcv_ann_wnd+0xa4>)
 800eb8c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800eb90:	4924      	ldr	r1, [pc, #144]	; (800ec24 <tcp_update_rcv_ann_wnd+0xa8>)
 800eb92:	4825      	ldr	r0, [pc, #148]	; (800ec28 <tcp_update_rcv_ann_wnd+0xac>)
 800eb94:	f006 fd4c 	bl	8015630 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb9c:	687a      	ldr	r2, [r7, #4]
 800eb9e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800eba0:	4413      	add	r3, r2
 800eba2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ebac:	f240 51b4 	movw	r1, #1460	; 0x5b4
 800ebb0:	428a      	cmp	r2, r1
 800ebb2:	bf28      	it	cs
 800ebb4:	460a      	movcs	r2, r1
 800ebb6:	b292      	uxth	r2, r2
 800ebb8:	4413      	add	r3, r2
 800ebba:	68fa      	ldr	r2, [r7, #12]
 800ebbc:	1ad3      	subs	r3, r2, r3
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	db08      	blt.n	800ebd4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	1ad3      	subs	r3, r2, r3
 800ebd2:	e020      	b.n	800ec16 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebdc:	1ad3      	subs	r3, r2, r3
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	dd03      	ble.n	800ebea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ebe8:	e014      	b.n	800ec14 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf2:	1ad3      	subs	r3, r2, r3
 800ebf4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebfc:	d306      	bcc.n	800ec0c <tcp_update_rcv_ann_wnd+0x90>
 800ebfe:	4b08      	ldr	r3, [pc, #32]	; (800ec20 <tcp_update_rcv_ann_wnd+0xa4>)
 800ec00:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ec04:	4909      	ldr	r1, [pc, #36]	; (800ec2c <tcp_update_rcv_ann_wnd+0xb0>)
 800ec06:	4808      	ldr	r0, [pc, #32]	; (800ec28 <tcp_update_rcv_ann_wnd+0xac>)
 800ec08:	f006 fd12 	bl	8015630 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	b29a      	uxth	r2, r3
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ec14:	2300      	movs	r3, #0
  }
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop
 800ec20:	0801acf8 	.word	0x0801acf8
 800ec24:	0801afb0 	.word	0x0801afb0
 800ec28:	0801ad98 	.word	0x0801ad98
 800ec2c:	0801afd4 	.word	0x0801afd4

0800ec30 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b084      	sub	sp, #16
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	460b      	mov	r3, r1
 800ec3a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d107      	bne.n	800ec52 <tcp_recved+0x22>
 800ec42:	4b20      	ldr	r3, [pc, #128]	; (800ecc4 <tcp_recved+0x94>)
 800ec44:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ec48:	491f      	ldr	r1, [pc, #124]	; (800ecc8 <tcp_recved+0x98>)
 800ec4a:	4820      	ldr	r0, [pc, #128]	; (800eccc <tcp_recved+0x9c>)
 800ec4c:	f006 fcf0 	bl	8015630 <iprintf>
 800ec50:	e034      	b.n	800ecbc <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	7d1b      	ldrb	r3, [r3, #20]
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d106      	bne.n	800ec68 <tcp_recved+0x38>
 800ec5a:	4b1a      	ldr	r3, [pc, #104]	; (800ecc4 <tcp_recved+0x94>)
 800ec5c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ec60:	491b      	ldr	r1, [pc, #108]	; (800ecd0 <tcp_recved+0xa0>)
 800ec62:	481a      	ldr	r0, [pc, #104]	; (800eccc <tcp_recved+0x9c>)
 800ec64:	f006 fce4 	bl	8015630 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec6c:	887b      	ldrh	r3, [r7, #2]
 800ec6e:	4413      	add	r3, r2
 800ec70:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ec72:	89fb      	ldrh	r3, [r7, #14]
 800ec74:	f640 3268 	movw	r2, #2920	; 0xb68
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d804      	bhi.n	800ec86 <tcp_recved+0x56>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec80:	89fa      	ldrh	r2, [r7, #14]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d204      	bcs.n	800ec90 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f640 3268 	movw	r2, #2920	; 0xb68
 800ec8c:	851a      	strh	r2, [r3, #40]	; 0x28
 800ec8e:	e002      	b.n	800ec96 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	89fa      	ldrh	r2, [r7, #14]
 800ec94:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7ff ff70 	bl	800eb7c <tcp_update_rcv_ann_wnd>
 800ec9c:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	f240 22d9 	movw	r2, #729	; 0x2d9
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d909      	bls.n	800ecbc <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	8b5b      	ldrh	r3, [r3, #26]
 800ecac:	f043 0302 	orr.w	r3, r3, #2
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f003 ffa0 	bl	8012bfc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	0801acf8 	.word	0x0801acf8
 800ecc8:	0801aff0 	.word	0x0801aff0
 800eccc:	0801ad98 	.word	0x0801ad98
 800ecd0:	0801b008 	.word	0x0801b008

0800ecd4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ecde:	4b1e      	ldr	r3, [pc, #120]	; (800ed58 <tcp_new_port+0x84>)
 800ece0:	881b      	ldrh	r3, [r3, #0]
 800ece2:	3301      	adds	r3, #1
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	4b1c      	ldr	r3, [pc, #112]	; (800ed58 <tcp_new_port+0x84>)
 800ece8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ecea:	4b1b      	ldr	r3, [pc, #108]	; (800ed58 <tcp_new_port+0x84>)
 800ecec:	881b      	ldrh	r3, [r3, #0]
 800ecee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d103      	bne.n	800ecfe <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ecf6:	4b18      	ldr	r3, [pc, #96]	; (800ed58 <tcp_new_port+0x84>)
 800ecf8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ecfc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ecfe:	2300      	movs	r3, #0
 800ed00:	71fb      	strb	r3, [r7, #7]
 800ed02:	e01e      	b.n	800ed42 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ed04:	79fb      	ldrb	r3, [r7, #7]
 800ed06:	4a15      	ldr	r2, [pc, #84]	; (800ed5c <tcp_new_port+0x88>)
 800ed08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	603b      	str	r3, [r7, #0]
 800ed10:	e011      	b.n	800ed36 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	8ada      	ldrh	r2, [r3, #22]
 800ed16:	4b10      	ldr	r3, [pc, #64]	; (800ed58 <tcp_new_port+0x84>)
 800ed18:	881b      	ldrh	r3, [r3, #0]
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d108      	bne.n	800ed30 <tcp_new_port+0x5c>
        n++;
 800ed1e:	88bb      	ldrh	r3, [r7, #4]
 800ed20:	3301      	adds	r3, #1
 800ed22:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ed24:	88bb      	ldrh	r3, [r7, #4]
 800ed26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed2a:	d3d8      	bcc.n	800ecde <tcp_new_port+0xa>
          return 0;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	e00d      	b.n	800ed4c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	603b      	str	r3, [r7, #0]
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1ea      	bne.n	800ed12 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ed3c:	79fb      	ldrb	r3, [r7, #7]
 800ed3e:	3301      	adds	r3, #1
 800ed40:	71fb      	strb	r3, [r7, #7]
 800ed42:	79fb      	ldrb	r3, [r7, #7]
 800ed44:	2b03      	cmp	r3, #3
 800ed46:	d9dd      	bls.n	800ed04 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ed48:	4b03      	ldr	r3, [pc, #12]	; (800ed58 <tcp_new_port+0x84>)
 800ed4a:	881b      	ldrh	r3, [r3, #0]
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	370c      	adds	r7, #12
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr
 800ed58:	20000030 	.word	0x20000030
 800ed5c:	0801ace8 	.word	0x0801ace8

0800ed60 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ed60:	b5b0      	push	{r4, r5, r7, lr}
 800ed62:	b090      	sub	sp, #64	; 0x40
 800ed64:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ed66:	2300      	movs	r3, #0
 800ed68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ed6c:	4b94      	ldr	r3, [pc, #592]	; (800efc0 <tcp_slowtmr+0x260>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	3301      	adds	r3, #1
 800ed72:	4a93      	ldr	r2, [pc, #588]	; (800efc0 <tcp_slowtmr+0x260>)
 800ed74:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ed76:	4b93      	ldr	r3, [pc, #588]	; (800efc4 <tcp_slowtmr+0x264>)
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	b2da      	uxtb	r2, r3
 800ed7e:	4b91      	ldr	r3, [pc, #580]	; (800efc4 <tcp_slowtmr+0x264>)
 800ed80:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ed82:	2300      	movs	r3, #0
 800ed84:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ed86:	4b90      	ldr	r3, [pc, #576]	; (800efc8 <tcp_slowtmr+0x268>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ed8c:	e287      	b.n	800f29e <tcp_slowtmr+0x53e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ed8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed90:	7d1b      	ldrb	r3, [r3, #20]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d106      	bne.n	800eda4 <tcp_slowtmr+0x44>
 800ed96:	4b8d      	ldr	r3, [pc, #564]	; (800efcc <tcp_slowtmr+0x26c>)
 800ed98:	f240 42be 	movw	r2, #1214	; 0x4be
 800ed9c:	498c      	ldr	r1, [pc, #560]	; (800efd0 <tcp_slowtmr+0x270>)
 800ed9e:	488d      	ldr	r0, [pc, #564]	; (800efd4 <tcp_slowtmr+0x274>)
 800eda0:	f006 fc46 	bl	8015630 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800eda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda6:	7d1b      	ldrb	r3, [r3, #20]
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	d106      	bne.n	800edba <tcp_slowtmr+0x5a>
 800edac:	4b87      	ldr	r3, [pc, #540]	; (800efcc <tcp_slowtmr+0x26c>)
 800edae:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800edb2:	4989      	ldr	r1, [pc, #548]	; (800efd8 <tcp_slowtmr+0x278>)
 800edb4:	4887      	ldr	r0, [pc, #540]	; (800efd4 <tcp_slowtmr+0x274>)
 800edb6:	f006 fc3b 	bl	8015630 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800edba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edbc:	7d1b      	ldrb	r3, [r3, #20]
 800edbe:	2b0a      	cmp	r3, #10
 800edc0:	d106      	bne.n	800edd0 <tcp_slowtmr+0x70>
 800edc2:	4b82      	ldr	r3, [pc, #520]	; (800efcc <tcp_slowtmr+0x26c>)
 800edc4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800edc8:	4984      	ldr	r1, [pc, #528]	; (800efdc <tcp_slowtmr+0x27c>)
 800edca:	4882      	ldr	r0, [pc, #520]	; (800efd4 <tcp_slowtmr+0x274>)
 800edcc:	f006 fc30 	bl	8015630 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800edd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd2:	7f9a      	ldrb	r2, [r3, #30]
 800edd4:	4b7b      	ldr	r3, [pc, #492]	; (800efc4 <tcp_slowtmr+0x264>)
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d105      	bne.n	800ede8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800eddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edde:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ede0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ede6:	e25a      	b.n	800f29e <tcp_slowtmr+0x53e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ede8:	4b76      	ldr	r3, [pc, #472]	; (800efc4 <tcp_slowtmr+0x264>)
 800edea:	781a      	ldrb	r2, [r3, #0]
 800edec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edee:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800edf0:	2300      	movs	r3, #0
 800edf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800edf6:	2300      	movs	r3, #0
 800edf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800edfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfe:	7d1b      	ldrb	r3, [r3, #20]
 800ee00:	2b02      	cmp	r3, #2
 800ee02:	d10a      	bne.n	800ee1a <tcp_slowtmr+0xba>
 800ee04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee0a:	2b05      	cmp	r3, #5
 800ee0c:	d905      	bls.n	800ee1a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ee0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee12:	3301      	adds	r3, #1
 800ee14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee18:	e11e      	b.n	800f058 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ee1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee20:	2b0b      	cmp	r3, #11
 800ee22:	d905      	bls.n	800ee30 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ee24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee28:	3301      	adds	r3, #1
 800ee2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee2e:	e113      	b.n	800f058 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ee30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee32:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d075      	beq.n	800ef26 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ee3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d006      	beq.n	800ee50 <tcp_slowtmr+0xf0>
 800ee42:	4b62      	ldr	r3, [pc, #392]	; (800efcc <tcp_slowtmr+0x26c>)
 800ee44:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ee48:	4965      	ldr	r1, [pc, #404]	; (800efe0 <tcp_slowtmr+0x280>)
 800ee4a:	4862      	ldr	r0, [pc, #392]	; (800efd4 <tcp_slowtmr+0x274>)
 800ee4c:	f006 fbf0 	bl	8015630 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ee50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d106      	bne.n	800ee66 <tcp_slowtmr+0x106>
 800ee58:	4b5c      	ldr	r3, [pc, #368]	; (800efcc <tcp_slowtmr+0x26c>)
 800ee5a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ee5e:	4961      	ldr	r1, [pc, #388]	; (800efe4 <tcp_slowtmr+0x284>)
 800ee60:	485c      	ldr	r0, [pc, #368]	; (800efd4 <tcp_slowtmr+0x274>)
 800ee62:	f006 fbe5 	bl	8015630 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ee66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee68:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800ee6c:	2b0b      	cmp	r3, #11
 800ee6e:	d905      	bls.n	800ee7c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ee70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee74:	3301      	adds	r3, #1
 800ee76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee7a:	e0ed      	b.n	800f058 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ee7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee7e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ee82:	3b01      	subs	r3, #1
 800ee84:	4a58      	ldr	r2, [pc, #352]	; (800efe8 <tcp_slowtmr+0x288>)
 800ee86:	5cd3      	ldrb	r3, [r2, r3]
 800ee88:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ee8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee8c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800ee90:	7c7a      	ldrb	r2, [r7, #17]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d907      	bls.n	800eea6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ee96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee98:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	b2da      	uxtb	r2, r3
 800eea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800eea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800eeac:	7c7a      	ldrb	r2, [r7, #17]
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	f200 80d2 	bhi.w	800f058 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800eeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d108      	bne.n	800eed4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800eec2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eec4:	f004 fd42 	bl	801394c <tcp_zero_window_probe>
 800eec8:	4603      	mov	r3, r0
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d014      	beq.n	800eef8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800eece:	2300      	movs	r3, #0
 800eed0:	623b      	str	r3, [r7, #32]
 800eed2:	e011      	b.n	800eef8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800eed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eeda:	4619      	mov	r1, r3
 800eedc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eede:	f003 fc07 	bl	80126f0 <tcp_split_unsent_seg>
 800eee2:	4603      	mov	r3, r0
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d107      	bne.n	800eef8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800eee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eeea:	f003 fe87 	bl	8012bfc <tcp_output>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d101      	bne.n	800eef8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800eef4:	2300      	movs	r3, #0
 800eef6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800eef8:	6a3b      	ldr	r3, [r7, #32]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	f000 80ac 	beq.w	800f058 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ef00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef02:	2200      	movs	r2, #0
 800ef04:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ef08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef0a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ef0e:	2b06      	cmp	r3, #6
 800ef10:	f200 80a2 	bhi.w	800f058 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ef14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef16:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	b2da      	uxtb	r2, r3
 800ef1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef20:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800ef24:	e098      	b.n	800f058 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ef26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	db0f      	blt.n	800ef50 <tcp_slowtmr+0x1f0>
 800ef30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef32:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ef36:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d008      	beq.n	800ef50 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ef3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	3301      	adds	r3, #1
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	b21a      	sxth	r2, r3
 800ef4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ef50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef52:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ef56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef58:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	db7b      	blt.n	800f058 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ef60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef62:	f004 f93d 	bl	80131e0 <tcp_rexmit_rto_prepare>
 800ef66:	4603      	mov	r3, r0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d007      	beq.n	800ef7c <tcp_slowtmr+0x21c>
 800ef6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d171      	bne.n	800f058 <tcp_slowtmr+0x2f8>
 800ef74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d06d      	beq.n	800f058 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ef7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef7e:	7d1b      	ldrb	r3, [r3, #20]
 800ef80:	2b02      	cmp	r3, #2
 800ef82:	d03a      	beq.n	800effa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ef84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef8a:	2b0c      	cmp	r3, #12
 800ef8c:	bf28      	it	cs
 800ef8e:	230c      	movcs	r3, #12
 800ef90:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ef92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ef98:	10db      	asrs	r3, r3, #3
 800ef9a:	b21b      	sxth	r3, r3
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800efa4:	4413      	add	r3, r2
 800efa6:	7efa      	ldrb	r2, [r7, #27]
 800efa8:	4910      	ldr	r1, [pc, #64]	; (800efec <tcp_slowtmr+0x28c>)
 800efaa:	5c8a      	ldrb	r2, [r1, r2]
 800efac:	4093      	lsls	r3, r2
 800efae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800efb6:	4293      	cmp	r3, r2
 800efb8:	dc1a      	bgt.n	800eff0 <tcp_slowtmr+0x290>
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	b21a      	sxth	r2, r3
 800efbe:	e019      	b.n	800eff4 <tcp_slowtmr+0x294>
 800efc0:	2000cfcc 	.word	0x2000cfcc
 800efc4:	200068ce 	.word	0x200068ce
 800efc8:	2000cfc8 	.word	0x2000cfc8
 800efcc:	0801acf8 	.word	0x0801acf8
 800efd0:	0801b098 	.word	0x0801b098
 800efd4:	0801ad98 	.word	0x0801ad98
 800efd8:	0801b0c4 	.word	0x0801b0c4
 800efdc:	0801b0f0 	.word	0x0801b0f0
 800efe0:	0801b120 	.word	0x0801b120
 800efe4:	0801b154 	.word	0x0801b154
 800efe8:	0801ace0 	.word	0x0801ace0
 800efec:	0801acd0 	.word	0x0801acd0
 800eff0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800eff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800effa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effc:	2200      	movs	r2, #0
 800effe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f002:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f008:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f00c:	4293      	cmp	r3, r2
 800f00e:	bf28      	it	cs
 800f010:	4613      	movcs	r3, r2
 800f012:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f014:	8a7b      	ldrh	r3, [r7, #18]
 800f016:	085b      	lsrs	r3, r3, #1
 800f018:	b29a      	uxth	r2, r3
 800f01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f022:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f02a:	005b      	lsls	r3, r3, #1
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	429a      	cmp	r2, r3
 800f030:	d206      	bcs.n	800f040 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f036:	005b      	lsls	r3, r3, #1
 800f038:	b29a      	uxth	r2, r3
 800f03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f042:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f046:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04c:	2200      	movs	r2, #0
 800f04e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f054:	f004 f934 	bl	80132c0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05a:	7d1b      	ldrb	r3, [r3, #20]
 800f05c:	2b06      	cmp	r3, #6
 800f05e:	d111      	bne.n	800f084 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f062:	8b5b      	ldrh	r3, [r3, #26]
 800f064:	f003 0310 	and.w	r3, r3, #16
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d00b      	beq.n	800f084 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f06c:	4b91      	ldr	r3, [pc, #580]	; (800f2b4 <tcp_slowtmr+0x554>)
 800f06e:	681a      	ldr	r2, [r3, #0]
 800f070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f072:	6a1b      	ldr	r3, [r3, #32]
 800f074:	1ad3      	subs	r3, r2, r3
 800f076:	2b28      	cmp	r3, #40	; 0x28
 800f078:	d904      	bls.n	800f084 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f07a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f07e:	3301      	adds	r3, #1
 800f080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f086:	7a5b      	ldrb	r3, [r3, #9]
 800f088:	f003 0308 	and.w	r3, r3, #8
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d04a      	beq.n	800f126 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f092:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f094:	2b04      	cmp	r3, #4
 800f096:	d003      	beq.n	800f0a0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f09c:	2b07      	cmp	r3, #7
 800f09e:	d142      	bne.n	800f126 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f0a0:	4b84      	ldr	r3, [pc, #528]	; (800f2b4 <tcp_slowtmr+0x554>)
 800f0a2:	681a      	ldr	r2, [r3, #0]
 800f0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a6:	6a1b      	ldr	r3, [r3, #32]
 800f0a8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ac:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800f0b0:	4b81      	ldr	r3, [pc, #516]	; (800f2b8 <tcp_slowtmr+0x558>)
 800f0b2:	440b      	add	r3, r1
 800f0b4:	4981      	ldr	r1, [pc, #516]	; (800f2bc <tcp_slowtmr+0x55c>)
 800f0b6:	fba1 1303 	umull	r1, r3, r1, r3
 800f0ba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d90a      	bls.n	800f0d6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f0c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f0ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f0d4:	e027      	b.n	800f126 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f0d6:	4b77      	ldr	r3, [pc, #476]	; (800f2b4 <tcp_slowtmr+0x554>)
 800f0d8:	681a      	ldr	r2, [r3, #0]
 800f0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0dc:	6a1b      	ldr	r3, [r3, #32]
 800f0de:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e2:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800f0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	4b74      	ldr	r3, [pc, #464]	; (800f2c0 <tcp_slowtmr+0x560>)
 800f0f0:	fb03 f300 	mul.w	r3, r3, r0
 800f0f4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f0f6:	4971      	ldr	r1, [pc, #452]	; (800f2bc <tcp_slowtmr+0x55c>)
 800f0f8:	fba1 1303 	umull	r1, r3, r1, r3
 800f0fc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d911      	bls.n	800f126 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f102:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f104:	f004 fbe2 	bl	80138cc <tcp_keepalive>
 800f108:	4603      	mov	r3, r0
 800f10a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f10e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f112:	2b00      	cmp	r3, #0
 800f114:	d107      	bne.n	800f126 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f118:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800f11c:	3301      	adds	r3, #1
 800f11e:	b2da      	uxtb	r2, r3
 800f120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f122:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
      tcp_free_ooseq(pcb);
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f128:	7d1b      	ldrb	r3, [r3, #20]
 800f12a:	2b03      	cmp	r3, #3
 800f12c:	d10b      	bne.n	800f146 <tcp_slowtmr+0x3e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f12e:	4b61      	ldr	r3, [pc, #388]	; (800f2b4 <tcp_slowtmr+0x554>)
 800f130:	681a      	ldr	r2, [r3, #0]
 800f132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f134:	6a1b      	ldr	r3, [r3, #32]
 800f136:	1ad3      	subs	r3, r2, r3
 800f138:	2b28      	cmp	r3, #40	; 0x28
 800f13a:	d904      	bls.n	800f146 <tcp_slowtmr+0x3e6>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f13c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f140:	3301      	adds	r3, #1
 800f142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f148:	7d1b      	ldrb	r3, [r3, #20]
 800f14a:	2b09      	cmp	r3, #9
 800f14c:	d10b      	bne.n	800f166 <tcp_slowtmr+0x406>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f14e:	4b59      	ldr	r3, [pc, #356]	; (800f2b4 <tcp_slowtmr+0x554>)
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f154:	6a1b      	ldr	r3, [r3, #32]
 800f156:	1ad3      	subs	r3, r2, r3
 800f158:	2bf0      	cmp	r3, #240	; 0xf0
 800f15a:	d904      	bls.n	800f166 <tcp_slowtmr+0x406>
        ++pcb_remove;
 800f15c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f160:	3301      	adds	r3, #1
 800f162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f166:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d060      	beq.n	800f230 <tcp_slowtmr+0x4d0>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f174:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f176:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f178:	f000 fcb8 	bl	800faec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d010      	beq.n	800f1a4 <tcp_slowtmr+0x444>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f182:	4b50      	ldr	r3, [pc, #320]	; (800f2c4 <tcp_slowtmr+0x564>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f188:	429a      	cmp	r2, r3
 800f18a:	d106      	bne.n	800f19a <tcp_slowtmr+0x43a>
 800f18c:	4b4e      	ldr	r3, [pc, #312]	; (800f2c8 <tcp_slowtmr+0x568>)
 800f18e:	f240 526d 	movw	r2, #1389	; 0x56d
 800f192:	494e      	ldr	r1, [pc, #312]	; (800f2cc <tcp_slowtmr+0x56c>)
 800f194:	484e      	ldr	r0, [pc, #312]	; (800f2d0 <tcp_slowtmr+0x570>)
 800f196:	f006 fa4b 	bl	8015630 <iprintf>
        prev->next = pcb->next;
 800f19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19c:	68da      	ldr	r2, [r3, #12]
 800f19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a0:	60da      	str	r2, [r3, #12]
 800f1a2:	e00f      	b.n	800f1c4 <tcp_slowtmr+0x464>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f1a4:	4b47      	ldr	r3, [pc, #284]	; (800f2c4 <tcp_slowtmr+0x564>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d006      	beq.n	800f1bc <tcp_slowtmr+0x45c>
 800f1ae:	4b46      	ldr	r3, [pc, #280]	; (800f2c8 <tcp_slowtmr+0x568>)
 800f1b0:	f240 5271 	movw	r2, #1393	; 0x571
 800f1b4:	4947      	ldr	r1, [pc, #284]	; (800f2d4 <tcp_slowtmr+0x574>)
 800f1b6:	4846      	ldr	r0, [pc, #280]	; (800f2d0 <tcp_slowtmr+0x570>)
 800f1b8:	f006 fa3a 	bl	8015630 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	4a40      	ldr	r2, [pc, #256]	; (800f2c4 <tcp_slowtmr+0x564>)
 800f1c2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f1c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d013      	beq.n	800f1f4 <tcp_slowtmr+0x494>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f1d4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d8:	3304      	adds	r3, #4
 800f1da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1dc:	8ad2      	ldrh	r2, [r2, #22]
 800f1de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1e0:	8b09      	ldrh	r1, [r1, #24]
 800f1e2:	9102      	str	r1, [sp, #8]
 800f1e4:	9201      	str	r2, [sp, #4]
 800f1e6:	9300      	str	r3, [sp, #0]
 800f1e8:	462b      	mov	r3, r5
 800f1ea:	4622      	mov	r2, r4
 800f1ec:	4601      	mov	r1, r0
 800f1ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1f0:	f004 fab8 	bl	8013764 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f6:	691b      	ldr	r3, [r3, #16]
 800f1f8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fc:	7d1b      	ldrb	r3, [r3, #20]
 800f1fe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f202:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f206:	68db      	ldr	r3, [r3, #12]
 800f208:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f20a:	6838      	ldr	r0, [r7, #0]
 800f20c:	f7ff f858 	bl	800e2c0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f210:	4b31      	ldr	r3, [pc, #196]	; (800f2d8 <tcp_slowtmr+0x578>)
 800f212:	2200      	movs	r2, #0
 800f214:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d004      	beq.n	800f226 <tcp_slowtmr+0x4c6>
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f06f 010c 	mvn.w	r1, #12
 800f222:	68b8      	ldr	r0, [r7, #8]
 800f224:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f226:	4b2c      	ldr	r3, [pc, #176]	; (800f2d8 <tcp_slowtmr+0x578>)
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d037      	beq.n	800f29e <tcp_slowtmr+0x53e>
        goto tcp_slowtmr_start;
 800f22e:	e5a8      	b.n	800ed82 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f232:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f236:	68db      	ldr	r3, [r3, #12]
 800f238:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23c:	7f1b      	ldrb	r3, [r3, #28]
 800f23e:	3301      	adds	r3, #1
 800f240:	b2da      	uxtb	r2, r3
 800f242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f244:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f248:	7f1a      	ldrb	r2, [r3, #28]
 800f24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24c:	7f5b      	ldrb	r3, [r3, #29]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d325      	bcc.n	800f29e <tcp_slowtmr+0x53e>
        prev->polltmr = 0;
 800f252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f254:	2200      	movs	r2, #0
 800f256:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f258:	4b1f      	ldr	r3, [pc, #124]	; (800f2d8 <tcp_slowtmr+0x578>)
 800f25a:	2200      	movs	r2, #0
 800f25c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f264:	2b00      	cmp	r3, #0
 800f266:	d00b      	beq.n	800f280 <tcp_slowtmr+0x520>
 800f268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f26e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f270:	6912      	ldr	r2, [r2, #16]
 800f272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f274:	4610      	mov	r0, r2
 800f276:	4798      	blx	r3
 800f278:	4603      	mov	r3, r0
 800f27a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f27e:	e002      	b.n	800f286 <tcp_slowtmr+0x526>
 800f280:	2300      	movs	r3, #0
 800f282:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f286:	4b14      	ldr	r3, [pc, #80]	; (800f2d8 <tcp_slowtmr+0x578>)
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d000      	beq.n	800f290 <tcp_slowtmr+0x530>
          goto tcp_slowtmr_start;
 800f28e:	e578      	b.n	800ed82 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f290:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f294:	2b00      	cmp	r3, #0
 800f296:	d102      	bne.n	800f29e <tcp_slowtmr+0x53e>
          tcp_output(prev);
 800f298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f29a:	f003 fcaf 	bl	8012bfc <tcp_output>
  while (pcb != NULL) {
 800f29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	f47f ad74 	bne.w	800ed8e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f2aa:	4b0c      	ldr	r3, [pc, #48]	; (800f2dc <tcp_slowtmr+0x57c>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f2b0:	e069      	b.n	800f386 <tcp_slowtmr+0x626>
 800f2b2:	bf00      	nop
 800f2b4:	2000cfcc 	.word	0x2000cfcc
 800f2b8:	000a4cb8 	.word	0x000a4cb8
 800f2bc:	10624dd3 	.word	0x10624dd3
 800f2c0:	000124f8 	.word	0x000124f8
 800f2c4:	2000cfc8 	.word	0x2000cfc8
 800f2c8:	0801acf8 	.word	0x0801acf8
 800f2cc:	0801b18c 	.word	0x0801b18c
 800f2d0:	0801ad98 	.word	0x0801ad98
 800f2d4:	0801b1b8 	.word	0x0801b1b8
 800f2d8:	2000cfc4 	.word	0x2000cfc4
 800f2dc:	2000cfd8 	.word	0x2000cfd8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e2:	7d1b      	ldrb	r3, [r3, #20]
 800f2e4:	2b0a      	cmp	r3, #10
 800f2e6:	d006      	beq.n	800f2f6 <tcp_slowtmr+0x596>
 800f2e8:	4b2b      	ldr	r3, [pc, #172]	; (800f398 <tcp_slowtmr+0x638>)
 800f2ea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f2ee:	492b      	ldr	r1, [pc, #172]	; (800f39c <tcp_slowtmr+0x63c>)
 800f2f0:	482b      	ldr	r0, [pc, #172]	; (800f3a0 <tcp_slowtmr+0x640>)
 800f2f2:	f006 f99d 	bl	8015630 <iprintf>
    pcb_remove = 0;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f2fc:	4b29      	ldr	r3, [pc, #164]	; (800f3a4 <tcp_slowtmr+0x644>)
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f302:	6a1b      	ldr	r3, [r3, #32]
 800f304:	1ad3      	subs	r3, r2, r3
 800f306:	2bf0      	cmp	r3, #240	; 0xf0
 800f308:	d904      	bls.n	800f314 <tcp_slowtmr+0x5b4>
      ++pcb_remove;
 800f30a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f30e:	3301      	adds	r3, #1
 800f310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d02f      	beq.n	800f37c <tcp_slowtmr+0x61c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f31c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f31e:	f000 fbe5 	bl	800faec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f324:	2b00      	cmp	r3, #0
 800f326:	d010      	beq.n	800f34a <tcp_slowtmr+0x5ea>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f328:	4b1f      	ldr	r3, [pc, #124]	; (800f3a8 <tcp_slowtmr+0x648>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f32e:	429a      	cmp	r2, r3
 800f330:	d106      	bne.n	800f340 <tcp_slowtmr+0x5e0>
 800f332:	4b19      	ldr	r3, [pc, #100]	; (800f398 <tcp_slowtmr+0x638>)
 800f334:	f240 52af 	movw	r2, #1455	; 0x5af
 800f338:	491c      	ldr	r1, [pc, #112]	; (800f3ac <tcp_slowtmr+0x64c>)
 800f33a:	4819      	ldr	r0, [pc, #100]	; (800f3a0 <tcp_slowtmr+0x640>)
 800f33c:	f006 f978 	bl	8015630 <iprintf>
        prev->next = pcb->next;
 800f340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f342:	68da      	ldr	r2, [r3, #12]
 800f344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f346:	60da      	str	r2, [r3, #12]
 800f348:	e00f      	b.n	800f36a <tcp_slowtmr+0x60a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f34a:	4b17      	ldr	r3, [pc, #92]	; (800f3a8 <tcp_slowtmr+0x648>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f350:	429a      	cmp	r2, r3
 800f352:	d006      	beq.n	800f362 <tcp_slowtmr+0x602>
 800f354:	4b10      	ldr	r3, [pc, #64]	; (800f398 <tcp_slowtmr+0x638>)
 800f356:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f35a:	4915      	ldr	r1, [pc, #84]	; (800f3b0 <tcp_slowtmr+0x650>)
 800f35c:	4810      	ldr	r0, [pc, #64]	; (800f3a0 <tcp_slowtmr+0x640>)
 800f35e:	f006 f967 	bl	8015630 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f364:	68db      	ldr	r3, [r3, #12]
 800f366:	4a10      	ldr	r2, [pc, #64]	; (800f3a8 <tcp_slowtmr+0x648>)
 800f368:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f370:	68db      	ldr	r3, [r3, #12]
 800f372:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f374:	69f8      	ldr	r0, [r7, #28]
 800f376:	f7fe ffa3 	bl	800e2c0 <tcp_free>
 800f37a:	e004      	b.n	800f386 <tcp_slowtmr+0x626>
    } else {
      prev = pcb;
 800f37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d1a9      	bne.n	800f2e0 <tcp_slowtmr+0x580>
    }
  }
}
 800f38c:	bf00      	nop
 800f38e:	bf00      	nop
 800f390:	3730      	adds	r7, #48	; 0x30
 800f392:	46bd      	mov	sp, r7
 800f394:	bdb0      	pop	{r4, r5, r7, pc}
 800f396:	bf00      	nop
 800f398:	0801acf8 	.word	0x0801acf8
 800f39c:	0801b1e4 	.word	0x0801b1e4
 800f3a0:	0801ad98 	.word	0x0801ad98
 800f3a4:	2000cfcc 	.word	0x2000cfcc
 800f3a8:	2000cfd8 	.word	0x2000cfd8
 800f3ac:	0801b214 	.word	0x0801b214
 800f3b0:	0801b23c 	.word	0x0801b23c

0800f3b4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f3ba:	4b2d      	ldr	r3, [pc, #180]	; (800f470 <tcp_fasttmr+0xbc>)
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	b2da      	uxtb	r2, r3
 800f3c2:	4b2b      	ldr	r3, [pc, #172]	; (800f470 <tcp_fasttmr+0xbc>)
 800f3c4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f3c6:	4b2b      	ldr	r3, [pc, #172]	; (800f474 <tcp_fasttmr+0xc0>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f3cc:	e048      	b.n	800f460 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	7f9a      	ldrb	r2, [r3, #30]
 800f3d2:	4b27      	ldr	r3, [pc, #156]	; (800f470 <tcp_fasttmr+0xbc>)
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d03f      	beq.n	800f45a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f3da:	4b25      	ldr	r3, [pc, #148]	; (800f470 <tcp_fasttmr+0xbc>)
 800f3dc:	781a      	ldrb	r2, [r3, #0]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	8b5b      	ldrh	r3, [r3, #26]
 800f3e6:	f003 0301 	and.w	r3, r3, #1
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d010      	beq.n	800f410 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	8b5b      	ldrh	r3, [r3, #26]
 800f3f2:	f043 0302 	orr.w	r3, r3, #2
 800f3f6:	b29a      	uxth	r2, r3
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f003 fbfd 	bl	8012bfc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	8b5b      	ldrh	r3, [r3, #26]
 800f406:	f023 0303 	bic.w	r3, r3, #3
 800f40a:	b29a      	uxth	r2, r3
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	8b5b      	ldrh	r3, [r3, #26]
 800f414:	f003 0308 	and.w	r3, r3, #8
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d009      	beq.n	800f430 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	8b5b      	ldrh	r3, [r3, #26]
 800f420:	f023 0308 	bic.w	r3, r3, #8
 800f424:	b29a      	uxth	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f7ff f8dc 	bl	800e5e8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	68db      	ldr	r3, [r3, #12]
 800f434:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00a      	beq.n	800f454 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f43e:	4b0e      	ldr	r3, [pc, #56]	; (800f478 <tcp_fasttmr+0xc4>)
 800f440:	2200      	movs	r2, #0
 800f442:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 f819 	bl	800f47c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f44a:	4b0b      	ldr	r3, [pc, #44]	; (800f478 <tcp_fasttmr+0xc4>)
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d000      	beq.n	800f454 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f452:	e7b8      	b.n	800f3c6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	607b      	str	r3, [r7, #4]
 800f458:	e002      	b.n	800f460 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	68db      	ldr	r3, [r3, #12]
 800f45e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d1b3      	bne.n	800f3ce <tcp_fasttmr+0x1a>
    }
  }
}
 800f466:	bf00      	nop
 800f468:	bf00      	nop
 800f46a:	3708      	adds	r7, #8
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	200068ce 	.word	0x200068ce
 800f474:	2000cfc8 	.word	0x2000cfc8
 800f478:	2000cfc4 	.word	0x2000cfc4

0800f47c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f47c:	b590      	push	{r4, r7, lr}
 800f47e:	b085      	sub	sp, #20
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d109      	bne.n	800f49e <tcp_process_refused_data+0x22>
 800f48a:	4b38      	ldr	r3, [pc, #224]	; (800f56c <tcp_process_refused_data+0xf0>)
 800f48c:	f240 6209 	movw	r2, #1545	; 0x609
 800f490:	4937      	ldr	r1, [pc, #220]	; (800f570 <tcp_process_refused_data+0xf4>)
 800f492:	4838      	ldr	r0, [pc, #224]	; (800f574 <tcp_process_refused_data+0xf8>)
 800f494:	f006 f8cc 	bl	8015630 <iprintf>
 800f498:	f06f 030f 	mvn.w	r3, #15
 800f49c:	e061      	b.n	800f562 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4a2:	7b5b      	ldrb	r3, [r3, #13]
 800f4a4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4aa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00b      	beq.n	800f4d4 <tcp_process_refused_data+0x58>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6918      	ldr	r0, [r3, #16]
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	68ba      	ldr	r2, [r7, #8]
 800f4ca:	6879      	ldr	r1, [r7, #4]
 800f4cc:	47a0      	blx	r4
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	73fb      	strb	r3, [r7, #15]
 800f4d2:	e007      	b.n	800f4e4 <tcp_process_refused_data+0x68>
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	68ba      	ldr	r2, [r7, #8]
 800f4d8:	6879      	ldr	r1, [r7, #4]
 800f4da:	2000      	movs	r0, #0
 800f4dc:	f000 f898 	bl	800f610 <tcp_recv_null>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f4e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d12b      	bne.n	800f544 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f4ec:	7bbb      	ldrb	r3, [r7, #14]
 800f4ee:	f003 0320 	and.w	r3, r3, #32
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d034      	beq.n	800f560 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4fa:	f640 3268 	movw	r2, #2920	; 0xb68
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d005      	beq.n	800f50e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f506:	3301      	adds	r3, #1
 800f508:	b29a      	uxth	r2, r3
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f514:	2b00      	cmp	r3, #0
 800f516:	d00b      	beq.n	800f530 <tcp_process_refused_data+0xb4>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6918      	ldr	r0, [r3, #16]
 800f522:	2300      	movs	r3, #0
 800f524:	2200      	movs	r2, #0
 800f526:	6879      	ldr	r1, [r7, #4]
 800f528:	47a0      	blx	r4
 800f52a:	4603      	mov	r3, r0
 800f52c:	73fb      	strb	r3, [r7, #15]
 800f52e:	e001      	b.n	800f534 <tcp_process_refused_data+0xb8>
 800f530:	2300      	movs	r3, #0
 800f532:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f538:	f113 0f0d 	cmn.w	r3, #13
 800f53c:	d110      	bne.n	800f560 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800f53e:	f06f 030c 	mvn.w	r3, #12
 800f542:	e00e      	b.n	800f562 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800f544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f548:	f113 0f0d 	cmn.w	r3, #13
 800f54c:	d102      	bne.n	800f554 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f54e:	f06f 030c 	mvn.w	r3, #12
 800f552:	e006      	b.n	800f562 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	68ba      	ldr	r2, [r7, #8]
 800f558:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800f55a:	f06f 0304 	mvn.w	r3, #4
 800f55e:	e000      	b.n	800f562 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800f560:	2300      	movs	r3, #0
}
 800f562:	4618      	mov	r0, r3
 800f564:	3714      	adds	r7, #20
 800f566:	46bd      	mov	sp, r7
 800f568:	bd90      	pop	{r4, r7, pc}
 800f56a:	bf00      	nop
 800f56c:	0801acf8 	.word	0x0801acf8
 800f570:	0801b264 	.word	0x0801b264
 800f574:	0801ad98 	.word	0x0801ad98

0800f578 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b084      	sub	sp, #16
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f580:	e007      	b.n	800f592 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f000 f80a 	bl	800f5a2 <tcp_seg_free>
    seg = next;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d1f4      	bne.n	800f582 <tcp_segs_free+0xa>
  }
}
 800f598:	bf00      	nop
 800f59a:	bf00      	nop
 800f59c:	3710      	adds	r7, #16
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f5a2:	b580      	push	{r7, lr}
 800f5a4:	b082      	sub	sp, #8
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d00c      	beq.n	800f5ca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d004      	beq.n	800f5c2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7fe fbc3 	bl	800dd48 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f5c2:	6879      	ldr	r1, [r7, #4]
 800f5c4:	2003      	movs	r0, #3
 800f5c6:	f7fd fde3 	bl	800d190 <memp_free>
  }
}
 800f5ca:	bf00      	nop
 800f5cc:	3708      	adds	r7, #8
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
	...

0800f5d4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	460b      	mov	r3, r1
 800f5de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d107      	bne.n	800f5f6 <tcp_setprio+0x22>
 800f5e6:	4b07      	ldr	r3, [pc, #28]	; (800f604 <tcp_setprio+0x30>)
 800f5e8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800f5ec:	4906      	ldr	r1, [pc, #24]	; (800f608 <tcp_setprio+0x34>)
 800f5ee:	4807      	ldr	r0, [pc, #28]	; (800f60c <tcp_setprio+0x38>)
 800f5f0:	f006 f81e 	bl	8015630 <iprintf>
 800f5f4:	e002      	b.n	800f5fc <tcp_setprio+0x28>

  pcb->prio = prio;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	78fa      	ldrb	r2, [r7, #3]
 800f5fa:	755a      	strb	r2, [r3, #21]
}
 800f5fc:	3708      	adds	r7, #8
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	0801acf8 	.word	0x0801acf8
 800f608:	0801b28c 	.word	0x0801b28c
 800f60c:	0801ad98 	.word	0x0801ad98

0800f610 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b084      	sub	sp, #16
 800f614:	af00      	add	r7, sp, #0
 800f616:	60f8      	str	r0, [r7, #12]
 800f618:	60b9      	str	r1, [r7, #8]
 800f61a:	607a      	str	r2, [r7, #4]
 800f61c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d109      	bne.n	800f638 <tcp_recv_null+0x28>
 800f624:	4b12      	ldr	r3, [pc, #72]	; (800f670 <tcp_recv_null+0x60>)
 800f626:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f62a:	4912      	ldr	r1, [pc, #72]	; (800f674 <tcp_recv_null+0x64>)
 800f62c:	4812      	ldr	r0, [pc, #72]	; (800f678 <tcp_recv_null+0x68>)
 800f62e:	f005 ffff 	bl	8015630 <iprintf>
 800f632:	f06f 030f 	mvn.w	r3, #15
 800f636:	e016      	b.n	800f666 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d009      	beq.n	800f652 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	891b      	ldrh	r3, [r3, #8]
 800f642:	4619      	mov	r1, r3
 800f644:	68b8      	ldr	r0, [r7, #8]
 800f646:	f7ff faf3 	bl	800ec30 <tcp_recved>
    pbuf_free(p);
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f7fe fb7c 	bl	800dd48 <pbuf_free>
 800f650:	e008      	b.n	800f664 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f652:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d104      	bne.n	800f664 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f65a:	68b8      	ldr	r0, [r7, #8]
 800f65c:	f7ff f82e 	bl	800e6bc <tcp_close>
 800f660:	4603      	mov	r3, r0
 800f662:	e000      	b.n	800f666 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f664:	2300      	movs	r3, #0
}
 800f666:	4618      	mov	r0, r3
 800f668:	3710      	adds	r7, #16
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	0801acf8 	.word	0x0801acf8
 800f674:	0801b2a8 	.word	0x0801b2a8
 800f678:	0801ad98 	.word	0x0801ad98

0800f67c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b086      	sub	sp, #24
 800f680:	af00      	add	r7, sp, #0
 800f682:	4603      	mov	r3, r0
 800f684:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	db01      	blt.n	800f692 <tcp_kill_prio+0x16>
 800f68e:	79fb      	ldrb	r3, [r7, #7]
 800f690:	e000      	b.n	800f694 <tcp_kill_prio+0x18>
 800f692:	237f      	movs	r3, #127	; 0x7f
 800f694:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f696:	7afb      	ldrb	r3, [r7, #11]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d034      	beq.n	800f706 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f69c:	7afb      	ldrb	r3, [r7, #11]
 800f69e:	3b01      	subs	r3, #1
 800f6a0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6aa:	4b19      	ldr	r3, [pc, #100]	; (800f710 <tcp_kill_prio+0x94>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	617b      	str	r3, [r7, #20]
 800f6b0:	e01f      	b.n	800f6f2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	7d5b      	ldrb	r3, [r3, #21]
 800f6b6:	7afa      	ldrb	r2, [r7, #11]
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d80c      	bhi.n	800f6d6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f6c0:	7afa      	ldrb	r2, [r7, #11]
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d112      	bne.n	800f6ec <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f6c6:	4b13      	ldr	r3, [pc, #76]	; (800f714 <tcp_kill_prio+0x98>)
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	6a1b      	ldr	r3, [r3, #32]
 800f6ce:	1ad3      	subs	r3, r2, r3
 800f6d0:	68fa      	ldr	r2, [r7, #12]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d80a      	bhi.n	800f6ec <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f6d6:	4b0f      	ldr	r3, [pc, #60]	; (800f714 <tcp_kill_prio+0x98>)
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	6a1b      	ldr	r3, [r3, #32]
 800f6de:	1ad3      	subs	r3, r2, r3
 800f6e0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	7d5b      	ldrb	r3, [r3, #21]
 800f6ea:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	68db      	ldr	r3, [r3, #12]
 800f6f0:	617b      	str	r3, [r7, #20]
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d1dc      	bne.n	800f6b2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d004      	beq.n	800f708 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f6fe:	6938      	ldr	r0, [r7, #16]
 800f700:	f7ff f8bc 	bl	800e87c <tcp_abort>
 800f704:	e000      	b.n	800f708 <tcp_kill_prio+0x8c>
    return;
 800f706:	bf00      	nop
  }
}
 800f708:	3718      	adds	r7, #24
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}
 800f70e:	bf00      	nop
 800f710:	2000cfc8 	.word	0x2000cfc8
 800f714:	2000cfcc 	.word	0x2000cfcc

0800f718 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b086      	sub	sp, #24
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	4603      	mov	r3, r0
 800f720:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f722:	79fb      	ldrb	r3, [r7, #7]
 800f724:	2b08      	cmp	r3, #8
 800f726:	d009      	beq.n	800f73c <tcp_kill_state+0x24>
 800f728:	79fb      	ldrb	r3, [r7, #7]
 800f72a:	2b09      	cmp	r3, #9
 800f72c:	d006      	beq.n	800f73c <tcp_kill_state+0x24>
 800f72e:	4b1a      	ldr	r3, [pc, #104]	; (800f798 <tcp_kill_state+0x80>)
 800f730:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f734:	4919      	ldr	r1, [pc, #100]	; (800f79c <tcp_kill_state+0x84>)
 800f736:	481a      	ldr	r0, [pc, #104]	; (800f7a0 <tcp_kill_state+0x88>)
 800f738:	f005 ff7a 	bl	8015630 <iprintf>

  inactivity = 0;
 800f73c:	2300      	movs	r3, #0
 800f73e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f740:	2300      	movs	r3, #0
 800f742:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f744:	4b17      	ldr	r3, [pc, #92]	; (800f7a4 <tcp_kill_state+0x8c>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	617b      	str	r3, [r7, #20]
 800f74a:	e017      	b.n	800f77c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	7d1b      	ldrb	r3, [r3, #20]
 800f750:	79fa      	ldrb	r2, [r7, #7]
 800f752:	429a      	cmp	r2, r3
 800f754:	d10f      	bne.n	800f776 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f756:	4b14      	ldr	r3, [pc, #80]	; (800f7a8 <tcp_kill_state+0x90>)
 800f758:	681a      	ldr	r2, [r3, #0]
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	6a1b      	ldr	r3, [r3, #32]
 800f75e:	1ad3      	subs	r3, r2, r3
 800f760:	68fa      	ldr	r2, [r7, #12]
 800f762:	429a      	cmp	r2, r3
 800f764:	d807      	bhi.n	800f776 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f766:	4b10      	ldr	r3, [pc, #64]	; (800f7a8 <tcp_kill_state+0x90>)
 800f768:	681a      	ldr	r2, [r3, #0]
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	6a1b      	ldr	r3, [r3, #32]
 800f76e:	1ad3      	subs	r3, r2, r3
 800f770:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	68db      	ldr	r3, [r3, #12]
 800f77a:	617b      	str	r3, [r7, #20]
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d1e4      	bne.n	800f74c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d003      	beq.n	800f790 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f788:	2100      	movs	r1, #0
 800f78a:	6938      	ldr	r0, [r7, #16]
 800f78c:	f7fe ffc2 	bl	800e714 <tcp_abandon>
  }
}
 800f790:	bf00      	nop
 800f792:	3718      	adds	r7, #24
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}
 800f798:	0801acf8 	.word	0x0801acf8
 800f79c:	0801b2c4 	.word	0x0801b2c4
 800f7a0:	0801ad98 	.word	0x0801ad98
 800f7a4:	2000cfc8 	.word	0x2000cfc8
 800f7a8:	2000cfcc 	.word	0x2000cfcc

0800f7ac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7ba:	4b12      	ldr	r3, [pc, #72]	; (800f804 <tcp_kill_timewait+0x58>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	60fb      	str	r3, [r7, #12]
 800f7c0:	e012      	b.n	800f7e8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f7c2:	4b11      	ldr	r3, [pc, #68]	; (800f808 <tcp_kill_timewait+0x5c>)
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	6a1b      	ldr	r3, [r3, #32]
 800f7ca:	1ad3      	subs	r3, r2, r3
 800f7cc:	687a      	ldr	r2, [r7, #4]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d807      	bhi.n	800f7e2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f7d2:	4b0d      	ldr	r3, [pc, #52]	; (800f808 <tcp_kill_timewait+0x5c>)
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	6a1b      	ldr	r3, [r3, #32]
 800f7da:	1ad3      	subs	r3, r2, r3
 800f7dc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	60fb      	str	r3, [r7, #12]
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d1e9      	bne.n	800f7c2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d002      	beq.n	800f7fa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f7f4:	68b8      	ldr	r0, [r7, #8]
 800f7f6:	f7ff f841 	bl	800e87c <tcp_abort>
  }
}
 800f7fa:	bf00      	nop
 800f7fc:	3710      	adds	r7, #16
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	2000cfd8 	.word	0x2000cfd8
 800f808:	2000cfcc 	.word	0x2000cfcc

0800f80c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f812:	4b10      	ldr	r3, [pc, #64]	; (800f854 <tcp_handle_closepend+0x48>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f818:	e014      	b.n	800f844 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	8b5b      	ldrh	r3, [r3, #26]
 800f824:	f003 0308 	and.w	r3, r3, #8
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d009      	beq.n	800f840 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	8b5b      	ldrh	r3, [r3, #26]
 800f830:	f023 0308 	bic.w	r3, r3, #8
 800f834:	b29a      	uxth	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f7fe fed4 	bl	800e5e8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d1e7      	bne.n	800f81a <tcp_handle_closepend+0xe>
  }
}
 800f84a:	bf00      	nop
 800f84c:	bf00      	nop
 800f84e:	3708      	adds	r7, #8
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}
 800f854:	2000cfc8 	.word	0x2000cfc8

0800f858 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b084      	sub	sp, #16
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	4603      	mov	r3, r0
 800f860:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f862:	2001      	movs	r0, #1
 800f864:	f7fd fc42 	bl	800d0ec <memp_malloc>
 800f868:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d126      	bne.n	800f8be <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f870:	f7ff ffcc 	bl	800f80c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f874:	f7ff ff9a 	bl	800f7ac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f878:	2001      	movs	r0, #1
 800f87a:	f7fd fc37 	bl	800d0ec <memp_malloc>
 800f87e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d11b      	bne.n	800f8be <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f886:	2009      	movs	r0, #9
 800f888:	f7ff ff46 	bl	800f718 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f88c:	2001      	movs	r0, #1
 800f88e:	f7fd fc2d 	bl	800d0ec <memp_malloc>
 800f892:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d111      	bne.n	800f8be <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f89a:	2008      	movs	r0, #8
 800f89c:	f7ff ff3c 	bl	800f718 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f8a0:	2001      	movs	r0, #1
 800f8a2:	f7fd fc23 	bl	800d0ec <memp_malloc>
 800f8a6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d107      	bne.n	800f8be <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f8ae:	79fb      	ldrb	r3, [r7, #7]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7ff fee3 	bl	800f67c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f8b6:	2001      	movs	r0, #1
 800f8b8:	f7fd fc18 	bl	800d0ec <memp_malloc>
 800f8bc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d03f      	beq.n	800f944 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f8c4:	2298      	movs	r2, #152	; 0x98
 800f8c6:	2100      	movs	r1, #0
 800f8c8:	68f8      	ldr	r0, [r7, #12]
 800f8ca:	f005 f995 	bl	8014bf8 <memset>
    pcb->prio = prio;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	79fa      	ldrb	r2, [r7, #7]
 800f8d2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800f8da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f640 3268 	movw	r2, #2920	; 0xb68
 800f8e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	22ff      	movs	r2, #255	; 0xff
 800f8f2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f8fa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	2206      	movs	r2, #6
 800f900:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2206      	movs	r2, #6
 800f908:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f910:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2201      	movs	r2, #1
 800f916:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f91a:	4b0d      	ldr	r3, [pc, #52]	; (800f950 <tcp_alloc+0xf8>)
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f922:	4b0c      	ldr	r3, [pc, #48]	; (800f954 <tcp_alloc+0xfc>)
 800f924:	781a      	ldrb	r2, [r3, #0]
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800f930:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	4a08      	ldr	r2, [pc, #32]	; (800f958 <tcp_alloc+0x100>)
 800f938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	4a07      	ldr	r2, [pc, #28]	; (800f95c <tcp_alloc+0x104>)
 800f940:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f944:	68fb      	ldr	r3, [r7, #12]
}
 800f946:	4618      	mov	r0, r3
 800f948:	3710      	adds	r7, #16
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}
 800f94e:	bf00      	nop
 800f950:	2000cfcc 	.word	0x2000cfcc
 800f954:	200068ce 	.word	0x200068ce
 800f958:	0800f611 	.word	0x0800f611
 800f95c:	006ddd00 	.word	0x006ddd00

0800f960 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800f964:	2040      	movs	r0, #64	; 0x40
 800f966:	f7ff ff77 	bl	800f858 <tcp_alloc>
 800f96a:	4603      	mov	r3, r0
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f970:	b480      	push	{r7}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d002      	beq.n	800f986 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	683a      	ldr	r2, [r7, #0]
 800f984:	611a      	str	r2, [r3, #16]
  }
}
 800f986:	bf00      	nop
 800f988:	370c      	adds	r7, #12
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr
	...

0800f994 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d00e      	beq.n	800f9c2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	7d1b      	ldrb	r3, [r3, #20]
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d106      	bne.n	800f9ba <tcp_recv+0x26>
 800f9ac:	4b07      	ldr	r3, [pc, #28]	; (800f9cc <tcp_recv+0x38>)
 800f9ae:	f240 72df 	movw	r2, #2015	; 0x7df
 800f9b2:	4907      	ldr	r1, [pc, #28]	; (800f9d0 <tcp_recv+0x3c>)
 800f9b4:	4807      	ldr	r0, [pc, #28]	; (800f9d4 <tcp_recv+0x40>)
 800f9b6:	f005 fe3b 	bl	8015630 <iprintf>
    pcb->recv = recv;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	683a      	ldr	r2, [r7, #0]
 800f9be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f9c2:	bf00      	nop
 800f9c4:	3708      	adds	r7, #8
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	0801acf8 	.word	0x0801acf8
 800f9d0:	0801b2d4 	.word	0x0801b2d4
 800f9d4:	0801ad98 	.word	0x0801ad98

0800f9d8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b082      	sub	sp, #8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d00d      	beq.n	800fa04 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	7d1b      	ldrb	r3, [r3, #20]
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d106      	bne.n	800f9fe <tcp_sent+0x26>
 800f9f0:	4b06      	ldr	r3, [pc, #24]	; (800fa0c <tcp_sent+0x34>)
 800f9f2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f9f6:	4906      	ldr	r1, [pc, #24]	; (800fa10 <tcp_sent+0x38>)
 800f9f8:	4806      	ldr	r0, [pc, #24]	; (800fa14 <tcp_sent+0x3c>)
 800f9fa:	f005 fe19 	bl	8015630 <iprintf>
    pcb->sent = sent;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	683a      	ldr	r2, [r7, #0]
 800fa02:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800fa04:	bf00      	nop
 800fa06:	3708      	adds	r7, #8
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	0801acf8 	.word	0x0801acf8
 800fa10:	0801b2fc 	.word	0x0801b2fc
 800fa14:	0801ad98 	.word	0x0801ad98

0800fa18 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d00e      	beq.n	800fa46 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	7d1b      	ldrb	r3, [r3, #20]
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	d106      	bne.n	800fa3e <tcp_err+0x26>
 800fa30:	4b07      	ldr	r3, [pc, #28]	; (800fa50 <tcp_err+0x38>)
 800fa32:	f640 020d 	movw	r2, #2061	; 0x80d
 800fa36:	4907      	ldr	r1, [pc, #28]	; (800fa54 <tcp_err+0x3c>)
 800fa38:	4807      	ldr	r0, [pc, #28]	; (800fa58 <tcp_err+0x40>)
 800fa3a:	f005 fdf9 	bl	8015630 <iprintf>
    pcb->errf = err;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	683a      	ldr	r2, [r7, #0]
 800fa42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800fa46:	bf00      	nop
 800fa48:	3708      	adds	r7, #8
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	0801acf8 	.word	0x0801acf8
 800fa54:	0801b324 	.word	0x0801b324
 800fa58:	0801ad98 	.word	0x0801ad98

0800fa5c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b085      	sub	sp, #20
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d008      	beq.n	800fa7e <tcp_accept+0x22>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	7d1b      	ldrb	r3, [r3, #20]
 800fa70:	2b01      	cmp	r3, #1
 800fa72:	d104      	bne.n	800fa7e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	683a      	ldr	r2, [r7, #0]
 800fa7c:	619a      	str	r2, [r3, #24]
  }
}
 800fa7e:	bf00      	nop
 800fa80:	3714      	adds	r7, #20
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr
	...

0800fa8c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b084      	sub	sp, #16
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	60b9      	str	r1, [r7, #8]
 800fa96:	4613      	mov	r3, r2
 800fa98:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d107      	bne.n	800fab0 <tcp_poll+0x24>
 800faa0:	4b0e      	ldr	r3, [pc, #56]	; (800fadc <tcp_poll+0x50>)
 800faa2:	f640 023d 	movw	r2, #2109	; 0x83d
 800faa6:	490e      	ldr	r1, [pc, #56]	; (800fae0 <tcp_poll+0x54>)
 800faa8:	480e      	ldr	r0, [pc, #56]	; (800fae4 <tcp_poll+0x58>)
 800faaa:	f005 fdc1 	bl	8015630 <iprintf>
 800faae:	e011      	b.n	800fad4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	7d1b      	ldrb	r3, [r3, #20]
 800fab4:	2b01      	cmp	r3, #1
 800fab6:	d106      	bne.n	800fac6 <tcp_poll+0x3a>
 800fab8:	4b08      	ldr	r3, [pc, #32]	; (800fadc <tcp_poll+0x50>)
 800faba:	f640 023e 	movw	r2, #2110	; 0x83e
 800fabe:	490a      	ldr	r1, [pc, #40]	; (800fae8 <tcp_poll+0x5c>)
 800fac0:	4808      	ldr	r0, [pc, #32]	; (800fae4 <tcp_poll+0x58>)
 800fac2:	f005 fdb5 	bl	8015630 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	68ba      	ldr	r2, [r7, #8]
 800faca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	79fa      	ldrb	r2, [r7, #7]
 800fad2:	775a      	strb	r2, [r3, #29]
}
 800fad4:	3710      	adds	r7, #16
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	0801acf8 	.word	0x0801acf8
 800fae0:	0801b34c 	.word	0x0801b34c
 800fae4:	0801ad98 	.word	0x0801ad98
 800fae8:	0801b364 	.word	0x0801b364

0800faec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d107      	bne.n	800fb0a <tcp_pcb_purge+0x1e>
 800fafa:	4b1e      	ldr	r3, [pc, #120]	; (800fb74 <tcp_pcb_purge+0x88>)
 800fafc:	f640 0251 	movw	r2, #2129	; 0x851
 800fb00:	491d      	ldr	r1, [pc, #116]	; (800fb78 <tcp_pcb_purge+0x8c>)
 800fb02:	481e      	ldr	r0, [pc, #120]	; (800fb7c <tcp_pcb_purge+0x90>)
 800fb04:	f005 fd94 	bl	8015630 <iprintf>
 800fb08:	e030      	b.n	800fb6c <tcp_pcb_purge+0x80>

  if (pcb->state != CLOSED &&
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	7d1b      	ldrb	r3, [r3, #20]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d02c      	beq.n	800fb6c <tcp_pcb_purge+0x80>
      pcb->state != TIME_WAIT &&
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fb16:	2b0a      	cmp	r3, #10
 800fb18:	d028      	beq.n	800fb6c <tcp_pcb_purge+0x80>
      pcb->state != LISTEN) {
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fb1e:	2b01      	cmp	r3, #1
 800fb20:	d024      	beq.n	800fb6c <tcp_pcb_purge+0x80>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d007      	beq.n	800fb3a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7fe f90a 	bl	800dd48 <pbuf_free>
      pcb->refused_data = NULL;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2200      	movs	r2, #0
 800fb38:	675a      	str	r2, [r3, #116]	; 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb40:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb46:	4618      	mov	r0, r3
 800fb48:	f7ff fd16 	bl	800f578 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7ff fd11 	bl	800f578 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	66da      	str	r2, [r3, #108]	; 0x6c
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fb6c:	3708      	adds	r7, #8
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}
 800fb72:	bf00      	nop
 800fb74:	0801acf8 	.word	0x0801acf8
 800fb78:	0801b384 	.word	0x0801b384
 800fb7c:	0801ad98 	.word	0x0801ad98

0800fb80 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b084      	sub	sp, #16
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d106      	bne.n	800fb9e <tcp_pcb_remove+0x1e>
 800fb90:	4b38      	ldr	r3, [pc, #224]	; (800fc74 <tcp_pcb_remove+0xf4>)
 800fb92:	f640 0283 	movw	r2, #2179	; 0x883
 800fb96:	4938      	ldr	r1, [pc, #224]	; (800fc78 <tcp_pcb_remove+0xf8>)
 800fb98:	4838      	ldr	r0, [pc, #224]	; (800fc7c <tcp_pcb_remove+0xfc>)
 800fb9a:	f005 fd49 	bl	8015630 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d106      	bne.n	800fbb2 <tcp_pcb_remove+0x32>
 800fba4:	4b33      	ldr	r3, [pc, #204]	; (800fc74 <tcp_pcb_remove+0xf4>)
 800fba6:	f640 0284 	movw	r2, #2180	; 0x884
 800fbaa:	4935      	ldr	r1, [pc, #212]	; (800fc80 <tcp_pcb_remove+0x100>)
 800fbac:	4833      	ldr	r0, [pc, #204]	; (800fc7c <tcp_pcb_remove+0xfc>)
 800fbae:	f005 fd3f 	bl	8015630 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	683a      	ldr	r2, [r7, #0]
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d105      	bne.n	800fbc8 <tcp_pcb_remove+0x48>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	68da      	ldr	r2, [r3, #12]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	601a      	str	r2, [r3, #0]
 800fbc6:	e013      	b.n	800fbf0 <tcp_pcb_remove+0x70>
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	60fb      	str	r3, [r7, #12]
 800fbce:	e00c      	b.n	800fbea <tcp_pcb_remove+0x6a>
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	68db      	ldr	r3, [r3, #12]
 800fbd4:	683a      	ldr	r2, [r7, #0]
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d104      	bne.n	800fbe4 <tcp_pcb_remove+0x64>
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	68da      	ldr	r2, [r3, #12]
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	60da      	str	r2, [r3, #12]
 800fbe2:	e005      	b.n	800fbf0 <tcp_pcb_remove+0x70>
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	60fb      	str	r3, [r7, #12]
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d1ef      	bne.n	800fbd0 <tcp_pcb_remove+0x50>
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fbf6:	6838      	ldr	r0, [r7, #0]
 800fbf8:	f7ff ff78 	bl	800faec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	7d1b      	ldrb	r3, [r3, #20]
 800fc00:	2b0a      	cmp	r3, #10
 800fc02:	d013      	beq.n	800fc2c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fc08:	2b01      	cmp	r3, #1
 800fc0a:	d00f      	beq.n	800fc2c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	8b5b      	ldrh	r3, [r3, #26]
 800fc10:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d009      	beq.n	800fc2c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	8b5b      	ldrh	r3, [r3, #26]
 800fc1c:	f043 0302 	orr.w	r3, r3, #2
 800fc20:	b29a      	uxth	r2, r3
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fc26:	6838      	ldr	r0, [r7, #0]
 800fc28:	f002 ffe8 	bl	8012bfc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	7d1b      	ldrb	r3, [r3, #20]
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	d015      	beq.n	800fc60 <tcp_pcb_remove+0xe0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d006      	beq.n	800fc4a <tcp_pcb_remove+0xca>
 800fc3c:	4b0d      	ldr	r3, [pc, #52]	; (800fc74 <tcp_pcb_remove+0xf4>)
 800fc3e:	f640 0293 	movw	r2, #2195	; 0x893
 800fc42:	4910      	ldr	r1, [pc, #64]	; (800fc84 <tcp_pcb_remove+0x104>)
 800fc44:	480d      	ldr	r0, [pc, #52]	; (800fc7c <tcp_pcb_remove+0xfc>)
 800fc46:	f005 fcf3 	bl	8015630 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d006      	beq.n	800fc60 <tcp_pcb_remove+0xe0>
 800fc52:	4b08      	ldr	r3, [pc, #32]	; (800fc74 <tcp_pcb_remove+0xf4>)
 800fc54:	f640 0294 	movw	r2, #2196	; 0x894
 800fc58:	490b      	ldr	r1, [pc, #44]	; (800fc88 <tcp_pcb_remove+0x108>)
 800fc5a:	4808      	ldr	r0, [pc, #32]	; (800fc7c <tcp_pcb_remove+0xfc>)
 800fc5c:	f005 fce8 	bl	8015630 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	2200      	movs	r2, #0
 800fc64:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fc6c:	bf00      	nop
 800fc6e:	3710      	adds	r7, #16
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	0801acf8 	.word	0x0801acf8
 800fc78:	0801b3a0 	.word	0x0801b3a0
 800fc7c:	0801ad98 	.word	0x0801ad98
 800fc80:	0801b3bc 	.word	0x0801b3bc
 800fc84:	0801b3dc 	.word	0x0801b3dc
 800fc88:	0801b3f4 	.word	0x0801b3f4

0800fc8c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b082      	sub	sp, #8
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d106      	bne.n	800fca8 <tcp_next_iss+0x1c>
 800fc9a:	4b0a      	ldr	r3, [pc, #40]	; (800fcc4 <tcp_next_iss+0x38>)
 800fc9c:	f640 02af 	movw	r2, #2223	; 0x8af
 800fca0:	4909      	ldr	r1, [pc, #36]	; (800fcc8 <tcp_next_iss+0x3c>)
 800fca2:	480a      	ldr	r0, [pc, #40]	; (800fccc <tcp_next_iss+0x40>)
 800fca4:	f005 fcc4 	bl	8015630 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fca8:	4b09      	ldr	r3, [pc, #36]	; (800fcd0 <tcp_next_iss+0x44>)
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	4b09      	ldr	r3, [pc, #36]	; (800fcd4 <tcp_next_iss+0x48>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	4a07      	ldr	r2, [pc, #28]	; (800fcd0 <tcp_next_iss+0x44>)
 800fcb4:	6013      	str	r3, [r2, #0]
  return iss;
 800fcb6:	4b06      	ldr	r3, [pc, #24]	; (800fcd0 <tcp_next_iss+0x44>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3708      	adds	r7, #8
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	0801acf8 	.word	0x0801acf8
 800fcc8:	0801b410 	.word	0x0801b410
 800fccc:	0801ad98 	.word	0x0801ad98
 800fcd0:	20000034 	.word	0x20000034
 800fcd4:	2000cfcc 	.word	0x2000cfcc

0800fcd8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b086      	sub	sp, #24
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	4603      	mov	r3, r0
 800fce0:	60b9      	str	r1, [r7, #8]
 800fce2:	607a      	str	r2, [r7, #4]
 800fce4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d106      	bne.n	800fcfa <tcp_eff_send_mss_netif+0x22>
 800fcec:	4b14      	ldr	r3, [pc, #80]	; (800fd40 <tcp_eff_send_mss_netif+0x68>)
 800fcee:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fcf2:	4914      	ldr	r1, [pc, #80]	; (800fd44 <tcp_eff_send_mss_netif+0x6c>)
 800fcf4:	4814      	ldr	r0, [pc, #80]	; (800fd48 <tcp_eff_send_mss_netif+0x70>)
 800fcf6:	f005 fc9b 	bl	8015630 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d101      	bne.n	800fd04 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fd00:	89fb      	ldrh	r3, [r7, #14]
 800fd02:	e019      	b.n	800fd38 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd08:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fd0a:	8afb      	ldrh	r3, [r7, #22]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d012      	beq.n	800fd36 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fd10:	2328      	movs	r3, #40	; 0x28
 800fd12:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fd14:	8afa      	ldrh	r2, [r7, #22]
 800fd16:	8abb      	ldrh	r3, [r7, #20]
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d904      	bls.n	800fd26 <tcp_eff_send_mss_netif+0x4e>
 800fd1c:	8afa      	ldrh	r2, [r7, #22]
 800fd1e:	8abb      	ldrh	r3, [r7, #20]
 800fd20:	1ad3      	subs	r3, r2, r3
 800fd22:	b29b      	uxth	r3, r3
 800fd24:	e000      	b.n	800fd28 <tcp_eff_send_mss_netif+0x50>
 800fd26:	2300      	movs	r3, #0
 800fd28:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fd2a:	8a7a      	ldrh	r2, [r7, #18]
 800fd2c:	89fb      	ldrh	r3, [r7, #14]
 800fd2e:	4293      	cmp	r3, r2
 800fd30:	bf28      	it	cs
 800fd32:	4613      	movcs	r3, r2
 800fd34:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fd36:	89fb      	ldrh	r3, [r7, #14]
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3718      	adds	r7, #24
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}
 800fd40:	0801acf8 	.word	0x0801acf8
 800fd44:	0801b42c 	.word	0x0801b42c
 800fd48:	0801ad98 	.word	0x0801ad98

0800fd4c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d119      	bne.n	800fd94 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fd60:	4b10      	ldr	r3, [pc, #64]	; (800fda4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fd62:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800fd66:	4910      	ldr	r1, [pc, #64]	; (800fda8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fd68:	4810      	ldr	r0, [pc, #64]	; (800fdac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fd6a:	f005 fc61 	bl	8015630 <iprintf>

  while (pcb != NULL) {
 800fd6e:	e011      	b.n	800fd94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681a      	ldr	r2, [r3, #0]
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d108      	bne.n	800fd8e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	68db      	ldr	r3, [r3, #12]
 800fd80:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fd82:	68f8      	ldr	r0, [r7, #12]
 800fd84:	f7fe fd7a 	bl	800e87c <tcp_abort>
      pcb = next;
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	60fb      	str	r3, [r7, #12]
 800fd8c:	e002      	b.n	800fd94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d1ea      	bne.n	800fd70 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fd9a:	bf00      	nop
 800fd9c:	bf00      	nop
 800fd9e:	3710      	adds	r7, #16
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	0801acf8 	.word	0x0801acf8
 800fda8:	0801b454 	.word	0x0801b454
 800fdac:	0801ad98 	.word	0x0801ad98

0800fdb0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d02a      	beq.n	800fe16 <tcp_netif_ip_addr_changed+0x66>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d026      	beq.n	800fe16 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fdc8:	4b15      	ldr	r3, [pc, #84]	; (800fe20 <tcp_netif_ip_addr_changed+0x70>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	4619      	mov	r1, r3
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f7ff ffbc 	bl	800fd4c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fdd4:	4b13      	ldr	r3, [pc, #76]	; (800fe24 <tcp_netif_ip_addr_changed+0x74>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4619      	mov	r1, r3
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f7ff ffb6 	bl	800fd4c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d017      	beq.n	800fe16 <tcp_netif_ip_addr_changed+0x66>
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d013      	beq.n	800fe16 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fdee:	4b0e      	ldr	r3, [pc, #56]	; (800fe28 <tcp_netif_ip_addr_changed+0x78>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	60fb      	str	r3, [r7, #12]
 800fdf4:	e00c      	b.n	800fe10 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681a      	ldr	r2, [r3, #0]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d103      	bne.n	800fe0a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	681a      	ldr	r2, [r3, #0]
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	68db      	ldr	r3, [r3, #12]
 800fe0e:	60fb      	str	r3, [r7, #12]
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d1ef      	bne.n	800fdf6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fe16:	bf00      	nop
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	2000cfc8 	.word	0x2000cfc8
 800fe24:	2000cfd4 	.word	0x2000cfd4
 800fe28:	2000cfd0 	.word	0x2000cfd0

0800fe2c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fe2c:	b590      	push	{r4, r7, lr}
 800fe2e:	b08d      	sub	sp, #52	; 0x34
 800fe30:	af04      	add	r7, sp, #16
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d105      	bne.n	800fe48 <tcp_input+0x1c>
 800fe3c:	4b9b      	ldr	r3, [pc, #620]	; (80100ac <tcp_input+0x280>)
 800fe3e:	2283      	movs	r2, #131	; 0x83
 800fe40:	499b      	ldr	r1, [pc, #620]	; (80100b0 <tcp_input+0x284>)
 800fe42:	489c      	ldr	r0, [pc, #624]	; (80100b4 <tcp_input+0x288>)
 800fe44:	f005 fbf4 	bl	8015630 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	4a9a      	ldr	r2, [pc, #616]	; (80100b8 <tcp_input+0x28c>)
 800fe4e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	895b      	ldrh	r3, [r3, #10]
 800fe54:	2b13      	cmp	r3, #19
 800fe56:	f240 83c3 	bls.w	80105e0 <tcp_input+0x7b4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fe5a:	4b98      	ldr	r3, [pc, #608]	; (80100bc <tcp_input+0x290>)
 800fe5c:	695b      	ldr	r3, [r3, #20]
 800fe5e:	4a97      	ldr	r2, [pc, #604]	; (80100bc <tcp_input+0x290>)
 800fe60:	6812      	ldr	r2, [r2, #0]
 800fe62:	4611      	mov	r1, r2
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7fb fd67 	bl	800b938 <ip4_addr_isbroadcast_u32>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	f040 83b9 	bne.w	80105e4 <tcp_input+0x7b8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fe72:	4b92      	ldr	r3, [pc, #584]	; (80100bc <tcp_input+0x290>)
 800fe74:	695b      	ldr	r3, [r3, #20]
 800fe76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fe7a:	2be0      	cmp	r3, #224	; 0xe0
 800fe7c:	f000 83b2 	beq.w	80105e4 <tcp_input+0x7b8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fe80:	4b8d      	ldr	r3, [pc, #564]	; (80100b8 <tcp_input+0x28c>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	899b      	ldrh	r3, [r3, #12]
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f7fc fbcf 	bl	800c62c <lwip_htons>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	0b1b      	lsrs	r3, r3, #12
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fe9a:	7cbb      	ldrb	r3, [r7, #18]
 800fe9c:	2b13      	cmp	r3, #19
 800fe9e:	f240 83a3 	bls.w	80105e8 <tcp_input+0x7bc>
 800fea2:	7cbb      	ldrb	r3, [r7, #18]
 800fea4:	b29a      	uxth	r2, r3
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	891b      	ldrh	r3, [r3, #8]
 800feaa:	429a      	cmp	r2, r3
 800feac:	f200 839c 	bhi.w	80105e8 <tcp_input+0x7bc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800feb0:	7cbb      	ldrb	r3, [r7, #18]
 800feb2:	b29b      	uxth	r3, r3
 800feb4:	3b14      	subs	r3, #20
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	4b81      	ldr	r3, [pc, #516]	; (80100c0 <tcp_input+0x294>)
 800feba:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800febc:	4b81      	ldr	r3, [pc, #516]	; (80100c4 <tcp_input+0x298>)
 800febe:	2200      	movs	r2, #0
 800fec0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	895a      	ldrh	r2, [r3, #10]
 800fec6:	7cbb      	ldrb	r3, [r7, #18]
 800fec8:	b29b      	uxth	r3, r3
 800feca:	429a      	cmp	r2, r3
 800fecc:	d309      	bcc.n	800fee2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fece:	4b7c      	ldr	r3, [pc, #496]	; (80100c0 <tcp_input+0x294>)
 800fed0:	881a      	ldrh	r2, [r3, #0]
 800fed2:	4b7d      	ldr	r3, [pc, #500]	; (80100c8 <tcp_input+0x29c>)
 800fed4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fed6:	7cbb      	ldrb	r3, [r7, #18]
 800fed8:	4619      	mov	r1, r3
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f7fd feae 	bl	800dc3c <pbuf_remove_header>
 800fee0:	e04e      	b.n	800ff80 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d105      	bne.n	800fef6 <tcp_input+0xca>
 800feea:	4b70      	ldr	r3, [pc, #448]	; (80100ac <tcp_input+0x280>)
 800feec:	22c2      	movs	r2, #194	; 0xc2
 800feee:	4977      	ldr	r1, [pc, #476]	; (80100cc <tcp_input+0x2a0>)
 800fef0:	4870      	ldr	r0, [pc, #448]	; (80100b4 <tcp_input+0x288>)
 800fef2:	f005 fb9d 	bl	8015630 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fef6:	2114      	movs	r1, #20
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f7fd fe9f 	bl	800dc3c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	895a      	ldrh	r2, [r3, #10]
 800ff02:	4b71      	ldr	r3, [pc, #452]	; (80100c8 <tcp_input+0x29c>)
 800ff04:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ff06:	4b6e      	ldr	r3, [pc, #440]	; (80100c0 <tcp_input+0x294>)
 800ff08:	881a      	ldrh	r2, [r3, #0]
 800ff0a:	4b6f      	ldr	r3, [pc, #444]	; (80100c8 <tcp_input+0x29c>)
 800ff0c:	881b      	ldrh	r3, [r3, #0]
 800ff0e:	1ad3      	subs	r3, r2, r3
 800ff10:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ff12:	4b6d      	ldr	r3, [pc, #436]	; (80100c8 <tcp_input+0x29c>)
 800ff14:	881b      	ldrh	r3, [r3, #0]
 800ff16:	4619      	mov	r1, r3
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f7fd fe8f 	bl	800dc3c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	895b      	ldrh	r3, [r3, #10]
 800ff24:	8a3a      	ldrh	r2, [r7, #16]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	f200 8360 	bhi.w	80105ec <tcp_input+0x7c0>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	685b      	ldr	r3, [r3, #4]
 800ff32:	4a64      	ldr	r2, [pc, #400]	; (80100c4 <tcp_input+0x298>)
 800ff34:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	8a3a      	ldrh	r2, [r7, #16]
 800ff3c:	4611      	mov	r1, r2
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7fd fe7c 	bl	800dc3c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	891a      	ldrh	r2, [r3, #8]
 800ff48:	8a3b      	ldrh	r3, [r7, #16]
 800ff4a:	1ad3      	subs	r3, r2, r3
 800ff4c:	b29a      	uxth	r2, r3
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	895b      	ldrh	r3, [r3, #10]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d005      	beq.n	800ff66 <tcp_input+0x13a>
 800ff5a:	4b54      	ldr	r3, [pc, #336]	; (80100ac <tcp_input+0x280>)
 800ff5c:	22df      	movs	r2, #223	; 0xdf
 800ff5e:	495c      	ldr	r1, [pc, #368]	; (80100d0 <tcp_input+0x2a4>)
 800ff60:	4854      	ldr	r0, [pc, #336]	; (80100b4 <tcp_input+0x288>)
 800ff62:	f005 fb65 	bl	8015630 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	891a      	ldrh	r2, [r3, #8]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	891b      	ldrh	r3, [r3, #8]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d005      	beq.n	800ff80 <tcp_input+0x154>
 800ff74:	4b4d      	ldr	r3, [pc, #308]	; (80100ac <tcp_input+0x280>)
 800ff76:	22e0      	movs	r2, #224	; 0xe0
 800ff78:	4956      	ldr	r1, [pc, #344]	; (80100d4 <tcp_input+0x2a8>)
 800ff7a:	484e      	ldr	r0, [pc, #312]	; (80100b4 <tcp_input+0x288>)
 800ff7c:	f005 fb58 	bl	8015630 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ff80:	4b4d      	ldr	r3, [pc, #308]	; (80100b8 <tcp_input+0x28c>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	881b      	ldrh	r3, [r3, #0]
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	4a4b      	ldr	r2, [pc, #300]	; (80100b8 <tcp_input+0x28c>)
 800ff8a:	6814      	ldr	r4, [r2, #0]
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7fc fb4d 	bl	800c62c <lwip_htons>
 800ff92:	4603      	mov	r3, r0
 800ff94:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ff96:	4b48      	ldr	r3, [pc, #288]	; (80100b8 <tcp_input+0x28c>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	885b      	ldrh	r3, [r3, #2]
 800ff9c:	b29b      	uxth	r3, r3
 800ff9e:	4a46      	ldr	r2, [pc, #280]	; (80100b8 <tcp_input+0x28c>)
 800ffa0:	6814      	ldr	r4, [r2, #0]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fc fb42 	bl	800c62c <lwip_htons>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ffac:	4b42      	ldr	r3, [pc, #264]	; (80100b8 <tcp_input+0x28c>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	4a41      	ldr	r2, [pc, #260]	; (80100b8 <tcp_input+0x28c>)
 800ffb4:	6814      	ldr	r4, [r2, #0]
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fc fb4d 	bl	800c656 <lwip_htonl>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	6063      	str	r3, [r4, #4]
 800ffc0:	6863      	ldr	r3, [r4, #4]
 800ffc2:	4a45      	ldr	r2, [pc, #276]	; (80100d8 <tcp_input+0x2ac>)
 800ffc4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ffc6:	4b3c      	ldr	r3, [pc, #240]	; (80100b8 <tcp_input+0x28c>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	689b      	ldr	r3, [r3, #8]
 800ffcc:	4a3a      	ldr	r2, [pc, #232]	; (80100b8 <tcp_input+0x28c>)
 800ffce:	6814      	ldr	r4, [r2, #0]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7fc fb40 	bl	800c656 <lwip_htonl>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	60a3      	str	r3, [r4, #8]
 800ffda:	68a3      	ldr	r3, [r4, #8]
 800ffdc:	4a3f      	ldr	r2, [pc, #252]	; (80100dc <tcp_input+0x2b0>)
 800ffde:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ffe0:	4b35      	ldr	r3, [pc, #212]	; (80100b8 <tcp_input+0x28c>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	89db      	ldrh	r3, [r3, #14]
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	4a33      	ldr	r2, [pc, #204]	; (80100b8 <tcp_input+0x28c>)
 800ffea:	6814      	ldr	r4, [r2, #0]
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fc fb1d 	bl	800c62c <lwip_htons>
 800fff2:	4603      	mov	r3, r0
 800fff4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fff6:	4b30      	ldr	r3, [pc, #192]	; (80100b8 <tcp_input+0x28c>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	899b      	ldrh	r3, [r3, #12]
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fc fb14 	bl	800c62c <lwip_htons>
 8010004:	4603      	mov	r3, r0
 8010006:	b2db      	uxtb	r3, r3
 8010008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801000c:	b2da      	uxtb	r2, r3
 801000e:	4b34      	ldr	r3, [pc, #208]	; (80100e0 <tcp_input+0x2b4>)
 8010010:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	891a      	ldrh	r2, [r3, #8]
 8010016:	4b33      	ldr	r3, [pc, #204]	; (80100e4 <tcp_input+0x2b8>)
 8010018:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801001a:	4b31      	ldr	r3, [pc, #196]	; (80100e0 <tcp_input+0x2b4>)
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	f003 0303 	and.w	r3, r3, #3
 8010022:	2b00      	cmp	r3, #0
 8010024:	d00c      	beq.n	8010040 <tcp_input+0x214>
    tcplen++;
 8010026:	4b2f      	ldr	r3, [pc, #188]	; (80100e4 <tcp_input+0x2b8>)
 8010028:	881b      	ldrh	r3, [r3, #0]
 801002a:	3301      	adds	r3, #1
 801002c:	b29a      	uxth	r2, r3
 801002e:	4b2d      	ldr	r3, [pc, #180]	; (80100e4 <tcp_input+0x2b8>)
 8010030:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	891a      	ldrh	r2, [r3, #8]
 8010036:	4b2b      	ldr	r3, [pc, #172]	; (80100e4 <tcp_input+0x2b8>)
 8010038:	881b      	ldrh	r3, [r3, #0]
 801003a:	429a      	cmp	r2, r3
 801003c:	f200 82d8 	bhi.w	80105f0 <tcp_input+0x7c4>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010040:	2300      	movs	r3, #0
 8010042:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010044:	4b28      	ldr	r3, [pc, #160]	; (80100e8 <tcp_input+0x2bc>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	61fb      	str	r3, [r7, #28]
 801004a:	e09d      	b.n	8010188 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801004c:	69fb      	ldr	r3, [r7, #28]
 801004e:	7d1b      	ldrb	r3, [r3, #20]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d105      	bne.n	8010060 <tcp_input+0x234>
 8010054:	4b15      	ldr	r3, [pc, #84]	; (80100ac <tcp_input+0x280>)
 8010056:	22fb      	movs	r2, #251	; 0xfb
 8010058:	4924      	ldr	r1, [pc, #144]	; (80100ec <tcp_input+0x2c0>)
 801005a:	4816      	ldr	r0, [pc, #88]	; (80100b4 <tcp_input+0x288>)
 801005c:	f005 fae8 	bl	8015630 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	7d1b      	ldrb	r3, [r3, #20]
 8010064:	2b0a      	cmp	r3, #10
 8010066:	d105      	bne.n	8010074 <tcp_input+0x248>
 8010068:	4b10      	ldr	r3, [pc, #64]	; (80100ac <tcp_input+0x280>)
 801006a:	22fc      	movs	r2, #252	; 0xfc
 801006c:	4920      	ldr	r1, [pc, #128]	; (80100f0 <tcp_input+0x2c4>)
 801006e:	4811      	ldr	r0, [pc, #68]	; (80100b4 <tcp_input+0x288>)
 8010070:	f005 fade 	bl	8015630 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	7d1b      	ldrb	r3, [r3, #20]
 8010078:	2b01      	cmp	r3, #1
 801007a:	d105      	bne.n	8010088 <tcp_input+0x25c>
 801007c:	4b0b      	ldr	r3, [pc, #44]	; (80100ac <tcp_input+0x280>)
 801007e:	22fd      	movs	r2, #253	; 0xfd
 8010080:	491c      	ldr	r1, [pc, #112]	; (80100f4 <tcp_input+0x2c8>)
 8010082:	480c      	ldr	r0, [pc, #48]	; (80100b4 <tcp_input+0x288>)
 8010084:	f005 fad4 	bl	8015630 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010088:	69fb      	ldr	r3, [r7, #28]
 801008a:	7a1b      	ldrb	r3, [r3, #8]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d033      	beq.n	80100f8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010090:	69fb      	ldr	r3, [r7, #28]
 8010092:	7a1a      	ldrb	r2, [r3, #8]
 8010094:	4b09      	ldr	r3, [pc, #36]	; (80100bc <tcp_input+0x290>)
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801009c:	3301      	adds	r3, #1
 801009e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d029      	beq.n	80100f8 <tcp_input+0x2cc>
      prev = pcb;
 80100a4:	69fb      	ldr	r3, [r7, #28]
 80100a6:	61bb      	str	r3, [r7, #24]
      continue;
 80100a8:	e06b      	b.n	8010182 <tcp_input+0x356>
 80100aa:	bf00      	nop
 80100ac:	0801b488 	.word	0x0801b488
 80100b0:	0801b518 	.word	0x0801b518
 80100b4:	0801b530 	.word	0x0801b530
 80100b8:	200068e0 	.word	0x200068e0
 80100bc:	20006a88 	.word	0x20006a88
 80100c0:	200068e4 	.word	0x200068e4
 80100c4:	200068e8 	.word	0x200068e8
 80100c8:	200068e6 	.word	0x200068e6
 80100cc:	0801b558 	.word	0x0801b558
 80100d0:	0801b568 	.word	0x0801b568
 80100d4:	0801b574 	.word	0x0801b574
 80100d8:	200068f0 	.word	0x200068f0
 80100dc:	200068f4 	.word	0x200068f4
 80100e0:	200068fc 	.word	0x200068fc
 80100e4:	200068fa 	.word	0x200068fa
 80100e8:	2000cfc8 	.word	0x2000cfc8
 80100ec:	0801b594 	.word	0x0801b594
 80100f0:	0801b5bc 	.word	0x0801b5bc
 80100f4:	0801b5e8 	.word	0x0801b5e8
    }

    if (pcb->remote_port == tcphdr->src &&
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	8b1a      	ldrh	r2, [r3, #24]
 80100fc:	4b94      	ldr	r3, [pc, #592]	; (8010350 <tcp_input+0x524>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	881b      	ldrh	r3, [r3, #0]
 8010102:	b29b      	uxth	r3, r3
 8010104:	429a      	cmp	r2, r3
 8010106:	d13a      	bne.n	801017e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010108:	69fb      	ldr	r3, [r7, #28]
 801010a:	8ada      	ldrh	r2, [r3, #22]
 801010c:	4b90      	ldr	r3, [pc, #576]	; (8010350 <tcp_input+0x524>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	885b      	ldrh	r3, [r3, #2]
 8010112:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010114:	429a      	cmp	r2, r3
 8010116:	d132      	bne.n	801017e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010118:	69fb      	ldr	r3, [r7, #28]
 801011a:	685a      	ldr	r2, [r3, #4]
 801011c:	4b8d      	ldr	r3, [pc, #564]	; (8010354 <tcp_input+0x528>)
 801011e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010120:	429a      	cmp	r2, r3
 8010122:	d12c      	bne.n	801017e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010124:	69fb      	ldr	r3, [r7, #28]
 8010126:	681a      	ldr	r2, [r3, #0]
 8010128:	4b8a      	ldr	r3, [pc, #552]	; (8010354 <tcp_input+0x528>)
 801012a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801012c:	429a      	cmp	r2, r3
 801012e:	d126      	bne.n	801017e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010130:	69fb      	ldr	r3, [r7, #28]
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	69fa      	ldr	r2, [r7, #28]
 8010136:	429a      	cmp	r2, r3
 8010138:	d106      	bne.n	8010148 <tcp_input+0x31c>
 801013a:	4b87      	ldr	r3, [pc, #540]	; (8010358 <tcp_input+0x52c>)
 801013c:	f240 120d 	movw	r2, #269	; 0x10d
 8010140:	4986      	ldr	r1, [pc, #536]	; (801035c <tcp_input+0x530>)
 8010142:	4887      	ldr	r0, [pc, #540]	; (8010360 <tcp_input+0x534>)
 8010144:	f005 fa74 	bl	8015630 <iprintf>
      if (prev != NULL) {
 8010148:	69bb      	ldr	r3, [r7, #24]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d00a      	beq.n	8010164 <tcp_input+0x338>
        prev->next = pcb->next;
 801014e:	69fb      	ldr	r3, [r7, #28]
 8010150:	68da      	ldr	r2, [r3, #12]
 8010152:	69bb      	ldr	r3, [r7, #24]
 8010154:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010156:	4b83      	ldr	r3, [pc, #524]	; (8010364 <tcp_input+0x538>)
 8010158:	681a      	ldr	r2, [r3, #0]
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801015e:	4a81      	ldr	r2, [pc, #516]	; (8010364 <tcp_input+0x538>)
 8010160:	69fb      	ldr	r3, [r7, #28]
 8010162:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	69fa      	ldr	r2, [r7, #28]
 801016a:	429a      	cmp	r2, r3
 801016c:	d111      	bne.n	8010192 <tcp_input+0x366>
 801016e:	4b7a      	ldr	r3, [pc, #488]	; (8010358 <tcp_input+0x52c>)
 8010170:	f240 1215 	movw	r2, #277	; 0x115
 8010174:	497c      	ldr	r1, [pc, #496]	; (8010368 <tcp_input+0x53c>)
 8010176:	487a      	ldr	r0, [pc, #488]	; (8010360 <tcp_input+0x534>)
 8010178:	f005 fa5a 	bl	8015630 <iprintf>
      break;
 801017c:	e009      	b.n	8010192 <tcp_input+0x366>
    }
    prev = pcb;
 801017e:	69fb      	ldr	r3, [r7, #28]
 8010180:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010182:	69fb      	ldr	r3, [r7, #28]
 8010184:	68db      	ldr	r3, [r3, #12]
 8010186:	61fb      	str	r3, [r7, #28]
 8010188:	69fb      	ldr	r3, [r7, #28]
 801018a:	2b00      	cmp	r3, #0
 801018c:	f47f af5e 	bne.w	801004c <tcp_input+0x220>
 8010190:	e000      	b.n	8010194 <tcp_input+0x368>
      break;
 8010192:	bf00      	nop
  }

  if (pcb == NULL) {
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	2b00      	cmp	r3, #0
 8010198:	f040 8095 	bne.w	80102c6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801019c:	4b73      	ldr	r3, [pc, #460]	; (801036c <tcp_input+0x540>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	61fb      	str	r3, [r7, #28]
 80101a2:	e03f      	b.n	8010224 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80101a4:	69fb      	ldr	r3, [r7, #28]
 80101a6:	7d1b      	ldrb	r3, [r3, #20]
 80101a8:	2b0a      	cmp	r3, #10
 80101aa:	d006      	beq.n	80101ba <tcp_input+0x38e>
 80101ac:	4b6a      	ldr	r3, [pc, #424]	; (8010358 <tcp_input+0x52c>)
 80101ae:	f240 121f 	movw	r2, #287	; 0x11f
 80101b2:	496f      	ldr	r1, [pc, #444]	; (8010370 <tcp_input+0x544>)
 80101b4:	486a      	ldr	r0, [pc, #424]	; (8010360 <tcp_input+0x534>)
 80101b6:	f005 fa3b 	bl	8015630 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80101ba:	69fb      	ldr	r3, [r7, #28]
 80101bc:	7a1b      	ldrb	r3, [r3, #8]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d009      	beq.n	80101d6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80101c2:	69fb      	ldr	r3, [r7, #28]
 80101c4:	7a1a      	ldrb	r2, [r3, #8]
 80101c6:	4b63      	ldr	r3, [pc, #396]	; (8010354 <tcp_input+0x528>)
 80101c8:	685b      	ldr	r3, [r3, #4]
 80101ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80101ce:	3301      	adds	r3, #1
 80101d0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d122      	bne.n	801021c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80101d6:	69fb      	ldr	r3, [r7, #28]
 80101d8:	8b1a      	ldrh	r2, [r3, #24]
 80101da:	4b5d      	ldr	r3, [pc, #372]	; (8010350 <tcp_input+0x524>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	881b      	ldrh	r3, [r3, #0]
 80101e0:	b29b      	uxth	r3, r3
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d11b      	bne.n	801021e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	8ada      	ldrh	r2, [r3, #22]
 80101ea:	4b59      	ldr	r3, [pc, #356]	; (8010350 <tcp_input+0x524>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	885b      	ldrh	r3, [r3, #2]
 80101f0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d113      	bne.n	801021e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	685a      	ldr	r2, [r3, #4]
 80101fa:	4b56      	ldr	r3, [pc, #344]	; (8010354 <tcp_input+0x528>)
 80101fc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80101fe:	429a      	cmp	r2, r3
 8010200:	d10d      	bne.n	801021e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010202:	69fb      	ldr	r3, [r7, #28]
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	4b53      	ldr	r3, [pc, #332]	; (8010354 <tcp_input+0x528>)
 8010208:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801020a:	429a      	cmp	r2, r3
 801020c:	d107      	bne.n	801021e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801020e:	69f8      	ldr	r0, [r7, #28]
 8010210:	f000 fb54 	bl	80108bc <tcp_timewait_input>
        }
        pbuf_free(p);
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f7fd fd97 	bl	800dd48 <pbuf_free>
        return;
 801021a:	e1ef      	b.n	80105fc <tcp_input+0x7d0>
        continue;
 801021c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801021e:	69fb      	ldr	r3, [r7, #28]
 8010220:	68db      	ldr	r3, [r3, #12]
 8010222:	61fb      	str	r3, [r7, #28]
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d1bc      	bne.n	80101a4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801022a:	2300      	movs	r3, #0
 801022c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801022e:	4b51      	ldr	r3, [pc, #324]	; (8010374 <tcp_input+0x548>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	617b      	str	r3, [r7, #20]
 8010234:	e02a      	b.n	801028c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	7a1b      	ldrb	r3, [r3, #8]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d00c      	beq.n	8010258 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	7a1a      	ldrb	r2, [r3, #8]
 8010242:	4b44      	ldr	r3, [pc, #272]	; (8010354 <tcp_input+0x528>)
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801024a:	3301      	adds	r3, #1
 801024c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801024e:	429a      	cmp	r2, r3
 8010250:	d002      	beq.n	8010258 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	61bb      	str	r3, [r7, #24]
        continue;
 8010256:	e016      	b.n	8010286 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	8ada      	ldrh	r2, [r3, #22]
 801025c:	4b3c      	ldr	r3, [pc, #240]	; (8010350 <tcp_input+0x524>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	885b      	ldrh	r3, [r3, #2]
 8010262:	b29b      	uxth	r3, r3
 8010264:	429a      	cmp	r2, r3
 8010266:	d10c      	bne.n	8010282 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	681a      	ldr	r2, [r3, #0]
 801026c:	4b39      	ldr	r3, [pc, #228]	; (8010354 <tcp_input+0x528>)
 801026e:	695b      	ldr	r3, [r3, #20]
 8010270:	429a      	cmp	r2, r3
 8010272:	d00f      	beq.n	8010294 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d00d      	beq.n	8010296 <tcp_input+0x46a>
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d009      	beq.n	8010296 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	68db      	ldr	r3, [r3, #12]
 801028a:	617b      	str	r3, [r7, #20]
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d1d1      	bne.n	8010236 <tcp_input+0x40a>
 8010292:	e000      	b.n	8010296 <tcp_input+0x46a>
            break;
 8010294:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d014      	beq.n	80102c6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801029c:	69bb      	ldr	r3, [r7, #24]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d00a      	beq.n	80102b8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	68da      	ldr	r2, [r3, #12]
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80102aa:	4b32      	ldr	r3, [pc, #200]	; (8010374 <tcp_input+0x548>)
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80102b2:	4a30      	ldr	r2, [pc, #192]	; (8010374 <tcp_input+0x548>)
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80102b8:	6978      	ldr	r0, [r7, #20]
 80102ba:	f000 fa01 	bl	80106c0 <tcp_listen_input>
      }
      pbuf_free(p);
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f7fd fd42 	bl	800dd48 <pbuf_free>
      return;
 80102c4:	e19a      	b.n	80105fc <tcp_input+0x7d0>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80102c6:	69fb      	ldr	r3, [r7, #28]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	f000 815f 	beq.w	801058c <tcp_input+0x760>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80102ce:	4b2a      	ldr	r3, [pc, #168]	; (8010378 <tcp_input+0x54c>)
 80102d0:	2200      	movs	r2, #0
 80102d2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	891a      	ldrh	r2, [r3, #8]
 80102d8:	4b27      	ldr	r3, [pc, #156]	; (8010378 <tcp_input+0x54c>)
 80102da:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80102dc:	4a26      	ldr	r2, [pc, #152]	; (8010378 <tcp_input+0x54c>)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80102e2:	4b1b      	ldr	r3, [pc, #108]	; (8010350 <tcp_input+0x524>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	4a24      	ldr	r2, [pc, #144]	; (8010378 <tcp_input+0x54c>)
 80102e8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80102ea:	4b24      	ldr	r3, [pc, #144]	; (801037c <tcp_input+0x550>)
 80102ec:	2200      	movs	r2, #0
 80102ee:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80102f0:	4b23      	ldr	r3, [pc, #140]	; (8010380 <tcp_input+0x554>)
 80102f2:	2200      	movs	r2, #0
 80102f4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80102f6:	4b23      	ldr	r3, [pc, #140]	; (8010384 <tcp_input+0x558>)
 80102f8:	2200      	movs	r2, #0
 80102fa:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80102fc:	4b22      	ldr	r3, [pc, #136]	; (8010388 <tcp_input+0x55c>)
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	f003 0308 	and.w	r3, r3, #8
 8010304:	2b00      	cmp	r3, #0
 8010306:	d006      	beq.n	8010316 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	7b5b      	ldrb	r3, [r3, #13]
 801030c:	f043 0301 	orr.w	r3, r3, #1
 8010310:	b2da      	uxtb	r2, r3
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010316:	69fb      	ldr	r3, [r7, #28]
 8010318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801031a:	2b00      	cmp	r3, #0
 801031c:	d038      	beq.n	8010390 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801031e:	69f8      	ldr	r0, [r7, #28]
 8010320:	f7ff f8ac 	bl	800f47c <tcp_process_refused_data>
 8010324:	4603      	mov	r3, r0
 8010326:	f113 0f0d 	cmn.w	r3, #13
 801032a:	d007      	beq.n	801033c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010330:	2b00      	cmp	r3, #0
 8010332:	d02d      	beq.n	8010390 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010334:	4b15      	ldr	r3, [pc, #84]	; (801038c <tcp_input+0x560>)
 8010336:	881b      	ldrh	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d029      	beq.n	8010390 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801033c:	69fb      	ldr	r3, [r7, #28]
 801033e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010340:	2b00      	cmp	r3, #0
 8010342:	f040 8103 	bne.w	801054c <tcp_input+0x720>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010346:	69f8      	ldr	r0, [r7, #28]
 8010348:	f003 fa5e 	bl	8013808 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801034c:	e0fe      	b.n	801054c <tcp_input+0x720>
 801034e:	bf00      	nop
 8010350:	200068e0 	.word	0x200068e0
 8010354:	20006a88 	.word	0x20006a88
 8010358:	0801b488 	.word	0x0801b488
 801035c:	0801b610 	.word	0x0801b610
 8010360:	0801b530 	.word	0x0801b530
 8010364:	2000cfc8 	.word	0x2000cfc8
 8010368:	0801b63c 	.word	0x0801b63c
 801036c:	2000cfd8 	.word	0x2000cfd8
 8010370:	0801b668 	.word	0x0801b668
 8010374:	2000cfd0 	.word	0x2000cfd0
 8010378:	200068d0 	.word	0x200068d0
 801037c:	20006900 	.word	0x20006900
 8010380:	200068fd 	.word	0x200068fd
 8010384:	200068f8 	.word	0x200068f8
 8010388:	200068fc 	.word	0x200068fc
 801038c:	200068fa 	.word	0x200068fa
      }
    }
    tcp_input_pcb = pcb;
 8010390:	4a9c      	ldr	r2, [pc, #624]	; (8010604 <tcp_input+0x7d8>)
 8010392:	69fb      	ldr	r3, [r7, #28]
 8010394:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010396:	69f8      	ldr	r0, [r7, #28]
 8010398:	f000 fb0a 	bl	80109b0 <tcp_process>
 801039c:	4603      	mov	r3, r0
 801039e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80103a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80103a4:	f113 0f0d 	cmn.w	r3, #13
 80103a8:	f000 80d2 	beq.w	8010550 <tcp_input+0x724>
      if (recv_flags & TF_RESET) {
 80103ac:	4b96      	ldr	r3, [pc, #600]	; (8010608 <tcp_input+0x7dc>)
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	f003 0308 	and.w	r3, r3, #8
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d015      	beq.n	80103e4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d008      	beq.n	80103d4 <tcp_input+0x5a8>
 80103c2:	69fb      	ldr	r3, [r7, #28]
 80103c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103c8:	69fa      	ldr	r2, [r7, #28]
 80103ca:	6912      	ldr	r2, [r2, #16]
 80103cc:	f06f 010d 	mvn.w	r1, #13
 80103d0:	4610      	mov	r0, r2
 80103d2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80103d4:	69f9      	ldr	r1, [r7, #28]
 80103d6:	488d      	ldr	r0, [pc, #564]	; (801060c <tcp_input+0x7e0>)
 80103d8:	f7ff fbd2 	bl	800fb80 <tcp_pcb_remove>
        tcp_free(pcb);
 80103dc:	69f8      	ldr	r0, [r7, #28]
 80103de:	f7fd ff6f 	bl	800e2c0 <tcp_free>
 80103e2:	e0c0      	b.n	8010566 <tcp_input+0x73a>
      } else {
        err = ERR_OK;
 80103e4:	2300      	movs	r3, #0
 80103e6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80103e8:	4b89      	ldr	r3, [pc, #548]	; (8010610 <tcp_input+0x7e4>)
 80103ea:	881b      	ldrh	r3, [r3, #0]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d01b      	beq.n	8010428 <tcp_input+0x5fc>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80103f0:	4b87      	ldr	r3, [pc, #540]	; (8010610 <tcp_input+0x7e4>)
 80103f2:	881b      	ldrh	r3, [r3, #0]
 80103f4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80103f6:	69fb      	ldr	r3, [r7, #28]
 80103f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d009      	beq.n	8010412 <tcp_input+0x5e6>
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010402:	69fa      	ldr	r2, [r7, #28]
 8010404:	6910      	ldr	r0, [r2, #16]
 8010406:	89fa      	ldrh	r2, [r7, #14]
 8010408:	69f9      	ldr	r1, [r7, #28]
 801040a:	4798      	blx	r3
 801040c:	4603      	mov	r3, r0
 801040e:	74fb      	strb	r3, [r7, #19]
 8010410:	e001      	b.n	8010416 <tcp_input+0x5ea>
 8010412:	2300      	movs	r3, #0
 8010414:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010416:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801041a:	f113 0f0d 	cmn.w	r3, #13
 801041e:	f000 8099 	beq.w	8010554 <tcp_input+0x728>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010422:	4b7b      	ldr	r3, [pc, #492]	; (8010610 <tcp_input+0x7e4>)
 8010424:	2200      	movs	r2, #0
 8010426:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010428:	69f8      	ldr	r0, [r7, #28]
 801042a:	f000 f909 	bl	8010640 <tcp_input_delayed_close>
 801042e:	4603      	mov	r3, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	f040 8091 	bne.w	8010558 <tcp_input+0x72c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010436:	4b77      	ldr	r3, [pc, #476]	; (8010614 <tcp_input+0x7e8>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d041      	beq.n	80104c2 <tcp_input+0x696>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801043e:	69fb      	ldr	r3, [r7, #28]
 8010440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010442:	2b00      	cmp	r3, #0
 8010444:	d006      	beq.n	8010454 <tcp_input+0x628>
 8010446:	4b74      	ldr	r3, [pc, #464]	; (8010618 <tcp_input+0x7ec>)
 8010448:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801044c:	4973      	ldr	r1, [pc, #460]	; (801061c <tcp_input+0x7f0>)
 801044e:	4874      	ldr	r0, [pc, #464]	; (8010620 <tcp_input+0x7f4>)
 8010450:	f005 f8ee 	bl	8015630 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010454:	69fb      	ldr	r3, [r7, #28]
 8010456:	8b5b      	ldrh	r3, [r3, #26]
 8010458:	f003 0310 	and.w	r3, r3, #16
 801045c:	2b00      	cmp	r3, #0
 801045e:	d008      	beq.n	8010472 <tcp_input+0x646>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010460:	4b6c      	ldr	r3, [pc, #432]	; (8010614 <tcp_input+0x7e8>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	4618      	mov	r0, r3
 8010466:	f7fd fc6f 	bl	800dd48 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801046a:	69f8      	ldr	r0, [r7, #28]
 801046c:	f7fe fa06 	bl	800e87c <tcp_abort>
            goto aborted;
 8010470:	e079      	b.n	8010566 <tcp_input+0x73a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010472:	69fb      	ldr	r3, [r7, #28]
 8010474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010478:	2b00      	cmp	r3, #0
 801047a:	d00c      	beq.n	8010496 <tcp_input+0x66a>
 801047c:	69fb      	ldr	r3, [r7, #28]
 801047e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8010482:	69fb      	ldr	r3, [r7, #28]
 8010484:	6918      	ldr	r0, [r3, #16]
 8010486:	4b63      	ldr	r3, [pc, #396]	; (8010614 <tcp_input+0x7e8>)
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	2300      	movs	r3, #0
 801048c:	69f9      	ldr	r1, [r7, #28]
 801048e:	47a0      	blx	r4
 8010490:	4603      	mov	r3, r0
 8010492:	74fb      	strb	r3, [r7, #19]
 8010494:	e008      	b.n	80104a8 <tcp_input+0x67c>
 8010496:	4b5f      	ldr	r3, [pc, #380]	; (8010614 <tcp_input+0x7e8>)
 8010498:	681a      	ldr	r2, [r3, #0]
 801049a:	2300      	movs	r3, #0
 801049c:	69f9      	ldr	r1, [r7, #28]
 801049e:	2000      	movs	r0, #0
 80104a0:	f7ff f8b6 	bl	800f610 <tcp_recv_null>
 80104a4:	4603      	mov	r3, r0
 80104a6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80104a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80104ac:	f113 0f0d 	cmn.w	r3, #13
 80104b0:	d054      	beq.n	801055c <tcp_input+0x730>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80104b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d003      	beq.n	80104c2 <tcp_input+0x696>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80104ba:	4b56      	ldr	r3, [pc, #344]	; (8010614 <tcp_input+0x7e8>)
 80104bc:	681a      	ldr	r2, [r3, #0]
 80104be:	69fb      	ldr	r3, [r7, #28]
 80104c0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80104c2:	4b51      	ldr	r3, [pc, #324]	; (8010608 <tcp_input+0x7dc>)
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	f003 0320 	and.w	r3, r3, #32
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d031      	beq.n	8010532 <tcp_input+0x706>
          if (pcb->refused_data != NULL) {
 80104ce:	69fb      	ldr	r3, [r7, #28]
 80104d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d009      	beq.n	80104ea <tcp_input+0x6be>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80104d6:	69fb      	ldr	r3, [r7, #28]
 80104d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104da:	7b5a      	ldrb	r2, [r3, #13]
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104e0:	f042 0220 	orr.w	r2, r2, #32
 80104e4:	b2d2      	uxtb	r2, r2
 80104e6:	735a      	strb	r2, [r3, #13]
 80104e8:	e023      	b.n	8010532 <tcp_input+0x706>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80104ea:	69fb      	ldr	r3, [r7, #28]
 80104ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104ee:	f640 3268 	movw	r2, #2920	; 0xb68
 80104f2:	4293      	cmp	r3, r2
 80104f4:	d005      	beq.n	8010502 <tcp_input+0x6d6>
              pcb->rcv_wnd++;
 80104f6:	69fb      	ldr	r3, [r7, #28]
 80104f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104fa:	3301      	adds	r3, #1
 80104fc:	b29a      	uxth	r2, r3
 80104fe:	69fb      	ldr	r3, [r7, #28]
 8010500:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010502:	69fb      	ldr	r3, [r7, #28]
 8010504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00b      	beq.n	8010524 <tcp_input+0x6f8>
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8010512:	69fb      	ldr	r3, [r7, #28]
 8010514:	6918      	ldr	r0, [r3, #16]
 8010516:	2300      	movs	r3, #0
 8010518:	2200      	movs	r2, #0
 801051a:	69f9      	ldr	r1, [r7, #28]
 801051c:	47a0      	blx	r4
 801051e:	4603      	mov	r3, r0
 8010520:	74fb      	strb	r3, [r7, #19]
 8010522:	e001      	b.n	8010528 <tcp_input+0x6fc>
 8010524:	2300      	movs	r3, #0
 8010526:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010528:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801052c:	f113 0f0d 	cmn.w	r3, #13
 8010530:	d016      	beq.n	8010560 <tcp_input+0x734>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010532:	4b34      	ldr	r3, [pc, #208]	; (8010604 <tcp_input+0x7d8>)
 8010534:	2200      	movs	r2, #0
 8010536:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010538:	69f8      	ldr	r0, [r7, #28]
 801053a:	f000 f881 	bl	8010640 <tcp_input_delayed_close>
 801053e:	4603      	mov	r3, r0
 8010540:	2b00      	cmp	r3, #0
 8010542:	d10f      	bne.n	8010564 <tcp_input+0x738>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010544:	69f8      	ldr	r0, [r7, #28]
 8010546:	f002 fb59 	bl	8012bfc <tcp_output>
 801054a:	e00c      	b.n	8010566 <tcp_input+0x73a>
        goto aborted;
 801054c:	bf00      	nop
 801054e:	e00a      	b.n	8010566 <tcp_input+0x73a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010550:	bf00      	nop
 8010552:	e008      	b.n	8010566 <tcp_input+0x73a>
              goto aborted;
 8010554:	bf00      	nop
 8010556:	e006      	b.n	8010566 <tcp_input+0x73a>
          goto aborted;
 8010558:	bf00      	nop
 801055a:	e004      	b.n	8010566 <tcp_input+0x73a>
            goto aborted;
 801055c:	bf00      	nop
 801055e:	e002      	b.n	8010566 <tcp_input+0x73a>
              goto aborted;
 8010560:	bf00      	nop
 8010562:	e000      	b.n	8010566 <tcp_input+0x73a>
          goto aborted;
 8010564:	bf00      	nop
    tcp_input_pcb = NULL;
 8010566:	4b27      	ldr	r3, [pc, #156]	; (8010604 <tcp_input+0x7d8>)
 8010568:	2200      	movs	r2, #0
 801056a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801056c:	4b29      	ldr	r3, [pc, #164]	; (8010614 <tcp_input+0x7e8>)
 801056e:	2200      	movs	r2, #0
 8010570:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010572:	4b2c      	ldr	r3, [pc, #176]	; (8010624 <tcp_input+0x7f8>)
 8010574:	685b      	ldr	r3, [r3, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d03f      	beq.n	80105fa <tcp_input+0x7ce>
      pbuf_free(inseg.p);
 801057a:	4b2a      	ldr	r3, [pc, #168]	; (8010624 <tcp_input+0x7f8>)
 801057c:	685b      	ldr	r3, [r3, #4]
 801057e:	4618      	mov	r0, r3
 8010580:	f7fd fbe2 	bl	800dd48 <pbuf_free>
      inseg.p = NULL;
 8010584:	4b27      	ldr	r3, [pc, #156]	; (8010624 <tcp_input+0x7f8>)
 8010586:	2200      	movs	r2, #0
 8010588:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801058a:	e036      	b.n	80105fa <tcp_input+0x7ce>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801058c:	4b26      	ldr	r3, [pc, #152]	; (8010628 <tcp_input+0x7fc>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	899b      	ldrh	r3, [r3, #12]
 8010592:	b29b      	uxth	r3, r3
 8010594:	4618      	mov	r0, r3
 8010596:	f7fc f849 	bl	800c62c <lwip_htons>
 801059a:	4603      	mov	r3, r0
 801059c:	b2db      	uxtb	r3, r3
 801059e:	f003 0304 	and.w	r3, r3, #4
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d118      	bne.n	80105d8 <tcp_input+0x7ac>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105a6:	4b21      	ldr	r3, [pc, #132]	; (801062c <tcp_input+0x800>)
 80105a8:	6819      	ldr	r1, [r3, #0]
 80105aa:	4b21      	ldr	r3, [pc, #132]	; (8010630 <tcp_input+0x804>)
 80105ac:	881b      	ldrh	r3, [r3, #0]
 80105ae:	461a      	mov	r2, r3
 80105b0:	4b20      	ldr	r3, [pc, #128]	; (8010634 <tcp_input+0x808>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105b6:	4b1c      	ldr	r3, [pc, #112]	; (8010628 <tcp_input+0x7fc>)
 80105b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105ba:	885b      	ldrh	r3, [r3, #2]
 80105bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105be:	4a1a      	ldr	r2, [pc, #104]	; (8010628 <tcp_input+0x7fc>)
 80105c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105c2:	8812      	ldrh	r2, [r2, #0]
 80105c4:	b292      	uxth	r2, r2
 80105c6:	9202      	str	r2, [sp, #8]
 80105c8:	9301      	str	r3, [sp, #4]
 80105ca:	4b1b      	ldr	r3, [pc, #108]	; (8010638 <tcp_input+0x80c>)
 80105cc:	9300      	str	r3, [sp, #0]
 80105ce:	4b1b      	ldr	r3, [pc, #108]	; (801063c <tcp_input+0x810>)
 80105d0:	4602      	mov	r2, r0
 80105d2:	2000      	movs	r0, #0
 80105d4:	f003 f8c6 	bl	8013764 <tcp_rst>
    pbuf_free(p);
 80105d8:	6878      	ldr	r0, [r7, #4]
 80105da:	f7fd fbb5 	bl	800dd48 <pbuf_free>
  return;
 80105de:	e00c      	b.n	80105fa <tcp_input+0x7ce>
    goto dropped;
 80105e0:	bf00      	nop
 80105e2:	e006      	b.n	80105f2 <tcp_input+0x7c6>
    goto dropped;
 80105e4:	bf00      	nop
 80105e6:	e004      	b.n	80105f2 <tcp_input+0x7c6>
    goto dropped;
 80105e8:	bf00      	nop
 80105ea:	e002      	b.n	80105f2 <tcp_input+0x7c6>
      goto dropped;
 80105ec:	bf00      	nop
 80105ee:	e000      	b.n	80105f2 <tcp_input+0x7c6>
      goto dropped;
 80105f0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f7fd fba8 	bl	800dd48 <pbuf_free>
 80105f8:	e000      	b.n	80105fc <tcp_input+0x7d0>
  return;
 80105fa:	bf00      	nop
}
 80105fc:	3724      	adds	r7, #36	; 0x24
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd90      	pop	{r4, r7, pc}
 8010602:	bf00      	nop
 8010604:	2000cfdc 	.word	0x2000cfdc
 8010608:	200068fd 	.word	0x200068fd
 801060c:	2000cfc8 	.word	0x2000cfc8
 8010610:	200068f8 	.word	0x200068f8
 8010614:	20006900 	.word	0x20006900
 8010618:	0801b488 	.word	0x0801b488
 801061c:	0801b698 	.word	0x0801b698
 8010620:	0801b530 	.word	0x0801b530
 8010624:	200068d0 	.word	0x200068d0
 8010628:	200068e0 	.word	0x200068e0
 801062c:	200068f4 	.word	0x200068f4
 8010630:	200068fa 	.word	0x200068fa
 8010634:	200068f0 	.word	0x200068f0
 8010638:	20006a98 	.word	0x20006a98
 801063c:	20006a9c 	.word	0x20006a9c

08010640 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b082      	sub	sp, #8
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d106      	bne.n	801065c <tcp_input_delayed_close+0x1c>
 801064e:	4b17      	ldr	r3, [pc, #92]	; (80106ac <tcp_input_delayed_close+0x6c>)
 8010650:	f240 225a 	movw	r2, #602	; 0x25a
 8010654:	4916      	ldr	r1, [pc, #88]	; (80106b0 <tcp_input_delayed_close+0x70>)
 8010656:	4817      	ldr	r0, [pc, #92]	; (80106b4 <tcp_input_delayed_close+0x74>)
 8010658:	f004 ffea 	bl	8015630 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801065c:	4b16      	ldr	r3, [pc, #88]	; (80106b8 <tcp_input_delayed_close+0x78>)
 801065e:	781b      	ldrb	r3, [r3, #0]
 8010660:	f003 0310 	and.w	r3, r3, #16
 8010664:	2b00      	cmp	r3, #0
 8010666:	d01c      	beq.n	80106a2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	8b5b      	ldrh	r3, [r3, #26]
 801066c:	f003 0310 	and.w	r3, r3, #16
 8010670:	2b00      	cmp	r3, #0
 8010672:	d10d      	bne.n	8010690 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801067a:	2b00      	cmp	r3, #0
 801067c:	d008      	beq.n	8010690 <tcp_input_delayed_close+0x50>
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010684:	687a      	ldr	r2, [r7, #4]
 8010686:	6912      	ldr	r2, [r2, #16]
 8010688:	f06f 010e 	mvn.w	r1, #14
 801068c:	4610      	mov	r0, r2
 801068e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010690:	6879      	ldr	r1, [r7, #4]
 8010692:	480a      	ldr	r0, [pc, #40]	; (80106bc <tcp_input_delayed_close+0x7c>)
 8010694:	f7ff fa74 	bl	800fb80 <tcp_pcb_remove>
    tcp_free(pcb);
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f7fd fe11 	bl	800e2c0 <tcp_free>
    return 1;
 801069e:	2301      	movs	r3, #1
 80106a0:	e000      	b.n	80106a4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80106a2:	2300      	movs	r3, #0
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3708      	adds	r7, #8
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	0801b488 	.word	0x0801b488
 80106b0:	0801b6b4 	.word	0x0801b6b4
 80106b4:	0801b530 	.word	0x0801b530
 80106b8:	200068fd 	.word	0x200068fd
 80106bc:	2000cfc8 	.word	0x2000cfc8

080106c0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80106c0:	b590      	push	{r4, r7, lr}
 80106c2:	b08b      	sub	sp, #44	; 0x2c
 80106c4:	af04      	add	r7, sp, #16
 80106c6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80106c8:	4b6f      	ldr	r3, [pc, #444]	; (8010888 <tcp_listen_input+0x1c8>)
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	f003 0304 	and.w	r3, r3, #4
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	f040 80d2 	bne.w	801087a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d106      	bne.n	80106ea <tcp_listen_input+0x2a>
 80106dc:	4b6b      	ldr	r3, [pc, #428]	; (801088c <tcp_listen_input+0x1cc>)
 80106de:	f240 2281 	movw	r2, #641	; 0x281
 80106e2:	496b      	ldr	r1, [pc, #428]	; (8010890 <tcp_listen_input+0x1d0>)
 80106e4:	486b      	ldr	r0, [pc, #428]	; (8010894 <tcp_listen_input+0x1d4>)
 80106e6:	f004 ffa3 	bl	8015630 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80106ea:	4b67      	ldr	r3, [pc, #412]	; (8010888 <tcp_listen_input+0x1c8>)
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	f003 0310 	and.w	r3, r3, #16
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d019      	beq.n	801072a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106f6:	4b68      	ldr	r3, [pc, #416]	; (8010898 <tcp_listen_input+0x1d8>)
 80106f8:	6819      	ldr	r1, [r3, #0]
 80106fa:	4b68      	ldr	r3, [pc, #416]	; (801089c <tcp_listen_input+0x1dc>)
 80106fc:	881b      	ldrh	r3, [r3, #0]
 80106fe:	461a      	mov	r2, r3
 8010700:	4b67      	ldr	r3, [pc, #412]	; (80108a0 <tcp_listen_input+0x1e0>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010706:	4b67      	ldr	r3, [pc, #412]	; (80108a4 <tcp_listen_input+0x1e4>)
 8010708:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801070a:	885b      	ldrh	r3, [r3, #2]
 801070c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801070e:	4a65      	ldr	r2, [pc, #404]	; (80108a4 <tcp_listen_input+0x1e4>)
 8010710:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010712:	8812      	ldrh	r2, [r2, #0]
 8010714:	b292      	uxth	r2, r2
 8010716:	9202      	str	r2, [sp, #8]
 8010718:	9301      	str	r3, [sp, #4]
 801071a:	4b63      	ldr	r3, [pc, #396]	; (80108a8 <tcp_listen_input+0x1e8>)
 801071c:	9300      	str	r3, [sp, #0]
 801071e:	4b63      	ldr	r3, [pc, #396]	; (80108ac <tcp_listen_input+0x1ec>)
 8010720:	4602      	mov	r2, r0
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f003 f81e 	bl	8013764 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010728:	e0a9      	b.n	801087e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801072a:	4b57      	ldr	r3, [pc, #348]	; (8010888 <tcp_listen_input+0x1c8>)
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	f003 0302 	and.w	r3, r3, #2
 8010732:	2b00      	cmp	r3, #0
 8010734:	f000 80a3 	beq.w	801087e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	7d5b      	ldrb	r3, [r3, #21]
 801073c:	4618      	mov	r0, r3
 801073e:	f7ff f88b 	bl	800f858 <tcp_alloc>
 8010742:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d111      	bne.n	801076e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	699b      	ldr	r3, [r3, #24]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d00a      	beq.n	8010768 <tcp_listen_input+0xa8>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	699b      	ldr	r3, [r3, #24]
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	6910      	ldr	r0, [r2, #16]
 801075a:	f04f 32ff 	mov.w	r2, #4294967295
 801075e:	2100      	movs	r1, #0
 8010760:	4798      	blx	r3
 8010762:	4603      	mov	r3, r0
 8010764:	73bb      	strb	r3, [r7, #14]
      return;
 8010766:	e08b      	b.n	8010880 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010768:	23f0      	movs	r3, #240	; 0xf0
 801076a:	73bb      	strb	r3, [r7, #14]
      return;
 801076c:	e088      	b.n	8010880 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801076e:	4b50      	ldr	r3, [pc, #320]	; (80108b0 <tcp_listen_input+0x1f0>)
 8010770:	695a      	ldr	r2, [r3, #20]
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010776:	4b4e      	ldr	r3, [pc, #312]	; (80108b0 <tcp_listen_input+0x1f0>)
 8010778:	691a      	ldr	r2, [r3, #16]
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	8ada      	ldrh	r2, [r3, #22]
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010786:	4b47      	ldr	r3, [pc, #284]	; (80108a4 <tcp_listen_input+0x1e4>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	881b      	ldrh	r3, [r3, #0]
 801078c:	b29a      	uxth	r2, r3
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	2203      	movs	r2, #3
 8010796:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010798:	4b41      	ldr	r3, [pc, #260]	; (80108a0 <tcp_listen_input+0x1e0>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	1c5a      	adds	r2, r3, #1
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80107aa:	6978      	ldr	r0, [r7, #20]
 80107ac:	f7ff fa6e 	bl	800fc8c <tcp_next_iss>
 80107b0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	693a      	ldr	r2, [r7, #16]
 80107b6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	693a      	ldr	r2, [r7, #16]
 80107bc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	693a      	ldr	r2, [r7, #16]
 80107c2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	693a      	ldr	r2, [r7, #16]
 80107c8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80107ca:	4b35      	ldr	r3, [pc, #212]	; (80108a0 <tcp_listen_input+0x1e0>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	1e5a      	subs	r2, r3, #1
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	691a      	ldr	r2, [r3, #16]
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	687a      	ldr	r2, [r7, #4]
 80107e0:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	7a5b      	ldrb	r3, [r3, #9]
 80107e6:	f003 030c 	and.w	r3, r3, #12
 80107ea:	b2da      	uxtb	r2, r3
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	7a1a      	ldrb	r2, [r3, #8]
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80107f8:	4b2e      	ldr	r3, [pc, #184]	; (80108b4 <tcp_listen_input+0x1f4>)
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	60da      	str	r2, [r3, #12]
 8010800:	4a2c      	ldr	r2, [pc, #176]	; (80108b4 <tcp_listen_input+0x1f4>)
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	6013      	str	r3, [r2, #0]
 8010806:	f003 f96f 	bl	8013ae8 <tcp_timer_needed>
 801080a:	4b2b      	ldr	r3, [pc, #172]	; (80108b8 <tcp_listen_input+0x1f8>)
 801080c:	2201      	movs	r2, #1
 801080e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010810:	6978      	ldr	r0, [r7, #20]
 8010812:	f001 f9d5 	bl	8011bc0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010816:	4b23      	ldr	r3, [pc, #140]	; (80108a4 <tcp_listen_input+0x1e4>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	89db      	ldrh	r3, [r3, #14]
 801081c:	b29a      	uxth	r2, r3
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	3304      	adds	r3, #4
 8010838:	4618      	mov	r0, r3
 801083a:	f7fa fdc9 	bl	800b3d0 <ip4_route>
 801083e:	4601      	mov	r1, r0
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	3304      	adds	r3, #4
 8010844:	461a      	mov	r2, r3
 8010846:	4620      	mov	r0, r4
 8010848:	f7ff fa46 	bl	800fcd8 <tcp_eff_send_mss_netif>
 801084c:	4603      	mov	r3, r0
 801084e:	461a      	mov	r2, r3
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010854:	2112      	movs	r1, #18
 8010856:	6978      	ldr	r0, [r7, #20]
 8010858:	f002 f8e2 	bl	8012a20 <tcp_enqueue_flags>
 801085c:	4603      	mov	r3, r0
 801085e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d004      	beq.n	8010872 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010868:	2100      	movs	r1, #0
 801086a:	6978      	ldr	r0, [r7, #20]
 801086c:	f7fd ff52 	bl	800e714 <tcp_abandon>
      return;
 8010870:	e006      	b.n	8010880 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010872:	6978      	ldr	r0, [r7, #20]
 8010874:	f002 f9c2 	bl	8012bfc <tcp_output>
  return;
 8010878:	e001      	b.n	801087e <tcp_listen_input+0x1be>
    return;
 801087a:	bf00      	nop
 801087c:	e000      	b.n	8010880 <tcp_listen_input+0x1c0>
  return;
 801087e:	bf00      	nop
}
 8010880:	371c      	adds	r7, #28
 8010882:	46bd      	mov	sp, r7
 8010884:	bd90      	pop	{r4, r7, pc}
 8010886:	bf00      	nop
 8010888:	200068fc 	.word	0x200068fc
 801088c:	0801b488 	.word	0x0801b488
 8010890:	0801b6dc 	.word	0x0801b6dc
 8010894:	0801b530 	.word	0x0801b530
 8010898:	200068f4 	.word	0x200068f4
 801089c:	200068fa 	.word	0x200068fa
 80108a0:	200068f0 	.word	0x200068f0
 80108a4:	200068e0 	.word	0x200068e0
 80108a8:	20006a98 	.word	0x20006a98
 80108ac:	20006a9c 	.word	0x20006a9c
 80108b0:	20006a88 	.word	0x20006a88
 80108b4:	2000cfc8 	.word	0x2000cfc8
 80108b8:	2000cfc4 	.word	0x2000cfc4

080108bc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b086      	sub	sp, #24
 80108c0:	af04      	add	r7, sp, #16
 80108c2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80108c4:	4b2f      	ldr	r3, [pc, #188]	; (8010984 <tcp_timewait_input+0xc8>)
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	f003 0304 	and.w	r3, r3, #4
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d153      	bne.n	8010978 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d106      	bne.n	80108e4 <tcp_timewait_input+0x28>
 80108d6:	4b2c      	ldr	r3, [pc, #176]	; (8010988 <tcp_timewait_input+0xcc>)
 80108d8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80108dc:	492b      	ldr	r1, [pc, #172]	; (801098c <tcp_timewait_input+0xd0>)
 80108de:	482c      	ldr	r0, [pc, #176]	; (8010990 <tcp_timewait_input+0xd4>)
 80108e0:	f004 fea6 	bl	8015630 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80108e4:	4b27      	ldr	r3, [pc, #156]	; (8010984 <tcp_timewait_input+0xc8>)
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	f003 0302 	and.w	r3, r3, #2
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d02a      	beq.n	8010946 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80108f0:	4b28      	ldr	r3, [pc, #160]	; (8010994 <tcp_timewait_input+0xd8>)
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f8:	1ad3      	subs	r3, r2, r3
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	db2d      	blt.n	801095a <tcp_timewait_input+0x9e>
 80108fe:	4b25      	ldr	r3, [pc, #148]	; (8010994 <tcp_timewait_input+0xd8>)
 8010900:	681a      	ldr	r2, [r3, #0]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010906:	6879      	ldr	r1, [r7, #4]
 8010908:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801090a:	440b      	add	r3, r1
 801090c:	1ad3      	subs	r3, r2, r3
 801090e:	2b00      	cmp	r3, #0
 8010910:	dc23      	bgt.n	801095a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010912:	4b21      	ldr	r3, [pc, #132]	; (8010998 <tcp_timewait_input+0xdc>)
 8010914:	6819      	ldr	r1, [r3, #0]
 8010916:	4b21      	ldr	r3, [pc, #132]	; (801099c <tcp_timewait_input+0xe0>)
 8010918:	881b      	ldrh	r3, [r3, #0]
 801091a:	461a      	mov	r2, r3
 801091c:	4b1d      	ldr	r3, [pc, #116]	; (8010994 <tcp_timewait_input+0xd8>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010922:	4b1f      	ldr	r3, [pc, #124]	; (80109a0 <tcp_timewait_input+0xe4>)
 8010924:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010926:	885b      	ldrh	r3, [r3, #2]
 8010928:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801092a:	4a1d      	ldr	r2, [pc, #116]	; (80109a0 <tcp_timewait_input+0xe4>)
 801092c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801092e:	8812      	ldrh	r2, [r2, #0]
 8010930:	b292      	uxth	r2, r2
 8010932:	9202      	str	r2, [sp, #8]
 8010934:	9301      	str	r3, [sp, #4]
 8010936:	4b1b      	ldr	r3, [pc, #108]	; (80109a4 <tcp_timewait_input+0xe8>)
 8010938:	9300      	str	r3, [sp, #0]
 801093a:	4b1b      	ldr	r3, [pc, #108]	; (80109a8 <tcp_timewait_input+0xec>)
 801093c:	4602      	mov	r2, r0
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f002 ff10 	bl	8013764 <tcp_rst>
      return;
 8010944:	e01b      	b.n	801097e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010946:	4b0f      	ldr	r3, [pc, #60]	; (8010984 <tcp_timewait_input+0xc8>)
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	f003 0301 	and.w	r3, r3, #1
 801094e:	2b00      	cmp	r3, #0
 8010950:	d003      	beq.n	801095a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010952:	4b16      	ldr	r3, [pc, #88]	; (80109ac <tcp_timewait_input+0xf0>)
 8010954:	681a      	ldr	r2, [r3, #0]
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801095a:	4b10      	ldr	r3, [pc, #64]	; (801099c <tcp_timewait_input+0xe0>)
 801095c:	881b      	ldrh	r3, [r3, #0]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d00c      	beq.n	801097c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	8b5b      	ldrh	r3, [r3, #26]
 8010966:	f043 0302 	orr.w	r3, r3, #2
 801096a:	b29a      	uxth	r2, r3
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f002 f943 	bl	8012bfc <tcp_output>
  }
  return;
 8010976:	e001      	b.n	801097c <tcp_timewait_input+0xc0>
    return;
 8010978:	bf00      	nop
 801097a:	e000      	b.n	801097e <tcp_timewait_input+0xc2>
  return;
 801097c:	bf00      	nop
}
 801097e:	3708      	adds	r7, #8
 8010980:	46bd      	mov	sp, r7
 8010982:	bd80      	pop	{r7, pc}
 8010984:	200068fc 	.word	0x200068fc
 8010988:	0801b488 	.word	0x0801b488
 801098c:	0801b6fc 	.word	0x0801b6fc
 8010990:	0801b530 	.word	0x0801b530
 8010994:	200068f0 	.word	0x200068f0
 8010998:	200068f4 	.word	0x200068f4
 801099c:	200068fa 	.word	0x200068fa
 80109a0:	200068e0 	.word	0x200068e0
 80109a4:	20006a98 	.word	0x20006a98
 80109a8:	20006a9c 	.word	0x20006a9c
 80109ac:	2000cfcc 	.word	0x2000cfcc

080109b0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80109b0:	b590      	push	{r4, r7, lr}
 80109b2:	b08d      	sub	sp, #52	; 0x34
 80109b4:	af04      	add	r7, sp, #16
 80109b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80109b8:	2300      	movs	r3, #0
 80109ba:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80109bc:	2300      	movs	r3, #0
 80109be:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d106      	bne.n	80109d4 <tcp_process+0x24>
 80109c6:	4ba5      	ldr	r3, [pc, #660]	; (8010c5c <tcp_process+0x2ac>)
 80109c8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80109cc:	49a4      	ldr	r1, [pc, #656]	; (8010c60 <tcp_process+0x2b0>)
 80109ce:	48a5      	ldr	r0, [pc, #660]	; (8010c64 <tcp_process+0x2b4>)
 80109d0:	f004 fe2e 	bl	8015630 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80109d4:	4ba4      	ldr	r3, [pc, #656]	; (8010c68 <tcp_process+0x2b8>)
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	f003 0304 	and.w	r3, r3, #4
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d04e      	beq.n	8010a7e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	7d1b      	ldrb	r3, [r3, #20]
 80109e4:	2b02      	cmp	r3, #2
 80109e6:	d108      	bne.n	80109fa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80109ec:	4b9f      	ldr	r3, [pc, #636]	; (8010c6c <tcp_process+0x2bc>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d123      	bne.n	8010a3c <tcp_process+0x8c>
        acceptable = 1;
 80109f4:	2301      	movs	r3, #1
 80109f6:	76fb      	strb	r3, [r7, #27]
 80109f8:	e020      	b.n	8010a3c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109fe:	4b9c      	ldr	r3, [pc, #624]	; (8010c70 <tcp_process+0x2c0>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d102      	bne.n	8010a0c <tcp_process+0x5c>
        acceptable = 1;
 8010a06:	2301      	movs	r3, #1
 8010a08:	76fb      	strb	r3, [r7, #27]
 8010a0a:	e017      	b.n	8010a3c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010a0c:	4b98      	ldr	r3, [pc, #608]	; (8010c70 <tcp_process+0x2c0>)
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a14:	1ad3      	subs	r3, r2, r3
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	db10      	blt.n	8010a3c <tcp_process+0x8c>
 8010a1a:	4b95      	ldr	r3, [pc, #596]	; (8010c70 <tcp_process+0x2c0>)
 8010a1c:	681a      	ldr	r2, [r3, #0]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a22:	6879      	ldr	r1, [r7, #4]
 8010a24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a26:	440b      	add	r3, r1
 8010a28:	1ad3      	subs	r3, r2, r3
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	dc06      	bgt.n	8010a3c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	8b5b      	ldrh	r3, [r3, #26]
 8010a32:	f043 0302 	orr.w	r3, r3, #2
 8010a36:	b29a      	uxth	r2, r3
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010a3c:	7efb      	ldrb	r3, [r7, #27]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d01b      	beq.n	8010a7a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	7d1b      	ldrb	r3, [r3, #20]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d106      	bne.n	8010a58 <tcp_process+0xa8>
 8010a4a:	4b84      	ldr	r3, [pc, #528]	; (8010c5c <tcp_process+0x2ac>)
 8010a4c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010a50:	4988      	ldr	r1, [pc, #544]	; (8010c74 <tcp_process+0x2c4>)
 8010a52:	4884      	ldr	r0, [pc, #528]	; (8010c64 <tcp_process+0x2b4>)
 8010a54:	f004 fdec 	bl	8015630 <iprintf>
      recv_flags |= TF_RESET;
 8010a58:	4b87      	ldr	r3, [pc, #540]	; (8010c78 <tcp_process+0x2c8>)
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	f043 0308 	orr.w	r3, r3, #8
 8010a60:	b2da      	uxtb	r2, r3
 8010a62:	4b85      	ldr	r3, [pc, #532]	; (8010c78 <tcp_process+0x2c8>)
 8010a64:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	8b5b      	ldrh	r3, [r3, #26]
 8010a6a:	f023 0301 	bic.w	r3, r3, #1
 8010a6e:	b29a      	uxth	r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010a74:	f06f 030d 	mvn.w	r3, #13
 8010a78:	e37a      	b.n	8011170 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	e378      	b.n	8011170 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010a7e:	4b7a      	ldr	r3, [pc, #488]	; (8010c68 <tcp_process+0x2b8>)
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	f003 0302 	and.w	r3, r3, #2
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d010      	beq.n	8010aac <tcp_process+0xfc>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	7d1b      	ldrb	r3, [r3, #20]
 8010a8e:	2b02      	cmp	r3, #2
 8010a90:	d00c      	beq.n	8010aac <tcp_process+0xfc>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	7d1b      	ldrb	r3, [r3, #20]
 8010a96:	2b03      	cmp	r3, #3
 8010a98:	d008      	beq.n	8010aac <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	8b5b      	ldrh	r3, [r3, #26]
 8010a9e:	f043 0302 	orr.w	r3, r3, #2
 8010aa2:	b29a      	uxth	r2, r3
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	e361      	b.n	8011170 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	8b5b      	ldrh	r3, [r3, #26]
 8010ab0:	f003 0310 	and.w	r3, r3, #16
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d103      	bne.n	8010ac0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010ab8:	4b70      	ldr	r3, [pc, #448]	; (8010c7c <tcp_process+0x2cc>)
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
  pcb->persist_probe = 0;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2200      	movs	r2, #0
 8010acc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f001 f875 	bl	8011bc0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	7d1b      	ldrb	r3, [r3, #20]
 8010ada:	3b02      	subs	r3, #2
 8010adc:	2b07      	cmp	r3, #7
 8010ade:	f200 8337 	bhi.w	8011150 <tcp_process+0x7a0>
 8010ae2:	a201      	add	r2, pc, #4	; (adr r2, 8010ae8 <tcp_process+0x138>)
 8010ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae8:	08010b09 	.word	0x08010b09
 8010aec:	08010d39 	.word	0x08010d39
 8010af0:	08010eb1 	.word	0x08010eb1
 8010af4:	08010edb 	.word	0x08010edb
 8010af8:	08010fff 	.word	0x08010fff
 8010afc:	08010eb1 	.word	0x08010eb1
 8010b00:	0801108b 	.word	0x0801108b
 8010b04:	0801111b 	.word	0x0801111b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010b08:	4b57      	ldr	r3, [pc, #348]	; (8010c68 <tcp_process+0x2b8>)
 8010b0a:	781b      	ldrb	r3, [r3, #0]
 8010b0c:	f003 0310 	and.w	r3, r3, #16
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	f000 80e4 	beq.w	8010cde <tcp_process+0x32e>
 8010b16:	4b54      	ldr	r3, [pc, #336]	; (8010c68 <tcp_process+0x2b8>)
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	f003 0302 	and.w	r3, r3, #2
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	f000 80dd 	beq.w	8010cde <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b28:	1c5a      	adds	r2, r3, #1
 8010b2a:	4b50      	ldr	r3, [pc, #320]	; (8010c6c <tcp_process+0x2bc>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	f040 80d5 	bne.w	8010cde <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010b34:	4b4e      	ldr	r3, [pc, #312]	; (8010c70 <tcp_process+0x2c0>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	1c5a      	adds	r2, r3, #1
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010b46:	4b49      	ldr	r3, [pc, #292]	; (8010c6c <tcp_process+0x2bc>)
 8010b48:	681a      	ldr	r2, [r3, #0]
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010b4e:	4b4c      	ldr	r3, [pc, #304]	; (8010c80 <tcp_process+0x2d0>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	89db      	ldrh	r3, [r3, #14]
 8010b54:	b29a      	uxth	r2, r3
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010b68:	4b41      	ldr	r3, [pc, #260]	; (8010c70 <tcp_process+0x2c0>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	1e5a      	subs	r2, r3, #1
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2204      	movs	r2, #4
 8010b76:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	3304      	adds	r3, #4
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7fa fc25 	bl	800b3d0 <ip4_route>
 8010b86:	4601      	mov	r1, r0
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	3304      	adds	r3, #4
 8010b8c:	461a      	mov	r2, r3
 8010b8e:	4620      	mov	r0, r4
 8010b90:	f7ff f8a2 	bl	800fcd8 <tcp_eff_send_mss_netif>
 8010b94:	4603      	mov	r3, r0
 8010b96:	461a      	mov	r2, r3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ba0:	009a      	lsls	r2, r3, #2
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ba6:	005b      	lsls	r3, r3, #1
 8010ba8:	f241 111c 	movw	r1, #4380	; 0x111c
 8010bac:	428b      	cmp	r3, r1
 8010bae:	bf38      	it	cc
 8010bb0:	460b      	movcc	r3, r1
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d204      	bcs.n	8010bc0 <tcp_process+0x210>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bba:	009b      	lsls	r3, r3, #2
 8010bbc:	b29b      	uxth	r3, r3
 8010bbe:	e00d      	b.n	8010bdc <tcp_process+0x22c>
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bc4:	005b      	lsls	r3, r3, #1
 8010bc6:	f241 121c 	movw	r2, #4380	; 0x111c
 8010bca:	4293      	cmp	r3, r2
 8010bcc:	d904      	bls.n	8010bd8 <tcp_process+0x228>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bd2:	005b      	lsls	r3, r3, #1
 8010bd4:	b29b      	uxth	r3, r3
 8010bd6:	e001      	b.n	8010bdc <tcp_process+0x22c>
 8010bd8:	f241 131c 	movw	r3, #4380	; 0x111c
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d106      	bne.n	8010bfa <tcp_process+0x24a>
 8010bec:	4b1b      	ldr	r3, [pc, #108]	; (8010c5c <tcp_process+0x2ac>)
 8010bee:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010bf2:	4924      	ldr	r1, [pc, #144]	; (8010c84 <tcp_process+0x2d4>)
 8010bf4:	481b      	ldr	r0, [pc, #108]	; (8010c64 <tcp_process+0x2b4>)
 8010bf6:	f004 fd1b 	bl	8015630 <iprintf>
        --pcb->snd_queuelen;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c00:	3b01      	subs	r3, #1
 8010c02:	b29a      	uxth	r2, r3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c0e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010c10:	69fb      	ldr	r3, [r7, #28]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d111      	bne.n	8010c3a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c1a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010c1c:	69fb      	ldr	r3, [r7, #28]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d106      	bne.n	8010c30 <tcp_process+0x280>
 8010c22:	4b0e      	ldr	r3, [pc, #56]	; (8010c5c <tcp_process+0x2ac>)
 8010c24:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010c28:	4917      	ldr	r1, [pc, #92]	; (8010c88 <tcp_process+0x2d8>)
 8010c2a:	480e      	ldr	r0, [pc, #56]	; (8010c64 <tcp_process+0x2b4>)
 8010c2c:	f004 fd00 	bl	8015630 <iprintf>
          pcb->unsent = rseg->next;
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	681a      	ldr	r2, [r3, #0]
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	66da      	str	r2, [r3, #108]	; 0x6c
 8010c38:	e003      	b.n	8010c42 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010c3a:	69fb      	ldr	r3, [r7, #28]
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010c42:	69f8      	ldr	r0, [r7, #28]
 8010c44:	f7fe fcad 	bl	800f5a2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d11d      	bne.n	8010c8c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c56:	861a      	strh	r2, [r3, #48]	; 0x30
 8010c58:	e01f      	b.n	8010c9a <tcp_process+0x2ea>
 8010c5a:	bf00      	nop
 8010c5c:	0801b488 	.word	0x0801b488
 8010c60:	0801b71c 	.word	0x0801b71c
 8010c64:	0801b530 	.word	0x0801b530
 8010c68:	200068fc 	.word	0x200068fc
 8010c6c:	200068f4 	.word	0x200068f4
 8010c70:	200068f0 	.word	0x200068f0
 8010c74:	0801b738 	.word	0x0801b738
 8010c78:	200068fd 	.word	0x200068fd
 8010c7c:	2000cfcc 	.word	0x2000cfcc
 8010c80:	200068e0 	.word	0x200068e0
 8010c84:	0801b758 	.word	0x0801b758
 8010c88:	0801b770 	.word	0x0801b770
        } else {
          pcb->rtime = 0;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2200      	movs	r2, #0
 8010c90:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	2200      	movs	r2, #0
 8010c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d00a      	beq.n	8010cba <tcp_process+0x30a>
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010caa:	687a      	ldr	r2, [r7, #4]
 8010cac:	6910      	ldr	r0, [r2, #16]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	6879      	ldr	r1, [r7, #4]
 8010cb2:	4798      	blx	r3
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	76bb      	strb	r3, [r7, #26]
 8010cb8:	e001      	b.n	8010cbe <tcp_process+0x30e>
 8010cba:	2300      	movs	r3, #0
 8010cbc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010cbe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010cc2:	f113 0f0d 	cmn.w	r3, #13
 8010cc6:	d102      	bne.n	8010cce <tcp_process+0x31e>
          return ERR_ABRT;
 8010cc8:	f06f 030c 	mvn.w	r3, #12
 8010ccc:	e250      	b.n	8011170 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	8b5b      	ldrh	r3, [r3, #26]
 8010cd2:	f043 0302 	orr.w	r3, r3, #2
 8010cd6:	b29a      	uxth	r2, r3
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010cdc:	e23a      	b.n	8011154 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010cde:	4b9d      	ldr	r3, [pc, #628]	; (8010f54 <tcp_process+0x5a4>)
 8010ce0:	781b      	ldrb	r3, [r3, #0]
 8010ce2:	f003 0310 	and.w	r3, r3, #16
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	f000 8234 	beq.w	8011154 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cec:	4b9a      	ldr	r3, [pc, #616]	; (8010f58 <tcp_process+0x5a8>)
 8010cee:	6819      	ldr	r1, [r3, #0]
 8010cf0:	4b9a      	ldr	r3, [pc, #616]	; (8010f5c <tcp_process+0x5ac>)
 8010cf2:	881b      	ldrh	r3, [r3, #0]
 8010cf4:	461a      	mov	r2, r3
 8010cf6:	4b9a      	ldr	r3, [pc, #616]	; (8010f60 <tcp_process+0x5b0>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010cfc:	4b99      	ldr	r3, [pc, #612]	; (8010f64 <tcp_process+0x5b4>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d00:	885b      	ldrh	r3, [r3, #2]
 8010d02:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d04:	4a97      	ldr	r2, [pc, #604]	; (8010f64 <tcp_process+0x5b4>)
 8010d06:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d08:	8812      	ldrh	r2, [r2, #0]
 8010d0a:	b292      	uxth	r2, r2
 8010d0c:	9202      	str	r2, [sp, #8]
 8010d0e:	9301      	str	r3, [sp, #4]
 8010d10:	4b95      	ldr	r3, [pc, #596]	; (8010f68 <tcp_process+0x5b8>)
 8010d12:	9300      	str	r3, [sp, #0]
 8010d14:	4b95      	ldr	r3, [pc, #596]	; (8010f6c <tcp_process+0x5bc>)
 8010d16:	4602      	mov	r2, r0
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f002 fd23 	bl	8013764 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010d24:	2b05      	cmp	r3, #5
 8010d26:	f200 8215 	bhi.w	8011154 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f002 faed 	bl	8013310 <tcp_rexmit_rto>
      break;
 8010d36:	e20d      	b.n	8011154 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010d38:	4b86      	ldr	r3, [pc, #536]	; (8010f54 <tcp_process+0x5a4>)
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	f003 0310 	and.w	r3, r3, #16
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	f000 80a1 	beq.w	8010e88 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d46:	4b84      	ldr	r3, [pc, #528]	; (8010f58 <tcp_process+0x5a8>)
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d4e:	1ad3      	subs	r3, r2, r3
 8010d50:	3b01      	subs	r3, #1
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	db7e      	blt.n	8010e54 <tcp_process+0x4a4>
 8010d56:	4b80      	ldr	r3, [pc, #512]	; (8010f58 <tcp_process+0x5a8>)
 8010d58:	681a      	ldr	r2, [r3, #0]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d5e:	1ad3      	subs	r3, r2, r3
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	dc77      	bgt.n	8010e54 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2204      	movs	r2, #4
 8010d68:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d102      	bne.n	8010d78 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010d72:	23fa      	movs	r3, #250	; 0xfa
 8010d74:	76bb      	strb	r3, [r7, #26]
 8010d76:	e01d      	b.n	8010db4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d7c:	699b      	ldr	r3, [r3, #24]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d106      	bne.n	8010d90 <tcp_process+0x3e0>
 8010d82:	4b7b      	ldr	r3, [pc, #492]	; (8010f70 <tcp_process+0x5c0>)
 8010d84:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010d88:	497a      	ldr	r1, [pc, #488]	; (8010f74 <tcp_process+0x5c4>)
 8010d8a:	487b      	ldr	r0, [pc, #492]	; (8010f78 <tcp_process+0x5c8>)
 8010d8c:	f004 fc50 	bl	8015630 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d94:	699b      	ldr	r3, [r3, #24]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d00a      	beq.n	8010db0 <tcp_process+0x400>
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d9e:	699b      	ldr	r3, [r3, #24]
 8010da0:	687a      	ldr	r2, [r7, #4]
 8010da2:	6910      	ldr	r0, [r2, #16]
 8010da4:	2200      	movs	r2, #0
 8010da6:	6879      	ldr	r1, [r7, #4]
 8010da8:	4798      	blx	r3
 8010daa:	4603      	mov	r3, r0
 8010dac:	76bb      	strb	r3, [r7, #26]
 8010dae:	e001      	b.n	8010db4 <tcp_process+0x404>
 8010db0:	23f0      	movs	r3, #240	; 0xf0
 8010db2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010db4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d00a      	beq.n	8010dd2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010dbc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010dc0:	f113 0f0d 	cmn.w	r3, #13
 8010dc4:	d002      	beq.n	8010dcc <tcp_process+0x41c>
              tcp_abort(pcb);
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f7fd fd58 	bl	800e87c <tcp_abort>
            }
            return ERR_ABRT;
 8010dcc:	f06f 030c 	mvn.w	r3, #12
 8010dd0:	e1ce      	b.n	8011170 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	f000 fa58 	bl	8011288 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010dd8:	4b68      	ldr	r3, [pc, #416]	; (8010f7c <tcp_process+0x5cc>)
 8010dda:	881b      	ldrh	r3, [r3, #0]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d005      	beq.n	8010dec <tcp_process+0x43c>
            recv_acked--;
 8010de0:	4b66      	ldr	r3, [pc, #408]	; (8010f7c <tcp_process+0x5cc>)
 8010de2:	881b      	ldrh	r3, [r3, #0]
 8010de4:	3b01      	subs	r3, #1
 8010de6:	b29a      	uxth	r2, r3
 8010de8:	4b64      	ldr	r3, [pc, #400]	; (8010f7c <tcp_process+0x5cc>)
 8010dea:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010df0:	009a      	lsls	r2, r3, #2
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010df6:	005b      	lsls	r3, r3, #1
 8010df8:	f241 111c 	movw	r1, #4380	; 0x111c
 8010dfc:	428b      	cmp	r3, r1
 8010dfe:	bf38      	it	cc
 8010e00:	460b      	movcc	r3, r1
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d204      	bcs.n	8010e10 <tcp_process+0x460>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e0a:	009b      	lsls	r3, r3, #2
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	e00d      	b.n	8010e2c <tcp_process+0x47c>
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e14:	005b      	lsls	r3, r3, #1
 8010e16:	f241 121c 	movw	r2, #4380	; 0x111c
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	d904      	bls.n	8010e28 <tcp_process+0x478>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e22:	005b      	lsls	r3, r3, #1
 8010e24:	b29b      	uxth	r3, r3
 8010e26:	e001      	b.n	8010e2c <tcp_process+0x47c>
 8010e28:	f241 131c 	movw	r3, #4380	; 0x111c
 8010e2c:	687a      	ldr	r2, [r7, #4]
 8010e2e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010e32:	4b53      	ldr	r3, [pc, #332]	; (8010f80 <tcp_process+0x5d0>)
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	f003 0320 	and.w	r3, r3, #32
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d037      	beq.n	8010eae <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	8b5b      	ldrh	r3, [r3, #26]
 8010e42:	f043 0302 	orr.w	r3, r3, #2
 8010e46:	b29a      	uxth	r2, r3
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2207      	movs	r2, #7
 8010e50:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010e52:	e02c      	b.n	8010eae <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e54:	4b40      	ldr	r3, [pc, #256]	; (8010f58 <tcp_process+0x5a8>)
 8010e56:	6819      	ldr	r1, [r3, #0]
 8010e58:	4b40      	ldr	r3, [pc, #256]	; (8010f5c <tcp_process+0x5ac>)
 8010e5a:	881b      	ldrh	r3, [r3, #0]
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	4b40      	ldr	r3, [pc, #256]	; (8010f60 <tcp_process+0x5b0>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e64:	4b3f      	ldr	r3, [pc, #252]	; (8010f64 <tcp_process+0x5b4>)
 8010e66:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e68:	885b      	ldrh	r3, [r3, #2]
 8010e6a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e6c:	4a3d      	ldr	r2, [pc, #244]	; (8010f64 <tcp_process+0x5b4>)
 8010e6e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e70:	8812      	ldrh	r2, [r2, #0]
 8010e72:	b292      	uxth	r2, r2
 8010e74:	9202      	str	r2, [sp, #8]
 8010e76:	9301      	str	r3, [sp, #4]
 8010e78:	4b3b      	ldr	r3, [pc, #236]	; (8010f68 <tcp_process+0x5b8>)
 8010e7a:	9300      	str	r3, [sp, #0]
 8010e7c:	4b3b      	ldr	r3, [pc, #236]	; (8010f6c <tcp_process+0x5bc>)
 8010e7e:	4602      	mov	r2, r0
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f002 fc6f 	bl	8013764 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010e86:	e167      	b.n	8011158 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010e88:	4b32      	ldr	r3, [pc, #200]	; (8010f54 <tcp_process+0x5a4>)
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	f003 0302 	and.w	r3, r3, #2
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	f000 8161 	beq.w	8011158 <tcp_process+0x7a8>
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e9a:	1e5a      	subs	r2, r3, #1
 8010e9c:	4b30      	ldr	r3, [pc, #192]	; (8010f60 <tcp_process+0x5b0>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	f040 8159 	bne.w	8011158 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f002 fa54 	bl	8013354 <tcp_rexmit>
      break;
 8010eac:	e154      	b.n	8011158 <tcp_process+0x7a8>
 8010eae:	e153      	b.n	8011158 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f000 f9e9 	bl	8011288 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010eb6:	4b32      	ldr	r3, [pc, #200]	; (8010f80 <tcp_process+0x5d0>)
 8010eb8:	781b      	ldrb	r3, [r3, #0]
 8010eba:	f003 0320 	and.w	r3, r3, #32
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	f000 814c 	beq.w	801115c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	8b5b      	ldrh	r3, [r3, #26]
 8010ec8:	f043 0302 	orr.w	r3, r3, #2
 8010ecc:	b29a      	uxth	r2, r3
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2207      	movs	r2, #7
 8010ed6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010ed8:	e140      	b.n	801115c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f000 f9d4 	bl	8011288 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010ee0:	4b27      	ldr	r3, [pc, #156]	; (8010f80 <tcp_process+0x5d0>)
 8010ee2:	781b      	ldrb	r3, [r3, #0]
 8010ee4:	f003 0320 	and.w	r3, r3, #32
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d071      	beq.n	8010fd0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010eec:	4b19      	ldr	r3, [pc, #100]	; (8010f54 <tcp_process+0x5a4>)
 8010eee:	781b      	ldrb	r3, [r3, #0]
 8010ef0:	f003 0310 	and.w	r3, r3, #16
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d060      	beq.n	8010fba <tcp_process+0x60a>
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010efc:	4b16      	ldr	r3, [pc, #88]	; (8010f58 <tcp_process+0x5a8>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	429a      	cmp	r2, r3
 8010f02:	d15a      	bne.n	8010fba <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d156      	bne.n	8010fba <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	8b5b      	ldrh	r3, [r3, #26]
 8010f10:	f043 0302 	orr.w	r3, r3, #2
 8010f14:	b29a      	uxth	r2, r3
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f7fe fde6 	bl	800faec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010f20:	4b18      	ldr	r3, [pc, #96]	; (8010f84 <tcp_process+0x5d4>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	687a      	ldr	r2, [r7, #4]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d105      	bne.n	8010f36 <tcp_process+0x586>
 8010f2a:	4b16      	ldr	r3, [pc, #88]	; (8010f84 <tcp_process+0x5d4>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	68db      	ldr	r3, [r3, #12]
 8010f30:	4a14      	ldr	r2, [pc, #80]	; (8010f84 <tcp_process+0x5d4>)
 8010f32:	6013      	str	r3, [r2, #0]
 8010f34:	e02e      	b.n	8010f94 <tcp_process+0x5e4>
 8010f36:	4b13      	ldr	r3, [pc, #76]	; (8010f84 <tcp_process+0x5d4>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	617b      	str	r3, [r7, #20]
 8010f3c:	e027      	b.n	8010f8e <tcp_process+0x5de>
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	68db      	ldr	r3, [r3, #12]
 8010f42:	687a      	ldr	r2, [r7, #4]
 8010f44:	429a      	cmp	r2, r3
 8010f46:	d11f      	bne.n	8010f88 <tcp_process+0x5d8>
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	68da      	ldr	r2, [r3, #12]
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	60da      	str	r2, [r3, #12]
 8010f50:	e020      	b.n	8010f94 <tcp_process+0x5e4>
 8010f52:	bf00      	nop
 8010f54:	200068fc 	.word	0x200068fc
 8010f58:	200068f4 	.word	0x200068f4
 8010f5c:	200068fa 	.word	0x200068fa
 8010f60:	200068f0 	.word	0x200068f0
 8010f64:	200068e0 	.word	0x200068e0
 8010f68:	20006a98 	.word	0x20006a98
 8010f6c:	20006a9c 	.word	0x20006a9c
 8010f70:	0801b488 	.word	0x0801b488
 8010f74:	0801b784 	.word	0x0801b784
 8010f78:	0801b530 	.word	0x0801b530
 8010f7c:	200068f8 	.word	0x200068f8
 8010f80:	200068fd 	.word	0x200068fd
 8010f84:	2000cfc8 	.word	0x2000cfc8
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	68db      	ldr	r3, [r3, #12]
 8010f8c:	617b      	str	r3, [r7, #20]
 8010f8e:	697b      	ldr	r3, [r7, #20]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d1d4      	bne.n	8010f3e <tcp_process+0x58e>
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2200      	movs	r2, #0
 8010f98:	60da      	str	r2, [r3, #12]
 8010f9a:	4b77      	ldr	r3, [pc, #476]	; (8011178 <tcp_process+0x7c8>)
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	220a      	movs	r2, #10
 8010fa4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010fa6:	4b75      	ldr	r3, [pc, #468]	; (801117c <tcp_process+0x7cc>)
 8010fa8:	681a      	ldr	r2, [r3, #0]
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	60da      	str	r2, [r3, #12]
 8010fae:	4a73      	ldr	r2, [pc, #460]	; (801117c <tcp_process+0x7cc>)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6013      	str	r3, [r2, #0]
 8010fb4:	f002 fd98 	bl	8013ae8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010fb8:	e0d2      	b.n	8011160 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	8b5b      	ldrh	r3, [r3, #26]
 8010fbe:	f043 0302 	orr.w	r3, r3, #2
 8010fc2:	b29a      	uxth	r2, r3
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2208      	movs	r2, #8
 8010fcc:	751a      	strb	r2, [r3, #20]
      break;
 8010fce:	e0c7      	b.n	8011160 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010fd0:	4b6b      	ldr	r3, [pc, #428]	; (8011180 <tcp_process+0x7d0>)
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	f003 0310 	and.w	r3, r3, #16
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	f000 80c1 	beq.w	8011160 <tcp_process+0x7b0>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010fe2:	4b68      	ldr	r3, [pc, #416]	; (8011184 <tcp_process+0x7d4>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	f040 80ba 	bne.w	8011160 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	f040 80b5 	bne.w	8011160 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2206      	movs	r2, #6
 8010ffa:	751a      	strb	r2, [r3, #20]
      break;
 8010ffc:	e0b0      	b.n	8011160 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f000 f942 	bl	8011288 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011004:	4b60      	ldr	r3, [pc, #384]	; (8011188 <tcp_process+0x7d8>)
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	f003 0320 	and.w	r3, r3, #32
 801100c:	2b00      	cmp	r3, #0
 801100e:	f000 80a9 	beq.w	8011164 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	8b5b      	ldrh	r3, [r3, #26]
 8011016:	f043 0302 	orr.w	r3, r3, #2
 801101a:	b29a      	uxth	r2, r3
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f7fe fd63 	bl	800faec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011026:	4b59      	ldr	r3, [pc, #356]	; (801118c <tcp_process+0x7dc>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	687a      	ldr	r2, [r7, #4]
 801102c:	429a      	cmp	r2, r3
 801102e:	d105      	bne.n	801103c <tcp_process+0x68c>
 8011030:	4b56      	ldr	r3, [pc, #344]	; (801118c <tcp_process+0x7dc>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	68db      	ldr	r3, [r3, #12]
 8011036:	4a55      	ldr	r2, [pc, #340]	; (801118c <tcp_process+0x7dc>)
 8011038:	6013      	str	r3, [r2, #0]
 801103a:	e013      	b.n	8011064 <tcp_process+0x6b4>
 801103c:	4b53      	ldr	r3, [pc, #332]	; (801118c <tcp_process+0x7dc>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	613b      	str	r3, [r7, #16]
 8011042:	e00c      	b.n	801105e <tcp_process+0x6ae>
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	68db      	ldr	r3, [r3, #12]
 8011048:	687a      	ldr	r2, [r7, #4]
 801104a:	429a      	cmp	r2, r3
 801104c:	d104      	bne.n	8011058 <tcp_process+0x6a8>
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	68da      	ldr	r2, [r3, #12]
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	60da      	str	r2, [r3, #12]
 8011056:	e005      	b.n	8011064 <tcp_process+0x6b4>
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	68db      	ldr	r3, [r3, #12]
 801105c:	613b      	str	r3, [r7, #16]
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d1ef      	bne.n	8011044 <tcp_process+0x694>
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2200      	movs	r2, #0
 8011068:	60da      	str	r2, [r3, #12]
 801106a:	4b43      	ldr	r3, [pc, #268]	; (8011178 <tcp_process+0x7c8>)
 801106c:	2201      	movs	r2, #1
 801106e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	220a      	movs	r2, #10
 8011074:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011076:	4b41      	ldr	r3, [pc, #260]	; (801117c <tcp_process+0x7cc>)
 8011078:	681a      	ldr	r2, [r3, #0]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	60da      	str	r2, [r3, #12]
 801107e:	4a3f      	ldr	r2, [pc, #252]	; (801117c <tcp_process+0x7cc>)
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6013      	str	r3, [r2, #0]
 8011084:	f002 fd30 	bl	8013ae8 <tcp_timer_needed>
      }
      break;
 8011088:	e06c      	b.n	8011164 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f000 f8fc 	bl	8011288 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011090:	4b3b      	ldr	r3, [pc, #236]	; (8011180 <tcp_process+0x7d0>)
 8011092:	781b      	ldrb	r3, [r3, #0]
 8011094:	f003 0310 	and.w	r3, r3, #16
 8011098:	2b00      	cmp	r3, #0
 801109a:	d065      	beq.n	8011168 <tcp_process+0x7b8>
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80110a0:	4b38      	ldr	r3, [pc, #224]	; (8011184 <tcp_process+0x7d4>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d15f      	bne.n	8011168 <tcp_process+0x7b8>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d15b      	bne.n	8011168 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f7fe fd1b 	bl	800faec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80110b6:	4b35      	ldr	r3, [pc, #212]	; (801118c <tcp_process+0x7dc>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	687a      	ldr	r2, [r7, #4]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d105      	bne.n	80110cc <tcp_process+0x71c>
 80110c0:	4b32      	ldr	r3, [pc, #200]	; (801118c <tcp_process+0x7dc>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	68db      	ldr	r3, [r3, #12]
 80110c6:	4a31      	ldr	r2, [pc, #196]	; (801118c <tcp_process+0x7dc>)
 80110c8:	6013      	str	r3, [r2, #0]
 80110ca:	e013      	b.n	80110f4 <tcp_process+0x744>
 80110cc:	4b2f      	ldr	r3, [pc, #188]	; (801118c <tcp_process+0x7dc>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	60fb      	str	r3, [r7, #12]
 80110d2:	e00c      	b.n	80110ee <tcp_process+0x73e>
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	68db      	ldr	r3, [r3, #12]
 80110d8:	687a      	ldr	r2, [r7, #4]
 80110da:	429a      	cmp	r2, r3
 80110dc:	d104      	bne.n	80110e8 <tcp_process+0x738>
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	68da      	ldr	r2, [r3, #12]
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	60da      	str	r2, [r3, #12]
 80110e6:	e005      	b.n	80110f4 <tcp_process+0x744>
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	60fb      	str	r3, [r7, #12]
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d1ef      	bne.n	80110d4 <tcp_process+0x724>
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2200      	movs	r2, #0
 80110f8:	60da      	str	r2, [r3, #12]
 80110fa:	4b1f      	ldr	r3, [pc, #124]	; (8011178 <tcp_process+0x7c8>)
 80110fc:	2201      	movs	r2, #1
 80110fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	220a      	movs	r2, #10
 8011104:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011106:	4b1d      	ldr	r3, [pc, #116]	; (801117c <tcp_process+0x7cc>)
 8011108:	681a      	ldr	r2, [r3, #0]
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	60da      	str	r2, [r3, #12]
 801110e:	4a1b      	ldr	r2, [pc, #108]	; (801117c <tcp_process+0x7cc>)
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	6013      	str	r3, [r2, #0]
 8011114:	f002 fce8 	bl	8013ae8 <tcp_timer_needed>
      }
      break;
 8011118:	e026      	b.n	8011168 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f000 f8b4 	bl	8011288 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011120:	4b17      	ldr	r3, [pc, #92]	; (8011180 <tcp_process+0x7d0>)
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	f003 0310 	and.w	r3, r3, #16
 8011128:	2b00      	cmp	r3, #0
 801112a:	d01f      	beq.n	801116c <tcp_process+0x7bc>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011130:	4b14      	ldr	r3, [pc, #80]	; (8011184 <tcp_process+0x7d4>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	429a      	cmp	r2, r3
 8011136:	d119      	bne.n	801116c <tcp_process+0x7bc>
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801113c:	2b00      	cmp	r3, #0
 801113e:	d115      	bne.n	801116c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011140:	4b11      	ldr	r3, [pc, #68]	; (8011188 <tcp_process+0x7d8>)
 8011142:	781b      	ldrb	r3, [r3, #0]
 8011144:	f043 0310 	orr.w	r3, r3, #16
 8011148:	b2da      	uxtb	r2, r3
 801114a:	4b0f      	ldr	r3, [pc, #60]	; (8011188 <tcp_process+0x7d8>)
 801114c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801114e:	e00d      	b.n	801116c <tcp_process+0x7bc>
    default:
      break;
 8011150:	bf00      	nop
 8011152:	e00c      	b.n	801116e <tcp_process+0x7be>
      break;
 8011154:	bf00      	nop
 8011156:	e00a      	b.n	801116e <tcp_process+0x7be>
      break;
 8011158:	bf00      	nop
 801115a:	e008      	b.n	801116e <tcp_process+0x7be>
      break;
 801115c:	bf00      	nop
 801115e:	e006      	b.n	801116e <tcp_process+0x7be>
      break;
 8011160:	bf00      	nop
 8011162:	e004      	b.n	801116e <tcp_process+0x7be>
      break;
 8011164:	bf00      	nop
 8011166:	e002      	b.n	801116e <tcp_process+0x7be>
      break;
 8011168:	bf00      	nop
 801116a:	e000      	b.n	801116e <tcp_process+0x7be>
      break;
 801116c:	bf00      	nop
  }
  return ERR_OK;
 801116e:	2300      	movs	r3, #0
}
 8011170:	4618      	mov	r0, r3
 8011172:	3724      	adds	r7, #36	; 0x24
 8011174:	46bd      	mov	sp, r7
 8011176:	bd90      	pop	{r4, r7, pc}
 8011178:	2000cfc4 	.word	0x2000cfc4
 801117c:	2000cfd8 	.word	0x2000cfd8
 8011180:	200068fc 	.word	0x200068fc
 8011184:	200068f4 	.word	0x200068f4
 8011188:	200068fd 	.word	0x200068fd
 801118c:	2000cfc8 	.word	0x2000cfc8

08011190 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011190:	b5b0      	push	{r4, r5, r7, lr}
 8011192:	b086      	sub	sp, #24
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	60b9      	str	r1, [r7, #8]
 801119a:	607a      	str	r2, [r7, #4]
 801119c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801119e:	e03e      	b.n	801121e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	685b      	ldr	r3, [r3, #4]
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7fc fe58 	bl	800de64 <pbuf_clen>
 80111b4:	4603      	mov	r3, r0
 80111b6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111be:	8a7a      	ldrh	r2, [r7, #18]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d906      	bls.n	80111d2 <tcp_free_acked_segments+0x42>
 80111c4:	4b2a      	ldr	r3, [pc, #168]	; (8011270 <tcp_free_acked_segments+0xe0>)
 80111c6:	f240 4257 	movw	r2, #1111	; 0x457
 80111ca:	492a      	ldr	r1, [pc, #168]	; (8011274 <tcp_free_acked_segments+0xe4>)
 80111cc:	482a      	ldr	r0, [pc, #168]	; (8011278 <tcp_free_acked_segments+0xe8>)
 80111ce:	f004 fa2f 	bl	8015630 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80111d8:	8a7b      	ldrh	r3, [r7, #18]
 80111da:	1ad3      	subs	r3, r2, r3
 80111dc:	b29a      	uxth	r2, r3
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	891a      	ldrh	r2, [r3, #8]
 80111e8:	4b24      	ldr	r3, [pc, #144]	; (801127c <tcp_free_acked_segments+0xec>)
 80111ea:	881b      	ldrh	r3, [r3, #0]
 80111ec:	4413      	add	r3, r2
 80111ee:	b29a      	uxth	r2, r3
 80111f0:	4b22      	ldr	r3, [pc, #136]	; (801127c <tcp_free_acked_segments+0xec>)
 80111f2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80111f4:	6978      	ldr	r0, [r7, #20]
 80111f6:	f7fe f9d4 	bl	800f5a2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011200:	2b00      	cmp	r3, #0
 8011202:	d00c      	beq.n	801121e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d109      	bne.n	801121e <tcp_free_acked_segments+0x8e>
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d106      	bne.n	801121e <tcp_free_acked_segments+0x8e>
 8011210:	4b17      	ldr	r3, [pc, #92]	; (8011270 <tcp_free_acked_segments+0xe0>)
 8011212:	f240 4261 	movw	r2, #1121	; 0x461
 8011216:	491a      	ldr	r1, [pc, #104]	; (8011280 <tcp_free_acked_segments+0xf0>)
 8011218:	4817      	ldr	r0, [pc, #92]	; (8011278 <tcp_free_acked_segments+0xe8>)
 801121a:	f004 fa09 	bl	8015630 <iprintf>
  while (seg_list != NULL &&
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d020      	beq.n	8011266 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	68db      	ldr	r3, [r3, #12]
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	4618      	mov	r0, r3
 801122c:	f7fb fa13 	bl	800c656 <lwip_htonl>
 8011230:	4604      	mov	r4, r0
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	891b      	ldrh	r3, [r3, #8]
 8011236:	461d      	mov	r5, r3
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	899b      	ldrh	r3, [r3, #12]
 801123e:	b29b      	uxth	r3, r3
 8011240:	4618      	mov	r0, r3
 8011242:	f7fb f9f3 	bl	800c62c <lwip_htons>
 8011246:	4603      	mov	r3, r0
 8011248:	b2db      	uxtb	r3, r3
 801124a:	f003 0303 	and.w	r3, r3, #3
 801124e:	2b00      	cmp	r3, #0
 8011250:	d001      	beq.n	8011256 <tcp_free_acked_segments+0xc6>
 8011252:	2301      	movs	r3, #1
 8011254:	e000      	b.n	8011258 <tcp_free_acked_segments+0xc8>
 8011256:	2300      	movs	r3, #0
 8011258:	442b      	add	r3, r5
 801125a:	18e2      	adds	r2, r4, r3
 801125c:	4b09      	ldr	r3, [pc, #36]	; (8011284 <tcp_free_acked_segments+0xf4>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011262:	2b00      	cmp	r3, #0
 8011264:	dd9c      	ble.n	80111a0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011266:	68bb      	ldr	r3, [r7, #8]
}
 8011268:	4618      	mov	r0, r3
 801126a:	3718      	adds	r7, #24
 801126c:	46bd      	mov	sp, r7
 801126e:	bdb0      	pop	{r4, r5, r7, pc}
 8011270:	0801b488 	.word	0x0801b488
 8011274:	0801b7a4 	.word	0x0801b7a4
 8011278:	0801b530 	.word	0x0801b530
 801127c:	200068f8 	.word	0x200068f8
 8011280:	0801b7cc 	.word	0x0801b7cc
 8011284:	200068f4 	.word	0x200068f4

08011288 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011288:	b590      	push	{r4, r7, lr}
 801128a:	b08d      	sub	sp, #52	; 0x34
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011290:	2300      	movs	r3, #0
 8011292:	62bb      	str	r3, [r7, #40]	; 0x28

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d106      	bne.n	80112a8 <tcp_receive+0x20>
 801129a:	4ba5      	ldr	r3, [pc, #660]	; (8011530 <tcp_receive+0x2a8>)
 801129c:	f240 427b 	movw	r2, #1147	; 0x47b
 80112a0:	49a4      	ldr	r1, [pc, #656]	; (8011534 <tcp_receive+0x2ac>)
 80112a2:	48a5      	ldr	r0, [pc, #660]	; (8011538 <tcp_receive+0x2b0>)
 80112a4:	f004 f9c4 	bl	8015630 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	7d1b      	ldrb	r3, [r3, #20]
 80112ac:	2b03      	cmp	r3, #3
 80112ae:	d806      	bhi.n	80112be <tcp_receive+0x36>
 80112b0:	4b9f      	ldr	r3, [pc, #636]	; (8011530 <tcp_receive+0x2a8>)
 80112b2:	f240 427c 	movw	r2, #1148	; 0x47c
 80112b6:	49a1      	ldr	r1, [pc, #644]	; (801153c <tcp_receive+0x2b4>)
 80112b8:	489f      	ldr	r0, [pc, #636]	; (8011538 <tcp_receive+0x2b0>)
 80112ba:	f004 f9b9 	bl	8015630 <iprintf>

  if (flags & TCP_ACK) {
 80112be:	4ba0      	ldr	r3, [pc, #640]	; (8011540 <tcp_receive+0x2b8>)
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	f003 0310 	and.w	r3, r3, #16
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	f000 8258 	beq.w	801177c <tcp_receive+0x4f4>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80112d2:	461a      	mov	r2, r3
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112d8:	4413      	add	r3, r2
 80112da:	61fb      	str	r3, [r7, #28]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80112e0:	4b98      	ldr	r3, [pc, #608]	; (8011544 <tcp_receive+0x2bc>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	1ad3      	subs	r3, r2, r3
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	db1b      	blt.n	8011322 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80112ee:	4b95      	ldr	r3, [pc, #596]	; (8011544 <tcp_receive+0x2bc>)
 80112f0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d106      	bne.n	8011304 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80112fa:	4b93      	ldr	r3, [pc, #588]	; (8011548 <tcp_receive+0x2c0>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	1ad3      	subs	r3, r2, r3
 8011300:	2b00      	cmp	r3, #0
 8011302:	db0e      	blt.n	8011322 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011308:	4b8f      	ldr	r3, [pc, #572]	; (8011548 <tcp_receive+0x2c0>)
 801130a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801130c:	429a      	cmp	r2, r3
 801130e:	d125      	bne.n	801135c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011310:	4b8e      	ldr	r3, [pc, #568]	; (801154c <tcp_receive+0x2c4>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	89db      	ldrh	r3, [r3, #14]
 8011316:	b29a      	uxth	r2, r3
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801131e:	429a      	cmp	r2, r3
 8011320:	d91c      	bls.n	801135c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011322:	4b8a      	ldr	r3, [pc, #552]	; (801154c <tcp_receive+0x2c4>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	89db      	ldrh	r3, [r3, #14]
 8011328:	b29a      	uxth	r2, r3
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801133c:	429a      	cmp	r2, r3
 801133e:	d205      	bcs.n	801134c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801134c:	4b7d      	ldr	r3, [pc, #500]	; (8011544 <tcp_receive+0x2bc>)
 801134e:	681a      	ldr	r2, [r3, #0]
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011354:	4b7c      	ldr	r3, [pc, #496]	; (8011548 <tcp_receive+0x2c0>)
 8011356:	681a      	ldr	r2, [r3, #0]
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801135c:	4b7a      	ldr	r3, [pc, #488]	; (8011548 <tcp_receive+0x2c0>)
 801135e:	681a      	ldr	r2, [r3, #0]
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011364:	1ad3      	subs	r3, r2, r3
 8011366:	2b00      	cmp	r3, #0
 8011368:	dc58      	bgt.n	801141c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801136a:	4b79      	ldr	r3, [pc, #484]	; (8011550 <tcp_receive+0x2c8>)
 801136c:	881b      	ldrh	r3, [r3, #0]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d14b      	bne.n	801140a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011376:	687a      	ldr	r2, [r7, #4]
 8011378:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801137c:	4413      	add	r3, r2
 801137e:	69fa      	ldr	r2, [r7, #28]
 8011380:	429a      	cmp	r2, r3
 8011382:	d142      	bne.n	801140a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801138a:	2b00      	cmp	r3, #0
 801138c:	db3d      	blt.n	801140a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011392:	4b6d      	ldr	r3, [pc, #436]	; (8011548 <tcp_receive+0x2c0>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	429a      	cmp	r2, r3
 8011398:	d137      	bne.n	801140a <tcp_receive+0x182>
              found_dupack = 1;
 801139a:	2301      	movs	r3, #1
 801139c:	62bb      	str	r3, [r7, #40]	; 0x28
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80113a4:	2bff      	cmp	r3, #255	; 0xff
 80113a6:	d007      	beq.n	80113b8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80113ae:	3301      	adds	r3, #1
 80113b0:	b2da      	uxtb	r2, r3
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80113be:	2b03      	cmp	r3, #3
 80113c0:	d91b      	bls.n	80113fa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113cc:	4413      	add	r3, r2
 80113ce:	b29a      	uxth	r2, r3
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d30a      	bcc.n	80113f0 <tcp_receive+0x168>
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113e4:	4413      	add	r3, r2
 80113e6:	b29a      	uxth	r2, r3
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80113ee:	e004      	b.n	80113fa <tcp_receive+0x172>
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80113f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011400:	2b02      	cmp	r3, #2
 8011402:	d902      	bls.n	801140a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f002 f811 	bl	801342c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140c:	2b00      	cmp	r3, #0
 801140e:	f040 815e 	bne.w	80116ce <tcp_receive+0x446>
        pcb->dupacks = 0;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2200      	movs	r2, #0
 8011416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801141a:	e158      	b.n	80116ce <tcp_receive+0x446>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801141c:	4b4a      	ldr	r3, [pc, #296]	; (8011548 <tcp_receive+0x2c0>)
 801141e:	681a      	ldr	r2, [r3, #0]
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011424:	1ad3      	subs	r3, r2, r3
 8011426:	3b01      	subs	r3, #1
 8011428:	2b00      	cmp	r3, #0
 801142a:	f2c0 814b 	blt.w	80116c4 <tcp_receive+0x43c>
 801142e:	4b46      	ldr	r3, [pc, #280]	; (8011548 <tcp_receive+0x2c0>)
 8011430:	681a      	ldr	r2, [r3, #0]
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011436:	1ad3      	subs	r3, r2, r3
 8011438:	2b00      	cmp	r3, #0
 801143a:	f300 8143 	bgt.w	80116c4 <tcp_receive+0x43c>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	8b5b      	ldrh	r3, [r3, #26]
 8011442:	f003 0304 	and.w	r3, r3, #4
 8011446:	2b00      	cmp	r3, #0
 8011448:	d010      	beq.n	801146c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	8b5b      	ldrh	r3, [r3, #26]
 801144e:	f023 0304 	bic.w	r3, r3, #4
 8011452:	b29a      	uxth	r2, r3
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2200      	movs	r2, #0
 8011468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2200      	movs	r2, #0
 8011470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801147a:	10db      	asrs	r3, r3, #3
 801147c:	b21b      	sxth	r3, r3
 801147e:	b29a      	uxth	r2, r3
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011486:	b29b      	uxth	r3, r3
 8011488:	4413      	add	r3, r2
 801148a:	b29b      	uxth	r3, r3
 801148c:	b21a      	sxth	r2, r3
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011494:	4b2c      	ldr	r3, [pc, #176]	; (8011548 <tcp_receive+0x2c0>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	b29a      	uxth	r2, r3
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801149e:	b29b      	uxth	r3, r3
 80114a0:	1ad3      	subs	r3, r2, r3
 80114a2:	837b      	strh	r3, [r7, #26]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2200      	movs	r2, #0
 80114a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80114ac:	4b26      	ldr	r3, [pc, #152]	; (8011548 <tcp_receive+0x2c0>)
 80114ae:	681a      	ldr	r2, [r3, #0]
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	7d1b      	ldrb	r3, [r3, #20]
 80114b8:	2b03      	cmp	r3, #3
 80114ba:	f240 8094 	bls.w	80115e6 <tcp_receive+0x35e>
        if (pcb->cwnd < pcb->ssthresh) {
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d242      	bcs.n	8011554 <tcp_receive+0x2cc>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	8b5b      	ldrh	r3, [r3, #26]
 80114d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d001      	beq.n	80114de <tcp_receive+0x256>
 80114da:	2301      	movs	r3, #1
 80114dc:	e000      	b.n	80114e0 <tcp_receive+0x258>
 80114de:	2302      	movs	r3, #2
 80114e0:	767b      	strb	r3, [r7, #25]
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80114e2:	7e7b      	ldrb	r3, [r7, #25]
 80114e4:	b29a      	uxth	r2, r3
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114ea:	fb12 f303 	smulbb	r3, r2, r3
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	8b7a      	ldrh	r2, [r7, #26]
 80114f2:	4293      	cmp	r3, r2
 80114f4:	bf28      	it	cs
 80114f6:	4613      	movcs	r3, r2
 80114f8:	82fb      	strh	r3, [r7, #22]
          TCP_WND_INC(pcb->cwnd, increase);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011500:	8afb      	ldrh	r3, [r7, #22]
 8011502:	4413      	add	r3, r2
 8011504:	b29a      	uxth	r2, r3
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801150c:	429a      	cmp	r2, r3
 801150e:	d309      	bcc.n	8011524 <tcp_receive+0x29c>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011516:	8afb      	ldrh	r3, [r7, #22]
 8011518:	4413      	add	r3, r2
 801151a:	b29a      	uxth	r2, r3
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011522:	e060      	b.n	80115e6 <tcp_receive+0x35e>
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801152a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801152e:	e05a      	b.n	80115e6 <tcp_receive+0x35e>
 8011530:	0801b488 	.word	0x0801b488
 8011534:	0801b7ec 	.word	0x0801b7ec
 8011538:	0801b530 	.word	0x0801b530
 801153c:	0801b808 	.word	0x0801b808
 8011540:	200068fc 	.word	0x200068fc
 8011544:	200068f0 	.word	0x200068f0
 8011548:	200068f4 	.word	0x200068f4
 801154c:	200068e0 	.word	0x200068e0
 8011550:	200068fa 	.word	0x200068fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801155a:	8b7b      	ldrh	r3, [r7, #26]
 801155c:	4413      	add	r3, r2
 801155e:	b29a      	uxth	r2, r3
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011566:	429a      	cmp	r2, r3
 8011568:	d309      	bcc.n	801157e <tcp_receive+0x2f6>
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011570:	8b7b      	ldrh	r3, [r7, #26]
 8011572:	4413      	add	r3, r2
 8011574:	b29a      	uxth	r2, r3
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801157c:	e004      	b.n	8011588 <tcp_receive+0x300>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011594:	429a      	cmp	r2, r3
 8011596:	d326      	bcc.n	80115e6 <tcp_receive+0x35e>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80115a4:	1ad3      	subs	r3, r2, r3
 80115a6:	b29a      	uxth	r2, r3
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115b8:	4413      	add	r3, r2
 80115ba:	b29a      	uxth	r2, r3
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d30a      	bcc.n	80115dc <tcp_receive+0x354>
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115d0:	4413      	add	r3, r2
 80115d2:	b29a      	uxth	r2, r3
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80115da:	e004      	b.n	80115e6 <tcp_receive+0x35e>
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115ee:	4a91      	ldr	r2, [pc, #580]	; (8011834 <tcp_receive+0x5ac>)
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f7ff fdcd 	bl	8011190 <tcp_free_acked_segments>
 80115f6:	4602      	mov	r2, r0
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011604:	4a8c      	ldr	r2, [pc, #560]	; (8011838 <tcp_receive+0x5b0>)
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f7ff fdc2 	bl	8011190 <tcp_free_acked_segments>
 801160c:	4602      	mov	r2, r0
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011616:	2b00      	cmp	r3, #0
 8011618:	d104      	bne.n	8011624 <tcp_receive+0x39c>
        pcb->rtime = -1;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011620:	861a      	strh	r2, [r3, #48]	; 0x30
 8011622:	e002      	b.n	801162a <tcp_receive+0x3a2>
      } else {
        pcb->rtime = 0;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2200      	movs	r2, #0
 8011628:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2200      	movs	r2, #0
 801162e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011634:	2b00      	cmp	r3, #0
 8011636:	d103      	bne.n	8011640 <tcp_receive+0x3b8>
        pcb->unsent_oversize = 0;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2200      	movs	r2, #0
 801163c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011646:	4b7d      	ldr	r3, [pc, #500]	; (801183c <tcp_receive+0x5b4>)
 8011648:	881b      	ldrh	r3, [r3, #0]
 801164a:	4413      	add	r3, r2
 801164c:	b29a      	uxth	r2, r3
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	8b5b      	ldrh	r3, [r3, #26]
 8011658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801165c:	2b00      	cmp	r3, #0
 801165e:	d035      	beq.n	80116cc <tcp_receive+0x444>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011664:	2b00      	cmp	r3, #0
 8011666:	d118      	bne.n	801169a <tcp_receive+0x412>
          if ((pcb->unsent == NULL) ||
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801166c:	2b00      	cmp	r3, #0
 801166e:	d00c      	beq.n	801168a <tcp_receive+0x402>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011678:	68db      	ldr	r3, [r3, #12]
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	4618      	mov	r0, r3
 801167e:	f7fa ffea 	bl	800c656 <lwip_htonl>
 8011682:	4603      	mov	r3, r0
 8011684:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011686:	2b00      	cmp	r3, #0
 8011688:	dc20      	bgt.n	80116cc <tcp_receive+0x444>
            tcp_clear_flags(pcb, TF_RTO);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	8b5b      	ldrh	r3, [r3, #26]
 801168e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011692:	b29a      	uxth	r2, r3
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011698:	e018      	b.n	80116cc <tcp_receive+0x444>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116a2:	68db      	ldr	r3, [r3, #12]
 80116a4:	685b      	ldr	r3, [r3, #4]
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7fa ffd5 	bl	800c656 <lwip_htonl>
 80116ac:	4603      	mov	r3, r0
 80116ae:	1ae3      	subs	r3, r4, r3
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	dc0b      	bgt.n	80116cc <tcp_receive+0x444>
          tcp_clear_flags(pcb, TF_RTO);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	8b5b      	ldrh	r3, [r3, #26]
 80116b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80116bc:	b29a      	uxth	r2, r3
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116c2:	e003      	b.n	80116cc <tcp_receive+0x444>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f002 f89f 	bl	8013808 <tcp_send_empty_ack>
 80116ca:	e000      	b.n	80116ce <tcp_receive+0x446>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116cc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d052      	beq.n	801177c <tcp_receive+0x4f4>
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116da:	4b59      	ldr	r3, [pc, #356]	; (8011840 <tcp_receive+0x5b8>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	1ad3      	subs	r3, r2, r3
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	da4b      	bge.n	801177c <tcp_receive+0x4f4>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80116e4:	4b57      	ldr	r3, [pc, #348]	; (8011844 <tcp_receive+0x5bc>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	b29a      	uxth	r2, r3
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116ee:	b29b      	uxth	r3, r3
 80116f0:	1ad3      	subs	r3, r2, r3
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	85fb      	strh	r3, [r7, #46]	; 0x2e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80116f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80116fe:	10db      	asrs	r3, r3, #3
 8011700:	b21b      	sxth	r3, r3
 8011702:	b29b      	uxth	r3, r3
 8011704:	1ad3      	subs	r3, r2, r3
 8011706:	b29b      	uxth	r3, r3
 8011708:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pcb->sa = (s16_t)(pcb->sa + m);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011710:	b29a      	uxth	r2, r3
 8011712:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011714:	4413      	add	r3, r2
 8011716:	b29b      	uxth	r3, r3
 8011718:	b21a      	sxth	r2, r3
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801171e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8011722:	2b00      	cmp	r3, #0
 8011724:	da03      	bge.n	801172e <tcp_receive+0x4a6>
        m = (s16_t) - m;
 8011726:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011728:	425b      	negs	r3, r3
 801172a:	b29b      	uxth	r3, r3
 801172c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801172e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011736:	109b      	asrs	r3, r3, #2
 8011738:	b21b      	sxth	r3, r3
 801173a:	b29b      	uxth	r3, r3
 801173c:	1ad3      	subs	r3, r2, r3
 801173e:	b29b      	uxth	r3, r3
 8011740:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011748:	b29a      	uxth	r2, r3
 801174a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801174c:	4413      	add	r3, r2
 801174e:	b29b      	uxth	r3, r3
 8011750:	b21a      	sxth	r2, r3
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801175c:	10db      	asrs	r3, r3, #3
 801175e:	b21b      	sxth	r3, r3
 8011760:	b29a      	uxth	r2, r3
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011768:	b29b      	uxth	r3, r3
 801176a:	4413      	add	r3, r2
 801176c:	b29b      	uxth	r3, r3
 801176e:	b21a      	sxth	r2, r3
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2200      	movs	r2, #0
 801177a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801177c:	4b32      	ldr	r3, [pc, #200]	; (8011848 <tcp_receive+0x5c0>)
 801177e:	881b      	ldrh	r3, [r3, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	f000 81c7 	beq.w	8011b14 <tcp_receive+0x88c>
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	7d1b      	ldrb	r3, [r3, #20]
 801178a:	2b06      	cmp	r3, #6
 801178c:	f200 81c2 	bhi.w	8011b14 <tcp_receive+0x88c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011794:	4b2d      	ldr	r3, [pc, #180]	; (801184c <tcp_receive+0x5c4>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	1ad3      	subs	r3, r2, r3
 801179a:	3b01      	subs	r3, #1
 801179c:	2b00      	cmp	r3, #0
 801179e:	f2c0 8085 	blt.w	80118ac <tcp_receive+0x624>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117a6:	4b28      	ldr	r3, [pc, #160]	; (8011848 <tcp_receive+0x5c0>)
 80117a8:	881b      	ldrh	r3, [r3, #0]
 80117aa:	4619      	mov	r1, r3
 80117ac:	4b27      	ldr	r3, [pc, #156]	; (801184c <tcp_receive+0x5c4>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	440b      	add	r3, r1
 80117b2:	1ad3      	subs	r3, r2, r3
 80117b4:	3301      	adds	r3, #1
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	dc78      	bgt.n	80118ac <tcp_receive+0x624>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80117ba:	4b25      	ldr	r3, [pc, #148]	; (8011850 <tcp_receive+0x5c8>)
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	627b      	str	r3, [r7, #36]	; 0x24
      u32_t off32 = pcb->rcv_nxt - seqno;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117c4:	4b21      	ldr	r3, [pc, #132]	; (801184c <tcp_receive+0x5c4>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	1ad3      	subs	r3, r2, r3
 80117ca:	613b      	str	r3, [r7, #16]
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80117cc:	4b20      	ldr	r3, [pc, #128]	; (8011850 <tcp_receive+0x5c8>)
 80117ce:	685b      	ldr	r3, [r3, #4]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d106      	bne.n	80117e2 <tcp_receive+0x55a>
 80117d4:	4b1f      	ldr	r3, [pc, #124]	; (8011854 <tcp_receive+0x5cc>)
 80117d6:	f240 5294 	movw	r2, #1428	; 0x594
 80117da:	491f      	ldr	r1, [pc, #124]	; (8011858 <tcp_receive+0x5d0>)
 80117dc:	481f      	ldr	r0, [pc, #124]	; (801185c <tcp_receive+0x5d4>)
 80117de:	f003 ff27 	bl	8015630 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80117e8:	4293      	cmp	r3, r2
 80117ea:	d906      	bls.n	80117fa <tcp_receive+0x572>
 80117ec:	4b19      	ldr	r3, [pc, #100]	; (8011854 <tcp_receive+0x5cc>)
 80117ee:	f240 5295 	movw	r2, #1429	; 0x595
 80117f2:	491b      	ldr	r1, [pc, #108]	; (8011860 <tcp_receive+0x5d8>)
 80117f4:	4819      	ldr	r0, [pc, #100]	; (801185c <tcp_receive+0x5d4>)
 80117f6:	f003 ff1b 	bl	8015630 <iprintf>
      off = (u16_t)off32;
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	847b      	strh	r3, [r7, #34]	; 0x22
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80117fe:	4b14      	ldr	r3, [pc, #80]	; (8011850 <tcp_receive+0x5c8>)
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	891b      	ldrh	r3, [r3, #8]
 8011804:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011806:	429a      	cmp	r2, r3
 8011808:	d906      	bls.n	8011818 <tcp_receive+0x590>
 801180a:	4b12      	ldr	r3, [pc, #72]	; (8011854 <tcp_receive+0x5cc>)
 801180c:	f240 5297 	movw	r2, #1431	; 0x597
 8011810:	4914      	ldr	r1, [pc, #80]	; (8011864 <tcp_receive+0x5dc>)
 8011812:	4812      	ldr	r0, [pc, #72]	; (801185c <tcp_receive+0x5d4>)
 8011814:	f003 ff0c 	bl	8015630 <iprintf>
      inseg.len -= off;
 8011818:	4b0d      	ldr	r3, [pc, #52]	; (8011850 <tcp_receive+0x5c8>)
 801181a:	891a      	ldrh	r2, [r3, #8]
 801181c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801181e:	1ad3      	subs	r3, r2, r3
 8011820:	b29a      	uxth	r2, r3
 8011822:	4b0b      	ldr	r3, [pc, #44]	; (8011850 <tcp_receive+0x5c8>)
 8011824:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011826:	4b0a      	ldr	r3, [pc, #40]	; (8011850 <tcp_receive+0x5c8>)
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	891a      	ldrh	r2, [r3, #8]
 801182c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801182e:	1ad3      	subs	r3, r2, r3
 8011830:	81fb      	strh	r3, [r7, #14]
      while (p->len < off) {
 8011832:	e027      	b.n	8011884 <tcp_receive+0x5fc>
 8011834:	0801b824 	.word	0x0801b824
 8011838:	0801b82c 	.word	0x0801b82c
 801183c:	200068f8 	.word	0x200068f8
 8011840:	200068f4 	.word	0x200068f4
 8011844:	2000cfcc 	.word	0x2000cfcc
 8011848:	200068fa 	.word	0x200068fa
 801184c:	200068f0 	.word	0x200068f0
 8011850:	200068d0 	.word	0x200068d0
 8011854:	0801b488 	.word	0x0801b488
 8011858:	0801b834 	.word	0x0801b834
 801185c:	0801b530 	.word	0x0801b530
 8011860:	0801b844 	.word	0x0801b844
 8011864:	0801b854 	.word	0x0801b854
        off -= p->len;
 8011868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186a:	895b      	ldrh	r3, [r3, #10]
 801186c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801186e:	1ad3      	subs	r3, r2, r3
 8011870:	847b      	strh	r3, [r7, #34]	; 0x22
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011874:	89fa      	ldrh	r2, [r7, #14]
 8011876:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801187a:	2200      	movs	r2, #0
 801187c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	627b      	str	r3, [r7, #36]	; 0x24
      while (p->len < off) {
 8011884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011886:	895b      	ldrh	r3, [r3, #10]
 8011888:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801188a:	429a      	cmp	r2, r3
 801188c:	d8ec      	bhi.n	8011868 <tcp_receive+0x5e0>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801188e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011890:	4619      	mov	r1, r3
 8011892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011894:	f7fc f9d2 	bl	800dc3c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801189c:	4a94      	ldr	r2, [pc, #592]	; (8011af0 <tcp_receive+0x868>)
 801189e:	6013      	str	r3, [r2, #0]
 80118a0:	4b94      	ldr	r3, [pc, #592]	; (8011af4 <tcp_receive+0x86c>)
 80118a2:	68db      	ldr	r3, [r3, #12]
 80118a4:	4a92      	ldr	r2, [pc, #584]	; (8011af0 <tcp_receive+0x868>)
 80118a6:	6812      	ldr	r2, [r2, #0]
 80118a8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80118aa:	e00d      	b.n	80118c8 <tcp_receive+0x640>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80118ac:	4b90      	ldr	r3, [pc, #576]	; (8011af0 <tcp_receive+0x868>)
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118b4:	1ad3      	subs	r3, r2, r3
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	da06      	bge.n	80118c8 <tcp_receive+0x640>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	8b5b      	ldrh	r3, [r3, #26]
 80118be:	f043 0302 	orr.w	r3, r3, #2
 80118c2:	b29a      	uxth	r2, r3
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80118c8:	4b89      	ldr	r3, [pc, #548]	; (8011af0 <tcp_receive+0x868>)
 80118ca:	681a      	ldr	r2, [r3, #0]
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118d0:	1ad3      	subs	r3, r2, r3
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	f2c0 8106 	blt.w	8011ae4 <tcp_receive+0x85c>
 80118d8:	4b85      	ldr	r3, [pc, #532]	; (8011af0 <tcp_receive+0x868>)
 80118da:	681a      	ldr	r2, [r3, #0]
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118e0:	6879      	ldr	r1, [r7, #4]
 80118e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80118e4:	440b      	add	r3, r1
 80118e6:	1ad3      	subs	r3, r2, r3
 80118e8:	3301      	adds	r3, #1
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	f300 80fa 	bgt.w	8011ae4 <tcp_receive+0x85c>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118f4:	4b7e      	ldr	r3, [pc, #504]	; (8011af0 <tcp_receive+0x868>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	f040 80ef 	bne.w	8011adc <tcp_receive+0x854>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80118fe:	4b7d      	ldr	r3, [pc, #500]	; (8011af4 <tcp_receive+0x86c>)
 8011900:	891c      	ldrh	r4, [r3, #8]
 8011902:	4b7c      	ldr	r3, [pc, #496]	; (8011af4 <tcp_receive+0x86c>)
 8011904:	68db      	ldr	r3, [r3, #12]
 8011906:	899b      	ldrh	r3, [r3, #12]
 8011908:	b29b      	uxth	r3, r3
 801190a:	4618      	mov	r0, r3
 801190c:	f7fa fe8e 	bl	800c62c <lwip_htons>
 8011910:	4603      	mov	r3, r0
 8011912:	b2db      	uxtb	r3, r3
 8011914:	f003 0303 	and.w	r3, r3, #3
 8011918:	2b00      	cmp	r3, #0
 801191a:	d001      	beq.n	8011920 <tcp_receive+0x698>
 801191c:	2301      	movs	r3, #1
 801191e:	e000      	b.n	8011922 <tcp_receive+0x69a>
 8011920:	2300      	movs	r3, #0
 8011922:	4423      	add	r3, r4
 8011924:	b29a      	uxth	r2, r3
 8011926:	4b74      	ldr	r3, [pc, #464]	; (8011af8 <tcp_receive+0x870>)
 8011928:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801192e:	4b72      	ldr	r3, [pc, #456]	; (8011af8 <tcp_receive+0x870>)
 8011930:	881b      	ldrh	r3, [r3, #0]
 8011932:	429a      	cmp	r2, r3
 8011934:	d275      	bcs.n	8011a22 <tcp_receive+0x79a>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011936:	4b6f      	ldr	r3, [pc, #444]	; (8011af4 <tcp_receive+0x86c>)
 8011938:	68db      	ldr	r3, [r3, #12]
 801193a:	899b      	ldrh	r3, [r3, #12]
 801193c:	b29b      	uxth	r3, r3
 801193e:	4618      	mov	r0, r3
 8011940:	f7fa fe74 	bl	800c62c <lwip_htons>
 8011944:	4603      	mov	r3, r0
 8011946:	b2db      	uxtb	r3, r3
 8011948:	f003 0301 	and.w	r3, r3, #1
 801194c:	2b00      	cmp	r3, #0
 801194e:	d01f      	beq.n	8011990 <tcp_receive+0x708>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011950:	4b68      	ldr	r3, [pc, #416]	; (8011af4 <tcp_receive+0x86c>)
 8011952:	68db      	ldr	r3, [r3, #12]
 8011954:	899b      	ldrh	r3, [r3, #12]
 8011956:	b29b      	uxth	r3, r3
 8011958:	b21b      	sxth	r3, r3
 801195a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801195e:	b21c      	sxth	r4, r3
 8011960:	4b64      	ldr	r3, [pc, #400]	; (8011af4 <tcp_receive+0x86c>)
 8011962:	68db      	ldr	r3, [r3, #12]
 8011964:	899b      	ldrh	r3, [r3, #12]
 8011966:	b29b      	uxth	r3, r3
 8011968:	4618      	mov	r0, r3
 801196a:	f7fa fe5f 	bl	800c62c <lwip_htons>
 801196e:	4603      	mov	r3, r0
 8011970:	b2db      	uxtb	r3, r3
 8011972:	b29b      	uxth	r3, r3
 8011974:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011978:	b29b      	uxth	r3, r3
 801197a:	4618      	mov	r0, r3
 801197c:	f7fa fe56 	bl	800c62c <lwip_htons>
 8011980:	4603      	mov	r3, r0
 8011982:	b21b      	sxth	r3, r3
 8011984:	4323      	orrs	r3, r4
 8011986:	b21a      	sxth	r2, r3
 8011988:	4b5a      	ldr	r3, [pc, #360]	; (8011af4 <tcp_receive+0x86c>)
 801198a:	68db      	ldr	r3, [r3, #12]
 801198c:	b292      	uxth	r2, r2
 801198e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011994:	4b57      	ldr	r3, [pc, #348]	; (8011af4 <tcp_receive+0x86c>)
 8011996:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011998:	4b56      	ldr	r3, [pc, #344]	; (8011af4 <tcp_receive+0x86c>)
 801199a:	68db      	ldr	r3, [r3, #12]
 801199c:	899b      	ldrh	r3, [r3, #12]
 801199e:	b29b      	uxth	r3, r3
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7fa fe43 	bl	800c62c <lwip_htons>
 80119a6:	4603      	mov	r3, r0
 80119a8:	b2db      	uxtb	r3, r3
 80119aa:	f003 0302 	and.w	r3, r3, #2
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d005      	beq.n	80119be <tcp_receive+0x736>
            inseg.len -= 1;
 80119b2:	4b50      	ldr	r3, [pc, #320]	; (8011af4 <tcp_receive+0x86c>)
 80119b4:	891b      	ldrh	r3, [r3, #8]
 80119b6:	3b01      	subs	r3, #1
 80119b8:	b29a      	uxth	r2, r3
 80119ba:	4b4e      	ldr	r3, [pc, #312]	; (8011af4 <tcp_receive+0x86c>)
 80119bc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80119be:	4b4d      	ldr	r3, [pc, #308]	; (8011af4 <tcp_receive+0x86c>)
 80119c0:	685b      	ldr	r3, [r3, #4]
 80119c2:	4a4c      	ldr	r2, [pc, #304]	; (8011af4 <tcp_receive+0x86c>)
 80119c4:	8912      	ldrh	r2, [r2, #8]
 80119c6:	4611      	mov	r1, r2
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7fc f837 	bl	800da3c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80119ce:	4b49      	ldr	r3, [pc, #292]	; (8011af4 <tcp_receive+0x86c>)
 80119d0:	891c      	ldrh	r4, [r3, #8]
 80119d2:	4b48      	ldr	r3, [pc, #288]	; (8011af4 <tcp_receive+0x86c>)
 80119d4:	68db      	ldr	r3, [r3, #12]
 80119d6:	899b      	ldrh	r3, [r3, #12]
 80119d8:	b29b      	uxth	r3, r3
 80119da:	4618      	mov	r0, r3
 80119dc:	f7fa fe26 	bl	800c62c <lwip_htons>
 80119e0:	4603      	mov	r3, r0
 80119e2:	b2db      	uxtb	r3, r3
 80119e4:	f003 0303 	and.w	r3, r3, #3
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d001      	beq.n	80119f0 <tcp_receive+0x768>
 80119ec:	2301      	movs	r3, #1
 80119ee:	e000      	b.n	80119f2 <tcp_receive+0x76a>
 80119f0:	2300      	movs	r3, #0
 80119f2:	4423      	add	r3, r4
 80119f4:	b29a      	uxth	r2, r3
 80119f6:	4b40      	ldr	r3, [pc, #256]	; (8011af8 <tcp_receive+0x870>)
 80119f8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80119fa:	4b3f      	ldr	r3, [pc, #252]	; (8011af8 <tcp_receive+0x870>)
 80119fc:	881b      	ldrh	r3, [r3, #0]
 80119fe:	461a      	mov	r2, r3
 8011a00:	4b3b      	ldr	r3, [pc, #236]	; (8011af0 <tcp_receive+0x868>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	441a      	add	r2, r3
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a0a:	6879      	ldr	r1, [r7, #4]
 8011a0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a0e:	440b      	add	r3, r1
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d006      	beq.n	8011a22 <tcp_receive+0x79a>
 8011a14:	4b39      	ldr	r3, [pc, #228]	; (8011afc <tcp_receive+0x874>)
 8011a16:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011a1a:	4939      	ldr	r1, [pc, #228]	; (8011b00 <tcp_receive+0x878>)
 8011a1c:	4839      	ldr	r0, [pc, #228]	; (8011b04 <tcp_receive+0x87c>)
 8011a1e:	f003 fe07 	bl	8015630 <iprintf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011a22:	4b35      	ldr	r3, [pc, #212]	; (8011af8 <tcp_receive+0x870>)
 8011a24:	881b      	ldrh	r3, [r3, #0]
 8011a26:	461a      	mov	r2, r3
 8011a28:	4b31      	ldr	r3, [pc, #196]	; (8011af0 <tcp_receive+0x868>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	441a      	add	r2, r3
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011a36:	4b30      	ldr	r3, [pc, #192]	; (8011af8 <tcp_receive+0x870>)
 8011a38:	881b      	ldrh	r3, [r3, #0]
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d206      	bcs.n	8011a4c <tcp_receive+0x7c4>
 8011a3e:	4b2f      	ldr	r3, [pc, #188]	; (8011afc <tcp_receive+0x874>)
 8011a40:	f240 6207 	movw	r2, #1543	; 0x607
 8011a44:	4930      	ldr	r1, [pc, #192]	; (8011b08 <tcp_receive+0x880>)
 8011a46:	482f      	ldr	r0, [pc, #188]	; (8011b04 <tcp_receive+0x87c>)
 8011a48:	f003 fdf2 	bl	8015630 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011a50:	4b29      	ldr	r3, [pc, #164]	; (8011af8 <tcp_receive+0x870>)
 8011a52:	881b      	ldrh	r3, [r3, #0]
 8011a54:	1ad3      	subs	r3, r2, r3
 8011a56:	b29a      	uxth	r2, r3
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f7fd f88d 	bl	800eb7c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011a62:	4b24      	ldr	r3, [pc, #144]	; (8011af4 <tcp_receive+0x86c>)
 8011a64:	685b      	ldr	r3, [r3, #4]
 8011a66:	891b      	ldrh	r3, [r3, #8]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d006      	beq.n	8011a7a <tcp_receive+0x7f2>
          recv_data = inseg.p;
 8011a6c:	4b21      	ldr	r3, [pc, #132]	; (8011af4 <tcp_receive+0x86c>)
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	4a26      	ldr	r2, [pc, #152]	; (8011b0c <tcp_receive+0x884>)
 8011a72:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011a74:	4b1f      	ldr	r3, [pc, #124]	; (8011af4 <tcp_receive+0x86c>)
 8011a76:	2200      	movs	r2, #0
 8011a78:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011a7a:	4b1e      	ldr	r3, [pc, #120]	; (8011af4 <tcp_receive+0x86c>)
 8011a7c:	68db      	ldr	r3, [r3, #12]
 8011a7e:	899b      	ldrh	r3, [r3, #12]
 8011a80:	b29b      	uxth	r3, r3
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7fa fdd2 	bl	800c62c <lwip_htons>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	b2db      	uxtb	r3, r3
 8011a8c:	f003 0301 	and.w	r3, r3, #1
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d006      	beq.n	8011aa2 <tcp_receive+0x81a>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011a94:	4b1e      	ldr	r3, [pc, #120]	; (8011b10 <tcp_receive+0x888>)
 8011a96:	781b      	ldrb	r3, [r3, #0]
 8011a98:	f043 0320 	orr.w	r3, r3, #32
 8011a9c:	b2da      	uxtb	r2, r3
 8011a9e:	4b1c      	ldr	r3, [pc, #112]	; (8011b10 <tcp_receive+0x888>)
 8011aa0:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	8b5b      	ldrh	r3, [r3, #26]
 8011aa6:	f003 0301 	and.w	r3, r3, #1
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d00e      	beq.n	8011acc <tcp_receive+0x844>
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	8b5b      	ldrh	r3, [r3, #26]
 8011ab2:	f023 0301 	bic.w	r3, r3, #1
 8011ab6:	b29a      	uxth	r2, r3
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	835a      	strh	r2, [r3, #26]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	8b5b      	ldrh	r3, [r3, #26]
 8011ac0:	f043 0302 	orr.w	r3, r3, #2
 8011ac4:	b29a      	uxth	r2, r3
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011aca:	e00f      	b.n	8011aec <tcp_receive+0x864>
        tcp_ack(pcb);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	8b5b      	ldrh	r3, [r3, #26]
 8011ad0:	f043 0301 	orr.w	r3, r3, #1
 8011ad4:	b29a      	uxth	r2, r3
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011ada:	e007      	b.n	8011aec <tcp_receive+0x864>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f001 fe93 	bl	8013808 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011ae2:	e003      	b.n	8011aec <tcp_receive+0x864>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f001 fe8f 	bl	8013808 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011aea:	e02d      	b.n	8011b48 <tcp_receive+0x8c0>
 8011aec:	e02c      	b.n	8011b48 <tcp_receive+0x8c0>
 8011aee:	bf00      	nop
 8011af0:	200068f0 	.word	0x200068f0
 8011af4:	200068d0 	.word	0x200068d0
 8011af8:	200068fa 	.word	0x200068fa
 8011afc:	0801b488 	.word	0x0801b488
 8011b00:	0801b864 	.word	0x0801b864
 8011b04:	0801b530 	.word	0x0801b530
 8011b08:	0801b89c 	.word	0x0801b89c
 8011b0c:	20006900 	.word	0x20006900
 8011b10:	200068fd 	.word	0x200068fd
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011b14:	4b0e      	ldr	r3, [pc, #56]	; (8011b50 <tcp_receive+0x8c8>)
 8011b16:	681a      	ldr	r2, [r3, #0]
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b1c:	1ad3      	subs	r3, r2, r3
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	db0a      	blt.n	8011b38 <tcp_receive+0x8b0>
 8011b22:	4b0b      	ldr	r3, [pc, #44]	; (8011b50 <tcp_receive+0x8c8>)
 8011b24:	681a      	ldr	r2, [r3, #0]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b2a:	6879      	ldr	r1, [r7, #4]
 8011b2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011b2e:	440b      	add	r3, r1
 8011b30:	1ad3      	subs	r3, r2, r3
 8011b32:	3301      	adds	r3, #1
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	dd07      	ble.n	8011b48 <tcp_receive+0x8c0>
      tcp_ack_now(pcb);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	8b5b      	ldrh	r3, [r3, #26]
 8011b3c:	f043 0302 	orr.w	r3, r3, #2
 8011b40:	b29a      	uxth	r2, r3
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011b46:	e7ff      	b.n	8011b48 <tcp_receive+0x8c0>
 8011b48:	bf00      	nop
 8011b4a:	3734      	adds	r7, #52	; 0x34
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd90      	pop	{r4, r7, pc}
 8011b50:	200068f0 	.word	0x200068f0

08011b54 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011b54:	b480      	push	{r7}
 8011b56:	b083      	sub	sp, #12
 8011b58:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011b5a:	4b15      	ldr	r3, [pc, #84]	; (8011bb0 <tcp_get_next_optbyte+0x5c>)
 8011b5c:	881b      	ldrh	r3, [r3, #0]
 8011b5e:	1c5a      	adds	r2, r3, #1
 8011b60:	b291      	uxth	r1, r2
 8011b62:	4a13      	ldr	r2, [pc, #76]	; (8011bb0 <tcp_get_next_optbyte+0x5c>)
 8011b64:	8011      	strh	r1, [r2, #0]
 8011b66:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011b68:	4b12      	ldr	r3, [pc, #72]	; (8011bb4 <tcp_get_next_optbyte+0x60>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d004      	beq.n	8011b7a <tcp_get_next_optbyte+0x26>
 8011b70:	4b11      	ldr	r3, [pc, #68]	; (8011bb8 <tcp_get_next_optbyte+0x64>)
 8011b72:	881b      	ldrh	r3, [r3, #0]
 8011b74:	88fa      	ldrh	r2, [r7, #6]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d208      	bcs.n	8011b8c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011b7a:	4b10      	ldr	r3, [pc, #64]	; (8011bbc <tcp_get_next_optbyte+0x68>)
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	3314      	adds	r3, #20
 8011b80:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011b82:	88fb      	ldrh	r3, [r7, #6]
 8011b84:	683a      	ldr	r2, [r7, #0]
 8011b86:	4413      	add	r3, r2
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	e00b      	b.n	8011ba4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011b8c:	88fb      	ldrh	r3, [r7, #6]
 8011b8e:	b2da      	uxtb	r2, r3
 8011b90:	4b09      	ldr	r3, [pc, #36]	; (8011bb8 <tcp_get_next_optbyte+0x64>)
 8011b92:	881b      	ldrh	r3, [r3, #0]
 8011b94:	b2db      	uxtb	r3, r3
 8011b96:	1ad3      	subs	r3, r2, r3
 8011b98:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011b9a:	4b06      	ldr	r3, [pc, #24]	; (8011bb4 <tcp_get_next_optbyte+0x60>)
 8011b9c:	681a      	ldr	r2, [r3, #0]
 8011b9e:	797b      	ldrb	r3, [r7, #5]
 8011ba0:	4413      	add	r3, r2
 8011ba2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	370c      	adds	r7, #12
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bae:	4770      	bx	lr
 8011bb0:	200068ec 	.word	0x200068ec
 8011bb4:	200068e8 	.word	0x200068e8
 8011bb8:	200068e6 	.word	0x200068e6
 8011bbc:	200068e0 	.word	0x200068e0

08011bc0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b084      	sub	sp, #16
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d106      	bne.n	8011bdc <tcp_parseopt+0x1c>
 8011bce:	4b32      	ldr	r3, [pc, #200]	; (8011c98 <tcp_parseopt+0xd8>)
 8011bd0:	f240 727d 	movw	r2, #1917	; 0x77d
 8011bd4:	4931      	ldr	r1, [pc, #196]	; (8011c9c <tcp_parseopt+0xdc>)
 8011bd6:	4832      	ldr	r0, [pc, #200]	; (8011ca0 <tcp_parseopt+0xe0>)
 8011bd8:	f003 fd2a 	bl	8015630 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011bdc:	4b31      	ldr	r3, [pc, #196]	; (8011ca4 <tcp_parseopt+0xe4>)
 8011bde:	881b      	ldrh	r3, [r3, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d056      	beq.n	8011c92 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011be4:	4b30      	ldr	r3, [pc, #192]	; (8011ca8 <tcp_parseopt+0xe8>)
 8011be6:	2200      	movs	r2, #0
 8011be8:	801a      	strh	r2, [r3, #0]
 8011bea:	e046      	b.n	8011c7a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011bec:	f7ff ffb2 	bl	8011b54 <tcp_get_next_optbyte>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011bf4:	7bfb      	ldrb	r3, [r7, #15]
 8011bf6:	2b02      	cmp	r3, #2
 8011bf8:	d006      	beq.n	8011c08 <tcp_parseopt+0x48>
 8011bfa:	2b02      	cmp	r3, #2
 8011bfc:	dc2c      	bgt.n	8011c58 <tcp_parseopt+0x98>
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d042      	beq.n	8011c88 <tcp_parseopt+0xc8>
 8011c02:	2b01      	cmp	r3, #1
 8011c04:	d128      	bne.n	8011c58 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011c06:	e038      	b.n	8011c7a <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011c08:	f7ff ffa4 	bl	8011b54 <tcp_get_next_optbyte>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	2b04      	cmp	r3, #4
 8011c10:	d13c      	bne.n	8011c8c <tcp_parseopt+0xcc>
 8011c12:	4b25      	ldr	r3, [pc, #148]	; (8011ca8 <tcp_parseopt+0xe8>)
 8011c14:	881b      	ldrh	r3, [r3, #0]
 8011c16:	3301      	adds	r3, #1
 8011c18:	4a22      	ldr	r2, [pc, #136]	; (8011ca4 <tcp_parseopt+0xe4>)
 8011c1a:	8812      	ldrh	r2, [r2, #0]
 8011c1c:	4293      	cmp	r3, r2
 8011c1e:	da35      	bge.n	8011c8c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011c20:	f7ff ff98 	bl	8011b54 <tcp_get_next_optbyte>
 8011c24:	4603      	mov	r3, r0
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	021b      	lsls	r3, r3, #8
 8011c2a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011c2c:	f7ff ff92 	bl	8011b54 <tcp_get_next_optbyte>
 8011c30:	4603      	mov	r3, r0
 8011c32:	b29a      	uxth	r2, r3
 8011c34:	89bb      	ldrh	r3, [r7, #12]
 8011c36:	4313      	orrs	r3, r2
 8011c38:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011c3a:	89bb      	ldrh	r3, [r7, #12]
 8011c3c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8011c40:	4293      	cmp	r3, r2
 8011c42:	d804      	bhi.n	8011c4e <tcp_parseopt+0x8e>
 8011c44:	89bb      	ldrh	r3, [r7, #12]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d001      	beq.n	8011c4e <tcp_parseopt+0x8e>
 8011c4a:	89ba      	ldrh	r2, [r7, #12]
 8011c4c:	e001      	b.n	8011c52 <tcp_parseopt+0x92>
 8011c4e:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011c56:	e010      	b.n	8011c7a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011c58:	f7ff ff7c 	bl	8011b54 <tcp_get_next_optbyte>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011c60:	7afb      	ldrb	r3, [r7, #11]
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	d914      	bls.n	8011c90 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011c66:	7afb      	ldrb	r3, [r7, #11]
 8011c68:	b29a      	uxth	r2, r3
 8011c6a:	4b0f      	ldr	r3, [pc, #60]	; (8011ca8 <tcp_parseopt+0xe8>)
 8011c6c:	881b      	ldrh	r3, [r3, #0]
 8011c6e:	4413      	add	r3, r2
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	3b02      	subs	r3, #2
 8011c74:	b29a      	uxth	r2, r3
 8011c76:	4b0c      	ldr	r3, [pc, #48]	; (8011ca8 <tcp_parseopt+0xe8>)
 8011c78:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011c7a:	4b0b      	ldr	r3, [pc, #44]	; (8011ca8 <tcp_parseopt+0xe8>)
 8011c7c:	881a      	ldrh	r2, [r3, #0]
 8011c7e:	4b09      	ldr	r3, [pc, #36]	; (8011ca4 <tcp_parseopt+0xe4>)
 8011c80:	881b      	ldrh	r3, [r3, #0]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d3b2      	bcc.n	8011bec <tcp_parseopt+0x2c>
 8011c86:	e004      	b.n	8011c92 <tcp_parseopt+0xd2>
          return;
 8011c88:	bf00      	nop
 8011c8a:	e002      	b.n	8011c92 <tcp_parseopt+0xd2>
            return;
 8011c8c:	bf00      	nop
 8011c8e:	e000      	b.n	8011c92 <tcp_parseopt+0xd2>
            return;
 8011c90:	bf00      	nop
      }
    }
  }
}
 8011c92:	3710      	adds	r7, #16
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	0801b488 	.word	0x0801b488
 8011c9c:	0801b8bc 	.word	0x0801b8bc
 8011ca0:	0801b530 	.word	0x0801b530
 8011ca4:	200068e4 	.word	0x200068e4
 8011ca8:	200068ec 	.word	0x200068ec

08011cac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011cac:	b480      	push	{r7}
 8011cae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011cb0:	4b05      	ldr	r3, [pc, #20]	; (8011cc8 <tcp_trigger_input_pcb_close+0x1c>)
 8011cb2:	781b      	ldrb	r3, [r3, #0]
 8011cb4:	f043 0310 	orr.w	r3, r3, #16
 8011cb8:	b2da      	uxtb	r2, r3
 8011cba:	4b03      	ldr	r3, [pc, #12]	; (8011cc8 <tcp_trigger_input_pcb_close+0x1c>)
 8011cbc:	701a      	strb	r2, [r3, #0]
}
 8011cbe:	bf00      	nop
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc6:	4770      	bx	lr
 8011cc8:	200068fd 	.word	0x200068fd

08011ccc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b084      	sub	sp, #16
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	60f8      	str	r0, [r7, #12]
 8011cd4:	60b9      	str	r1, [r7, #8]
 8011cd6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d00a      	beq.n	8011cf4 <tcp_route+0x28>
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	7a1b      	ldrb	r3, [r3, #8]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d006      	beq.n	8011cf4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	7a1b      	ldrb	r3, [r3, #8]
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7fb fcf8 	bl	800d6e0 <netif_get_by_index>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	e003      	b.n	8011cfc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f7f9 fb6b 	bl	800b3d0 <ip4_route>
 8011cfa:	4603      	mov	r3, r0
  }
}
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	3710      	adds	r7, #16
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011d04:	b590      	push	{r4, r7, lr}
 8011d06:	b087      	sub	sp, #28
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	603b      	str	r3, [r7, #0]
 8011d10:	4613      	mov	r3, r2
 8011d12:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d105      	bne.n	8011d26 <tcp_create_segment+0x22>
 8011d1a:	4b44      	ldr	r3, [pc, #272]	; (8011e2c <tcp_create_segment+0x128>)
 8011d1c:	22a3      	movs	r2, #163	; 0xa3
 8011d1e:	4944      	ldr	r1, [pc, #272]	; (8011e30 <tcp_create_segment+0x12c>)
 8011d20:	4844      	ldr	r0, [pc, #272]	; (8011e34 <tcp_create_segment+0x130>)
 8011d22:	f003 fc85 	bl	8015630 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011d26:	68bb      	ldr	r3, [r7, #8]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d105      	bne.n	8011d38 <tcp_create_segment+0x34>
 8011d2c:	4b3f      	ldr	r3, [pc, #252]	; (8011e2c <tcp_create_segment+0x128>)
 8011d2e:	22a4      	movs	r2, #164	; 0xa4
 8011d30:	4941      	ldr	r1, [pc, #260]	; (8011e38 <tcp_create_segment+0x134>)
 8011d32:	4840      	ldr	r0, [pc, #256]	; (8011e34 <tcp_create_segment+0x130>)
 8011d34:	f003 fc7c 	bl	8015630 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011d38:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d3c:	009b      	lsls	r3, r3, #2
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	f003 0304 	and.w	r3, r3, #4
 8011d44:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011d46:	2003      	movs	r0, #3
 8011d48:	f7fb f9d0 	bl	800d0ec <memp_malloc>
 8011d4c:	6138      	str	r0, [r7, #16]
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d104      	bne.n	8011d5e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011d54:	68b8      	ldr	r0, [r7, #8]
 8011d56:	f7fb fff7 	bl	800dd48 <pbuf_free>
    return NULL;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	e061      	b.n	8011e22 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011d64:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011d66:	693b      	ldr	r3, [r7, #16]
 8011d68:	2200      	movs	r2, #0
 8011d6a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011d6c:	693b      	ldr	r3, [r7, #16]
 8011d6e:	68ba      	ldr	r2, [r7, #8]
 8011d70:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	891a      	ldrh	r2, [r3, #8]
 8011d76:	7dfb      	ldrb	r3, [r7, #23]
 8011d78:	b29b      	uxth	r3, r3
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	d205      	bcs.n	8011d8a <tcp_create_segment+0x86>
 8011d7e:	4b2b      	ldr	r3, [pc, #172]	; (8011e2c <tcp_create_segment+0x128>)
 8011d80:	22b0      	movs	r2, #176	; 0xb0
 8011d82:	492e      	ldr	r1, [pc, #184]	; (8011e3c <tcp_create_segment+0x138>)
 8011d84:	482b      	ldr	r0, [pc, #172]	; (8011e34 <tcp_create_segment+0x130>)
 8011d86:	f003 fc53 	bl	8015630 <iprintf>
  seg->len = p->tot_len - optlen;
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	891a      	ldrh	r2, [r3, #8]
 8011d8e:	7dfb      	ldrb	r3, [r7, #23]
 8011d90:	b29b      	uxth	r3, r3
 8011d92:	1ad3      	subs	r3, r2, r3
 8011d94:	b29a      	uxth	r2, r3
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011d9a:	2114      	movs	r1, #20
 8011d9c:	68b8      	ldr	r0, [r7, #8]
 8011d9e:	f7fb ff3d 	bl	800dc1c <pbuf_add_header>
 8011da2:	4603      	mov	r3, r0
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d004      	beq.n	8011db2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011da8:	6938      	ldr	r0, [r7, #16]
 8011daa:	f7fd fbfa 	bl	800f5a2 <tcp_seg_free>
    return NULL;
 8011dae:	2300      	movs	r3, #0
 8011db0:	e037      	b.n	8011e22 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	685b      	ldr	r3, [r3, #4]
 8011db6:	685a      	ldr	r2, [r3, #4]
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	8ada      	ldrh	r2, [r3, #22]
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	68dc      	ldr	r4, [r3, #12]
 8011dc4:	4610      	mov	r0, r2
 8011dc6:	f7fa fc31 	bl	800c62c <lwip_htons>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	8b1a      	ldrh	r2, [r3, #24]
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	68dc      	ldr	r4, [r3, #12]
 8011dd6:	4610      	mov	r0, r2
 8011dd8:	f7fa fc28 	bl	800c62c <lwip_htons>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	68dc      	ldr	r4, [r3, #12]
 8011de4:	6838      	ldr	r0, [r7, #0]
 8011de6:	f7fa fc36 	bl	800c656 <lwip_htonl>
 8011dea:	4603      	mov	r3, r0
 8011dec:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011dee:	7dfb      	ldrb	r3, [r7, #23]
 8011df0:	089b      	lsrs	r3, r3, #2
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	b29b      	uxth	r3, r3
 8011df6:	3305      	adds	r3, #5
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	031b      	lsls	r3, r3, #12
 8011dfc:	b29a      	uxth	r2, r3
 8011dfe:	79fb      	ldrb	r3, [r7, #7]
 8011e00:	b29b      	uxth	r3, r3
 8011e02:	4313      	orrs	r3, r2
 8011e04:	b29a      	uxth	r2, r3
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	68dc      	ldr	r4, [r3, #12]
 8011e0a:	4610      	mov	r0, r2
 8011e0c:	f7fa fc0e 	bl	800c62c <lwip_htons>
 8011e10:	4603      	mov	r3, r0
 8011e12:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011e14:	693b      	ldr	r3, [r7, #16]
 8011e16:	68db      	ldr	r3, [r3, #12]
 8011e18:	2200      	movs	r2, #0
 8011e1a:	749a      	strb	r2, [r3, #18]
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011e20:	693b      	ldr	r3, [r7, #16]
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	371c      	adds	r7, #28
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd90      	pop	{r4, r7, pc}
 8011e2a:	bf00      	nop
 8011e2c:	0801b8d8 	.word	0x0801b8d8
 8011e30:	0801b968 	.word	0x0801b968
 8011e34:	0801b988 	.word	0x0801b988
 8011e38:	0801b9b0 	.word	0x0801b9b0
 8011e3c:	0801b9d4 	.word	0x0801b9d4

08011e40 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b086      	sub	sp, #24
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	607b      	str	r3, [r7, #4]
 8011e48:	4603      	mov	r3, r0
 8011e4a:	73fb      	strb	r3, [r7, #15]
 8011e4c:	460b      	mov	r3, r1
 8011e4e:	81bb      	strh	r3, [r7, #12]
 8011e50:	4613      	mov	r3, r2
 8011e52:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011e54:	89bb      	ldrh	r3, [r7, #12]
 8011e56:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d105      	bne.n	8011e6a <tcp_pbuf_prealloc+0x2a>
 8011e5e:	4b30      	ldr	r3, [pc, #192]	; (8011f20 <tcp_pbuf_prealloc+0xe0>)
 8011e60:	22e8      	movs	r2, #232	; 0xe8
 8011e62:	4930      	ldr	r1, [pc, #192]	; (8011f24 <tcp_pbuf_prealloc+0xe4>)
 8011e64:	4830      	ldr	r0, [pc, #192]	; (8011f28 <tcp_pbuf_prealloc+0xe8>)
 8011e66:	f003 fbe3 	bl	8015630 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011e6a:	6a3b      	ldr	r3, [r7, #32]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d105      	bne.n	8011e7c <tcp_pbuf_prealloc+0x3c>
 8011e70:	4b2b      	ldr	r3, [pc, #172]	; (8011f20 <tcp_pbuf_prealloc+0xe0>)
 8011e72:	22e9      	movs	r2, #233	; 0xe9
 8011e74:	492d      	ldr	r1, [pc, #180]	; (8011f2c <tcp_pbuf_prealloc+0xec>)
 8011e76:	482c      	ldr	r0, [pc, #176]	; (8011f28 <tcp_pbuf_prealloc+0xe8>)
 8011e78:	f003 fbda 	bl	8015630 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011e7c:	89ba      	ldrh	r2, [r7, #12]
 8011e7e:	897b      	ldrh	r3, [r7, #10]
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d221      	bcs.n	8011ec8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011e84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011e88:	f003 0302 	and.w	r3, r3, #2
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d111      	bne.n	8011eb4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011e90:	6a3b      	ldr	r3, [r7, #32]
 8011e92:	8b5b      	ldrh	r3, [r3, #26]
 8011e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d115      	bne.n	8011ec8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011e9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d007      	beq.n	8011eb4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011ea4:	6a3b      	ldr	r3, [r7, #32]
 8011ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d103      	bne.n	8011eb4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011eac:	6a3b      	ldr	r3, [r7, #32]
 8011eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d009      	beq.n	8011ec8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011eb4:	89bb      	ldrh	r3, [r7, #12]
 8011eb6:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8011eba:	f023 0203 	bic.w	r2, r3, #3
 8011ebe:	897b      	ldrh	r3, [r7, #10]
 8011ec0:	4293      	cmp	r3, r2
 8011ec2:	bf28      	it	cs
 8011ec4:	4613      	movcs	r3, r2
 8011ec6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011ec8:	8af9      	ldrh	r1, [r7, #22]
 8011eca:	7bfb      	ldrb	r3, [r7, #15]
 8011ecc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f7fb fc55 	bl	800d780 <pbuf_alloc>
 8011ed6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d101      	bne.n	8011ee2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	e019      	b.n	8011f16 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d006      	beq.n	8011ef8 <tcp_pbuf_prealloc+0xb8>
 8011eea:	4b0d      	ldr	r3, [pc, #52]	; (8011f20 <tcp_pbuf_prealloc+0xe0>)
 8011eec:	f240 120b 	movw	r2, #267	; 0x10b
 8011ef0:	490f      	ldr	r1, [pc, #60]	; (8011f30 <tcp_pbuf_prealloc+0xf0>)
 8011ef2:	480d      	ldr	r0, [pc, #52]	; (8011f28 <tcp_pbuf_prealloc+0xe8>)
 8011ef4:	f003 fb9c 	bl	8015630 <iprintf>
  *oversize = p->len - length;
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	895a      	ldrh	r2, [r3, #10]
 8011efc:	89bb      	ldrh	r3, [r7, #12]
 8011efe:	1ad3      	subs	r3, r2, r3
 8011f00:	b29a      	uxth	r2, r3
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	89ba      	ldrh	r2, [r7, #12]
 8011f0a:	811a      	strh	r2, [r3, #8]
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	891a      	ldrh	r2, [r3, #8]
 8011f10:	693b      	ldr	r3, [r7, #16]
 8011f12:	815a      	strh	r2, [r3, #10]
  return p;
 8011f14:	693b      	ldr	r3, [r7, #16]
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3718      	adds	r7, #24
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}
 8011f1e:	bf00      	nop
 8011f20:	0801b8d8 	.word	0x0801b8d8
 8011f24:	0801b9ec 	.word	0x0801b9ec
 8011f28:	0801b988 	.word	0x0801b988
 8011f2c:	0801ba10 	.word	0x0801ba10
 8011f30:	0801ba30 	.word	0x0801ba30

08011f34 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b082      	sub	sp, #8
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
 8011f3c:	460b      	mov	r3, r1
 8011f3e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d106      	bne.n	8011f54 <tcp_write_checks+0x20>
 8011f46:	4b33      	ldr	r3, [pc, #204]	; (8012014 <tcp_write_checks+0xe0>)
 8011f48:	f240 1233 	movw	r2, #307	; 0x133
 8011f4c:	4932      	ldr	r1, [pc, #200]	; (8012018 <tcp_write_checks+0xe4>)
 8011f4e:	4833      	ldr	r0, [pc, #204]	; (801201c <tcp_write_checks+0xe8>)
 8011f50:	f003 fb6e 	bl	8015630 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	7d1b      	ldrb	r3, [r3, #20]
 8011f58:	2b04      	cmp	r3, #4
 8011f5a:	d00e      	beq.n	8011f7a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011f60:	2b07      	cmp	r3, #7
 8011f62:	d00a      	beq.n	8011f7a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011f68:	2b02      	cmp	r3, #2
 8011f6a:	d006      	beq.n	8011f7a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011f70:	2b03      	cmp	r3, #3
 8011f72:	d002      	beq.n	8011f7a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011f74:	f06f 030a 	mvn.w	r3, #10
 8011f78:	e048      	b.n	801200c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011f7a:	887b      	ldrh	r3, [r7, #2]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d101      	bne.n	8011f84 <tcp_write_checks+0x50>
    return ERR_OK;
 8011f80:	2300      	movs	r3, #0
 8011f82:	e043      	b.n	801200c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011f8a:	887a      	ldrh	r2, [r7, #2]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d909      	bls.n	8011fa4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	8b5b      	ldrh	r3, [r3, #26]
 8011f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f98:	b29a      	uxth	r2, r3
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8011fa2:	e033      	b.n	801200c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011faa:	2b07      	cmp	r3, #7
 8011fac:	d909      	bls.n	8011fc2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	8b5b      	ldrh	r3, [r3, #26]
 8011fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fb6:	b29a      	uxth	r2, r3
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8011fc0:	e024      	b.n	801200c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d00f      	beq.n	8011fec <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d11a      	bne.n	801200a <tcp_write_checks+0xd6>
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d116      	bne.n	801200a <tcp_write_checks+0xd6>
 8011fdc:	4b0d      	ldr	r3, [pc, #52]	; (8012014 <tcp_write_checks+0xe0>)
 8011fde:	f240 1255 	movw	r2, #341	; 0x155
 8011fe2:	490f      	ldr	r1, [pc, #60]	; (8012020 <tcp_write_checks+0xec>)
 8011fe4:	480d      	ldr	r0, [pc, #52]	; (801201c <tcp_write_checks+0xe8>)
 8011fe6:	f003 fb23 	bl	8015630 <iprintf>
 8011fea:	e00e      	b.n	801200a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d103      	bne.n	8011ffc <tcp_write_checks+0xc8>
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d006      	beq.n	801200a <tcp_write_checks+0xd6>
 8011ffc:	4b05      	ldr	r3, [pc, #20]	; (8012014 <tcp_write_checks+0xe0>)
 8011ffe:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8012002:	4908      	ldr	r1, [pc, #32]	; (8012024 <tcp_write_checks+0xf0>)
 8012004:	4805      	ldr	r0, [pc, #20]	; (801201c <tcp_write_checks+0xe8>)
 8012006:	f003 fb13 	bl	8015630 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801200a:	2300      	movs	r3, #0
}
 801200c:	4618      	mov	r0, r3
 801200e:	3708      	adds	r7, #8
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	0801b8d8 	.word	0x0801b8d8
 8012018:	0801ba44 	.word	0x0801ba44
 801201c:	0801b988 	.word	0x0801b988
 8012020:	0801ba64 	.word	0x0801ba64
 8012024:	0801baa0 	.word	0x0801baa0

08012028 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012028:	b590      	push	{r4, r7, lr}
 801202a:	b09b      	sub	sp, #108	; 0x6c
 801202c:	af04      	add	r7, sp, #16
 801202e:	60f8      	str	r0, [r7, #12]
 8012030:	60b9      	str	r1, [r7, #8]
 8012032:	4611      	mov	r1, r2
 8012034:	461a      	mov	r2, r3
 8012036:	460b      	mov	r3, r1
 8012038:	80fb      	strh	r3, [r7, #6]
 801203a:	4613      	mov	r3, r2
 801203c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801203e:	2300      	movs	r3, #0
 8012040:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012042:	2300      	movs	r3, #0
 8012044:	653b      	str	r3, [r7, #80]	; 0x50
 8012046:	2300      	movs	r3, #0
 8012048:	64fb      	str	r3, [r7, #76]	; 0x4c
 801204a:	2300      	movs	r3, #0
 801204c:	64bb      	str	r3, [r7, #72]	; 0x48
 801204e:	2300      	movs	r3, #0
 8012050:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012052:	2300      	movs	r3, #0
 8012054:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012058:	2300      	movs	r3, #0
 801205a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801205e:	2300      	movs	r3, #0
 8012060:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012062:	2300      	movs	r3, #0
 8012064:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012066:	2300      	movs	r3, #0
 8012068:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d109      	bne.n	8012084 <tcp_write+0x5c>
 8012070:	4ba4      	ldr	r3, [pc, #656]	; (8012304 <tcp_write+0x2dc>)
 8012072:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012076:	49a4      	ldr	r1, [pc, #656]	; (8012308 <tcp_write+0x2e0>)
 8012078:	48a4      	ldr	r0, [pc, #656]	; (801230c <tcp_write+0x2e4>)
 801207a:	f003 fad9 	bl	8015630 <iprintf>
 801207e:	f06f 030f 	mvn.w	r3, #15
 8012082:	e32a      	b.n	80126da <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801208a:	085b      	lsrs	r3, r3, #1
 801208c:	b29a      	uxth	r2, r3
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012092:	4293      	cmp	r3, r2
 8012094:	bf28      	it	cs
 8012096:	4613      	movcs	r3, r2
 8012098:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801209a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801209c:	2b00      	cmp	r3, #0
 801209e:	d102      	bne.n	80120a6 <tcp_write+0x7e>
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120a4:	e000      	b.n	80120a8 <tcp_write+0x80>
 80120a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80120a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d109      	bne.n	80120c4 <tcp_write+0x9c>
 80120b0:	4b94      	ldr	r3, [pc, #592]	; (8012304 <tcp_write+0x2dc>)
 80120b2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80120b6:	4996      	ldr	r1, [pc, #600]	; (8012310 <tcp_write+0x2e8>)
 80120b8:	4894      	ldr	r0, [pc, #592]	; (801230c <tcp_write+0x2e4>)
 80120ba:	f003 fab9 	bl	8015630 <iprintf>
 80120be:	f06f 030f 	mvn.w	r3, #15
 80120c2:	e30a      	b.n	80126da <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80120c4:	88fb      	ldrh	r3, [r7, #6]
 80120c6:	4619      	mov	r1, r3
 80120c8:	68f8      	ldr	r0, [r7, #12]
 80120ca:	f7ff ff33 	bl	8011f34 <tcp_write_checks>
 80120ce:	4603      	mov	r3, r0
 80120d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80120d4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d002      	beq.n	80120e2 <tcp_write+0xba>
    return err;
 80120dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80120e0:	e2fb      	b.n	80126da <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120e8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80120ec:	2300      	movs	r3, #0
 80120ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	f000 80f6 	beq.w	80122e8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012100:	653b      	str	r3, [r7, #80]	; 0x50
 8012102:	e002      	b.n	801210a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801210a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d1f8      	bne.n	8012104 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012114:	7a9b      	ldrb	r3, [r3, #10]
 8012116:	009b      	lsls	r3, r3, #2
 8012118:	b29b      	uxth	r3, r3
 801211a:	f003 0304 	and.w	r3, r3, #4
 801211e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012120:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012124:	891b      	ldrh	r3, [r3, #8]
 8012126:	4619      	mov	r1, r3
 8012128:	8c3b      	ldrh	r3, [r7, #32]
 801212a:	440b      	add	r3, r1
 801212c:	429a      	cmp	r2, r3
 801212e:	da06      	bge.n	801213e <tcp_write+0x116>
 8012130:	4b74      	ldr	r3, [pc, #464]	; (8012304 <tcp_write+0x2dc>)
 8012132:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012136:	4977      	ldr	r1, [pc, #476]	; (8012314 <tcp_write+0x2ec>)
 8012138:	4874      	ldr	r0, [pc, #464]	; (801230c <tcp_write+0x2e4>)
 801213a:	f003 fa79 	bl	8015630 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801213e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012140:	891a      	ldrh	r2, [r3, #8]
 8012142:	8c3b      	ldrh	r3, [r7, #32]
 8012144:	4413      	add	r3, r2
 8012146:	b29b      	uxth	r3, r3
 8012148:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801214a:	1ad3      	subs	r3, r2, r3
 801214c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012154:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012156:	8a7b      	ldrh	r3, [r7, #18]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d026      	beq.n	80121aa <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801215c:	8a7b      	ldrh	r3, [r7, #18]
 801215e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012160:	429a      	cmp	r2, r3
 8012162:	d206      	bcs.n	8012172 <tcp_write+0x14a>
 8012164:	4b67      	ldr	r3, [pc, #412]	; (8012304 <tcp_write+0x2dc>)
 8012166:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801216a:	496b      	ldr	r1, [pc, #428]	; (8012318 <tcp_write+0x2f0>)
 801216c:	4867      	ldr	r0, [pc, #412]	; (801230c <tcp_write+0x2e4>)
 801216e:	f003 fa5f 	bl	8015630 <iprintf>
      seg = last_unsent;
 8012172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012174:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012176:	8a7b      	ldrh	r3, [r7, #18]
 8012178:	88fa      	ldrh	r2, [r7, #6]
 801217a:	4293      	cmp	r3, r2
 801217c:	bf28      	it	cs
 801217e:	4613      	movcs	r3, r2
 8012180:	b29b      	uxth	r3, r3
 8012182:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012184:	4293      	cmp	r3, r2
 8012186:	bf28      	it	cs
 8012188:	4613      	movcs	r3, r2
 801218a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801218c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012190:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012192:	4413      	add	r3, r2
 8012194:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012198:	8a7a      	ldrh	r2, [r7, #18]
 801219a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801219c:	1ad3      	subs	r3, r2, r3
 801219e:	b29b      	uxth	r3, r3
 80121a0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80121a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80121a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80121a6:	1ad3      	subs	r3, r2, r3
 80121a8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80121aa:	8a7b      	ldrh	r3, [r7, #18]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d00b      	beq.n	80121c8 <tcp_write+0x1a0>
 80121b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80121b4:	88fb      	ldrh	r3, [r7, #6]
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d006      	beq.n	80121c8 <tcp_write+0x1a0>
 80121ba:	4b52      	ldr	r3, [pc, #328]	; (8012304 <tcp_write+0x2dc>)
 80121bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80121c0:	4956      	ldr	r1, [pc, #344]	; (801231c <tcp_write+0x2f4>)
 80121c2:	4852      	ldr	r0, [pc, #328]	; (801230c <tcp_write+0x2e4>)
 80121c4:	f003 fa34 	bl	8015630 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80121c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80121cc:	88fb      	ldrh	r3, [r7, #6]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	f080 8167 	bcs.w	80124a2 <tcp_write+0x47a>
 80121d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	f000 8163 	beq.w	80124a2 <tcp_write+0x47a>
 80121dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121de:	891b      	ldrh	r3, [r3, #8]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	f000 815e 	beq.w	80124a2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80121e6:	88fa      	ldrh	r2, [r7, #6]
 80121e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121ec:	1ad2      	subs	r2, r2, r3
 80121ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80121f0:	4293      	cmp	r3, r2
 80121f2:	bfa8      	it	ge
 80121f4:	4613      	movge	r3, r2
 80121f6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80121f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121fa:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80121fc:	797b      	ldrb	r3, [r7, #5]
 80121fe:	f003 0301 	and.w	r3, r3, #1
 8012202:	2b00      	cmp	r3, #0
 8012204:	d027      	beq.n	8012256 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012206:	f107 0012 	add.w	r0, r7, #18
 801220a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801220c:	8bf9      	ldrh	r1, [r7, #30]
 801220e:	2301      	movs	r3, #1
 8012210:	9302      	str	r3, [sp, #8]
 8012212:	797b      	ldrb	r3, [r7, #5]
 8012214:	9301      	str	r3, [sp, #4]
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	9300      	str	r3, [sp, #0]
 801221a:	4603      	mov	r3, r0
 801221c:	2000      	movs	r0, #0
 801221e:	f7ff fe0f 	bl	8011e40 <tcp_pbuf_prealloc>
 8012222:	6578      	str	r0, [r7, #84]	; 0x54
 8012224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012226:	2b00      	cmp	r3, #0
 8012228:	f000 8225 	beq.w	8012676 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801222c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801222e:	6858      	ldr	r0, [r3, #4]
 8012230:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012234:	68ba      	ldr	r2, [r7, #8]
 8012236:	4413      	add	r3, r2
 8012238:	8bfa      	ldrh	r2, [r7, #30]
 801223a:	4619      	mov	r1, r3
 801223c:	f002 fcb4 	bl	8014ba8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012240:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012242:	f7fb fe0f 	bl	800de64 <pbuf_clen>
 8012246:	4603      	mov	r3, r0
 8012248:	461a      	mov	r2, r3
 801224a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801224e:	4413      	add	r3, r2
 8012250:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012254:	e041      	b.n	80122da <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	637b      	str	r3, [r7, #52]	; 0x34
 801225c:	e002      	b.n	8012264 <tcp_write+0x23c>
 801225e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	637b      	str	r3, [r7, #52]	; 0x34
 8012264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d1f8      	bne.n	801225e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801226c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801226e:	7b1b      	ldrb	r3, [r3, #12]
 8012270:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012274:	2b00      	cmp	r3, #0
 8012276:	d115      	bne.n	80122a4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801227a:	685b      	ldr	r3, [r3, #4]
 801227c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801227e:	8952      	ldrh	r2, [r2, #10]
 8012280:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012282:	68ba      	ldr	r2, [r7, #8]
 8012284:	429a      	cmp	r2, r3
 8012286:	d10d      	bne.n	80122a4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012288:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801228c:	2b00      	cmp	r3, #0
 801228e:	d006      	beq.n	801229e <tcp_write+0x276>
 8012290:	4b1c      	ldr	r3, [pc, #112]	; (8012304 <tcp_write+0x2dc>)
 8012292:	f240 2231 	movw	r2, #561	; 0x231
 8012296:	4922      	ldr	r1, [pc, #136]	; (8012320 <tcp_write+0x2f8>)
 8012298:	481c      	ldr	r0, [pc, #112]	; (801230c <tcp_write+0x2e4>)
 801229a:	f003 f9c9 	bl	8015630 <iprintf>
          extendlen = seglen;
 801229e:	8bfb      	ldrh	r3, [r7, #30]
 80122a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80122a2:	e01a      	b.n	80122da <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80122a4:	8bfb      	ldrh	r3, [r7, #30]
 80122a6:	2201      	movs	r2, #1
 80122a8:	4619      	mov	r1, r3
 80122aa:	2000      	movs	r0, #0
 80122ac:	f7fb fa68 	bl	800d780 <pbuf_alloc>
 80122b0:	6578      	str	r0, [r7, #84]	; 0x54
 80122b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	f000 81e0 	beq.w	801267a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80122ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122be:	68ba      	ldr	r2, [r7, #8]
 80122c0:	441a      	add	r2, r3
 80122c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122c4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80122c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80122c8:	f7fb fdcc 	bl	800de64 <pbuf_clen>
 80122cc:	4603      	mov	r3, r0
 80122ce:	461a      	mov	r2, r3
 80122d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80122d4:	4413      	add	r3, r2
 80122d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80122da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80122de:	8bfb      	ldrh	r3, [r7, #30]
 80122e0:	4413      	add	r3, r2
 80122e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80122e6:	e0dc      	b.n	80124a2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	f000 80d7 	beq.w	80124a2 <tcp_write+0x47a>
 80122f4:	4b03      	ldr	r3, [pc, #12]	; (8012304 <tcp_write+0x2dc>)
 80122f6:	f240 224a 	movw	r2, #586	; 0x24a
 80122fa:	490a      	ldr	r1, [pc, #40]	; (8012324 <tcp_write+0x2fc>)
 80122fc:	4803      	ldr	r0, [pc, #12]	; (801230c <tcp_write+0x2e4>)
 80122fe:	f003 f997 	bl	8015630 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012302:	e0ce      	b.n	80124a2 <tcp_write+0x47a>
 8012304:	0801b8d8 	.word	0x0801b8d8
 8012308:	0801bad4 	.word	0x0801bad4
 801230c:	0801b988 	.word	0x0801b988
 8012310:	0801baec 	.word	0x0801baec
 8012314:	0801bb20 	.word	0x0801bb20
 8012318:	0801bb38 	.word	0x0801bb38
 801231c:	0801bb58 	.word	0x0801bb58
 8012320:	0801bb78 	.word	0x0801bb78
 8012324:	0801bba4 	.word	0x0801bba4
    struct pbuf *p;
    u16_t left = len - pos;
 8012328:	88fa      	ldrh	r2, [r7, #6]
 801232a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801232e:	1ad3      	subs	r3, r2, r3
 8012330:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012332:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012336:	b29b      	uxth	r3, r3
 8012338:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801233a:	1ad3      	subs	r3, r2, r3
 801233c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801233e:	8b7a      	ldrh	r2, [r7, #26]
 8012340:	8bbb      	ldrh	r3, [r7, #28]
 8012342:	4293      	cmp	r3, r2
 8012344:	bf28      	it	cs
 8012346:	4613      	movcs	r3, r2
 8012348:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801234a:	797b      	ldrb	r3, [r7, #5]
 801234c:	f003 0301 	and.w	r3, r3, #1
 8012350:	2b00      	cmp	r3, #0
 8012352:	d036      	beq.n	80123c2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012354:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012358:	b29a      	uxth	r2, r3
 801235a:	8b3b      	ldrh	r3, [r7, #24]
 801235c:	4413      	add	r3, r2
 801235e:	b299      	uxth	r1, r3
 8012360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012362:	2b00      	cmp	r3, #0
 8012364:	bf0c      	ite	eq
 8012366:	2301      	moveq	r3, #1
 8012368:	2300      	movne	r3, #0
 801236a:	b2db      	uxtb	r3, r3
 801236c:	f107 0012 	add.w	r0, r7, #18
 8012370:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012372:	9302      	str	r3, [sp, #8]
 8012374:	797b      	ldrb	r3, [r7, #5]
 8012376:	9301      	str	r3, [sp, #4]
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	9300      	str	r3, [sp, #0]
 801237c:	4603      	mov	r3, r0
 801237e:	2036      	movs	r0, #54	; 0x36
 8012380:	f7ff fd5e 	bl	8011e40 <tcp_pbuf_prealloc>
 8012384:	6338      	str	r0, [r7, #48]	; 0x30
 8012386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012388:	2b00      	cmp	r3, #0
 801238a:	f000 8178 	beq.w	801267e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012390:	895b      	ldrh	r3, [r3, #10]
 8012392:	8b3a      	ldrh	r2, [r7, #24]
 8012394:	429a      	cmp	r2, r3
 8012396:	d906      	bls.n	80123a6 <tcp_write+0x37e>
 8012398:	4b8c      	ldr	r3, [pc, #560]	; (80125cc <tcp_write+0x5a4>)
 801239a:	f240 2266 	movw	r2, #614	; 0x266
 801239e:	498c      	ldr	r1, [pc, #560]	; (80125d0 <tcp_write+0x5a8>)
 80123a0:	488c      	ldr	r0, [pc, #560]	; (80125d4 <tcp_write+0x5ac>)
 80123a2:	f003 f945 	bl	8015630 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80123a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a8:	685a      	ldr	r2, [r3, #4]
 80123aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80123ae:	18d0      	adds	r0, r2, r3
 80123b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80123b4:	68ba      	ldr	r2, [r7, #8]
 80123b6:	4413      	add	r3, r2
 80123b8:	8b3a      	ldrh	r2, [r7, #24]
 80123ba:	4619      	mov	r1, r3
 80123bc:	f002 fbf4 	bl	8014ba8 <memcpy>
 80123c0:	e02f      	b.n	8012422 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80123c2:	8a7b      	ldrh	r3, [r7, #18]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d006      	beq.n	80123d6 <tcp_write+0x3ae>
 80123c8:	4b80      	ldr	r3, [pc, #512]	; (80125cc <tcp_write+0x5a4>)
 80123ca:	f240 2271 	movw	r2, #625	; 0x271
 80123ce:	4982      	ldr	r1, [pc, #520]	; (80125d8 <tcp_write+0x5b0>)
 80123d0:	4880      	ldr	r0, [pc, #512]	; (80125d4 <tcp_write+0x5ac>)
 80123d2:	f003 f92d 	bl	8015630 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80123d6:	8b3b      	ldrh	r3, [r7, #24]
 80123d8:	2201      	movs	r2, #1
 80123da:	4619      	mov	r1, r3
 80123dc:	2036      	movs	r0, #54	; 0x36
 80123de:	f7fb f9cf 	bl	800d780 <pbuf_alloc>
 80123e2:	6178      	str	r0, [r7, #20]
 80123e4:	697b      	ldr	r3, [r7, #20]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	f000 814b 	beq.w	8012682 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80123ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80123f0:	68ba      	ldr	r2, [r7, #8]
 80123f2:	441a      	add	r2, r3
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80123f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80123fc:	b29b      	uxth	r3, r3
 80123fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012402:	4619      	mov	r1, r3
 8012404:	2036      	movs	r0, #54	; 0x36
 8012406:	f7fb f9bb 	bl	800d780 <pbuf_alloc>
 801240a:	6338      	str	r0, [r7, #48]	; 0x30
 801240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801240e:	2b00      	cmp	r3, #0
 8012410:	d103      	bne.n	801241a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012412:	6978      	ldr	r0, [r7, #20]
 8012414:	f7fb fc98 	bl	800dd48 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012418:	e136      	b.n	8012688 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801241a:	6979      	ldr	r1, [r7, #20]
 801241c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801241e:	f7fb fd61 	bl	800dee4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012424:	f7fb fd1e 	bl	800de64 <pbuf_clen>
 8012428:	4603      	mov	r3, r0
 801242a:	461a      	mov	r2, r3
 801242c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012430:	4413      	add	r3, r2
 8012432:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012436:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801243a:	2b08      	cmp	r3, #8
 801243c:	d903      	bls.n	8012446 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801243e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012440:	f7fb fc82 	bl	800dd48 <pbuf_free>
      goto memerr;
 8012444:	e120      	b.n	8012688 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801244a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801244e:	441a      	add	r2, r3
 8012450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012454:	9300      	str	r3, [sp, #0]
 8012456:	4613      	mov	r3, r2
 8012458:	2200      	movs	r2, #0
 801245a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801245c:	68f8      	ldr	r0, [r7, #12]
 801245e:	f7ff fc51 	bl	8011d04 <tcp_create_segment>
 8012462:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012466:	2b00      	cmp	r3, #0
 8012468:	f000 810d 	beq.w	8012686 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801246c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801246e:	2b00      	cmp	r3, #0
 8012470:	d102      	bne.n	8012478 <tcp_write+0x450>
      queue = seg;
 8012472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012474:	647b      	str	r3, [r7, #68]	; 0x44
 8012476:	e00c      	b.n	8012492 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801247a:	2b00      	cmp	r3, #0
 801247c:	d106      	bne.n	801248c <tcp_write+0x464>
 801247e:	4b53      	ldr	r3, [pc, #332]	; (80125cc <tcp_write+0x5a4>)
 8012480:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012484:	4955      	ldr	r1, [pc, #340]	; (80125dc <tcp_write+0x5b4>)
 8012486:	4853      	ldr	r0, [pc, #332]	; (80125d4 <tcp_write+0x5ac>)
 8012488:	f003 f8d2 	bl	8015630 <iprintf>
      prev_seg->next = seg;
 801248c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801248e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012490:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012494:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012496:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801249a:	8b3b      	ldrh	r3, [r7, #24]
 801249c:	4413      	add	r3, r2
 801249e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80124a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80124a6:	88fb      	ldrh	r3, [r7, #6]
 80124a8:	429a      	cmp	r2, r3
 80124aa:	f4ff af3d 	bcc.w	8012328 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80124ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d02c      	beq.n	801250e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80124b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124b6:	685b      	ldr	r3, [r3, #4]
 80124b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80124ba:	e01e      	b.n	80124fa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80124bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124be:	891a      	ldrh	r2, [r3, #8]
 80124c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80124c2:	4413      	add	r3, r2
 80124c4:	b29a      	uxth	r2, r3
 80124c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80124ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d110      	bne.n	80124f4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80124d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d4:	685b      	ldr	r3, [r3, #4]
 80124d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80124d8:	8952      	ldrh	r2, [r2, #10]
 80124da:	4413      	add	r3, r2
 80124dc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80124de:	68b9      	ldr	r1, [r7, #8]
 80124e0:	4618      	mov	r0, r3
 80124e2:	f002 fb61 	bl	8014ba8 <memcpy>
        p->len += oversize_used;
 80124e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e8:	895a      	ldrh	r2, [r3, #10]
 80124ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80124ec:	4413      	add	r3, r2
 80124ee:	b29a      	uxth	r2, r3
 80124f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80124f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80124fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d1dd      	bne.n	80124bc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012502:	891a      	ldrh	r2, [r3, #8]
 8012504:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012506:	4413      	add	r3, r2
 8012508:	b29a      	uxth	r2, r3
 801250a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801250c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801250e:	8a7a      	ldrh	r2, [r7, #18]
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012518:	2b00      	cmp	r3, #0
 801251a:	d018      	beq.n	801254e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801251c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801251e:	2b00      	cmp	r3, #0
 8012520:	d106      	bne.n	8012530 <tcp_write+0x508>
 8012522:	4b2a      	ldr	r3, [pc, #168]	; (80125cc <tcp_write+0x5a4>)
 8012524:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012528:	492d      	ldr	r1, [pc, #180]	; (80125e0 <tcp_write+0x5b8>)
 801252a:	482a      	ldr	r0, [pc, #168]	; (80125d4 <tcp_write+0x5ac>)
 801252c:	f003 f880 	bl	8015630 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012532:	685b      	ldr	r3, [r3, #4]
 8012534:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012536:	4618      	mov	r0, r3
 8012538:	f7fb fcd4 	bl	800dee4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801253c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801253e:	891a      	ldrh	r2, [r3, #8]
 8012540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012542:	891b      	ldrh	r3, [r3, #8]
 8012544:	4413      	add	r3, r2
 8012546:	b29a      	uxth	r2, r3
 8012548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801254a:	811a      	strh	r2, [r3, #8]
 801254c:	e037      	b.n	80125be <tcp_write+0x596>
  } else if (extendlen > 0) {
 801254e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012550:	2b00      	cmp	r3, #0
 8012552:	d034      	beq.n	80125be <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012556:	2b00      	cmp	r3, #0
 8012558:	d003      	beq.n	8012562 <tcp_write+0x53a>
 801255a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801255c:	685b      	ldr	r3, [r3, #4]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d106      	bne.n	8012570 <tcp_write+0x548>
 8012562:	4b1a      	ldr	r3, [pc, #104]	; (80125cc <tcp_write+0x5a4>)
 8012564:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012568:	491e      	ldr	r1, [pc, #120]	; (80125e4 <tcp_write+0x5bc>)
 801256a:	481a      	ldr	r0, [pc, #104]	; (80125d4 <tcp_write+0x5ac>)
 801256c:	f003 f860 	bl	8015630 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	62bb      	str	r3, [r7, #40]	; 0x28
 8012576:	e009      	b.n	801258c <tcp_write+0x564>
      p->tot_len += extendlen;
 8012578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801257a:	891a      	ldrh	r2, [r3, #8]
 801257c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801257e:	4413      	add	r3, r2
 8012580:	b29a      	uxth	r2, r3
 8012582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012584:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	62bb      	str	r3, [r7, #40]	; 0x28
 801258c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d1f1      	bne.n	8012578 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012596:	891a      	ldrh	r2, [r3, #8]
 8012598:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801259a:	4413      	add	r3, r2
 801259c:	b29a      	uxth	r2, r3
 801259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80125a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a4:	895a      	ldrh	r2, [r3, #10]
 80125a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80125a8:	4413      	add	r3, r2
 80125aa:	b29a      	uxth	r2, r3
 80125ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ae:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80125b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125b2:	891a      	ldrh	r2, [r3, #8]
 80125b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80125b6:	4413      	add	r3, r2
 80125b8:	b29a      	uxth	r2, r3
 80125ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125bc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80125be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d111      	bne.n	80125e8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80125c8:	66da      	str	r2, [r3, #108]	; 0x6c
 80125ca:	e010      	b.n	80125ee <tcp_write+0x5c6>
 80125cc:	0801b8d8 	.word	0x0801b8d8
 80125d0:	0801bbd4 	.word	0x0801bbd4
 80125d4:	0801b988 	.word	0x0801b988
 80125d8:	0801bc14 	.word	0x0801bc14
 80125dc:	0801bc24 	.word	0x0801bc24
 80125e0:	0801bc38 	.word	0x0801bc38
 80125e4:	0801bc70 	.word	0x0801bc70
  } else {
    last_unsent->next = queue;
 80125e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80125ec:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80125f2:	88fb      	ldrh	r3, [r7, #6]
 80125f4:	441a      	add	r2, r3
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012600:	88fb      	ldrh	r3, [r7, #6]
 8012602:	1ad3      	subs	r3, r2, r3
 8012604:	b29a      	uxth	r2, r3
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012612:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801261c:	2b00      	cmp	r3, #0
 801261e:	d00e      	beq.n	801263e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012624:	2b00      	cmp	r3, #0
 8012626:	d10a      	bne.n	801263e <tcp_write+0x616>
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801262c:	2b00      	cmp	r3, #0
 801262e:	d106      	bne.n	801263e <tcp_write+0x616>
 8012630:	4b2c      	ldr	r3, [pc, #176]	; (80126e4 <tcp_write+0x6bc>)
 8012632:	f240 3212 	movw	r2, #786	; 0x312
 8012636:	492c      	ldr	r1, [pc, #176]	; (80126e8 <tcp_write+0x6c0>)
 8012638:	482c      	ldr	r0, [pc, #176]	; (80126ec <tcp_write+0x6c4>)
 801263a:	f002 fff9 	bl	8015630 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801263e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012640:	2b00      	cmp	r3, #0
 8012642:	d016      	beq.n	8012672 <tcp_write+0x64a>
 8012644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012646:	68db      	ldr	r3, [r3, #12]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d012      	beq.n	8012672 <tcp_write+0x64a>
 801264c:	797b      	ldrb	r3, [r7, #5]
 801264e:	f003 0302 	and.w	r3, r3, #2
 8012652:	2b00      	cmp	r3, #0
 8012654:	d10d      	bne.n	8012672 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012658:	68db      	ldr	r3, [r3, #12]
 801265a:	899b      	ldrh	r3, [r3, #12]
 801265c:	b29c      	uxth	r4, r3
 801265e:	2008      	movs	r0, #8
 8012660:	f7f9 ffe4 	bl	800c62c <lwip_htons>
 8012664:	4603      	mov	r3, r0
 8012666:	461a      	mov	r2, r3
 8012668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801266a:	68db      	ldr	r3, [r3, #12]
 801266c:	4322      	orrs	r2, r4
 801266e:	b292      	uxth	r2, r2
 8012670:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012672:	2300      	movs	r3, #0
 8012674:	e031      	b.n	80126da <tcp_write+0x6b2>
          goto memerr;
 8012676:	bf00      	nop
 8012678:	e006      	b.n	8012688 <tcp_write+0x660>
            goto memerr;
 801267a:	bf00      	nop
 801267c:	e004      	b.n	8012688 <tcp_write+0x660>
        goto memerr;
 801267e:	bf00      	nop
 8012680:	e002      	b.n	8012688 <tcp_write+0x660>
        goto memerr;
 8012682:	bf00      	nop
 8012684:	e000      	b.n	8012688 <tcp_write+0x660>
      goto memerr;
 8012686:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	8b5b      	ldrh	r3, [r3, #26]
 801268c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012690:	b29a      	uxth	r2, r3
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012698:	2b00      	cmp	r3, #0
 801269a:	d002      	beq.n	80126a2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801269c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801269e:	f7fb fb53 	bl	800dd48 <pbuf_free>
  }
  if (queue != NULL) {
 80126a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d002      	beq.n	80126ae <tcp_write+0x686>
    tcp_segs_free(queue);
 80126a8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80126aa:	f7fc ff65 	bl	800f578 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d00e      	beq.n	80126d6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d10a      	bne.n	80126d6 <tcp_write+0x6ae>
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d106      	bne.n	80126d6 <tcp_write+0x6ae>
 80126c8:	4b06      	ldr	r3, [pc, #24]	; (80126e4 <tcp_write+0x6bc>)
 80126ca:	f240 3227 	movw	r2, #807	; 0x327
 80126ce:	4906      	ldr	r1, [pc, #24]	; (80126e8 <tcp_write+0x6c0>)
 80126d0:	4806      	ldr	r0, [pc, #24]	; (80126ec <tcp_write+0x6c4>)
 80126d2:	f002 ffad 	bl	8015630 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80126d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80126da:	4618      	mov	r0, r3
 80126dc:	375c      	adds	r7, #92	; 0x5c
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd90      	pop	{r4, r7, pc}
 80126e2:	bf00      	nop
 80126e4:	0801b8d8 	.word	0x0801b8d8
 80126e8:	0801bca8 	.word	0x0801bca8
 80126ec:	0801b988 	.word	0x0801b988

080126f0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80126f0:	b590      	push	{r4, r7, lr}
 80126f2:	b08b      	sub	sp, #44	; 0x2c
 80126f4:	af02      	add	r7, sp, #8
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	460b      	mov	r3, r1
 80126fa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80126fc:	2300      	movs	r3, #0
 80126fe:	61fb      	str	r3, [r7, #28]
 8012700:	2300      	movs	r3, #0
 8012702:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012704:	2300      	movs	r3, #0
 8012706:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d106      	bne.n	801271c <tcp_split_unsent_seg+0x2c>
 801270e:	4b95      	ldr	r3, [pc, #596]	; (8012964 <tcp_split_unsent_seg+0x274>)
 8012710:	f240 324b 	movw	r2, #843	; 0x34b
 8012714:	4994      	ldr	r1, [pc, #592]	; (8012968 <tcp_split_unsent_seg+0x278>)
 8012716:	4895      	ldr	r0, [pc, #596]	; (801296c <tcp_split_unsent_seg+0x27c>)
 8012718:	f002 ff8a 	bl	8015630 <iprintf>

  useg = pcb->unsent;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012720:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012722:	697b      	ldr	r3, [r7, #20]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d102      	bne.n	801272e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012728:	f04f 33ff 	mov.w	r3, #4294967295
 801272c:	e116      	b.n	801295c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801272e:	887b      	ldrh	r3, [r7, #2]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d109      	bne.n	8012748 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012734:	4b8b      	ldr	r3, [pc, #556]	; (8012964 <tcp_split_unsent_seg+0x274>)
 8012736:	f240 3253 	movw	r2, #851	; 0x353
 801273a:	498d      	ldr	r1, [pc, #564]	; (8012970 <tcp_split_unsent_seg+0x280>)
 801273c:	488b      	ldr	r0, [pc, #556]	; (801296c <tcp_split_unsent_seg+0x27c>)
 801273e:	f002 ff77 	bl	8015630 <iprintf>
    return ERR_VAL;
 8012742:	f06f 0305 	mvn.w	r3, #5
 8012746:	e109      	b.n	801295c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012748:	697b      	ldr	r3, [r7, #20]
 801274a:	891b      	ldrh	r3, [r3, #8]
 801274c:	887a      	ldrh	r2, [r7, #2]
 801274e:	429a      	cmp	r2, r3
 8012750:	d301      	bcc.n	8012756 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012752:	2300      	movs	r3, #0
 8012754:	e102      	b.n	801295c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801275a:	887a      	ldrh	r2, [r7, #2]
 801275c:	429a      	cmp	r2, r3
 801275e:	d906      	bls.n	801276e <tcp_split_unsent_seg+0x7e>
 8012760:	4b80      	ldr	r3, [pc, #512]	; (8012964 <tcp_split_unsent_seg+0x274>)
 8012762:	f240 325b 	movw	r2, #859	; 0x35b
 8012766:	4983      	ldr	r1, [pc, #524]	; (8012974 <tcp_split_unsent_seg+0x284>)
 8012768:	4880      	ldr	r0, [pc, #512]	; (801296c <tcp_split_unsent_seg+0x27c>)
 801276a:	f002 ff61 	bl	8015630 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	891b      	ldrh	r3, [r3, #8]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d106      	bne.n	8012784 <tcp_split_unsent_seg+0x94>
 8012776:	4b7b      	ldr	r3, [pc, #492]	; (8012964 <tcp_split_unsent_seg+0x274>)
 8012778:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801277c:	497e      	ldr	r1, [pc, #504]	; (8012978 <tcp_split_unsent_seg+0x288>)
 801277e:	487b      	ldr	r0, [pc, #492]	; (801296c <tcp_split_unsent_seg+0x27c>)
 8012780:	f002 ff56 	bl	8015630 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	7a9b      	ldrb	r3, [r3, #10]
 8012788:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801278a:	7bfb      	ldrb	r3, [r7, #15]
 801278c:	009b      	lsls	r3, r3, #2
 801278e:	b2db      	uxtb	r3, r3
 8012790:	f003 0304 	and.w	r3, r3, #4
 8012794:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	891a      	ldrh	r2, [r3, #8]
 801279a:	887b      	ldrh	r3, [r7, #2]
 801279c:	1ad3      	subs	r3, r2, r3
 801279e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80127a0:	7bbb      	ldrb	r3, [r7, #14]
 80127a2:	b29a      	uxth	r2, r3
 80127a4:	89bb      	ldrh	r3, [r7, #12]
 80127a6:	4413      	add	r3, r2
 80127a8:	b29b      	uxth	r3, r3
 80127aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127ae:	4619      	mov	r1, r3
 80127b0:	2036      	movs	r0, #54	; 0x36
 80127b2:	f7fa ffe5 	bl	800d780 <pbuf_alloc>
 80127b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	f000 80b7 	beq.w	801292e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	685b      	ldr	r3, [r3, #4]
 80127c4:	891a      	ldrh	r2, [r3, #8]
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	891b      	ldrh	r3, [r3, #8]
 80127ca:	1ad3      	subs	r3, r2, r3
 80127cc:	b29a      	uxth	r2, r3
 80127ce:	887b      	ldrh	r3, [r7, #2]
 80127d0:	4413      	add	r3, r2
 80127d2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	6858      	ldr	r0, [r3, #4]
 80127d8:	693b      	ldr	r3, [r7, #16]
 80127da:	685a      	ldr	r2, [r3, #4]
 80127dc:	7bbb      	ldrb	r3, [r7, #14]
 80127de:	18d1      	adds	r1, r2, r3
 80127e0:	897b      	ldrh	r3, [r7, #10]
 80127e2:	89ba      	ldrh	r2, [r7, #12]
 80127e4:	f7fb fcb6 	bl	800e154 <pbuf_copy_partial>
 80127e8:	4603      	mov	r3, r0
 80127ea:	461a      	mov	r2, r3
 80127ec:	89bb      	ldrh	r3, [r7, #12]
 80127ee:	4293      	cmp	r3, r2
 80127f0:	f040 809f 	bne.w	8012932 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	68db      	ldr	r3, [r3, #12]
 80127f8:	899b      	ldrh	r3, [r3, #12]
 80127fa:	b29b      	uxth	r3, r3
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7f9 ff15 	bl	800c62c <lwip_htons>
 8012802:	4603      	mov	r3, r0
 8012804:	b2db      	uxtb	r3, r3
 8012806:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801280a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801280c:	2300      	movs	r3, #0
 801280e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012810:	7efb      	ldrb	r3, [r7, #27]
 8012812:	f003 0308 	and.w	r3, r3, #8
 8012816:	2b00      	cmp	r3, #0
 8012818:	d007      	beq.n	801282a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801281a:	7efb      	ldrb	r3, [r7, #27]
 801281c:	f023 0308 	bic.w	r3, r3, #8
 8012820:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012822:	7ebb      	ldrb	r3, [r7, #26]
 8012824:	f043 0308 	orr.w	r3, r3, #8
 8012828:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801282a:	7efb      	ldrb	r3, [r7, #27]
 801282c:	f003 0301 	and.w	r3, r3, #1
 8012830:	2b00      	cmp	r3, #0
 8012832:	d007      	beq.n	8012844 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012834:	7efb      	ldrb	r3, [r7, #27]
 8012836:	f023 0301 	bic.w	r3, r3, #1
 801283a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801283c:	7ebb      	ldrb	r3, [r7, #26]
 801283e:	f043 0301 	orr.w	r3, r3, #1
 8012842:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	68db      	ldr	r3, [r3, #12]
 8012848:	685b      	ldr	r3, [r3, #4]
 801284a:	4618      	mov	r0, r3
 801284c:	f7f9 ff03 	bl	800c656 <lwip_htonl>
 8012850:	4602      	mov	r2, r0
 8012852:	887b      	ldrh	r3, [r7, #2]
 8012854:	18d1      	adds	r1, r2, r3
 8012856:	7eba      	ldrb	r2, [r7, #26]
 8012858:	7bfb      	ldrb	r3, [r7, #15]
 801285a:	9300      	str	r3, [sp, #0]
 801285c:	460b      	mov	r3, r1
 801285e:	6939      	ldr	r1, [r7, #16]
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	f7ff fa4f 	bl	8011d04 <tcp_create_segment>
 8012866:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012868:	69fb      	ldr	r3, [r7, #28]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d063      	beq.n	8012936 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801286e:	697b      	ldr	r3, [r7, #20]
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	4618      	mov	r0, r3
 8012874:	f7fb faf6 	bl	800de64 <pbuf_clen>
 8012878:	4603      	mov	r3, r0
 801287a:	461a      	mov	r2, r3
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012882:	1a9b      	subs	r3, r3, r2
 8012884:	b29a      	uxth	r2, r3
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	6858      	ldr	r0, [r3, #4]
 8012890:	697b      	ldr	r3, [r7, #20]
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	891a      	ldrh	r2, [r3, #8]
 8012896:	89bb      	ldrh	r3, [r7, #12]
 8012898:	1ad3      	subs	r3, r2, r3
 801289a:	b29b      	uxth	r3, r3
 801289c:	4619      	mov	r1, r3
 801289e:	f7fb f8cd 	bl	800da3c <pbuf_realloc>
  useg->len -= remainder;
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	891a      	ldrh	r2, [r3, #8]
 80128a6:	89bb      	ldrh	r3, [r7, #12]
 80128a8:	1ad3      	subs	r3, r2, r3
 80128aa:	b29a      	uxth	r2, r3
 80128ac:	697b      	ldr	r3, [r7, #20]
 80128ae:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	68db      	ldr	r3, [r3, #12]
 80128b4:	899b      	ldrh	r3, [r3, #12]
 80128b6:	b29c      	uxth	r4, r3
 80128b8:	7efb      	ldrb	r3, [r7, #27]
 80128ba:	b29b      	uxth	r3, r3
 80128bc:	4618      	mov	r0, r3
 80128be:	f7f9 feb5 	bl	800c62c <lwip_htons>
 80128c2:	4603      	mov	r3, r0
 80128c4:	461a      	mov	r2, r3
 80128c6:	697b      	ldr	r3, [r7, #20]
 80128c8:	68db      	ldr	r3, [r3, #12]
 80128ca:	4322      	orrs	r2, r4
 80128cc:	b292      	uxth	r2, r2
 80128ce:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80128d0:	697b      	ldr	r3, [r7, #20]
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	4618      	mov	r0, r3
 80128d6:	f7fb fac5 	bl	800de64 <pbuf_clen>
 80128da:	4603      	mov	r3, r0
 80128dc:	461a      	mov	r2, r3
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128e4:	4413      	add	r3, r2
 80128e6:	b29a      	uxth	r2, r3
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80128ee:	69fb      	ldr	r3, [r7, #28]
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7fb fab6 	bl	800de64 <pbuf_clen>
 80128f8:	4603      	mov	r3, r0
 80128fa:	461a      	mov	r2, r3
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012902:	4413      	add	r3, r2
 8012904:	b29a      	uxth	r2, r3
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801290c:	697b      	ldr	r3, [r7, #20]
 801290e:	681a      	ldr	r2, [r3, #0]
 8012910:	69fb      	ldr	r3, [r7, #28]
 8012912:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	69fa      	ldr	r2, [r7, #28]
 8012918:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801291a:	69fb      	ldr	r3, [r7, #28]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d103      	bne.n	801292a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2200      	movs	r2, #0
 8012926:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801292a:	2300      	movs	r3, #0
 801292c:	e016      	b.n	801295c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801292e:	bf00      	nop
 8012930:	e002      	b.n	8012938 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012932:	bf00      	nop
 8012934:	e000      	b.n	8012938 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012936:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012938:	69fb      	ldr	r3, [r7, #28]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d006      	beq.n	801294c <tcp_split_unsent_seg+0x25c>
 801293e:	4b09      	ldr	r3, [pc, #36]	; (8012964 <tcp_split_unsent_seg+0x274>)
 8012940:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012944:	490d      	ldr	r1, [pc, #52]	; (801297c <tcp_split_unsent_seg+0x28c>)
 8012946:	4809      	ldr	r0, [pc, #36]	; (801296c <tcp_split_unsent_seg+0x27c>)
 8012948:	f002 fe72 	bl	8015630 <iprintf>
  if (p != NULL) {
 801294c:	693b      	ldr	r3, [r7, #16]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d002      	beq.n	8012958 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012952:	6938      	ldr	r0, [r7, #16]
 8012954:	f7fb f9f8 	bl	800dd48 <pbuf_free>
  }

  return ERR_MEM;
 8012958:	f04f 33ff 	mov.w	r3, #4294967295
}
 801295c:	4618      	mov	r0, r3
 801295e:	3724      	adds	r7, #36	; 0x24
 8012960:	46bd      	mov	sp, r7
 8012962:	bd90      	pop	{r4, r7, pc}
 8012964:	0801b8d8 	.word	0x0801b8d8
 8012968:	0801bcc8 	.word	0x0801bcc8
 801296c:	0801b988 	.word	0x0801b988
 8012970:	0801bcec 	.word	0x0801bcec
 8012974:	0801bd10 	.word	0x0801bd10
 8012978:	0801bd20 	.word	0x0801bd20
 801297c:	0801bd30 	.word	0x0801bd30

08012980 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012980:	b590      	push	{r4, r7, lr}
 8012982:	b085      	sub	sp, #20
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d106      	bne.n	801299c <tcp_send_fin+0x1c>
 801298e:	4b21      	ldr	r3, [pc, #132]	; (8012a14 <tcp_send_fin+0x94>)
 8012990:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012994:	4920      	ldr	r1, [pc, #128]	; (8012a18 <tcp_send_fin+0x98>)
 8012996:	4821      	ldr	r0, [pc, #132]	; (8012a1c <tcp_send_fin+0x9c>)
 8012998:	f002 fe4a 	bl	8015630 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d02e      	beq.n	8012a02 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129a8:	60fb      	str	r3, [r7, #12]
 80129aa:	e002      	b.n	80129b2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d1f8      	bne.n	80129ac <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	68db      	ldr	r3, [r3, #12]
 80129be:	899b      	ldrh	r3, [r3, #12]
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7f9 fe32 	bl	800c62c <lwip_htons>
 80129c8:	4603      	mov	r3, r0
 80129ca:	b2db      	uxtb	r3, r3
 80129cc:	f003 0307 	and.w	r3, r3, #7
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d116      	bne.n	8012a02 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	68db      	ldr	r3, [r3, #12]
 80129d8:	899b      	ldrh	r3, [r3, #12]
 80129da:	b29c      	uxth	r4, r3
 80129dc:	2001      	movs	r0, #1
 80129de:	f7f9 fe25 	bl	800c62c <lwip_htons>
 80129e2:	4603      	mov	r3, r0
 80129e4:	461a      	mov	r2, r3
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	68db      	ldr	r3, [r3, #12]
 80129ea:	4322      	orrs	r2, r4
 80129ec:	b292      	uxth	r2, r2
 80129ee:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	8b5b      	ldrh	r3, [r3, #26]
 80129f4:	f043 0320 	orr.w	r3, r3, #32
 80129f8:	b29a      	uxth	r2, r3
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80129fe:	2300      	movs	r3, #0
 8012a00:	e004      	b.n	8012a0c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012a02:	2101      	movs	r1, #1
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f000 f80b 	bl	8012a20 <tcp_enqueue_flags>
 8012a0a:	4603      	mov	r3, r0
}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	3714      	adds	r7, #20
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd90      	pop	{r4, r7, pc}
 8012a14:	0801b8d8 	.word	0x0801b8d8
 8012a18:	0801bd3c 	.word	0x0801bd3c
 8012a1c:	0801b988 	.word	0x0801b988

08012a20 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b08a      	sub	sp, #40	; 0x28
 8012a24:	af02      	add	r7, sp, #8
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	460b      	mov	r3, r1
 8012a2a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012a30:	2300      	movs	r3, #0
 8012a32:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012a34:	78fb      	ldrb	r3, [r7, #3]
 8012a36:	f003 0303 	and.w	r3, r3, #3
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d106      	bne.n	8012a4c <tcp_enqueue_flags+0x2c>
 8012a3e:	4b67      	ldr	r3, [pc, #412]	; (8012bdc <tcp_enqueue_flags+0x1bc>)
 8012a40:	f240 4211 	movw	r2, #1041	; 0x411
 8012a44:	4966      	ldr	r1, [pc, #408]	; (8012be0 <tcp_enqueue_flags+0x1c0>)
 8012a46:	4867      	ldr	r0, [pc, #412]	; (8012be4 <tcp_enqueue_flags+0x1c4>)
 8012a48:	f002 fdf2 	bl	8015630 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d106      	bne.n	8012a60 <tcp_enqueue_flags+0x40>
 8012a52:	4b62      	ldr	r3, [pc, #392]	; (8012bdc <tcp_enqueue_flags+0x1bc>)
 8012a54:	f240 4213 	movw	r2, #1043	; 0x413
 8012a58:	4963      	ldr	r1, [pc, #396]	; (8012be8 <tcp_enqueue_flags+0x1c8>)
 8012a5a:	4862      	ldr	r0, [pc, #392]	; (8012be4 <tcp_enqueue_flags+0x1c4>)
 8012a5c:	f002 fde8 	bl	8015630 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012a60:	78fb      	ldrb	r3, [r7, #3]
 8012a62:	f003 0302 	and.w	r3, r3, #2
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d001      	beq.n	8012a6e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012a6e:	7ffb      	ldrb	r3, [r7, #31]
 8012a70:	009b      	lsls	r3, r3, #2
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	f003 0304 	and.w	r3, r3, #4
 8012a78:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012a7a:	7dfb      	ldrb	r3, [r7, #23]
 8012a7c:	b29b      	uxth	r3, r3
 8012a7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a82:	4619      	mov	r1, r3
 8012a84:	2036      	movs	r0, #54	; 0x36
 8012a86:	f7fa fe7b 	bl	800d780 <pbuf_alloc>
 8012a8a:	6138      	str	r0, [r7, #16]
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d109      	bne.n	8012aa6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	8b5b      	ldrh	r3, [r3, #26]
 8012a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a9a:	b29a      	uxth	r2, r3
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8012aa4:	e095      	b.n	8012bd2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012aa6:	693b      	ldr	r3, [r7, #16]
 8012aa8:	895a      	ldrh	r2, [r3, #10]
 8012aaa:	7dfb      	ldrb	r3, [r7, #23]
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d206      	bcs.n	8012ac0 <tcp_enqueue_flags+0xa0>
 8012ab2:	4b4a      	ldr	r3, [pc, #296]	; (8012bdc <tcp_enqueue_flags+0x1bc>)
 8012ab4:	f240 4239 	movw	r2, #1081	; 0x439
 8012ab8:	494c      	ldr	r1, [pc, #304]	; (8012bec <tcp_enqueue_flags+0x1cc>)
 8012aba:	484a      	ldr	r0, [pc, #296]	; (8012be4 <tcp_enqueue_flags+0x1c4>)
 8012abc:	f002 fdb8 	bl	8015630 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012ac4:	78fa      	ldrb	r2, [r7, #3]
 8012ac6:	7ffb      	ldrb	r3, [r7, #31]
 8012ac8:	9300      	str	r3, [sp, #0]
 8012aca:	460b      	mov	r3, r1
 8012acc:	6939      	ldr	r1, [r7, #16]
 8012ace:	6878      	ldr	r0, [r7, #4]
 8012ad0:	f7ff f918 	bl	8011d04 <tcp_create_segment>
 8012ad4:	60f8      	str	r0, [r7, #12]
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d109      	bne.n	8012af0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	8b5b      	ldrh	r3, [r3, #26]
 8012ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ae4:	b29a      	uxth	r2, r3
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012aea:	f04f 33ff 	mov.w	r3, #4294967295
 8012aee:	e070      	b.n	8012bd2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	68db      	ldr	r3, [r3, #12]
 8012af4:	f003 0303 	and.w	r3, r3, #3
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d006      	beq.n	8012b0a <tcp_enqueue_flags+0xea>
 8012afc:	4b37      	ldr	r3, [pc, #220]	; (8012bdc <tcp_enqueue_flags+0x1bc>)
 8012afe:	f240 4242 	movw	r2, #1090	; 0x442
 8012b02:	493b      	ldr	r1, [pc, #236]	; (8012bf0 <tcp_enqueue_flags+0x1d0>)
 8012b04:	4837      	ldr	r0, [pc, #220]	; (8012be4 <tcp_enqueue_flags+0x1c4>)
 8012b06:	f002 fd93 	bl	8015630 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	891b      	ldrh	r3, [r3, #8]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d006      	beq.n	8012b20 <tcp_enqueue_flags+0x100>
 8012b12:	4b32      	ldr	r3, [pc, #200]	; (8012bdc <tcp_enqueue_flags+0x1bc>)
 8012b14:	f240 4243 	movw	r2, #1091	; 0x443
 8012b18:	4936      	ldr	r1, [pc, #216]	; (8012bf4 <tcp_enqueue_flags+0x1d4>)
 8012b1a:	4832      	ldr	r0, [pc, #200]	; (8012be4 <tcp_enqueue_flags+0x1c4>)
 8012b1c:	f002 fd88 	bl	8015630 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d103      	bne.n	8012b30 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	68fa      	ldr	r2, [r7, #12]
 8012b2c:	66da      	str	r2, [r3, #108]	; 0x6c
 8012b2e:	e00d      	b.n	8012b4c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b34:	61bb      	str	r3, [r7, #24]
 8012b36:	e002      	b.n	8012b3e <tcp_enqueue_flags+0x11e>
 8012b38:	69bb      	ldr	r3, [r7, #24]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	61bb      	str	r3, [r7, #24]
 8012b3e:	69bb      	ldr	r3, [r7, #24]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d1f8      	bne.n	8012b38 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012b46:	69bb      	ldr	r3, [r7, #24]
 8012b48:	68fa      	ldr	r2, [r7, #12]
 8012b4a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012b54:	78fb      	ldrb	r3, [r7, #3]
 8012b56:	f003 0302 	and.w	r3, r3, #2
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d104      	bne.n	8012b68 <tcp_enqueue_flags+0x148>
 8012b5e:	78fb      	ldrb	r3, [r7, #3]
 8012b60:	f003 0301 	and.w	r3, r3, #1
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d004      	beq.n	8012b72 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b6c:	1c5a      	adds	r2, r3, #1
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012b72:	78fb      	ldrb	r3, [r7, #3]
 8012b74:	f003 0301 	and.w	r3, r3, #1
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d006      	beq.n	8012b8a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	8b5b      	ldrh	r3, [r3, #26]
 8012b80:	f043 0320 	orr.w	r3, r3, #32
 8012b84:	b29a      	uxth	r2, r3
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7fb f968 	bl	800de64 <pbuf_clen>
 8012b94:	4603      	mov	r3, r0
 8012b96:	461a      	mov	r2, r3
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b9e:	4413      	add	r3, r2
 8012ba0:	b29a      	uxth	r2, r3
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d00e      	beq.n	8012bd0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d10a      	bne.n	8012bd0 <tcp_enqueue_flags+0x1b0>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d106      	bne.n	8012bd0 <tcp_enqueue_flags+0x1b0>
 8012bc2:	4b06      	ldr	r3, [pc, #24]	; (8012bdc <tcp_enqueue_flags+0x1bc>)
 8012bc4:	f240 4265 	movw	r2, #1125	; 0x465
 8012bc8:	490b      	ldr	r1, [pc, #44]	; (8012bf8 <tcp_enqueue_flags+0x1d8>)
 8012bca:	4806      	ldr	r0, [pc, #24]	; (8012be4 <tcp_enqueue_flags+0x1c4>)
 8012bcc:	f002 fd30 	bl	8015630 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012bd0:	2300      	movs	r3, #0
}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3720      	adds	r7, #32
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}
 8012bda:	bf00      	nop
 8012bdc:	0801b8d8 	.word	0x0801b8d8
 8012be0:	0801bd58 	.word	0x0801bd58
 8012be4:	0801b988 	.word	0x0801b988
 8012be8:	0801bdb0 	.word	0x0801bdb0
 8012bec:	0801bdd0 	.word	0x0801bdd0
 8012bf0:	0801be0c 	.word	0x0801be0c
 8012bf4:	0801be24 	.word	0x0801be24
 8012bf8:	0801be50 	.word	0x0801be50

08012bfc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012bfc:	b5b0      	push	{r4, r5, r7, lr}
 8012bfe:	b08a      	sub	sp, #40	; 0x28
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d106      	bne.n	8012c18 <tcp_output+0x1c>
 8012c0a:	4b9e      	ldr	r3, [pc, #632]	; (8012e84 <tcp_output+0x288>)
 8012c0c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012c10:	499d      	ldr	r1, [pc, #628]	; (8012e88 <tcp_output+0x28c>)
 8012c12:	489e      	ldr	r0, [pc, #632]	; (8012e8c <tcp_output+0x290>)
 8012c14:	f002 fd0c 	bl	8015630 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	7d1b      	ldrb	r3, [r3, #20]
 8012c1c:	2b01      	cmp	r3, #1
 8012c1e:	d106      	bne.n	8012c2e <tcp_output+0x32>
 8012c20:	4b98      	ldr	r3, [pc, #608]	; (8012e84 <tcp_output+0x288>)
 8012c22:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012c26:	499a      	ldr	r1, [pc, #616]	; (8012e90 <tcp_output+0x294>)
 8012c28:	4898      	ldr	r0, [pc, #608]	; (8012e8c <tcp_output+0x290>)
 8012c2a:	f002 fd01 	bl	8015630 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012c2e:	4b99      	ldr	r3, [pc, #612]	; (8012e94 <tcp_output+0x298>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	687a      	ldr	r2, [r7, #4]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d101      	bne.n	8012c3c <tcp_output+0x40>
    return ERR_OK;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	e1ce      	b.n	8012fda <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012c48:	4293      	cmp	r3, r2
 8012c4a:	bf28      	it	cs
 8012c4c:	4613      	movcs	r3, r2
 8012c4e:	b29b      	uxth	r3, r3
 8012c50:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c56:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d10b      	bne.n	8012c76 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	8b5b      	ldrh	r3, [r3, #26]
 8012c62:	f003 0302 	and.w	r3, r3, #2
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	f000 81aa 	beq.w	8012fc0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f000 fdcb 	bl	8013808 <tcp_send_empty_ack>
 8012c72:	4603      	mov	r3, r0
 8012c74:	e1b1      	b.n	8012fda <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012c76:	6879      	ldr	r1, [r7, #4]
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	3304      	adds	r3, #4
 8012c7c:	461a      	mov	r2, r3
 8012c7e:	6878      	ldr	r0, [r7, #4]
 8012c80:	f7ff f824 	bl	8011ccc <tcp_route>
 8012c84:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012c86:	697b      	ldr	r3, [r7, #20]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d102      	bne.n	8012c92 <tcp_output+0x96>
    return ERR_RTE;
 8012c8c:	f06f 0303 	mvn.w	r3, #3
 8012c90:	e1a3      	b.n	8012fda <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d003      	beq.n	8012ca0 <tcp_output+0xa4>
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d111      	bne.n	8012cc4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012ca0:	697b      	ldr	r3, [r7, #20]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d002      	beq.n	8012cac <tcp_output+0xb0>
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	3304      	adds	r3, #4
 8012caa:	e000      	b.n	8012cae <tcp_output+0xb2>
 8012cac:	2300      	movs	r3, #0
 8012cae:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012cb0:	693b      	ldr	r3, [r7, #16]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d102      	bne.n	8012cbc <tcp_output+0xc0>
      return ERR_RTE;
 8012cb6:	f06f 0303 	mvn.w	r3, #3
 8012cba:	e18e      	b.n	8012fda <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012cbc:	693b      	ldr	r3, [r7, #16]
 8012cbe:	681a      	ldr	r2, [r3, #0]
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	685b      	ldr	r3, [r3, #4]
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f7f9 fcc3 	bl	800c656 <lwip_htonl>
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012cd6:	1ad3      	subs	r3, r2, r3
 8012cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cda:	8912      	ldrh	r2, [r2, #8]
 8012cdc:	4413      	add	r3, r2
 8012cde:	69ba      	ldr	r2, [r7, #24]
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d227      	bcs.n	8012d34 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012cea:	461a      	mov	r2, r3
 8012cec:	69bb      	ldr	r3, [r7, #24]
 8012cee:	4293      	cmp	r3, r2
 8012cf0:	d114      	bne.n	8012d1c <tcp_output+0x120>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d110      	bne.n	8012d1c <tcp_output+0x120>
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d10b      	bne.n	8012d1c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2200      	movs	r2, #0
 8012d08:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2201      	movs	r2, #1
 8012d10:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
      pcb->persist_probe = 0;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2200      	movs	r2, #0
 8012d18:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	8b5b      	ldrh	r3, [r3, #26]
 8012d20:	f003 0302 	and.w	r3, r3, #2
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	f000 814d 	beq.w	8012fc4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f000 fd6c 	bl	8013808 <tcp_send_empty_ack>
 8012d30:	4603      	mov	r3, r0
 8012d32:	e152      	b.n	8012fda <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2200      	movs	r2, #0
 8012d38:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d40:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012d42:	6a3b      	ldr	r3, [r7, #32]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	f000 811c 	beq.w	8012f82 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012d4a:	e002      	b.n	8012d52 <tcp_output+0x156>
 8012d4c:	6a3b      	ldr	r3, [r7, #32]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	623b      	str	r3, [r7, #32]
 8012d52:	6a3b      	ldr	r3, [r7, #32]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d1f8      	bne.n	8012d4c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012d5a:	e112      	b.n	8012f82 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	899b      	ldrh	r3, [r3, #12]
 8012d62:	b29b      	uxth	r3, r3
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7f9 fc61 	bl	800c62c <lwip_htons>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	b2db      	uxtb	r3, r3
 8012d6e:	f003 0304 	and.w	r3, r3, #4
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d006      	beq.n	8012d84 <tcp_output+0x188>
 8012d76:	4b43      	ldr	r3, [pc, #268]	; (8012e84 <tcp_output+0x288>)
 8012d78:	f240 5236 	movw	r2, #1334	; 0x536
 8012d7c:	4946      	ldr	r1, [pc, #280]	; (8012e98 <tcp_output+0x29c>)
 8012d7e:	4843      	ldr	r0, [pc, #268]	; (8012e8c <tcp_output+0x290>)
 8012d80:	f002 fc56 	bl	8015630 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d01f      	beq.n	8012dcc <tcp_output+0x1d0>
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	8b5b      	ldrh	r3, [r3, #26]
 8012d90:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d119      	bne.n	8012dcc <tcp_output+0x1d0>
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d00b      	beq.n	8012db8 <tcp_output+0x1bc>
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d110      	bne.n	8012dcc <tcp_output+0x1d0>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dae:	891a      	ldrh	r2, [r3, #8]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012db4:	429a      	cmp	r2, r3
 8012db6:	d209      	bcs.n	8012dcc <tcp_output+0x1d0>
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d004      	beq.n	8012dcc <tcp_output+0x1d0>
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012dc8:	2b07      	cmp	r3, #7
 8012dca:	d901      	bls.n	8012dd0 <tcp_output+0x1d4>
 8012dcc:	2301      	movs	r3, #1
 8012dce:	e000      	b.n	8012dd2 <tcp_output+0x1d6>
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d106      	bne.n	8012de4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	8b5b      	ldrh	r3, [r3, #26]
 8012dda:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	f000 80e4 	beq.w	8012fac <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	7d1b      	ldrb	r3, [r3, #20]
 8012de8:	2b02      	cmp	r3, #2
 8012dea:	d00d      	beq.n	8012e08 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dee:	68db      	ldr	r3, [r3, #12]
 8012df0:	899b      	ldrh	r3, [r3, #12]
 8012df2:	b29c      	uxth	r4, r3
 8012df4:	2010      	movs	r0, #16
 8012df6:	f7f9 fc19 	bl	800c62c <lwip_htons>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e00:	68db      	ldr	r3, [r3, #12]
 8012e02:	4322      	orrs	r2, r4
 8012e04:	b292      	uxth	r2, r2
 8012e06:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012e08:	697a      	ldr	r2, [r7, #20]
 8012e0a:	6879      	ldr	r1, [r7, #4]
 8012e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e0e:	f000 f909 	bl	8013024 <tcp_output_segment>
 8012e12:	4603      	mov	r3, r0
 8012e14:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d009      	beq.n	8012e32 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	8b5b      	ldrh	r3, [r3, #26]
 8012e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e26:	b29a      	uxth	r2, r3
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	835a      	strh	r2, [r3, #26]
      return err;
 8012e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e30:	e0d3      	b.n	8012fda <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	7d1b      	ldrb	r3, [r3, #20]
 8012e3e:	2b02      	cmp	r3, #2
 8012e40:	d006      	beq.n	8012e50 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	8b5b      	ldrh	r3, [r3, #26]
 8012e46:	f023 0303 	bic.w	r3, r3, #3
 8012e4a:	b29a      	uxth	r2, r3
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e52:	68db      	ldr	r3, [r3, #12]
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7f9 fbfd 	bl	800c656 <lwip_htonl>
 8012e5c:	4604      	mov	r4, r0
 8012e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e60:	891b      	ldrh	r3, [r3, #8]
 8012e62:	461d      	mov	r5, r3
 8012e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e66:	68db      	ldr	r3, [r3, #12]
 8012e68:	899b      	ldrh	r3, [r3, #12]
 8012e6a:	b29b      	uxth	r3, r3
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7f9 fbdd 	bl	800c62c <lwip_htons>
 8012e72:	4603      	mov	r3, r0
 8012e74:	b2db      	uxtb	r3, r3
 8012e76:	f003 0303 	and.w	r3, r3, #3
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d00e      	beq.n	8012e9c <tcp_output+0x2a0>
 8012e7e:	2301      	movs	r3, #1
 8012e80:	e00d      	b.n	8012e9e <tcp_output+0x2a2>
 8012e82:	bf00      	nop
 8012e84:	0801b8d8 	.word	0x0801b8d8
 8012e88:	0801be78 	.word	0x0801be78
 8012e8c:	0801b988 	.word	0x0801b988
 8012e90:	0801be90 	.word	0x0801be90
 8012e94:	2000cfdc 	.word	0x2000cfdc
 8012e98:	0801beb8 	.word	0x0801beb8
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	442b      	add	r3, r5
 8012ea0:	4423      	add	r3, r4
 8012ea2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	1ad3      	subs	r3, r2, r3
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	da02      	bge.n	8012eb6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	68ba      	ldr	r2, [r7, #8]
 8012eb4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb8:	891b      	ldrh	r3, [r3, #8]
 8012eba:	461c      	mov	r4, r3
 8012ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ebe:	68db      	ldr	r3, [r3, #12]
 8012ec0:	899b      	ldrh	r3, [r3, #12]
 8012ec2:	b29b      	uxth	r3, r3
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7f9 fbb1 	bl	800c62c <lwip_htons>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	b2db      	uxtb	r3, r3
 8012ece:	f003 0303 	and.w	r3, r3, #3
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d001      	beq.n	8012eda <tcp_output+0x2de>
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	e000      	b.n	8012edc <tcp_output+0x2e0>
 8012eda:	2300      	movs	r3, #0
 8012edc:	4423      	add	r3, r4
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d049      	beq.n	8012f76 <tcp_output+0x37a>
      seg->next = NULL;
 8012ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d105      	bne.n	8012efc <tcp_output+0x300>
        pcb->unacked = seg;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ef4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef8:	623b      	str	r3, [r7, #32]
 8012efa:	e03f      	b.n	8012f7c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012efe:	68db      	ldr	r3, [r3, #12]
 8012f00:	685b      	ldr	r3, [r3, #4]
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7f9 fba7 	bl	800c656 <lwip_htonl>
 8012f08:	4604      	mov	r4, r0
 8012f0a:	6a3b      	ldr	r3, [r7, #32]
 8012f0c:	68db      	ldr	r3, [r3, #12]
 8012f0e:	685b      	ldr	r3, [r3, #4]
 8012f10:	4618      	mov	r0, r3
 8012f12:	f7f9 fba0 	bl	800c656 <lwip_htonl>
 8012f16:	4603      	mov	r3, r0
 8012f18:	1ae3      	subs	r3, r4, r3
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	da24      	bge.n	8012f68 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	3370      	adds	r3, #112	; 0x70
 8012f22:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012f24:	e002      	b.n	8012f2c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012f26:	69fb      	ldr	r3, [r7, #28]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012f2c:	69fb      	ldr	r3, [r7, #28]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d011      	beq.n	8012f58 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012f34:	69fb      	ldr	r3, [r7, #28]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	68db      	ldr	r3, [r3, #12]
 8012f3a:	685b      	ldr	r3, [r3, #4]
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f7f9 fb8a 	bl	800c656 <lwip_htonl>
 8012f42:	4604      	mov	r4, r0
 8012f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f46:	68db      	ldr	r3, [r3, #12]
 8012f48:	685b      	ldr	r3, [r3, #4]
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7f9 fb83 	bl	800c656 <lwip_htonl>
 8012f50:	4603      	mov	r3, r0
 8012f52:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	dbe6      	blt.n	8012f26 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012f58:	69fb      	ldr	r3, [r7, #28]
 8012f5a:	681a      	ldr	r2, [r3, #0]
 8012f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012f60:	69fb      	ldr	r3, [r7, #28]
 8012f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f64:	601a      	str	r2, [r3, #0]
 8012f66:	e009      	b.n	8012f7c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012f68:	6a3b      	ldr	r3, [r7, #32]
 8012f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f6c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012f6e:	6a3b      	ldr	r3, [r7, #32]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	623b      	str	r3, [r7, #32]
 8012f74:	e002      	b.n	8012f7c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f78:	f7fc fb13 	bl	800f5a2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f80:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d012      	beq.n	8012fae <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f8a:	68db      	ldr	r3, [r3, #12]
 8012f8c:	685b      	ldr	r3, [r3, #4]
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7f9 fb61 	bl	800c656 <lwip_htonl>
 8012f94:	4602      	mov	r2, r0
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f9a:	1ad3      	subs	r3, r2, r3
 8012f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f9e:	8912      	ldrh	r2, [r2, #8]
 8012fa0:	4413      	add	r3, r2
  while (seg != NULL &&
 8012fa2:	69ba      	ldr	r2, [r7, #24]
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	f4bf aed9 	bcs.w	8012d5c <tcp_output+0x160>
 8012faa:	e000      	b.n	8012fae <tcp_output+0x3b2>
      break;
 8012fac:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d108      	bne.n	8012fc8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012fbe:	e004      	b.n	8012fca <tcp_output+0x3ce>
    goto output_done;
 8012fc0:	bf00      	nop
 8012fc2:	e002      	b.n	8012fca <tcp_output+0x3ce>
    goto output_done;
 8012fc4:	bf00      	nop
 8012fc6:	e000      	b.n	8012fca <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012fc8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	8b5b      	ldrh	r3, [r3, #26]
 8012fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012fd2:	b29a      	uxth	r2, r3
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012fd8:	2300      	movs	r3, #0
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3728      	adds	r7, #40	; 0x28
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8012fe2:	bf00      	nop

08012fe4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b082      	sub	sp, #8
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d106      	bne.n	8013000 <tcp_output_segment_busy+0x1c>
 8012ff2:	4b09      	ldr	r3, [pc, #36]	; (8013018 <tcp_output_segment_busy+0x34>)
 8012ff4:	f240 529a 	movw	r2, #1434	; 0x59a
 8012ff8:	4908      	ldr	r1, [pc, #32]	; (801301c <tcp_output_segment_busy+0x38>)
 8012ffa:	4809      	ldr	r0, [pc, #36]	; (8013020 <tcp_output_segment_busy+0x3c>)
 8012ffc:	f002 fb18 	bl	8015630 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	685b      	ldr	r3, [r3, #4]
 8013004:	7b9b      	ldrb	r3, [r3, #14]
 8013006:	2b01      	cmp	r3, #1
 8013008:	d001      	beq.n	801300e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801300a:	2301      	movs	r3, #1
 801300c:	e000      	b.n	8013010 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801300e:	2300      	movs	r3, #0
}
 8013010:	4618      	mov	r0, r3
 8013012:	3708      	adds	r7, #8
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}
 8013018:	0801b8d8 	.word	0x0801b8d8
 801301c:	0801bed0 	.word	0x0801bed0
 8013020:	0801b988 	.word	0x0801b988

08013024 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013024:	b5b0      	push	{r4, r5, r7, lr}
 8013026:	b08c      	sub	sp, #48	; 0x30
 8013028:	af04      	add	r7, sp, #16
 801302a:	60f8      	str	r0, [r7, #12]
 801302c:	60b9      	str	r1, [r7, #8]
 801302e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d106      	bne.n	8013044 <tcp_output_segment+0x20>
 8013036:	4b63      	ldr	r3, [pc, #396]	; (80131c4 <tcp_output_segment+0x1a0>)
 8013038:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801303c:	4962      	ldr	r1, [pc, #392]	; (80131c8 <tcp_output_segment+0x1a4>)
 801303e:	4863      	ldr	r0, [pc, #396]	; (80131cc <tcp_output_segment+0x1a8>)
 8013040:	f002 faf6 	bl	8015630 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013044:	68bb      	ldr	r3, [r7, #8]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d106      	bne.n	8013058 <tcp_output_segment+0x34>
 801304a:	4b5e      	ldr	r3, [pc, #376]	; (80131c4 <tcp_output_segment+0x1a0>)
 801304c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013050:	495f      	ldr	r1, [pc, #380]	; (80131d0 <tcp_output_segment+0x1ac>)
 8013052:	485e      	ldr	r0, [pc, #376]	; (80131cc <tcp_output_segment+0x1a8>)
 8013054:	f002 faec 	bl	8015630 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d106      	bne.n	801306c <tcp_output_segment+0x48>
 801305e:	4b59      	ldr	r3, [pc, #356]	; (80131c4 <tcp_output_segment+0x1a0>)
 8013060:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013064:	495b      	ldr	r1, [pc, #364]	; (80131d4 <tcp_output_segment+0x1b0>)
 8013066:	4859      	ldr	r0, [pc, #356]	; (80131cc <tcp_output_segment+0x1a8>)
 8013068:	f002 fae2 	bl	8015630 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801306c:	68f8      	ldr	r0, [r7, #12]
 801306e:	f7ff ffb9 	bl	8012fe4 <tcp_output_segment_busy>
 8013072:	4603      	mov	r3, r0
 8013074:	2b00      	cmp	r3, #0
 8013076:	d001      	beq.n	801307c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013078:	2300      	movs	r3, #0
 801307a:	e09f      	b.n	80131bc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801307c:	68bb      	ldr	r3, [r7, #8]
 801307e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	68dc      	ldr	r4, [r3, #12]
 8013084:	4610      	mov	r0, r2
 8013086:	f7f9 fae6 	bl	800c656 <lwip_htonl>
 801308a:	4603      	mov	r3, r0
 801308c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	68dc      	ldr	r4, [r3, #12]
 8013096:	4610      	mov	r0, r2
 8013098:	f7f9 fac8 	bl	800c62c <lwip_htons>
 801309c:	4603      	mov	r3, r0
 801309e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130a4:	68ba      	ldr	r2, [r7, #8]
 80130a6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80130a8:	441a      	add	r2, r3
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	68db      	ldr	r3, [r3, #12]
 80130b2:	3314      	adds	r3, #20
 80130b4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	7a9b      	ldrb	r3, [r3, #10]
 80130ba:	f003 0301 	and.w	r3, r3, #1
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d015      	beq.n	80130ee <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80130c2:	68bb      	ldr	r3, [r7, #8]
 80130c4:	3304      	adds	r3, #4
 80130c6:	461a      	mov	r2, r3
 80130c8:	6879      	ldr	r1, [r7, #4]
 80130ca:	f240 50b4 	movw	r0, #1460	; 0x5b4
 80130ce:	f7fc fe03 	bl	800fcd8 <tcp_eff_send_mss_netif>
 80130d2:	4603      	mov	r3, r0
 80130d4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80130d6:	8b7b      	ldrh	r3, [r7, #26]
 80130d8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80130dc:	4618      	mov	r0, r3
 80130de:	f7f9 faba 	bl	800c656 <lwip_htonl>
 80130e2:	4602      	mov	r2, r0
 80130e4:	69fb      	ldr	r3, [r7, #28]
 80130e6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80130e8:	69fb      	ldr	r3, [r7, #28]
 80130ea:	3304      	adds	r3, #4
 80130ec:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	da02      	bge.n	80130fe <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80130f8:	68bb      	ldr	r3, [r7, #8]
 80130fa:	2200      	movs	r2, #0
 80130fc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013102:	2b00      	cmp	r3, #0
 8013104:	d10c      	bne.n	8013120 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013106:	4b34      	ldr	r3, [pc, #208]	; (80131d8 <tcp_output_segment+0x1b4>)
 8013108:	681a      	ldr	r2, [r3, #0]
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	68db      	ldr	r3, [r3, #12]
 8013112:	685b      	ldr	r3, [r3, #4]
 8013114:	4618      	mov	r0, r3
 8013116:	f7f9 fa9e 	bl	800c656 <lwip_htonl>
 801311a:	4602      	mov	r2, r0
 801311c:	68bb      	ldr	r3, [r7, #8]
 801311e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	68da      	ldr	r2, [r3, #12]
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	685b      	ldr	r3, [r3, #4]
 8013128:	685b      	ldr	r3, [r3, #4]
 801312a:	1ad3      	subs	r3, r2, r3
 801312c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	685b      	ldr	r3, [r3, #4]
 8013132:	8959      	ldrh	r1, [r3, #10]
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	685b      	ldr	r3, [r3, #4]
 8013138:	8b3a      	ldrh	r2, [r7, #24]
 801313a:	1a8a      	subs	r2, r1, r2
 801313c:	b292      	uxth	r2, r2
 801313e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	685b      	ldr	r3, [r3, #4]
 8013144:	8919      	ldrh	r1, [r3, #8]
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	685b      	ldr	r3, [r3, #4]
 801314a:	8b3a      	ldrh	r2, [r7, #24]
 801314c:	1a8a      	subs	r2, r1, r2
 801314e:	b292      	uxth	r2, r2
 8013150:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	685b      	ldr	r3, [r3, #4]
 8013156:	68fa      	ldr	r2, [r7, #12]
 8013158:	68d2      	ldr	r2, [r2, #12]
 801315a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	68db      	ldr	r3, [r3, #12]
 8013160:	2200      	movs	r2, #0
 8013162:	741a      	strb	r2, [r3, #16]
 8013164:	2200      	movs	r2, #0
 8013166:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	68db      	ldr	r3, [r3, #12]
 801316c:	f103 0214 	add.w	r2, r3, #20
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	7a9b      	ldrb	r3, [r3, #10]
 8013174:	009b      	lsls	r3, r3, #2
 8013176:	f003 0304 	and.w	r3, r3, #4
 801317a:	4413      	add	r3, r2
 801317c:	69fa      	ldr	r2, [r7, #28]
 801317e:	429a      	cmp	r2, r3
 8013180:	d006      	beq.n	8013190 <tcp_output_segment+0x16c>
 8013182:	4b10      	ldr	r3, [pc, #64]	; (80131c4 <tcp_output_segment+0x1a0>)
 8013184:	f240 621c 	movw	r2, #1564	; 0x61c
 8013188:	4914      	ldr	r1, [pc, #80]	; (80131dc <tcp_output_segment+0x1b8>)
 801318a:	4810      	ldr	r0, [pc, #64]	; (80131cc <tcp_output_segment+0x1a8>)
 801318c:	f002 fa50 	bl	8015630 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	6858      	ldr	r0, [r3, #4]
 8013194:	68b9      	ldr	r1, [r7, #8]
 8013196:	68bb      	ldr	r3, [r7, #8]
 8013198:	1d1c      	adds	r4, r3, #4
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	7add      	ldrb	r5, [r3, #11]
 801319e:	68bb      	ldr	r3, [r7, #8]
 80131a0:	7a9b      	ldrb	r3, [r3, #10]
 80131a2:	687a      	ldr	r2, [r7, #4]
 80131a4:	9202      	str	r2, [sp, #8]
 80131a6:	2206      	movs	r2, #6
 80131a8:	9201      	str	r2, [sp, #4]
 80131aa:	9300      	str	r3, [sp, #0]
 80131ac:	462b      	mov	r3, r5
 80131ae:	4622      	mov	r2, r4
 80131b0:	f7f8 faea 	bl	800b788 <ip4_output_if>
 80131b4:	4603      	mov	r3, r0
 80131b6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80131b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80131bc:	4618      	mov	r0, r3
 80131be:	3720      	adds	r7, #32
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bdb0      	pop	{r4, r5, r7, pc}
 80131c4:	0801b8d8 	.word	0x0801b8d8
 80131c8:	0801bef8 	.word	0x0801bef8
 80131cc:	0801b988 	.word	0x0801b988
 80131d0:	0801bf18 	.word	0x0801bf18
 80131d4:	0801bf38 	.word	0x0801bf38
 80131d8:	2000cfcc 	.word	0x2000cfcc
 80131dc:	0801bf5c 	.word	0x0801bf5c

080131e0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80131e0:	b5b0      	push	{r4, r5, r7, lr}
 80131e2:	b084      	sub	sp, #16
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d106      	bne.n	80131fc <tcp_rexmit_rto_prepare+0x1c>
 80131ee:	4b31      	ldr	r3, [pc, #196]	; (80132b4 <tcp_rexmit_rto_prepare+0xd4>)
 80131f0:	f240 6263 	movw	r2, #1635	; 0x663
 80131f4:	4930      	ldr	r1, [pc, #192]	; (80132b8 <tcp_rexmit_rto_prepare+0xd8>)
 80131f6:	4831      	ldr	r0, [pc, #196]	; (80132bc <tcp_rexmit_rto_prepare+0xdc>)
 80131f8:	f002 fa1a 	bl	8015630 <iprintf>

  if (pcb->unacked == NULL) {
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013200:	2b00      	cmp	r3, #0
 8013202:	d102      	bne.n	801320a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013204:	f06f 0305 	mvn.w	r3, #5
 8013208:	e050      	b.n	80132ac <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801320e:	60fb      	str	r3, [r7, #12]
 8013210:	e00b      	b.n	801322a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013212:	68f8      	ldr	r0, [r7, #12]
 8013214:	f7ff fee6 	bl	8012fe4 <tcp_output_segment_busy>
 8013218:	4603      	mov	r3, r0
 801321a:	2b00      	cmp	r3, #0
 801321c:	d002      	beq.n	8013224 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801321e:	f06f 0305 	mvn.w	r3, #5
 8013222:	e043      	b.n	80132ac <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	60fb      	str	r3, [r7, #12]
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d1ef      	bne.n	8013212 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013232:	68f8      	ldr	r0, [r7, #12]
 8013234:	f7ff fed6 	bl	8012fe4 <tcp_output_segment_busy>
 8013238:	4603      	mov	r3, r0
 801323a:	2b00      	cmp	r3, #0
 801323c:	d002      	beq.n	8013244 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801323e:	f06f 0305 	mvn.w	r3, #5
 8013242:	e033      	b.n	80132ac <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2200      	movs	r2, #0
 8013258:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	8b5b      	ldrh	r3, [r3, #26]
 801325e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013262:	b29a      	uxth	r2, r3
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	68db      	ldr	r3, [r3, #12]
 801326c:	685b      	ldr	r3, [r3, #4]
 801326e:	4618      	mov	r0, r3
 8013270:	f7f9 f9f1 	bl	800c656 <lwip_htonl>
 8013274:	4604      	mov	r4, r0
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	891b      	ldrh	r3, [r3, #8]
 801327a:	461d      	mov	r5, r3
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	68db      	ldr	r3, [r3, #12]
 8013280:	899b      	ldrh	r3, [r3, #12]
 8013282:	b29b      	uxth	r3, r3
 8013284:	4618      	mov	r0, r3
 8013286:	f7f9 f9d1 	bl	800c62c <lwip_htons>
 801328a:	4603      	mov	r3, r0
 801328c:	b2db      	uxtb	r3, r3
 801328e:	f003 0303 	and.w	r3, r3, #3
 8013292:	2b00      	cmp	r3, #0
 8013294:	d001      	beq.n	801329a <tcp_rexmit_rto_prepare+0xba>
 8013296:	2301      	movs	r3, #1
 8013298:	e000      	b.n	801329c <tcp_rexmit_rto_prepare+0xbc>
 801329a:	2300      	movs	r3, #0
 801329c:	442b      	add	r3, r5
 801329e:	18e2      	adds	r2, r4, r3
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2200      	movs	r2, #0
 80132a8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80132aa:	2300      	movs	r3, #0
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3710      	adds	r7, #16
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bdb0      	pop	{r4, r5, r7, pc}
 80132b4:	0801b8d8 	.word	0x0801b8d8
 80132b8:	0801bf70 	.word	0x0801bf70
 80132bc:	0801b988 	.word	0x0801b988

080132c0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d106      	bne.n	80132dc <tcp_rexmit_rto_commit+0x1c>
 80132ce:	4b0d      	ldr	r3, [pc, #52]	; (8013304 <tcp_rexmit_rto_commit+0x44>)
 80132d0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80132d4:	490c      	ldr	r1, [pc, #48]	; (8013308 <tcp_rexmit_rto_commit+0x48>)
 80132d6:	480d      	ldr	r0, [pc, #52]	; (801330c <tcp_rexmit_rto_commit+0x4c>)
 80132d8:	f002 f9aa 	bl	8015630 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80132e2:	2bff      	cmp	r3, #255	; 0xff
 80132e4:	d007      	beq.n	80132f6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80132ec:	3301      	adds	r3, #1
 80132ee:	b2da      	uxtb	r2, r3
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80132f6:	6878      	ldr	r0, [r7, #4]
 80132f8:	f7ff fc80 	bl	8012bfc <tcp_output>
}
 80132fc:	bf00      	nop
 80132fe:	3708      	adds	r7, #8
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}
 8013304:	0801b8d8 	.word	0x0801b8d8
 8013308:	0801bf94 	.word	0x0801bf94
 801330c:	0801b988 	.word	0x0801b988

08013310 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b082      	sub	sp, #8
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d106      	bne.n	801332c <tcp_rexmit_rto+0x1c>
 801331e:	4b0a      	ldr	r3, [pc, #40]	; (8013348 <tcp_rexmit_rto+0x38>)
 8013320:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013324:	4909      	ldr	r1, [pc, #36]	; (801334c <tcp_rexmit_rto+0x3c>)
 8013326:	480a      	ldr	r0, [pc, #40]	; (8013350 <tcp_rexmit_rto+0x40>)
 8013328:	f002 f982 	bl	8015630 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f7ff ff57 	bl	80131e0 <tcp_rexmit_rto_prepare>
 8013332:	4603      	mov	r3, r0
 8013334:	2b00      	cmp	r3, #0
 8013336:	d102      	bne.n	801333e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f7ff ffc1 	bl	80132c0 <tcp_rexmit_rto_commit>
  }
}
 801333e:	bf00      	nop
 8013340:	3708      	adds	r7, #8
 8013342:	46bd      	mov	sp, r7
 8013344:	bd80      	pop	{r7, pc}
 8013346:	bf00      	nop
 8013348:	0801b8d8 	.word	0x0801b8d8
 801334c:	0801bfb8 	.word	0x0801bfb8
 8013350:	0801b988 	.word	0x0801b988

08013354 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013354:	b590      	push	{r4, r7, lr}
 8013356:	b085      	sub	sp, #20
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d106      	bne.n	8013370 <tcp_rexmit+0x1c>
 8013362:	4b2f      	ldr	r3, [pc, #188]	; (8013420 <tcp_rexmit+0xcc>)
 8013364:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013368:	492e      	ldr	r1, [pc, #184]	; (8013424 <tcp_rexmit+0xd0>)
 801336a:	482f      	ldr	r0, [pc, #188]	; (8013428 <tcp_rexmit+0xd4>)
 801336c:	f002 f960 	bl	8015630 <iprintf>

  if (pcb->unacked == NULL) {
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013374:	2b00      	cmp	r3, #0
 8013376:	d102      	bne.n	801337e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013378:	f06f 0305 	mvn.w	r3, #5
 801337c:	e04c      	b.n	8013418 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013382:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013384:	68b8      	ldr	r0, [r7, #8]
 8013386:	f7ff fe2d 	bl	8012fe4 <tcp_output_segment_busy>
 801338a:	4603      	mov	r3, r0
 801338c:	2b00      	cmp	r3, #0
 801338e:	d002      	beq.n	8013396 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013390:	f06f 0305 	mvn.w	r3, #5
 8013394:	e040      	b.n	8013418 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	336c      	adds	r3, #108	; 0x6c
 80133a2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80133a4:	e002      	b.n	80133ac <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d011      	beq.n	80133d8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	68db      	ldr	r3, [r3, #12]
 80133ba:	685b      	ldr	r3, [r3, #4]
 80133bc:	4618      	mov	r0, r3
 80133be:	f7f9 f94a 	bl	800c656 <lwip_htonl>
 80133c2:	4604      	mov	r4, r0
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	68db      	ldr	r3, [r3, #12]
 80133c8:	685b      	ldr	r3, [r3, #4]
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7f9 f943 	bl	800c656 <lwip_htonl>
 80133d0:	4603      	mov	r3, r0
 80133d2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	dbe6      	blt.n	80133a6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	681a      	ldr	r2, [r3, #0]
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	68ba      	ldr	r2, [r7, #8]
 80133e4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d103      	bne.n	80133f6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2200      	movs	r2, #0
 80133f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80133fc:	2bff      	cmp	r3, #255	; 0xff
 80133fe:	d007      	beq.n	8013410 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013406:	3301      	adds	r3, #1
 8013408:	b2da      	uxtb	r2, r3
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	2200      	movs	r2, #0
 8013414:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013416:	2300      	movs	r3, #0
}
 8013418:	4618      	mov	r0, r3
 801341a:	3714      	adds	r7, #20
 801341c:	46bd      	mov	sp, r7
 801341e:	bd90      	pop	{r4, r7, pc}
 8013420:	0801b8d8 	.word	0x0801b8d8
 8013424:	0801bfd4 	.word	0x0801bfd4
 8013428:	0801b988 	.word	0x0801b988

0801342c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b082      	sub	sp, #8
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d106      	bne.n	8013448 <tcp_rexmit_fast+0x1c>
 801343a:	4b2a      	ldr	r3, [pc, #168]	; (80134e4 <tcp_rexmit_fast+0xb8>)
 801343c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013440:	4929      	ldr	r1, [pc, #164]	; (80134e8 <tcp_rexmit_fast+0xbc>)
 8013442:	482a      	ldr	r0, [pc, #168]	; (80134ec <tcp_rexmit_fast+0xc0>)
 8013444:	f002 f8f4 	bl	8015630 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801344c:	2b00      	cmp	r3, #0
 801344e:	d045      	beq.n	80134dc <tcp_rexmit_fast+0xb0>
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	8b5b      	ldrh	r3, [r3, #26]
 8013454:	f003 0304 	and.w	r3, r3, #4
 8013458:	2b00      	cmp	r3, #0
 801345a:	d13f      	bne.n	80134dc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801345c:	6878      	ldr	r0, [r7, #4]
 801345e:	f7ff ff79 	bl	8013354 <tcp_rexmit>
 8013462:	4603      	mov	r3, r0
 8013464:	2b00      	cmp	r3, #0
 8013466:	d139      	bne.n	80134dc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013474:	4293      	cmp	r3, r2
 8013476:	bf28      	it	cs
 8013478:	4613      	movcs	r3, r2
 801347a:	b29b      	uxth	r3, r3
 801347c:	2b00      	cmp	r3, #0
 801347e:	da00      	bge.n	8013482 <tcp_rexmit_fast+0x56>
 8013480:	3301      	adds	r3, #1
 8013482:	105b      	asrs	r3, r3, #1
 8013484:	b29a      	uxth	r2, r3
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013492:	461a      	mov	r2, r3
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013498:	005b      	lsls	r3, r3, #1
 801349a:	429a      	cmp	r2, r3
 801349c:	d206      	bcs.n	80134ac <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134a2:	005b      	lsls	r3, r3, #1
 80134a4:	b29a      	uxth	r2, r3
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134b6:	4619      	mov	r1, r3
 80134b8:	0049      	lsls	r1, r1, #1
 80134ba:	440b      	add	r3, r1
 80134bc:	b29b      	uxth	r3, r3
 80134be:	4413      	add	r3, r2
 80134c0:	b29a      	uxth	r2, r3
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	8b5b      	ldrh	r3, [r3, #26]
 80134cc:	f043 0304 	orr.w	r3, r3, #4
 80134d0:	b29a      	uxth	r2, r3
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	2200      	movs	r2, #0
 80134da:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80134dc:	bf00      	nop
 80134de:	3708      	adds	r7, #8
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd80      	pop	{r7, pc}
 80134e4:	0801b8d8 	.word	0x0801b8d8
 80134e8:	0801bfec 	.word	0x0801bfec
 80134ec:	0801b988 	.word	0x0801b988

080134f0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b086      	sub	sp, #24
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	60f8      	str	r0, [r7, #12]
 80134f8:	607b      	str	r3, [r7, #4]
 80134fa:	460b      	mov	r3, r1
 80134fc:	817b      	strh	r3, [r7, #10]
 80134fe:	4613      	mov	r3, r2
 8013500:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013502:	897a      	ldrh	r2, [r7, #10]
 8013504:	893b      	ldrh	r3, [r7, #8]
 8013506:	4413      	add	r3, r2
 8013508:	b29b      	uxth	r3, r3
 801350a:	3314      	adds	r3, #20
 801350c:	b29b      	uxth	r3, r3
 801350e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013512:	4619      	mov	r1, r3
 8013514:	2022      	movs	r0, #34	; 0x22
 8013516:	f7fa f933 	bl	800d780 <pbuf_alloc>
 801351a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d04d      	beq.n	80135be <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013522:	897b      	ldrh	r3, [r7, #10]
 8013524:	3313      	adds	r3, #19
 8013526:	697a      	ldr	r2, [r7, #20]
 8013528:	8952      	ldrh	r2, [r2, #10]
 801352a:	4293      	cmp	r3, r2
 801352c:	db06      	blt.n	801353c <tcp_output_alloc_header_common+0x4c>
 801352e:	4b26      	ldr	r3, [pc, #152]	; (80135c8 <tcp_output_alloc_header_common+0xd8>)
 8013530:	f240 7223 	movw	r2, #1827	; 0x723
 8013534:	4925      	ldr	r1, [pc, #148]	; (80135cc <tcp_output_alloc_header_common+0xdc>)
 8013536:	4826      	ldr	r0, [pc, #152]	; (80135d0 <tcp_output_alloc_header_common+0xe0>)
 8013538:	f002 f87a 	bl	8015630 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	685b      	ldr	r3, [r3, #4]
 8013540:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013542:	8c3b      	ldrh	r3, [r7, #32]
 8013544:	4618      	mov	r0, r3
 8013546:	f7f9 f871 	bl	800c62c <lwip_htons>
 801354a:	4603      	mov	r3, r0
 801354c:	461a      	mov	r2, r3
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013554:	4618      	mov	r0, r3
 8013556:	f7f9 f869 	bl	800c62c <lwip_htons>
 801355a:	4603      	mov	r3, r0
 801355c:	461a      	mov	r2, r3
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013562:	693b      	ldr	r3, [r7, #16]
 8013564:	687a      	ldr	r2, [r7, #4]
 8013566:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013568:	68f8      	ldr	r0, [r7, #12]
 801356a:	f7f9 f874 	bl	800c656 <lwip_htonl>
 801356e:	4602      	mov	r2, r0
 8013570:	693b      	ldr	r3, [r7, #16]
 8013572:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013574:	897b      	ldrh	r3, [r7, #10]
 8013576:	089b      	lsrs	r3, r3, #2
 8013578:	b29b      	uxth	r3, r3
 801357a:	3305      	adds	r3, #5
 801357c:	b29b      	uxth	r3, r3
 801357e:	031b      	lsls	r3, r3, #12
 8013580:	b29a      	uxth	r2, r3
 8013582:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013586:	b29b      	uxth	r3, r3
 8013588:	4313      	orrs	r3, r2
 801358a:	b29b      	uxth	r3, r3
 801358c:	4618      	mov	r0, r3
 801358e:	f7f9 f84d 	bl	800c62c <lwip_htons>
 8013592:	4603      	mov	r3, r0
 8013594:	461a      	mov	r2, r3
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801359a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801359c:	4618      	mov	r0, r3
 801359e:	f7f9 f845 	bl	800c62c <lwip_htons>
 80135a2:	4603      	mov	r3, r0
 80135a4:	461a      	mov	r2, r3
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	2200      	movs	r2, #0
 80135ae:	741a      	strb	r2, [r3, #16]
 80135b0:	2200      	movs	r2, #0
 80135b2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80135b4:	693b      	ldr	r3, [r7, #16]
 80135b6:	2200      	movs	r2, #0
 80135b8:	749a      	strb	r2, [r3, #18]
 80135ba:	2200      	movs	r2, #0
 80135bc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80135be:	697b      	ldr	r3, [r7, #20]
}
 80135c0:	4618      	mov	r0, r3
 80135c2:	3718      	adds	r7, #24
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}
 80135c8:	0801b8d8 	.word	0x0801b8d8
 80135cc:	0801c00c 	.word	0x0801c00c
 80135d0:	0801b988 	.word	0x0801b988

080135d4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80135d4:	b5b0      	push	{r4, r5, r7, lr}
 80135d6:	b08a      	sub	sp, #40	; 0x28
 80135d8:	af04      	add	r7, sp, #16
 80135da:	60f8      	str	r0, [r7, #12]
 80135dc:	607b      	str	r3, [r7, #4]
 80135de:	460b      	mov	r3, r1
 80135e0:	817b      	strh	r3, [r7, #10]
 80135e2:	4613      	mov	r3, r2
 80135e4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d106      	bne.n	80135fa <tcp_output_alloc_header+0x26>
 80135ec:	4b15      	ldr	r3, [pc, #84]	; (8013644 <tcp_output_alloc_header+0x70>)
 80135ee:	f240 7242 	movw	r2, #1858	; 0x742
 80135f2:	4915      	ldr	r1, [pc, #84]	; (8013648 <tcp_output_alloc_header+0x74>)
 80135f4:	4815      	ldr	r0, [pc, #84]	; (801364c <tcp_output_alloc_header+0x78>)
 80135f6:	f002 f81b 	bl	8015630 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	8adb      	ldrh	r3, [r3, #22]
 8013602:	68fa      	ldr	r2, [r7, #12]
 8013604:	8b12      	ldrh	r2, [r2, #24]
 8013606:	68f9      	ldr	r1, [r7, #12]
 8013608:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801360a:	893d      	ldrh	r5, [r7, #8]
 801360c:	897c      	ldrh	r4, [r7, #10]
 801360e:	9103      	str	r1, [sp, #12]
 8013610:	2110      	movs	r1, #16
 8013612:	9102      	str	r1, [sp, #8]
 8013614:	9201      	str	r2, [sp, #4]
 8013616:	9300      	str	r3, [sp, #0]
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	462a      	mov	r2, r5
 801361c:	4621      	mov	r1, r4
 801361e:	f7ff ff67 	bl	80134f0 <tcp_output_alloc_header_common>
 8013622:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013624:	697b      	ldr	r3, [r7, #20]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d006      	beq.n	8013638 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801362e:	68fa      	ldr	r2, [r7, #12]
 8013630:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013632:	441a      	add	r2, r3
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013638:	697b      	ldr	r3, [r7, #20]
}
 801363a:	4618      	mov	r0, r3
 801363c:	3718      	adds	r7, #24
 801363e:	46bd      	mov	sp, r7
 8013640:	bdb0      	pop	{r4, r5, r7, pc}
 8013642:	bf00      	nop
 8013644:	0801b8d8 	.word	0x0801b8d8
 8013648:	0801c03c 	.word	0x0801c03c
 801364c:	0801b988 	.word	0x0801b988

08013650 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b088      	sub	sp, #32
 8013654:	af00      	add	r7, sp, #0
 8013656:	60f8      	str	r0, [r7, #12]
 8013658:	60b9      	str	r1, [r7, #8]
 801365a:	4611      	mov	r1, r2
 801365c:	461a      	mov	r2, r3
 801365e:	460b      	mov	r3, r1
 8013660:	71fb      	strb	r3, [r7, #7]
 8013662:	4613      	mov	r3, r2
 8013664:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013666:	2300      	movs	r3, #0
 8013668:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d106      	bne.n	801367e <tcp_output_fill_options+0x2e>
 8013670:	4b13      	ldr	r3, [pc, #76]	; (80136c0 <tcp_output_fill_options+0x70>)
 8013672:	f240 7256 	movw	r2, #1878	; 0x756
 8013676:	4913      	ldr	r1, [pc, #76]	; (80136c4 <tcp_output_fill_options+0x74>)
 8013678:	4813      	ldr	r0, [pc, #76]	; (80136c8 <tcp_output_fill_options+0x78>)
 801367a:	f001 ffd9 	bl	8015630 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	685b      	ldr	r3, [r3, #4]
 8013682:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013684:	69bb      	ldr	r3, [r7, #24]
 8013686:	3314      	adds	r3, #20
 8013688:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801368a:	69bb      	ldr	r3, [r7, #24]
 801368c:	f103 0214 	add.w	r2, r3, #20
 8013690:	8bfb      	ldrh	r3, [r7, #30]
 8013692:	009b      	lsls	r3, r3, #2
 8013694:	4619      	mov	r1, r3
 8013696:	79fb      	ldrb	r3, [r7, #7]
 8013698:	009b      	lsls	r3, r3, #2
 801369a:	f003 0304 	and.w	r3, r3, #4
 801369e:	440b      	add	r3, r1
 80136a0:	4413      	add	r3, r2
 80136a2:	697a      	ldr	r2, [r7, #20]
 80136a4:	429a      	cmp	r2, r3
 80136a6:	d006      	beq.n	80136b6 <tcp_output_fill_options+0x66>
 80136a8:	4b05      	ldr	r3, [pc, #20]	; (80136c0 <tcp_output_fill_options+0x70>)
 80136aa:	f240 7275 	movw	r2, #1909	; 0x775
 80136ae:	4907      	ldr	r1, [pc, #28]	; (80136cc <tcp_output_fill_options+0x7c>)
 80136b0:	4805      	ldr	r0, [pc, #20]	; (80136c8 <tcp_output_fill_options+0x78>)
 80136b2:	f001 ffbd 	bl	8015630 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80136b6:	bf00      	nop
 80136b8:	3720      	adds	r7, #32
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd80      	pop	{r7, pc}
 80136be:	bf00      	nop
 80136c0:	0801b8d8 	.word	0x0801b8d8
 80136c4:	0801c064 	.word	0x0801c064
 80136c8:	0801b988 	.word	0x0801b988
 80136cc:	0801bf5c 	.word	0x0801bf5c

080136d0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b08a      	sub	sp, #40	; 0x28
 80136d4:	af04      	add	r7, sp, #16
 80136d6:	60f8      	str	r0, [r7, #12]
 80136d8:	60b9      	str	r1, [r7, #8]
 80136da:	607a      	str	r2, [r7, #4]
 80136dc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80136de:	68bb      	ldr	r3, [r7, #8]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d106      	bne.n	80136f2 <tcp_output_control_segment+0x22>
 80136e4:	4b1c      	ldr	r3, [pc, #112]	; (8013758 <tcp_output_control_segment+0x88>)
 80136e6:	f240 7287 	movw	r2, #1927	; 0x787
 80136ea:	491c      	ldr	r1, [pc, #112]	; (801375c <tcp_output_control_segment+0x8c>)
 80136ec:	481c      	ldr	r0, [pc, #112]	; (8013760 <tcp_output_control_segment+0x90>)
 80136ee:	f001 ff9f 	bl	8015630 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80136f2:	683a      	ldr	r2, [r7, #0]
 80136f4:	6879      	ldr	r1, [r7, #4]
 80136f6:	68f8      	ldr	r0, [r7, #12]
 80136f8:	f7fe fae8 	bl	8011ccc <tcp_route>
 80136fc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d102      	bne.n	801370a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013704:	23fc      	movs	r3, #252	; 0xfc
 8013706:	75fb      	strb	r3, [r7, #23]
 8013708:	e01c      	b.n	8013744 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d006      	beq.n	801371e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	7adb      	ldrb	r3, [r3, #11]
 8013714:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	7a9b      	ldrb	r3, [r3, #10]
 801371a:	757b      	strb	r3, [r7, #21]
 801371c:	e003      	b.n	8013726 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801371e:	23ff      	movs	r3, #255	; 0xff
 8013720:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013722:	2300      	movs	r3, #0
 8013724:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013726:	7dba      	ldrb	r2, [r7, #22]
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	9302      	str	r3, [sp, #8]
 801372c:	2306      	movs	r3, #6
 801372e:	9301      	str	r3, [sp, #4]
 8013730:	7d7b      	ldrb	r3, [r7, #21]
 8013732:	9300      	str	r3, [sp, #0]
 8013734:	4613      	mov	r3, r2
 8013736:	683a      	ldr	r2, [r7, #0]
 8013738:	6879      	ldr	r1, [r7, #4]
 801373a:	68b8      	ldr	r0, [r7, #8]
 801373c:	f7f8 f824 	bl	800b788 <ip4_output_if>
 8013740:	4603      	mov	r3, r0
 8013742:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013744:	68b8      	ldr	r0, [r7, #8]
 8013746:	f7fa faff 	bl	800dd48 <pbuf_free>
  return err;
 801374a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801374e:	4618      	mov	r0, r3
 8013750:	3718      	adds	r7, #24
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}
 8013756:	bf00      	nop
 8013758:	0801b8d8 	.word	0x0801b8d8
 801375c:	0801c08c 	.word	0x0801c08c
 8013760:	0801b988 	.word	0x0801b988

08013764 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013764:	b590      	push	{r4, r7, lr}
 8013766:	b08b      	sub	sp, #44	; 0x2c
 8013768:	af04      	add	r7, sp, #16
 801376a:	60f8      	str	r0, [r7, #12]
 801376c:	60b9      	str	r1, [r7, #8]
 801376e:	607a      	str	r2, [r7, #4]
 8013770:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013772:	683b      	ldr	r3, [r7, #0]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d106      	bne.n	8013786 <tcp_rst+0x22>
 8013778:	4b1f      	ldr	r3, [pc, #124]	; (80137f8 <tcp_rst+0x94>)
 801377a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801377e:	491f      	ldr	r1, [pc, #124]	; (80137fc <tcp_rst+0x98>)
 8013780:	481f      	ldr	r0, [pc, #124]	; (8013800 <tcp_rst+0x9c>)
 8013782:	f001 ff55 	bl	8015630 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013788:	2b00      	cmp	r3, #0
 801378a:	d106      	bne.n	801379a <tcp_rst+0x36>
 801378c:	4b1a      	ldr	r3, [pc, #104]	; (80137f8 <tcp_rst+0x94>)
 801378e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013792:	491c      	ldr	r1, [pc, #112]	; (8013804 <tcp_rst+0xa0>)
 8013794:	481a      	ldr	r0, [pc, #104]	; (8013800 <tcp_rst+0x9c>)
 8013796:	f001 ff4b 	bl	8015630 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801379a:	2300      	movs	r3, #0
 801379c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801379e:	f646 030b 	movw	r3, #26635	; 0x680b
 80137a2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80137a4:	7dfb      	ldrb	r3, [r7, #23]
 80137a6:	b29c      	uxth	r4, r3
 80137a8:	68b8      	ldr	r0, [r7, #8]
 80137aa:	f7f8 ff54 	bl	800c656 <lwip_htonl>
 80137ae:	4602      	mov	r2, r0
 80137b0:	8abb      	ldrh	r3, [r7, #20]
 80137b2:	9303      	str	r3, [sp, #12]
 80137b4:	2314      	movs	r3, #20
 80137b6:	9302      	str	r3, [sp, #8]
 80137b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80137ba:	9301      	str	r3, [sp, #4]
 80137bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80137be:	9300      	str	r3, [sp, #0]
 80137c0:	4613      	mov	r3, r2
 80137c2:	2200      	movs	r2, #0
 80137c4:	4621      	mov	r1, r4
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f7ff fe92 	bl	80134f0 <tcp_output_alloc_header_common>
 80137cc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80137ce:	693b      	ldr	r3, [r7, #16]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d00c      	beq.n	80137ee <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80137d4:	7dfb      	ldrb	r3, [r7, #23]
 80137d6:	2200      	movs	r2, #0
 80137d8:	6939      	ldr	r1, [r7, #16]
 80137da:	68f8      	ldr	r0, [r7, #12]
 80137dc:	f7ff ff38 	bl	8013650 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80137e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e2:	683a      	ldr	r2, [r7, #0]
 80137e4:	6939      	ldr	r1, [r7, #16]
 80137e6:	68f8      	ldr	r0, [r7, #12]
 80137e8:	f7ff ff72 	bl	80136d0 <tcp_output_control_segment>
 80137ec:	e000      	b.n	80137f0 <tcp_rst+0x8c>
    return;
 80137ee:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80137f0:	371c      	adds	r7, #28
 80137f2:	46bd      	mov	sp, r7
 80137f4:	bd90      	pop	{r4, r7, pc}
 80137f6:	bf00      	nop
 80137f8:	0801b8d8 	.word	0x0801b8d8
 80137fc:	0801c0b8 	.word	0x0801c0b8
 8013800:	0801b988 	.word	0x0801b988
 8013804:	0801c0d4 	.word	0x0801c0d4

08013808 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013808:	b590      	push	{r4, r7, lr}
 801380a:	b087      	sub	sp, #28
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013810:	2300      	movs	r3, #0
 8013812:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013814:	2300      	movs	r3, #0
 8013816:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d106      	bne.n	801382c <tcp_send_empty_ack+0x24>
 801381e:	4b28      	ldr	r3, [pc, #160]	; (80138c0 <tcp_send_empty_ack+0xb8>)
 8013820:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013824:	4927      	ldr	r1, [pc, #156]	; (80138c4 <tcp_send_empty_ack+0xbc>)
 8013826:	4828      	ldr	r0, [pc, #160]	; (80138c8 <tcp_send_empty_ack+0xc0>)
 8013828:	f001 ff02 	bl	8015630 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801382c:	7dfb      	ldrb	r3, [r7, #23]
 801382e:	009b      	lsls	r3, r3, #2
 8013830:	b2db      	uxtb	r3, r3
 8013832:	f003 0304 	and.w	r3, r3, #4
 8013836:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013838:	7d7b      	ldrb	r3, [r7, #21]
 801383a:	b29c      	uxth	r4, r3
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013840:	4618      	mov	r0, r3
 8013842:	f7f8 ff08 	bl	800c656 <lwip_htonl>
 8013846:	4603      	mov	r3, r0
 8013848:	2200      	movs	r2, #0
 801384a:	4621      	mov	r1, r4
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f7ff fec1 	bl	80135d4 <tcp_output_alloc_header>
 8013852:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013854:	693b      	ldr	r3, [r7, #16]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d109      	bne.n	801386e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	8b5b      	ldrh	r3, [r3, #26]
 801385e:	f043 0303 	orr.w	r3, r3, #3
 8013862:	b29a      	uxth	r2, r3
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013868:	f06f 0301 	mvn.w	r3, #1
 801386c:	e023      	b.n	80138b6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801386e:	7dbb      	ldrb	r3, [r7, #22]
 8013870:	7dfa      	ldrb	r2, [r7, #23]
 8013872:	6939      	ldr	r1, [r7, #16]
 8013874:	6878      	ldr	r0, [r7, #4]
 8013876:	f7ff feeb 	bl	8013650 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801387a:	687a      	ldr	r2, [r7, #4]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	3304      	adds	r3, #4
 8013880:	6939      	ldr	r1, [r7, #16]
 8013882:	6878      	ldr	r0, [r7, #4]
 8013884:	f7ff ff24 	bl	80136d0 <tcp_output_control_segment>
 8013888:	4603      	mov	r3, r0
 801388a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801388c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d007      	beq.n	80138a4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	8b5b      	ldrh	r3, [r3, #26]
 8013898:	f043 0303 	orr.w	r3, r3, #3
 801389c:	b29a      	uxth	r2, r3
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	835a      	strh	r2, [r3, #26]
 80138a2:	e006      	b.n	80138b2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	8b5b      	ldrh	r3, [r3, #26]
 80138a8:	f023 0303 	bic.w	r3, r3, #3
 80138ac:	b29a      	uxth	r2, r3
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80138b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	371c      	adds	r7, #28
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd90      	pop	{r4, r7, pc}
 80138be:	bf00      	nop
 80138c0:	0801b8d8 	.word	0x0801b8d8
 80138c4:	0801c0f0 	.word	0x0801c0f0
 80138c8:	0801b988 	.word	0x0801b988

080138cc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80138cc:	b590      	push	{r4, r7, lr}
 80138ce:	b087      	sub	sp, #28
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80138d4:	2300      	movs	r3, #0
 80138d6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d106      	bne.n	80138ec <tcp_keepalive+0x20>
 80138de:	4b18      	ldr	r3, [pc, #96]	; (8013940 <tcp_keepalive+0x74>)
 80138e0:	f640 0224 	movw	r2, #2084	; 0x824
 80138e4:	4917      	ldr	r1, [pc, #92]	; (8013944 <tcp_keepalive+0x78>)
 80138e6:	4818      	ldr	r0, [pc, #96]	; (8013948 <tcp_keepalive+0x7c>)
 80138e8:	f001 fea2 	bl	8015630 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80138ec:	7dfb      	ldrb	r3, [r7, #23]
 80138ee:	b29c      	uxth	r4, r3
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80138f4:	3b01      	subs	r3, #1
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7f8 fead 	bl	800c656 <lwip_htonl>
 80138fc:	4603      	mov	r3, r0
 80138fe:	2200      	movs	r2, #0
 8013900:	4621      	mov	r1, r4
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f7ff fe66 	bl	80135d4 <tcp_output_alloc_header>
 8013908:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d102      	bne.n	8013916 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013910:	f04f 33ff 	mov.w	r3, #4294967295
 8013914:	e010      	b.n	8013938 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013916:	7dfb      	ldrb	r3, [r7, #23]
 8013918:	2200      	movs	r2, #0
 801391a:	6939      	ldr	r1, [r7, #16]
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f7ff fe97 	bl	8013650 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013922:	687a      	ldr	r2, [r7, #4]
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	3304      	adds	r3, #4
 8013928:	6939      	ldr	r1, [r7, #16]
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f7ff fed0 	bl	80136d0 <tcp_output_control_segment>
 8013930:	4603      	mov	r3, r0
 8013932:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013934:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013938:	4618      	mov	r0, r3
 801393a:	371c      	adds	r7, #28
 801393c:	46bd      	mov	sp, r7
 801393e:	bd90      	pop	{r4, r7, pc}
 8013940:	0801b8d8 	.word	0x0801b8d8
 8013944:	0801c110 	.word	0x0801c110
 8013948:	0801b988 	.word	0x0801b988

0801394c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801394c:	b590      	push	{r4, r7, lr}
 801394e:	b08b      	sub	sp, #44	; 0x2c
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013954:	2300      	movs	r3, #0
 8013956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d106      	bne.n	801396e <tcp_zero_window_probe+0x22>
 8013960:	4b4c      	ldr	r3, [pc, #304]	; (8013a94 <tcp_zero_window_probe+0x148>)
 8013962:	f640 024f 	movw	r2, #2127	; 0x84f
 8013966:	494c      	ldr	r1, [pc, #304]	; (8013a98 <tcp_zero_window_probe+0x14c>)
 8013968:	484c      	ldr	r0, [pc, #304]	; (8013a9c <tcp_zero_window_probe+0x150>)
 801396a:	f001 fe61 	bl	8015630 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013972:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013974:	6a3b      	ldr	r3, [r7, #32]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d101      	bne.n	801397e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801397a:	2300      	movs	r3, #0
 801397c:	e086      	b.n	8013a8c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8013984:	2bff      	cmp	r3, #255	; 0xff
 8013986:	d007      	beq.n	8013998 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 801398e:	3301      	adds	r3, #1
 8013990:	b2da      	uxtb	r2, r3
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013998:	6a3b      	ldr	r3, [r7, #32]
 801399a:	68db      	ldr	r3, [r3, #12]
 801399c:	899b      	ldrh	r3, [r3, #12]
 801399e:	b29b      	uxth	r3, r3
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7f8 fe43 	bl	800c62c <lwip_htons>
 80139a6:	4603      	mov	r3, r0
 80139a8:	b2db      	uxtb	r3, r3
 80139aa:	f003 0301 	and.w	r3, r3, #1
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d005      	beq.n	80139be <tcp_zero_window_probe+0x72>
 80139b2:	6a3b      	ldr	r3, [r7, #32]
 80139b4:	891b      	ldrh	r3, [r3, #8]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d101      	bne.n	80139be <tcp_zero_window_probe+0x72>
 80139ba:	2301      	movs	r3, #1
 80139bc:	e000      	b.n	80139c0 <tcp_zero_window_probe+0x74>
 80139be:	2300      	movs	r3, #0
 80139c0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80139c2:	7ffb      	ldrb	r3, [r7, #31]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	bf0c      	ite	eq
 80139c8:	2301      	moveq	r3, #1
 80139ca:	2300      	movne	r3, #0
 80139cc:	b2db      	uxtb	r3, r3
 80139ce:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80139d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139d4:	b299      	uxth	r1, r3
 80139d6:	6a3b      	ldr	r3, [r7, #32]
 80139d8:	68db      	ldr	r3, [r3, #12]
 80139da:	685b      	ldr	r3, [r3, #4]
 80139dc:	8bba      	ldrh	r2, [r7, #28]
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	f7ff fdf8 	bl	80135d4 <tcp_output_alloc_header>
 80139e4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80139e6:	69bb      	ldr	r3, [r7, #24]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d102      	bne.n	80139f2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80139ec:	f04f 33ff 	mov.w	r3, #4294967295
 80139f0:	e04c      	b.n	8013a8c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80139f2:	69bb      	ldr	r3, [r7, #24]
 80139f4:	685b      	ldr	r3, [r3, #4]
 80139f6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80139f8:	7ffb      	ldrb	r3, [r7, #31]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d011      	beq.n	8013a22 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	899b      	ldrh	r3, [r3, #12]
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	b21b      	sxth	r3, r3
 8013a06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013a0a:	b21c      	sxth	r4, r3
 8013a0c:	2011      	movs	r0, #17
 8013a0e:	f7f8 fe0d 	bl	800c62c <lwip_htons>
 8013a12:	4603      	mov	r3, r0
 8013a14:	b21b      	sxth	r3, r3
 8013a16:	4323      	orrs	r3, r4
 8013a18:	b21b      	sxth	r3, r3
 8013a1a:	b29a      	uxth	r2, r3
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	819a      	strh	r2, [r3, #12]
 8013a20:	e010      	b.n	8013a44 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013a22:	69bb      	ldr	r3, [r7, #24]
 8013a24:	685b      	ldr	r3, [r3, #4]
 8013a26:	3314      	adds	r3, #20
 8013a28:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013a2a:	6a3b      	ldr	r3, [r7, #32]
 8013a2c:	6858      	ldr	r0, [r3, #4]
 8013a2e:	6a3b      	ldr	r3, [r7, #32]
 8013a30:	685b      	ldr	r3, [r3, #4]
 8013a32:	891a      	ldrh	r2, [r3, #8]
 8013a34:	6a3b      	ldr	r3, [r7, #32]
 8013a36:	891b      	ldrh	r3, [r3, #8]
 8013a38:	1ad3      	subs	r3, r2, r3
 8013a3a:	b29b      	uxth	r3, r3
 8013a3c:	2201      	movs	r2, #1
 8013a3e:	6939      	ldr	r1, [r7, #16]
 8013a40:	f7fa fb88 	bl	800e154 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013a44:	6a3b      	ldr	r3, [r7, #32]
 8013a46:	68db      	ldr	r3, [r3, #12]
 8013a48:	685b      	ldr	r3, [r3, #4]
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f7f8 fe03 	bl	800c656 <lwip_htonl>
 8013a50:	4603      	mov	r3, r0
 8013a52:	3301      	adds	r3, #1
 8013a54:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	1ad3      	subs	r3, r2, r3
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	da02      	bge.n	8013a68 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	68fa      	ldr	r2, [r7, #12]
 8013a66:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	69b9      	ldr	r1, [r7, #24]
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f7ff fded 	bl	8013650 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013a76:	687a      	ldr	r2, [r7, #4]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	3304      	adds	r3, #4
 8013a7c:	69b9      	ldr	r1, [r7, #24]
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f7ff fe26 	bl	80136d0 <tcp_output_control_segment>
 8013a84:	4603      	mov	r3, r0
 8013a86:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013a88:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	372c      	adds	r7, #44	; 0x2c
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd90      	pop	{r4, r7, pc}
 8013a94:	0801b8d8 	.word	0x0801b8d8
 8013a98:	0801c12c 	.word	0x0801c12c
 8013a9c:	0801b988 	.word	0x0801b988

08013aa0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b082      	sub	sp, #8
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013aa8:	f7fa fc42 	bl	800e330 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013aac:	4b0a      	ldr	r3, [pc, #40]	; (8013ad8 <tcpip_tcp_timer+0x38>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d103      	bne.n	8013abc <tcpip_tcp_timer+0x1c>
 8013ab4:	4b09      	ldr	r3, [pc, #36]	; (8013adc <tcpip_tcp_timer+0x3c>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d005      	beq.n	8013ac8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013abc:	2200      	movs	r2, #0
 8013abe:	4908      	ldr	r1, [pc, #32]	; (8013ae0 <tcpip_tcp_timer+0x40>)
 8013ac0:	20fa      	movs	r0, #250	; 0xfa
 8013ac2:	f000 f8f3 	bl	8013cac <sys_timeout>
 8013ac6:	e003      	b.n	8013ad0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013ac8:	4b06      	ldr	r3, [pc, #24]	; (8013ae4 <tcpip_tcp_timer+0x44>)
 8013aca:	2200      	movs	r2, #0
 8013acc:	601a      	str	r2, [r3, #0]
  }
}
 8013ace:	bf00      	nop
 8013ad0:	bf00      	nop
 8013ad2:	3708      	adds	r7, #8
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}
 8013ad8:	2000cfc8 	.word	0x2000cfc8
 8013adc:	2000cfd8 	.word	0x2000cfd8
 8013ae0:	08013aa1 	.word	0x08013aa1
 8013ae4:	2000690c 	.word	0x2000690c

08013ae8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013aec:	4b0a      	ldr	r3, [pc, #40]	; (8013b18 <tcp_timer_needed+0x30>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d10f      	bne.n	8013b14 <tcp_timer_needed+0x2c>
 8013af4:	4b09      	ldr	r3, [pc, #36]	; (8013b1c <tcp_timer_needed+0x34>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d103      	bne.n	8013b04 <tcp_timer_needed+0x1c>
 8013afc:	4b08      	ldr	r3, [pc, #32]	; (8013b20 <tcp_timer_needed+0x38>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d007      	beq.n	8013b14 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013b04:	4b04      	ldr	r3, [pc, #16]	; (8013b18 <tcp_timer_needed+0x30>)
 8013b06:	2201      	movs	r2, #1
 8013b08:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	4905      	ldr	r1, [pc, #20]	; (8013b24 <tcp_timer_needed+0x3c>)
 8013b0e:	20fa      	movs	r0, #250	; 0xfa
 8013b10:	f000 f8cc 	bl	8013cac <sys_timeout>
  }
}
 8013b14:	bf00      	nop
 8013b16:	bd80      	pop	{r7, pc}
 8013b18:	2000690c 	.word	0x2000690c
 8013b1c:	2000cfc8 	.word	0x2000cfc8
 8013b20:	2000cfd8 	.word	0x2000cfd8
 8013b24:	08013aa1 	.word	0x08013aa1

08013b28 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b086      	sub	sp, #24
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	60f8      	str	r0, [r7, #12]
 8013b30:	60b9      	str	r1, [r7, #8]
 8013b32:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013b34:	200a      	movs	r0, #10
 8013b36:	f7f9 fad9 	bl	800d0ec <memp_malloc>
 8013b3a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013b3c:	693b      	ldr	r3, [r7, #16]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d109      	bne.n	8013b56 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013b42:	693b      	ldr	r3, [r7, #16]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d151      	bne.n	8013bec <sys_timeout_abs+0xc4>
 8013b48:	4b2a      	ldr	r3, [pc, #168]	; (8013bf4 <sys_timeout_abs+0xcc>)
 8013b4a:	22be      	movs	r2, #190	; 0xbe
 8013b4c:	492a      	ldr	r1, [pc, #168]	; (8013bf8 <sys_timeout_abs+0xd0>)
 8013b4e:	482b      	ldr	r0, [pc, #172]	; (8013bfc <sys_timeout_abs+0xd4>)
 8013b50:	f001 fd6e 	bl	8015630 <iprintf>
    return;
 8013b54:	e04a      	b.n	8013bec <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013b5c:	693b      	ldr	r3, [r7, #16]
 8013b5e:	68ba      	ldr	r2, [r7, #8]
 8013b60:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013b62:	693b      	ldr	r3, [r7, #16]
 8013b64:	687a      	ldr	r2, [r7, #4]
 8013b66:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013b68:	693b      	ldr	r3, [r7, #16]
 8013b6a:	68fa      	ldr	r2, [r7, #12]
 8013b6c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013b6e:	4b24      	ldr	r3, [pc, #144]	; (8013c00 <sys_timeout_abs+0xd8>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d103      	bne.n	8013b7e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013b76:	4a22      	ldr	r2, [pc, #136]	; (8013c00 <sys_timeout_abs+0xd8>)
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	6013      	str	r3, [r2, #0]
    return;
 8013b7c:	e037      	b.n	8013bee <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013b7e:	693b      	ldr	r3, [r7, #16]
 8013b80:	685a      	ldr	r2, [r3, #4]
 8013b82:	4b1f      	ldr	r3, [pc, #124]	; (8013c00 <sys_timeout_abs+0xd8>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	685b      	ldr	r3, [r3, #4]
 8013b88:	1ad3      	subs	r3, r2, r3
 8013b8a:	0fdb      	lsrs	r3, r3, #31
 8013b8c:	f003 0301 	and.w	r3, r3, #1
 8013b90:	b2db      	uxtb	r3, r3
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d007      	beq.n	8013ba6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013b96:	4b1a      	ldr	r3, [pc, #104]	; (8013c00 <sys_timeout_abs+0xd8>)
 8013b98:	681a      	ldr	r2, [r3, #0]
 8013b9a:	693b      	ldr	r3, [r7, #16]
 8013b9c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013b9e:	4a18      	ldr	r2, [pc, #96]	; (8013c00 <sys_timeout_abs+0xd8>)
 8013ba0:	693b      	ldr	r3, [r7, #16]
 8013ba2:	6013      	str	r3, [r2, #0]
 8013ba4:	e023      	b.n	8013bee <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013ba6:	4b16      	ldr	r3, [pc, #88]	; (8013c00 <sys_timeout_abs+0xd8>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	617b      	str	r3, [r7, #20]
 8013bac:	e01a      	b.n	8013be4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013bae:	697b      	ldr	r3, [r7, #20]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d00b      	beq.n	8013bce <sys_timeout_abs+0xa6>
 8013bb6:	693b      	ldr	r3, [r7, #16]
 8013bb8:	685a      	ldr	r2, [r3, #4]
 8013bba:	697b      	ldr	r3, [r7, #20]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	685b      	ldr	r3, [r3, #4]
 8013bc0:	1ad3      	subs	r3, r2, r3
 8013bc2:	0fdb      	lsrs	r3, r3, #31
 8013bc4:	f003 0301 	and.w	r3, r3, #1
 8013bc8:	b2db      	uxtb	r3, r3
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d007      	beq.n	8013bde <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013bce:	697b      	ldr	r3, [r7, #20]
 8013bd0:	681a      	ldr	r2, [r3, #0]
 8013bd2:	693b      	ldr	r3, [r7, #16]
 8013bd4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013bd6:	697b      	ldr	r3, [r7, #20]
 8013bd8:	693a      	ldr	r2, [r7, #16]
 8013bda:	601a      	str	r2, [r3, #0]
        break;
 8013bdc:	e007      	b.n	8013bee <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013bde:	697b      	ldr	r3, [r7, #20]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	617b      	str	r3, [r7, #20]
 8013be4:	697b      	ldr	r3, [r7, #20]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d1e1      	bne.n	8013bae <sys_timeout_abs+0x86>
 8013bea:	e000      	b.n	8013bee <sys_timeout_abs+0xc6>
    return;
 8013bec:	bf00      	nop
      }
    }
  }
}
 8013bee:	3718      	adds	r7, #24
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}
 8013bf4:	0801c17c 	.word	0x0801c17c
 8013bf8:	0801c210 	.word	0x0801c210
 8013bfc:	0801c250 	.word	0x0801c250
 8013c00:	20006904 	.word	0x20006904

08013c04 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b086      	sub	sp, #24
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	685b      	ldr	r3, [r3, #4]
 8013c14:	4798      	blx	r3

  now = sys_now();
 8013c16:	f7ed fe7b 	bl	8001910 <sys_now>
 8013c1a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013c1c:	697b      	ldr	r3, [r7, #20]
 8013c1e:	681a      	ldr	r2, [r3, #0]
 8013c20:	4b0f      	ldr	r3, [pc, #60]	; (8013c60 <lwip_cyclic_timer+0x5c>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	4413      	add	r3, r2
 8013c26:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013c28:	68fa      	ldr	r2, [r7, #12]
 8013c2a:	693b      	ldr	r3, [r7, #16]
 8013c2c:	1ad3      	subs	r3, r2, r3
 8013c2e:	0fdb      	lsrs	r3, r3, #31
 8013c30:	f003 0301 	and.w	r3, r3, #1
 8013c34:	b2db      	uxtb	r3, r3
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d009      	beq.n	8013c4e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013c3a:	697b      	ldr	r3, [r7, #20]
 8013c3c:	681a      	ldr	r2, [r3, #0]
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	4413      	add	r3, r2
 8013c42:	687a      	ldr	r2, [r7, #4]
 8013c44:	4907      	ldr	r1, [pc, #28]	; (8013c64 <lwip_cyclic_timer+0x60>)
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7ff ff6e 	bl	8013b28 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013c4c:	e004      	b.n	8013c58 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013c4e:	687a      	ldr	r2, [r7, #4]
 8013c50:	4904      	ldr	r1, [pc, #16]	; (8013c64 <lwip_cyclic_timer+0x60>)
 8013c52:	68f8      	ldr	r0, [r7, #12]
 8013c54:	f7ff ff68 	bl	8013b28 <sys_timeout_abs>
}
 8013c58:	bf00      	nop
 8013c5a:	3718      	adds	r7, #24
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	20006908 	.word	0x20006908
 8013c64:	08013c05 	.word	0x08013c05

08013c68 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013c6e:	2301      	movs	r3, #1
 8013c70:	607b      	str	r3, [r7, #4]
 8013c72:	e00e      	b.n	8013c92 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013c74:	4a0b      	ldr	r2, [pc, #44]	; (8013ca4 <sys_timeouts_init+0x3c>)
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	00db      	lsls	r3, r3, #3
 8013c80:	4a08      	ldr	r2, [pc, #32]	; (8013ca4 <sys_timeouts_init+0x3c>)
 8013c82:	4413      	add	r3, r2
 8013c84:	461a      	mov	r2, r3
 8013c86:	4908      	ldr	r1, [pc, #32]	; (8013ca8 <sys_timeouts_init+0x40>)
 8013c88:	f000 f810 	bl	8013cac <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	3301      	adds	r3, #1
 8013c90:	607b      	str	r3, [r7, #4]
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	2b04      	cmp	r3, #4
 8013c96:	d9ed      	bls.n	8013c74 <sys_timeouts_init+0xc>
  }
}
 8013c98:	bf00      	nop
 8013c9a:	bf00      	nop
 8013c9c:	3708      	adds	r7, #8
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}
 8013ca2:	bf00      	nop
 8013ca4:	0801c150 	.word	0x0801c150
 8013ca8:	08013c05 	.word	0x08013c05

08013cac <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b086      	sub	sp, #24
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	60f8      	str	r0, [r7, #12]
 8013cb4:	60b9      	str	r1, [r7, #8]
 8013cb6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013cbe:	d306      	bcc.n	8013cce <sys_timeout+0x22>
 8013cc0:	4b0a      	ldr	r3, [pc, #40]	; (8013cec <sys_timeout+0x40>)
 8013cc2:	f240 1229 	movw	r2, #297	; 0x129
 8013cc6:	490a      	ldr	r1, [pc, #40]	; (8013cf0 <sys_timeout+0x44>)
 8013cc8:	480a      	ldr	r0, [pc, #40]	; (8013cf4 <sys_timeout+0x48>)
 8013cca:	f001 fcb1 	bl	8015630 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013cce:	f7ed fe1f 	bl	8001910 <sys_now>
 8013cd2:	4602      	mov	r2, r0
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	4413      	add	r3, r2
 8013cd8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013cda:	687a      	ldr	r2, [r7, #4]
 8013cdc:	68b9      	ldr	r1, [r7, #8]
 8013cde:	6978      	ldr	r0, [r7, #20]
 8013ce0:	f7ff ff22 	bl	8013b28 <sys_timeout_abs>
#endif
}
 8013ce4:	bf00      	nop
 8013ce6:	3718      	adds	r7, #24
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd80      	pop	{r7, pc}
 8013cec:	0801c17c 	.word	0x0801c17c
 8013cf0:	0801c278 	.word	0x0801c278
 8013cf4:	0801c250 	.word	0x0801c250

08013cf8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b084      	sub	sp, #16
 8013cfc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013cfe:	f7ed fe07 	bl	8001910 <sys_now>
 8013d02:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013d04:	4b17      	ldr	r3, [pc, #92]	; (8013d64 <sys_check_timeouts+0x6c>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d022      	beq.n	8013d56 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	685b      	ldr	r3, [r3, #4]
 8013d14:	68fa      	ldr	r2, [r7, #12]
 8013d16:	1ad3      	subs	r3, r2, r3
 8013d18:	0fdb      	lsrs	r3, r3, #31
 8013d1a:	f003 0301 	and.w	r3, r3, #1
 8013d1e:	b2db      	uxtb	r3, r3
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d11a      	bne.n	8013d5a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	4a0e      	ldr	r2, [pc, #56]	; (8013d64 <sys_check_timeouts+0x6c>)
 8013d2a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013d2c:	68bb      	ldr	r3, [r7, #8]
 8013d2e:	689b      	ldr	r3, [r3, #8]
 8013d30:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	68db      	ldr	r3, [r3, #12]
 8013d36:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	685b      	ldr	r3, [r3, #4]
 8013d3c:	4a0a      	ldr	r2, [pc, #40]	; (8013d68 <sys_check_timeouts+0x70>)
 8013d3e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013d40:	68b9      	ldr	r1, [r7, #8]
 8013d42:	200a      	movs	r0, #10
 8013d44:	f7f9 fa24 	bl	800d190 <memp_free>
    if (handler != NULL) {
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d0da      	beq.n	8013d04 <sys_check_timeouts+0xc>
      handler(arg);
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	6838      	ldr	r0, [r7, #0]
 8013d52:	4798      	blx	r3
  do {
 8013d54:	e7d6      	b.n	8013d04 <sys_check_timeouts+0xc>
      return;
 8013d56:	bf00      	nop
 8013d58:	e000      	b.n	8013d5c <sys_check_timeouts+0x64>
      return;
 8013d5a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013d5c:	3710      	adds	r7, #16
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd80      	pop	{r7, pc}
 8013d62:	bf00      	nop
 8013d64:	20006904 	.word	0x20006904
 8013d68:	20006908 	.word	0x20006908

08013d6c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b082      	sub	sp, #8
 8013d70:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013d72:	4b16      	ldr	r3, [pc, #88]	; (8013dcc <sys_timeouts_sleeptime+0x60>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d102      	bne.n	8013d80 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8013d7e:	e020      	b.n	8013dc2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013d80:	f7ed fdc6 	bl	8001910 <sys_now>
 8013d84:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013d86:	4b11      	ldr	r3, [pc, #68]	; (8013dcc <sys_timeouts_sleeptime+0x60>)
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	685a      	ldr	r2, [r3, #4]
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	1ad3      	subs	r3, r2, r3
 8013d90:	0fdb      	lsrs	r3, r3, #31
 8013d92:	f003 0301 	and.w	r3, r3, #1
 8013d96:	b2db      	uxtb	r3, r3
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d001      	beq.n	8013da0 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	e010      	b.n	8013dc2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013da0:	4b0a      	ldr	r3, [pc, #40]	; (8013dcc <sys_timeouts_sleeptime+0x60>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	685a      	ldr	r2, [r3, #4]
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	1ad3      	subs	r3, r2, r3
 8013daa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	da06      	bge.n	8013dc0 <sys_timeouts_sleeptime+0x54>
 8013db2:	4b07      	ldr	r3, [pc, #28]	; (8013dd0 <sys_timeouts_sleeptime+0x64>)
 8013db4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013db8:	4906      	ldr	r1, [pc, #24]	; (8013dd4 <sys_timeouts_sleeptime+0x68>)
 8013dba:	4807      	ldr	r0, [pc, #28]	; (8013dd8 <sys_timeouts_sleeptime+0x6c>)
 8013dbc:	f001 fc38 	bl	8015630 <iprintf>
    return ret;
 8013dc0:	683b      	ldr	r3, [r7, #0]
  }
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3708      	adds	r7, #8
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}
 8013dca:	bf00      	nop
 8013dcc:	20006904 	.word	0x20006904
 8013dd0:	0801c17c 	.word	0x0801c17c
 8013dd4:	0801c2b0 	.word	0x0801c2b0
 8013dd8:	0801c250 	.word	0x0801c250

08013ddc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013de0:	f001 fc3e 	bl	8015660 <rand>
 8013de4:	4603      	mov	r3, r0
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013dec:	b29b      	uxth	r3, r3
 8013dee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013df2:	b29a      	uxth	r2, r3
 8013df4:	4b01      	ldr	r3, [pc, #4]	; (8013dfc <udp_init+0x20>)
 8013df6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013df8:	bf00      	nop
 8013dfa:	bd80      	pop	{r7, pc}
 8013dfc:	20000038 	.word	0x20000038

08013e00 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013e00:	b480      	push	{r7}
 8013e02:	b083      	sub	sp, #12
 8013e04:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013e06:	2300      	movs	r3, #0
 8013e08:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013e0a:	4b17      	ldr	r3, [pc, #92]	; (8013e68 <udp_new_port+0x68>)
 8013e0c:	881b      	ldrh	r3, [r3, #0]
 8013e0e:	1c5a      	adds	r2, r3, #1
 8013e10:	b291      	uxth	r1, r2
 8013e12:	4a15      	ldr	r2, [pc, #84]	; (8013e68 <udp_new_port+0x68>)
 8013e14:	8011      	strh	r1, [r2, #0]
 8013e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e1a:	4293      	cmp	r3, r2
 8013e1c:	d103      	bne.n	8013e26 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013e1e:	4b12      	ldr	r3, [pc, #72]	; (8013e68 <udp_new_port+0x68>)
 8013e20:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013e24:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e26:	4b11      	ldr	r3, [pc, #68]	; (8013e6c <udp_new_port+0x6c>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	603b      	str	r3, [r7, #0]
 8013e2c:	e011      	b.n	8013e52 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013e2e:	683b      	ldr	r3, [r7, #0]
 8013e30:	8a5a      	ldrh	r2, [r3, #18]
 8013e32:	4b0d      	ldr	r3, [pc, #52]	; (8013e68 <udp_new_port+0x68>)
 8013e34:	881b      	ldrh	r3, [r3, #0]
 8013e36:	429a      	cmp	r2, r3
 8013e38:	d108      	bne.n	8013e4c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013e3a:	88fb      	ldrh	r3, [r7, #6]
 8013e3c:	3301      	adds	r3, #1
 8013e3e:	80fb      	strh	r3, [r7, #6]
 8013e40:	88fb      	ldrh	r3, [r7, #6]
 8013e42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013e46:	d3e0      	bcc.n	8013e0a <udp_new_port+0xa>
        return 0;
 8013e48:	2300      	movs	r3, #0
 8013e4a:	e007      	b.n	8013e5c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	68db      	ldr	r3, [r3, #12]
 8013e50:	603b      	str	r3, [r7, #0]
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d1ea      	bne.n	8013e2e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013e58:	4b03      	ldr	r3, [pc, #12]	; (8013e68 <udp_new_port+0x68>)
 8013e5a:	881b      	ldrh	r3, [r3, #0]
}
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	370c      	adds	r7, #12
 8013e60:	46bd      	mov	sp, r7
 8013e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e66:	4770      	bx	lr
 8013e68:	20000038 	.word	0x20000038
 8013e6c:	2000cfe0 	.word	0x2000cfe0

08013e70 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b084      	sub	sp, #16
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	60f8      	str	r0, [r7, #12]
 8013e78:	60b9      	str	r1, [r7, #8]
 8013e7a:	4613      	mov	r3, r2
 8013e7c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d105      	bne.n	8013e90 <udp_input_local_match+0x20>
 8013e84:	4b27      	ldr	r3, [pc, #156]	; (8013f24 <udp_input_local_match+0xb4>)
 8013e86:	2287      	movs	r2, #135	; 0x87
 8013e88:	4927      	ldr	r1, [pc, #156]	; (8013f28 <udp_input_local_match+0xb8>)
 8013e8a:	4828      	ldr	r0, [pc, #160]	; (8013f2c <udp_input_local_match+0xbc>)
 8013e8c:	f001 fbd0 	bl	8015630 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d105      	bne.n	8013ea2 <udp_input_local_match+0x32>
 8013e96:	4b23      	ldr	r3, [pc, #140]	; (8013f24 <udp_input_local_match+0xb4>)
 8013e98:	2288      	movs	r2, #136	; 0x88
 8013e9a:	4925      	ldr	r1, [pc, #148]	; (8013f30 <udp_input_local_match+0xc0>)
 8013e9c:	4823      	ldr	r0, [pc, #140]	; (8013f2c <udp_input_local_match+0xbc>)
 8013e9e:	f001 fbc7 	bl	8015630 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	7a1b      	ldrb	r3, [r3, #8]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d00b      	beq.n	8013ec2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	7a1a      	ldrb	r2, [r3, #8]
 8013eae:	4b21      	ldr	r3, [pc, #132]	; (8013f34 <udp_input_local_match+0xc4>)
 8013eb0:	685b      	ldr	r3, [r3, #4]
 8013eb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d001      	beq.n	8013ec2 <udp_input_local_match+0x52>
    return 0;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	e02b      	b.n	8013f1a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013ec2:	79fb      	ldrb	r3, [r7, #7]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d018      	beq.n	8013efa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d013      	beq.n	8013ef6 <udp_input_local_match+0x86>
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d00f      	beq.n	8013ef6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013ed6:	4b17      	ldr	r3, [pc, #92]	; (8013f34 <udp_input_local_match+0xc4>)
 8013ed8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ede:	d00a      	beq.n	8013ef6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	681a      	ldr	r2, [r3, #0]
 8013ee4:	4b13      	ldr	r3, [pc, #76]	; (8013f34 <udp_input_local_match+0xc4>)
 8013ee6:	695b      	ldr	r3, [r3, #20]
 8013ee8:	405a      	eors	r2, r3
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	3308      	adds	r3, #8
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d110      	bne.n	8013f18 <udp_input_local_match+0xa8>
          return 1;
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	e00f      	b.n	8013f1a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d009      	beq.n	8013f14 <udp_input_local_match+0xa4>
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d005      	beq.n	8013f14 <udp_input_local_match+0xa4>
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	681a      	ldr	r2, [r3, #0]
 8013f0c:	4b09      	ldr	r3, [pc, #36]	; (8013f34 <udp_input_local_match+0xc4>)
 8013f0e:	695b      	ldr	r3, [r3, #20]
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d101      	bne.n	8013f18 <udp_input_local_match+0xa8>
        return 1;
 8013f14:	2301      	movs	r3, #1
 8013f16:	e000      	b.n	8013f1a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013f18:	2300      	movs	r3, #0
}
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	3710      	adds	r7, #16
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}
 8013f22:	bf00      	nop
 8013f24:	0801c2c4 	.word	0x0801c2c4
 8013f28:	0801c350 	.word	0x0801c350
 8013f2c:	0801c374 	.word	0x0801c374
 8013f30:	0801c39c 	.word	0x0801c39c
 8013f34:	20006a88 	.word	0x20006a88

08013f38 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013f38:	b590      	push	{r4, r7, lr}
 8013f3a:	b08d      	sub	sp, #52	; 0x34
 8013f3c:	af02      	add	r7, sp, #8
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013f42:	2300      	movs	r3, #0
 8013f44:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d105      	bne.n	8013f58 <udp_input+0x20>
 8013f4c:	4b7c      	ldr	r3, [pc, #496]	; (8014140 <udp_input+0x208>)
 8013f4e:	22cf      	movs	r2, #207	; 0xcf
 8013f50:	497c      	ldr	r1, [pc, #496]	; (8014144 <udp_input+0x20c>)
 8013f52:	487d      	ldr	r0, [pc, #500]	; (8014148 <udp_input+0x210>)
 8013f54:	f001 fb6c 	bl	8015630 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d105      	bne.n	8013f6a <udp_input+0x32>
 8013f5e:	4b78      	ldr	r3, [pc, #480]	; (8014140 <udp_input+0x208>)
 8013f60:	22d0      	movs	r2, #208	; 0xd0
 8013f62:	497a      	ldr	r1, [pc, #488]	; (801414c <udp_input+0x214>)
 8013f64:	4878      	ldr	r0, [pc, #480]	; (8014148 <udp_input+0x210>)
 8013f66:	f001 fb63 	bl	8015630 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	895b      	ldrh	r3, [r3, #10]
 8013f6e:	2b07      	cmp	r3, #7
 8013f70:	d803      	bhi.n	8013f7a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f7f9 fee8 	bl	800dd48 <pbuf_free>
    goto end;
 8013f78:	e0de      	b.n	8014138 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013f80:	4b73      	ldr	r3, [pc, #460]	; (8014150 <udp_input+0x218>)
 8013f82:	695b      	ldr	r3, [r3, #20]
 8013f84:	4a72      	ldr	r2, [pc, #456]	; (8014150 <udp_input+0x218>)
 8013f86:	6812      	ldr	r2, [r2, #0]
 8013f88:	4611      	mov	r1, r2
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7f7 fcd4 	bl	800b938 <ip4_addr_isbroadcast_u32>
 8013f90:	4603      	mov	r3, r0
 8013f92:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013f94:	697b      	ldr	r3, [r7, #20]
 8013f96:	881b      	ldrh	r3, [r3, #0]
 8013f98:	b29b      	uxth	r3, r3
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7f8 fb46 	bl	800c62c <lwip_htons>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013fa4:	697b      	ldr	r3, [r7, #20]
 8013fa6:	885b      	ldrh	r3, [r3, #2]
 8013fa8:	b29b      	uxth	r3, r3
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7f8 fb3e 	bl	800c62c <lwip_htons>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013fb8:	2300      	movs	r3, #0
 8013fba:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013fc0:	4b64      	ldr	r3, [pc, #400]	; (8014154 <udp_input+0x21c>)
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8013fc6:	e054      	b.n	8014072 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fca:	8a5b      	ldrh	r3, [r3, #18]
 8013fcc:	89fa      	ldrh	r2, [r7, #14]
 8013fce:	429a      	cmp	r2, r3
 8013fd0:	d14a      	bne.n	8014068 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013fd2:	7cfb      	ldrb	r3, [r7, #19]
 8013fd4:	461a      	mov	r2, r3
 8013fd6:	6839      	ldr	r1, [r7, #0]
 8013fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013fda:	f7ff ff49 	bl	8013e70 <udp_input_local_match>
 8013fde:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d041      	beq.n	8014068 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe6:	7c1b      	ldrb	r3, [r3, #16]
 8013fe8:	f003 0304 	and.w	r3, r3, #4
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d11d      	bne.n	801402c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013ff0:	69fb      	ldr	r3, [r7, #28]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d102      	bne.n	8013ffc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff8:	61fb      	str	r3, [r7, #28]
 8013ffa:	e017      	b.n	801402c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013ffc:	7cfb      	ldrb	r3, [r7, #19]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d014      	beq.n	801402c <udp_input+0xf4>
 8014002:	4b53      	ldr	r3, [pc, #332]	; (8014150 <udp_input+0x218>)
 8014004:	695b      	ldr	r3, [r3, #20]
 8014006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801400a:	d10f      	bne.n	801402c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801400c:	69fb      	ldr	r3, [r7, #28]
 801400e:	681a      	ldr	r2, [r3, #0]
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	3304      	adds	r3, #4
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	429a      	cmp	r2, r3
 8014018:	d008      	beq.n	801402c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801401c:	681a      	ldr	r2, [r3, #0]
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	3304      	adds	r3, #4
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	429a      	cmp	r2, r3
 8014026:	d101      	bne.n	801402c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801402a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801402e:	8a9b      	ldrh	r3, [r3, #20]
 8014030:	8a3a      	ldrh	r2, [r7, #16]
 8014032:	429a      	cmp	r2, r3
 8014034:	d118      	bne.n	8014068 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014038:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801403a:	2b00      	cmp	r3, #0
 801403c:	d005      	beq.n	801404a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014040:	685a      	ldr	r2, [r3, #4]
 8014042:	4b43      	ldr	r3, [pc, #268]	; (8014150 <udp_input+0x218>)
 8014044:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014046:	429a      	cmp	r2, r3
 8014048:	d10e      	bne.n	8014068 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801404a:	6a3b      	ldr	r3, [r7, #32]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d014      	beq.n	801407a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014052:	68da      	ldr	r2, [r3, #12]
 8014054:	6a3b      	ldr	r3, [r7, #32]
 8014056:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014058:	4b3e      	ldr	r3, [pc, #248]	; (8014154 <udp_input+0x21c>)
 801405a:	681a      	ldr	r2, [r3, #0]
 801405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801405e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014060:	4a3c      	ldr	r2, [pc, #240]	; (8014154 <udp_input+0x21c>)
 8014062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014064:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014066:	e008      	b.n	801407a <udp_input+0x142>
      }
    }

    prev = pcb;
 8014068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801406a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801406e:	68db      	ldr	r3, [r3, #12]
 8014070:	627b      	str	r3, [r7, #36]	; 0x24
 8014072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014074:	2b00      	cmp	r3, #0
 8014076:	d1a7      	bne.n	8013fc8 <udp_input+0x90>
 8014078:	e000      	b.n	801407c <udp_input+0x144>
        break;
 801407a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801407e:	2b00      	cmp	r3, #0
 8014080:	d101      	bne.n	8014086 <udp_input+0x14e>
    pcb = uncon_pcb;
 8014082:	69fb      	ldr	r3, [r7, #28]
 8014084:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014088:	2b00      	cmp	r3, #0
 801408a:	d002      	beq.n	8014092 <udp_input+0x15a>
    for_us = 1;
 801408c:	2301      	movs	r3, #1
 801408e:	76fb      	strb	r3, [r7, #27]
 8014090:	e00a      	b.n	80140a8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014092:	683b      	ldr	r3, [r7, #0]
 8014094:	3304      	adds	r3, #4
 8014096:	681a      	ldr	r2, [r3, #0]
 8014098:	4b2d      	ldr	r3, [pc, #180]	; (8014150 <udp_input+0x218>)
 801409a:	695b      	ldr	r3, [r3, #20]
 801409c:	429a      	cmp	r2, r3
 801409e:	bf0c      	ite	eq
 80140a0:	2301      	moveq	r3, #1
 80140a2:	2300      	movne	r3, #0
 80140a4:	b2db      	uxtb	r3, r3
 80140a6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80140a8:	7efb      	ldrb	r3, [r7, #27]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d041      	beq.n	8014132 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80140ae:	2108      	movs	r1, #8
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f7f9 fdc3 	bl	800dc3c <pbuf_remove_header>
 80140b6:	4603      	mov	r3, r0
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d00a      	beq.n	80140d2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80140bc:	4b20      	ldr	r3, [pc, #128]	; (8014140 <udp_input+0x208>)
 80140be:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80140c2:	4925      	ldr	r1, [pc, #148]	; (8014158 <udp_input+0x220>)
 80140c4:	4820      	ldr	r0, [pc, #128]	; (8014148 <udp_input+0x210>)
 80140c6:	f001 fab3 	bl	8015630 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f7f9 fe3c 	bl	800dd48 <pbuf_free>
      goto end;
 80140d0:	e032      	b.n	8014138 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80140d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d012      	beq.n	80140fe <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80140d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140da:	699b      	ldr	r3, [r3, #24]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d00a      	beq.n	80140f6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80140e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e2:	699c      	ldr	r4, [r3, #24]
 80140e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e6:	69d8      	ldr	r0, [r3, #28]
 80140e8:	8a3b      	ldrh	r3, [r7, #16]
 80140ea:	9300      	str	r3, [sp, #0]
 80140ec:	4b1b      	ldr	r3, [pc, #108]	; (801415c <udp_input+0x224>)
 80140ee:	687a      	ldr	r2, [r7, #4]
 80140f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80140f2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80140f4:	e021      	b.n	801413a <udp_input+0x202>
        pbuf_free(p);
 80140f6:	6878      	ldr	r0, [r7, #4]
 80140f8:	f7f9 fe26 	bl	800dd48 <pbuf_free>
        goto end;
 80140fc:	e01c      	b.n	8014138 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80140fe:	7cfb      	ldrb	r3, [r7, #19]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d112      	bne.n	801412a <udp_input+0x1f2>
 8014104:	4b12      	ldr	r3, [pc, #72]	; (8014150 <udp_input+0x218>)
 8014106:	695b      	ldr	r3, [r3, #20]
 8014108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801410c:	2be0      	cmp	r3, #224	; 0xe0
 801410e:	d00c      	beq.n	801412a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014110:	4b0f      	ldr	r3, [pc, #60]	; (8014150 <udp_input+0x218>)
 8014112:	899b      	ldrh	r3, [r3, #12]
 8014114:	3308      	adds	r3, #8
 8014116:	b29b      	uxth	r3, r3
 8014118:	b21b      	sxth	r3, r3
 801411a:	4619      	mov	r1, r3
 801411c:	6878      	ldr	r0, [r7, #4]
 801411e:	f7f9 fe00 	bl	800dd22 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014122:	2103      	movs	r1, #3
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f7f7 f8c9 	bl	800b2bc <icmp_dest_unreach>
      pbuf_free(p);
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f7f9 fe0c 	bl	800dd48 <pbuf_free>
  return;
 8014130:	e003      	b.n	801413a <udp_input+0x202>
    pbuf_free(p);
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f7f9 fe08 	bl	800dd48 <pbuf_free>
  return;
 8014138:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801413a:	372c      	adds	r7, #44	; 0x2c
 801413c:	46bd      	mov	sp, r7
 801413e:	bd90      	pop	{r4, r7, pc}
 8014140:	0801c2c4 	.word	0x0801c2c4
 8014144:	0801c3c4 	.word	0x0801c3c4
 8014148:	0801c374 	.word	0x0801c374
 801414c:	0801c3dc 	.word	0x0801c3dc
 8014150:	20006a88 	.word	0x20006a88
 8014154:	2000cfe0 	.word	0x2000cfe0
 8014158:	0801c3f8 	.word	0x0801c3f8
 801415c:	20006a98 	.word	0x20006a98

08014160 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b088      	sub	sp, #32
 8014164:	af02      	add	r7, sp, #8
 8014166:	60f8      	str	r0, [r7, #12]
 8014168:	60b9      	str	r1, [r7, #8]
 801416a:	607a      	str	r2, [r7, #4]
 801416c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d109      	bne.n	8014188 <udp_sendto_if+0x28>
 8014174:	4b2e      	ldr	r3, [pc, #184]	; (8014230 <udp_sendto_if+0xd0>)
 8014176:	f44f 7220 	mov.w	r2, #640	; 0x280
 801417a:	492e      	ldr	r1, [pc, #184]	; (8014234 <udp_sendto_if+0xd4>)
 801417c:	482e      	ldr	r0, [pc, #184]	; (8014238 <udp_sendto_if+0xd8>)
 801417e:	f001 fa57 	bl	8015630 <iprintf>
 8014182:	f06f 030f 	mvn.w	r3, #15
 8014186:	e04f      	b.n	8014228 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d109      	bne.n	80141a2 <udp_sendto_if+0x42>
 801418e:	4b28      	ldr	r3, [pc, #160]	; (8014230 <udp_sendto_if+0xd0>)
 8014190:	f240 2281 	movw	r2, #641	; 0x281
 8014194:	4929      	ldr	r1, [pc, #164]	; (801423c <udp_sendto_if+0xdc>)
 8014196:	4828      	ldr	r0, [pc, #160]	; (8014238 <udp_sendto_if+0xd8>)
 8014198:	f001 fa4a 	bl	8015630 <iprintf>
 801419c:	f06f 030f 	mvn.w	r3, #15
 80141a0:	e042      	b.n	8014228 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d109      	bne.n	80141bc <udp_sendto_if+0x5c>
 80141a8:	4b21      	ldr	r3, [pc, #132]	; (8014230 <udp_sendto_if+0xd0>)
 80141aa:	f240 2282 	movw	r2, #642	; 0x282
 80141ae:	4924      	ldr	r1, [pc, #144]	; (8014240 <udp_sendto_if+0xe0>)
 80141b0:	4821      	ldr	r0, [pc, #132]	; (8014238 <udp_sendto_if+0xd8>)
 80141b2:	f001 fa3d 	bl	8015630 <iprintf>
 80141b6:	f06f 030f 	mvn.w	r3, #15
 80141ba:	e035      	b.n	8014228 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80141bc:	6a3b      	ldr	r3, [r7, #32]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d109      	bne.n	80141d6 <udp_sendto_if+0x76>
 80141c2:	4b1b      	ldr	r3, [pc, #108]	; (8014230 <udp_sendto_if+0xd0>)
 80141c4:	f240 2283 	movw	r2, #643	; 0x283
 80141c8:	491e      	ldr	r1, [pc, #120]	; (8014244 <udp_sendto_if+0xe4>)
 80141ca:	481b      	ldr	r0, [pc, #108]	; (8014238 <udp_sendto_if+0xd8>)
 80141cc:	f001 fa30 	bl	8015630 <iprintf>
 80141d0:	f06f 030f 	mvn.w	r3, #15
 80141d4:	e028      	b.n	8014228 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d009      	beq.n	80141f0 <udp_sendto_if+0x90>
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d005      	beq.n	80141f0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80141ec:	2be0      	cmp	r3, #224	; 0xe0
 80141ee:	d103      	bne.n	80141f8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80141f0:	6a3b      	ldr	r3, [r7, #32]
 80141f2:	3304      	adds	r3, #4
 80141f4:	617b      	str	r3, [r7, #20]
 80141f6:	e00b      	b.n	8014210 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	681a      	ldr	r2, [r3, #0]
 80141fc:	6a3b      	ldr	r3, [r7, #32]
 80141fe:	3304      	adds	r3, #4
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	429a      	cmp	r2, r3
 8014204:	d002      	beq.n	801420c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014206:	f06f 0303 	mvn.w	r3, #3
 801420a:	e00d      	b.n	8014228 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014210:	887a      	ldrh	r2, [r7, #2]
 8014212:	697b      	ldr	r3, [r7, #20]
 8014214:	9301      	str	r3, [sp, #4]
 8014216:	6a3b      	ldr	r3, [r7, #32]
 8014218:	9300      	str	r3, [sp, #0]
 801421a:	4613      	mov	r3, r2
 801421c:	687a      	ldr	r2, [r7, #4]
 801421e:	68b9      	ldr	r1, [r7, #8]
 8014220:	68f8      	ldr	r0, [r7, #12]
 8014222:	f000 f811 	bl	8014248 <udp_sendto_if_src>
 8014226:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014228:	4618      	mov	r0, r3
 801422a:	3718      	adds	r7, #24
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}
 8014230:	0801c2c4 	.word	0x0801c2c4
 8014234:	0801c494 	.word	0x0801c494
 8014238:	0801c374 	.word	0x0801c374
 801423c:	0801c4b0 	.word	0x0801c4b0
 8014240:	0801c4cc 	.word	0x0801c4cc
 8014244:	0801c4ec 	.word	0x0801c4ec

08014248 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b08c      	sub	sp, #48	; 0x30
 801424c:	af04      	add	r7, sp, #16
 801424e:	60f8      	str	r0, [r7, #12]
 8014250:	60b9      	str	r1, [r7, #8]
 8014252:	607a      	str	r2, [r7, #4]
 8014254:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d109      	bne.n	8014270 <udp_sendto_if_src+0x28>
 801425c:	4b65      	ldr	r3, [pc, #404]	; (80143f4 <udp_sendto_if_src+0x1ac>)
 801425e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014262:	4965      	ldr	r1, [pc, #404]	; (80143f8 <udp_sendto_if_src+0x1b0>)
 8014264:	4865      	ldr	r0, [pc, #404]	; (80143fc <udp_sendto_if_src+0x1b4>)
 8014266:	f001 f9e3 	bl	8015630 <iprintf>
 801426a:	f06f 030f 	mvn.w	r3, #15
 801426e:	e0bc      	b.n	80143ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d109      	bne.n	801428a <udp_sendto_if_src+0x42>
 8014276:	4b5f      	ldr	r3, [pc, #380]	; (80143f4 <udp_sendto_if_src+0x1ac>)
 8014278:	f240 22d2 	movw	r2, #722	; 0x2d2
 801427c:	4960      	ldr	r1, [pc, #384]	; (8014400 <udp_sendto_if_src+0x1b8>)
 801427e:	485f      	ldr	r0, [pc, #380]	; (80143fc <udp_sendto_if_src+0x1b4>)
 8014280:	f001 f9d6 	bl	8015630 <iprintf>
 8014284:	f06f 030f 	mvn.w	r3, #15
 8014288:	e0af      	b.n	80143ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d109      	bne.n	80142a4 <udp_sendto_if_src+0x5c>
 8014290:	4b58      	ldr	r3, [pc, #352]	; (80143f4 <udp_sendto_if_src+0x1ac>)
 8014292:	f240 22d3 	movw	r2, #723	; 0x2d3
 8014296:	495b      	ldr	r1, [pc, #364]	; (8014404 <udp_sendto_if_src+0x1bc>)
 8014298:	4858      	ldr	r0, [pc, #352]	; (80143fc <udp_sendto_if_src+0x1b4>)
 801429a:	f001 f9c9 	bl	8015630 <iprintf>
 801429e:	f06f 030f 	mvn.w	r3, #15
 80142a2:	e0a2      	b.n	80143ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80142a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d109      	bne.n	80142be <udp_sendto_if_src+0x76>
 80142aa:	4b52      	ldr	r3, [pc, #328]	; (80143f4 <udp_sendto_if_src+0x1ac>)
 80142ac:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80142b0:	4955      	ldr	r1, [pc, #340]	; (8014408 <udp_sendto_if_src+0x1c0>)
 80142b2:	4852      	ldr	r0, [pc, #328]	; (80143fc <udp_sendto_if_src+0x1b4>)
 80142b4:	f001 f9bc 	bl	8015630 <iprintf>
 80142b8:	f06f 030f 	mvn.w	r3, #15
 80142bc:	e095      	b.n	80143ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80142be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d109      	bne.n	80142d8 <udp_sendto_if_src+0x90>
 80142c4:	4b4b      	ldr	r3, [pc, #300]	; (80143f4 <udp_sendto_if_src+0x1ac>)
 80142c6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80142ca:	4950      	ldr	r1, [pc, #320]	; (801440c <udp_sendto_if_src+0x1c4>)
 80142cc:	484b      	ldr	r0, [pc, #300]	; (80143fc <udp_sendto_if_src+0x1b4>)
 80142ce:	f001 f9af 	bl	8015630 <iprintf>
 80142d2:	f06f 030f 	mvn.w	r3, #15
 80142d6:	e088      	b.n	80143ea <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	8a5b      	ldrh	r3, [r3, #18]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d10f      	bne.n	8014300 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80142e0:	68f9      	ldr	r1, [r7, #12]
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	8a5b      	ldrh	r3, [r3, #18]
 80142e6:	461a      	mov	r2, r3
 80142e8:	68f8      	ldr	r0, [r7, #12]
 80142ea:	f000 f893 	bl	8014414 <udp_bind>
 80142ee:	4603      	mov	r3, r0
 80142f0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80142f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d002      	beq.n	8014300 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80142fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80142fe:	e074      	b.n	80143ea <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	891b      	ldrh	r3, [r3, #8]
 8014304:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014308:	4293      	cmp	r3, r2
 801430a:	d902      	bls.n	8014312 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801430c:	f04f 33ff 	mov.w	r3, #4294967295
 8014310:	e06b      	b.n	80143ea <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014312:	2108      	movs	r1, #8
 8014314:	68b8      	ldr	r0, [r7, #8]
 8014316:	f7f9 fc81 	bl	800dc1c <pbuf_add_header>
 801431a:	4603      	mov	r3, r0
 801431c:	2b00      	cmp	r3, #0
 801431e:	d015      	beq.n	801434c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014320:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014324:	2108      	movs	r1, #8
 8014326:	2022      	movs	r0, #34	; 0x22
 8014328:	f7f9 fa2a 	bl	800d780 <pbuf_alloc>
 801432c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801432e:	69fb      	ldr	r3, [r7, #28]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d102      	bne.n	801433a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014334:	f04f 33ff 	mov.w	r3, #4294967295
 8014338:	e057      	b.n	80143ea <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	891b      	ldrh	r3, [r3, #8]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d006      	beq.n	8014350 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014342:	68b9      	ldr	r1, [r7, #8]
 8014344:	69f8      	ldr	r0, [r7, #28]
 8014346:	f7f9 fe23 	bl	800df90 <pbuf_chain>
 801434a:	e001      	b.n	8014350 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014350:	69fb      	ldr	r3, [r7, #28]
 8014352:	895b      	ldrh	r3, [r3, #10]
 8014354:	2b07      	cmp	r3, #7
 8014356:	d806      	bhi.n	8014366 <udp_sendto_if_src+0x11e>
 8014358:	4b26      	ldr	r3, [pc, #152]	; (80143f4 <udp_sendto_if_src+0x1ac>)
 801435a:	f240 320d 	movw	r2, #781	; 0x30d
 801435e:	492c      	ldr	r1, [pc, #176]	; (8014410 <udp_sendto_if_src+0x1c8>)
 8014360:	4826      	ldr	r0, [pc, #152]	; (80143fc <udp_sendto_if_src+0x1b4>)
 8014362:	f001 f965 	bl	8015630 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014366:	69fb      	ldr	r3, [r7, #28]
 8014368:	685b      	ldr	r3, [r3, #4]
 801436a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	8a5b      	ldrh	r3, [r3, #18]
 8014370:	4618      	mov	r0, r3
 8014372:	f7f8 f95b 	bl	800c62c <lwip_htons>
 8014376:	4603      	mov	r3, r0
 8014378:	461a      	mov	r2, r3
 801437a:	697b      	ldr	r3, [r7, #20]
 801437c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801437e:	887b      	ldrh	r3, [r7, #2]
 8014380:	4618      	mov	r0, r3
 8014382:	f7f8 f953 	bl	800c62c <lwip_htons>
 8014386:	4603      	mov	r3, r0
 8014388:	461a      	mov	r2, r3
 801438a:	697b      	ldr	r3, [r7, #20]
 801438c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	2200      	movs	r2, #0
 8014392:	719a      	strb	r2, [r3, #6]
 8014394:	2200      	movs	r2, #0
 8014396:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014398:	69fb      	ldr	r3, [r7, #28]
 801439a:	891b      	ldrh	r3, [r3, #8]
 801439c:	4618      	mov	r0, r3
 801439e:	f7f8 f945 	bl	800c62c <lwip_htons>
 80143a2:	4603      	mov	r3, r0
 80143a4:	461a      	mov	r2, r3
 80143a6:	697b      	ldr	r3, [r7, #20]
 80143a8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80143aa:	2311      	movs	r3, #17
 80143ac:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	7adb      	ldrb	r3, [r3, #11]
 80143b2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	7a9b      	ldrb	r3, [r3, #10]
 80143b8:	7cb9      	ldrb	r1, [r7, #18]
 80143ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143bc:	9202      	str	r2, [sp, #8]
 80143be:	7cfa      	ldrb	r2, [r7, #19]
 80143c0:	9201      	str	r2, [sp, #4]
 80143c2:	9300      	str	r3, [sp, #0]
 80143c4:	460b      	mov	r3, r1
 80143c6:	687a      	ldr	r2, [r7, #4]
 80143c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80143ca:	69f8      	ldr	r0, [r7, #28]
 80143cc:	f7f7 fa06 	bl	800b7dc <ip4_output_if_src>
 80143d0:	4603      	mov	r3, r0
 80143d2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80143d4:	69fa      	ldr	r2, [r7, #28]
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	429a      	cmp	r2, r3
 80143da:	d004      	beq.n	80143e6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80143dc:	69f8      	ldr	r0, [r7, #28]
 80143de:	f7f9 fcb3 	bl	800dd48 <pbuf_free>
    q = NULL;
 80143e2:	2300      	movs	r3, #0
 80143e4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80143e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	3720      	adds	r7, #32
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd80      	pop	{r7, pc}
 80143f2:	bf00      	nop
 80143f4:	0801c2c4 	.word	0x0801c2c4
 80143f8:	0801c50c 	.word	0x0801c50c
 80143fc:	0801c374 	.word	0x0801c374
 8014400:	0801c52c 	.word	0x0801c52c
 8014404:	0801c54c 	.word	0x0801c54c
 8014408:	0801c570 	.word	0x0801c570
 801440c:	0801c594 	.word	0x0801c594
 8014410:	0801c5b8 	.word	0x0801c5b8

08014414 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b086      	sub	sp, #24
 8014418:	af00      	add	r7, sp, #0
 801441a:	60f8      	str	r0, [r7, #12]
 801441c:	60b9      	str	r1, [r7, #8]
 801441e:	4613      	mov	r3, r2
 8014420:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d101      	bne.n	801442c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014428:	4b39      	ldr	r3, [pc, #228]	; (8014510 <udp_bind+0xfc>)
 801442a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d109      	bne.n	8014446 <udp_bind+0x32>
 8014432:	4b38      	ldr	r3, [pc, #224]	; (8014514 <udp_bind+0x100>)
 8014434:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014438:	4937      	ldr	r1, [pc, #220]	; (8014518 <udp_bind+0x104>)
 801443a:	4838      	ldr	r0, [pc, #224]	; (801451c <udp_bind+0x108>)
 801443c:	f001 f8f8 	bl	8015630 <iprintf>
 8014440:	f06f 030f 	mvn.w	r3, #15
 8014444:	e060      	b.n	8014508 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014446:	2300      	movs	r3, #0
 8014448:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801444a:	4b35      	ldr	r3, [pc, #212]	; (8014520 <udp_bind+0x10c>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	617b      	str	r3, [r7, #20]
 8014450:	e009      	b.n	8014466 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014452:	68fa      	ldr	r2, [r7, #12]
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	429a      	cmp	r2, r3
 8014458:	d102      	bne.n	8014460 <udp_bind+0x4c>
      rebind = 1;
 801445a:	2301      	movs	r3, #1
 801445c:	74fb      	strb	r3, [r7, #19]
      break;
 801445e:	e005      	b.n	801446c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014460:	697b      	ldr	r3, [r7, #20]
 8014462:	68db      	ldr	r3, [r3, #12]
 8014464:	617b      	str	r3, [r7, #20]
 8014466:	697b      	ldr	r3, [r7, #20]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d1f2      	bne.n	8014452 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801446c:	88fb      	ldrh	r3, [r7, #6]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d109      	bne.n	8014486 <udp_bind+0x72>
    port = udp_new_port();
 8014472:	f7ff fcc5 	bl	8013e00 <udp_new_port>
 8014476:	4603      	mov	r3, r0
 8014478:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801447a:	88fb      	ldrh	r3, [r7, #6]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d12c      	bne.n	80144da <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014480:	f06f 0307 	mvn.w	r3, #7
 8014484:	e040      	b.n	8014508 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014486:	4b26      	ldr	r3, [pc, #152]	; (8014520 <udp_bind+0x10c>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	617b      	str	r3, [r7, #20]
 801448c:	e022      	b.n	80144d4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801448e:	68fa      	ldr	r2, [r7, #12]
 8014490:	697b      	ldr	r3, [r7, #20]
 8014492:	429a      	cmp	r2, r3
 8014494:	d01b      	beq.n	80144ce <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	8a5b      	ldrh	r3, [r3, #18]
 801449a:	88fa      	ldrh	r2, [r7, #6]
 801449c:	429a      	cmp	r2, r3
 801449e:	d116      	bne.n	80144ce <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80144a0:	697b      	ldr	r3, [r7, #20]
 80144a2:	681a      	ldr	r2, [r3, #0]
 80144a4:	68bb      	ldr	r3, [r7, #8]
 80144a6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80144a8:	429a      	cmp	r2, r3
 80144aa:	d00d      	beq.n	80144c8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d00a      	beq.n	80144c8 <udp_bind+0xb4>
 80144b2:	68bb      	ldr	r3, [r7, #8]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d006      	beq.n	80144c8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80144ba:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d003      	beq.n	80144c8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80144c0:	697b      	ldr	r3, [r7, #20]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d102      	bne.n	80144ce <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80144c8:	f06f 0307 	mvn.w	r3, #7
 80144cc:	e01c      	b.n	8014508 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80144ce:	697b      	ldr	r3, [r7, #20]
 80144d0:	68db      	ldr	r3, [r3, #12]
 80144d2:	617b      	str	r3, [r7, #20]
 80144d4:	697b      	ldr	r3, [r7, #20]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d1d9      	bne.n	801448e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d002      	beq.n	80144e6 <udp_bind+0xd2>
 80144e0:	68bb      	ldr	r3, [r7, #8]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	e000      	b.n	80144e8 <udp_bind+0xd4>
 80144e6:	2300      	movs	r3, #0
 80144e8:	68fa      	ldr	r2, [r7, #12]
 80144ea:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	88fa      	ldrh	r2, [r7, #6]
 80144f0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80144f2:	7cfb      	ldrb	r3, [r7, #19]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d106      	bne.n	8014506 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80144f8:	4b09      	ldr	r3, [pc, #36]	; (8014520 <udp_bind+0x10c>)
 80144fa:	681a      	ldr	r2, [r3, #0]
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014500:	4a07      	ldr	r2, [pc, #28]	; (8014520 <udp_bind+0x10c>)
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014506:	2300      	movs	r3, #0
}
 8014508:	4618      	mov	r0, r3
 801450a:	3718      	adds	r7, #24
 801450c:	46bd      	mov	sp, r7
 801450e:	bd80      	pop	{r7, pc}
 8014510:	08019c70 	.word	0x08019c70
 8014514:	0801c2c4 	.word	0x0801c2c4
 8014518:	0801c5e8 	.word	0x0801c5e8
 801451c:	0801c374 	.word	0x0801c374
 8014520:	2000cfe0 	.word	0x2000cfe0

08014524 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b086      	sub	sp, #24
 8014528:	af00      	add	r7, sp, #0
 801452a:	60f8      	str	r0, [r7, #12]
 801452c:	60b9      	str	r1, [r7, #8]
 801452e:	4613      	mov	r3, r2
 8014530:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d109      	bne.n	801454c <udp_connect+0x28>
 8014538:	4b2c      	ldr	r3, [pc, #176]	; (80145ec <udp_connect+0xc8>)
 801453a:	f240 4235 	movw	r2, #1077	; 0x435
 801453e:	492c      	ldr	r1, [pc, #176]	; (80145f0 <udp_connect+0xcc>)
 8014540:	482c      	ldr	r0, [pc, #176]	; (80145f4 <udp_connect+0xd0>)
 8014542:	f001 f875 	bl	8015630 <iprintf>
 8014546:	f06f 030f 	mvn.w	r3, #15
 801454a:	e04b      	b.n	80145e4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d109      	bne.n	8014566 <udp_connect+0x42>
 8014552:	4b26      	ldr	r3, [pc, #152]	; (80145ec <udp_connect+0xc8>)
 8014554:	f240 4236 	movw	r2, #1078	; 0x436
 8014558:	4927      	ldr	r1, [pc, #156]	; (80145f8 <udp_connect+0xd4>)
 801455a:	4826      	ldr	r0, [pc, #152]	; (80145f4 <udp_connect+0xd0>)
 801455c:	f001 f868 	bl	8015630 <iprintf>
 8014560:	f06f 030f 	mvn.w	r3, #15
 8014564:	e03e      	b.n	80145e4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	8a5b      	ldrh	r3, [r3, #18]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d10f      	bne.n	801458e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801456e:	68f9      	ldr	r1, [r7, #12]
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	8a5b      	ldrh	r3, [r3, #18]
 8014574:	461a      	mov	r2, r3
 8014576:	68f8      	ldr	r0, [r7, #12]
 8014578:	f7ff ff4c 	bl	8014414 <udp_bind>
 801457c:	4603      	mov	r3, r0
 801457e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014580:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d002      	beq.n	801458e <udp_connect+0x6a>
      return err;
 8014588:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801458c:	e02a      	b.n	80145e4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d002      	beq.n	801459a <udp_connect+0x76>
 8014594:	68bb      	ldr	r3, [r7, #8]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	e000      	b.n	801459c <udp_connect+0x78>
 801459a:	2300      	movs	r3, #0
 801459c:	68fa      	ldr	r2, [r7, #12]
 801459e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	88fa      	ldrh	r2, [r7, #6]
 80145a4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	7c1b      	ldrb	r3, [r3, #16]
 80145aa:	f043 0304 	orr.w	r3, r3, #4
 80145ae:	b2da      	uxtb	r2, r3
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80145b4:	4b11      	ldr	r3, [pc, #68]	; (80145fc <udp_connect+0xd8>)
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	617b      	str	r3, [r7, #20]
 80145ba:	e008      	b.n	80145ce <udp_connect+0xaa>
    if (pcb == ipcb) {
 80145bc:	68fa      	ldr	r2, [r7, #12]
 80145be:	697b      	ldr	r3, [r7, #20]
 80145c0:	429a      	cmp	r2, r3
 80145c2:	d101      	bne.n	80145c8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80145c4:	2300      	movs	r3, #0
 80145c6:	e00d      	b.n	80145e4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80145c8:	697b      	ldr	r3, [r7, #20]
 80145ca:	68db      	ldr	r3, [r3, #12]
 80145cc:	617b      	str	r3, [r7, #20]
 80145ce:	697b      	ldr	r3, [r7, #20]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d1f3      	bne.n	80145bc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80145d4:	4b09      	ldr	r3, [pc, #36]	; (80145fc <udp_connect+0xd8>)
 80145d6:	681a      	ldr	r2, [r3, #0]
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80145dc:	4a07      	ldr	r2, [pc, #28]	; (80145fc <udp_connect+0xd8>)
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80145e2:	2300      	movs	r3, #0
}
 80145e4:	4618      	mov	r0, r3
 80145e6:	3718      	adds	r7, #24
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}
 80145ec:	0801c2c4 	.word	0x0801c2c4
 80145f0:	0801c600 	.word	0x0801c600
 80145f4:	0801c374 	.word	0x0801c374
 80145f8:	0801c61c 	.word	0x0801c61c
 80145fc:	2000cfe0 	.word	0x2000cfe0

08014600 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b084      	sub	sp, #16
 8014604:	af00      	add	r7, sp, #0
 8014606:	60f8      	str	r0, [r7, #12]
 8014608:	60b9      	str	r1, [r7, #8]
 801460a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d107      	bne.n	8014622 <udp_recv+0x22>
 8014612:	4b08      	ldr	r3, [pc, #32]	; (8014634 <udp_recv+0x34>)
 8014614:	f240 428a 	movw	r2, #1162	; 0x48a
 8014618:	4907      	ldr	r1, [pc, #28]	; (8014638 <udp_recv+0x38>)
 801461a:	4808      	ldr	r0, [pc, #32]	; (801463c <udp_recv+0x3c>)
 801461c:	f001 f808 	bl	8015630 <iprintf>
 8014620:	e005      	b.n	801462e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	68ba      	ldr	r2, [r7, #8]
 8014626:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	687a      	ldr	r2, [r7, #4]
 801462c:	61da      	str	r2, [r3, #28]
}
 801462e:	3710      	adds	r7, #16
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}
 8014634:	0801c2c4 	.word	0x0801c2c4
 8014638:	0801c654 	.word	0x0801c654
 801463c:	0801c374 	.word	0x0801c374

08014640 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b084      	sub	sp, #16
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d107      	bne.n	801465e <udp_remove+0x1e>
 801464e:	4b19      	ldr	r3, [pc, #100]	; (80146b4 <udp_remove+0x74>)
 8014650:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014654:	4918      	ldr	r1, [pc, #96]	; (80146b8 <udp_remove+0x78>)
 8014656:	4819      	ldr	r0, [pc, #100]	; (80146bc <udp_remove+0x7c>)
 8014658:	f000 ffea 	bl	8015630 <iprintf>
 801465c:	e026      	b.n	80146ac <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801465e:	4b18      	ldr	r3, [pc, #96]	; (80146c0 <udp_remove+0x80>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	687a      	ldr	r2, [r7, #4]
 8014664:	429a      	cmp	r2, r3
 8014666:	d105      	bne.n	8014674 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014668:	4b15      	ldr	r3, [pc, #84]	; (80146c0 <udp_remove+0x80>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	68db      	ldr	r3, [r3, #12]
 801466e:	4a14      	ldr	r2, [pc, #80]	; (80146c0 <udp_remove+0x80>)
 8014670:	6013      	str	r3, [r2, #0]
 8014672:	e017      	b.n	80146a4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014674:	4b12      	ldr	r3, [pc, #72]	; (80146c0 <udp_remove+0x80>)
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	60fb      	str	r3, [r7, #12]
 801467a:	e010      	b.n	801469e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	68db      	ldr	r3, [r3, #12]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d009      	beq.n	8014698 <udp_remove+0x58>
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	68db      	ldr	r3, [r3, #12]
 8014688:	687a      	ldr	r2, [r7, #4]
 801468a:	429a      	cmp	r2, r3
 801468c:	d104      	bne.n	8014698 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	68da      	ldr	r2, [r3, #12]
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	60da      	str	r2, [r3, #12]
        break;
 8014696:	e005      	b.n	80146a4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	68db      	ldr	r3, [r3, #12]
 801469c:	60fb      	str	r3, [r7, #12]
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d1eb      	bne.n	801467c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80146a4:	6879      	ldr	r1, [r7, #4]
 80146a6:	2000      	movs	r0, #0
 80146a8:	f7f8 fd72 	bl	800d190 <memp_free>
}
 80146ac:	3710      	adds	r7, #16
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	0801c2c4 	.word	0x0801c2c4
 80146b8:	0801c66c 	.word	0x0801c66c
 80146bc:	0801c374 	.word	0x0801c374
 80146c0:	2000cfe0 	.word	0x2000cfe0

080146c4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b082      	sub	sp, #8
 80146c8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80146ca:	2000      	movs	r0, #0
 80146cc:	f7f8 fd0e 	bl	800d0ec <memp_malloc>
 80146d0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d007      	beq.n	80146e8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80146d8:	2220      	movs	r2, #32
 80146da:	2100      	movs	r1, #0
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f000 fa8b 	bl	8014bf8 <memset>
    pcb->ttl = UDP_TTL;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	22ff      	movs	r2, #255	; 0xff
 80146e6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80146e8:	687b      	ldr	r3, [r7, #4]
}
 80146ea:	4618      	mov	r0, r3
 80146ec:	3708      	adds	r7, #8
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bd80      	pop	{r7, pc}
	...

080146f4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80146f4:	b480      	push	{r7}
 80146f6:	b085      	sub	sp, #20
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d01e      	beq.n	8014742 <udp_netif_ip_addr_changed+0x4e>
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d01a      	beq.n	8014742 <udp_netif_ip_addr_changed+0x4e>
 801470c:	683b      	ldr	r3, [r7, #0]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d017      	beq.n	8014742 <udp_netif_ip_addr_changed+0x4e>
 8014712:	683b      	ldr	r3, [r7, #0]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d013      	beq.n	8014742 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801471a:	4b0d      	ldr	r3, [pc, #52]	; (8014750 <udp_netif_ip_addr_changed+0x5c>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	60fb      	str	r3, [r7, #12]
 8014720:	e00c      	b.n	801473c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	681a      	ldr	r2, [r3, #0]
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	429a      	cmp	r2, r3
 801472c:	d103      	bne.n	8014736 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	681a      	ldr	r2, [r3, #0]
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	68db      	ldr	r3, [r3, #12]
 801473a:	60fb      	str	r3, [r7, #12]
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d1ef      	bne.n	8014722 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014742:	bf00      	nop
 8014744:	3714      	adds	r7, #20
 8014746:	46bd      	mov	sp, r7
 8014748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474c:	4770      	bx	lr
 801474e:	bf00      	nop
 8014750:	2000cfe0 	.word	0x2000cfe0

08014754 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b086      	sub	sp, #24
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
 801475c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801475e:	230e      	movs	r3, #14
 8014760:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	895b      	ldrh	r3, [r3, #10]
 8014766:	2b0e      	cmp	r3, #14
 8014768:	d96e      	bls.n	8014848 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	7bdb      	ldrb	r3, [r3, #15]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d106      	bne.n	8014780 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014778:	3301      	adds	r3, #1
 801477a:	b2da      	uxtb	r2, r3
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	685b      	ldr	r3, [r3, #4]
 8014784:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014786:	693b      	ldr	r3, [r7, #16]
 8014788:	7b1a      	ldrb	r2, [r3, #12]
 801478a:	7b5b      	ldrb	r3, [r3, #13]
 801478c:	021b      	lsls	r3, r3, #8
 801478e:	4313      	orrs	r3, r2
 8014790:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	781b      	ldrb	r3, [r3, #0]
 8014796:	f003 0301 	and.w	r3, r3, #1
 801479a:	2b00      	cmp	r3, #0
 801479c:	d023      	beq.n	80147e6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801479e:	693b      	ldr	r3, [r7, #16]
 80147a0:	781b      	ldrb	r3, [r3, #0]
 80147a2:	2b01      	cmp	r3, #1
 80147a4:	d10f      	bne.n	80147c6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	785b      	ldrb	r3, [r3, #1]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d11b      	bne.n	80147e6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80147b2:	2b5e      	cmp	r3, #94	; 0x5e
 80147b4:	d117      	bne.n	80147e6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	7b5b      	ldrb	r3, [r3, #13]
 80147ba:	f043 0310 	orr.w	r3, r3, #16
 80147be:	b2da      	uxtb	r2, r3
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	735a      	strb	r2, [r3, #13]
 80147c4:	e00f      	b.n	80147e6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80147c6:	693b      	ldr	r3, [r7, #16]
 80147c8:	2206      	movs	r2, #6
 80147ca:	4928      	ldr	r1, [pc, #160]	; (801486c <ethernet_input+0x118>)
 80147cc:	4618      	mov	r0, r3
 80147ce:	f000 f9dd 	bl	8014b8c <memcmp>
 80147d2:	4603      	mov	r3, r0
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d106      	bne.n	80147e6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	7b5b      	ldrb	r3, [r3, #13]
 80147dc:	f043 0308 	orr.w	r3, r3, #8
 80147e0:	b2da      	uxtb	r2, r3
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80147e6:	89fb      	ldrh	r3, [r7, #14]
 80147e8:	2b08      	cmp	r3, #8
 80147ea:	d003      	beq.n	80147f4 <ethernet_input+0xa0>
 80147ec:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80147f0:	d014      	beq.n	801481c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80147f2:	e032      	b.n	801485a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80147f4:	683b      	ldr	r3, [r7, #0]
 80147f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80147fa:	f003 0308 	and.w	r3, r3, #8
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d024      	beq.n	801484c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014802:	8afb      	ldrh	r3, [r7, #22]
 8014804:	4619      	mov	r1, r3
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	f7f9 fa18 	bl	800dc3c <pbuf_remove_header>
 801480c:	4603      	mov	r3, r0
 801480e:	2b00      	cmp	r3, #0
 8014810:	d11e      	bne.n	8014850 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014812:	6839      	ldr	r1, [r7, #0]
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f7f6 fe75 	bl	800b504 <ip4_input>
      break;
 801481a:	e013      	b.n	8014844 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014822:	f003 0308 	and.w	r3, r3, #8
 8014826:	2b00      	cmp	r3, #0
 8014828:	d014      	beq.n	8014854 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801482a:	8afb      	ldrh	r3, [r7, #22]
 801482c:	4619      	mov	r1, r3
 801482e:	6878      	ldr	r0, [r7, #4]
 8014830:	f7f9 fa04 	bl	800dc3c <pbuf_remove_header>
 8014834:	4603      	mov	r3, r0
 8014836:	2b00      	cmp	r3, #0
 8014838:	d10e      	bne.n	8014858 <ethernet_input+0x104>
        etharp_input(p, netif);
 801483a:	6839      	ldr	r1, [r7, #0]
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f7f6 f807 	bl	800a850 <etharp_input>
      break;
 8014842:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014844:	2300      	movs	r3, #0
 8014846:	e00c      	b.n	8014862 <ethernet_input+0x10e>
    goto free_and_return;
 8014848:	bf00      	nop
 801484a:	e006      	b.n	801485a <ethernet_input+0x106>
        goto free_and_return;
 801484c:	bf00      	nop
 801484e:	e004      	b.n	801485a <ethernet_input+0x106>
        goto free_and_return;
 8014850:	bf00      	nop
 8014852:	e002      	b.n	801485a <ethernet_input+0x106>
        goto free_and_return;
 8014854:	bf00      	nop
 8014856:	e000      	b.n	801485a <ethernet_input+0x106>
        goto free_and_return;
 8014858:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801485a:	6878      	ldr	r0, [r7, #4]
 801485c:	f7f9 fa74 	bl	800dd48 <pbuf_free>
  return ERR_OK;
 8014860:	2300      	movs	r3, #0
}
 8014862:	4618      	mov	r0, r3
 8014864:	3718      	adds	r7, #24
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}
 801486a:	bf00      	nop
 801486c:	0801c684 	.word	0x0801c684

08014870 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014870:	b580      	push	{r7, lr}
 8014872:	b086      	sub	sp, #24
 8014874:	af00      	add	r7, sp, #0
 8014876:	60f8      	str	r0, [r7, #12]
 8014878:	60b9      	str	r1, [r7, #8]
 801487a:	607a      	str	r2, [r7, #4]
 801487c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801487e:	8c3b      	ldrh	r3, [r7, #32]
 8014880:	4618      	mov	r0, r3
 8014882:	f7f7 fed3 	bl	800c62c <lwip_htons>
 8014886:	4603      	mov	r3, r0
 8014888:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801488a:	210e      	movs	r1, #14
 801488c:	68b8      	ldr	r0, [r7, #8]
 801488e:	f7f9 f9c5 	bl	800dc1c <pbuf_add_header>
 8014892:	4603      	mov	r3, r0
 8014894:	2b00      	cmp	r3, #0
 8014896:	d125      	bne.n	80148e4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	685b      	ldr	r3, [r3, #4]
 801489c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	8afa      	ldrh	r2, [r7, #22]
 80148a2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80148a4:	693b      	ldr	r3, [r7, #16]
 80148a6:	2206      	movs	r2, #6
 80148a8:	6839      	ldr	r1, [r7, #0]
 80148aa:	4618      	mov	r0, r3
 80148ac:	f000 f97c 	bl	8014ba8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80148b0:	693b      	ldr	r3, [r7, #16]
 80148b2:	3306      	adds	r3, #6
 80148b4:	2206      	movs	r2, #6
 80148b6:	6879      	ldr	r1, [r7, #4]
 80148b8:	4618      	mov	r0, r3
 80148ba:	f000 f975 	bl	8014ba8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80148c4:	2b06      	cmp	r3, #6
 80148c6:	d006      	beq.n	80148d6 <ethernet_output+0x66>
 80148c8:	4b0a      	ldr	r3, [pc, #40]	; (80148f4 <ethernet_output+0x84>)
 80148ca:	f44f 7299 	mov.w	r2, #306	; 0x132
 80148ce:	490a      	ldr	r1, [pc, #40]	; (80148f8 <ethernet_output+0x88>)
 80148d0:	480a      	ldr	r0, [pc, #40]	; (80148fc <ethernet_output+0x8c>)
 80148d2:	f000 fead 	bl	8015630 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	699b      	ldr	r3, [r3, #24]
 80148da:	68b9      	ldr	r1, [r7, #8]
 80148dc:	68f8      	ldr	r0, [r7, #12]
 80148de:	4798      	blx	r3
 80148e0:	4603      	mov	r3, r0
 80148e2:	e002      	b.n	80148ea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80148e4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80148e6:	f06f 0301 	mvn.w	r3, #1
}
 80148ea:	4618      	mov	r0, r3
 80148ec:	3718      	adds	r7, #24
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}
 80148f2:	bf00      	nop
 80148f4:	0801c694 	.word	0x0801c694
 80148f8:	0801c728 	.word	0x0801c728
 80148fc:	0801c75c 	.word	0x0801c75c

08014900 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b084      	sub	sp, #16
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
 8014908:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	60bb      	str	r3, [r7, #8]
 801490e:	2304      	movs	r3, #4
 8014910:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8014912:	f107 0308 	add.w	r3, r7, #8
 8014916:	2100      	movs	r1, #0
 8014918:	4618      	mov	r0, r3
 801491a:	f7f2 ffbb 	bl	8007894 <osMessageCreate>
 801491e:	4602      	mov	r2, r0
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d102      	bne.n	8014932 <sys_mbox_new+0x32>
    return ERR_MEM;
 801492c:	f04f 33ff 	mov.w	r3, #4294967295
 8014930:	e000      	b.n	8014934 <sys_mbox_new+0x34>

  return ERR_OK;
 8014932:	2300      	movs	r3, #0
}
 8014934:	4618      	mov	r0, r3
 8014936:	3710      	adds	r7, #16
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}

0801493c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b084      	sub	sp, #16
 8014940:	af00      	add	r7, sp, #0
 8014942:	6078      	str	r0, [r7, #4]
 8014944:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	6839      	ldr	r1, [r7, #0]
 801494c:	2200      	movs	r2, #0
 801494e:	4618      	mov	r0, r3
 8014950:	f7f2 ffb2 	bl	80078b8 <osMessagePut>
 8014954:	4603      	mov	r3, r0
 8014956:	2b00      	cmp	r3, #0
 8014958:	d102      	bne.n	8014960 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801495a:	2300      	movs	r3, #0
 801495c:	73fb      	strb	r3, [r7, #15]
 801495e:	e001      	b.n	8014964 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014960:	23ff      	movs	r3, #255	; 0xff
 8014962:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014964:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014968:	4618      	mov	r0, r3
 801496a:	3710      	adds	r7, #16
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}

08014970 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b08c      	sub	sp, #48	; 0x30
 8014974:	af00      	add	r7, sp, #0
 8014976:	61f8      	str	r0, [r7, #28]
 8014978:	61b9      	str	r1, [r7, #24]
 801497a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801497c:	f7f2 fdfb 	bl	8007576 <osKernelSysTick>
 8014980:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014982:	697b      	ldr	r3, [r7, #20]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d017      	beq.n	80149b8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014988:	69fb      	ldr	r3, [r7, #28]
 801498a:	6819      	ldr	r1, [r3, #0]
 801498c:	f107 0320 	add.w	r3, r7, #32
 8014990:	697a      	ldr	r2, [r7, #20]
 8014992:	4618      	mov	r0, r3
 8014994:	f7f2 ffd0 	bl	8007938 <osMessageGet>

    if(event.status == osEventMessage)
 8014998:	6a3b      	ldr	r3, [r7, #32]
 801499a:	2b10      	cmp	r3, #16
 801499c:	d109      	bne.n	80149b2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a0:	461a      	mov	r2, r3
 80149a2:	69bb      	ldr	r3, [r7, #24]
 80149a4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80149a6:	f7f2 fde6 	bl	8007576 <osKernelSysTick>
 80149aa:	4602      	mov	r2, r0
 80149ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149ae:	1ad3      	subs	r3, r2, r3
 80149b0:	e019      	b.n	80149e6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80149b2:	f04f 33ff 	mov.w	r3, #4294967295
 80149b6:	e016      	b.n	80149e6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80149b8:	69fb      	ldr	r3, [r7, #28]
 80149ba:	6819      	ldr	r1, [r3, #0]
 80149bc:	463b      	mov	r3, r7
 80149be:	f04f 32ff 	mov.w	r2, #4294967295
 80149c2:	4618      	mov	r0, r3
 80149c4:	f7f2 ffb8 	bl	8007938 <osMessageGet>
 80149c8:	f107 0320 	add.w	r3, r7, #32
 80149cc:	463a      	mov	r2, r7
 80149ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80149d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80149d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d6:	461a      	mov	r2, r3
 80149d8:	69bb      	ldr	r3, [r7, #24]
 80149da:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80149dc:	f7f2 fdcb 	bl	8007576 <osKernelSysTick>
 80149e0:	4602      	mov	r2, r0
 80149e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149e4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80149e6:	4618      	mov	r0, r3
 80149e8:	3730      	adds	r7, #48	; 0x30
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bd80      	pop	{r7, pc}

080149ee <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80149ee:	b480      	push	{r7}
 80149f0:	b083      	sub	sp, #12
 80149f2:	af00      	add	r7, sp, #0
 80149f4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d101      	bne.n	8014a02 <sys_mbox_valid+0x14>
    return 0;
 80149fe:	2300      	movs	r3, #0
 8014a00:	e000      	b.n	8014a04 <sys_mbox_valid+0x16>
  else
    return 1;
 8014a02:	2301      	movs	r3, #1
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	370c      	adds	r7, #12
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0e:	4770      	bx	lr

08014a10 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8014a14:	4803      	ldr	r0, [pc, #12]	; (8014a24 <sys_init+0x14>)
 8014a16:	f7f2 fe05 	bl	8007624 <osMutexCreate>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	4a02      	ldr	r2, [pc, #8]	; (8014a28 <sys_init+0x18>)
 8014a1e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014a20:	bf00      	nop
 8014a22:	bd80      	pop	{r7, pc}
 8014a24:	0801c784 	.word	0x0801c784
 8014a28:	2000cfe8 	.word	0x2000cfe8

08014a2c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b084      	sub	sp, #16
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8014a34:	2300      	movs	r3, #0
 8014a36:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014a38:	f107 030c 	add.w	r3, r7, #12
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	f7f2 fdf1 	bl	8007624 <osMutexCreate>
 8014a42:	4602      	mov	r2, r0
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d102      	bne.n	8014a56 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014a50:	f04f 33ff 	mov.w	r3, #4294967295
 8014a54:	e000      	b.n	8014a58 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014a56:	2300      	movs	r3, #0
}
 8014a58:	4618      	mov	r0, r3
 8014a5a:	3710      	adds	r7, #16
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}

08014a60 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b082      	sub	sp, #8
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7f2 fde3 	bl	800763c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014a76:	bf00      	nop
 8014a78:	3708      	adds	r7, #8
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}

08014a7e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014a7e:	b580      	push	{r7, lr}
 8014a80:	b082      	sub	sp, #8
 8014a82:	af00      	add	r7, sp, #0
 8014a84:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7f2 fe24 	bl	80076d8 <osMutexRelease>
}
 8014a90:	bf00      	nop
 8014a92:	3708      	adds	r7, #8
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd80      	pop	{r7, pc}

08014a98 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b08a      	sub	sp, #40	; 0x28
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	60f8      	str	r0, [r7, #12]
 8014aa0:	60b9      	str	r1, [r7, #8]
 8014aa2:	607a      	str	r2, [r7, #4]
 8014aa4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	617b      	str	r3, [r7, #20]
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	61bb      	str	r3, [r7, #24]
 8014aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ab0:	b21b      	sxth	r3, r3
 8014ab2:	83bb      	strh	r3, [r7, #28]
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	623b      	str	r3, [r7, #32]
 8014ab8:	683b      	ldr	r3, [r7, #0]
 8014aba:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014abc:	f107 0314 	add.w	r3, r7, #20
 8014ac0:	6879      	ldr	r1, [r7, #4]
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f7f2 fd67 	bl	8007596 <osThreadCreate>
 8014ac8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8014aca:	4618      	mov	r0, r3
 8014acc:	3728      	adds	r7, #40	; 0x28
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}
	...

08014ad4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014ad8:	4b04      	ldr	r3, [pc, #16]	; (8014aec <sys_arch_protect+0x18>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	f04f 31ff 	mov.w	r1, #4294967295
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f7f2 fdab 	bl	800763c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8014ae6:	2301      	movs	r3, #1
}
 8014ae8:	4618      	mov	r0, r3
 8014aea:	bd80      	pop	{r7, pc}
 8014aec:	2000cfe8 	.word	0x2000cfe8

08014af0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014af8:	4b04      	ldr	r3, [pc, #16]	; (8014b0c <sys_arch_unprotect+0x1c>)
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	4618      	mov	r0, r3
 8014afe:	f7f2 fdeb 	bl	80076d8 <osMutexRelease>
}
 8014b02:	bf00      	nop
 8014b04:	3708      	adds	r7, #8
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}
 8014b0a:	bf00      	nop
 8014b0c:	2000cfe8 	.word	0x2000cfe8

08014b10 <atof>:
 8014b10:	2100      	movs	r1, #0
 8014b12:	f001 bc4f 	b.w	80163b4 <strtod>
	...

08014b18 <__errno>:
 8014b18:	4b01      	ldr	r3, [pc, #4]	; (8014b20 <__errno+0x8>)
 8014b1a:	6818      	ldr	r0, [r3, #0]
 8014b1c:	4770      	bx	lr
 8014b1e:	bf00      	nop
 8014b20:	2000003c 	.word	0x2000003c

08014b24 <__libc_init_array>:
 8014b24:	b570      	push	{r4, r5, r6, lr}
 8014b26:	4d0d      	ldr	r5, [pc, #52]	; (8014b5c <__libc_init_array+0x38>)
 8014b28:	4c0d      	ldr	r4, [pc, #52]	; (8014b60 <__libc_init_array+0x3c>)
 8014b2a:	1b64      	subs	r4, r4, r5
 8014b2c:	10a4      	asrs	r4, r4, #2
 8014b2e:	2600      	movs	r6, #0
 8014b30:	42a6      	cmp	r6, r4
 8014b32:	d109      	bne.n	8014b48 <__libc_init_array+0x24>
 8014b34:	4d0b      	ldr	r5, [pc, #44]	; (8014b64 <__libc_init_array+0x40>)
 8014b36:	4c0c      	ldr	r4, [pc, #48]	; (8014b68 <__libc_init_array+0x44>)
 8014b38:	f004 fa78 	bl	801902c <_init>
 8014b3c:	1b64      	subs	r4, r4, r5
 8014b3e:	10a4      	asrs	r4, r4, #2
 8014b40:	2600      	movs	r6, #0
 8014b42:	42a6      	cmp	r6, r4
 8014b44:	d105      	bne.n	8014b52 <__libc_init_array+0x2e>
 8014b46:	bd70      	pop	{r4, r5, r6, pc}
 8014b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b4c:	4798      	blx	r3
 8014b4e:	3601      	adds	r6, #1
 8014b50:	e7ee      	b.n	8014b30 <__libc_init_array+0xc>
 8014b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b56:	4798      	blx	r3
 8014b58:	3601      	adds	r6, #1
 8014b5a:	e7f2      	b.n	8014b42 <__libc_init_array+0x1e>
 8014b5c:	0801cd08 	.word	0x0801cd08
 8014b60:	0801cd08 	.word	0x0801cd08
 8014b64:	0801cd08 	.word	0x0801cd08
 8014b68:	0801cd0c 	.word	0x0801cd0c

08014b6c <malloc>:
 8014b6c:	4b02      	ldr	r3, [pc, #8]	; (8014b78 <malloc+0xc>)
 8014b6e:	4601      	mov	r1, r0
 8014b70:	6818      	ldr	r0, [r3, #0]
 8014b72:	f000 b899 	b.w	8014ca8 <_malloc_r>
 8014b76:	bf00      	nop
 8014b78:	2000003c 	.word	0x2000003c

08014b7c <free>:
 8014b7c:	4b02      	ldr	r3, [pc, #8]	; (8014b88 <free+0xc>)
 8014b7e:	4601      	mov	r1, r0
 8014b80:	6818      	ldr	r0, [r3, #0]
 8014b82:	f000 b841 	b.w	8014c08 <_free_r>
 8014b86:	bf00      	nop
 8014b88:	2000003c 	.word	0x2000003c

08014b8c <memcmp>:
 8014b8c:	b530      	push	{r4, r5, lr}
 8014b8e:	3901      	subs	r1, #1
 8014b90:	2400      	movs	r4, #0
 8014b92:	42a2      	cmp	r2, r4
 8014b94:	d101      	bne.n	8014b9a <memcmp+0xe>
 8014b96:	2000      	movs	r0, #0
 8014b98:	e005      	b.n	8014ba6 <memcmp+0x1a>
 8014b9a:	5d03      	ldrb	r3, [r0, r4]
 8014b9c:	3401      	adds	r4, #1
 8014b9e:	5d0d      	ldrb	r5, [r1, r4]
 8014ba0:	42ab      	cmp	r3, r5
 8014ba2:	d0f6      	beq.n	8014b92 <memcmp+0x6>
 8014ba4:	1b58      	subs	r0, r3, r5
 8014ba6:	bd30      	pop	{r4, r5, pc}

08014ba8 <memcpy>:
 8014ba8:	440a      	add	r2, r1
 8014baa:	4291      	cmp	r1, r2
 8014bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8014bb0:	d100      	bne.n	8014bb4 <memcpy+0xc>
 8014bb2:	4770      	bx	lr
 8014bb4:	b510      	push	{r4, lr}
 8014bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014bbe:	4291      	cmp	r1, r2
 8014bc0:	d1f9      	bne.n	8014bb6 <memcpy+0xe>
 8014bc2:	bd10      	pop	{r4, pc}

08014bc4 <memmove>:
 8014bc4:	4288      	cmp	r0, r1
 8014bc6:	b510      	push	{r4, lr}
 8014bc8:	eb01 0402 	add.w	r4, r1, r2
 8014bcc:	d902      	bls.n	8014bd4 <memmove+0x10>
 8014bce:	4284      	cmp	r4, r0
 8014bd0:	4623      	mov	r3, r4
 8014bd2:	d807      	bhi.n	8014be4 <memmove+0x20>
 8014bd4:	1e43      	subs	r3, r0, #1
 8014bd6:	42a1      	cmp	r1, r4
 8014bd8:	d008      	beq.n	8014bec <memmove+0x28>
 8014bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014be2:	e7f8      	b.n	8014bd6 <memmove+0x12>
 8014be4:	4402      	add	r2, r0
 8014be6:	4601      	mov	r1, r0
 8014be8:	428a      	cmp	r2, r1
 8014bea:	d100      	bne.n	8014bee <memmove+0x2a>
 8014bec:	bd10      	pop	{r4, pc}
 8014bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014bf6:	e7f7      	b.n	8014be8 <memmove+0x24>

08014bf8 <memset>:
 8014bf8:	4402      	add	r2, r0
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	4293      	cmp	r3, r2
 8014bfe:	d100      	bne.n	8014c02 <memset+0xa>
 8014c00:	4770      	bx	lr
 8014c02:	f803 1b01 	strb.w	r1, [r3], #1
 8014c06:	e7f9      	b.n	8014bfc <memset+0x4>

08014c08 <_free_r>:
 8014c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c0a:	2900      	cmp	r1, #0
 8014c0c:	d048      	beq.n	8014ca0 <_free_r+0x98>
 8014c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c12:	9001      	str	r0, [sp, #4]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	f1a1 0404 	sub.w	r4, r1, #4
 8014c1a:	bfb8      	it	lt
 8014c1c:	18e4      	addlt	r4, r4, r3
 8014c1e:	f002 ff57 	bl	8017ad0 <__malloc_lock>
 8014c22:	4a20      	ldr	r2, [pc, #128]	; (8014ca4 <_free_r+0x9c>)
 8014c24:	9801      	ldr	r0, [sp, #4]
 8014c26:	6813      	ldr	r3, [r2, #0]
 8014c28:	4615      	mov	r5, r2
 8014c2a:	b933      	cbnz	r3, 8014c3a <_free_r+0x32>
 8014c2c:	6063      	str	r3, [r4, #4]
 8014c2e:	6014      	str	r4, [r2, #0]
 8014c30:	b003      	add	sp, #12
 8014c32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c36:	f002 bf51 	b.w	8017adc <__malloc_unlock>
 8014c3a:	42a3      	cmp	r3, r4
 8014c3c:	d90b      	bls.n	8014c56 <_free_r+0x4e>
 8014c3e:	6821      	ldr	r1, [r4, #0]
 8014c40:	1862      	adds	r2, r4, r1
 8014c42:	4293      	cmp	r3, r2
 8014c44:	bf04      	itt	eq
 8014c46:	681a      	ldreq	r2, [r3, #0]
 8014c48:	685b      	ldreq	r3, [r3, #4]
 8014c4a:	6063      	str	r3, [r4, #4]
 8014c4c:	bf04      	itt	eq
 8014c4e:	1852      	addeq	r2, r2, r1
 8014c50:	6022      	streq	r2, [r4, #0]
 8014c52:	602c      	str	r4, [r5, #0]
 8014c54:	e7ec      	b.n	8014c30 <_free_r+0x28>
 8014c56:	461a      	mov	r2, r3
 8014c58:	685b      	ldr	r3, [r3, #4]
 8014c5a:	b10b      	cbz	r3, 8014c60 <_free_r+0x58>
 8014c5c:	42a3      	cmp	r3, r4
 8014c5e:	d9fa      	bls.n	8014c56 <_free_r+0x4e>
 8014c60:	6811      	ldr	r1, [r2, #0]
 8014c62:	1855      	adds	r5, r2, r1
 8014c64:	42a5      	cmp	r5, r4
 8014c66:	d10b      	bne.n	8014c80 <_free_r+0x78>
 8014c68:	6824      	ldr	r4, [r4, #0]
 8014c6a:	4421      	add	r1, r4
 8014c6c:	1854      	adds	r4, r2, r1
 8014c6e:	42a3      	cmp	r3, r4
 8014c70:	6011      	str	r1, [r2, #0]
 8014c72:	d1dd      	bne.n	8014c30 <_free_r+0x28>
 8014c74:	681c      	ldr	r4, [r3, #0]
 8014c76:	685b      	ldr	r3, [r3, #4]
 8014c78:	6053      	str	r3, [r2, #4]
 8014c7a:	4421      	add	r1, r4
 8014c7c:	6011      	str	r1, [r2, #0]
 8014c7e:	e7d7      	b.n	8014c30 <_free_r+0x28>
 8014c80:	d902      	bls.n	8014c88 <_free_r+0x80>
 8014c82:	230c      	movs	r3, #12
 8014c84:	6003      	str	r3, [r0, #0]
 8014c86:	e7d3      	b.n	8014c30 <_free_r+0x28>
 8014c88:	6825      	ldr	r5, [r4, #0]
 8014c8a:	1961      	adds	r1, r4, r5
 8014c8c:	428b      	cmp	r3, r1
 8014c8e:	bf04      	itt	eq
 8014c90:	6819      	ldreq	r1, [r3, #0]
 8014c92:	685b      	ldreq	r3, [r3, #4]
 8014c94:	6063      	str	r3, [r4, #4]
 8014c96:	bf04      	itt	eq
 8014c98:	1949      	addeq	r1, r1, r5
 8014c9a:	6021      	streq	r1, [r4, #0]
 8014c9c:	6054      	str	r4, [r2, #4]
 8014c9e:	e7c7      	b.n	8014c30 <_free_r+0x28>
 8014ca0:	b003      	add	sp, #12
 8014ca2:	bd30      	pop	{r4, r5, pc}
 8014ca4:	20006910 	.word	0x20006910

08014ca8 <_malloc_r>:
 8014ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014caa:	1ccd      	adds	r5, r1, #3
 8014cac:	f025 0503 	bic.w	r5, r5, #3
 8014cb0:	3508      	adds	r5, #8
 8014cb2:	2d0c      	cmp	r5, #12
 8014cb4:	bf38      	it	cc
 8014cb6:	250c      	movcc	r5, #12
 8014cb8:	2d00      	cmp	r5, #0
 8014cba:	4606      	mov	r6, r0
 8014cbc:	db01      	blt.n	8014cc2 <_malloc_r+0x1a>
 8014cbe:	42a9      	cmp	r1, r5
 8014cc0:	d903      	bls.n	8014cca <_malloc_r+0x22>
 8014cc2:	230c      	movs	r3, #12
 8014cc4:	6033      	str	r3, [r6, #0]
 8014cc6:	2000      	movs	r0, #0
 8014cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cca:	f002 ff01 	bl	8017ad0 <__malloc_lock>
 8014cce:	4921      	ldr	r1, [pc, #132]	; (8014d54 <_malloc_r+0xac>)
 8014cd0:	680a      	ldr	r2, [r1, #0]
 8014cd2:	4614      	mov	r4, r2
 8014cd4:	b99c      	cbnz	r4, 8014cfe <_malloc_r+0x56>
 8014cd6:	4f20      	ldr	r7, [pc, #128]	; (8014d58 <_malloc_r+0xb0>)
 8014cd8:	683b      	ldr	r3, [r7, #0]
 8014cda:	b923      	cbnz	r3, 8014ce6 <_malloc_r+0x3e>
 8014cdc:	4621      	mov	r1, r4
 8014cde:	4630      	mov	r0, r6
 8014ce0:	f000 fcfe 	bl	80156e0 <_sbrk_r>
 8014ce4:	6038      	str	r0, [r7, #0]
 8014ce6:	4629      	mov	r1, r5
 8014ce8:	4630      	mov	r0, r6
 8014cea:	f000 fcf9 	bl	80156e0 <_sbrk_r>
 8014cee:	1c43      	adds	r3, r0, #1
 8014cf0:	d123      	bne.n	8014d3a <_malloc_r+0x92>
 8014cf2:	230c      	movs	r3, #12
 8014cf4:	6033      	str	r3, [r6, #0]
 8014cf6:	4630      	mov	r0, r6
 8014cf8:	f002 fef0 	bl	8017adc <__malloc_unlock>
 8014cfc:	e7e3      	b.n	8014cc6 <_malloc_r+0x1e>
 8014cfe:	6823      	ldr	r3, [r4, #0]
 8014d00:	1b5b      	subs	r3, r3, r5
 8014d02:	d417      	bmi.n	8014d34 <_malloc_r+0x8c>
 8014d04:	2b0b      	cmp	r3, #11
 8014d06:	d903      	bls.n	8014d10 <_malloc_r+0x68>
 8014d08:	6023      	str	r3, [r4, #0]
 8014d0a:	441c      	add	r4, r3
 8014d0c:	6025      	str	r5, [r4, #0]
 8014d0e:	e004      	b.n	8014d1a <_malloc_r+0x72>
 8014d10:	6863      	ldr	r3, [r4, #4]
 8014d12:	42a2      	cmp	r2, r4
 8014d14:	bf0c      	ite	eq
 8014d16:	600b      	streq	r3, [r1, #0]
 8014d18:	6053      	strne	r3, [r2, #4]
 8014d1a:	4630      	mov	r0, r6
 8014d1c:	f002 fede 	bl	8017adc <__malloc_unlock>
 8014d20:	f104 000b 	add.w	r0, r4, #11
 8014d24:	1d23      	adds	r3, r4, #4
 8014d26:	f020 0007 	bic.w	r0, r0, #7
 8014d2a:	1ac2      	subs	r2, r0, r3
 8014d2c:	d0cc      	beq.n	8014cc8 <_malloc_r+0x20>
 8014d2e:	1a1b      	subs	r3, r3, r0
 8014d30:	50a3      	str	r3, [r4, r2]
 8014d32:	e7c9      	b.n	8014cc8 <_malloc_r+0x20>
 8014d34:	4622      	mov	r2, r4
 8014d36:	6864      	ldr	r4, [r4, #4]
 8014d38:	e7cc      	b.n	8014cd4 <_malloc_r+0x2c>
 8014d3a:	1cc4      	adds	r4, r0, #3
 8014d3c:	f024 0403 	bic.w	r4, r4, #3
 8014d40:	42a0      	cmp	r0, r4
 8014d42:	d0e3      	beq.n	8014d0c <_malloc_r+0x64>
 8014d44:	1a21      	subs	r1, r4, r0
 8014d46:	4630      	mov	r0, r6
 8014d48:	f000 fcca 	bl	80156e0 <_sbrk_r>
 8014d4c:	3001      	adds	r0, #1
 8014d4e:	d1dd      	bne.n	8014d0c <_malloc_r+0x64>
 8014d50:	e7cf      	b.n	8014cf2 <_malloc_r+0x4a>
 8014d52:	bf00      	nop
 8014d54:	20006910 	.word	0x20006910
 8014d58:	20006914 	.word	0x20006914

08014d5c <__cvt>:
 8014d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014d60:	ec55 4b10 	vmov	r4, r5, d0
 8014d64:	2d00      	cmp	r5, #0
 8014d66:	460e      	mov	r6, r1
 8014d68:	4619      	mov	r1, r3
 8014d6a:	462b      	mov	r3, r5
 8014d6c:	bfbb      	ittet	lt
 8014d6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014d72:	461d      	movlt	r5, r3
 8014d74:	2300      	movge	r3, #0
 8014d76:	232d      	movlt	r3, #45	; 0x2d
 8014d78:	700b      	strb	r3, [r1, #0]
 8014d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014d80:	4691      	mov	r9, r2
 8014d82:	f023 0820 	bic.w	r8, r3, #32
 8014d86:	bfbc      	itt	lt
 8014d88:	4622      	movlt	r2, r4
 8014d8a:	4614      	movlt	r4, r2
 8014d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014d90:	d005      	beq.n	8014d9e <__cvt+0x42>
 8014d92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014d96:	d100      	bne.n	8014d9a <__cvt+0x3e>
 8014d98:	3601      	adds	r6, #1
 8014d9a:	2102      	movs	r1, #2
 8014d9c:	e000      	b.n	8014da0 <__cvt+0x44>
 8014d9e:	2103      	movs	r1, #3
 8014da0:	ab03      	add	r3, sp, #12
 8014da2:	9301      	str	r3, [sp, #4]
 8014da4:	ab02      	add	r3, sp, #8
 8014da6:	9300      	str	r3, [sp, #0]
 8014da8:	ec45 4b10 	vmov	d0, r4, r5
 8014dac:	4653      	mov	r3, sl
 8014dae:	4632      	mov	r2, r6
 8014db0:	f001 fc12 	bl	80165d8 <_dtoa_r>
 8014db4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014db8:	4607      	mov	r7, r0
 8014dba:	d102      	bne.n	8014dc2 <__cvt+0x66>
 8014dbc:	f019 0f01 	tst.w	r9, #1
 8014dc0:	d022      	beq.n	8014e08 <__cvt+0xac>
 8014dc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014dc6:	eb07 0906 	add.w	r9, r7, r6
 8014dca:	d110      	bne.n	8014dee <__cvt+0x92>
 8014dcc:	783b      	ldrb	r3, [r7, #0]
 8014dce:	2b30      	cmp	r3, #48	; 0x30
 8014dd0:	d10a      	bne.n	8014de8 <__cvt+0x8c>
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	4620      	mov	r0, r4
 8014dd8:	4629      	mov	r1, r5
 8014dda:	f7eb fe95 	bl	8000b08 <__aeabi_dcmpeq>
 8014dde:	b918      	cbnz	r0, 8014de8 <__cvt+0x8c>
 8014de0:	f1c6 0601 	rsb	r6, r6, #1
 8014de4:	f8ca 6000 	str.w	r6, [sl]
 8014de8:	f8da 3000 	ldr.w	r3, [sl]
 8014dec:	4499      	add	r9, r3
 8014dee:	2200      	movs	r2, #0
 8014df0:	2300      	movs	r3, #0
 8014df2:	4620      	mov	r0, r4
 8014df4:	4629      	mov	r1, r5
 8014df6:	f7eb fe87 	bl	8000b08 <__aeabi_dcmpeq>
 8014dfa:	b108      	cbz	r0, 8014e00 <__cvt+0xa4>
 8014dfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8014e00:	2230      	movs	r2, #48	; 0x30
 8014e02:	9b03      	ldr	r3, [sp, #12]
 8014e04:	454b      	cmp	r3, r9
 8014e06:	d307      	bcc.n	8014e18 <__cvt+0xbc>
 8014e08:	9b03      	ldr	r3, [sp, #12]
 8014e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014e0c:	1bdb      	subs	r3, r3, r7
 8014e0e:	4638      	mov	r0, r7
 8014e10:	6013      	str	r3, [r2, #0]
 8014e12:	b004      	add	sp, #16
 8014e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e18:	1c59      	adds	r1, r3, #1
 8014e1a:	9103      	str	r1, [sp, #12]
 8014e1c:	701a      	strb	r2, [r3, #0]
 8014e1e:	e7f0      	b.n	8014e02 <__cvt+0xa6>

08014e20 <__exponent>:
 8014e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e22:	4603      	mov	r3, r0
 8014e24:	2900      	cmp	r1, #0
 8014e26:	bfb8      	it	lt
 8014e28:	4249      	neglt	r1, r1
 8014e2a:	f803 2b02 	strb.w	r2, [r3], #2
 8014e2e:	bfb4      	ite	lt
 8014e30:	222d      	movlt	r2, #45	; 0x2d
 8014e32:	222b      	movge	r2, #43	; 0x2b
 8014e34:	2909      	cmp	r1, #9
 8014e36:	7042      	strb	r2, [r0, #1]
 8014e38:	dd2a      	ble.n	8014e90 <__exponent+0x70>
 8014e3a:	f10d 0407 	add.w	r4, sp, #7
 8014e3e:	46a4      	mov	ip, r4
 8014e40:	270a      	movs	r7, #10
 8014e42:	46a6      	mov	lr, r4
 8014e44:	460a      	mov	r2, r1
 8014e46:	fb91 f6f7 	sdiv	r6, r1, r7
 8014e4a:	fb07 1516 	mls	r5, r7, r6, r1
 8014e4e:	3530      	adds	r5, #48	; 0x30
 8014e50:	2a63      	cmp	r2, #99	; 0x63
 8014e52:	f104 34ff 	add.w	r4, r4, #4294967295
 8014e56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014e5a:	4631      	mov	r1, r6
 8014e5c:	dcf1      	bgt.n	8014e42 <__exponent+0x22>
 8014e5e:	3130      	adds	r1, #48	; 0x30
 8014e60:	f1ae 0502 	sub.w	r5, lr, #2
 8014e64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014e68:	1c44      	adds	r4, r0, #1
 8014e6a:	4629      	mov	r1, r5
 8014e6c:	4561      	cmp	r1, ip
 8014e6e:	d30a      	bcc.n	8014e86 <__exponent+0x66>
 8014e70:	f10d 0209 	add.w	r2, sp, #9
 8014e74:	eba2 020e 	sub.w	r2, r2, lr
 8014e78:	4565      	cmp	r5, ip
 8014e7a:	bf88      	it	hi
 8014e7c:	2200      	movhi	r2, #0
 8014e7e:	4413      	add	r3, r2
 8014e80:	1a18      	subs	r0, r3, r0
 8014e82:	b003      	add	sp, #12
 8014e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014e8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014e8e:	e7ed      	b.n	8014e6c <__exponent+0x4c>
 8014e90:	2330      	movs	r3, #48	; 0x30
 8014e92:	3130      	adds	r1, #48	; 0x30
 8014e94:	7083      	strb	r3, [r0, #2]
 8014e96:	70c1      	strb	r1, [r0, #3]
 8014e98:	1d03      	adds	r3, r0, #4
 8014e9a:	e7f1      	b.n	8014e80 <__exponent+0x60>

08014e9c <_printf_float>:
 8014e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ea0:	ed2d 8b02 	vpush	{d8}
 8014ea4:	b08d      	sub	sp, #52	; 0x34
 8014ea6:	460c      	mov	r4, r1
 8014ea8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014eac:	4616      	mov	r6, r2
 8014eae:	461f      	mov	r7, r3
 8014eb0:	4605      	mov	r5, r0
 8014eb2:	f002 fdf3 	bl	8017a9c <_localeconv_r>
 8014eb6:	f8d0 a000 	ldr.w	sl, [r0]
 8014eba:	4650      	mov	r0, sl
 8014ebc:	f7eb f9a8 	bl	8000210 <strlen>
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8014ec4:	6823      	ldr	r3, [r4, #0]
 8014ec6:	9305      	str	r3, [sp, #20]
 8014ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8014ecc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014ed0:	3307      	adds	r3, #7
 8014ed2:	f023 0307 	bic.w	r3, r3, #7
 8014ed6:	f103 0208 	add.w	r2, r3, #8
 8014eda:	f8c8 2000 	str.w	r2, [r8]
 8014ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ee2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014ee6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014eea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014eee:	9307      	str	r3, [sp, #28]
 8014ef0:	f8cd 8018 	str.w	r8, [sp, #24]
 8014ef4:	ee08 0a10 	vmov	s16, r0
 8014ef8:	4b9f      	ldr	r3, [pc, #636]	; (8015178 <_printf_float+0x2dc>)
 8014efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014efe:	f04f 32ff 	mov.w	r2, #4294967295
 8014f02:	f7eb fe33 	bl	8000b6c <__aeabi_dcmpun>
 8014f06:	bb88      	cbnz	r0, 8014f6c <_printf_float+0xd0>
 8014f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014f0c:	4b9a      	ldr	r3, [pc, #616]	; (8015178 <_printf_float+0x2dc>)
 8014f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8014f12:	f7eb fe0d 	bl	8000b30 <__aeabi_dcmple>
 8014f16:	bb48      	cbnz	r0, 8014f6c <_printf_float+0xd0>
 8014f18:	2200      	movs	r2, #0
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	4640      	mov	r0, r8
 8014f1e:	4649      	mov	r1, r9
 8014f20:	f7eb fdfc 	bl	8000b1c <__aeabi_dcmplt>
 8014f24:	b110      	cbz	r0, 8014f2c <_printf_float+0x90>
 8014f26:	232d      	movs	r3, #45	; 0x2d
 8014f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f2c:	4b93      	ldr	r3, [pc, #588]	; (801517c <_printf_float+0x2e0>)
 8014f2e:	4894      	ldr	r0, [pc, #592]	; (8015180 <_printf_float+0x2e4>)
 8014f30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014f34:	bf94      	ite	ls
 8014f36:	4698      	movls	r8, r3
 8014f38:	4680      	movhi	r8, r0
 8014f3a:	2303      	movs	r3, #3
 8014f3c:	6123      	str	r3, [r4, #16]
 8014f3e:	9b05      	ldr	r3, [sp, #20]
 8014f40:	f023 0204 	bic.w	r2, r3, #4
 8014f44:	6022      	str	r2, [r4, #0]
 8014f46:	f04f 0900 	mov.w	r9, #0
 8014f4a:	9700      	str	r7, [sp, #0]
 8014f4c:	4633      	mov	r3, r6
 8014f4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8014f50:	4621      	mov	r1, r4
 8014f52:	4628      	mov	r0, r5
 8014f54:	f000 f9d8 	bl	8015308 <_printf_common>
 8014f58:	3001      	adds	r0, #1
 8014f5a:	f040 8090 	bne.w	801507e <_printf_float+0x1e2>
 8014f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8014f62:	b00d      	add	sp, #52	; 0x34
 8014f64:	ecbd 8b02 	vpop	{d8}
 8014f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f6c:	4642      	mov	r2, r8
 8014f6e:	464b      	mov	r3, r9
 8014f70:	4640      	mov	r0, r8
 8014f72:	4649      	mov	r1, r9
 8014f74:	f7eb fdfa 	bl	8000b6c <__aeabi_dcmpun>
 8014f78:	b140      	cbz	r0, 8014f8c <_printf_float+0xf0>
 8014f7a:	464b      	mov	r3, r9
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	bfbc      	itt	lt
 8014f80:	232d      	movlt	r3, #45	; 0x2d
 8014f82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014f86:	487f      	ldr	r0, [pc, #508]	; (8015184 <_printf_float+0x2e8>)
 8014f88:	4b7f      	ldr	r3, [pc, #508]	; (8015188 <_printf_float+0x2ec>)
 8014f8a:	e7d1      	b.n	8014f30 <_printf_float+0x94>
 8014f8c:	6863      	ldr	r3, [r4, #4]
 8014f8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014f92:	9206      	str	r2, [sp, #24]
 8014f94:	1c5a      	adds	r2, r3, #1
 8014f96:	d13f      	bne.n	8015018 <_printf_float+0x17c>
 8014f98:	2306      	movs	r3, #6
 8014f9a:	6063      	str	r3, [r4, #4]
 8014f9c:	9b05      	ldr	r3, [sp, #20]
 8014f9e:	6861      	ldr	r1, [r4, #4]
 8014fa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	9303      	str	r3, [sp, #12]
 8014fa8:	ab0a      	add	r3, sp, #40	; 0x28
 8014faa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014fae:	ab09      	add	r3, sp, #36	; 0x24
 8014fb0:	ec49 8b10 	vmov	d0, r8, r9
 8014fb4:	9300      	str	r3, [sp, #0]
 8014fb6:	6022      	str	r2, [r4, #0]
 8014fb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014fbc:	4628      	mov	r0, r5
 8014fbe:	f7ff fecd 	bl	8014d5c <__cvt>
 8014fc2:	9b06      	ldr	r3, [sp, #24]
 8014fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fc6:	2b47      	cmp	r3, #71	; 0x47
 8014fc8:	4680      	mov	r8, r0
 8014fca:	d108      	bne.n	8014fde <_printf_float+0x142>
 8014fcc:	1cc8      	adds	r0, r1, #3
 8014fce:	db02      	blt.n	8014fd6 <_printf_float+0x13a>
 8014fd0:	6863      	ldr	r3, [r4, #4]
 8014fd2:	4299      	cmp	r1, r3
 8014fd4:	dd41      	ble.n	801505a <_printf_float+0x1be>
 8014fd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8014fda:	fa5f fb8b 	uxtb.w	fp, fp
 8014fde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014fe2:	d820      	bhi.n	8015026 <_printf_float+0x18a>
 8014fe4:	3901      	subs	r1, #1
 8014fe6:	465a      	mov	r2, fp
 8014fe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014fec:	9109      	str	r1, [sp, #36]	; 0x24
 8014fee:	f7ff ff17 	bl	8014e20 <__exponent>
 8014ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014ff4:	1813      	adds	r3, r2, r0
 8014ff6:	2a01      	cmp	r2, #1
 8014ff8:	4681      	mov	r9, r0
 8014ffa:	6123      	str	r3, [r4, #16]
 8014ffc:	dc02      	bgt.n	8015004 <_printf_float+0x168>
 8014ffe:	6822      	ldr	r2, [r4, #0]
 8015000:	07d2      	lsls	r2, r2, #31
 8015002:	d501      	bpl.n	8015008 <_printf_float+0x16c>
 8015004:	3301      	adds	r3, #1
 8015006:	6123      	str	r3, [r4, #16]
 8015008:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801500c:	2b00      	cmp	r3, #0
 801500e:	d09c      	beq.n	8014f4a <_printf_float+0xae>
 8015010:	232d      	movs	r3, #45	; 0x2d
 8015012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015016:	e798      	b.n	8014f4a <_printf_float+0xae>
 8015018:	9a06      	ldr	r2, [sp, #24]
 801501a:	2a47      	cmp	r2, #71	; 0x47
 801501c:	d1be      	bne.n	8014f9c <_printf_float+0x100>
 801501e:	2b00      	cmp	r3, #0
 8015020:	d1bc      	bne.n	8014f9c <_printf_float+0x100>
 8015022:	2301      	movs	r3, #1
 8015024:	e7b9      	b.n	8014f9a <_printf_float+0xfe>
 8015026:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801502a:	d118      	bne.n	801505e <_printf_float+0x1c2>
 801502c:	2900      	cmp	r1, #0
 801502e:	6863      	ldr	r3, [r4, #4]
 8015030:	dd0b      	ble.n	801504a <_printf_float+0x1ae>
 8015032:	6121      	str	r1, [r4, #16]
 8015034:	b913      	cbnz	r3, 801503c <_printf_float+0x1a0>
 8015036:	6822      	ldr	r2, [r4, #0]
 8015038:	07d0      	lsls	r0, r2, #31
 801503a:	d502      	bpl.n	8015042 <_printf_float+0x1a6>
 801503c:	3301      	adds	r3, #1
 801503e:	440b      	add	r3, r1
 8015040:	6123      	str	r3, [r4, #16]
 8015042:	65a1      	str	r1, [r4, #88]	; 0x58
 8015044:	f04f 0900 	mov.w	r9, #0
 8015048:	e7de      	b.n	8015008 <_printf_float+0x16c>
 801504a:	b913      	cbnz	r3, 8015052 <_printf_float+0x1b6>
 801504c:	6822      	ldr	r2, [r4, #0]
 801504e:	07d2      	lsls	r2, r2, #31
 8015050:	d501      	bpl.n	8015056 <_printf_float+0x1ba>
 8015052:	3302      	adds	r3, #2
 8015054:	e7f4      	b.n	8015040 <_printf_float+0x1a4>
 8015056:	2301      	movs	r3, #1
 8015058:	e7f2      	b.n	8015040 <_printf_float+0x1a4>
 801505a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801505e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015060:	4299      	cmp	r1, r3
 8015062:	db05      	blt.n	8015070 <_printf_float+0x1d4>
 8015064:	6823      	ldr	r3, [r4, #0]
 8015066:	6121      	str	r1, [r4, #16]
 8015068:	07d8      	lsls	r0, r3, #31
 801506a:	d5ea      	bpl.n	8015042 <_printf_float+0x1a6>
 801506c:	1c4b      	adds	r3, r1, #1
 801506e:	e7e7      	b.n	8015040 <_printf_float+0x1a4>
 8015070:	2900      	cmp	r1, #0
 8015072:	bfd4      	ite	le
 8015074:	f1c1 0202 	rsble	r2, r1, #2
 8015078:	2201      	movgt	r2, #1
 801507a:	4413      	add	r3, r2
 801507c:	e7e0      	b.n	8015040 <_printf_float+0x1a4>
 801507e:	6823      	ldr	r3, [r4, #0]
 8015080:	055a      	lsls	r2, r3, #21
 8015082:	d407      	bmi.n	8015094 <_printf_float+0x1f8>
 8015084:	6923      	ldr	r3, [r4, #16]
 8015086:	4642      	mov	r2, r8
 8015088:	4631      	mov	r1, r6
 801508a:	4628      	mov	r0, r5
 801508c:	47b8      	blx	r7
 801508e:	3001      	adds	r0, #1
 8015090:	d12c      	bne.n	80150ec <_printf_float+0x250>
 8015092:	e764      	b.n	8014f5e <_printf_float+0xc2>
 8015094:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015098:	f240 80e0 	bls.w	801525c <_printf_float+0x3c0>
 801509c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80150a0:	2200      	movs	r2, #0
 80150a2:	2300      	movs	r3, #0
 80150a4:	f7eb fd30 	bl	8000b08 <__aeabi_dcmpeq>
 80150a8:	2800      	cmp	r0, #0
 80150aa:	d034      	beq.n	8015116 <_printf_float+0x27a>
 80150ac:	4a37      	ldr	r2, [pc, #220]	; (801518c <_printf_float+0x2f0>)
 80150ae:	2301      	movs	r3, #1
 80150b0:	4631      	mov	r1, r6
 80150b2:	4628      	mov	r0, r5
 80150b4:	47b8      	blx	r7
 80150b6:	3001      	adds	r0, #1
 80150b8:	f43f af51 	beq.w	8014f5e <_printf_float+0xc2>
 80150bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80150c0:	429a      	cmp	r2, r3
 80150c2:	db02      	blt.n	80150ca <_printf_float+0x22e>
 80150c4:	6823      	ldr	r3, [r4, #0]
 80150c6:	07d8      	lsls	r0, r3, #31
 80150c8:	d510      	bpl.n	80150ec <_printf_float+0x250>
 80150ca:	ee18 3a10 	vmov	r3, s16
 80150ce:	4652      	mov	r2, sl
 80150d0:	4631      	mov	r1, r6
 80150d2:	4628      	mov	r0, r5
 80150d4:	47b8      	blx	r7
 80150d6:	3001      	adds	r0, #1
 80150d8:	f43f af41 	beq.w	8014f5e <_printf_float+0xc2>
 80150dc:	f04f 0800 	mov.w	r8, #0
 80150e0:	f104 091a 	add.w	r9, r4, #26
 80150e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150e6:	3b01      	subs	r3, #1
 80150e8:	4543      	cmp	r3, r8
 80150ea:	dc09      	bgt.n	8015100 <_printf_float+0x264>
 80150ec:	6823      	ldr	r3, [r4, #0]
 80150ee:	079b      	lsls	r3, r3, #30
 80150f0:	f100 8105 	bmi.w	80152fe <_printf_float+0x462>
 80150f4:	68e0      	ldr	r0, [r4, #12]
 80150f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150f8:	4298      	cmp	r0, r3
 80150fa:	bfb8      	it	lt
 80150fc:	4618      	movlt	r0, r3
 80150fe:	e730      	b.n	8014f62 <_printf_float+0xc6>
 8015100:	2301      	movs	r3, #1
 8015102:	464a      	mov	r2, r9
 8015104:	4631      	mov	r1, r6
 8015106:	4628      	mov	r0, r5
 8015108:	47b8      	blx	r7
 801510a:	3001      	adds	r0, #1
 801510c:	f43f af27 	beq.w	8014f5e <_printf_float+0xc2>
 8015110:	f108 0801 	add.w	r8, r8, #1
 8015114:	e7e6      	b.n	80150e4 <_printf_float+0x248>
 8015116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015118:	2b00      	cmp	r3, #0
 801511a:	dc39      	bgt.n	8015190 <_printf_float+0x2f4>
 801511c:	4a1b      	ldr	r2, [pc, #108]	; (801518c <_printf_float+0x2f0>)
 801511e:	2301      	movs	r3, #1
 8015120:	4631      	mov	r1, r6
 8015122:	4628      	mov	r0, r5
 8015124:	47b8      	blx	r7
 8015126:	3001      	adds	r0, #1
 8015128:	f43f af19 	beq.w	8014f5e <_printf_float+0xc2>
 801512c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015130:	4313      	orrs	r3, r2
 8015132:	d102      	bne.n	801513a <_printf_float+0x29e>
 8015134:	6823      	ldr	r3, [r4, #0]
 8015136:	07d9      	lsls	r1, r3, #31
 8015138:	d5d8      	bpl.n	80150ec <_printf_float+0x250>
 801513a:	ee18 3a10 	vmov	r3, s16
 801513e:	4652      	mov	r2, sl
 8015140:	4631      	mov	r1, r6
 8015142:	4628      	mov	r0, r5
 8015144:	47b8      	blx	r7
 8015146:	3001      	adds	r0, #1
 8015148:	f43f af09 	beq.w	8014f5e <_printf_float+0xc2>
 801514c:	f04f 0900 	mov.w	r9, #0
 8015150:	f104 0a1a 	add.w	sl, r4, #26
 8015154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015156:	425b      	negs	r3, r3
 8015158:	454b      	cmp	r3, r9
 801515a:	dc01      	bgt.n	8015160 <_printf_float+0x2c4>
 801515c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801515e:	e792      	b.n	8015086 <_printf_float+0x1ea>
 8015160:	2301      	movs	r3, #1
 8015162:	4652      	mov	r2, sl
 8015164:	4631      	mov	r1, r6
 8015166:	4628      	mov	r0, r5
 8015168:	47b8      	blx	r7
 801516a:	3001      	adds	r0, #1
 801516c:	f43f aef7 	beq.w	8014f5e <_printf_float+0xc2>
 8015170:	f109 0901 	add.w	r9, r9, #1
 8015174:	e7ee      	b.n	8015154 <_printf_float+0x2b8>
 8015176:	bf00      	nop
 8015178:	7fefffff 	.word	0x7fefffff
 801517c:	0801c890 	.word	0x0801c890
 8015180:	0801c894 	.word	0x0801c894
 8015184:	0801c89c 	.word	0x0801c89c
 8015188:	0801c898 	.word	0x0801c898
 801518c:	0801c8a0 	.word	0x0801c8a0
 8015190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015194:	429a      	cmp	r2, r3
 8015196:	bfa8      	it	ge
 8015198:	461a      	movge	r2, r3
 801519a:	2a00      	cmp	r2, #0
 801519c:	4691      	mov	r9, r2
 801519e:	dc37      	bgt.n	8015210 <_printf_float+0x374>
 80151a0:	f04f 0b00 	mov.w	fp, #0
 80151a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80151a8:	f104 021a 	add.w	r2, r4, #26
 80151ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80151ae:	9305      	str	r3, [sp, #20]
 80151b0:	eba3 0309 	sub.w	r3, r3, r9
 80151b4:	455b      	cmp	r3, fp
 80151b6:	dc33      	bgt.n	8015220 <_printf_float+0x384>
 80151b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80151bc:	429a      	cmp	r2, r3
 80151be:	db3b      	blt.n	8015238 <_printf_float+0x39c>
 80151c0:	6823      	ldr	r3, [r4, #0]
 80151c2:	07da      	lsls	r2, r3, #31
 80151c4:	d438      	bmi.n	8015238 <_printf_float+0x39c>
 80151c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80151c8:	9b05      	ldr	r3, [sp, #20]
 80151ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80151cc:	1ad3      	subs	r3, r2, r3
 80151ce:	eba2 0901 	sub.w	r9, r2, r1
 80151d2:	4599      	cmp	r9, r3
 80151d4:	bfa8      	it	ge
 80151d6:	4699      	movge	r9, r3
 80151d8:	f1b9 0f00 	cmp.w	r9, #0
 80151dc:	dc35      	bgt.n	801524a <_printf_float+0x3ae>
 80151de:	f04f 0800 	mov.w	r8, #0
 80151e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80151e6:	f104 0a1a 	add.w	sl, r4, #26
 80151ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80151ee:	1a9b      	subs	r3, r3, r2
 80151f0:	eba3 0309 	sub.w	r3, r3, r9
 80151f4:	4543      	cmp	r3, r8
 80151f6:	f77f af79 	ble.w	80150ec <_printf_float+0x250>
 80151fa:	2301      	movs	r3, #1
 80151fc:	4652      	mov	r2, sl
 80151fe:	4631      	mov	r1, r6
 8015200:	4628      	mov	r0, r5
 8015202:	47b8      	blx	r7
 8015204:	3001      	adds	r0, #1
 8015206:	f43f aeaa 	beq.w	8014f5e <_printf_float+0xc2>
 801520a:	f108 0801 	add.w	r8, r8, #1
 801520e:	e7ec      	b.n	80151ea <_printf_float+0x34e>
 8015210:	4613      	mov	r3, r2
 8015212:	4631      	mov	r1, r6
 8015214:	4642      	mov	r2, r8
 8015216:	4628      	mov	r0, r5
 8015218:	47b8      	blx	r7
 801521a:	3001      	adds	r0, #1
 801521c:	d1c0      	bne.n	80151a0 <_printf_float+0x304>
 801521e:	e69e      	b.n	8014f5e <_printf_float+0xc2>
 8015220:	2301      	movs	r3, #1
 8015222:	4631      	mov	r1, r6
 8015224:	4628      	mov	r0, r5
 8015226:	9205      	str	r2, [sp, #20]
 8015228:	47b8      	blx	r7
 801522a:	3001      	adds	r0, #1
 801522c:	f43f ae97 	beq.w	8014f5e <_printf_float+0xc2>
 8015230:	9a05      	ldr	r2, [sp, #20]
 8015232:	f10b 0b01 	add.w	fp, fp, #1
 8015236:	e7b9      	b.n	80151ac <_printf_float+0x310>
 8015238:	ee18 3a10 	vmov	r3, s16
 801523c:	4652      	mov	r2, sl
 801523e:	4631      	mov	r1, r6
 8015240:	4628      	mov	r0, r5
 8015242:	47b8      	blx	r7
 8015244:	3001      	adds	r0, #1
 8015246:	d1be      	bne.n	80151c6 <_printf_float+0x32a>
 8015248:	e689      	b.n	8014f5e <_printf_float+0xc2>
 801524a:	9a05      	ldr	r2, [sp, #20]
 801524c:	464b      	mov	r3, r9
 801524e:	4442      	add	r2, r8
 8015250:	4631      	mov	r1, r6
 8015252:	4628      	mov	r0, r5
 8015254:	47b8      	blx	r7
 8015256:	3001      	adds	r0, #1
 8015258:	d1c1      	bne.n	80151de <_printf_float+0x342>
 801525a:	e680      	b.n	8014f5e <_printf_float+0xc2>
 801525c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801525e:	2a01      	cmp	r2, #1
 8015260:	dc01      	bgt.n	8015266 <_printf_float+0x3ca>
 8015262:	07db      	lsls	r3, r3, #31
 8015264:	d538      	bpl.n	80152d8 <_printf_float+0x43c>
 8015266:	2301      	movs	r3, #1
 8015268:	4642      	mov	r2, r8
 801526a:	4631      	mov	r1, r6
 801526c:	4628      	mov	r0, r5
 801526e:	47b8      	blx	r7
 8015270:	3001      	adds	r0, #1
 8015272:	f43f ae74 	beq.w	8014f5e <_printf_float+0xc2>
 8015276:	ee18 3a10 	vmov	r3, s16
 801527a:	4652      	mov	r2, sl
 801527c:	4631      	mov	r1, r6
 801527e:	4628      	mov	r0, r5
 8015280:	47b8      	blx	r7
 8015282:	3001      	adds	r0, #1
 8015284:	f43f ae6b 	beq.w	8014f5e <_printf_float+0xc2>
 8015288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801528c:	2200      	movs	r2, #0
 801528e:	2300      	movs	r3, #0
 8015290:	f7eb fc3a 	bl	8000b08 <__aeabi_dcmpeq>
 8015294:	b9d8      	cbnz	r0, 80152ce <_printf_float+0x432>
 8015296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015298:	f108 0201 	add.w	r2, r8, #1
 801529c:	3b01      	subs	r3, #1
 801529e:	4631      	mov	r1, r6
 80152a0:	4628      	mov	r0, r5
 80152a2:	47b8      	blx	r7
 80152a4:	3001      	adds	r0, #1
 80152a6:	d10e      	bne.n	80152c6 <_printf_float+0x42a>
 80152a8:	e659      	b.n	8014f5e <_printf_float+0xc2>
 80152aa:	2301      	movs	r3, #1
 80152ac:	4652      	mov	r2, sl
 80152ae:	4631      	mov	r1, r6
 80152b0:	4628      	mov	r0, r5
 80152b2:	47b8      	blx	r7
 80152b4:	3001      	adds	r0, #1
 80152b6:	f43f ae52 	beq.w	8014f5e <_printf_float+0xc2>
 80152ba:	f108 0801 	add.w	r8, r8, #1
 80152be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152c0:	3b01      	subs	r3, #1
 80152c2:	4543      	cmp	r3, r8
 80152c4:	dcf1      	bgt.n	80152aa <_printf_float+0x40e>
 80152c6:	464b      	mov	r3, r9
 80152c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80152cc:	e6dc      	b.n	8015088 <_printf_float+0x1ec>
 80152ce:	f04f 0800 	mov.w	r8, #0
 80152d2:	f104 0a1a 	add.w	sl, r4, #26
 80152d6:	e7f2      	b.n	80152be <_printf_float+0x422>
 80152d8:	2301      	movs	r3, #1
 80152da:	4642      	mov	r2, r8
 80152dc:	e7df      	b.n	801529e <_printf_float+0x402>
 80152de:	2301      	movs	r3, #1
 80152e0:	464a      	mov	r2, r9
 80152e2:	4631      	mov	r1, r6
 80152e4:	4628      	mov	r0, r5
 80152e6:	47b8      	blx	r7
 80152e8:	3001      	adds	r0, #1
 80152ea:	f43f ae38 	beq.w	8014f5e <_printf_float+0xc2>
 80152ee:	f108 0801 	add.w	r8, r8, #1
 80152f2:	68e3      	ldr	r3, [r4, #12]
 80152f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152f6:	1a5b      	subs	r3, r3, r1
 80152f8:	4543      	cmp	r3, r8
 80152fa:	dcf0      	bgt.n	80152de <_printf_float+0x442>
 80152fc:	e6fa      	b.n	80150f4 <_printf_float+0x258>
 80152fe:	f04f 0800 	mov.w	r8, #0
 8015302:	f104 0919 	add.w	r9, r4, #25
 8015306:	e7f4      	b.n	80152f2 <_printf_float+0x456>

08015308 <_printf_common>:
 8015308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801530c:	4616      	mov	r6, r2
 801530e:	4699      	mov	r9, r3
 8015310:	688a      	ldr	r2, [r1, #8]
 8015312:	690b      	ldr	r3, [r1, #16]
 8015314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015318:	4293      	cmp	r3, r2
 801531a:	bfb8      	it	lt
 801531c:	4613      	movlt	r3, r2
 801531e:	6033      	str	r3, [r6, #0]
 8015320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015324:	4607      	mov	r7, r0
 8015326:	460c      	mov	r4, r1
 8015328:	b10a      	cbz	r2, 801532e <_printf_common+0x26>
 801532a:	3301      	adds	r3, #1
 801532c:	6033      	str	r3, [r6, #0]
 801532e:	6823      	ldr	r3, [r4, #0]
 8015330:	0699      	lsls	r1, r3, #26
 8015332:	bf42      	ittt	mi
 8015334:	6833      	ldrmi	r3, [r6, #0]
 8015336:	3302      	addmi	r3, #2
 8015338:	6033      	strmi	r3, [r6, #0]
 801533a:	6825      	ldr	r5, [r4, #0]
 801533c:	f015 0506 	ands.w	r5, r5, #6
 8015340:	d106      	bne.n	8015350 <_printf_common+0x48>
 8015342:	f104 0a19 	add.w	sl, r4, #25
 8015346:	68e3      	ldr	r3, [r4, #12]
 8015348:	6832      	ldr	r2, [r6, #0]
 801534a:	1a9b      	subs	r3, r3, r2
 801534c:	42ab      	cmp	r3, r5
 801534e:	dc26      	bgt.n	801539e <_printf_common+0x96>
 8015350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015354:	1e13      	subs	r3, r2, #0
 8015356:	6822      	ldr	r2, [r4, #0]
 8015358:	bf18      	it	ne
 801535a:	2301      	movne	r3, #1
 801535c:	0692      	lsls	r2, r2, #26
 801535e:	d42b      	bmi.n	80153b8 <_printf_common+0xb0>
 8015360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015364:	4649      	mov	r1, r9
 8015366:	4638      	mov	r0, r7
 8015368:	47c0      	blx	r8
 801536a:	3001      	adds	r0, #1
 801536c:	d01e      	beq.n	80153ac <_printf_common+0xa4>
 801536e:	6823      	ldr	r3, [r4, #0]
 8015370:	68e5      	ldr	r5, [r4, #12]
 8015372:	6832      	ldr	r2, [r6, #0]
 8015374:	f003 0306 	and.w	r3, r3, #6
 8015378:	2b04      	cmp	r3, #4
 801537a:	bf08      	it	eq
 801537c:	1aad      	subeq	r5, r5, r2
 801537e:	68a3      	ldr	r3, [r4, #8]
 8015380:	6922      	ldr	r2, [r4, #16]
 8015382:	bf0c      	ite	eq
 8015384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015388:	2500      	movne	r5, #0
 801538a:	4293      	cmp	r3, r2
 801538c:	bfc4      	itt	gt
 801538e:	1a9b      	subgt	r3, r3, r2
 8015390:	18ed      	addgt	r5, r5, r3
 8015392:	2600      	movs	r6, #0
 8015394:	341a      	adds	r4, #26
 8015396:	42b5      	cmp	r5, r6
 8015398:	d11a      	bne.n	80153d0 <_printf_common+0xc8>
 801539a:	2000      	movs	r0, #0
 801539c:	e008      	b.n	80153b0 <_printf_common+0xa8>
 801539e:	2301      	movs	r3, #1
 80153a0:	4652      	mov	r2, sl
 80153a2:	4649      	mov	r1, r9
 80153a4:	4638      	mov	r0, r7
 80153a6:	47c0      	blx	r8
 80153a8:	3001      	adds	r0, #1
 80153aa:	d103      	bne.n	80153b4 <_printf_common+0xac>
 80153ac:	f04f 30ff 	mov.w	r0, #4294967295
 80153b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153b4:	3501      	adds	r5, #1
 80153b6:	e7c6      	b.n	8015346 <_printf_common+0x3e>
 80153b8:	18e1      	adds	r1, r4, r3
 80153ba:	1c5a      	adds	r2, r3, #1
 80153bc:	2030      	movs	r0, #48	; 0x30
 80153be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80153c2:	4422      	add	r2, r4
 80153c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80153c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80153cc:	3302      	adds	r3, #2
 80153ce:	e7c7      	b.n	8015360 <_printf_common+0x58>
 80153d0:	2301      	movs	r3, #1
 80153d2:	4622      	mov	r2, r4
 80153d4:	4649      	mov	r1, r9
 80153d6:	4638      	mov	r0, r7
 80153d8:	47c0      	blx	r8
 80153da:	3001      	adds	r0, #1
 80153dc:	d0e6      	beq.n	80153ac <_printf_common+0xa4>
 80153de:	3601      	adds	r6, #1
 80153e0:	e7d9      	b.n	8015396 <_printf_common+0x8e>
	...

080153e4 <_printf_i>:
 80153e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80153e8:	460c      	mov	r4, r1
 80153ea:	4691      	mov	r9, r2
 80153ec:	7e27      	ldrb	r7, [r4, #24]
 80153ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80153f0:	2f78      	cmp	r7, #120	; 0x78
 80153f2:	4680      	mov	r8, r0
 80153f4:	469a      	mov	sl, r3
 80153f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80153fa:	d807      	bhi.n	801540c <_printf_i+0x28>
 80153fc:	2f62      	cmp	r7, #98	; 0x62
 80153fe:	d80a      	bhi.n	8015416 <_printf_i+0x32>
 8015400:	2f00      	cmp	r7, #0
 8015402:	f000 80d8 	beq.w	80155b6 <_printf_i+0x1d2>
 8015406:	2f58      	cmp	r7, #88	; 0x58
 8015408:	f000 80a3 	beq.w	8015552 <_printf_i+0x16e>
 801540c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015414:	e03a      	b.n	801548c <_printf_i+0xa8>
 8015416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801541a:	2b15      	cmp	r3, #21
 801541c:	d8f6      	bhi.n	801540c <_printf_i+0x28>
 801541e:	a001      	add	r0, pc, #4	; (adr r0, 8015424 <_printf_i+0x40>)
 8015420:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015424:	0801547d 	.word	0x0801547d
 8015428:	08015491 	.word	0x08015491
 801542c:	0801540d 	.word	0x0801540d
 8015430:	0801540d 	.word	0x0801540d
 8015434:	0801540d 	.word	0x0801540d
 8015438:	0801540d 	.word	0x0801540d
 801543c:	08015491 	.word	0x08015491
 8015440:	0801540d 	.word	0x0801540d
 8015444:	0801540d 	.word	0x0801540d
 8015448:	0801540d 	.word	0x0801540d
 801544c:	0801540d 	.word	0x0801540d
 8015450:	0801559d 	.word	0x0801559d
 8015454:	080154c1 	.word	0x080154c1
 8015458:	0801557f 	.word	0x0801557f
 801545c:	0801540d 	.word	0x0801540d
 8015460:	0801540d 	.word	0x0801540d
 8015464:	080155bf 	.word	0x080155bf
 8015468:	0801540d 	.word	0x0801540d
 801546c:	080154c1 	.word	0x080154c1
 8015470:	0801540d 	.word	0x0801540d
 8015474:	0801540d 	.word	0x0801540d
 8015478:	08015587 	.word	0x08015587
 801547c:	680b      	ldr	r3, [r1, #0]
 801547e:	1d1a      	adds	r2, r3, #4
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	600a      	str	r2, [r1, #0]
 8015484:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801548c:	2301      	movs	r3, #1
 801548e:	e0a3      	b.n	80155d8 <_printf_i+0x1f4>
 8015490:	6825      	ldr	r5, [r4, #0]
 8015492:	6808      	ldr	r0, [r1, #0]
 8015494:	062e      	lsls	r6, r5, #24
 8015496:	f100 0304 	add.w	r3, r0, #4
 801549a:	d50a      	bpl.n	80154b2 <_printf_i+0xce>
 801549c:	6805      	ldr	r5, [r0, #0]
 801549e:	600b      	str	r3, [r1, #0]
 80154a0:	2d00      	cmp	r5, #0
 80154a2:	da03      	bge.n	80154ac <_printf_i+0xc8>
 80154a4:	232d      	movs	r3, #45	; 0x2d
 80154a6:	426d      	negs	r5, r5
 80154a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154ac:	485e      	ldr	r0, [pc, #376]	; (8015628 <_printf_i+0x244>)
 80154ae:	230a      	movs	r3, #10
 80154b0:	e019      	b.n	80154e6 <_printf_i+0x102>
 80154b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80154b6:	6805      	ldr	r5, [r0, #0]
 80154b8:	600b      	str	r3, [r1, #0]
 80154ba:	bf18      	it	ne
 80154bc:	b22d      	sxthne	r5, r5
 80154be:	e7ef      	b.n	80154a0 <_printf_i+0xbc>
 80154c0:	680b      	ldr	r3, [r1, #0]
 80154c2:	6825      	ldr	r5, [r4, #0]
 80154c4:	1d18      	adds	r0, r3, #4
 80154c6:	6008      	str	r0, [r1, #0]
 80154c8:	0628      	lsls	r0, r5, #24
 80154ca:	d501      	bpl.n	80154d0 <_printf_i+0xec>
 80154cc:	681d      	ldr	r5, [r3, #0]
 80154ce:	e002      	b.n	80154d6 <_printf_i+0xf2>
 80154d0:	0669      	lsls	r1, r5, #25
 80154d2:	d5fb      	bpl.n	80154cc <_printf_i+0xe8>
 80154d4:	881d      	ldrh	r5, [r3, #0]
 80154d6:	4854      	ldr	r0, [pc, #336]	; (8015628 <_printf_i+0x244>)
 80154d8:	2f6f      	cmp	r7, #111	; 0x6f
 80154da:	bf0c      	ite	eq
 80154dc:	2308      	moveq	r3, #8
 80154de:	230a      	movne	r3, #10
 80154e0:	2100      	movs	r1, #0
 80154e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80154e6:	6866      	ldr	r6, [r4, #4]
 80154e8:	60a6      	str	r6, [r4, #8]
 80154ea:	2e00      	cmp	r6, #0
 80154ec:	bfa2      	ittt	ge
 80154ee:	6821      	ldrge	r1, [r4, #0]
 80154f0:	f021 0104 	bicge.w	r1, r1, #4
 80154f4:	6021      	strge	r1, [r4, #0]
 80154f6:	b90d      	cbnz	r5, 80154fc <_printf_i+0x118>
 80154f8:	2e00      	cmp	r6, #0
 80154fa:	d04d      	beq.n	8015598 <_printf_i+0x1b4>
 80154fc:	4616      	mov	r6, r2
 80154fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8015502:	fb03 5711 	mls	r7, r3, r1, r5
 8015506:	5dc7      	ldrb	r7, [r0, r7]
 8015508:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801550c:	462f      	mov	r7, r5
 801550e:	42bb      	cmp	r3, r7
 8015510:	460d      	mov	r5, r1
 8015512:	d9f4      	bls.n	80154fe <_printf_i+0x11a>
 8015514:	2b08      	cmp	r3, #8
 8015516:	d10b      	bne.n	8015530 <_printf_i+0x14c>
 8015518:	6823      	ldr	r3, [r4, #0]
 801551a:	07df      	lsls	r7, r3, #31
 801551c:	d508      	bpl.n	8015530 <_printf_i+0x14c>
 801551e:	6923      	ldr	r3, [r4, #16]
 8015520:	6861      	ldr	r1, [r4, #4]
 8015522:	4299      	cmp	r1, r3
 8015524:	bfde      	ittt	le
 8015526:	2330      	movle	r3, #48	; 0x30
 8015528:	f806 3c01 	strble.w	r3, [r6, #-1]
 801552c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015530:	1b92      	subs	r2, r2, r6
 8015532:	6122      	str	r2, [r4, #16]
 8015534:	f8cd a000 	str.w	sl, [sp]
 8015538:	464b      	mov	r3, r9
 801553a:	aa03      	add	r2, sp, #12
 801553c:	4621      	mov	r1, r4
 801553e:	4640      	mov	r0, r8
 8015540:	f7ff fee2 	bl	8015308 <_printf_common>
 8015544:	3001      	adds	r0, #1
 8015546:	d14c      	bne.n	80155e2 <_printf_i+0x1fe>
 8015548:	f04f 30ff 	mov.w	r0, #4294967295
 801554c:	b004      	add	sp, #16
 801554e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015552:	4835      	ldr	r0, [pc, #212]	; (8015628 <_printf_i+0x244>)
 8015554:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015558:	6823      	ldr	r3, [r4, #0]
 801555a:	680e      	ldr	r6, [r1, #0]
 801555c:	061f      	lsls	r7, r3, #24
 801555e:	f856 5b04 	ldr.w	r5, [r6], #4
 8015562:	600e      	str	r6, [r1, #0]
 8015564:	d514      	bpl.n	8015590 <_printf_i+0x1ac>
 8015566:	07d9      	lsls	r1, r3, #31
 8015568:	bf44      	itt	mi
 801556a:	f043 0320 	orrmi.w	r3, r3, #32
 801556e:	6023      	strmi	r3, [r4, #0]
 8015570:	b91d      	cbnz	r5, 801557a <_printf_i+0x196>
 8015572:	6823      	ldr	r3, [r4, #0]
 8015574:	f023 0320 	bic.w	r3, r3, #32
 8015578:	6023      	str	r3, [r4, #0]
 801557a:	2310      	movs	r3, #16
 801557c:	e7b0      	b.n	80154e0 <_printf_i+0xfc>
 801557e:	6823      	ldr	r3, [r4, #0]
 8015580:	f043 0320 	orr.w	r3, r3, #32
 8015584:	6023      	str	r3, [r4, #0]
 8015586:	2378      	movs	r3, #120	; 0x78
 8015588:	4828      	ldr	r0, [pc, #160]	; (801562c <_printf_i+0x248>)
 801558a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801558e:	e7e3      	b.n	8015558 <_printf_i+0x174>
 8015590:	065e      	lsls	r6, r3, #25
 8015592:	bf48      	it	mi
 8015594:	b2ad      	uxthmi	r5, r5
 8015596:	e7e6      	b.n	8015566 <_printf_i+0x182>
 8015598:	4616      	mov	r6, r2
 801559a:	e7bb      	b.n	8015514 <_printf_i+0x130>
 801559c:	680b      	ldr	r3, [r1, #0]
 801559e:	6826      	ldr	r6, [r4, #0]
 80155a0:	6960      	ldr	r0, [r4, #20]
 80155a2:	1d1d      	adds	r5, r3, #4
 80155a4:	600d      	str	r5, [r1, #0]
 80155a6:	0635      	lsls	r5, r6, #24
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	d501      	bpl.n	80155b0 <_printf_i+0x1cc>
 80155ac:	6018      	str	r0, [r3, #0]
 80155ae:	e002      	b.n	80155b6 <_printf_i+0x1d2>
 80155b0:	0671      	lsls	r1, r6, #25
 80155b2:	d5fb      	bpl.n	80155ac <_printf_i+0x1c8>
 80155b4:	8018      	strh	r0, [r3, #0]
 80155b6:	2300      	movs	r3, #0
 80155b8:	6123      	str	r3, [r4, #16]
 80155ba:	4616      	mov	r6, r2
 80155bc:	e7ba      	b.n	8015534 <_printf_i+0x150>
 80155be:	680b      	ldr	r3, [r1, #0]
 80155c0:	1d1a      	adds	r2, r3, #4
 80155c2:	600a      	str	r2, [r1, #0]
 80155c4:	681e      	ldr	r6, [r3, #0]
 80155c6:	6862      	ldr	r2, [r4, #4]
 80155c8:	2100      	movs	r1, #0
 80155ca:	4630      	mov	r0, r6
 80155cc:	f7ea fe28 	bl	8000220 <memchr>
 80155d0:	b108      	cbz	r0, 80155d6 <_printf_i+0x1f2>
 80155d2:	1b80      	subs	r0, r0, r6
 80155d4:	6060      	str	r0, [r4, #4]
 80155d6:	6863      	ldr	r3, [r4, #4]
 80155d8:	6123      	str	r3, [r4, #16]
 80155da:	2300      	movs	r3, #0
 80155dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80155e0:	e7a8      	b.n	8015534 <_printf_i+0x150>
 80155e2:	6923      	ldr	r3, [r4, #16]
 80155e4:	4632      	mov	r2, r6
 80155e6:	4649      	mov	r1, r9
 80155e8:	4640      	mov	r0, r8
 80155ea:	47d0      	blx	sl
 80155ec:	3001      	adds	r0, #1
 80155ee:	d0ab      	beq.n	8015548 <_printf_i+0x164>
 80155f0:	6823      	ldr	r3, [r4, #0]
 80155f2:	079b      	lsls	r3, r3, #30
 80155f4:	d413      	bmi.n	801561e <_printf_i+0x23a>
 80155f6:	68e0      	ldr	r0, [r4, #12]
 80155f8:	9b03      	ldr	r3, [sp, #12]
 80155fa:	4298      	cmp	r0, r3
 80155fc:	bfb8      	it	lt
 80155fe:	4618      	movlt	r0, r3
 8015600:	e7a4      	b.n	801554c <_printf_i+0x168>
 8015602:	2301      	movs	r3, #1
 8015604:	4632      	mov	r2, r6
 8015606:	4649      	mov	r1, r9
 8015608:	4640      	mov	r0, r8
 801560a:	47d0      	blx	sl
 801560c:	3001      	adds	r0, #1
 801560e:	d09b      	beq.n	8015548 <_printf_i+0x164>
 8015610:	3501      	adds	r5, #1
 8015612:	68e3      	ldr	r3, [r4, #12]
 8015614:	9903      	ldr	r1, [sp, #12]
 8015616:	1a5b      	subs	r3, r3, r1
 8015618:	42ab      	cmp	r3, r5
 801561a:	dcf2      	bgt.n	8015602 <_printf_i+0x21e>
 801561c:	e7eb      	b.n	80155f6 <_printf_i+0x212>
 801561e:	2500      	movs	r5, #0
 8015620:	f104 0619 	add.w	r6, r4, #25
 8015624:	e7f5      	b.n	8015612 <_printf_i+0x22e>
 8015626:	bf00      	nop
 8015628:	0801c8a2 	.word	0x0801c8a2
 801562c:	0801c8b3 	.word	0x0801c8b3

08015630 <iprintf>:
 8015630:	b40f      	push	{r0, r1, r2, r3}
 8015632:	4b0a      	ldr	r3, [pc, #40]	; (801565c <iprintf+0x2c>)
 8015634:	b513      	push	{r0, r1, r4, lr}
 8015636:	681c      	ldr	r4, [r3, #0]
 8015638:	b124      	cbz	r4, 8015644 <iprintf+0x14>
 801563a:	69a3      	ldr	r3, [r4, #24]
 801563c:	b913      	cbnz	r3, 8015644 <iprintf+0x14>
 801563e:	4620      	mov	r0, r4
 8015640:	f001 fe0e 	bl	8017260 <__sinit>
 8015644:	ab05      	add	r3, sp, #20
 8015646:	9a04      	ldr	r2, [sp, #16]
 8015648:	68a1      	ldr	r1, [r4, #8]
 801564a:	9301      	str	r3, [sp, #4]
 801564c:	4620      	mov	r0, r4
 801564e:	f003 f89b 	bl	8018788 <_vfiprintf_r>
 8015652:	b002      	add	sp, #8
 8015654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015658:	b004      	add	sp, #16
 801565a:	4770      	bx	lr
 801565c:	2000003c 	.word	0x2000003c

08015660 <rand>:
 8015660:	4b17      	ldr	r3, [pc, #92]	; (80156c0 <rand+0x60>)
 8015662:	b510      	push	{r4, lr}
 8015664:	681c      	ldr	r4, [r3, #0]
 8015666:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015668:	b9b3      	cbnz	r3, 8015698 <rand+0x38>
 801566a:	2018      	movs	r0, #24
 801566c:	f7ff fa7e 	bl	8014b6c <malloc>
 8015670:	63a0      	str	r0, [r4, #56]	; 0x38
 8015672:	b928      	cbnz	r0, 8015680 <rand+0x20>
 8015674:	4602      	mov	r2, r0
 8015676:	4b13      	ldr	r3, [pc, #76]	; (80156c4 <rand+0x64>)
 8015678:	4813      	ldr	r0, [pc, #76]	; (80156c8 <rand+0x68>)
 801567a:	214e      	movs	r1, #78	; 0x4e
 801567c:	f000 ff02 	bl	8016484 <__assert_func>
 8015680:	4a12      	ldr	r2, [pc, #72]	; (80156cc <rand+0x6c>)
 8015682:	4b13      	ldr	r3, [pc, #76]	; (80156d0 <rand+0x70>)
 8015684:	e9c0 2300 	strd	r2, r3, [r0]
 8015688:	4b12      	ldr	r3, [pc, #72]	; (80156d4 <rand+0x74>)
 801568a:	6083      	str	r3, [r0, #8]
 801568c:	230b      	movs	r3, #11
 801568e:	8183      	strh	r3, [r0, #12]
 8015690:	2201      	movs	r2, #1
 8015692:	2300      	movs	r3, #0
 8015694:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015698:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801569a:	480f      	ldr	r0, [pc, #60]	; (80156d8 <rand+0x78>)
 801569c:	690a      	ldr	r2, [r1, #16]
 801569e:	694b      	ldr	r3, [r1, #20]
 80156a0:	4c0e      	ldr	r4, [pc, #56]	; (80156dc <rand+0x7c>)
 80156a2:	4350      	muls	r0, r2
 80156a4:	fb04 0003 	mla	r0, r4, r3, r0
 80156a8:	fba2 3404 	umull	r3, r4, r2, r4
 80156ac:	1c5a      	adds	r2, r3, #1
 80156ae:	4404      	add	r4, r0
 80156b0:	f144 0000 	adc.w	r0, r4, #0
 80156b4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80156b8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80156bc:	bd10      	pop	{r4, pc}
 80156be:	bf00      	nop
 80156c0:	2000003c 	.word	0x2000003c
 80156c4:	0801c8c4 	.word	0x0801c8c4
 80156c8:	0801c8db 	.word	0x0801c8db
 80156cc:	abcd330e 	.word	0xabcd330e
 80156d0:	e66d1234 	.word	0xe66d1234
 80156d4:	0005deec 	.word	0x0005deec
 80156d8:	5851f42d 	.word	0x5851f42d
 80156dc:	4c957f2d 	.word	0x4c957f2d

080156e0 <_sbrk_r>:
 80156e0:	b538      	push	{r3, r4, r5, lr}
 80156e2:	4d06      	ldr	r5, [pc, #24]	; (80156fc <_sbrk_r+0x1c>)
 80156e4:	2300      	movs	r3, #0
 80156e6:	4604      	mov	r4, r0
 80156e8:	4608      	mov	r0, r1
 80156ea:	602b      	str	r3, [r5, #0]
 80156ec:	f7eb fcc8 	bl	8001080 <_sbrk>
 80156f0:	1c43      	adds	r3, r0, #1
 80156f2:	d102      	bne.n	80156fa <_sbrk_r+0x1a>
 80156f4:	682b      	ldr	r3, [r5, #0]
 80156f6:	b103      	cbz	r3, 80156fa <_sbrk_r+0x1a>
 80156f8:	6023      	str	r3, [r4, #0]
 80156fa:	bd38      	pop	{r3, r4, r5, pc}
 80156fc:	2000cfe4 	.word	0x2000cfe4

08015700 <siprintf>:
 8015700:	b40e      	push	{r1, r2, r3}
 8015702:	b500      	push	{lr}
 8015704:	b09c      	sub	sp, #112	; 0x70
 8015706:	ab1d      	add	r3, sp, #116	; 0x74
 8015708:	9002      	str	r0, [sp, #8]
 801570a:	9006      	str	r0, [sp, #24]
 801570c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015710:	4809      	ldr	r0, [pc, #36]	; (8015738 <siprintf+0x38>)
 8015712:	9107      	str	r1, [sp, #28]
 8015714:	9104      	str	r1, [sp, #16]
 8015716:	4909      	ldr	r1, [pc, #36]	; (801573c <siprintf+0x3c>)
 8015718:	f853 2b04 	ldr.w	r2, [r3], #4
 801571c:	9105      	str	r1, [sp, #20]
 801571e:	6800      	ldr	r0, [r0, #0]
 8015720:	9301      	str	r3, [sp, #4]
 8015722:	a902      	add	r1, sp, #8
 8015724:	f002 ff06 	bl	8018534 <_svfiprintf_r>
 8015728:	9b02      	ldr	r3, [sp, #8]
 801572a:	2200      	movs	r2, #0
 801572c:	701a      	strb	r2, [r3, #0]
 801572e:	b01c      	add	sp, #112	; 0x70
 8015730:	f85d eb04 	ldr.w	lr, [sp], #4
 8015734:	b003      	add	sp, #12
 8015736:	4770      	bx	lr
 8015738:	2000003c 	.word	0x2000003c
 801573c:	ffff0208 	.word	0xffff0208

08015740 <strncmp>:
 8015740:	b510      	push	{r4, lr}
 8015742:	b16a      	cbz	r2, 8015760 <strncmp+0x20>
 8015744:	3901      	subs	r1, #1
 8015746:	1884      	adds	r4, r0, r2
 8015748:	f810 3b01 	ldrb.w	r3, [r0], #1
 801574c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015750:	4293      	cmp	r3, r2
 8015752:	d103      	bne.n	801575c <strncmp+0x1c>
 8015754:	42a0      	cmp	r0, r4
 8015756:	d001      	beq.n	801575c <strncmp+0x1c>
 8015758:	2b00      	cmp	r3, #0
 801575a:	d1f5      	bne.n	8015748 <strncmp+0x8>
 801575c:	1a98      	subs	r0, r3, r2
 801575e:	bd10      	pop	{r4, pc}
 8015760:	4610      	mov	r0, r2
 8015762:	e7fc      	b.n	801575e <strncmp+0x1e>

08015764 <sulp>:
 8015764:	b570      	push	{r4, r5, r6, lr}
 8015766:	4604      	mov	r4, r0
 8015768:	460d      	mov	r5, r1
 801576a:	ec45 4b10 	vmov	d0, r4, r5
 801576e:	4616      	mov	r6, r2
 8015770:	f002 fd26 	bl	80181c0 <__ulp>
 8015774:	ec51 0b10 	vmov	r0, r1, d0
 8015778:	b17e      	cbz	r6, 801579a <sulp+0x36>
 801577a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801577e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015782:	2b00      	cmp	r3, #0
 8015784:	dd09      	ble.n	801579a <sulp+0x36>
 8015786:	051b      	lsls	r3, r3, #20
 8015788:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801578c:	2400      	movs	r4, #0
 801578e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015792:	4622      	mov	r2, r4
 8015794:	462b      	mov	r3, r5
 8015796:	f7ea ff4f 	bl	8000638 <__aeabi_dmul>
 801579a:	bd70      	pop	{r4, r5, r6, pc}
 801579c:	0000      	movs	r0, r0
	...

080157a0 <_strtod_l>:
 80157a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157a4:	b0a3      	sub	sp, #140	; 0x8c
 80157a6:	461f      	mov	r7, r3
 80157a8:	2300      	movs	r3, #0
 80157aa:	931e      	str	r3, [sp, #120]	; 0x78
 80157ac:	4ba4      	ldr	r3, [pc, #656]	; (8015a40 <_strtod_l+0x2a0>)
 80157ae:	9219      	str	r2, [sp, #100]	; 0x64
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	9307      	str	r3, [sp, #28]
 80157b4:	4604      	mov	r4, r0
 80157b6:	4618      	mov	r0, r3
 80157b8:	4688      	mov	r8, r1
 80157ba:	f7ea fd29 	bl	8000210 <strlen>
 80157be:	f04f 0a00 	mov.w	sl, #0
 80157c2:	4605      	mov	r5, r0
 80157c4:	f04f 0b00 	mov.w	fp, #0
 80157c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80157cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80157ce:	781a      	ldrb	r2, [r3, #0]
 80157d0:	2a2b      	cmp	r2, #43	; 0x2b
 80157d2:	d04c      	beq.n	801586e <_strtod_l+0xce>
 80157d4:	d839      	bhi.n	801584a <_strtod_l+0xaa>
 80157d6:	2a0d      	cmp	r2, #13
 80157d8:	d832      	bhi.n	8015840 <_strtod_l+0xa0>
 80157da:	2a08      	cmp	r2, #8
 80157dc:	d832      	bhi.n	8015844 <_strtod_l+0xa4>
 80157de:	2a00      	cmp	r2, #0
 80157e0:	d03c      	beq.n	801585c <_strtod_l+0xbc>
 80157e2:	2300      	movs	r3, #0
 80157e4:	930e      	str	r3, [sp, #56]	; 0x38
 80157e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80157e8:	7833      	ldrb	r3, [r6, #0]
 80157ea:	2b30      	cmp	r3, #48	; 0x30
 80157ec:	f040 80b4 	bne.w	8015958 <_strtod_l+0x1b8>
 80157f0:	7873      	ldrb	r3, [r6, #1]
 80157f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80157f6:	2b58      	cmp	r3, #88	; 0x58
 80157f8:	d16c      	bne.n	80158d4 <_strtod_l+0x134>
 80157fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80157fc:	9301      	str	r3, [sp, #4]
 80157fe:	ab1e      	add	r3, sp, #120	; 0x78
 8015800:	9702      	str	r7, [sp, #8]
 8015802:	9300      	str	r3, [sp, #0]
 8015804:	4a8f      	ldr	r2, [pc, #572]	; (8015a44 <_strtod_l+0x2a4>)
 8015806:	ab1f      	add	r3, sp, #124	; 0x7c
 8015808:	a91d      	add	r1, sp, #116	; 0x74
 801580a:	4620      	mov	r0, r4
 801580c:	f001 fe3e 	bl	801748c <__gethex>
 8015810:	f010 0707 	ands.w	r7, r0, #7
 8015814:	4605      	mov	r5, r0
 8015816:	d005      	beq.n	8015824 <_strtod_l+0x84>
 8015818:	2f06      	cmp	r7, #6
 801581a:	d12a      	bne.n	8015872 <_strtod_l+0xd2>
 801581c:	3601      	adds	r6, #1
 801581e:	2300      	movs	r3, #0
 8015820:	961d      	str	r6, [sp, #116]	; 0x74
 8015822:	930e      	str	r3, [sp, #56]	; 0x38
 8015824:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015826:	2b00      	cmp	r3, #0
 8015828:	f040 8596 	bne.w	8016358 <_strtod_l+0xbb8>
 801582c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801582e:	b1db      	cbz	r3, 8015868 <_strtod_l+0xc8>
 8015830:	4652      	mov	r2, sl
 8015832:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015836:	ec43 2b10 	vmov	d0, r2, r3
 801583a:	b023      	add	sp, #140	; 0x8c
 801583c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015840:	2a20      	cmp	r2, #32
 8015842:	d1ce      	bne.n	80157e2 <_strtod_l+0x42>
 8015844:	3301      	adds	r3, #1
 8015846:	931d      	str	r3, [sp, #116]	; 0x74
 8015848:	e7c0      	b.n	80157cc <_strtod_l+0x2c>
 801584a:	2a2d      	cmp	r2, #45	; 0x2d
 801584c:	d1c9      	bne.n	80157e2 <_strtod_l+0x42>
 801584e:	2201      	movs	r2, #1
 8015850:	920e      	str	r2, [sp, #56]	; 0x38
 8015852:	1c5a      	adds	r2, r3, #1
 8015854:	921d      	str	r2, [sp, #116]	; 0x74
 8015856:	785b      	ldrb	r3, [r3, #1]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d1c4      	bne.n	80157e6 <_strtod_l+0x46>
 801585c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801585e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8015862:	2b00      	cmp	r3, #0
 8015864:	f040 8576 	bne.w	8016354 <_strtod_l+0xbb4>
 8015868:	4652      	mov	r2, sl
 801586a:	465b      	mov	r3, fp
 801586c:	e7e3      	b.n	8015836 <_strtod_l+0x96>
 801586e:	2200      	movs	r2, #0
 8015870:	e7ee      	b.n	8015850 <_strtod_l+0xb0>
 8015872:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015874:	b13a      	cbz	r2, 8015886 <_strtod_l+0xe6>
 8015876:	2135      	movs	r1, #53	; 0x35
 8015878:	a820      	add	r0, sp, #128	; 0x80
 801587a:	f002 fdac 	bl	80183d6 <__copybits>
 801587e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015880:	4620      	mov	r0, r4
 8015882:	f002 f971 	bl	8017b68 <_Bfree>
 8015886:	3f01      	subs	r7, #1
 8015888:	2f05      	cmp	r7, #5
 801588a:	d807      	bhi.n	801589c <_strtod_l+0xfc>
 801588c:	e8df f007 	tbb	[pc, r7]
 8015890:	1d180b0e 	.word	0x1d180b0e
 8015894:	030e      	.short	0x030e
 8015896:	f04f 0b00 	mov.w	fp, #0
 801589a:	46da      	mov	sl, fp
 801589c:	0728      	lsls	r0, r5, #28
 801589e:	d5c1      	bpl.n	8015824 <_strtod_l+0x84>
 80158a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80158a4:	e7be      	b.n	8015824 <_strtod_l+0x84>
 80158a6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80158aa:	e7f7      	b.n	801589c <_strtod_l+0xfc>
 80158ac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80158b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80158b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80158b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80158ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80158be:	e7ed      	b.n	801589c <_strtod_l+0xfc>
 80158c0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8015a48 <_strtod_l+0x2a8>
 80158c4:	f04f 0a00 	mov.w	sl, #0
 80158c8:	e7e8      	b.n	801589c <_strtod_l+0xfc>
 80158ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80158ce:	f04f 3aff 	mov.w	sl, #4294967295
 80158d2:	e7e3      	b.n	801589c <_strtod_l+0xfc>
 80158d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80158d6:	1c5a      	adds	r2, r3, #1
 80158d8:	921d      	str	r2, [sp, #116]	; 0x74
 80158da:	785b      	ldrb	r3, [r3, #1]
 80158dc:	2b30      	cmp	r3, #48	; 0x30
 80158de:	d0f9      	beq.n	80158d4 <_strtod_l+0x134>
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d09f      	beq.n	8015824 <_strtod_l+0x84>
 80158e4:	2301      	movs	r3, #1
 80158e6:	f04f 0900 	mov.w	r9, #0
 80158ea:	9304      	str	r3, [sp, #16]
 80158ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80158ee:	930a      	str	r3, [sp, #40]	; 0x28
 80158f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80158f4:	464f      	mov	r7, r9
 80158f6:	220a      	movs	r2, #10
 80158f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80158fa:	7806      	ldrb	r6, [r0, #0]
 80158fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015900:	b2d9      	uxtb	r1, r3
 8015902:	2909      	cmp	r1, #9
 8015904:	d92a      	bls.n	801595c <_strtod_l+0x1bc>
 8015906:	9907      	ldr	r1, [sp, #28]
 8015908:	462a      	mov	r2, r5
 801590a:	f7ff ff19 	bl	8015740 <strncmp>
 801590e:	b398      	cbz	r0, 8015978 <_strtod_l+0x1d8>
 8015910:	2000      	movs	r0, #0
 8015912:	4633      	mov	r3, r6
 8015914:	463d      	mov	r5, r7
 8015916:	9007      	str	r0, [sp, #28]
 8015918:	4602      	mov	r2, r0
 801591a:	2b65      	cmp	r3, #101	; 0x65
 801591c:	d001      	beq.n	8015922 <_strtod_l+0x182>
 801591e:	2b45      	cmp	r3, #69	; 0x45
 8015920:	d118      	bne.n	8015954 <_strtod_l+0x1b4>
 8015922:	b91d      	cbnz	r5, 801592c <_strtod_l+0x18c>
 8015924:	9b04      	ldr	r3, [sp, #16]
 8015926:	4303      	orrs	r3, r0
 8015928:	d098      	beq.n	801585c <_strtod_l+0xbc>
 801592a:	2500      	movs	r5, #0
 801592c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8015930:	f108 0301 	add.w	r3, r8, #1
 8015934:	931d      	str	r3, [sp, #116]	; 0x74
 8015936:	f898 3001 	ldrb.w	r3, [r8, #1]
 801593a:	2b2b      	cmp	r3, #43	; 0x2b
 801593c:	d075      	beq.n	8015a2a <_strtod_l+0x28a>
 801593e:	2b2d      	cmp	r3, #45	; 0x2d
 8015940:	d07b      	beq.n	8015a3a <_strtod_l+0x29a>
 8015942:	f04f 0c00 	mov.w	ip, #0
 8015946:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801594a:	2909      	cmp	r1, #9
 801594c:	f240 8082 	bls.w	8015a54 <_strtod_l+0x2b4>
 8015950:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8015954:	2600      	movs	r6, #0
 8015956:	e09d      	b.n	8015a94 <_strtod_l+0x2f4>
 8015958:	2300      	movs	r3, #0
 801595a:	e7c4      	b.n	80158e6 <_strtod_l+0x146>
 801595c:	2f08      	cmp	r7, #8
 801595e:	bfd8      	it	le
 8015960:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8015962:	f100 0001 	add.w	r0, r0, #1
 8015966:	bfda      	itte	le
 8015968:	fb02 3301 	mlale	r3, r2, r1, r3
 801596c:	9309      	strle	r3, [sp, #36]	; 0x24
 801596e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8015972:	3701      	adds	r7, #1
 8015974:	901d      	str	r0, [sp, #116]	; 0x74
 8015976:	e7bf      	b.n	80158f8 <_strtod_l+0x158>
 8015978:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801597a:	195a      	adds	r2, r3, r5
 801597c:	921d      	str	r2, [sp, #116]	; 0x74
 801597e:	5d5b      	ldrb	r3, [r3, r5]
 8015980:	2f00      	cmp	r7, #0
 8015982:	d037      	beq.n	80159f4 <_strtod_l+0x254>
 8015984:	9007      	str	r0, [sp, #28]
 8015986:	463d      	mov	r5, r7
 8015988:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801598c:	2a09      	cmp	r2, #9
 801598e:	d912      	bls.n	80159b6 <_strtod_l+0x216>
 8015990:	2201      	movs	r2, #1
 8015992:	e7c2      	b.n	801591a <_strtod_l+0x17a>
 8015994:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015996:	1c5a      	adds	r2, r3, #1
 8015998:	921d      	str	r2, [sp, #116]	; 0x74
 801599a:	785b      	ldrb	r3, [r3, #1]
 801599c:	3001      	adds	r0, #1
 801599e:	2b30      	cmp	r3, #48	; 0x30
 80159a0:	d0f8      	beq.n	8015994 <_strtod_l+0x1f4>
 80159a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80159a6:	2a08      	cmp	r2, #8
 80159a8:	f200 84db 	bhi.w	8016362 <_strtod_l+0xbc2>
 80159ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80159ae:	9007      	str	r0, [sp, #28]
 80159b0:	2000      	movs	r0, #0
 80159b2:	920a      	str	r2, [sp, #40]	; 0x28
 80159b4:	4605      	mov	r5, r0
 80159b6:	3b30      	subs	r3, #48	; 0x30
 80159b8:	f100 0201 	add.w	r2, r0, #1
 80159bc:	d014      	beq.n	80159e8 <_strtod_l+0x248>
 80159be:	9907      	ldr	r1, [sp, #28]
 80159c0:	4411      	add	r1, r2
 80159c2:	9107      	str	r1, [sp, #28]
 80159c4:	462a      	mov	r2, r5
 80159c6:	eb00 0e05 	add.w	lr, r0, r5
 80159ca:	210a      	movs	r1, #10
 80159cc:	4572      	cmp	r2, lr
 80159ce:	d113      	bne.n	80159f8 <_strtod_l+0x258>
 80159d0:	182a      	adds	r2, r5, r0
 80159d2:	2a08      	cmp	r2, #8
 80159d4:	f105 0501 	add.w	r5, r5, #1
 80159d8:	4405      	add	r5, r0
 80159da:	dc1c      	bgt.n	8015a16 <_strtod_l+0x276>
 80159dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80159de:	220a      	movs	r2, #10
 80159e0:	fb02 3301 	mla	r3, r2, r1, r3
 80159e4:	9309      	str	r3, [sp, #36]	; 0x24
 80159e6:	2200      	movs	r2, #0
 80159e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80159ea:	1c59      	adds	r1, r3, #1
 80159ec:	911d      	str	r1, [sp, #116]	; 0x74
 80159ee:	785b      	ldrb	r3, [r3, #1]
 80159f0:	4610      	mov	r0, r2
 80159f2:	e7c9      	b.n	8015988 <_strtod_l+0x1e8>
 80159f4:	4638      	mov	r0, r7
 80159f6:	e7d2      	b.n	801599e <_strtod_l+0x1fe>
 80159f8:	2a08      	cmp	r2, #8
 80159fa:	dc04      	bgt.n	8015a06 <_strtod_l+0x266>
 80159fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80159fe:	434e      	muls	r6, r1
 8015a00:	9609      	str	r6, [sp, #36]	; 0x24
 8015a02:	3201      	adds	r2, #1
 8015a04:	e7e2      	b.n	80159cc <_strtod_l+0x22c>
 8015a06:	f102 0c01 	add.w	ip, r2, #1
 8015a0a:	f1bc 0f10 	cmp.w	ip, #16
 8015a0e:	bfd8      	it	le
 8015a10:	fb01 f909 	mulle.w	r9, r1, r9
 8015a14:	e7f5      	b.n	8015a02 <_strtod_l+0x262>
 8015a16:	2d10      	cmp	r5, #16
 8015a18:	bfdc      	itt	le
 8015a1a:	220a      	movle	r2, #10
 8015a1c:	fb02 3909 	mlale	r9, r2, r9, r3
 8015a20:	e7e1      	b.n	80159e6 <_strtod_l+0x246>
 8015a22:	2300      	movs	r3, #0
 8015a24:	9307      	str	r3, [sp, #28]
 8015a26:	2201      	movs	r2, #1
 8015a28:	e77c      	b.n	8015924 <_strtod_l+0x184>
 8015a2a:	f04f 0c00 	mov.w	ip, #0
 8015a2e:	f108 0302 	add.w	r3, r8, #2
 8015a32:	931d      	str	r3, [sp, #116]	; 0x74
 8015a34:	f898 3002 	ldrb.w	r3, [r8, #2]
 8015a38:	e785      	b.n	8015946 <_strtod_l+0x1a6>
 8015a3a:	f04f 0c01 	mov.w	ip, #1
 8015a3e:	e7f6      	b.n	8015a2e <_strtod_l+0x28e>
 8015a40:	0801cb78 	.word	0x0801cb78
 8015a44:	0801c93c 	.word	0x0801c93c
 8015a48:	7ff00000 	.word	0x7ff00000
 8015a4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015a4e:	1c59      	adds	r1, r3, #1
 8015a50:	911d      	str	r1, [sp, #116]	; 0x74
 8015a52:	785b      	ldrb	r3, [r3, #1]
 8015a54:	2b30      	cmp	r3, #48	; 0x30
 8015a56:	d0f9      	beq.n	8015a4c <_strtod_l+0x2ac>
 8015a58:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8015a5c:	2908      	cmp	r1, #8
 8015a5e:	f63f af79 	bhi.w	8015954 <_strtod_l+0x1b4>
 8015a62:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015a66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015a68:	9308      	str	r3, [sp, #32]
 8015a6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015a6c:	1c59      	adds	r1, r3, #1
 8015a6e:	911d      	str	r1, [sp, #116]	; 0x74
 8015a70:	785b      	ldrb	r3, [r3, #1]
 8015a72:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8015a76:	2e09      	cmp	r6, #9
 8015a78:	d937      	bls.n	8015aea <_strtod_l+0x34a>
 8015a7a:	9e08      	ldr	r6, [sp, #32]
 8015a7c:	1b89      	subs	r1, r1, r6
 8015a7e:	2908      	cmp	r1, #8
 8015a80:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8015a84:	dc02      	bgt.n	8015a8c <_strtod_l+0x2ec>
 8015a86:	4576      	cmp	r6, lr
 8015a88:	bfa8      	it	ge
 8015a8a:	4676      	movge	r6, lr
 8015a8c:	f1bc 0f00 	cmp.w	ip, #0
 8015a90:	d000      	beq.n	8015a94 <_strtod_l+0x2f4>
 8015a92:	4276      	negs	r6, r6
 8015a94:	2d00      	cmp	r5, #0
 8015a96:	d14f      	bne.n	8015b38 <_strtod_l+0x398>
 8015a98:	9904      	ldr	r1, [sp, #16]
 8015a9a:	4301      	orrs	r1, r0
 8015a9c:	f47f aec2 	bne.w	8015824 <_strtod_l+0x84>
 8015aa0:	2a00      	cmp	r2, #0
 8015aa2:	f47f aedb 	bne.w	801585c <_strtod_l+0xbc>
 8015aa6:	2b69      	cmp	r3, #105	; 0x69
 8015aa8:	d027      	beq.n	8015afa <_strtod_l+0x35a>
 8015aaa:	dc24      	bgt.n	8015af6 <_strtod_l+0x356>
 8015aac:	2b49      	cmp	r3, #73	; 0x49
 8015aae:	d024      	beq.n	8015afa <_strtod_l+0x35a>
 8015ab0:	2b4e      	cmp	r3, #78	; 0x4e
 8015ab2:	f47f aed3 	bne.w	801585c <_strtod_l+0xbc>
 8015ab6:	499e      	ldr	r1, [pc, #632]	; (8015d30 <_strtod_l+0x590>)
 8015ab8:	a81d      	add	r0, sp, #116	; 0x74
 8015aba:	f001 ff3f 	bl	801793c <__match>
 8015abe:	2800      	cmp	r0, #0
 8015ac0:	f43f aecc 	beq.w	801585c <_strtod_l+0xbc>
 8015ac4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015ac6:	781b      	ldrb	r3, [r3, #0]
 8015ac8:	2b28      	cmp	r3, #40	; 0x28
 8015aca:	d12d      	bne.n	8015b28 <_strtod_l+0x388>
 8015acc:	4999      	ldr	r1, [pc, #612]	; (8015d34 <_strtod_l+0x594>)
 8015ace:	aa20      	add	r2, sp, #128	; 0x80
 8015ad0:	a81d      	add	r0, sp, #116	; 0x74
 8015ad2:	f001 ff47 	bl	8017964 <__hexnan>
 8015ad6:	2805      	cmp	r0, #5
 8015ad8:	d126      	bne.n	8015b28 <_strtod_l+0x388>
 8015ada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015adc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8015ae0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015ae4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015ae8:	e69c      	b.n	8015824 <_strtod_l+0x84>
 8015aea:	210a      	movs	r1, #10
 8015aec:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015af0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015af4:	e7b9      	b.n	8015a6a <_strtod_l+0x2ca>
 8015af6:	2b6e      	cmp	r3, #110	; 0x6e
 8015af8:	e7db      	b.n	8015ab2 <_strtod_l+0x312>
 8015afa:	498f      	ldr	r1, [pc, #572]	; (8015d38 <_strtod_l+0x598>)
 8015afc:	a81d      	add	r0, sp, #116	; 0x74
 8015afe:	f001 ff1d 	bl	801793c <__match>
 8015b02:	2800      	cmp	r0, #0
 8015b04:	f43f aeaa 	beq.w	801585c <_strtod_l+0xbc>
 8015b08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015b0a:	498c      	ldr	r1, [pc, #560]	; (8015d3c <_strtod_l+0x59c>)
 8015b0c:	3b01      	subs	r3, #1
 8015b0e:	a81d      	add	r0, sp, #116	; 0x74
 8015b10:	931d      	str	r3, [sp, #116]	; 0x74
 8015b12:	f001 ff13 	bl	801793c <__match>
 8015b16:	b910      	cbnz	r0, 8015b1e <_strtod_l+0x37e>
 8015b18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015b1a:	3301      	adds	r3, #1
 8015b1c:	931d      	str	r3, [sp, #116]	; 0x74
 8015b1e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8015d4c <_strtod_l+0x5ac>
 8015b22:	f04f 0a00 	mov.w	sl, #0
 8015b26:	e67d      	b.n	8015824 <_strtod_l+0x84>
 8015b28:	4885      	ldr	r0, [pc, #532]	; (8015d40 <_strtod_l+0x5a0>)
 8015b2a:	f002 ff5d 	bl	80189e8 <nan>
 8015b2e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8015b32:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8015b36:	e675      	b.n	8015824 <_strtod_l+0x84>
 8015b38:	9b07      	ldr	r3, [sp, #28]
 8015b3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b3c:	1af3      	subs	r3, r6, r3
 8015b3e:	2f00      	cmp	r7, #0
 8015b40:	bf08      	it	eq
 8015b42:	462f      	moveq	r7, r5
 8015b44:	2d10      	cmp	r5, #16
 8015b46:	9308      	str	r3, [sp, #32]
 8015b48:	46a8      	mov	r8, r5
 8015b4a:	bfa8      	it	ge
 8015b4c:	f04f 0810 	movge.w	r8, #16
 8015b50:	f7ea fcf8 	bl	8000544 <__aeabi_ui2d>
 8015b54:	2d09      	cmp	r5, #9
 8015b56:	4682      	mov	sl, r0
 8015b58:	468b      	mov	fp, r1
 8015b5a:	dd13      	ble.n	8015b84 <_strtod_l+0x3e4>
 8015b5c:	4b79      	ldr	r3, [pc, #484]	; (8015d44 <_strtod_l+0x5a4>)
 8015b5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015b62:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015b66:	f7ea fd67 	bl	8000638 <__aeabi_dmul>
 8015b6a:	4682      	mov	sl, r0
 8015b6c:	4648      	mov	r0, r9
 8015b6e:	468b      	mov	fp, r1
 8015b70:	f7ea fce8 	bl	8000544 <__aeabi_ui2d>
 8015b74:	4602      	mov	r2, r0
 8015b76:	460b      	mov	r3, r1
 8015b78:	4650      	mov	r0, sl
 8015b7a:	4659      	mov	r1, fp
 8015b7c:	f7ea fba6 	bl	80002cc <__adddf3>
 8015b80:	4682      	mov	sl, r0
 8015b82:	468b      	mov	fp, r1
 8015b84:	2d0f      	cmp	r5, #15
 8015b86:	dc38      	bgt.n	8015bfa <_strtod_l+0x45a>
 8015b88:	9b08      	ldr	r3, [sp, #32]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	f43f ae4a 	beq.w	8015824 <_strtod_l+0x84>
 8015b90:	dd24      	ble.n	8015bdc <_strtod_l+0x43c>
 8015b92:	2b16      	cmp	r3, #22
 8015b94:	dc0b      	bgt.n	8015bae <_strtod_l+0x40e>
 8015b96:	4d6b      	ldr	r5, [pc, #428]	; (8015d44 <_strtod_l+0x5a4>)
 8015b98:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8015b9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015ba0:	4652      	mov	r2, sl
 8015ba2:	465b      	mov	r3, fp
 8015ba4:	f7ea fd48 	bl	8000638 <__aeabi_dmul>
 8015ba8:	4682      	mov	sl, r0
 8015baa:	468b      	mov	fp, r1
 8015bac:	e63a      	b.n	8015824 <_strtod_l+0x84>
 8015bae:	9a08      	ldr	r2, [sp, #32]
 8015bb0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8015bb4:	4293      	cmp	r3, r2
 8015bb6:	db20      	blt.n	8015bfa <_strtod_l+0x45a>
 8015bb8:	4c62      	ldr	r4, [pc, #392]	; (8015d44 <_strtod_l+0x5a4>)
 8015bba:	f1c5 050f 	rsb	r5, r5, #15
 8015bbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8015bc2:	4652      	mov	r2, sl
 8015bc4:	465b      	mov	r3, fp
 8015bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bca:	f7ea fd35 	bl	8000638 <__aeabi_dmul>
 8015bce:	9b08      	ldr	r3, [sp, #32]
 8015bd0:	1b5d      	subs	r5, r3, r5
 8015bd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8015bd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015bda:	e7e3      	b.n	8015ba4 <_strtod_l+0x404>
 8015bdc:	9b08      	ldr	r3, [sp, #32]
 8015bde:	3316      	adds	r3, #22
 8015be0:	db0b      	blt.n	8015bfa <_strtod_l+0x45a>
 8015be2:	9b07      	ldr	r3, [sp, #28]
 8015be4:	4a57      	ldr	r2, [pc, #348]	; (8015d44 <_strtod_l+0x5a4>)
 8015be6:	1b9e      	subs	r6, r3, r6
 8015be8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8015bec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015bf0:	4650      	mov	r0, sl
 8015bf2:	4659      	mov	r1, fp
 8015bf4:	f7ea fe4a 	bl	800088c <__aeabi_ddiv>
 8015bf8:	e7d6      	b.n	8015ba8 <_strtod_l+0x408>
 8015bfa:	9b08      	ldr	r3, [sp, #32]
 8015bfc:	eba5 0808 	sub.w	r8, r5, r8
 8015c00:	4498      	add	r8, r3
 8015c02:	f1b8 0f00 	cmp.w	r8, #0
 8015c06:	dd71      	ble.n	8015cec <_strtod_l+0x54c>
 8015c08:	f018 030f 	ands.w	r3, r8, #15
 8015c0c:	d00a      	beq.n	8015c24 <_strtod_l+0x484>
 8015c0e:	494d      	ldr	r1, [pc, #308]	; (8015d44 <_strtod_l+0x5a4>)
 8015c10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015c14:	4652      	mov	r2, sl
 8015c16:	465b      	mov	r3, fp
 8015c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c1c:	f7ea fd0c 	bl	8000638 <__aeabi_dmul>
 8015c20:	4682      	mov	sl, r0
 8015c22:	468b      	mov	fp, r1
 8015c24:	f038 080f 	bics.w	r8, r8, #15
 8015c28:	d04d      	beq.n	8015cc6 <_strtod_l+0x526>
 8015c2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015c2e:	dd22      	ble.n	8015c76 <_strtod_l+0x4d6>
 8015c30:	2500      	movs	r5, #0
 8015c32:	462e      	mov	r6, r5
 8015c34:	9509      	str	r5, [sp, #36]	; 0x24
 8015c36:	9507      	str	r5, [sp, #28]
 8015c38:	2322      	movs	r3, #34	; 0x22
 8015c3a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8015d4c <_strtod_l+0x5ac>
 8015c3e:	6023      	str	r3, [r4, #0]
 8015c40:	f04f 0a00 	mov.w	sl, #0
 8015c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	f43f adec 	beq.w	8015824 <_strtod_l+0x84>
 8015c4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015c4e:	4620      	mov	r0, r4
 8015c50:	f001 ff8a 	bl	8017b68 <_Bfree>
 8015c54:	9907      	ldr	r1, [sp, #28]
 8015c56:	4620      	mov	r0, r4
 8015c58:	f001 ff86 	bl	8017b68 <_Bfree>
 8015c5c:	4631      	mov	r1, r6
 8015c5e:	4620      	mov	r0, r4
 8015c60:	f001 ff82 	bl	8017b68 <_Bfree>
 8015c64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c66:	4620      	mov	r0, r4
 8015c68:	f001 ff7e 	bl	8017b68 <_Bfree>
 8015c6c:	4629      	mov	r1, r5
 8015c6e:	4620      	mov	r0, r4
 8015c70:	f001 ff7a 	bl	8017b68 <_Bfree>
 8015c74:	e5d6      	b.n	8015824 <_strtod_l+0x84>
 8015c76:	2300      	movs	r3, #0
 8015c78:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015c7c:	4650      	mov	r0, sl
 8015c7e:	4659      	mov	r1, fp
 8015c80:	4699      	mov	r9, r3
 8015c82:	f1b8 0f01 	cmp.w	r8, #1
 8015c86:	dc21      	bgt.n	8015ccc <_strtod_l+0x52c>
 8015c88:	b10b      	cbz	r3, 8015c8e <_strtod_l+0x4ee>
 8015c8a:	4682      	mov	sl, r0
 8015c8c:	468b      	mov	fp, r1
 8015c8e:	4b2e      	ldr	r3, [pc, #184]	; (8015d48 <_strtod_l+0x5a8>)
 8015c90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015c94:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8015c98:	4652      	mov	r2, sl
 8015c9a:	465b      	mov	r3, fp
 8015c9c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8015ca0:	f7ea fcca 	bl	8000638 <__aeabi_dmul>
 8015ca4:	4b29      	ldr	r3, [pc, #164]	; (8015d4c <_strtod_l+0x5ac>)
 8015ca6:	460a      	mov	r2, r1
 8015ca8:	400b      	ands	r3, r1
 8015caa:	4929      	ldr	r1, [pc, #164]	; (8015d50 <_strtod_l+0x5b0>)
 8015cac:	428b      	cmp	r3, r1
 8015cae:	4682      	mov	sl, r0
 8015cb0:	d8be      	bhi.n	8015c30 <_strtod_l+0x490>
 8015cb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015cb6:	428b      	cmp	r3, r1
 8015cb8:	bf86      	itte	hi
 8015cba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015d54 <_strtod_l+0x5b4>
 8015cbe:	f04f 3aff 	movhi.w	sl, #4294967295
 8015cc2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	9304      	str	r3, [sp, #16]
 8015cca:	e081      	b.n	8015dd0 <_strtod_l+0x630>
 8015ccc:	f018 0f01 	tst.w	r8, #1
 8015cd0:	d007      	beq.n	8015ce2 <_strtod_l+0x542>
 8015cd2:	4b1d      	ldr	r3, [pc, #116]	; (8015d48 <_strtod_l+0x5a8>)
 8015cd4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8015cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cdc:	f7ea fcac 	bl	8000638 <__aeabi_dmul>
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	f109 0901 	add.w	r9, r9, #1
 8015ce6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015cea:	e7ca      	b.n	8015c82 <_strtod_l+0x4e2>
 8015cec:	d0eb      	beq.n	8015cc6 <_strtod_l+0x526>
 8015cee:	f1c8 0800 	rsb	r8, r8, #0
 8015cf2:	f018 020f 	ands.w	r2, r8, #15
 8015cf6:	d00a      	beq.n	8015d0e <_strtod_l+0x56e>
 8015cf8:	4b12      	ldr	r3, [pc, #72]	; (8015d44 <_strtod_l+0x5a4>)
 8015cfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015cfe:	4650      	mov	r0, sl
 8015d00:	4659      	mov	r1, fp
 8015d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d06:	f7ea fdc1 	bl	800088c <__aeabi_ddiv>
 8015d0a:	4682      	mov	sl, r0
 8015d0c:	468b      	mov	fp, r1
 8015d0e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015d12:	d0d8      	beq.n	8015cc6 <_strtod_l+0x526>
 8015d14:	f1b8 0f1f 	cmp.w	r8, #31
 8015d18:	dd1e      	ble.n	8015d58 <_strtod_l+0x5b8>
 8015d1a:	2500      	movs	r5, #0
 8015d1c:	462e      	mov	r6, r5
 8015d1e:	9509      	str	r5, [sp, #36]	; 0x24
 8015d20:	9507      	str	r5, [sp, #28]
 8015d22:	2322      	movs	r3, #34	; 0x22
 8015d24:	f04f 0a00 	mov.w	sl, #0
 8015d28:	f04f 0b00 	mov.w	fp, #0
 8015d2c:	6023      	str	r3, [r4, #0]
 8015d2e:	e789      	b.n	8015c44 <_strtod_l+0x4a4>
 8015d30:	0801c89d 	.word	0x0801c89d
 8015d34:	0801c950 	.word	0x0801c950
 8015d38:	0801c895 	.word	0x0801c895
 8015d3c:	0801ca30 	.word	0x0801ca30
 8015d40:	0801ca2c 	.word	0x0801ca2c
 8015d44:	0801cc18 	.word	0x0801cc18
 8015d48:	0801cbf0 	.word	0x0801cbf0
 8015d4c:	7ff00000 	.word	0x7ff00000
 8015d50:	7ca00000 	.word	0x7ca00000
 8015d54:	7fefffff 	.word	0x7fefffff
 8015d58:	f018 0310 	ands.w	r3, r8, #16
 8015d5c:	bf18      	it	ne
 8015d5e:	236a      	movne	r3, #106	; 0x6a
 8015d60:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8016118 <_strtod_l+0x978>
 8015d64:	9304      	str	r3, [sp, #16]
 8015d66:	4650      	mov	r0, sl
 8015d68:	4659      	mov	r1, fp
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	f018 0f01 	tst.w	r8, #1
 8015d70:	d004      	beq.n	8015d7c <_strtod_l+0x5dc>
 8015d72:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015d76:	f7ea fc5f 	bl	8000638 <__aeabi_dmul>
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8015d80:	f109 0908 	add.w	r9, r9, #8
 8015d84:	d1f2      	bne.n	8015d6c <_strtod_l+0x5cc>
 8015d86:	b10b      	cbz	r3, 8015d8c <_strtod_l+0x5ec>
 8015d88:	4682      	mov	sl, r0
 8015d8a:	468b      	mov	fp, r1
 8015d8c:	9b04      	ldr	r3, [sp, #16]
 8015d8e:	b1bb      	cbz	r3, 8015dc0 <_strtod_l+0x620>
 8015d90:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015d94:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	4659      	mov	r1, fp
 8015d9c:	dd10      	ble.n	8015dc0 <_strtod_l+0x620>
 8015d9e:	2b1f      	cmp	r3, #31
 8015da0:	f340 8128 	ble.w	8015ff4 <_strtod_l+0x854>
 8015da4:	2b34      	cmp	r3, #52	; 0x34
 8015da6:	bfde      	ittt	le
 8015da8:	3b20      	suble	r3, #32
 8015daa:	f04f 32ff 	movle.w	r2, #4294967295
 8015dae:	fa02 f303 	lslle.w	r3, r2, r3
 8015db2:	f04f 0a00 	mov.w	sl, #0
 8015db6:	bfcc      	ite	gt
 8015db8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015dbc:	ea03 0b01 	andle.w	fp, r3, r1
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	4650      	mov	r0, sl
 8015dc6:	4659      	mov	r1, fp
 8015dc8:	f7ea fe9e 	bl	8000b08 <__aeabi_dcmpeq>
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	d1a4      	bne.n	8015d1a <_strtod_l+0x57a>
 8015dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dd2:	9300      	str	r3, [sp, #0]
 8015dd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015dd6:	462b      	mov	r3, r5
 8015dd8:	463a      	mov	r2, r7
 8015dda:	4620      	mov	r0, r4
 8015ddc:	f001 ff30 	bl	8017c40 <__s2b>
 8015de0:	9009      	str	r0, [sp, #36]	; 0x24
 8015de2:	2800      	cmp	r0, #0
 8015de4:	f43f af24 	beq.w	8015c30 <_strtod_l+0x490>
 8015de8:	9b07      	ldr	r3, [sp, #28]
 8015dea:	1b9e      	subs	r6, r3, r6
 8015dec:	9b08      	ldr	r3, [sp, #32]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	bfb4      	ite	lt
 8015df2:	4633      	movlt	r3, r6
 8015df4:	2300      	movge	r3, #0
 8015df6:	9310      	str	r3, [sp, #64]	; 0x40
 8015df8:	9b08      	ldr	r3, [sp, #32]
 8015dfa:	2500      	movs	r5, #0
 8015dfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015e00:	9318      	str	r3, [sp, #96]	; 0x60
 8015e02:	462e      	mov	r6, r5
 8015e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e06:	4620      	mov	r0, r4
 8015e08:	6859      	ldr	r1, [r3, #4]
 8015e0a:	f001 fe6d 	bl	8017ae8 <_Balloc>
 8015e0e:	9007      	str	r0, [sp, #28]
 8015e10:	2800      	cmp	r0, #0
 8015e12:	f43f af11 	beq.w	8015c38 <_strtod_l+0x498>
 8015e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e18:	691a      	ldr	r2, [r3, #16]
 8015e1a:	3202      	adds	r2, #2
 8015e1c:	f103 010c 	add.w	r1, r3, #12
 8015e20:	0092      	lsls	r2, r2, #2
 8015e22:	300c      	adds	r0, #12
 8015e24:	f7fe fec0 	bl	8014ba8 <memcpy>
 8015e28:	ec4b ab10 	vmov	d0, sl, fp
 8015e2c:	aa20      	add	r2, sp, #128	; 0x80
 8015e2e:	a91f      	add	r1, sp, #124	; 0x7c
 8015e30:	4620      	mov	r0, r4
 8015e32:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8015e36:	f002 fa3f 	bl	80182b8 <__d2b>
 8015e3a:	901e      	str	r0, [sp, #120]	; 0x78
 8015e3c:	2800      	cmp	r0, #0
 8015e3e:	f43f aefb 	beq.w	8015c38 <_strtod_l+0x498>
 8015e42:	2101      	movs	r1, #1
 8015e44:	4620      	mov	r0, r4
 8015e46:	f001 ff95 	bl	8017d74 <__i2b>
 8015e4a:	4606      	mov	r6, r0
 8015e4c:	2800      	cmp	r0, #0
 8015e4e:	f43f aef3 	beq.w	8015c38 <_strtod_l+0x498>
 8015e52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015e54:	9904      	ldr	r1, [sp, #16]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	bfab      	itete	ge
 8015e5a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8015e5c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8015e5e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8015e60:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8015e64:	bfac      	ite	ge
 8015e66:	eb03 0902 	addge.w	r9, r3, r2
 8015e6a:	1ad7      	sublt	r7, r2, r3
 8015e6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015e6e:	eba3 0801 	sub.w	r8, r3, r1
 8015e72:	4490      	add	r8, r2
 8015e74:	4ba3      	ldr	r3, [pc, #652]	; (8016104 <_strtod_l+0x964>)
 8015e76:	f108 38ff 	add.w	r8, r8, #4294967295
 8015e7a:	4598      	cmp	r8, r3
 8015e7c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015e80:	f280 80cc 	bge.w	801601c <_strtod_l+0x87c>
 8015e84:	eba3 0308 	sub.w	r3, r3, r8
 8015e88:	2b1f      	cmp	r3, #31
 8015e8a:	eba2 0203 	sub.w	r2, r2, r3
 8015e8e:	f04f 0101 	mov.w	r1, #1
 8015e92:	f300 80b6 	bgt.w	8016002 <_strtod_l+0x862>
 8015e96:	fa01 f303 	lsl.w	r3, r1, r3
 8015e9a:	9311      	str	r3, [sp, #68]	; 0x44
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8015ea0:	eb09 0802 	add.w	r8, r9, r2
 8015ea4:	9b04      	ldr	r3, [sp, #16]
 8015ea6:	45c1      	cmp	r9, r8
 8015ea8:	4417      	add	r7, r2
 8015eaa:	441f      	add	r7, r3
 8015eac:	464b      	mov	r3, r9
 8015eae:	bfa8      	it	ge
 8015eb0:	4643      	movge	r3, r8
 8015eb2:	42bb      	cmp	r3, r7
 8015eb4:	bfa8      	it	ge
 8015eb6:	463b      	movge	r3, r7
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	bfc2      	ittt	gt
 8015ebc:	eba8 0803 	subgt.w	r8, r8, r3
 8015ec0:	1aff      	subgt	r7, r7, r3
 8015ec2:	eba9 0903 	subgt.w	r9, r9, r3
 8015ec6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	dd17      	ble.n	8015efc <_strtod_l+0x75c>
 8015ecc:	4631      	mov	r1, r6
 8015ece:	461a      	mov	r2, r3
 8015ed0:	4620      	mov	r0, r4
 8015ed2:	f002 f80b 	bl	8017eec <__pow5mult>
 8015ed6:	4606      	mov	r6, r0
 8015ed8:	2800      	cmp	r0, #0
 8015eda:	f43f aead 	beq.w	8015c38 <_strtod_l+0x498>
 8015ede:	4601      	mov	r1, r0
 8015ee0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015ee2:	4620      	mov	r0, r4
 8015ee4:	f001 ff5c 	bl	8017da0 <__multiply>
 8015ee8:	900f      	str	r0, [sp, #60]	; 0x3c
 8015eea:	2800      	cmp	r0, #0
 8015eec:	f43f aea4 	beq.w	8015c38 <_strtod_l+0x498>
 8015ef0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015ef2:	4620      	mov	r0, r4
 8015ef4:	f001 fe38 	bl	8017b68 <_Bfree>
 8015ef8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015efa:	931e      	str	r3, [sp, #120]	; 0x78
 8015efc:	f1b8 0f00 	cmp.w	r8, #0
 8015f00:	f300 8091 	bgt.w	8016026 <_strtod_l+0x886>
 8015f04:	9b08      	ldr	r3, [sp, #32]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	dd08      	ble.n	8015f1c <_strtod_l+0x77c>
 8015f0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015f0c:	9907      	ldr	r1, [sp, #28]
 8015f0e:	4620      	mov	r0, r4
 8015f10:	f001 ffec 	bl	8017eec <__pow5mult>
 8015f14:	9007      	str	r0, [sp, #28]
 8015f16:	2800      	cmp	r0, #0
 8015f18:	f43f ae8e 	beq.w	8015c38 <_strtod_l+0x498>
 8015f1c:	2f00      	cmp	r7, #0
 8015f1e:	dd08      	ble.n	8015f32 <_strtod_l+0x792>
 8015f20:	9907      	ldr	r1, [sp, #28]
 8015f22:	463a      	mov	r2, r7
 8015f24:	4620      	mov	r0, r4
 8015f26:	f002 f83b 	bl	8017fa0 <__lshift>
 8015f2a:	9007      	str	r0, [sp, #28]
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	f43f ae83 	beq.w	8015c38 <_strtod_l+0x498>
 8015f32:	f1b9 0f00 	cmp.w	r9, #0
 8015f36:	dd08      	ble.n	8015f4a <_strtod_l+0x7aa>
 8015f38:	4631      	mov	r1, r6
 8015f3a:	464a      	mov	r2, r9
 8015f3c:	4620      	mov	r0, r4
 8015f3e:	f002 f82f 	bl	8017fa0 <__lshift>
 8015f42:	4606      	mov	r6, r0
 8015f44:	2800      	cmp	r0, #0
 8015f46:	f43f ae77 	beq.w	8015c38 <_strtod_l+0x498>
 8015f4a:	9a07      	ldr	r2, [sp, #28]
 8015f4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015f4e:	4620      	mov	r0, r4
 8015f50:	f002 f8ae 	bl	80180b0 <__mdiff>
 8015f54:	4605      	mov	r5, r0
 8015f56:	2800      	cmp	r0, #0
 8015f58:	f43f ae6e 	beq.w	8015c38 <_strtod_l+0x498>
 8015f5c:	68c3      	ldr	r3, [r0, #12]
 8015f5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f60:	2300      	movs	r3, #0
 8015f62:	60c3      	str	r3, [r0, #12]
 8015f64:	4631      	mov	r1, r6
 8015f66:	f002 f887 	bl	8018078 <__mcmp>
 8015f6a:	2800      	cmp	r0, #0
 8015f6c:	da65      	bge.n	801603a <_strtod_l+0x89a>
 8015f6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f70:	ea53 030a 	orrs.w	r3, r3, sl
 8015f74:	f040 8087 	bne.w	8016086 <_strtod_l+0x8e6>
 8015f78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	f040 8082 	bne.w	8016086 <_strtod_l+0x8e6>
 8015f82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015f86:	0d1b      	lsrs	r3, r3, #20
 8015f88:	051b      	lsls	r3, r3, #20
 8015f8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015f8e:	d97a      	bls.n	8016086 <_strtod_l+0x8e6>
 8015f90:	696b      	ldr	r3, [r5, #20]
 8015f92:	b913      	cbnz	r3, 8015f9a <_strtod_l+0x7fa>
 8015f94:	692b      	ldr	r3, [r5, #16]
 8015f96:	2b01      	cmp	r3, #1
 8015f98:	dd75      	ble.n	8016086 <_strtod_l+0x8e6>
 8015f9a:	4629      	mov	r1, r5
 8015f9c:	2201      	movs	r2, #1
 8015f9e:	4620      	mov	r0, r4
 8015fa0:	f001 fffe 	bl	8017fa0 <__lshift>
 8015fa4:	4631      	mov	r1, r6
 8015fa6:	4605      	mov	r5, r0
 8015fa8:	f002 f866 	bl	8018078 <__mcmp>
 8015fac:	2800      	cmp	r0, #0
 8015fae:	dd6a      	ble.n	8016086 <_strtod_l+0x8e6>
 8015fb0:	9904      	ldr	r1, [sp, #16]
 8015fb2:	4a55      	ldr	r2, [pc, #340]	; (8016108 <_strtod_l+0x968>)
 8015fb4:	465b      	mov	r3, fp
 8015fb6:	2900      	cmp	r1, #0
 8015fb8:	f000 8085 	beq.w	80160c6 <_strtod_l+0x926>
 8015fbc:	ea02 010b 	and.w	r1, r2, fp
 8015fc0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015fc4:	dc7f      	bgt.n	80160c6 <_strtod_l+0x926>
 8015fc6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015fca:	f77f aeaa 	ble.w	8015d22 <_strtod_l+0x582>
 8015fce:	4a4f      	ldr	r2, [pc, #316]	; (801610c <_strtod_l+0x96c>)
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8015fd6:	4650      	mov	r0, sl
 8015fd8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8015fdc:	4659      	mov	r1, fp
 8015fde:	f7ea fb2b 	bl	8000638 <__aeabi_dmul>
 8015fe2:	460b      	mov	r3, r1
 8015fe4:	4303      	orrs	r3, r0
 8015fe6:	bf08      	it	eq
 8015fe8:	2322      	moveq	r3, #34	; 0x22
 8015fea:	4682      	mov	sl, r0
 8015fec:	468b      	mov	fp, r1
 8015fee:	bf08      	it	eq
 8015ff0:	6023      	streq	r3, [r4, #0]
 8015ff2:	e62b      	b.n	8015c4c <_strtod_l+0x4ac>
 8015ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8015ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8015ffc:	ea03 0a0a 	and.w	sl, r3, sl
 8016000:	e6de      	b.n	8015dc0 <_strtod_l+0x620>
 8016002:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8016006:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801600a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801600e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8016012:	fa01 f308 	lsl.w	r3, r1, r8
 8016016:	930c      	str	r3, [sp, #48]	; 0x30
 8016018:	9111      	str	r1, [sp, #68]	; 0x44
 801601a:	e741      	b.n	8015ea0 <_strtod_l+0x700>
 801601c:	2300      	movs	r3, #0
 801601e:	930c      	str	r3, [sp, #48]	; 0x30
 8016020:	2301      	movs	r3, #1
 8016022:	9311      	str	r3, [sp, #68]	; 0x44
 8016024:	e73c      	b.n	8015ea0 <_strtod_l+0x700>
 8016026:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016028:	4642      	mov	r2, r8
 801602a:	4620      	mov	r0, r4
 801602c:	f001 ffb8 	bl	8017fa0 <__lshift>
 8016030:	901e      	str	r0, [sp, #120]	; 0x78
 8016032:	2800      	cmp	r0, #0
 8016034:	f47f af66 	bne.w	8015f04 <_strtod_l+0x764>
 8016038:	e5fe      	b.n	8015c38 <_strtod_l+0x498>
 801603a:	465f      	mov	r7, fp
 801603c:	d16e      	bne.n	801611c <_strtod_l+0x97c>
 801603e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016040:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016044:	b342      	cbz	r2, 8016098 <_strtod_l+0x8f8>
 8016046:	4a32      	ldr	r2, [pc, #200]	; (8016110 <_strtod_l+0x970>)
 8016048:	4293      	cmp	r3, r2
 801604a:	d128      	bne.n	801609e <_strtod_l+0x8fe>
 801604c:	9b04      	ldr	r3, [sp, #16]
 801604e:	4650      	mov	r0, sl
 8016050:	b1eb      	cbz	r3, 801608e <_strtod_l+0x8ee>
 8016052:	4a2d      	ldr	r2, [pc, #180]	; (8016108 <_strtod_l+0x968>)
 8016054:	403a      	ands	r2, r7
 8016056:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801605a:	f04f 31ff 	mov.w	r1, #4294967295
 801605e:	d819      	bhi.n	8016094 <_strtod_l+0x8f4>
 8016060:	0d12      	lsrs	r2, r2, #20
 8016062:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016066:	fa01 f303 	lsl.w	r3, r1, r3
 801606a:	4298      	cmp	r0, r3
 801606c:	d117      	bne.n	801609e <_strtod_l+0x8fe>
 801606e:	4b29      	ldr	r3, [pc, #164]	; (8016114 <_strtod_l+0x974>)
 8016070:	429f      	cmp	r7, r3
 8016072:	d102      	bne.n	801607a <_strtod_l+0x8da>
 8016074:	3001      	adds	r0, #1
 8016076:	f43f addf 	beq.w	8015c38 <_strtod_l+0x498>
 801607a:	4b23      	ldr	r3, [pc, #140]	; (8016108 <_strtod_l+0x968>)
 801607c:	403b      	ands	r3, r7
 801607e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016082:	f04f 0a00 	mov.w	sl, #0
 8016086:	9b04      	ldr	r3, [sp, #16]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d1a0      	bne.n	8015fce <_strtod_l+0x82e>
 801608c:	e5de      	b.n	8015c4c <_strtod_l+0x4ac>
 801608e:	f04f 33ff 	mov.w	r3, #4294967295
 8016092:	e7ea      	b.n	801606a <_strtod_l+0x8ca>
 8016094:	460b      	mov	r3, r1
 8016096:	e7e8      	b.n	801606a <_strtod_l+0x8ca>
 8016098:	ea53 030a 	orrs.w	r3, r3, sl
 801609c:	d088      	beq.n	8015fb0 <_strtod_l+0x810>
 801609e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160a0:	b1db      	cbz	r3, 80160da <_strtod_l+0x93a>
 80160a2:	423b      	tst	r3, r7
 80160a4:	d0ef      	beq.n	8016086 <_strtod_l+0x8e6>
 80160a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80160a8:	9a04      	ldr	r2, [sp, #16]
 80160aa:	4650      	mov	r0, sl
 80160ac:	4659      	mov	r1, fp
 80160ae:	b1c3      	cbz	r3, 80160e2 <_strtod_l+0x942>
 80160b0:	f7ff fb58 	bl	8015764 <sulp>
 80160b4:	4602      	mov	r2, r0
 80160b6:	460b      	mov	r3, r1
 80160b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80160bc:	f7ea f906 	bl	80002cc <__adddf3>
 80160c0:	4682      	mov	sl, r0
 80160c2:	468b      	mov	fp, r1
 80160c4:	e7df      	b.n	8016086 <_strtod_l+0x8e6>
 80160c6:	4013      	ands	r3, r2
 80160c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80160cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80160d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80160d4:	f04f 3aff 	mov.w	sl, #4294967295
 80160d8:	e7d5      	b.n	8016086 <_strtod_l+0x8e6>
 80160da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80160dc:	ea13 0f0a 	tst.w	r3, sl
 80160e0:	e7e0      	b.n	80160a4 <_strtod_l+0x904>
 80160e2:	f7ff fb3f 	bl	8015764 <sulp>
 80160e6:	4602      	mov	r2, r0
 80160e8:	460b      	mov	r3, r1
 80160ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80160ee:	f7ea f8eb 	bl	80002c8 <__aeabi_dsub>
 80160f2:	2200      	movs	r2, #0
 80160f4:	2300      	movs	r3, #0
 80160f6:	4682      	mov	sl, r0
 80160f8:	468b      	mov	fp, r1
 80160fa:	f7ea fd05 	bl	8000b08 <__aeabi_dcmpeq>
 80160fe:	2800      	cmp	r0, #0
 8016100:	d0c1      	beq.n	8016086 <_strtod_l+0x8e6>
 8016102:	e60e      	b.n	8015d22 <_strtod_l+0x582>
 8016104:	fffffc02 	.word	0xfffffc02
 8016108:	7ff00000 	.word	0x7ff00000
 801610c:	39500000 	.word	0x39500000
 8016110:	000fffff 	.word	0x000fffff
 8016114:	7fefffff 	.word	0x7fefffff
 8016118:	0801c968 	.word	0x0801c968
 801611c:	4631      	mov	r1, r6
 801611e:	4628      	mov	r0, r5
 8016120:	f002 f926 	bl	8018370 <__ratio>
 8016124:	ec59 8b10 	vmov	r8, r9, d0
 8016128:	ee10 0a10 	vmov	r0, s0
 801612c:	2200      	movs	r2, #0
 801612e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016132:	4649      	mov	r1, r9
 8016134:	f7ea fcfc 	bl	8000b30 <__aeabi_dcmple>
 8016138:	2800      	cmp	r0, #0
 801613a:	d07c      	beq.n	8016236 <_strtod_l+0xa96>
 801613c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801613e:	2b00      	cmp	r3, #0
 8016140:	d04c      	beq.n	80161dc <_strtod_l+0xa3c>
 8016142:	4b95      	ldr	r3, [pc, #596]	; (8016398 <_strtod_l+0xbf8>)
 8016144:	2200      	movs	r2, #0
 8016146:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801614a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8016398 <_strtod_l+0xbf8>
 801614e:	f04f 0800 	mov.w	r8, #0
 8016152:	4b92      	ldr	r3, [pc, #584]	; (801639c <_strtod_l+0xbfc>)
 8016154:	403b      	ands	r3, r7
 8016156:	9311      	str	r3, [sp, #68]	; 0x44
 8016158:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801615a:	4b91      	ldr	r3, [pc, #580]	; (80163a0 <_strtod_l+0xc00>)
 801615c:	429a      	cmp	r2, r3
 801615e:	f040 80b2 	bne.w	80162c6 <_strtod_l+0xb26>
 8016162:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016166:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801616a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801616e:	ec4b ab10 	vmov	d0, sl, fp
 8016172:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8016176:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801617a:	f002 f821 	bl	80181c0 <__ulp>
 801617e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016182:	ec53 2b10 	vmov	r2, r3, d0
 8016186:	f7ea fa57 	bl	8000638 <__aeabi_dmul>
 801618a:	4652      	mov	r2, sl
 801618c:	465b      	mov	r3, fp
 801618e:	f7ea f89d 	bl	80002cc <__adddf3>
 8016192:	460b      	mov	r3, r1
 8016194:	4981      	ldr	r1, [pc, #516]	; (801639c <_strtod_l+0xbfc>)
 8016196:	4a83      	ldr	r2, [pc, #524]	; (80163a4 <_strtod_l+0xc04>)
 8016198:	4019      	ands	r1, r3
 801619a:	4291      	cmp	r1, r2
 801619c:	4682      	mov	sl, r0
 801619e:	d95e      	bls.n	801625e <_strtod_l+0xabe>
 80161a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161a2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80161a6:	4293      	cmp	r3, r2
 80161a8:	d103      	bne.n	80161b2 <_strtod_l+0xa12>
 80161aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161ac:	3301      	adds	r3, #1
 80161ae:	f43f ad43 	beq.w	8015c38 <_strtod_l+0x498>
 80161b2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80163b0 <_strtod_l+0xc10>
 80161b6:	f04f 3aff 	mov.w	sl, #4294967295
 80161ba:	991e      	ldr	r1, [sp, #120]	; 0x78
 80161bc:	4620      	mov	r0, r4
 80161be:	f001 fcd3 	bl	8017b68 <_Bfree>
 80161c2:	9907      	ldr	r1, [sp, #28]
 80161c4:	4620      	mov	r0, r4
 80161c6:	f001 fccf 	bl	8017b68 <_Bfree>
 80161ca:	4631      	mov	r1, r6
 80161cc:	4620      	mov	r0, r4
 80161ce:	f001 fccb 	bl	8017b68 <_Bfree>
 80161d2:	4629      	mov	r1, r5
 80161d4:	4620      	mov	r0, r4
 80161d6:	f001 fcc7 	bl	8017b68 <_Bfree>
 80161da:	e613      	b.n	8015e04 <_strtod_l+0x664>
 80161dc:	f1ba 0f00 	cmp.w	sl, #0
 80161e0:	d11b      	bne.n	801621a <_strtod_l+0xa7a>
 80161e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80161e6:	b9f3      	cbnz	r3, 8016226 <_strtod_l+0xa86>
 80161e8:	4b6b      	ldr	r3, [pc, #428]	; (8016398 <_strtod_l+0xbf8>)
 80161ea:	2200      	movs	r2, #0
 80161ec:	4640      	mov	r0, r8
 80161ee:	4649      	mov	r1, r9
 80161f0:	f7ea fc94 	bl	8000b1c <__aeabi_dcmplt>
 80161f4:	b9d0      	cbnz	r0, 801622c <_strtod_l+0xa8c>
 80161f6:	4640      	mov	r0, r8
 80161f8:	4649      	mov	r1, r9
 80161fa:	4b6b      	ldr	r3, [pc, #428]	; (80163a8 <_strtod_l+0xc08>)
 80161fc:	2200      	movs	r2, #0
 80161fe:	f7ea fa1b 	bl	8000638 <__aeabi_dmul>
 8016202:	4680      	mov	r8, r0
 8016204:	4689      	mov	r9, r1
 8016206:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801620a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801620e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016210:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8016214:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016218:	e79b      	b.n	8016152 <_strtod_l+0x9b2>
 801621a:	f1ba 0f01 	cmp.w	sl, #1
 801621e:	d102      	bne.n	8016226 <_strtod_l+0xa86>
 8016220:	2f00      	cmp	r7, #0
 8016222:	f43f ad7e 	beq.w	8015d22 <_strtod_l+0x582>
 8016226:	4b61      	ldr	r3, [pc, #388]	; (80163ac <_strtod_l+0xc0c>)
 8016228:	2200      	movs	r2, #0
 801622a:	e78c      	b.n	8016146 <_strtod_l+0x9a6>
 801622c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80163a8 <_strtod_l+0xc08>
 8016230:	f04f 0800 	mov.w	r8, #0
 8016234:	e7e7      	b.n	8016206 <_strtod_l+0xa66>
 8016236:	4b5c      	ldr	r3, [pc, #368]	; (80163a8 <_strtod_l+0xc08>)
 8016238:	4640      	mov	r0, r8
 801623a:	4649      	mov	r1, r9
 801623c:	2200      	movs	r2, #0
 801623e:	f7ea f9fb 	bl	8000638 <__aeabi_dmul>
 8016242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016244:	4680      	mov	r8, r0
 8016246:	4689      	mov	r9, r1
 8016248:	b933      	cbnz	r3, 8016258 <_strtod_l+0xab8>
 801624a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801624e:	9012      	str	r0, [sp, #72]	; 0x48
 8016250:	9313      	str	r3, [sp, #76]	; 0x4c
 8016252:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016256:	e7dd      	b.n	8016214 <_strtod_l+0xa74>
 8016258:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801625c:	e7f9      	b.n	8016252 <_strtod_l+0xab2>
 801625e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016262:	9b04      	ldr	r3, [sp, #16]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d1a8      	bne.n	80161ba <_strtod_l+0xa1a>
 8016268:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801626c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801626e:	0d1b      	lsrs	r3, r3, #20
 8016270:	051b      	lsls	r3, r3, #20
 8016272:	429a      	cmp	r2, r3
 8016274:	d1a1      	bne.n	80161ba <_strtod_l+0xa1a>
 8016276:	4640      	mov	r0, r8
 8016278:	4649      	mov	r1, r9
 801627a:	f7ea fd3d 	bl	8000cf8 <__aeabi_d2lz>
 801627e:	f7ea f9ad 	bl	80005dc <__aeabi_l2d>
 8016282:	4602      	mov	r2, r0
 8016284:	460b      	mov	r3, r1
 8016286:	4640      	mov	r0, r8
 8016288:	4649      	mov	r1, r9
 801628a:	f7ea f81d 	bl	80002c8 <__aeabi_dsub>
 801628e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016290:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016294:	ea43 030a 	orr.w	r3, r3, sl
 8016298:	4313      	orrs	r3, r2
 801629a:	4680      	mov	r8, r0
 801629c:	4689      	mov	r9, r1
 801629e:	d053      	beq.n	8016348 <_strtod_l+0xba8>
 80162a0:	a335      	add	r3, pc, #212	; (adr r3, 8016378 <_strtod_l+0xbd8>)
 80162a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162a6:	f7ea fc39 	bl	8000b1c <__aeabi_dcmplt>
 80162aa:	2800      	cmp	r0, #0
 80162ac:	f47f acce 	bne.w	8015c4c <_strtod_l+0x4ac>
 80162b0:	a333      	add	r3, pc, #204	; (adr r3, 8016380 <_strtod_l+0xbe0>)
 80162b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162b6:	4640      	mov	r0, r8
 80162b8:	4649      	mov	r1, r9
 80162ba:	f7ea fc4d 	bl	8000b58 <__aeabi_dcmpgt>
 80162be:	2800      	cmp	r0, #0
 80162c0:	f43f af7b 	beq.w	80161ba <_strtod_l+0xa1a>
 80162c4:	e4c2      	b.n	8015c4c <_strtod_l+0x4ac>
 80162c6:	9b04      	ldr	r3, [sp, #16]
 80162c8:	b333      	cbz	r3, 8016318 <_strtod_l+0xb78>
 80162ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80162cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80162d0:	d822      	bhi.n	8016318 <_strtod_l+0xb78>
 80162d2:	a32d      	add	r3, pc, #180	; (adr r3, 8016388 <_strtod_l+0xbe8>)
 80162d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d8:	4640      	mov	r0, r8
 80162da:	4649      	mov	r1, r9
 80162dc:	f7ea fc28 	bl	8000b30 <__aeabi_dcmple>
 80162e0:	b1a0      	cbz	r0, 801630c <_strtod_l+0xb6c>
 80162e2:	4649      	mov	r1, r9
 80162e4:	4640      	mov	r0, r8
 80162e6:	f7ea fc7f 	bl	8000be8 <__aeabi_d2uiz>
 80162ea:	2801      	cmp	r0, #1
 80162ec:	bf38      	it	cc
 80162ee:	2001      	movcc	r0, #1
 80162f0:	f7ea f928 	bl	8000544 <__aeabi_ui2d>
 80162f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80162f6:	4680      	mov	r8, r0
 80162f8:	4689      	mov	r9, r1
 80162fa:	bb13      	cbnz	r3, 8016342 <_strtod_l+0xba2>
 80162fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016300:	9014      	str	r0, [sp, #80]	; 0x50
 8016302:	9315      	str	r3, [sp, #84]	; 0x54
 8016304:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016308:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801630c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801630e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016310:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016314:	1a9b      	subs	r3, r3, r2
 8016316:	930d      	str	r3, [sp, #52]	; 0x34
 8016318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801631c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016320:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016324:	f001 ff4c 	bl	80181c0 <__ulp>
 8016328:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801632c:	ec53 2b10 	vmov	r2, r3, d0
 8016330:	f7ea f982 	bl	8000638 <__aeabi_dmul>
 8016334:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016338:	f7e9 ffc8 	bl	80002cc <__adddf3>
 801633c:	4682      	mov	sl, r0
 801633e:	468b      	mov	fp, r1
 8016340:	e78f      	b.n	8016262 <_strtod_l+0xac2>
 8016342:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8016346:	e7dd      	b.n	8016304 <_strtod_l+0xb64>
 8016348:	a311      	add	r3, pc, #68	; (adr r3, 8016390 <_strtod_l+0xbf0>)
 801634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801634e:	f7ea fbe5 	bl	8000b1c <__aeabi_dcmplt>
 8016352:	e7b4      	b.n	80162be <_strtod_l+0xb1e>
 8016354:	2300      	movs	r3, #0
 8016356:	930e      	str	r3, [sp, #56]	; 0x38
 8016358:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801635a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801635c:	6013      	str	r3, [r2, #0]
 801635e:	f7ff ba65 	b.w	801582c <_strtod_l+0x8c>
 8016362:	2b65      	cmp	r3, #101	; 0x65
 8016364:	f43f ab5d 	beq.w	8015a22 <_strtod_l+0x282>
 8016368:	2b45      	cmp	r3, #69	; 0x45
 801636a:	f43f ab5a 	beq.w	8015a22 <_strtod_l+0x282>
 801636e:	2201      	movs	r2, #1
 8016370:	f7ff bb92 	b.w	8015a98 <_strtod_l+0x2f8>
 8016374:	f3af 8000 	nop.w
 8016378:	94a03595 	.word	0x94a03595
 801637c:	3fdfffff 	.word	0x3fdfffff
 8016380:	35afe535 	.word	0x35afe535
 8016384:	3fe00000 	.word	0x3fe00000
 8016388:	ffc00000 	.word	0xffc00000
 801638c:	41dfffff 	.word	0x41dfffff
 8016390:	94a03595 	.word	0x94a03595
 8016394:	3fcfffff 	.word	0x3fcfffff
 8016398:	3ff00000 	.word	0x3ff00000
 801639c:	7ff00000 	.word	0x7ff00000
 80163a0:	7fe00000 	.word	0x7fe00000
 80163a4:	7c9fffff 	.word	0x7c9fffff
 80163a8:	3fe00000 	.word	0x3fe00000
 80163ac:	bff00000 	.word	0xbff00000
 80163b0:	7fefffff 	.word	0x7fefffff

080163b4 <strtod>:
 80163b4:	460a      	mov	r2, r1
 80163b6:	4601      	mov	r1, r0
 80163b8:	4802      	ldr	r0, [pc, #8]	; (80163c4 <strtod+0x10>)
 80163ba:	4b03      	ldr	r3, [pc, #12]	; (80163c8 <strtod+0x14>)
 80163bc:	6800      	ldr	r0, [r0, #0]
 80163be:	f7ff b9ef 	b.w	80157a0 <_strtod_l>
 80163c2:	bf00      	nop
 80163c4:	2000003c 	.word	0x2000003c
 80163c8:	200000a4 	.word	0x200000a4

080163cc <strtok>:
 80163cc:	4b16      	ldr	r3, [pc, #88]	; (8016428 <strtok+0x5c>)
 80163ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80163d0:	681e      	ldr	r6, [r3, #0]
 80163d2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80163d4:	4605      	mov	r5, r0
 80163d6:	b9fc      	cbnz	r4, 8016418 <strtok+0x4c>
 80163d8:	2050      	movs	r0, #80	; 0x50
 80163da:	9101      	str	r1, [sp, #4]
 80163dc:	f7fe fbc6 	bl	8014b6c <malloc>
 80163e0:	9901      	ldr	r1, [sp, #4]
 80163e2:	65b0      	str	r0, [r6, #88]	; 0x58
 80163e4:	4602      	mov	r2, r0
 80163e6:	b920      	cbnz	r0, 80163f2 <strtok+0x26>
 80163e8:	4b10      	ldr	r3, [pc, #64]	; (801642c <strtok+0x60>)
 80163ea:	4811      	ldr	r0, [pc, #68]	; (8016430 <strtok+0x64>)
 80163ec:	2157      	movs	r1, #87	; 0x57
 80163ee:	f000 f849 	bl	8016484 <__assert_func>
 80163f2:	e9c0 4400 	strd	r4, r4, [r0]
 80163f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80163fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80163fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8016402:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8016406:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801640a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801640e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8016412:	6184      	str	r4, [r0, #24]
 8016414:	7704      	strb	r4, [r0, #28]
 8016416:	6244      	str	r4, [r0, #36]	; 0x24
 8016418:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801641a:	2301      	movs	r3, #1
 801641c:	4628      	mov	r0, r5
 801641e:	b002      	add	sp, #8
 8016420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016424:	f000 b806 	b.w	8016434 <__strtok_r>
 8016428:	2000003c 	.word	0x2000003c
 801642c:	0801c8c4 	.word	0x0801c8c4
 8016430:	0801c990 	.word	0x0801c990

08016434 <__strtok_r>:
 8016434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016436:	b908      	cbnz	r0, 801643c <__strtok_r+0x8>
 8016438:	6810      	ldr	r0, [r2, #0]
 801643a:	b188      	cbz	r0, 8016460 <__strtok_r+0x2c>
 801643c:	4604      	mov	r4, r0
 801643e:	4620      	mov	r0, r4
 8016440:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016444:	460f      	mov	r7, r1
 8016446:	f817 6b01 	ldrb.w	r6, [r7], #1
 801644a:	b91e      	cbnz	r6, 8016454 <__strtok_r+0x20>
 801644c:	b965      	cbnz	r5, 8016468 <__strtok_r+0x34>
 801644e:	6015      	str	r5, [r2, #0]
 8016450:	4628      	mov	r0, r5
 8016452:	e005      	b.n	8016460 <__strtok_r+0x2c>
 8016454:	42b5      	cmp	r5, r6
 8016456:	d1f6      	bne.n	8016446 <__strtok_r+0x12>
 8016458:	2b00      	cmp	r3, #0
 801645a:	d1f0      	bne.n	801643e <__strtok_r+0xa>
 801645c:	6014      	str	r4, [r2, #0]
 801645e:	7003      	strb	r3, [r0, #0]
 8016460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016462:	461c      	mov	r4, r3
 8016464:	e00c      	b.n	8016480 <__strtok_r+0x4c>
 8016466:	b915      	cbnz	r5, 801646e <__strtok_r+0x3a>
 8016468:	f814 3b01 	ldrb.w	r3, [r4], #1
 801646c:	460e      	mov	r6, r1
 801646e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8016472:	42ab      	cmp	r3, r5
 8016474:	d1f7      	bne.n	8016466 <__strtok_r+0x32>
 8016476:	2b00      	cmp	r3, #0
 8016478:	d0f3      	beq.n	8016462 <__strtok_r+0x2e>
 801647a:	2300      	movs	r3, #0
 801647c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8016480:	6014      	str	r4, [r2, #0]
 8016482:	e7ed      	b.n	8016460 <__strtok_r+0x2c>

08016484 <__assert_func>:
 8016484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016486:	4614      	mov	r4, r2
 8016488:	461a      	mov	r2, r3
 801648a:	4b09      	ldr	r3, [pc, #36]	; (80164b0 <__assert_func+0x2c>)
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	4605      	mov	r5, r0
 8016490:	68d8      	ldr	r0, [r3, #12]
 8016492:	b14c      	cbz	r4, 80164a8 <__assert_func+0x24>
 8016494:	4b07      	ldr	r3, [pc, #28]	; (80164b4 <__assert_func+0x30>)
 8016496:	9100      	str	r1, [sp, #0]
 8016498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801649c:	4906      	ldr	r1, [pc, #24]	; (80164b8 <__assert_func+0x34>)
 801649e:	462b      	mov	r3, r5
 80164a0:	f000 ff5c 	bl	801735c <fiprintf>
 80164a4:	f002 fbcc 	bl	8018c40 <abort>
 80164a8:	4b04      	ldr	r3, [pc, #16]	; (80164bc <__assert_func+0x38>)
 80164aa:	461c      	mov	r4, r3
 80164ac:	e7f3      	b.n	8016496 <__assert_func+0x12>
 80164ae:	bf00      	nop
 80164b0:	2000003c 	.word	0x2000003c
 80164b4:	0801c9f1 	.word	0x0801c9f1
 80164b8:	0801c9fe 	.word	0x0801c9fe
 80164bc:	0801ca2c 	.word	0x0801ca2c

080164c0 <quorem>:
 80164c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164c4:	6903      	ldr	r3, [r0, #16]
 80164c6:	690c      	ldr	r4, [r1, #16]
 80164c8:	42a3      	cmp	r3, r4
 80164ca:	4607      	mov	r7, r0
 80164cc:	f2c0 8081 	blt.w	80165d2 <quorem+0x112>
 80164d0:	3c01      	subs	r4, #1
 80164d2:	f101 0814 	add.w	r8, r1, #20
 80164d6:	f100 0514 	add.w	r5, r0, #20
 80164da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80164de:	9301      	str	r3, [sp, #4]
 80164e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80164e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80164e8:	3301      	adds	r3, #1
 80164ea:	429a      	cmp	r2, r3
 80164ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80164f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80164f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80164f8:	d331      	bcc.n	801655e <quorem+0x9e>
 80164fa:	f04f 0e00 	mov.w	lr, #0
 80164fe:	4640      	mov	r0, r8
 8016500:	46ac      	mov	ip, r5
 8016502:	46f2      	mov	sl, lr
 8016504:	f850 2b04 	ldr.w	r2, [r0], #4
 8016508:	b293      	uxth	r3, r2
 801650a:	fb06 e303 	mla	r3, r6, r3, lr
 801650e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016512:	b29b      	uxth	r3, r3
 8016514:	ebaa 0303 	sub.w	r3, sl, r3
 8016518:	0c12      	lsrs	r2, r2, #16
 801651a:	f8dc a000 	ldr.w	sl, [ip]
 801651e:	fb06 e202 	mla	r2, r6, r2, lr
 8016522:	fa13 f38a 	uxtah	r3, r3, sl
 8016526:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801652a:	fa1f fa82 	uxth.w	sl, r2
 801652e:	f8dc 2000 	ldr.w	r2, [ip]
 8016532:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8016536:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801653a:	b29b      	uxth	r3, r3
 801653c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016540:	4581      	cmp	r9, r0
 8016542:	f84c 3b04 	str.w	r3, [ip], #4
 8016546:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801654a:	d2db      	bcs.n	8016504 <quorem+0x44>
 801654c:	f855 300b 	ldr.w	r3, [r5, fp]
 8016550:	b92b      	cbnz	r3, 801655e <quorem+0x9e>
 8016552:	9b01      	ldr	r3, [sp, #4]
 8016554:	3b04      	subs	r3, #4
 8016556:	429d      	cmp	r5, r3
 8016558:	461a      	mov	r2, r3
 801655a:	d32e      	bcc.n	80165ba <quorem+0xfa>
 801655c:	613c      	str	r4, [r7, #16]
 801655e:	4638      	mov	r0, r7
 8016560:	f001 fd8a 	bl	8018078 <__mcmp>
 8016564:	2800      	cmp	r0, #0
 8016566:	db24      	blt.n	80165b2 <quorem+0xf2>
 8016568:	3601      	adds	r6, #1
 801656a:	4628      	mov	r0, r5
 801656c:	f04f 0c00 	mov.w	ip, #0
 8016570:	f858 2b04 	ldr.w	r2, [r8], #4
 8016574:	f8d0 e000 	ldr.w	lr, [r0]
 8016578:	b293      	uxth	r3, r2
 801657a:	ebac 0303 	sub.w	r3, ip, r3
 801657e:	0c12      	lsrs	r2, r2, #16
 8016580:	fa13 f38e 	uxtah	r3, r3, lr
 8016584:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016588:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801658c:	b29b      	uxth	r3, r3
 801658e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016592:	45c1      	cmp	r9, r8
 8016594:	f840 3b04 	str.w	r3, [r0], #4
 8016598:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801659c:	d2e8      	bcs.n	8016570 <quorem+0xb0>
 801659e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80165a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80165a6:	b922      	cbnz	r2, 80165b2 <quorem+0xf2>
 80165a8:	3b04      	subs	r3, #4
 80165aa:	429d      	cmp	r5, r3
 80165ac:	461a      	mov	r2, r3
 80165ae:	d30a      	bcc.n	80165c6 <quorem+0x106>
 80165b0:	613c      	str	r4, [r7, #16]
 80165b2:	4630      	mov	r0, r6
 80165b4:	b003      	add	sp, #12
 80165b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165ba:	6812      	ldr	r2, [r2, #0]
 80165bc:	3b04      	subs	r3, #4
 80165be:	2a00      	cmp	r2, #0
 80165c0:	d1cc      	bne.n	801655c <quorem+0x9c>
 80165c2:	3c01      	subs	r4, #1
 80165c4:	e7c7      	b.n	8016556 <quorem+0x96>
 80165c6:	6812      	ldr	r2, [r2, #0]
 80165c8:	3b04      	subs	r3, #4
 80165ca:	2a00      	cmp	r2, #0
 80165cc:	d1f0      	bne.n	80165b0 <quorem+0xf0>
 80165ce:	3c01      	subs	r4, #1
 80165d0:	e7eb      	b.n	80165aa <quorem+0xea>
 80165d2:	2000      	movs	r0, #0
 80165d4:	e7ee      	b.n	80165b4 <quorem+0xf4>
	...

080165d8 <_dtoa_r>:
 80165d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165dc:	ed2d 8b02 	vpush	{d8}
 80165e0:	ec57 6b10 	vmov	r6, r7, d0
 80165e4:	b095      	sub	sp, #84	; 0x54
 80165e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80165e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80165ec:	9105      	str	r1, [sp, #20]
 80165ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80165f2:	4604      	mov	r4, r0
 80165f4:	9209      	str	r2, [sp, #36]	; 0x24
 80165f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80165f8:	b975      	cbnz	r5, 8016618 <_dtoa_r+0x40>
 80165fa:	2010      	movs	r0, #16
 80165fc:	f7fe fab6 	bl	8014b6c <malloc>
 8016600:	4602      	mov	r2, r0
 8016602:	6260      	str	r0, [r4, #36]	; 0x24
 8016604:	b920      	cbnz	r0, 8016610 <_dtoa_r+0x38>
 8016606:	4bb2      	ldr	r3, [pc, #712]	; (80168d0 <_dtoa_r+0x2f8>)
 8016608:	21ea      	movs	r1, #234	; 0xea
 801660a:	48b2      	ldr	r0, [pc, #712]	; (80168d4 <_dtoa_r+0x2fc>)
 801660c:	f7ff ff3a 	bl	8016484 <__assert_func>
 8016610:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016614:	6005      	str	r5, [r0, #0]
 8016616:	60c5      	str	r5, [r0, #12]
 8016618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801661a:	6819      	ldr	r1, [r3, #0]
 801661c:	b151      	cbz	r1, 8016634 <_dtoa_r+0x5c>
 801661e:	685a      	ldr	r2, [r3, #4]
 8016620:	604a      	str	r2, [r1, #4]
 8016622:	2301      	movs	r3, #1
 8016624:	4093      	lsls	r3, r2
 8016626:	608b      	str	r3, [r1, #8]
 8016628:	4620      	mov	r0, r4
 801662a:	f001 fa9d 	bl	8017b68 <_Bfree>
 801662e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016630:	2200      	movs	r2, #0
 8016632:	601a      	str	r2, [r3, #0]
 8016634:	1e3b      	subs	r3, r7, #0
 8016636:	bfb9      	ittee	lt
 8016638:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801663c:	9303      	strlt	r3, [sp, #12]
 801663e:	2300      	movge	r3, #0
 8016640:	f8c8 3000 	strge.w	r3, [r8]
 8016644:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8016648:	4ba3      	ldr	r3, [pc, #652]	; (80168d8 <_dtoa_r+0x300>)
 801664a:	bfbc      	itt	lt
 801664c:	2201      	movlt	r2, #1
 801664e:	f8c8 2000 	strlt.w	r2, [r8]
 8016652:	ea33 0309 	bics.w	r3, r3, r9
 8016656:	d11b      	bne.n	8016690 <_dtoa_r+0xb8>
 8016658:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801665a:	f242 730f 	movw	r3, #9999	; 0x270f
 801665e:	6013      	str	r3, [r2, #0]
 8016660:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016664:	4333      	orrs	r3, r6
 8016666:	f000 857a 	beq.w	801715e <_dtoa_r+0xb86>
 801666a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801666c:	b963      	cbnz	r3, 8016688 <_dtoa_r+0xb0>
 801666e:	4b9b      	ldr	r3, [pc, #620]	; (80168dc <_dtoa_r+0x304>)
 8016670:	e024      	b.n	80166bc <_dtoa_r+0xe4>
 8016672:	4b9b      	ldr	r3, [pc, #620]	; (80168e0 <_dtoa_r+0x308>)
 8016674:	9300      	str	r3, [sp, #0]
 8016676:	3308      	adds	r3, #8
 8016678:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801667a:	6013      	str	r3, [r2, #0]
 801667c:	9800      	ldr	r0, [sp, #0]
 801667e:	b015      	add	sp, #84	; 0x54
 8016680:	ecbd 8b02 	vpop	{d8}
 8016684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016688:	4b94      	ldr	r3, [pc, #592]	; (80168dc <_dtoa_r+0x304>)
 801668a:	9300      	str	r3, [sp, #0]
 801668c:	3303      	adds	r3, #3
 801668e:	e7f3      	b.n	8016678 <_dtoa_r+0xa0>
 8016690:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016694:	2200      	movs	r2, #0
 8016696:	ec51 0b17 	vmov	r0, r1, d7
 801669a:	2300      	movs	r3, #0
 801669c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80166a0:	f7ea fa32 	bl	8000b08 <__aeabi_dcmpeq>
 80166a4:	4680      	mov	r8, r0
 80166a6:	b158      	cbz	r0, 80166c0 <_dtoa_r+0xe8>
 80166a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80166aa:	2301      	movs	r3, #1
 80166ac:	6013      	str	r3, [r2, #0]
 80166ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	f000 8551 	beq.w	8017158 <_dtoa_r+0xb80>
 80166b6:	488b      	ldr	r0, [pc, #556]	; (80168e4 <_dtoa_r+0x30c>)
 80166b8:	6018      	str	r0, [r3, #0]
 80166ba:	1e43      	subs	r3, r0, #1
 80166bc:	9300      	str	r3, [sp, #0]
 80166be:	e7dd      	b.n	801667c <_dtoa_r+0xa4>
 80166c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80166c4:	aa12      	add	r2, sp, #72	; 0x48
 80166c6:	a913      	add	r1, sp, #76	; 0x4c
 80166c8:	4620      	mov	r0, r4
 80166ca:	f001 fdf5 	bl	80182b8 <__d2b>
 80166ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80166d2:	4683      	mov	fp, r0
 80166d4:	2d00      	cmp	r5, #0
 80166d6:	d07c      	beq.n	80167d2 <_dtoa_r+0x1fa>
 80166d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80166de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80166e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80166e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80166ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80166ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80166f2:	4b7d      	ldr	r3, [pc, #500]	; (80168e8 <_dtoa_r+0x310>)
 80166f4:	2200      	movs	r2, #0
 80166f6:	4630      	mov	r0, r6
 80166f8:	4639      	mov	r1, r7
 80166fa:	f7e9 fde5 	bl	80002c8 <__aeabi_dsub>
 80166fe:	a36e      	add	r3, pc, #440	; (adr r3, 80168b8 <_dtoa_r+0x2e0>)
 8016700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016704:	f7e9 ff98 	bl	8000638 <__aeabi_dmul>
 8016708:	a36d      	add	r3, pc, #436	; (adr r3, 80168c0 <_dtoa_r+0x2e8>)
 801670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801670e:	f7e9 fddd 	bl	80002cc <__adddf3>
 8016712:	4606      	mov	r6, r0
 8016714:	4628      	mov	r0, r5
 8016716:	460f      	mov	r7, r1
 8016718:	f7e9 ff24 	bl	8000564 <__aeabi_i2d>
 801671c:	a36a      	add	r3, pc, #424	; (adr r3, 80168c8 <_dtoa_r+0x2f0>)
 801671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016722:	f7e9 ff89 	bl	8000638 <__aeabi_dmul>
 8016726:	4602      	mov	r2, r0
 8016728:	460b      	mov	r3, r1
 801672a:	4630      	mov	r0, r6
 801672c:	4639      	mov	r1, r7
 801672e:	f7e9 fdcd 	bl	80002cc <__adddf3>
 8016732:	4606      	mov	r6, r0
 8016734:	460f      	mov	r7, r1
 8016736:	f7ea fa2f 	bl	8000b98 <__aeabi_d2iz>
 801673a:	2200      	movs	r2, #0
 801673c:	4682      	mov	sl, r0
 801673e:	2300      	movs	r3, #0
 8016740:	4630      	mov	r0, r6
 8016742:	4639      	mov	r1, r7
 8016744:	f7ea f9ea 	bl	8000b1c <__aeabi_dcmplt>
 8016748:	b148      	cbz	r0, 801675e <_dtoa_r+0x186>
 801674a:	4650      	mov	r0, sl
 801674c:	f7e9 ff0a 	bl	8000564 <__aeabi_i2d>
 8016750:	4632      	mov	r2, r6
 8016752:	463b      	mov	r3, r7
 8016754:	f7ea f9d8 	bl	8000b08 <__aeabi_dcmpeq>
 8016758:	b908      	cbnz	r0, 801675e <_dtoa_r+0x186>
 801675a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801675e:	f1ba 0f16 	cmp.w	sl, #22
 8016762:	d854      	bhi.n	801680e <_dtoa_r+0x236>
 8016764:	4b61      	ldr	r3, [pc, #388]	; (80168ec <_dtoa_r+0x314>)
 8016766:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801676e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016772:	f7ea f9d3 	bl	8000b1c <__aeabi_dcmplt>
 8016776:	2800      	cmp	r0, #0
 8016778:	d04b      	beq.n	8016812 <_dtoa_r+0x23a>
 801677a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801677e:	2300      	movs	r3, #0
 8016780:	930e      	str	r3, [sp, #56]	; 0x38
 8016782:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016784:	1b5d      	subs	r5, r3, r5
 8016786:	1e6b      	subs	r3, r5, #1
 8016788:	9304      	str	r3, [sp, #16]
 801678a:	bf43      	ittte	mi
 801678c:	2300      	movmi	r3, #0
 801678e:	f1c5 0801 	rsbmi	r8, r5, #1
 8016792:	9304      	strmi	r3, [sp, #16]
 8016794:	f04f 0800 	movpl.w	r8, #0
 8016798:	f1ba 0f00 	cmp.w	sl, #0
 801679c:	db3b      	blt.n	8016816 <_dtoa_r+0x23e>
 801679e:	9b04      	ldr	r3, [sp, #16]
 80167a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80167a4:	4453      	add	r3, sl
 80167a6:	9304      	str	r3, [sp, #16]
 80167a8:	2300      	movs	r3, #0
 80167aa:	9306      	str	r3, [sp, #24]
 80167ac:	9b05      	ldr	r3, [sp, #20]
 80167ae:	2b09      	cmp	r3, #9
 80167b0:	d869      	bhi.n	8016886 <_dtoa_r+0x2ae>
 80167b2:	2b05      	cmp	r3, #5
 80167b4:	bfc4      	itt	gt
 80167b6:	3b04      	subgt	r3, #4
 80167b8:	9305      	strgt	r3, [sp, #20]
 80167ba:	9b05      	ldr	r3, [sp, #20]
 80167bc:	f1a3 0302 	sub.w	r3, r3, #2
 80167c0:	bfcc      	ite	gt
 80167c2:	2500      	movgt	r5, #0
 80167c4:	2501      	movle	r5, #1
 80167c6:	2b03      	cmp	r3, #3
 80167c8:	d869      	bhi.n	801689e <_dtoa_r+0x2c6>
 80167ca:	e8df f003 	tbb	[pc, r3]
 80167ce:	4e2c      	.short	0x4e2c
 80167d0:	5a4c      	.short	0x5a4c
 80167d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80167d6:	441d      	add	r5, r3
 80167d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80167dc:	2b20      	cmp	r3, #32
 80167de:	bfc1      	itttt	gt
 80167e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80167e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80167e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80167ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80167f0:	bfda      	itte	le
 80167f2:	f1c3 0320 	rsble	r3, r3, #32
 80167f6:	fa06 f003 	lslle.w	r0, r6, r3
 80167fa:	4318      	orrgt	r0, r3
 80167fc:	f7e9 fea2 	bl	8000544 <__aeabi_ui2d>
 8016800:	2301      	movs	r3, #1
 8016802:	4606      	mov	r6, r0
 8016804:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8016808:	3d01      	subs	r5, #1
 801680a:	9310      	str	r3, [sp, #64]	; 0x40
 801680c:	e771      	b.n	80166f2 <_dtoa_r+0x11a>
 801680e:	2301      	movs	r3, #1
 8016810:	e7b6      	b.n	8016780 <_dtoa_r+0x1a8>
 8016812:	900e      	str	r0, [sp, #56]	; 0x38
 8016814:	e7b5      	b.n	8016782 <_dtoa_r+0x1aa>
 8016816:	f1ca 0300 	rsb	r3, sl, #0
 801681a:	9306      	str	r3, [sp, #24]
 801681c:	2300      	movs	r3, #0
 801681e:	eba8 080a 	sub.w	r8, r8, sl
 8016822:	930d      	str	r3, [sp, #52]	; 0x34
 8016824:	e7c2      	b.n	80167ac <_dtoa_r+0x1d4>
 8016826:	2300      	movs	r3, #0
 8016828:	9308      	str	r3, [sp, #32]
 801682a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801682c:	2b00      	cmp	r3, #0
 801682e:	dc39      	bgt.n	80168a4 <_dtoa_r+0x2cc>
 8016830:	f04f 0901 	mov.w	r9, #1
 8016834:	f8cd 9004 	str.w	r9, [sp, #4]
 8016838:	464b      	mov	r3, r9
 801683a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801683e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016840:	2200      	movs	r2, #0
 8016842:	6042      	str	r2, [r0, #4]
 8016844:	2204      	movs	r2, #4
 8016846:	f102 0614 	add.w	r6, r2, #20
 801684a:	429e      	cmp	r6, r3
 801684c:	6841      	ldr	r1, [r0, #4]
 801684e:	d92f      	bls.n	80168b0 <_dtoa_r+0x2d8>
 8016850:	4620      	mov	r0, r4
 8016852:	f001 f949 	bl	8017ae8 <_Balloc>
 8016856:	9000      	str	r0, [sp, #0]
 8016858:	2800      	cmp	r0, #0
 801685a:	d14b      	bne.n	80168f4 <_dtoa_r+0x31c>
 801685c:	4b24      	ldr	r3, [pc, #144]	; (80168f0 <_dtoa_r+0x318>)
 801685e:	4602      	mov	r2, r0
 8016860:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8016864:	e6d1      	b.n	801660a <_dtoa_r+0x32>
 8016866:	2301      	movs	r3, #1
 8016868:	e7de      	b.n	8016828 <_dtoa_r+0x250>
 801686a:	2300      	movs	r3, #0
 801686c:	9308      	str	r3, [sp, #32]
 801686e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016870:	eb0a 0903 	add.w	r9, sl, r3
 8016874:	f109 0301 	add.w	r3, r9, #1
 8016878:	2b01      	cmp	r3, #1
 801687a:	9301      	str	r3, [sp, #4]
 801687c:	bfb8      	it	lt
 801687e:	2301      	movlt	r3, #1
 8016880:	e7dd      	b.n	801683e <_dtoa_r+0x266>
 8016882:	2301      	movs	r3, #1
 8016884:	e7f2      	b.n	801686c <_dtoa_r+0x294>
 8016886:	2501      	movs	r5, #1
 8016888:	2300      	movs	r3, #0
 801688a:	9305      	str	r3, [sp, #20]
 801688c:	9508      	str	r5, [sp, #32]
 801688e:	f04f 39ff 	mov.w	r9, #4294967295
 8016892:	2200      	movs	r2, #0
 8016894:	f8cd 9004 	str.w	r9, [sp, #4]
 8016898:	2312      	movs	r3, #18
 801689a:	9209      	str	r2, [sp, #36]	; 0x24
 801689c:	e7cf      	b.n	801683e <_dtoa_r+0x266>
 801689e:	2301      	movs	r3, #1
 80168a0:	9308      	str	r3, [sp, #32]
 80168a2:	e7f4      	b.n	801688e <_dtoa_r+0x2b6>
 80168a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80168a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80168ac:	464b      	mov	r3, r9
 80168ae:	e7c6      	b.n	801683e <_dtoa_r+0x266>
 80168b0:	3101      	adds	r1, #1
 80168b2:	6041      	str	r1, [r0, #4]
 80168b4:	0052      	lsls	r2, r2, #1
 80168b6:	e7c6      	b.n	8016846 <_dtoa_r+0x26e>
 80168b8:	636f4361 	.word	0x636f4361
 80168bc:	3fd287a7 	.word	0x3fd287a7
 80168c0:	8b60c8b3 	.word	0x8b60c8b3
 80168c4:	3fc68a28 	.word	0x3fc68a28
 80168c8:	509f79fb 	.word	0x509f79fb
 80168cc:	3fd34413 	.word	0x3fd34413
 80168d0:	0801c8c4 	.word	0x0801c8c4
 80168d4:	0801ca3a 	.word	0x0801ca3a
 80168d8:	7ff00000 	.word	0x7ff00000
 80168dc:	0801ca36 	.word	0x0801ca36
 80168e0:	0801ca2d 	.word	0x0801ca2d
 80168e4:	0801c8a1 	.word	0x0801c8a1
 80168e8:	3ff80000 	.word	0x3ff80000
 80168ec:	0801cc18 	.word	0x0801cc18
 80168f0:	0801ca99 	.word	0x0801ca99
 80168f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80168f6:	9a00      	ldr	r2, [sp, #0]
 80168f8:	601a      	str	r2, [r3, #0]
 80168fa:	9b01      	ldr	r3, [sp, #4]
 80168fc:	2b0e      	cmp	r3, #14
 80168fe:	f200 80ad 	bhi.w	8016a5c <_dtoa_r+0x484>
 8016902:	2d00      	cmp	r5, #0
 8016904:	f000 80aa 	beq.w	8016a5c <_dtoa_r+0x484>
 8016908:	f1ba 0f00 	cmp.w	sl, #0
 801690c:	dd36      	ble.n	801697c <_dtoa_r+0x3a4>
 801690e:	4ac3      	ldr	r2, [pc, #780]	; (8016c1c <_dtoa_r+0x644>)
 8016910:	f00a 030f 	and.w	r3, sl, #15
 8016914:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016918:	ed93 7b00 	vldr	d7, [r3]
 801691c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8016920:	ea4f 172a 	mov.w	r7, sl, asr #4
 8016924:	eeb0 8a47 	vmov.f32	s16, s14
 8016928:	eef0 8a67 	vmov.f32	s17, s15
 801692c:	d016      	beq.n	801695c <_dtoa_r+0x384>
 801692e:	4bbc      	ldr	r3, [pc, #752]	; (8016c20 <_dtoa_r+0x648>)
 8016930:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016934:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016938:	f7e9 ffa8 	bl	800088c <__aeabi_ddiv>
 801693c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016940:	f007 070f 	and.w	r7, r7, #15
 8016944:	2503      	movs	r5, #3
 8016946:	4eb6      	ldr	r6, [pc, #728]	; (8016c20 <_dtoa_r+0x648>)
 8016948:	b957      	cbnz	r7, 8016960 <_dtoa_r+0x388>
 801694a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801694e:	ec53 2b18 	vmov	r2, r3, d8
 8016952:	f7e9 ff9b 	bl	800088c <__aeabi_ddiv>
 8016956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801695a:	e029      	b.n	80169b0 <_dtoa_r+0x3d8>
 801695c:	2502      	movs	r5, #2
 801695e:	e7f2      	b.n	8016946 <_dtoa_r+0x36e>
 8016960:	07f9      	lsls	r1, r7, #31
 8016962:	d508      	bpl.n	8016976 <_dtoa_r+0x39e>
 8016964:	ec51 0b18 	vmov	r0, r1, d8
 8016968:	e9d6 2300 	ldrd	r2, r3, [r6]
 801696c:	f7e9 fe64 	bl	8000638 <__aeabi_dmul>
 8016970:	ec41 0b18 	vmov	d8, r0, r1
 8016974:	3501      	adds	r5, #1
 8016976:	107f      	asrs	r7, r7, #1
 8016978:	3608      	adds	r6, #8
 801697a:	e7e5      	b.n	8016948 <_dtoa_r+0x370>
 801697c:	f000 80a6 	beq.w	8016acc <_dtoa_r+0x4f4>
 8016980:	f1ca 0600 	rsb	r6, sl, #0
 8016984:	4ba5      	ldr	r3, [pc, #660]	; (8016c1c <_dtoa_r+0x644>)
 8016986:	4fa6      	ldr	r7, [pc, #664]	; (8016c20 <_dtoa_r+0x648>)
 8016988:	f006 020f 	and.w	r2, r6, #15
 801698c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016994:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016998:	f7e9 fe4e 	bl	8000638 <__aeabi_dmul>
 801699c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80169a0:	1136      	asrs	r6, r6, #4
 80169a2:	2300      	movs	r3, #0
 80169a4:	2502      	movs	r5, #2
 80169a6:	2e00      	cmp	r6, #0
 80169a8:	f040 8085 	bne.w	8016ab6 <_dtoa_r+0x4de>
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d1d2      	bne.n	8016956 <_dtoa_r+0x37e>
 80169b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	f000 808c 	beq.w	8016ad0 <_dtoa_r+0x4f8>
 80169b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80169bc:	4b99      	ldr	r3, [pc, #612]	; (8016c24 <_dtoa_r+0x64c>)
 80169be:	2200      	movs	r2, #0
 80169c0:	4630      	mov	r0, r6
 80169c2:	4639      	mov	r1, r7
 80169c4:	f7ea f8aa 	bl	8000b1c <__aeabi_dcmplt>
 80169c8:	2800      	cmp	r0, #0
 80169ca:	f000 8081 	beq.w	8016ad0 <_dtoa_r+0x4f8>
 80169ce:	9b01      	ldr	r3, [sp, #4]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d07d      	beq.n	8016ad0 <_dtoa_r+0x4f8>
 80169d4:	f1b9 0f00 	cmp.w	r9, #0
 80169d8:	dd3c      	ble.n	8016a54 <_dtoa_r+0x47c>
 80169da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80169de:	9307      	str	r3, [sp, #28]
 80169e0:	2200      	movs	r2, #0
 80169e2:	4b91      	ldr	r3, [pc, #580]	; (8016c28 <_dtoa_r+0x650>)
 80169e4:	4630      	mov	r0, r6
 80169e6:	4639      	mov	r1, r7
 80169e8:	f7e9 fe26 	bl	8000638 <__aeabi_dmul>
 80169ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80169f0:	3501      	adds	r5, #1
 80169f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80169f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80169fa:	4628      	mov	r0, r5
 80169fc:	f7e9 fdb2 	bl	8000564 <__aeabi_i2d>
 8016a00:	4632      	mov	r2, r6
 8016a02:	463b      	mov	r3, r7
 8016a04:	f7e9 fe18 	bl	8000638 <__aeabi_dmul>
 8016a08:	4b88      	ldr	r3, [pc, #544]	; (8016c2c <_dtoa_r+0x654>)
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	f7e9 fc5e 	bl	80002cc <__adddf3>
 8016a10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8016a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a18:	9303      	str	r3, [sp, #12]
 8016a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d15c      	bne.n	8016ada <_dtoa_r+0x502>
 8016a20:	4b83      	ldr	r3, [pc, #524]	; (8016c30 <_dtoa_r+0x658>)
 8016a22:	2200      	movs	r2, #0
 8016a24:	4630      	mov	r0, r6
 8016a26:	4639      	mov	r1, r7
 8016a28:	f7e9 fc4e 	bl	80002c8 <__aeabi_dsub>
 8016a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a30:	4606      	mov	r6, r0
 8016a32:	460f      	mov	r7, r1
 8016a34:	f7ea f890 	bl	8000b58 <__aeabi_dcmpgt>
 8016a38:	2800      	cmp	r0, #0
 8016a3a:	f040 8296 	bne.w	8016f6a <_dtoa_r+0x992>
 8016a3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016a42:	4630      	mov	r0, r6
 8016a44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016a48:	4639      	mov	r1, r7
 8016a4a:	f7ea f867 	bl	8000b1c <__aeabi_dcmplt>
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	f040 8288 	bne.w	8016f64 <_dtoa_r+0x98c>
 8016a54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016a58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016a5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	f2c0 8158 	blt.w	8016d14 <_dtoa_r+0x73c>
 8016a64:	f1ba 0f0e 	cmp.w	sl, #14
 8016a68:	f300 8154 	bgt.w	8016d14 <_dtoa_r+0x73c>
 8016a6c:	4b6b      	ldr	r3, [pc, #428]	; (8016c1c <_dtoa_r+0x644>)
 8016a6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016a72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	f280 80e3 	bge.w	8016c44 <_dtoa_r+0x66c>
 8016a7e:	9b01      	ldr	r3, [sp, #4]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	f300 80df 	bgt.w	8016c44 <_dtoa_r+0x66c>
 8016a86:	f040 826d 	bne.w	8016f64 <_dtoa_r+0x98c>
 8016a8a:	4b69      	ldr	r3, [pc, #420]	; (8016c30 <_dtoa_r+0x658>)
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	4640      	mov	r0, r8
 8016a90:	4649      	mov	r1, r9
 8016a92:	f7e9 fdd1 	bl	8000638 <__aeabi_dmul>
 8016a96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a9a:	f7ea f853 	bl	8000b44 <__aeabi_dcmpge>
 8016a9e:	9e01      	ldr	r6, [sp, #4]
 8016aa0:	4637      	mov	r7, r6
 8016aa2:	2800      	cmp	r0, #0
 8016aa4:	f040 8243 	bne.w	8016f2e <_dtoa_r+0x956>
 8016aa8:	9d00      	ldr	r5, [sp, #0]
 8016aaa:	2331      	movs	r3, #49	; 0x31
 8016aac:	f805 3b01 	strb.w	r3, [r5], #1
 8016ab0:	f10a 0a01 	add.w	sl, sl, #1
 8016ab4:	e23f      	b.n	8016f36 <_dtoa_r+0x95e>
 8016ab6:	07f2      	lsls	r2, r6, #31
 8016ab8:	d505      	bpl.n	8016ac6 <_dtoa_r+0x4ee>
 8016aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016abe:	f7e9 fdbb 	bl	8000638 <__aeabi_dmul>
 8016ac2:	3501      	adds	r5, #1
 8016ac4:	2301      	movs	r3, #1
 8016ac6:	1076      	asrs	r6, r6, #1
 8016ac8:	3708      	adds	r7, #8
 8016aca:	e76c      	b.n	80169a6 <_dtoa_r+0x3ce>
 8016acc:	2502      	movs	r5, #2
 8016ace:	e76f      	b.n	80169b0 <_dtoa_r+0x3d8>
 8016ad0:	9b01      	ldr	r3, [sp, #4]
 8016ad2:	f8cd a01c 	str.w	sl, [sp, #28]
 8016ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8016ad8:	e78d      	b.n	80169f6 <_dtoa_r+0x41e>
 8016ada:	9900      	ldr	r1, [sp, #0]
 8016adc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016ae0:	4b4e      	ldr	r3, [pc, #312]	; (8016c1c <_dtoa_r+0x644>)
 8016ae2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016ae6:	4401      	add	r1, r0
 8016ae8:	9102      	str	r1, [sp, #8]
 8016aea:	9908      	ldr	r1, [sp, #32]
 8016aec:	eeb0 8a47 	vmov.f32	s16, s14
 8016af0:	eef0 8a67 	vmov.f32	s17, s15
 8016af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016af8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016afc:	2900      	cmp	r1, #0
 8016afe:	d045      	beq.n	8016b8c <_dtoa_r+0x5b4>
 8016b00:	494c      	ldr	r1, [pc, #304]	; (8016c34 <_dtoa_r+0x65c>)
 8016b02:	2000      	movs	r0, #0
 8016b04:	f7e9 fec2 	bl	800088c <__aeabi_ddiv>
 8016b08:	ec53 2b18 	vmov	r2, r3, d8
 8016b0c:	f7e9 fbdc 	bl	80002c8 <__aeabi_dsub>
 8016b10:	9d00      	ldr	r5, [sp, #0]
 8016b12:	ec41 0b18 	vmov	d8, r0, r1
 8016b16:	4639      	mov	r1, r7
 8016b18:	4630      	mov	r0, r6
 8016b1a:	f7ea f83d 	bl	8000b98 <__aeabi_d2iz>
 8016b1e:	900c      	str	r0, [sp, #48]	; 0x30
 8016b20:	f7e9 fd20 	bl	8000564 <__aeabi_i2d>
 8016b24:	4602      	mov	r2, r0
 8016b26:	460b      	mov	r3, r1
 8016b28:	4630      	mov	r0, r6
 8016b2a:	4639      	mov	r1, r7
 8016b2c:	f7e9 fbcc 	bl	80002c8 <__aeabi_dsub>
 8016b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b32:	3330      	adds	r3, #48	; 0x30
 8016b34:	f805 3b01 	strb.w	r3, [r5], #1
 8016b38:	ec53 2b18 	vmov	r2, r3, d8
 8016b3c:	4606      	mov	r6, r0
 8016b3e:	460f      	mov	r7, r1
 8016b40:	f7e9 ffec 	bl	8000b1c <__aeabi_dcmplt>
 8016b44:	2800      	cmp	r0, #0
 8016b46:	d165      	bne.n	8016c14 <_dtoa_r+0x63c>
 8016b48:	4632      	mov	r2, r6
 8016b4a:	463b      	mov	r3, r7
 8016b4c:	4935      	ldr	r1, [pc, #212]	; (8016c24 <_dtoa_r+0x64c>)
 8016b4e:	2000      	movs	r0, #0
 8016b50:	f7e9 fbba 	bl	80002c8 <__aeabi_dsub>
 8016b54:	ec53 2b18 	vmov	r2, r3, d8
 8016b58:	f7e9 ffe0 	bl	8000b1c <__aeabi_dcmplt>
 8016b5c:	2800      	cmp	r0, #0
 8016b5e:	f040 80b9 	bne.w	8016cd4 <_dtoa_r+0x6fc>
 8016b62:	9b02      	ldr	r3, [sp, #8]
 8016b64:	429d      	cmp	r5, r3
 8016b66:	f43f af75 	beq.w	8016a54 <_dtoa_r+0x47c>
 8016b6a:	4b2f      	ldr	r3, [pc, #188]	; (8016c28 <_dtoa_r+0x650>)
 8016b6c:	ec51 0b18 	vmov	r0, r1, d8
 8016b70:	2200      	movs	r2, #0
 8016b72:	f7e9 fd61 	bl	8000638 <__aeabi_dmul>
 8016b76:	4b2c      	ldr	r3, [pc, #176]	; (8016c28 <_dtoa_r+0x650>)
 8016b78:	ec41 0b18 	vmov	d8, r0, r1
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	4630      	mov	r0, r6
 8016b80:	4639      	mov	r1, r7
 8016b82:	f7e9 fd59 	bl	8000638 <__aeabi_dmul>
 8016b86:	4606      	mov	r6, r0
 8016b88:	460f      	mov	r7, r1
 8016b8a:	e7c4      	b.n	8016b16 <_dtoa_r+0x53e>
 8016b8c:	ec51 0b17 	vmov	r0, r1, d7
 8016b90:	f7e9 fd52 	bl	8000638 <__aeabi_dmul>
 8016b94:	9b02      	ldr	r3, [sp, #8]
 8016b96:	9d00      	ldr	r5, [sp, #0]
 8016b98:	930c      	str	r3, [sp, #48]	; 0x30
 8016b9a:	ec41 0b18 	vmov	d8, r0, r1
 8016b9e:	4639      	mov	r1, r7
 8016ba0:	4630      	mov	r0, r6
 8016ba2:	f7e9 fff9 	bl	8000b98 <__aeabi_d2iz>
 8016ba6:	9011      	str	r0, [sp, #68]	; 0x44
 8016ba8:	f7e9 fcdc 	bl	8000564 <__aeabi_i2d>
 8016bac:	4602      	mov	r2, r0
 8016bae:	460b      	mov	r3, r1
 8016bb0:	4630      	mov	r0, r6
 8016bb2:	4639      	mov	r1, r7
 8016bb4:	f7e9 fb88 	bl	80002c8 <__aeabi_dsub>
 8016bb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016bba:	3330      	adds	r3, #48	; 0x30
 8016bbc:	f805 3b01 	strb.w	r3, [r5], #1
 8016bc0:	9b02      	ldr	r3, [sp, #8]
 8016bc2:	429d      	cmp	r5, r3
 8016bc4:	4606      	mov	r6, r0
 8016bc6:	460f      	mov	r7, r1
 8016bc8:	f04f 0200 	mov.w	r2, #0
 8016bcc:	d134      	bne.n	8016c38 <_dtoa_r+0x660>
 8016bce:	4b19      	ldr	r3, [pc, #100]	; (8016c34 <_dtoa_r+0x65c>)
 8016bd0:	ec51 0b18 	vmov	r0, r1, d8
 8016bd4:	f7e9 fb7a 	bl	80002cc <__adddf3>
 8016bd8:	4602      	mov	r2, r0
 8016bda:	460b      	mov	r3, r1
 8016bdc:	4630      	mov	r0, r6
 8016bde:	4639      	mov	r1, r7
 8016be0:	f7e9 ffba 	bl	8000b58 <__aeabi_dcmpgt>
 8016be4:	2800      	cmp	r0, #0
 8016be6:	d175      	bne.n	8016cd4 <_dtoa_r+0x6fc>
 8016be8:	ec53 2b18 	vmov	r2, r3, d8
 8016bec:	4911      	ldr	r1, [pc, #68]	; (8016c34 <_dtoa_r+0x65c>)
 8016bee:	2000      	movs	r0, #0
 8016bf0:	f7e9 fb6a 	bl	80002c8 <__aeabi_dsub>
 8016bf4:	4602      	mov	r2, r0
 8016bf6:	460b      	mov	r3, r1
 8016bf8:	4630      	mov	r0, r6
 8016bfa:	4639      	mov	r1, r7
 8016bfc:	f7e9 ff8e 	bl	8000b1c <__aeabi_dcmplt>
 8016c00:	2800      	cmp	r0, #0
 8016c02:	f43f af27 	beq.w	8016a54 <_dtoa_r+0x47c>
 8016c06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016c08:	1e6b      	subs	r3, r5, #1
 8016c0a:	930c      	str	r3, [sp, #48]	; 0x30
 8016c0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016c10:	2b30      	cmp	r3, #48	; 0x30
 8016c12:	d0f8      	beq.n	8016c06 <_dtoa_r+0x62e>
 8016c14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016c18:	e04a      	b.n	8016cb0 <_dtoa_r+0x6d8>
 8016c1a:	bf00      	nop
 8016c1c:	0801cc18 	.word	0x0801cc18
 8016c20:	0801cbf0 	.word	0x0801cbf0
 8016c24:	3ff00000 	.word	0x3ff00000
 8016c28:	40240000 	.word	0x40240000
 8016c2c:	401c0000 	.word	0x401c0000
 8016c30:	40140000 	.word	0x40140000
 8016c34:	3fe00000 	.word	0x3fe00000
 8016c38:	4baf      	ldr	r3, [pc, #700]	; (8016ef8 <_dtoa_r+0x920>)
 8016c3a:	f7e9 fcfd 	bl	8000638 <__aeabi_dmul>
 8016c3e:	4606      	mov	r6, r0
 8016c40:	460f      	mov	r7, r1
 8016c42:	e7ac      	b.n	8016b9e <_dtoa_r+0x5c6>
 8016c44:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016c48:	9d00      	ldr	r5, [sp, #0]
 8016c4a:	4642      	mov	r2, r8
 8016c4c:	464b      	mov	r3, r9
 8016c4e:	4630      	mov	r0, r6
 8016c50:	4639      	mov	r1, r7
 8016c52:	f7e9 fe1b 	bl	800088c <__aeabi_ddiv>
 8016c56:	f7e9 ff9f 	bl	8000b98 <__aeabi_d2iz>
 8016c5a:	9002      	str	r0, [sp, #8]
 8016c5c:	f7e9 fc82 	bl	8000564 <__aeabi_i2d>
 8016c60:	4642      	mov	r2, r8
 8016c62:	464b      	mov	r3, r9
 8016c64:	f7e9 fce8 	bl	8000638 <__aeabi_dmul>
 8016c68:	4602      	mov	r2, r0
 8016c6a:	460b      	mov	r3, r1
 8016c6c:	4630      	mov	r0, r6
 8016c6e:	4639      	mov	r1, r7
 8016c70:	f7e9 fb2a 	bl	80002c8 <__aeabi_dsub>
 8016c74:	9e02      	ldr	r6, [sp, #8]
 8016c76:	9f01      	ldr	r7, [sp, #4]
 8016c78:	3630      	adds	r6, #48	; 0x30
 8016c7a:	f805 6b01 	strb.w	r6, [r5], #1
 8016c7e:	9e00      	ldr	r6, [sp, #0]
 8016c80:	1bae      	subs	r6, r5, r6
 8016c82:	42b7      	cmp	r7, r6
 8016c84:	4602      	mov	r2, r0
 8016c86:	460b      	mov	r3, r1
 8016c88:	d137      	bne.n	8016cfa <_dtoa_r+0x722>
 8016c8a:	f7e9 fb1f 	bl	80002cc <__adddf3>
 8016c8e:	4642      	mov	r2, r8
 8016c90:	464b      	mov	r3, r9
 8016c92:	4606      	mov	r6, r0
 8016c94:	460f      	mov	r7, r1
 8016c96:	f7e9 ff5f 	bl	8000b58 <__aeabi_dcmpgt>
 8016c9a:	b9c8      	cbnz	r0, 8016cd0 <_dtoa_r+0x6f8>
 8016c9c:	4642      	mov	r2, r8
 8016c9e:	464b      	mov	r3, r9
 8016ca0:	4630      	mov	r0, r6
 8016ca2:	4639      	mov	r1, r7
 8016ca4:	f7e9 ff30 	bl	8000b08 <__aeabi_dcmpeq>
 8016ca8:	b110      	cbz	r0, 8016cb0 <_dtoa_r+0x6d8>
 8016caa:	9b02      	ldr	r3, [sp, #8]
 8016cac:	07d9      	lsls	r1, r3, #31
 8016cae:	d40f      	bmi.n	8016cd0 <_dtoa_r+0x6f8>
 8016cb0:	4620      	mov	r0, r4
 8016cb2:	4659      	mov	r1, fp
 8016cb4:	f000 ff58 	bl	8017b68 <_Bfree>
 8016cb8:	2300      	movs	r3, #0
 8016cba:	702b      	strb	r3, [r5, #0]
 8016cbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016cbe:	f10a 0001 	add.w	r0, sl, #1
 8016cc2:	6018      	str	r0, [r3, #0]
 8016cc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	f43f acd8 	beq.w	801667c <_dtoa_r+0xa4>
 8016ccc:	601d      	str	r5, [r3, #0]
 8016cce:	e4d5      	b.n	801667c <_dtoa_r+0xa4>
 8016cd0:	f8cd a01c 	str.w	sl, [sp, #28]
 8016cd4:	462b      	mov	r3, r5
 8016cd6:	461d      	mov	r5, r3
 8016cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016cdc:	2a39      	cmp	r2, #57	; 0x39
 8016cde:	d108      	bne.n	8016cf2 <_dtoa_r+0x71a>
 8016ce0:	9a00      	ldr	r2, [sp, #0]
 8016ce2:	429a      	cmp	r2, r3
 8016ce4:	d1f7      	bne.n	8016cd6 <_dtoa_r+0x6fe>
 8016ce6:	9a07      	ldr	r2, [sp, #28]
 8016ce8:	9900      	ldr	r1, [sp, #0]
 8016cea:	3201      	adds	r2, #1
 8016cec:	9207      	str	r2, [sp, #28]
 8016cee:	2230      	movs	r2, #48	; 0x30
 8016cf0:	700a      	strb	r2, [r1, #0]
 8016cf2:	781a      	ldrb	r2, [r3, #0]
 8016cf4:	3201      	adds	r2, #1
 8016cf6:	701a      	strb	r2, [r3, #0]
 8016cf8:	e78c      	b.n	8016c14 <_dtoa_r+0x63c>
 8016cfa:	4b7f      	ldr	r3, [pc, #508]	; (8016ef8 <_dtoa_r+0x920>)
 8016cfc:	2200      	movs	r2, #0
 8016cfe:	f7e9 fc9b 	bl	8000638 <__aeabi_dmul>
 8016d02:	2200      	movs	r2, #0
 8016d04:	2300      	movs	r3, #0
 8016d06:	4606      	mov	r6, r0
 8016d08:	460f      	mov	r7, r1
 8016d0a:	f7e9 fefd 	bl	8000b08 <__aeabi_dcmpeq>
 8016d0e:	2800      	cmp	r0, #0
 8016d10:	d09b      	beq.n	8016c4a <_dtoa_r+0x672>
 8016d12:	e7cd      	b.n	8016cb0 <_dtoa_r+0x6d8>
 8016d14:	9a08      	ldr	r2, [sp, #32]
 8016d16:	2a00      	cmp	r2, #0
 8016d18:	f000 80c4 	beq.w	8016ea4 <_dtoa_r+0x8cc>
 8016d1c:	9a05      	ldr	r2, [sp, #20]
 8016d1e:	2a01      	cmp	r2, #1
 8016d20:	f300 80a8 	bgt.w	8016e74 <_dtoa_r+0x89c>
 8016d24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016d26:	2a00      	cmp	r2, #0
 8016d28:	f000 80a0 	beq.w	8016e6c <_dtoa_r+0x894>
 8016d2c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016d30:	9e06      	ldr	r6, [sp, #24]
 8016d32:	4645      	mov	r5, r8
 8016d34:	9a04      	ldr	r2, [sp, #16]
 8016d36:	2101      	movs	r1, #1
 8016d38:	441a      	add	r2, r3
 8016d3a:	4620      	mov	r0, r4
 8016d3c:	4498      	add	r8, r3
 8016d3e:	9204      	str	r2, [sp, #16]
 8016d40:	f001 f818 	bl	8017d74 <__i2b>
 8016d44:	4607      	mov	r7, r0
 8016d46:	2d00      	cmp	r5, #0
 8016d48:	dd0b      	ble.n	8016d62 <_dtoa_r+0x78a>
 8016d4a:	9b04      	ldr	r3, [sp, #16]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	dd08      	ble.n	8016d62 <_dtoa_r+0x78a>
 8016d50:	42ab      	cmp	r3, r5
 8016d52:	9a04      	ldr	r2, [sp, #16]
 8016d54:	bfa8      	it	ge
 8016d56:	462b      	movge	r3, r5
 8016d58:	eba8 0803 	sub.w	r8, r8, r3
 8016d5c:	1aed      	subs	r5, r5, r3
 8016d5e:	1ad3      	subs	r3, r2, r3
 8016d60:	9304      	str	r3, [sp, #16]
 8016d62:	9b06      	ldr	r3, [sp, #24]
 8016d64:	b1fb      	cbz	r3, 8016da6 <_dtoa_r+0x7ce>
 8016d66:	9b08      	ldr	r3, [sp, #32]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	f000 809f 	beq.w	8016eac <_dtoa_r+0x8d4>
 8016d6e:	2e00      	cmp	r6, #0
 8016d70:	dd11      	ble.n	8016d96 <_dtoa_r+0x7be>
 8016d72:	4639      	mov	r1, r7
 8016d74:	4632      	mov	r2, r6
 8016d76:	4620      	mov	r0, r4
 8016d78:	f001 f8b8 	bl	8017eec <__pow5mult>
 8016d7c:	465a      	mov	r2, fp
 8016d7e:	4601      	mov	r1, r0
 8016d80:	4607      	mov	r7, r0
 8016d82:	4620      	mov	r0, r4
 8016d84:	f001 f80c 	bl	8017da0 <__multiply>
 8016d88:	4659      	mov	r1, fp
 8016d8a:	9007      	str	r0, [sp, #28]
 8016d8c:	4620      	mov	r0, r4
 8016d8e:	f000 feeb 	bl	8017b68 <_Bfree>
 8016d92:	9b07      	ldr	r3, [sp, #28]
 8016d94:	469b      	mov	fp, r3
 8016d96:	9b06      	ldr	r3, [sp, #24]
 8016d98:	1b9a      	subs	r2, r3, r6
 8016d9a:	d004      	beq.n	8016da6 <_dtoa_r+0x7ce>
 8016d9c:	4659      	mov	r1, fp
 8016d9e:	4620      	mov	r0, r4
 8016da0:	f001 f8a4 	bl	8017eec <__pow5mult>
 8016da4:	4683      	mov	fp, r0
 8016da6:	2101      	movs	r1, #1
 8016da8:	4620      	mov	r0, r4
 8016daa:	f000 ffe3 	bl	8017d74 <__i2b>
 8016dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	4606      	mov	r6, r0
 8016db4:	dd7c      	ble.n	8016eb0 <_dtoa_r+0x8d8>
 8016db6:	461a      	mov	r2, r3
 8016db8:	4601      	mov	r1, r0
 8016dba:	4620      	mov	r0, r4
 8016dbc:	f001 f896 	bl	8017eec <__pow5mult>
 8016dc0:	9b05      	ldr	r3, [sp, #20]
 8016dc2:	2b01      	cmp	r3, #1
 8016dc4:	4606      	mov	r6, r0
 8016dc6:	dd76      	ble.n	8016eb6 <_dtoa_r+0x8de>
 8016dc8:	2300      	movs	r3, #0
 8016dca:	9306      	str	r3, [sp, #24]
 8016dcc:	6933      	ldr	r3, [r6, #16]
 8016dce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016dd2:	6918      	ldr	r0, [r3, #16]
 8016dd4:	f000 ff7e 	bl	8017cd4 <__hi0bits>
 8016dd8:	f1c0 0020 	rsb	r0, r0, #32
 8016ddc:	9b04      	ldr	r3, [sp, #16]
 8016dde:	4418      	add	r0, r3
 8016de0:	f010 001f 	ands.w	r0, r0, #31
 8016de4:	f000 8086 	beq.w	8016ef4 <_dtoa_r+0x91c>
 8016de8:	f1c0 0320 	rsb	r3, r0, #32
 8016dec:	2b04      	cmp	r3, #4
 8016dee:	dd7f      	ble.n	8016ef0 <_dtoa_r+0x918>
 8016df0:	f1c0 001c 	rsb	r0, r0, #28
 8016df4:	9b04      	ldr	r3, [sp, #16]
 8016df6:	4403      	add	r3, r0
 8016df8:	4480      	add	r8, r0
 8016dfa:	4405      	add	r5, r0
 8016dfc:	9304      	str	r3, [sp, #16]
 8016dfe:	f1b8 0f00 	cmp.w	r8, #0
 8016e02:	dd05      	ble.n	8016e10 <_dtoa_r+0x838>
 8016e04:	4659      	mov	r1, fp
 8016e06:	4642      	mov	r2, r8
 8016e08:	4620      	mov	r0, r4
 8016e0a:	f001 f8c9 	bl	8017fa0 <__lshift>
 8016e0e:	4683      	mov	fp, r0
 8016e10:	9b04      	ldr	r3, [sp, #16]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	dd05      	ble.n	8016e22 <_dtoa_r+0x84a>
 8016e16:	4631      	mov	r1, r6
 8016e18:	461a      	mov	r2, r3
 8016e1a:	4620      	mov	r0, r4
 8016e1c:	f001 f8c0 	bl	8017fa0 <__lshift>
 8016e20:	4606      	mov	r6, r0
 8016e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d069      	beq.n	8016efc <_dtoa_r+0x924>
 8016e28:	4631      	mov	r1, r6
 8016e2a:	4658      	mov	r0, fp
 8016e2c:	f001 f924 	bl	8018078 <__mcmp>
 8016e30:	2800      	cmp	r0, #0
 8016e32:	da63      	bge.n	8016efc <_dtoa_r+0x924>
 8016e34:	2300      	movs	r3, #0
 8016e36:	4659      	mov	r1, fp
 8016e38:	220a      	movs	r2, #10
 8016e3a:	4620      	mov	r0, r4
 8016e3c:	f000 feb6 	bl	8017bac <__multadd>
 8016e40:	9b08      	ldr	r3, [sp, #32]
 8016e42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e46:	4683      	mov	fp, r0
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	f000 818f 	beq.w	801716c <_dtoa_r+0xb94>
 8016e4e:	4639      	mov	r1, r7
 8016e50:	2300      	movs	r3, #0
 8016e52:	220a      	movs	r2, #10
 8016e54:	4620      	mov	r0, r4
 8016e56:	f000 fea9 	bl	8017bac <__multadd>
 8016e5a:	f1b9 0f00 	cmp.w	r9, #0
 8016e5e:	4607      	mov	r7, r0
 8016e60:	f300 808e 	bgt.w	8016f80 <_dtoa_r+0x9a8>
 8016e64:	9b05      	ldr	r3, [sp, #20]
 8016e66:	2b02      	cmp	r3, #2
 8016e68:	dc50      	bgt.n	8016f0c <_dtoa_r+0x934>
 8016e6a:	e089      	b.n	8016f80 <_dtoa_r+0x9a8>
 8016e6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016e6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016e72:	e75d      	b.n	8016d30 <_dtoa_r+0x758>
 8016e74:	9b01      	ldr	r3, [sp, #4]
 8016e76:	1e5e      	subs	r6, r3, #1
 8016e78:	9b06      	ldr	r3, [sp, #24]
 8016e7a:	42b3      	cmp	r3, r6
 8016e7c:	bfbf      	itttt	lt
 8016e7e:	9b06      	ldrlt	r3, [sp, #24]
 8016e80:	9606      	strlt	r6, [sp, #24]
 8016e82:	1af2      	sublt	r2, r6, r3
 8016e84:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8016e86:	bfb6      	itet	lt
 8016e88:	189b      	addlt	r3, r3, r2
 8016e8a:	1b9e      	subge	r6, r3, r6
 8016e8c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8016e8e:	9b01      	ldr	r3, [sp, #4]
 8016e90:	bfb8      	it	lt
 8016e92:	2600      	movlt	r6, #0
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	bfb5      	itete	lt
 8016e98:	eba8 0503 	sublt.w	r5, r8, r3
 8016e9c:	9b01      	ldrge	r3, [sp, #4]
 8016e9e:	2300      	movlt	r3, #0
 8016ea0:	4645      	movge	r5, r8
 8016ea2:	e747      	b.n	8016d34 <_dtoa_r+0x75c>
 8016ea4:	9e06      	ldr	r6, [sp, #24]
 8016ea6:	9f08      	ldr	r7, [sp, #32]
 8016ea8:	4645      	mov	r5, r8
 8016eaa:	e74c      	b.n	8016d46 <_dtoa_r+0x76e>
 8016eac:	9a06      	ldr	r2, [sp, #24]
 8016eae:	e775      	b.n	8016d9c <_dtoa_r+0x7c4>
 8016eb0:	9b05      	ldr	r3, [sp, #20]
 8016eb2:	2b01      	cmp	r3, #1
 8016eb4:	dc18      	bgt.n	8016ee8 <_dtoa_r+0x910>
 8016eb6:	9b02      	ldr	r3, [sp, #8]
 8016eb8:	b9b3      	cbnz	r3, 8016ee8 <_dtoa_r+0x910>
 8016eba:	9b03      	ldr	r3, [sp, #12]
 8016ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016ec0:	b9a3      	cbnz	r3, 8016eec <_dtoa_r+0x914>
 8016ec2:	9b03      	ldr	r3, [sp, #12]
 8016ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016ec8:	0d1b      	lsrs	r3, r3, #20
 8016eca:	051b      	lsls	r3, r3, #20
 8016ecc:	b12b      	cbz	r3, 8016eda <_dtoa_r+0x902>
 8016ece:	9b04      	ldr	r3, [sp, #16]
 8016ed0:	3301      	adds	r3, #1
 8016ed2:	9304      	str	r3, [sp, #16]
 8016ed4:	f108 0801 	add.w	r8, r8, #1
 8016ed8:	2301      	movs	r3, #1
 8016eda:	9306      	str	r3, [sp, #24]
 8016edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	f47f af74 	bne.w	8016dcc <_dtoa_r+0x7f4>
 8016ee4:	2001      	movs	r0, #1
 8016ee6:	e779      	b.n	8016ddc <_dtoa_r+0x804>
 8016ee8:	2300      	movs	r3, #0
 8016eea:	e7f6      	b.n	8016eda <_dtoa_r+0x902>
 8016eec:	9b02      	ldr	r3, [sp, #8]
 8016eee:	e7f4      	b.n	8016eda <_dtoa_r+0x902>
 8016ef0:	d085      	beq.n	8016dfe <_dtoa_r+0x826>
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	301c      	adds	r0, #28
 8016ef6:	e77d      	b.n	8016df4 <_dtoa_r+0x81c>
 8016ef8:	40240000 	.word	0x40240000
 8016efc:	9b01      	ldr	r3, [sp, #4]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	dc38      	bgt.n	8016f74 <_dtoa_r+0x99c>
 8016f02:	9b05      	ldr	r3, [sp, #20]
 8016f04:	2b02      	cmp	r3, #2
 8016f06:	dd35      	ble.n	8016f74 <_dtoa_r+0x99c>
 8016f08:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016f0c:	f1b9 0f00 	cmp.w	r9, #0
 8016f10:	d10d      	bne.n	8016f2e <_dtoa_r+0x956>
 8016f12:	4631      	mov	r1, r6
 8016f14:	464b      	mov	r3, r9
 8016f16:	2205      	movs	r2, #5
 8016f18:	4620      	mov	r0, r4
 8016f1a:	f000 fe47 	bl	8017bac <__multadd>
 8016f1e:	4601      	mov	r1, r0
 8016f20:	4606      	mov	r6, r0
 8016f22:	4658      	mov	r0, fp
 8016f24:	f001 f8a8 	bl	8018078 <__mcmp>
 8016f28:	2800      	cmp	r0, #0
 8016f2a:	f73f adbd 	bgt.w	8016aa8 <_dtoa_r+0x4d0>
 8016f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f30:	9d00      	ldr	r5, [sp, #0]
 8016f32:	ea6f 0a03 	mvn.w	sl, r3
 8016f36:	f04f 0800 	mov.w	r8, #0
 8016f3a:	4631      	mov	r1, r6
 8016f3c:	4620      	mov	r0, r4
 8016f3e:	f000 fe13 	bl	8017b68 <_Bfree>
 8016f42:	2f00      	cmp	r7, #0
 8016f44:	f43f aeb4 	beq.w	8016cb0 <_dtoa_r+0x6d8>
 8016f48:	f1b8 0f00 	cmp.w	r8, #0
 8016f4c:	d005      	beq.n	8016f5a <_dtoa_r+0x982>
 8016f4e:	45b8      	cmp	r8, r7
 8016f50:	d003      	beq.n	8016f5a <_dtoa_r+0x982>
 8016f52:	4641      	mov	r1, r8
 8016f54:	4620      	mov	r0, r4
 8016f56:	f000 fe07 	bl	8017b68 <_Bfree>
 8016f5a:	4639      	mov	r1, r7
 8016f5c:	4620      	mov	r0, r4
 8016f5e:	f000 fe03 	bl	8017b68 <_Bfree>
 8016f62:	e6a5      	b.n	8016cb0 <_dtoa_r+0x6d8>
 8016f64:	2600      	movs	r6, #0
 8016f66:	4637      	mov	r7, r6
 8016f68:	e7e1      	b.n	8016f2e <_dtoa_r+0x956>
 8016f6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016f6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016f70:	4637      	mov	r7, r6
 8016f72:	e599      	b.n	8016aa8 <_dtoa_r+0x4d0>
 8016f74:	9b08      	ldr	r3, [sp, #32]
 8016f76:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	f000 80fd 	beq.w	801717a <_dtoa_r+0xba2>
 8016f80:	2d00      	cmp	r5, #0
 8016f82:	dd05      	ble.n	8016f90 <_dtoa_r+0x9b8>
 8016f84:	4639      	mov	r1, r7
 8016f86:	462a      	mov	r2, r5
 8016f88:	4620      	mov	r0, r4
 8016f8a:	f001 f809 	bl	8017fa0 <__lshift>
 8016f8e:	4607      	mov	r7, r0
 8016f90:	9b06      	ldr	r3, [sp, #24]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d05c      	beq.n	8017050 <_dtoa_r+0xa78>
 8016f96:	6879      	ldr	r1, [r7, #4]
 8016f98:	4620      	mov	r0, r4
 8016f9a:	f000 fda5 	bl	8017ae8 <_Balloc>
 8016f9e:	4605      	mov	r5, r0
 8016fa0:	b928      	cbnz	r0, 8016fae <_dtoa_r+0x9d6>
 8016fa2:	4b80      	ldr	r3, [pc, #512]	; (80171a4 <_dtoa_r+0xbcc>)
 8016fa4:	4602      	mov	r2, r0
 8016fa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8016faa:	f7ff bb2e 	b.w	801660a <_dtoa_r+0x32>
 8016fae:	693a      	ldr	r2, [r7, #16]
 8016fb0:	3202      	adds	r2, #2
 8016fb2:	0092      	lsls	r2, r2, #2
 8016fb4:	f107 010c 	add.w	r1, r7, #12
 8016fb8:	300c      	adds	r0, #12
 8016fba:	f7fd fdf5 	bl	8014ba8 <memcpy>
 8016fbe:	2201      	movs	r2, #1
 8016fc0:	4629      	mov	r1, r5
 8016fc2:	4620      	mov	r0, r4
 8016fc4:	f000 ffec 	bl	8017fa0 <__lshift>
 8016fc8:	9b00      	ldr	r3, [sp, #0]
 8016fca:	3301      	adds	r3, #1
 8016fcc:	9301      	str	r3, [sp, #4]
 8016fce:	9b00      	ldr	r3, [sp, #0]
 8016fd0:	444b      	add	r3, r9
 8016fd2:	9307      	str	r3, [sp, #28]
 8016fd4:	9b02      	ldr	r3, [sp, #8]
 8016fd6:	f003 0301 	and.w	r3, r3, #1
 8016fda:	46b8      	mov	r8, r7
 8016fdc:	9306      	str	r3, [sp, #24]
 8016fde:	4607      	mov	r7, r0
 8016fe0:	9b01      	ldr	r3, [sp, #4]
 8016fe2:	4631      	mov	r1, r6
 8016fe4:	3b01      	subs	r3, #1
 8016fe6:	4658      	mov	r0, fp
 8016fe8:	9302      	str	r3, [sp, #8]
 8016fea:	f7ff fa69 	bl	80164c0 <quorem>
 8016fee:	4603      	mov	r3, r0
 8016ff0:	3330      	adds	r3, #48	; 0x30
 8016ff2:	9004      	str	r0, [sp, #16]
 8016ff4:	4641      	mov	r1, r8
 8016ff6:	4658      	mov	r0, fp
 8016ff8:	9308      	str	r3, [sp, #32]
 8016ffa:	f001 f83d 	bl	8018078 <__mcmp>
 8016ffe:	463a      	mov	r2, r7
 8017000:	4681      	mov	r9, r0
 8017002:	4631      	mov	r1, r6
 8017004:	4620      	mov	r0, r4
 8017006:	f001 f853 	bl	80180b0 <__mdiff>
 801700a:	68c2      	ldr	r2, [r0, #12]
 801700c:	9b08      	ldr	r3, [sp, #32]
 801700e:	4605      	mov	r5, r0
 8017010:	bb02      	cbnz	r2, 8017054 <_dtoa_r+0xa7c>
 8017012:	4601      	mov	r1, r0
 8017014:	4658      	mov	r0, fp
 8017016:	f001 f82f 	bl	8018078 <__mcmp>
 801701a:	9b08      	ldr	r3, [sp, #32]
 801701c:	4602      	mov	r2, r0
 801701e:	4629      	mov	r1, r5
 8017020:	4620      	mov	r0, r4
 8017022:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017026:	f000 fd9f 	bl	8017b68 <_Bfree>
 801702a:	9b05      	ldr	r3, [sp, #20]
 801702c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801702e:	9d01      	ldr	r5, [sp, #4]
 8017030:	ea43 0102 	orr.w	r1, r3, r2
 8017034:	9b06      	ldr	r3, [sp, #24]
 8017036:	430b      	orrs	r3, r1
 8017038:	9b08      	ldr	r3, [sp, #32]
 801703a:	d10d      	bne.n	8017058 <_dtoa_r+0xa80>
 801703c:	2b39      	cmp	r3, #57	; 0x39
 801703e:	d029      	beq.n	8017094 <_dtoa_r+0xabc>
 8017040:	f1b9 0f00 	cmp.w	r9, #0
 8017044:	dd01      	ble.n	801704a <_dtoa_r+0xa72>
 8017046:	9b04      	ldr	r3, [sp, #16]
 8017048:	3331      	adds	r3, #49	; 0x31
 801704a:	9a02      	ldr	r2, [sp, #8]
 801704c:	7013      	strb	r3, [r2, #0]
 801704e:	e774      	b.n	8016f3a <_dtoa_r+0x962>
 8017050:	4638      	mov	r0, r7
 8017052:	e7b9      	b.n	8016fc8 <_dtoa_r+0x9f0>
 8017054:	2201      	movs	r2, #1
 8017056:	e7e2      	b.n	801701e <_dtoa_r+0xa46>
 8017058:	f1b9 0f00 	cmp.w	r9, #0
 801705c:	db06      	blt.n	801706c <_dtoa_r+0xa94>
 801705e:	9905      	ldr	r1, [sp, #20]
 8017060:	ea41 0909 	orr.w	r9, r1, r9
 8017064:	9906      	ldr	r1, [sp, #24]
 8017066:	ea59 0101 	orrs.w	r1, r9, r1
 801706a:	d120      	bne.n	80170ae <_dtoa_r+0xad6>
 801706c:	2a00      	cmp	r2, #0
 801706e:	ddec      	ble.n	801704a <_dtoa_r+0xa72>
 8017070:	4659      	mov	r1, fp
 8017072:	2201      	movs	r2, #1
 8017074:	4620      	mov	r0, r4
 8017076:	9301      	str	r3, [sp, #4]
 8017078:	f000 ff92 	bl	8017fa0 <__lshift>
 801707c:	4631      	mov	r1, r6
 801707e:	4683      	mov	fp, r0
 8017080:	f000 fffa 	bl	8018078 <__mcmp>
 8017084:	2800      	cmp	r0, #0
 8017086:	9b01      	ldr	r3, [sp, #4]
 8017088:	dc02      	bgt.n	8017090 <_dtoa_r+0xab8>
 801708a:	d1de      	bne.n	801704a <_dtoa_r+0xa72>
 801708c:	07da      	lsls	r2, r3, #31
 801708e:	d5dc      	bpl.n	801704a <_dtoa_r+0xa72>
 8017090:	2b39      	cmp	r3, #57	; 0x39
 8017092:	d1d8      	bne.n	8017046 <_dtoa_r+0xa6e>
 8017094:	9a02      	ldr	r2, [sp, #8]
 8017096:	2339      	movs	r3, #57	; 0x39
 8017098:	7013      	strb	r3, [r2, #0]
 801709a:	462b      	mov	r3, r5
 801709c:	461d      	mov	r5, r3
 801709e:	3b01      	subs	r3, #1
 80170a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80170a4:	2a39      	cmp	r2, #57	; 0x39
 80170a6:	d050      	beq.n	801714a <_dtoa_r+0xb72>
 80170a8:	3201      	adds	r2, #1
 80170aa:	701a      	strb	r2, [r3, #0]
 80170ac:	e745      	b.n	8016f3a <_dtoa_r+0x962>
 80170ae:	2a00      	cmp	r2, #0
 80170b0:	dd03      	ble.n	80170ba <_dtoa_r+0xae2>
 80170b2:	2b39      	cmp	r3, #57	; 0x39
 80170b4:	d0ee      	beq.n	8017094 <_dtoa_r+0xabc>
 80170b6:	3301      	adds	r3, #1
 80170b8:	e7c7      	b.n	801704a <_dtoa_r+0xa72>
 80170ba:	9a01      	ldr	r2, [sp, #4]
 80170bc:	9907      	ldr	r1, [sp, #28]
 80170be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80170c2:	428a      	cmp	r2, r1
 80170c4:	d02a      	beq.n	801711c <_dtoa_r+0xb44>
 80170c6:	4659      	mov	r1, fp
 80170c8:	2300      	movs	r3, #0
 80170ca:	220a      	movs	r2, #10
 80170cc:	4620      	mov	r0, r4
 80170ce:	f000 fd6d 	bl	8017bac <__multadd>
 80170d2:	45b8      	cmp	r8, r7
 80170d4:	4683      	mov	fp, r0
 80170d6:	f04f 0300 	mov.w	r3, #0
 80170da:	f04f 020a 	mov.w	r2, #10
 80170de:	4641      	mov	r1, r8
 80170e0:	4620      	mov	r0, r4
 80170e2:	d107      	bne.n	80170f4 <_dtoa_r+0xb1c>
 80170e4:	f000 fd62 	bl	8017bac <__multadd>
 80170e8:	4680      	mov	r8, r0
 80170ea:	4607      	mov	r7, r0
 80170ec:	9b01      	ldr	r3, [sp, #4]
 80170ee:	3301      	adds	r3, #1
 80170f0:	9301      	str	r3, [sp, #4]
 80170f2:	e775      	b.n	8016fe0 <_dtoa_r+0xa08>
 80170f4:	f000 fd5a 	bl	8017bac <__multadd>
 80170f8:	4639      	mov	r1, r7
 80170fa:	4680      	mov	r8, r0
 80170fc:	2300      	movs	r3, #0
 80170fe:	220a      	movs	r2, #10
 8017100:	4620      	mov	r0, r4
 8017102:	f000 fd53 	bl	8017bac <__multadd>
 8017106:	4607      	mov	r7, r0
 8017108:	e7f0      	b.n	80170ec <_dtoa_r+0xb14>
 801710a:	f1b9 0f00 	cmp.w	r9, #0
 801710e:	9a00      	ldr	r2, [sp, #0]
 8017110:	bfcc      	ite	gt
 8017112:	464d      	movgt	r5, r9
 8017114:	2501      	movle	r5, #1
 8017116:	4415      	add	r5, r2
 8017118:	f04f 0800 	mov.w	r8, #0
 801711c:	4659      	mov	r1, fp
 801711e:	2201      	movs	r2, #1
 8017120:	4620      	mov	r0, r4
 8017122:	9301      	str	r3, [sp, #4]
 8017124:	f000 ff3c 	bl	8017fa0 <__lshift>
 8017128:	4631      	mov	r1, r6
 801712a:	4683      	mov	fp, r0
 801712c:	f000 ffa4 	bl	8018078 <__mcmp>
 8017130:	2800      	cmp	r0, #0
 8017132:	dcb2      	bgt.n	801709a <_dtoa_r+0xac2>
 8017134:	d102      	bne.n	801713c <_dtoa_r+0xb64>
 8017136:	9b01      	ldr	r3, [sp, #4]
 8017138:	07db      	lsls	r3, r3, #31
 801713a:	d4ae      	bmi.n	801709a <_dtoa_r+0xac2>
 801713c:	462b      	mov	r3, r5
 801713e:	461d      	mov	r5, r3
 8017140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017144:	2a30      	cmp	r2, #48	; 0x30
 8017146:	d0fa      	beq.n	801713e <_dtoa_r+0xb66>
 8017148:	e6f7      	b.n	8016f3a <_dtoa_r+0x962>
 801714a:	9a00      	ldr	r2, [sp, #0]
 801714c:	429a      	cmp	r2, r3
 801714e:	d1a5      	bne.n	801709c <_dtoa_r+0xac4>
 8017150:	f10a 0a01 	add.w	sl, sl, #1
 8017154:	2331      	movs	r3, #49	; 0x31
 8017156:	e779      	b.n	801704c <_dtoa_r+0xa74>
 8017158:	4b13      	ldr	r3, [pc, #76]	; (80171a8 <_dtoa_r+0xbd0>)
 801715a:	f7ff baaf 	b.w	80166bc <_dtoa_r+0xe4>
 801715e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017160:	2b00      	cmp	r3, #0
 8017162:	f47f aa86 	bne.w	8016672 <_dtoa_r+0x9a>
 8017166:	4b11      	ldr	r3, [pc, #68]	; (80171ac <_dtoa_r+0xbd4>)
 8017168:	f7ff baa8 	b.w	80166bc <_dtoa_r+0xe4>
 801716c:	f1b9 0f00 	cmp.w	r9, #0
 8017170:	dc03      	bgt.n	801717a <_dtoa_r+0xba2>
 8017172:	9b05      	ldr	r3, [sp, #20]
 8017174:	2b02      	cmp	r3, #2
 8017176:	f73f aec9 	bgt.w	8016f0c <_dtoa_r+0x934>
 801717a:	9d00      	ldr	r5, [sp, #0]
 801717c:	4631      	mov	r1, r6
 801717e:	4658      	mov	r0, fp
 8017180:	f7ff f99e 	bl	80164c0 <quorem>
 8017184:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017188:	f805 3b01 	strb.w	r3, [r5], #1
 801718c:	9a00      	ldr	r2, [sp, #0]
 801718e:	1aaa      	subs	r2, r5, r2
 8017190:	4591      	cmp	r9, r2
 8017192:	ddba      	ble.n	801710a <_dtoa_r+0xb32>
 8017194:	4659      	mov	r1, fp
 8017196:	2300      	movs	r3, #0
 8017198:	220a      	movs	r2, #10
 801719a:	4620      	mov	r0, r4
 801719c:	f000 fd06 	bl	8017bac <__multadd>
 80171a0:	4683      	mov	fp, r0
 80171a2:	e7eb      	b.n	801717c <_dtoa_r+0xba4>
 80171a4:	0801ca99 	.word	0x0801ca99
 80171a8:	0801c8a0 	.word	0x0801c8a0
 80171ac:	0801ca2d 	.word	0x0801ca2d

080171b0 <std>:
 80171b0:	2300      	movs	r3, #0
 80171b2:	b510      	push	{r4, lr}
 80171b4:	4604      	mov	r4, r0
 80171b6:	e9c0 3300 	strd	r3, r3, [r0]
 80171ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80171be:	6083      	str	r3, [r0, #8]
 80171c0:	8181      	strh	r1, [r0, #12]
 80171c2:	6643      	str	r3, [r0, #100]	; 0x64
 80171c4:	81c2      	strh	r2, [r0, #14]
 80171c6:	6183      	str	r3, [r0, #24]
 80171c8:	4619      	mov	r1, r3
 80171ca:	2208      	movs	r2, #8
 80171cc:	305c      	adds	r0, #92	; 0x5c
 80171ce:	f7fd fd13 	bl	8014bf8 <memset>
 80171d2:	4b05      	ldr	r3, [pc, #20]	; (80171e8 <std+0x38>)
 80171d4:	6263      	str	r3, [r4, #36]	; 0x24
 80171d6:	4b05      	ldr	r3, [pc, #20]	; (80171ec <std+0x3c>)
 80171d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80171da:	4b05      	ldr	r3, [pc, #20]	; (80171f0 <std+0x40>)
 80171dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80171de:	4b05      	ldr	r3, [pc, #20]	; (80171f4 <std+0x44>)
 80171e0:	6224      	str	r4, [r4, #32]
 80171e2:	6323      	str	r3, [r4, #48]	; 0x30
 80171e4:	bd10      	pop	{r4, pc}
 80171e6:	bf00      	nop
 80171e8:	080189f9 	.word	0x080189f9
 80171ec:	08018a1b 	.word	0x08018a1b
 80171f0:	08018a53 	.word	0x08018a53
 80171f4:	08018a77 	.word	0x08018a77

080171f8 <_cleanup_r>:
 80171f8:	4901      	ldr	r1, [pc, #4]	; (8017200 <_cleanup_r+0x8>)
 80171fa:	f000 b8c1 	b.w	8017380 <_fwalk_reent>
 80171fe:	bf00      	nop
 8017200:	08018d7d 	.word	0x08018d7d

08017204 <__sfmoreglue>:
 8017204:	b570      	push	{r4, r5, r6, lr}
 8017206:	1e4a      	subs	r2, r1, #1
 8017208:	2568      	movs	r5, #104	; 0x68
 801720a:	4355      	muls	r5, r2
 801720c:	460e      	mov	r6, r1
 801720e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017212:	f7fd fd49 	bl	8014ca8 <_malloc_r>
 8017216:	4604      	mov	r4, r0
 8017218:	b140      	cbz	r0, 801722c <__sfmoreglue+0x28>
 801721a:	2100      	movs	r1, #0
 801721c:	e9c0 1600 	strd	r1, r6, [r0]
 8017220:	300c      	adds	r0, #12
 8017222:	60a0      	str	r0, [r4, #8]
 8017224:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017228:	f7fd fce6 	bl	8014bf8 <memset>
 801722c:	4620      	mov	r0, r4
 801722e:	bd70      	pop	{r4, r5, r6, pc}

08017230 <__sfp_lock_acquire>:
 8017230:	4801      	ldr	r0, [pc, #4]	; (8017238 <__sfp_lock_acquire+0x8>)
 8017232:	f000 bc38 	b.w	8017aa6 <__retarget_lock_acquire_recursive>
 8017236:	bf00      	nop
 8017238:	2000cff4 	.word	0x2000cff4

0801723c <__sfp_lock_release>:
 801723c:	4801      	ldr	r0, [pc, #4]	; (8017244 <__sfp_lock_release+0x8>)
 801723e:	f000 bc33 	b.w	8017aa8 <__retarget_lock_release_recursive>
 8017242:	bf00      	nop
 8017244:	2000cff4 	.word	0x2000cff4

08017248 <__sinit_lock_acquire>:
 8017248:	4801      	ldr	r0, [pc, #4]	; (8017250 <__sinit_lock_acquire+0x8>)
 801724a:	f000 bc2c 	b.w	8017aa6 <__retarget_lock_acquire_recursive>
 801724e:	bf00      	nop
 8017250:	2000cfef 	.word	0x2000cfef

08017254 <__sinit_lock_release>:
 8017254:	4801      	ldr	r0, [pc, #4]	; (801725c <__sinit_lock_release+0x8>)
 8017256:	f000 bc27 	b.w	8017aa8 <__retarget_lock_release_recursive>
 801725a:	bf00      	nop
 801725c:	2000cfef 	.word	0x2000cfef

08017260 <__sinit>:
 8017260:	b510      	push	{r4, lr}
 8017262:	4604      	mov	r4, r0
 8017264:	f7ff fff0 	bl	8017248 <__sinit_lock_acquire>
 8017268:	69a3      	ldr	r3, [r4, #24]
 801726a:	b11b      	cbz	r3, 8017274 <__sinit+0x14>
 801726c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017270:	f7ff bff0 	b.w	8017254 <__sinit_lock_release>
 8017274:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017278:	6523      	str	r3, [r4, #80]	; 0x50
 801727a:	4b13      	ldr	r3, [pc, #76]	; (80172c8 <__sinit+0x68>)
 801727c:	4a13      	ldr	r2, [pc, #76]	; (80172cc <__sinit+0x6c>)
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	62a2      	str	r2, [r4, #40]	; 0x28
 8017282:	42a3      	cmp	r3, r4
 8017284:	bf04      	itt	eq
 8017286:	2301      	moveq	r3, #1
 8017288:	61a3      	streq	r3, [r4, #24]
 801728a:	4620      	mov	r0, r4
 801728c:	f000 f820 	bl	80172d0 <__sfp>
 8017290:	6060      	str	r0, [r4, #4]
 8017292:	4620      	mov	r0, r4
 8017294:	f000 f81c 	bl	80172d0 <__sfp>
 8017298:	60a0      	str	r0, [r4, #8]
 801729a:	4620      	mov	r0, r4
 801729c:	f000 f818 	bl	80172d0 <__sfp>
 80172a0:	2200      	movs	r2, #0
 80172a2:	60e0      	str	r0, [r4, #12]
 80172a4:	2104      	movs	r1, #4
 80172a6:	6860      	ldr	r0, [r4, #4]
 80172a8:	f7ff ff82 	bl	80171b0 <std>
 80172ac:	68a0      	ldr	r0, [r4, #8]
 80172ae:	2201      	movs	r2, #1
 80172b0:	2109      	movs	r1, #9
 80172b2:	f7ff ff7d 	bl	80171b0 <std>
 80172b6:	68e0      	ldr	r0, [r4, #12]
 80172b8:	2202      	movs	r2, #2
 80172ba:	2112      	movs	r1, #18
 80172bc:	f7ff ff78 	bl	80171b0 <std>
 80172c0:	2301      	movs	r3, #1
 80172c2:	61a3      	str	r3, [r4, #24]
 80172c4:	e7d2      	b.n	801726c <__sinit+0xc>
 80172c6:	bf00      	nop
 80172c8:	0801c88c 	.word	0x0801c88c
 80172cc:	080171f9 	.word	0x080171f9

080172d0 <__sfp>:
 80172d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172d2:	4607      	mov	r7, r0
 80172d4:	f7ff ffac 	bl	8017230 <__sfp_lock_acquire>
 80172d8:	4b1e      	ldr	r3, [pc, #120]	; (8017354 <__sfp+0x84>)
 80172da:	681e      	ldr	r6, [r3, #0]
 80172dc:	69b3      	ldr	r3, [r6, #24]
 80172de:	b913      	cbnz	r3, 80172e6 <__sfp+0x16>
 80172e0:	4630      	mov	r0, r6
 80172e2:	f7ff ffbd 	bl	8017260 <__sinit>
 80172e6:	3648      	adds	r6, #72	; 0x48
 80172e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80172ec:	3b01      	subs	r3, #1
 80172ee:	d503      	bpl.n	80172f8 <__sfp+0x28>
 80172f0:	6833      	ldr	r3, [r6, #0]
 80172f2:	b30b      	cbz	r3, 8017338 <__sfp+0x68>
 80172f4:	6836      	ldr	r6, [r6, #0]
 80172f6:	e7f7      	b.n	80172e8 <__sfp+0x18>
 80172f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80172fc:	b9d5      	cbnz	r5, 8017334 <__sfp+0x64>
 80172fe:	4b16      	ldr	r3, [pc, #88]	; (8017358 <__sfp+0x88>)
 8017300:	60e3      	str	r3, [r4, #12]
 8017302:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017306:	6665      	str	r5, [r4, #100]	; 0x64
 8017308:	f000 fbcc 	bl	8017aa4 <__retarget_lock_init_recursive>
 801730c:	f7ff ff96 	bl	801723c <__sfp_lock_release>
 8017310:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017314:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017318:	6025      	str	r5, [r4, #0]
 801731a:	61a5      	str	r5, [r4, #24]
 801731c:	2208      	movs	r2, #8
 801731e:	4629      	mov	r1, r5
 8017320:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017324:	f7fd fc68 	bl	8014bf8 <memset>
 8017328:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801732c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017330:	4620      	mov	r0, r4
 8017332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017334:	3468      	adds	r4, #104	; 0x68
 8017336:	e7d9      	b.n	80172ec <__sfp+0x1c>
 8017338:	2104      	movs	r1, #4
 801733a:	4638      	mov	r0, r7
 801733c:	f7ff ff62 	bl	8017204 <__sfmoreglue>
 8017340:	4604      	mov	r4, r0
 8017342:	6030      	str	r0, [r6, #0]
 8017344:	2800      	cmp	r0, #0
 8017346:	d1d5      	bne.n	80172f4 <__sfp+0x24>
 8017348:	f7ff ff78 	bl	801723c <__sfp_lock_release>
 801734c:	230c      	movs	r3, #12
 801734e:	603b      	str	r3, [r7, #0]
 8017350:	e7ee      	b.n	8017330 <__sfp+0x60>
 8017352:	bf00      	nop
 8017354:	0801c88c 	.word	0x0801c88c
 8017358:	ffff0001 	.word	0xffff0001

0801735c <fiprintf>:
 801735c:	b40e      	push	{r1, r2, r3}
 801735e:	b503      	push	{r0, r1, lr}
 8017360:	4601      	mov	r1, r0
 8017362:	ab03      	add	r3, sp, #12
 8017364:	4805      	ldr	r0, [pc, #20]	; (801737c <fiprintf+0x20>)
 8017366:	f853 2b04 	ldr.w	r2, [r3], #4
 801736a:	6800      	ldr	r0, [r0, #0]
 801736c:	9301      	str	r3, [sp, #4]
 801736e:	f001 fa0b 	bl	8018788 <_vfiprintf_r>
 8017372:	b002      	add	sp, #8
 8017374:	f85d eb04 	ldr.w	lr, [sp], #4
 8017378:	b003      	add	sp, #12
 801737a:	4770      	bx	lr
 801737c:	2000003c 	.word	0x2000003c

08017380 <_fwalk_reent>:
 8017380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017384:	4606      	mov	r6, r0
 8017386:	4688      	mov	r8, r1
 8017388:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801738c:	2700      	movs	r7, #0
 801738e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017392:	f1b9 0901 	subs.w	r9, r9, #1
 8017396:	d505      	bpl.n	80173a4 <_fwalk_reent+0x24>
 8017398:	6824      	ldr	r4, [r4, #0]
 801739a:	2c00      	cmp	r4, #0
 801739c:	d1f7      	bne.n	801738e <_fwalk_reent+0xe>
 801739e:	4638      	mov	r0, r7
 80173a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173a4:	89ab      	ldrh	r3, [r5, #12]
 80173a6:	2b01      	cmp	r3, #1
 80173a8:	d907      	bls.n	80173ba <_fwalk_reent+0x3a>
 80173aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80173ae:	3301      	adds	r3, #1
 80173b0:	d003      	beq.n	80173ba <_fwalk_reent+0x3a>
 80173b2:	4629      	mov	r1, r5
 80173b4:	4630      	mov	r0, r6
 80173b6:	47c0      	blx	r8
 80173b8:	4307      	orrs	r7, r0
 80173ba:	3568      	adds	r5, #104	; 0x68
 80173bc:	e7e9      	b.n	8017392 <_fwalk_reent+0x12>

080173be <rshift>:
 80173be:	6903      	ldr	r3, [r0, #16]
 80173c0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80173c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173c8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80173cc:	f100 0414 	add.w	r4, r0, #20
 80173d0:	dd45      	ble.n	801745e <rshift+0xa0>
 80173d2:	f011 011f 	ands.w	r1, r1, #31
 80173d6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80173da:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80173de:	d10c      	bne.n	80173fa <rshift+0x3c>
 80173e0:	f100 0710 	add.w	r7, r0, #16
 80173e4:	4629      	mov	r1, r5
 80173e6:	42b1      	cmp	r1, r6
 80173e8:	d334      	bcc.n	8017454 <rshift+0x96>
 80173ea:	1a9b      	subs	r3, r3, r2
 80173ec:	009b      	lsls	r3, r3, #2
 80173ee:	1eea      	subs	r2, r5, #3
 80173f0:	4296      	cmp	r6, r2
 80173f2:	bf38      	it	cc
 80173f4:	2300      	movcc	r3, #0
 80173f6:	4423      	add	r3, r4
 80173f8:	e015      	b.n	8017426 <rshift+0x68>
 80173fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80173fe:	f1c1 0820 	rsb	r8, r1, #32
 8017402:	40cf      	lsrs	r7, r1
 8017404:	f105 0e04 	add.w	lr, r5, #4
 8017408:	46a1      	mov	r9, r4
 801740a:	4576      	cmp	r6, lr
 801740c:	46f4      	mov	ip, lr
 801740e:	d815      	bhi.n	801743c <rshift+0x7e>
 8017410:	1a9b      	subs	r3, r3, r2
 8017412:	009a      	lsls	r2, r3, #2
 8017414:	3a04      	subs	r2, #4
 8017416:	3501      	adds	r5, #1
 8017418:	42ae      	cmp	r6, r5
 801741a:	bf38      	it	cc
 801741c:	2200      	movcc	r2, #0
 801741e:	18a3      	adds	r3, r4, r2
 8017420:	50a7      	str	r7, [r4, r2]
 8017422:	b107      	cbz	r7, 8017426 <rshift+0x68>
 8017424:	3304      	adds	r3, #4
 8017426:	1b1a      	subs	r2, r3, r4
 8017428:	42a3      	cmp	r3, r4
 801742a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801742e:	bf08      	it	eq
 8017430:	2300      	moveq	r3, #0
 8017432:	6102      	str	r2, [r0, #16]
 8017434:	bf08      	it	eq
 8017436:	6143      	streq	r3, [r0, #20]
 8017438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801743c:	f8dc c000 	ldr.w	ip, [ip]
 8017440:	fa0c fc08 	lsl.w	ip, ip, r8
 8017444:	ea4c 0707 	orr.w	r7, ip, r7
 8017448:	f849 7b04 	str.w	r7, [r9], #4
 801744c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017450:	40cf      	lsrs	r7, r1
 8017452:	e7da      	b.n	801740a <rshift+0x4c>
 8017454:	f851 cb04 	ldr.w	ip, [r1], #4
 8017458:	f847 cf04 	str.w	ip, [r7, #4]!
 801745c:	e7c3      	b.n	80173e6 <rshift+0x28>
 801745e:	4623      	mov	r3, r4
 8017460:	e7e1      	b.n	8017426 <rshift+0x68>

08017462 <__hexdig_fun>:
 8017462:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017466:	2b09      	cmp	r3, #9
 8017468:	d802      	bhi.n	8017470 <__hexdig_fun+0xe>
 801746a:	3820      	subs	r0, #32
 801746c:	b2c0      	uxtb	r0, r0
 801746e:	4770      	bx	lr
 8017470:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017474:	2b05      	cmp	r3, #5
 8017476:	d801      	bhi.n	801747c <__hexdig_fun+0x1a>
 8017478:	3847      	subs	r0, #71	; 0x47
 801747a:	e7f7      	b.n	801746c <__hexdig_fun+0xa>
 801747c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017480:	2b05      	cmp	r3, #5
 8017482:	d801      	bhi.n	8017488 <__hexdig_fun+0x26>
 8017484:	3827      	subs	r0, #39	; 0x27
 8017486:	e7f1      	b.n	801746c <__hexdig_fun+0xa>
 8017488:	2000      	movs	r0, #0
 801748a:	4770      	bx	lr

0801748c <__gethex>:
 801748c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017490:	ed2d 8b02 	vpush	{d8}
 8017494:	b089      	sub	sp, #36	; 0x24
 8017496:	ee08 0a10 	vmov	s16, r0
 801749a:	9304      	str	r3, [sp, #16]
 801749c:	4bbc      	ldr	r3, [pc, #752]	; (8017790 <__gethex+0x304>)
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	9301      	str	r3, [sp, #4]
 80174a2:	4618      	mov	r0, r3
 80174a4:	468b      	mov	fp, r1
 80174a6:	4690      	mov	r8, r2
 80174a8:	f7e8 feb2 	bl	8000210 <strlen>
 80174ac:	9b01      	ldr	r3, [sp, #4]
 80174ae:	f8db 2000 	ldr.w	r2, [fp]
 80174b2:	4403      	add	r3, r0
 80174b4:	4682      	mov	sl, r0
 80174b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80174ba:	9305      	str	r3, [sp, #20]
 80174bc:	1c93      	adds	r3, r2, #2
 80174be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80174c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80174c6:	32fe      	adds	r2, #254	; 0xfe
 80174c8:	18d1      	adds	r1, r2, r3
 80174ca:	461f      	mov	r7, r3
 80174cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80174d0:	9100      	str	r1, [sp, #0]
 80174d2:	2830      	cmp	r0, #48	; 0x30
 80174d4:	d0f8      	beq.n	80174c8 <__gethex+0x3c>
 80174d6:	f7ff ffc4 	bl	8017462 <__hexdig_fun>
 80174da:	4604      	mov	r4, r0
 80174dc:	2800      	cmp	r0, #0
 80174de:	d13a      	bne.n	8017556 <__gethex+0xca>
 80174e0:	9901      	ldr	r1, [sp, #4]
 80174e2:	4652      	mov	r2, sl
 80174e4:	4638      	mov	r0, r7
 80174e6:	f7fe f92b 	bl	8015740 <strncmp>
 80174ea:	4605      	mov	r5, r0
 80174ec:	2800      	cmp	r0, #0
 80174ee:	d168      	bne.n	80175c2 <__gethex+0x136>
 80174f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80174f4:	eb07 060a 	add.w	r6, r7, sl
 80174f8:	f7ff ffb3 	bl	8017462 <__hexdig_fun>
 80174fc:	2800      	cmp	r0, #0
 80174fe:	d062      	beq.n	80175c6 <__gethex+0x13a>
 8017500:	4633      	mov	r3, r6
 8017502:	7818      	ldrb	r0, [r3, #0]
 8017504:	2830      	cmp	r0, #48	; 0x30
 8017506:	461f      	mov	r7, r3
 8017508:	f103 0301 	add.w	r3, r3, #1
 801750c:	d0f9      	beq.n	8017502 <__gethex+0x76>
 801750e:	f7ff ffa8 	bl	8017462 <__hexdig_fun>
 8017512:	2301      	movs	r3, #1
 8017514:	fab0 f480 	clz	r4, r0
 8017518:	0964      	lsrs	r4, r4, #5
 801751a:	4635      	mov	r5, r6
 801751c:	9300      	str	r3, [sp, #0]
 801751e:	463a      	mov	r2, r7
 8017520:	4616      	mov	r6, r2
 8017522:	3201      	adds	r2, #1
 8017524:	7830      	ldrb	r0, [r6, #0]
 8017526:	f7ff ff9c 	bl	8017462 <__hexdig_fun>
 801752a:	2800      	cmp	r0, #0
 801752c:	d1f8      	bne.n	8017520 <__gethex+0x94>
 801752e:	9901      	ldr	r1, [sp, #4]
 8017530:	4652      	mov	r2, sl
 8017532:	4630      	mov	r0, r6
 8017534:	f7fe f904 	bl	8015740 <strncmp>
 8017538:	b980      	cbnz	r0, 801755c <__gethex+0xd0>
 801753a:	b94d      	cbnz	r5, 8017550 <__gethex+0xc4>
 801753c:	eb06 050a 	add.w	r5, r6, sl
 8017540:	462a      	mov	r2, r5
 8017542:	4616      	mov	r6, r2
 8017544:	3201      	adds	r2, #1
 8017546:	7830      	ldrb	r0, [r6, #0]
 8017548:	f7ff ff8b 	bl	8017462 <__hexdig_fun>
 801754c:	2800      	cmp	r0, #0
 801754e:	d1f8      	bne.n	8017542 <__gethex+0xb6>
 8017550:	1bad      	subs	r5, r5, r6
 8017552:	00ad      	lsls	r5, r5, #2
 8017554:	e004      	b.n	8017560 <__gethex+0xd4>
 8017556:	2400      	movs	r4, #0
 8017558:	4625      	mov	r5, r4
 801755a:	e7e0      	b.n	801751e <__gethex+0x92>
 801755c:	2d00      	cmp	r5, #0
 801755e:	d1f7      	bne.n	8017550 <__gethex+0xc4>
 8017560:	7833      	ldrb	r3, [r6, #0]
 8017562:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017566:	2b50      	cmp	r3, #80	; 0x50
 8017568:	d13b      	bne.n	80175e2 <__gethex+0x156>
 801756a:	7873      	ldrb	r3, [r6, #1]
 801756c:	2b2b      	cmp	r3, #43	; 0x2b
 801756e:	d02c      	beq.n	80175ca <__gethex+0x13e>
 8017570:	2b2d      	cmp	r3, #45	; 0x2d
 8017572:	d02e      	beq.n	80175d2 <__gethex+0x146>
 8017574:	1c71      	adds	r1, r6, #1
 8017576:	f04f 0900 	mov.w	r9, #0
 801757a:	7808      	ldrb	r0, [r1, #0]
 801757c:	f7ff ff71 	bl	8017462 <__hexdig_fun>
 8017580:	1e43      	subs	r3, r0, #1
 8017582:	b2db      	uxtb	r3, r3
 8017584:	2b18      	cmp	r3, #24
 8017586:	d82c      	bhi.n	80175e2 <__gethex+0x156>
 8017588:	f1a0 0210 	sub.w	r2, r0, #16
 801758c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017590:	f7ff ff67 	bl	8017462 <__hexdig_fun>
 8017594:	1e43      	subs	r3, r0, #1
 8017596:	b2db      	uxtb	r3, r3
 8017598:	2b18      	cmp	r3, #24
 801759a:	d91d      	bls.n	80175d8 <__gethex+0x14c>
 801759c:	f1b9 0f00 	cmp.w	r9, #0
 80175a0:	d000      	beq.n	80175a4 <__gethex+0x118>
 80175a2:	4252      	negs	r2, r2
 80175a4:	4415      	add	r5, r2
 80175a6:	f8cb 1000 	str.w	r1, [fp]
 80175aa:	b1e4      	cbz	r4, 80175e6 <__gethex+0x15a>
 80175ac:	9b00      	ldr	r3, [sp, #0]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	bf14      	ite	ne
 80175b2:	2700      	movne	r7, #0
 80175b4:	2706      	moveq	r7, #6
 80175b6:	4638      	mov	r0, r7
 80175b8:	b009      	add	sp, #36	; 0x24
 80175ba:	ecbd 8b02 	vpop	{d8}
 80175be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175c2:	463e      	mov	r6, r7
 80175c4:	4625      	mov	r5, r4
 80175c6:	2401      	movs	r4, #1
 80175c8:	e7ca      	b.n	8017560 <__gethex+0xd4>
 80175ca:	f04f 0900 	mov.w	r9, #0
 80175ce:	1cb1      	adds	r1, r6, #2
 80175d0:	e7d3      	b.n	801757a <__gethex+0xee>
 80175d2:	f04f 0901 	mov.w	r9, #1
 80175d6:	e7fa      	b.n	80175ce <__gethex+0x142>
 80175d8:	230a      	movs	r3, #10
 80175da:	fb03 0202 	mla	r2, r3, r2, r0
 80175de:	3a10      	subs	r2, #16
 80175e0:	e7d4      	b.n	801758c <__gethex+0x100>
 80175e2:	4631      	mov	r1, r6
 80175e4:	e7df      	b.n	80175a6 <__gethex+0x11a>
 80175e6:	1bf3      	subs	r3, r6, r7
 80175e8:	3b01      	subs	r3, #1
 80175ea:	4621      	mov	r1, r4
 80175ec:	2b07      	cmp	r3, #7
 80175ee:	dc0b      	bgt.n	8017608 <__gethex+0x17c>
 80175f0:	ee18 0a10 	vmov	r0, s16
 80175f4:	f000 fa78 	bl	8017ae8 <_Balloc>
 80175f8:	4604      	mov	r4, r0
 80175fa:	b940      	cbnz	r0, 801760e <__gethex+0x182>
 80175fc:	4b65      	ldr	r3, [pc, #404]	; (8017794 <__gethex+0x308>)
 80175fe:	4602      	mov	r2, r0
 8017600:	21de      	movs	r1, #222	; 0xde
 8017602:	4865      	ldr	r0, [pc, #404]	; (8017798 <__gethex+0x30c>)
 8017604:	f7fe ff3e 	bl	8016484 <__assert_func>
 8017608:	3101      	adds	r1, #1
 801760a:	105b      	asrs	r3, r3, #1
 801760c:	e7ee      	b.n	80175ec <__gethex+0x160>
 801760e:	f100 0914 	add.w	r9, r0, #20
 8017612:	f04f 0b00 	mov.w	fp, #0
 8017616:	f1ca 0301 	rsb	r3, sl, #1
 801761a:	f8cd 9008 	str.w	r9, [sp, #8]
 801761e:	f8cd b000 	str.w	fp, [sp]
 8017622:	9306      	str	r3, [sp, #24]
 8017624:	42b7      	cmp	r7, r6
 8017626:	d340      	bcc.n	80176aa <__gethex+0x21e>
 8017628:	9802      	ldr	r0, [sp, #8]
 801762a:	9b00      	ldr	r3, [sp, #0]
 801762c:	f840 3b04 	str.w	r3, [r0], #4
 8017630:	eba0 0009 	sub.w	r0, r0, r9
 8017634:	1080      	asrs	r0, r0, #2
 8017636:	0146      	lsls	r6, r0, #5
 8017638:	6120      	str	r0, [r4, #16]
 801763a:	4618      	mov	r0, r3
 801763c:	f000 fb4a 	bl	8017cd4 <__hi0bits>
 8017640:	1a30      	subs	r0, r6, r0
 8017642:	f8d8 6000 	ldr.w	r6, [r8]
 8017646:	42b0      	cmp	r0, r6
 8017648:	dd63      	ble.n	8017712 <__gethex+0x286>
 801764a:	1b87      	subs	r7, r0, r6
 801764c:	4639      	mov	r1, r7
 801764e:	4620      	mov	r0, r4
 8017650:	f000 fee4 	bl	801841c <__any_on>
 8017654:	4682      	mov	sl, r0
 8017656:	b1a8      	cbz	r0, 8017684 <__gethex+0x1f8>
 8017658:	1e7b      	subs	r3, r7, #1
 801765a:	1159      	asrs	r1, r3, #5
 801765c:	f003 021f 	and.w	r2, r3, #31
 8017660:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017664:	f04f 0a01 	mov.w	sl, #1
 8017668:	fa0a f202 	lsl.w	r2, sl, r2
 801766c:	420a      	tst	r2, r1
 801766e:	d009      	beq.n	8017684 <__gethex+0x1f8>
 8017670:	4553      	cmp	r3, sl
 8017672:	dd05      	ble.n	8017680 <__gethex+0x1f4>
 8017674:	1eb9      	subs	r1, r7, #2
 8017676:	4620      	mov	r0, r4
 8017678:	f000 fed0 	bl	801841c <__any_on>
 801767c:	2800      	cmp	r0, #0
 801767e:	d145      	bne.n	801770c <__gethex+0x280>
 8017680:	f04f 0a02 	mov.w	sl, #2
 8017684:	4639      	mov	r1, r7
 8017686:	4620      	mov	r0, r4
 8017688:	f7ff fe99 	bl	80173be <rshift>
 801768c:	443d      	add	r5, r7
 801768e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017692:	42ab      	cmp	r3, r5
 8017694:	da4c      	bge.n	8017730 <__gethex+0x2a4>
 8017696:	ee18 0a10 	vmov	r0, s16
 801769a:	4621      	mov	r1, r4
 801769c:	f000 fa64 	bl	8017b68 <_Bfree>
 80176a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80176a2:	2300      	movs	r3, #0
 80176a4:	6013      	str	r3, [r2, #0]
 80176a6:	27a3      	movs	r7, #163	; 0xa3
 80176a8:	e785      	b.n	80175b6 <__gethex+0x12a>
 80176aa:	1e73      	subs	r3, r6, #1
 80176ac:	9a05      	ldr	r2, [sp, #20]
 80176ae:	9303      	str	r3, [sp, #12]
 80176b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80176b4:	4293      	cmp	r3, r2
 80176b6:	d019      	beq.n	80176ec <__gethex+0x260>
 80176b8:	f1bb 0f20 	cmp.w	fp, #32
 80176bc:	d107      	bne.n	80176ce <__gethex+0x242>
 80176be:	9b02      	ldr	r3, [sp, #8]
 80176c0:	9a00      	ldr	r2, [sp, #0]
 80176c2:	f843 2b04 	str.w	r2, [r3], #4
 80176c6:	9302      	str	r3, [sp, #8]
 80176c8:	2300      	movs	r3, #0
 80176ca:	9300      	str	r3, [sp, #0]
 80176cc:	469b      	mov	fp, r3
 80176ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80176d2:	f7ff fec6 	bl	8017462 <__hexdig_fun>
 80176d6:	9b00      	ldr	r3, [sp, #0]
 80176d8:	f000 000f 	and.w	r0, r0, #15
 80176dc:	fa00 f00b 	lsl.w	r0, r0, fp
 80176e0:	4303      	orrs	r3, r0
 80176e2:	9300      	str	r3, [sp, #0]
 80176e4:	f10b 0b04 	add.w	fp, fp, #4
 80176e8:	9b03      	ldr	r3, [sp, #12]
 80176ea:	e00d      	b.n	8017708 <__gethex+0x27c>
 80176ec:	9b03      	ldr	r3, [sp, #12]
 80176ee:	9a06      	ldr	r2, [sp, #24]
 80176f0:	4413      	add	r3, r2
 80176f2:	42bb      	cmp	r3, r7
 80176f4:	d3e0      	bcc.n	80176b8 <__gethex+0x22c>
 80176f6:	4618      	mov	r0, r3
 80176f8:	9901      	ldr	r1, [sp, #4]
 80176fa:	9307      	str	r3, [sp, #28]
 80176fc:	4652      	mov	r2, sl
 80176fe:	f7fe f81f 	bl	8015740 <strncmp>
 8017702:	9b07      	ldr	r3, [sp, #28]
 8017704:	2800      	cmp	r0, #0
 8017706:	d1d7      	bne.n	80176b8 <__gethex+0x22c>
 8017708:	461e      	mov	r6, r3
 801770a:	e78b      	b.n	8017624 <__gethex+0x198>
 801770c:	f04f 0a03 	mov.w	sl, #3
 8017710:	e7b8      	b.n	8017684 <__gethex+0x1f8>
 8017712:	da0a      	bge.n	801772a <__gethex+0x29e>
 8017714:	1a37      	subs	r7, r6, r0
 8017716:	4621      	mov	r1, r4
 8017718:	ee18 0a10 	vmov	r0, s16
 801771c:	463a      	mov	r2, r7
 801771e:	f000 fc3f 	bl	8017fa0 <__lshift>
 8017722:	1bed      	subs	r5, r5, r7
 8017724:	4604      	mov	r4, r0
 8017726:	f100 0914 	add.w	r9, r0, #20
 801772a:	f04f 0a00 	mov.w	sl, #0
 801772e:	e7ae      	b.n	801768e <__gethex+0x202>
 8017730:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017734:	42a8      	cmp	r0, r5
 8017736:	dd72      	ble.n	801781e <__gethex+0x392>
 8017738:	1b45      	subs	r5, r0, r5
 801773a:	42ae      	cmp	r6, r5
 801773c:	dc36      	bgt.n	80177ac <__gethex+0x320>
 801773e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017742:	2b02      	cmp	r3, #2
 8017744:	d02a      	beq.n	801779c <__gethex+0x310>
 8017746:	2b03      	cmp	r3, #3
 8017748:	d02c      	beq.n	80177a4 <__gethex+0x318>
 801774a:	2b01      	cmp	r3, #1
 801774c:	d115      	bne.n	801777a <__gethex+0x2ee>
 801774e:	42ae      	cmp	r6, r5
 8017750:	d113      	bne.n	801777a <__gethex+0x2ee>
 8017752:	2e01      	cmp	r6, #1
 8017754:	d10b      	bne.n	801776e <__gethex+0x2e2>
 8017756:	9a04      	ldr	r2, [sp, #16]
 8017758:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801775c:	6013      	str	r3, [r2, #0]
 801775e:	2301      	movs	r3, #1
 8017760:	6123      	str	r3, [r4, #16]
 8017762:	f8c9 3000 	str.w	r3, [r9]
 8017766:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017768:	2762      	movs	r7, #98	; 0x62
 801776a:	601c      	str	r4, [r3, #0]
 801776c:	e723      	b.n	80175b6 <__gethex+0x12a>
 801776e:	1e71      	subs	r1, r6, #1
 8017770:	4620      	mov	r0, r4
 8017772:	f000 fe53 	bl	801841c <__any_on>
 8017776:	2800      	cmp	r0, #0
 8017778:	d1ed      	bne.n	8017756 <__gethex+0x2ca>
 801777a:	ee18 0a10 	vmov	r0, s16
 801777e:	4621      	mov	r1, r4
 8017780:	f000 f9f2 	bl	8017b68 <_Bfree>
 8017784:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017786:	2300      	movs	r3, #0
 8017788:	6013      	str	r3, [r2, #0]
 801778a:	2750      	movs	r7, #80	; 0x50
 801778c:	e713      	b.n	80175b6 <__gethex+0x12a>
 801778e:	bf00      	nop
 8017790:	0801cb78 	.word	0x0801cb78
 8017794:	0801ca99 	.word	0x0801ca99
 8017798:	0801cb0c 	.word	0x0801cb0c
 801779c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d1eb      	bne.n	801777a <__gethex+0x2ee>
 80177a2:	e7d8      	b.n	8017756 <__gethex+0x2ca>
 80177a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d1d5      	bne.n	8017756 <__gethex+0x2ca>
 80177aa:	e7e6      	b.n	801777a <__gethex+0x2ee>
 80177ac:	1e6f      	subs	r7, r5, #1
 80177ae:	f1ba 0f00 	cmp.w	sl, #0
 80177b2:	d131      	bne.n	8017818 <__gethex+0x38c>
 80177b4:	b127      	cbz	r7, 80177c0 <__gethex+0x334>
 80177b6:	4639      	mov	r1, r7
 80177b8:	4620      	mov	r0, r4
 80177ba:	f000 fe2f 	bl	801841c <__any_on>
 80177be:	4682      	mov	sl, r0
 80177c0:	117b      	asrs	r3, r7, #5
 80177c2:	2101      	movs	r1, #1
 80177c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80177c8:	f007 071f 	and.w	r7, r7, #31
 80177cc:	fa01 f707 	lsl.w	r7, r1, r7
 80177d0:	421f      	tst	r7, r3
 80177d2:	4629      	mov	r1, r5
 80177d4:	4620      	mov	r0, r4
 80177d6:	bf18      	it	ne
 80177d8:	f04a 0a02 	orrne.w	sl, sl, #2
 80177dc:	1b76      	subs	r6, r6, r5
 80177de:	f7ff fdee 	bl	80173be <rshift>
 80177e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80177e6:	2702      	movs	r7, #2
 80177e8:	f1ba 0f00 	cmp.w	sl, #0
 80177ec:	d048      	beq.n	8017880 <__gethex+0x3f4>
 80177ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80177f2:	2b02      	cmp	r3, #2
 80177f4:	d015      	beq.n	8017822 <__gethex+0x396>
 80177f6:	2b03      	cmp	r3, #3
 80177f8:	d017      	beq.n	801782a <__gethex+0x39e>
 80177fa:	2b01      	cmp	r3, #1
 80177fc:	d109      	bne.n	8017812 <__gethex+0x386>
 80177fe:	f01a 0f02 	tst.w	sl, #2
 8017802:	d006      	beq.n	8017812 <__gethex+0x386>
 8017804:	f8d9 0000 	ldr.w	r0, [r9]
 8017808:	ea4a 0a00 	orr.w	sl, sl, r0
 801780c:	f01a 0f01 	tst.w	sl, #1
 8017810:	d10e      	bne.n	8017830 <__gethex+0x3a4>
 8017812:	f047 0710 	orr.w	r7, r7, #16
 8017816:	e033      	b.n	8017880 <__gethex+0x3f4>
 8017818:	f04f 0a01 	mov.w	sl, #1
 801781c:	e7d0      	b.n	80177c0 <__gethex+0x334>
 801781e:	2701      	movs	r7, #1
 8017820:	e7e2      	b.n	80177e8 <__gethex+0x35c>
 8017822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017824:	f1c3 0301 	rsb	r3, r3, #1
 8017828:	9315      	str	r3, [sp, #84]	; 0x54
 801782a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801782c:	2b00      	cmp	r3, #0
 801782e:	d0f0      	beq.n	8017812 <__gethex+0x386>
 8017830:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017834:	f104 0314 	add.w	r3, r4, #20
 8017838:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801783c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017840:	f04f 0c00 	mov.w	ip, #0
 8017844:	4618      	mov	r0, r3
 8017846:	f853 2b04 	ldr.w	r2, [r3], #4
 801784a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801784e:	d01c      	beq.n	801788a <__gethex+0x3fe>
 8017850:	3201      	adds	r2, #1
 8017852:	6002      	str	r2, [r0, #0]
 8017854:	2f02      	cmp	r7, #2
 8017856:	f104 0314 	add.w	r3, r4, #20
 801785a:	d13f      	bne.n	80178dc <__gethex+0x450>
 801785c:	f8d8 2000 	ldr.w	r2, [r8]
 8017860:	3a01      	subs	r2, #1
 8017862:	42b2      	cmp	r2, r6
 8017864:	d10a      	bne.n	801787c <__gethex+0x3f0>
 8017866:	1171      	asrs	r1, r6, #5
 8017868:	2201      	movs	r2, #1
 801786a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801786e:	f006 061f 	and.w	r6, r6, #31
 8017872:	fa02 f606 	lsl.w	r6, r2, r6
 8017876:	421e      	tst	r6, r3
 8017878:	bf18      	it	ne
 801787a:	4617      	movne	r7, r2
 801787c:	f047 0720 	orr.w	r7, r7, #32
 8017880:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017882:	601c      	str	r4, [r3, #0]
 8017884:	9b04      	ldr	r3, [sp, #16]
 8017886:	601d      	str	r5, [r3, #0]
 8017888:	e695      	b.n	80175b6 <__gethex+0x12a>
 801788a:	4299      	cmp	r1, r3
 801788c:	f843 cc04 	str.w	ip, [r3, #-4]
 8017890:	d8d8      	bhi.n	8017844 <__gethex+0x3b8>
 8017892:	68a3      	ldr	r3, [r4, #8]
 8017894:	459b      	cmp	fp, r3
 8017896:	db19      	blt.n	80178cc <__gethex+0x440>
 8017898:	6861      	ldr	r1, [r4, #4]
 801789a:	ee18 0a10 	vmov	r0, s16
 801789e:	3101      	adds	r1, #1
 80178a0:	f000 f922 	bl	8017ae8 <_Balloc>
 80178a4:	4681      	mov	r9, r0
 80178a6:	b918      	cbnz	r0, 80178b0 <__gethex+0x424>
 80178a8:	4b1a      	ldr	r3, [pc, #104]	; (8017914 <__gethex+0x488>)
 80178aa:	4602      	mov	r2, r0
 80178ac:	2184      	movs	r1, #132	; 0x84
 80178ae:	e6a8      	b.n	8017602 <__gethex+0x176>
 80178b0:	6922      	ldr	r2, [r4, #16]
 80178b2:	3202      	adds	r2, #2
 80178b4:	f104 010c 	add.w	r1, r4, #12
 80178b8:	0092      	lsls	r2, r2, #2
 80178ba:	300c      	adds	r0, #12
 80178bc:	f7fd f974 	bl	8014ba8 <memcpy>
 80178c0:	4621      	mov	r1, r4
 80178c2:	ee18 0a10 	vmov	r0, s16
 80178c6:	f000 f94f 	bl	8017b68 <_Bfree>
 80178ca:	464c      	mov	r4, r9
 80178cc:	6923      	ldr	r3, [r4, #16]
 80178ce:	1c5a      	adds	r2, r3, #1
 80178d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80178d4:	6122      	str	r2, [r4, #16]
 80178d6:	2201      	movs	r2, #1
 80178d8:	615a      	str	r2, [r3, #20]
 80178da:	e7bb      	b.n	8017854 <__gethex+0x3c8>
 80178dc:	6922      	ldr	r2, [r4, #16]
 80178de:	455a      	cmp	r2, fp
 80178e0:	dd0b      	ble.n	80178fa <__gethex+0x46e>
 80178e2:	2101      	movs	r1, #1
 80178e4:	4620      	mov	r0, r4
 80178e6:	f7ff fd6a 	bl	80173be <rshift>
 80178ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80178ee:	3501      	adds	r5, #1
 80178f0:	42ab      	cmp	r3, r5
 80178f2:	f6ff aed0 	blt.w	8017696 <__gethex+0x20a>
 80178f6:	2701      	movs	r7, #1
 80178f8:	e7c0      	b.n	801787c <__gethex+0x3f0>
 80178fa:	f016 061f 	ands.w	r6, r6, #31
 80178fe:	d0fa      	beq.n	80178f6 <__gethex+0x46a>
 8017900:	449a      	add	sl, r3
 8017902:	f1c6 0620 	rsb	r6, r6, #32
 8017906:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801790a:	f000 f9e3 	bl	8017cd4 <__hi0bits>
 801790e:	42b0      	cmp	r0, r6
 8017910:	dbe7      	blt.n	80178e2 <__gethex+0x456>
 8017912:	e7f0      	b.n	80178f6 <__gethex+0x46a>
 8017914:	0801ca99 	.word	0x0801ca99

08017918 <L_shift>:
 8017918:	f1c2 0208 	rsb	r2, r2, #8
 801791c:	0092      	lsls	r2, r2, #2
 801791e:	b570      	push	{r4, r5, r6, lr}
 8017920:	f1c2 0620 	rsb	r6, r2, #32
 8017924:	6843      	ldr	r3, [r0, #4]
 8017926:	6804      	ldr	r4, [r0, #0]
 8017928:	fa03 f506 	lsl.w	r5, r3, r6
 801792c:	432c      	orrs	r4, r5
 801792e:	40d3      	lsrs	r3, r2
 8017930:	6004      	str	r4, [r0, #0]
 8017932:	f840 3f04 	str.w	r3, [r0, #4]!
 8017936:	4288      	cmp	r0, r1
 8017938:	d3f4      	bcc.n	8017924 <L_shift+0xc>
 801793a:	bd70      	pop	{r4, r5, r6, pc}

0801793c <__match>:
 801793c:	b530      	push	{r4, r5, lr}
 801793e:	6803      	ldr	r3, [r0, #0]
 8017940:	3301      	adds	r3, #1
 8017942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017946:	b914      	cbnz	r4, 801794e <__match+0x12>
 8017948:	6003      	str	r3, [r0, #0]
 801794a:	2001      	movs	r0, #1
 801794c:	bd30      	pop	{r4, r5, pc}
 801794e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017952:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017956:	2d19      	cmp	r5, #25
 8017958:	bf98      	it	ls
 801795a:	3220      	addls	r2, #32
 801795c:	42a2      	cmp	r2, r4
 801795e:	d0f0      	beq.n	8017942 <__match+0x6>
 8017960:	2000      	movs	r0, #0
 8017962:	e7f3      	b.n	801794c <__match+0x10>

08017964 <__hexnan>:
 8017964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017968:	680b      	ldr	r3, [r1, #0]
 801796a:	6801      	ldr	r1, [r0, #0]
 801796c:	115e      	asrs	r6, r3, #5
 801796e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017972:	f013 031f 	ands.w	r3, r3, #31
 8017976:	b087      	sub	sp, #28
 8017978:	bf18      	it	ne
 801797a:	3604      	addne	r6, #4
 801797c:	2500      	movs	r5, #0
 801797e:	1f37      	subs	r7, r6, #4
 8017980:	4682      	mov	sl, r0
 8017982:	4690      	mov	r8, r2
 8017984:	9301      	str	r3, [sp, #4]
 8017986:	f846 5c04 	str.w	r5, [r6, #-4]
 801798a:	46b9      	mov	r9, r7
 801798c:	463c      	mov	r4, r7
 801798e:	9502      	str	r5, [sp, #8]
 8017990:	46ab      	mov	fp, r5
 8017992:	784a      	ldrb	r2, [r1, #1]
 8017994:	1c4b      	adds	r3, r1, #1
 8017996:	9303      	str	r3, [sp, #12]
 8017998:	b342      	cbz	r2, 80179ec <__hexnan+0x88>
 801799a:	4610      	mov	r0, r2
 801799c:	9105      	str	r1, [sp, #20]
 801799e:	9204      	str	r2, [sp, #16]
 80179a0:	f7ff fd5f 	bl	8017462 <__hexdig_fun>
 80179a4:	2800      	cmp	r0, #0
 80179a6:	d14f      	bne.n	8017a48 <__hexnan+0xe4>
 80179a8:	9a04      	ldr	r2, [sp, #16]
 80179aa:	9905      	ldr	r1, [sp, #20]
 80179ac:	2a20      	cmp	r2, #32
 80179ae:	d818      	bhi.n	80179e2 <__hexnan+0x7e>
 80179b0:	9b02      	ldr	r3, [sp, #8]
 80179b2:	459b      	cmp	fp, r3
 80179b4:	dd13      	ble.n	80179de <__hexnan+0x7a>
 80179b6:	454c      	cmp	r4, r9
 80179b8:	d206      	bcs.n	80179c8 <__hexnan+0x64>
 80179ba:	2d07      	cmp	r5, #7
 80179bc:	dc04      	bgt.n	80179c8 <__hexnan+0x64>
 80179be:	462a      	mov	r2, r5
 80179c0:	4649      	mov	r1, r9
 80179c2:	4620      	mov	r0, r4
 80179c4:	f7ff ffa8 	bl	8017918 <L_shift>
 80179c8:	4544      	cmp	r4, r8
 80179ca:	d950      	bls.n	8017a6e <__hexnan+0x10a>
 80179cc:	2300      	movs	r3, #0
 80179ce:	f1a4 0904 	sub.w	r9, r4, #4
 80179d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80179d6:	f8cd b008 	str.w	fp, [sp, #8]
 80179da:	464c      	mov	r4, r9
 80179dc:	461d      	mov	r5, r3
 80179de:	9903      	ldr	r1, [sp, #12]
 80179e0:	e7d7      	b.n	8017992 <__hexnan+0x2e>
 80179e2:	2a29      	cmp	r2, #41	; 0x29
 80179e4:	d156      	bne.n	8017a94 <__hexnan+0x130>
 80179e6:	3102      	adds	r1, #2
 80179e8:	f8ca 1000 	str.w	r1, [sl]
 80179ec:	f1bb 0f00 	cmp.w	fp, #0
 80179f0:	d050      	beq.n	8017a94 <__hexnan+0x130>
 80179f2:	454c      	cmp	r4, r9
 80179f4:	d206      	bcs.n	8017a04 <__hexnan+0xa0>
 80179f6:	2d07      	cmp	r5, #7
 80179f8:	dc04      	bgt.n	8017a04 <__hexnan+0xa0>
 80179fa:	462a      	mov	r2, r5
 80179fc:	4649      	mov	r1, r9
 80179fe:	4620      	mov	r0, r4
 8017a00:	f7ff ff8a 	bl	8017918 <L_shift>
 8017a04:	4544      	cmp	r4, r8
 8017a06:	d934      	bls.n	8017a72 <__hexnan+0x10e>
 8017a08:	f1a8 0204 	sub.w	r2, r8, #4
 8017a0c:	4623      	mov	r3, r4
 8017a0e:	f853 1b04 	ldr.w	r1, [r3], #4
 8017a12:	f842 1f04 	str.w	r1, [r2, #4]!
 8017a16:	429f      	cmp	r7, r3
 8017a18:	d2f9      	bcs.n	8017a0e <__hexnan+0xaa>
 8017a1a:	1b3b      	subs	r3, r7, r4
 8017a1c:	f023 0303 	bic.w	r3, r3, #3
 8017a20:	3304      	adds	r3, #4
 8017a22:	3401      	adds	r4, #1
 8017a24:	3e03      	subs	r6, #3
 8017a26:	42b4      	cmp	r4, r6
 8017a28:	bf88      	it	hi
 8017a2a:	2304      	movhi	r3, #4
 8017a2c:	4443      	add	r3, r8
 8017a2e:	2200      	movs	r2, #0
 8017a30:	f843 2b04 	str.w	r2, [r3], #4
 8017a34:	429f      	cmp	r7, r3
 8017a36:	d2fb      	bcs.n	8017a30 <__hexnan+0xcc>
 8017a38:	683b      	ldr	r3, [r7, #0]
 8017a3a:	b91b      	cbnz	r3, 8017a44 <__hexnan+0xe0>
 8017a3c:	4547      	cmp	r7, r8
 8017a3e:	d127      	bne.n	8017a90 <__hexnan+0x12c>
 8017a40:	2301      	movs	r3, #1
 8017a42:	603b      	str	r3, [r7, #0]
 8017a44:	2005      	movs	r0, #5
 8017a46:	e026      	b.n	8017a96 <__hexnan+0x132>
 8017a48:	3501      	adds	r5, #1
 8017a4a:	2d08      	cmp	r5, #8
 8017a4c:	f10b 0b01 	add.w	fp, fp, #1
 8017a50:	dd06      	ble.n	8017a60 <__hexnan+0xfc>
 8017a52:	4544      	cmp	r4, r8
 8017a54:	d9c3      	bls.n	80179de <__hexnan+0x7a>
 8017a56:	2300      	movs	r3, #0
 8017a58:	f844 3c04 	str.w	r3, [r4, #-4]
 8017a5c:	2501      	movs	r5, #1
 8017a5e:	3c04      	subs	r4, #4
 8017a60:	6822      	ldr	r2, [r4, #0]
 8017a62:	f000 000f 	and.w	r0, r0, #15
 8017a66:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8017a6a:	6022      	str	r2, [r4, #0]
 8017a6c:	e7b7      	b.n	80179de <__hexnan+0x7a>
 8017a6e:	2508      	movs	r5, #8
 8017a70:	e7b5      	b.n	80179de <__hexnan+0x7a>
 8017a72:	9b01      	ldr	r3, [sp, #4]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d0df      	beq.n	8017a38 <__hexnan+0xd4>
 8017a78:	f04f 32ff 	mov.w	r2, #4294967295
 8017a7c:	f1c3 0320 	rsb	r3, r3, #32
 8017a80:	fa22 f303 	lsr.w	r3, r2, r3
 8017a84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017a88:	401a      	ands	r2, r3
 8017a8a:	f846 2c04 	str.w	r2, [r6, #-4]
 8017a8e:	e7d3      	b.n	8017a38 <__hexnan+0xd4>
 8017a90:	3f04      	subs	r7, #4
 8017a92:	e7d1      	b.n	8017a38 <__hexnan+0xd4>
 8017a94:	2004      	movs	r0, #4
 8017a96:	b007      	add	sp, #28
 8017a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017a9c <_localeconv_r>:
 8017a9c:	4800      	ldr	r0, [pc, #0]	; (8017aa0 <_localeconv_r+0x4>)
 8017a9e:	4770      	bx	lr
 8017aa0:	20000194 	.word	0x20000194

08017aa4 <__retarget_lock_init_recursive>:
 8017aa4:	4770      	bx	lr

08017aa6 <__retarget_lock_acquire_recursive>:
 8017aa6:	4770      	bx	lr

08017aa8 <__retarget_lock_release_recursive>:
 8017aa8:	4770      	bx	lr

08017aaa <__ascii_mbtowc>:
 8017aaa:	b082      	sub	sp, #8
 8017aac:	b901      	cbnz	r1, 8017ab0 <__ascii_mbtowc+0x6>
 8017aae:	a901      	add	r1, sp, #4
 8017ab0:	b142      	cbz	r2, 8017ac4 <__ascii_mbtowc+0x1a>
 8017ab2:	b14b      	cbz	r3, 8017ac8 <__ascii_mbtowc+0x1e>
 8017ab4:	7813      	ldrb	r3, [r2, #0]
 8017ab6:	600b      	str	r3, [r1, #0]
 8017ab8:	7812      	ldrb	r2, [r2, #0]
 8017aba:	1e10      	subs	r0, r2, #0
 8017abc:	bf18      	it	ne
 8017abe:	2001      	movne	r0, #1
 8017ac0:	b002      	add	sp, #8
 8017ac2:	4770      	bx	lr
 8017ac4:	4610      	mov	r0, r2
 8017ac6:	e7fb      	b.n	8017ac0 <__ascii_mbtowc+0x16>
 8017ac8:	f06f 0001 	mvn.w	r0, #1
 8017acc:	e7f8      	b.n	8017ac0 <__ascii_mbtowc+0x16>
	...

08017ad0 <__malloc_lock>:
 8017ad0:	4801      	ldr	r0, [pc, #4]	; (8017ad8 <__malloc_lock+0x8>)
 8017ad2:	f7ff bfe8 	b.w	8017aa6 <__retarget_lock_acquire_recursive>
 8017ad6:	bf00      	nop
 8017ad8:	2000cff0 	.word	0x2000cff0

08017adc <__malloc_unlock>:
 8017adc:	4801      	ldr	r0, [pc, #4]	; (8017ae4 <__malloc_unlock+0x8>)
 8017ade:	f7ff bfe3 	b.w	8017aa8 <__retarget_lock_release_recursive>
 8017ae2:	bf00      	nop
 8017ae4:	2000cff0 	.word	0x2000cff0

08017ae8 <_Balloc>:
 8017ae8:	b570      	push	{r4, r5, r6, lr}
 8017aea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017aec:	4604      	mov	r4, r0
 8017aee:	460d      	mov	r5, r1
 8017af0:	b976      	cbnz	r6, 8017b10 <_Balloc+0x28>
 8017af2:	2010      	movs	r0, #16
 8017af4:	f7fd f83a 	bl	8014b6c <malloc>
 8017af8:	4602      	mov	r2, r0
 8017afa:	6260      	str	r0, [r4, #36]	; 0x24
 8017afc:	b920      	cbnz	r0, 8017b08 <_Balloc+0x20>
 8017afe:	4b18      	ldr	r3, [pc, #96]	; (8017b60 <_Balloc+0x78>)
 8017b00:	4818      	ldr	r0, [pc, #96]	; (8017b64 <_Balloc+0x7c>)
 8017b02:	2166      	movs	r1, #102	; 0x66
 8017b04:	f7fe fcbe 	bl	8016484 <__assert_func>
 8017b08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017b0c:	6006      	str	r6, [r0, #0]
 8017b0e:	60c6      	str	r6, [r0, #12]
 8017b10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017b12:	68f3      	ldr	r3, [r6, #12]
 8017b14:	b183      	cbz	r3, 8017b38 <_Balloc+0x50>
 8017b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b18:	68db      	ldr	r3, [r3, #12]
 8017b1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017b1e:	b9b8      	cbnz	r0, 8017b50 <_Balloc+0x68>
 8017b20:	2101      	movs	r1, #1
 8017b22:	fa01 f605 	lsl.w	r6, r1, r5
 8017b26:	1d72      	adds	r2, r6, #5
 8017b28:	0092      	lsls	r2, r2, #2
 8017b2a:	4620      	mov	r0, r4
 8017b2c:	f000 fc97 	bl	801845e <_calloc_r>
 8017b30:	b160      	cbz	r0, 8017b4c <_Balloc+0x64>
 8017b32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017b36:	e00e      	b.n	8017b56 <_Balloc+0x6e>
 8017b38:	2221      	movs	r2, #33	; 0x21
 8017b3a:	2104      	movs	r1, #4
 8017b3c:	4620      	mov	r0, r4
 8017b3e:	f000 fc8e 	bl	801845e <_calloc_r>
 8017b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b44:	60f0      	str	r0, [r6, #12]
 8017b46:	68db      	ldr	r3, [r3, #12]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d1e4      	bne.n	8017b16 <_Balloc+0x2e>
 8017b4c:	2000      	movs	r0, #0
 8017b4e:	bd70      	pop	{r4, r5, r6, pc}
 8017b50:	6802      	ldr	r2, [r0, #0]
 8017b52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017b56:	2300      	movs	r3, #0
 8017b58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017b5c:	e7f7      	b.n	8017b4e <_Balloc+0x66>
 8017b5e:	bf00      	nop
 8017b60:	0801c8c4 	.word	0x0801c8c4
 8017b64:	0801cb8c 	.word	0x0801cb8c

08017b68 <_Bfree>:
 8017b68:	b570      	push	{r4, r5, r6, lr}
 8017b6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017b6c:	4605      	mov	r5, r0
 8017b6e:	460c      	mov	r4, r1
 8017b70:	b976      	cbnz	r6, 8017b90 <_Bfree+0x28>
 8017b72:	2010      	movs	r0, #16
 8017b74:	f7fc fffa 	bl	8014b6c <malloc>
 8017b78:	4602      	mov	r2, r0
 8017b7a:	6268      	str	r0, [r5, #36]	; 0x24
 8017b7c:	b920      	cbnz	r0, 8017b88 <_Bfree+0x20>
 8017b7e:	4b09      	ldr	r3, [pc, #36]	; (8017ba4 <_Bfree+0x3c>)
 8017b80:	4809      	ldr	r0, [pc, #36]	; (8017ba8 <_Bfree+0x40>)
 8017b82:	218a      	movs	r1, #138	; 0x8a
 8017b84:	f7fe fc7e 	bl	8016484 <__assert_func>
 8017b88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017b8c:	6006      	str	r6, [r0, #0]
 8017b8e:	60c6      	str	r6, [r0, #12]
 8017b90:	b13c      	cbz	r4, 8017ba2 <_Bfree+0x3a>
 8017b92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017b94:	6862      	ldr	r2, [r4, #4]
 8017b96:	68db      	ldr	r3, [r3, #12]
 8017b98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017b9c:	6021      	str	r1, [r4, #0]
 8017b9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017ba2:	bd70      	pop	{r4, r5, r6, pc}
 8017ba4:	0801c8c4 	.word	0x0801c8c4
 8017ba8:	0801cb8c 	.word	0x0801cb8c

08017bac <__multadd>:
 8017bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bb0:	690e      	ldr	r6, [r1, #16]
 8017bb2:	4607      	mov	r7, r0
 8017bb4:	4698      	mov	r8, r3
 8017bb6:	460c      	mov	r4, r1
 8017bb8:	f101 0014 	add.w	r0, r1, #20
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	6805      	ldr	r5, [r0, #0]
 8017bc0:	b2a9      	uxth	r1, r5
 8017bc2:	fb02 8101 	mla	r1, r2, r1, r8
 8017bc6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8017bca:	0c2d      	lsrs	r5, r5, #16
 8017bcc:	fb02 c505 	mla	r5, r2, r5, ip
 8017bd0:	b289      	uxth	r1, r1
 8017bd2:	3301      	adds	r3, #1
 8017bd4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8017bd8:	429e      	cmp	r6, r3
 8017bda:	f840 1b04 	str.w	r1, [r0], #4
 8017bde:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8017be2:	dcec      	bgt.n	8017bbe <__multadd+0x12>
 8017be4:	f1b8 0f00 	cmp.w	r8, #0
 8017be8:	d022      	beq.n	8017c30 <__multadd+0x84>
 8017bea:	68a3      	ldr	r3, [r4, #8]
 8017bec:	42b3      	cmp	r3, r6
 8017bee:	dc19      	bgt.n	8017c24 <__multadd+0x78>
 8017bf0:	6861      	ldr	r1, [r4, #4]
 8017bf2:	4638      	mov	r0, r7
 8017bf4:	3101      	adds	r1, #1
 8017bf6:	f7ff ff77 	bl	8017ae8 <_Balloc>
 8017bfa:	4605      	mov	r5, r0
 8017bfc:	b928      	cbnz	r0, 8017c0a <__multadd+0x5e>
 8017bfe:	4602      	mov	r2, r0
 8017c00:	4b0d      	ldr	r3, [pc, #52]	; (8017c38 <__multadd+0x8c>)
 8017c02:	480e      	ldr	r0, [pc, #56]	; (8017c3c <__multadd+0x90>)
 8017c04:	21b5      	movs	r1, #181	; 0xb5
 8017c06:	f7fe fc3d 	bl	8016484 <__assert_func>
 8017c0a:	6922      	ldr	r2, [r4, #16]
 8017c0c:	3202      	adds	r2, #2
 8017c0e:	f104 010c 	add.w	r1, r4, #12
 8017c12:	0092      	lsls	r2, r2, #2
 8017c14:	300c      	adds	r0, #12
 8017c16:	f7fc ffc7 	bl	8014ba8 <memcpy>
 8017c1a:	4621      	mov	r1, r4
 8017c1c:	4638      	mov	r0, r7
 8017c1e:	f7ff ffa3 	bl	8017b68 <_Bfree>
 8017c22:	462c      	mov	r4, r5
 8017c24:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8017c28:	3601      	adds	r6, #1
 8017c2a:	f8c3 8014 	str.w	r8, [r3, #20]
 8017c2e:	6126      	str	r6, [r4, #16]
 8017c30:	4620      	mov	r0, r4
 8017c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c36:	bf00      	nop
 8017c38:	0801ca99 	.word	0x0801ca99
 8017c3c:	0801cb8c 	.word	0x0801cb8c

08017c40 <__s2b>:
 8017c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c44:	460c      	mov	r4, r1
 8017c46:	4615      	mov	r5, r2
 8017c48:	461f      	mov	r7, r3
 8017c4a:	2209      	movs	r2, #9
 8017c4c:	3308      	adds	r3, #8
 8017c4e:	4606      	mov	r6, r0
 8017c50:	fb93 f3f2 	sdiv	r3, r3, r2
 8017c54:	2100      	movs	r1, #0
 8017c56:	2201      	movs	r2, #1
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	db09      	blt.n	8017c70 <__s2b+0x30>
 8017c5c:	4630      	mov	r0, r6
 8017c5e:	f7ff ff43 	bl	8017ae8 <_Balloc>
 8017c62:	b940      	cbnz	r0, 8017c76 <__s2b+0x36>
 8017c64:	4602      	mov	r2, r0
 8017c66:	4b19      	ldr	r3, [pc, #100]	; (8017ccc <__s2b+0x8c>)
 8017c68:	4819      	ldr	r0, [pc, #100]	; (8017cd0 <__s2b+0x90>)
 8017c6a:	21ce      	movs	r1, #206	; 0xce
 8017c6c:	f7fe fc0a 	bl	8016484 <__assert_func>
 8017c70:	0052      	lsls	r2, r2, #1
 8017c72:	3101      	adds	r1, #1
 8017c74:	e7f0      	b.n	8017c58 <__s2b+0x18>
 8017c76:	9b08      	ldr	r3, [sp, #32]
 8017c78:	6143      	str	r3, [r0, #20]
 8017c7a:	2d09      	cmp	r5, #9
 8017c7c:	f04f 0301 	mov.w	r3, #1
 8017c80:	6103      	str	r3, [r0, #16]
 8017c82:	dd16      	ble.n	8017cb2 <__s2b+0x72>
 8017c84:	f104 0909 	add.w	r9, r4, #9
 8017c88:	46c8      	mov	r8, r9
 8017c8a:	442c      	add	r4, r5
 8017c8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017c90:	4601      	mov	r1, r0
 8017c92:	3b30      	subs	r3, #48	; 0x30
 8017c94:	220a      	movs	r2, #10
 8017c96:	4630      	mov	r0, r6
 8017c98:	f7ff ff88 	bl	8017bac <__multadd>
 8017c9c:	45a0      	cmp	r8, r4
 8017c9e:	d1f5      	bne.n	8017c8c <__s2b+0x4c>
 8017ca0:	f1a5 0408 	sub.w	r4, r5, #8
 8017ca4:	444c      	add	r4, r9
 8017ca6:	1b2d      	subs	r5, r5, r4
 8017ca8:	1963      	adds	r3, r4, r5
 8017caa:	42bb      	cmp	r3, r7
 8017cac:	db04      	blt.n	8017cb8 <__s2b+0x78>
 8017cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cb2:	340a      	adds	r4, #10
 8017cb4:	2509      	movs	r5, #9
 8017cb6:	e7f6      	b.n	8017ca6 <__s2b+0x66>
 8017cb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017cbc:	4601      	mov	r1, r0
 8017cbe:	3b30      	subs	r3, #48	; 0x30
 8017cc0:	220a      	movs	r2, #10
 8017cc2:	4630      	mov	r0, r6
 8017cc4:	f7ff ff72 	bl	8017bac <__multadd>
 8017cc8:	e7ee      	b.n	8017ca8 <__s2b+0x68>
 8017cca:	bf00      	nop
 8017ccc:	0801ca99 	.word	0x0801ca99
 8017cd0:	0801cb8c 	.word	0x0801cb8c

08017cd4 <__hi0bits>:
 8017cd4:	0c03      	lsrs	r3, r0, #16
 8017cd6:	041b      	lsls	r3, r3, #16
 8017cd8:	b9d3      	cbnz	r3, 8017d10 <__hi0bits+0x3c>
 8017cda:	0400      	lsls	r0, r0, #16
 8017cdc:	2310      	movs	r3, #16
 8017cde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017ce2:	bf04      	itt	eq
 8017ce4:	0200      	lsleq	r0, r0, #8
 8017ce6:	3308      	addeq	r3, #8
 8017ce8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017cec:	bf04      	itt	eq
 8017cee:	0100      	lsleq	r0, r0, #4
 8017cf0:	3304      	addeq	r3, #4
 8017cf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017cf6:	bf04      	itt	eq
 8017cf8:	0080      	lsleq	r0, r0, #2
 8017cfa:	3302      	addeq	r3, #2
 8017cfc:	2800      	cmp	r0, #0
 8017cfe:	db05      	blt.n	8017d0c <__hi0bits+0x38>
 8017d00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017d04:	f103 0301 	add.w	r3, r3, #1
 8017d08:	bf08      	it	eq
 8017d0a:	2320      	moveq	r3, #32
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	4770      	bx	lr
 8017d10:	2300      	movs	r3, #0
 8017d12:	e7e4      	b.n	8017cde <__hi0bits+0xa>

08017d14 <__lo0bits>:
 8017d14:	6803      	ldr	r3, [r0, #0]
 8017d16:	f013 0207 	ands.w	r2, r3, #7
 8017d1a:	4601      	mov	r1, r0
 8017d1c:	d00b      	beq.n	8017d36 <__lo0bits+0x22>
 8017d1e:	07da      	lsls	r2, r3, #31
 8017d20:	d424      	bmi.n	8017d6c <__lo0bits+0x58>
 8017d22:	0798      	lsls	r0, r3, #30
 8017d24:	bf49      	itett	mi
 8017d26:	085b      	lsrmi	r3, r3, #1
 8017d28:	089b      	lsrpl	r3, r3, #2
 8017d2a:	2001      	movmi	r0, #1
 8017d2c:	600b      	strmi	r3, [r1, #0]
 8017d2e:	bf5c      	itt	pl
 8017d30:	600b      	strpl	r3, [r1, #0]
 8017d32:	2002      	movpl	r0, #2
 8017d34:	4770      	bx	lr
 8017d36:	b298      	uxth	r0, r3
 8017d38:	b9b0      	cbnz	r0, 8017d68 <__lo0bits+0x54>
 8017d3a:	0c1b      	lsrs	r3, r3, #16
 8017d3c:	2010      	movs	r0, #16
 8017d3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017d42:	bf04      	itt	eq
 8017d44:	0a1b      	lsreq	r3, r3, #8
 8017d46:	3008      	addeq	r0, #8
 8017d48:	071a      	lsls	r2, r3, #28
 8017d4a:	bf04      	itt	eq
 8017d4c:	091b      	lsreq	r3, r3, #4
 8017d4e:	3004      	addeq	r0, #4
 8017d50:	079a      	lsls	r2, r3, #30
 8017d52:	bf04      	itt	eq
 8017d54:	089b      	lsreq	r3, r3, #2
 8017d56:	3002      	addeq	r0, #2
 8017d58:	07da      	lsls	r2, r3, #31
 8017d5a:	d403      	bmi.n	8017d64 <__lo0bits+0x50>
 8017d5c:	085b      	lsrs	r3, r3, #1
 8017d5e:	f100 0001 	add.w	r0, r0, #1
 8017d62:	d005      	beq.n	8017d70 <__lo0bits+0x5c>
 8017d64:	600b      	str	r3, [r1, #0]
 8017d66:	4770      	bx	lr
 8017d68:	4610      	mov	r0, r2
 8017d6a:	e7e8      	b.n	8017d3e <__lo0bits+0x2a>
 8017d6c:	2000      	movs	r0, #0
 8017d6e:	4770      	bx	lr
 8017d70:	2020      	movs	r0, #32
 8017d72:	4770      	bx	lr

08017d74 <__i2b>:
 8017d74:	b510      	push	{r4, lr}
 8017d76:	460c      	mov	r4, r1
 8017d78:	2101      	movs	r1, #1
 8017d7a:	f7ff feb5 	bl	8017ae8 <_Balloc>
 8017d7e:	4602      	mov	r2, r0
 8017d80:	b928      	cbnz	r0, 8017d8e <__i2b+0x1a>
 8017d82:	4b05      	ldr	r3, [pc, #20]	; (8017d98 <__i2b+0x24>)
 8017d84:	4805      	ldr	r0, [pc, #20]	; (8017d9c <__i2b+0x28>)
 8017d86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8017d8a:	f7fe fb7b 	bl	8016484 <__assert_func>
 8017d8e:	2301      	movs	r3, #1
 8017d90:	6144      	str	r4, [r0, #20]
 8017d92:	6103      	str	r3, [r0, #16]
 8017d94:	bd10      	pop	{r4, pc}
 8017d96:	bf00      	nop
 8017d98:	0801ca99 	.word	0x0801ca99
 8017d9c:	0801cb8c 	.word	0x0801cb8c

08017da0 <__multiply>:
 8017da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017da4:	4614      	mov	r4, r2
 8017da6:	690a      	ldr	r2, [r1, #16]
 8017da8:	6923      	ldr	r3, [r4, #16]
 8017daa:	429a      	cmp	r2, r3
 8017dac:	bfb8      	it	lt
 8017dae:	460b      	movlt	r3, r1
 8017db0:	460d      	mov	r5, r1
 8017db2:	bfbc      	itt	lt
 8017db4:	4625      	movlt	r5, r4
 8017db6:	461c      	movlt	r4, r3
 8017db8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8017dbc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017dc0:	68ab      	ldr	r3, [r5, #8]
 8017dc2:	6869      	ldr	r1, [r5, #4]
 8017dc4:	eb0a 0709 	add.w	r7, sl, r9
 8017dc8:	42bb      	cmp	r3, r7
 8017dca:	b085      	sub	sp, #20
 8017dcc:	bfb8      	it	lt
 8017dce:	3101      	addlt	r1, #1
 8017dd0:	f7ff fe8a 	bl	8017ae8 <_Balloc>
 8017dd4:	b930      	cbnz	r0, 8017de4 <__multiply+0x44>
 8017dd6:	4602      	mov	r2, r0
 8017dd8:	4b42      	ldr	r3, [pc, #264]	; (8017ee4 <__multiply+0x144>)
 8017dda:	4843      	ldr	r0, [pc, #268]	; (8017ee8 <__multiply+0x148>)
 8017ddc:	f240 115d 	movw	r1, #349	; 0x15d
 8017de0:	f7fe fb50 	bl	8016484 <__assert_func>
 8017de4:	f100 0614 	add.w	r6, r0, #20
 8017de8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8017dec:	4633      	mov	r3, r6
 8017dee:	2200      	movs	r2, #0
 8017df0:	4543      	cmp	r3, r8
 8017df2:	d31e      	bcc.n	8017e32 <__multiply+0x92>
 8017df4:	f105 0c14 	add.w	ip, r5, #20
 8017df8:	f104 0314 	add.w	r3, r4, #20
 8017dfc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8017e00:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8017e04:	9202      	str	r2, [sp, #8]
 8017e06:	ebac 0205 	sub.w	r2, ip, r5
 8017e0a:	3a15      	subs	r2, #21
 8017e0c:	f022 0203 	bic.w	r2, r2, #3
 8017e10:	3204      	adds	r2, #4
 8017e12:	f105 0115 	add.w	r1, r5, #21
 8017e16:	458c      	cmp	ip, r1
 8017e18:	bf38      	it	cc
 8017e1a:	2204      	movcc	r2, #4
 8017e1c:	9201      	str	r2, [sp, #4]
 8017e1e:	9a02      	ldr	r2, [sp, #8]
 8017e20:	9303      	str	r3, [sp, #12]
 8017e22:	429a      	cmp	r2, r3
 8017e24:	d808      	bhi.n	8017e38 <__multiply+0x98>
 8017e26:	2f00      	cmp	r7, #0
 8017e28:	dc55      	bgt.n	8017ed6 <__multiply+0x136>
 8017e2a:	6107      	str	r7, [r0, #16]
 8017e2c:	b005      	add	sp, #20
 8017e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e32:	f843 2b04 	str.w	r2, [r3], #4
 8017e36:	e7db      	b.n	8017df0 <__multiply+0x50>
 8017e38:	f8b3 a000 	ldrh.w	sl, [r3]
 8017e3c:	f1ba 0f00 	cmp.w	sl, #0
 8017e40:	d020      	beq.n	8017e84 <__multiply+0xe4>
 8017e42:	f105 0e14 	add.w	lr, r5, #20
 8017e46:	46b1      	mov	r9, r6
 8017e48:	2200      	movs	r2, #0
 8017e4a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8017e4e:	f8d9 b000 	ldr.w	fp, [r9]
 8017e52:	b2a1      	uxth	r1, r4
 8017e54:	fa1f fb8b 	uxth.w	fp, fp
 8017e58:	fb0a b101 	mla	r1, sl, r1, fp
 8017e5c:	4411      	add	r1, r2
 8017e5e:	f8d9 2000 	ldr.w	r2, [r9]
 8017e62:	0c24      	lsrs	r4, r4, #16
 8017e64:	0c12      	lsrs	r2, r2, #16
 8017e66:	fb0a 2404 	mla	r4, sl, r4, r2
 8017e6a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8017e6e:	b289      	uxth	r1, r1
 8017e70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8017e74:	45f4      	cmp	ip, lr
 8017e76:	f849 1b04 	str.w	r1, [r9], #4
 8017e7a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8017e7e:	d8e4      	bhi.n	8017e4a <__multiply+0xaa>
 8017e80:	9901      	ldr	r1, [sp, #4]
 8017e82:	5072      	str	r2, [r6, r1]
 8017e84:	9a03      	ldr	r2, [sp, #12]
 8017e86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017e8a:	3304      	adds	r3, #4
 8017e8c:	f1b9 0f00 	cmp.w	r9, #0
 8017e90:	d01f      	beq.n	8017ed2 <__multiply+0x132>
 8017e92:	6834      	ldr	r4, [r6, #0]
 8017e94:	f105 0114 	add.w	r1, r5, #20
 8017e98:	46b6      	mov	lr, r6
 8017e9a:	f04f 0a00 	mov.w	sl, #0
 8017e9e:	880a      	ldrh	r2, [r1, #0]
 8017ea0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8017ea4:	fb09 b202 	mla	r2, r9, r2, fp
 8017ea8:	4492      	add	sl, r2
 8017eaa:	b2a4      	uxth	r4, r4
 8017eac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8017eb0:	f84e 4b04 	str.w	r4, [lr], #4
 8017eb4:	f851 4b04 	ldr.w	r4, [r1], #4
 8017eb8:	f8be 2000 	ldrh.w	r2, [lr]
 8017ebc:	0c24      	lsrs	r4, r4, #16
 8017ebe:	fb09 2404 	mla	r4, r9, r4, r2
 8017ec2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8017ec6:	458c      	cmp	ip, r1
 8017ec8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017ecc:	d8e7      	bhi.n	8017e9e <__multiply+0xfe>
 8017ece:	9a01      	ldr	r2, [sp, #4]
 8017ed0:	50b4      	str	r4, [r6, r2]
 8017ed2:	3604      	adds	r6, #4
 8017ed4:	e7a3      	b.n	8017e1e <__multiply+0x7e>
 8017ed6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d1a5      	bne.n	8017e2a <__multiply+0x8a>
 8017ede:	3f01      	subs	r7, #1
 8017ee0:	e7a1      	b.n	8017e26 <__multiply+0x86>
 8017ee2:	bf00      	nop
 8017ee4:	0801ca99 	.word	0x0801ca99
 8017ee8:	0801cb8c 	.word	0x0801cb8c

08017eec <__pow5mult>:
 8017eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ef0:	4615      	mov	r5, r2
 8017ef2:	f012 0203 	ands.w	r2, r2, #3
 8017ef6:	4606      	mov	r6, r0
 8017ef8:	460f      	mov	r7, r1
 8017efa:	d007      	beq.n	8017f0c <__pow5mult+0x20>
 8017efc:	4c25      	ldr	r4, [pc, #148]	; (8017f94 <__pow5mult+0xa8>)
 8017efe:	3a01      	subs	r2, #1
 8017f00:	2300      	movs	r3, #0
 8017f02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017f06:	f7ff fe51 	bl	8017bac <__multadd>
 8017f0a:	4607      	mov	r7, r0
 8017f0c:	10ad      	asrs	r5, r5, #2
 8017f0e:	d03d      	beq.n	8017f8c <__pow5mult+0xa0>
 8017f10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017f12:	b97c      	cbnz	r4, 8017f34 <__pow5mult+0x48>
 8017f14:	2010      	movs	r0, #16
 8017f16:	f7fc fe29 	bl	8014b6c <malloc>
 8017f1a:	4602      	mov	r2, r0
 8017f1c:	6270      	str	r0, [r6, #36]	; 0x24
 8017f1e:	b928      	cbnz	r0, 8017f2c <__pow5mult+0x40>
 8017f20:	4b1d      	ldr	r3, [pc, #116]	; (8017f98 <__pow5mult+0xac>)
 8017f22:	481e      	ldr	r0, [pc, #120]	; (8017f9c <__pow5mult+0xb0>)
 8017f24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017f28:	f7fe faac 	bl	8016484 <__assert_func>
 8017f2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017f30:	6004      	str	r4, [r0, #0]
 8017f32:	60c4      	str	r4, [r0, #12]
 8017f34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017f38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017f3c:	b94c      	cbnz	r4, 8017f52 <__pow5mult+0x66>
 8017f3e:	f240 2171 	movw	r1, #625	; 0x271
 8017f42:	4630      	mov	r0, r6
 8017f44:	f7ff ff16 	bl	8017d74 <__i2b>
 8017f48:	2300      	movs	r3, #0
 8017f4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8017f4e:	4604      	mov	r4, r0
 8017f50:	6003      	str	r3, [r0, #0]
 8017f52:	f04f 0900 	mov.w	r9, #0
 8017f56:	07eb      	lsls	r3, r5, #31
 8017f58:	d50a      	bpl.n	8017f70 <__pow5mult+0x84>
 8017f5a:	4639      	mov	r1, r7
 8017f5c:	4622      	mov	r2, r4
 8017f5e:	4630      	mov	r0, r6
 8017f60:	f7ff ff1e 	bl	8017da0 <__multiply>
 8017f64:	4639      	mov	r1, r7
 8017f66:	4680      	mov	r8, r0
 8017f68:	4630      	mov	r0, r6
 8017f6a:	f7ff fdfd 	bl	8017b68 <_Bfree>
 8017f6e:	4647      	mov	r7, r8
 8017f70:	106d      	asrs	r5, r5, #1
 8017f72:	d00b      	beq.n	8017f8c <__pow5mult+0xa0>
 8017f74:	6820      	ldr	r0, [r4, #0]
 8017f76:	b938      	cbnz	r0, 8017f88 <__pow5mult+0x9c>
 8017f78:	4622      	mov	r2, r4
 8017f7a:	4621      	mov	r1, r4
 8017f7c:	4630      	mov	r0, r6
 8017f7e:	f7ff ff0f 	bl	8017da0 <__multiply>
 8017f82:	6020      	str	r0, [r4, #0]
 8017f84:	f8c0 9000 	str.w	r9, [r0]
 8017f88:	4604      	mov	r4, r0
 8017f8a:	e7e4      	b.n	8017f56 <__pow5mult+0x6a>
 8017f8c:	4638      	mov	r0, r7
 8017f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f92:	bf00      	nop
 8017f94:	0801cce0 	.word	0x0801cce0
 8017f98:	0801c8c4 	.word	0x0801c8c4
 8017f9c:	0801cb8c 	.word	0x0801cb8c

08017fa0 <__lshift>:
 8017fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fa4:	460c      	mov	r4, r1
 8017fa6:	6849      	ldr	r1, [r1, #4]
 8017fa8:	6923      	ldr	r3, [r4, #16]
 8017faa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017fae:	68a3      	ldr	r3, [r4, #8]
 8017fb0:	4607      	mov	r7, r0
 8017fb2:	4691      	mov	r9, r2
 8017fb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017fb8:	f108 0601 	add.w	r6, r8, #1
 8017fbc:	42b3      	cmp	r3, r6
 8017fbe:	db0b      	blt.n	8017fd8 <__lshift+0x38>
 8017fc0:	4638      	mov	r0, r7
 8017fc2:	f7ff fd91 	bl	8017ae8 <_Balloc>
 8017fc6:	4605      	mov	r5, r0
 8017fc8:	b948      	cbnz	r0, 8017fde <__lshift+0x3e>
 8017fca:	4602      	mov	r2, r0
 8017fcc:	4b28      	ldr	r3, [pc, #160]	; (8018070 <__lshift+0xd0>)
 8017fce:	4829      	ldr	r0, [pc, #164]	; (8018074 <__lshift+0xd4>)
 8017fd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017fd4:	f7fe fa56 	bl	8016484 <__assert_func>
 8017fd8:	3101      	adds	r1, #1
 8017fda:	005b      	lsls	r3, r3, #1
 8017fdc:	e7ee      	b.n	8017fbc <__lshift+0x1c>
 8017fde:	2300      	movs	r3, #0
 8017fe0:	f100 0114 	add.w	r1, r0, #20
 8017fe4:	f100 0210 	add.w	r2, r0, #16
 8017fe8:	4618      	mov	r0, r3
 8017fea:	4553      	cmp	r3, sl
 8017fec:	db33      	blt.n	8018056 <__lshift+0xb6>
 8017fee:	6920      	ldr	r0, [r4, #16]
 8017ff0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017ff4:	f104 0314 	add.w	r3, r4, #20
 8017ff8:	f019 091f 	ands.w	r9, r9, #31
 8017ffc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018000:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018004:	d02b      	beq.n	801805e <__lshift+0xbe>
 8018006:	f1c9 0e20 	rsb	lr, r9, #32
 801800a:	468a      	mov	sl, r1
 801800c:	2200      	movs	r2, #0
 801800e:	6818      	ldr	r0, [r3, #0]
 8018010:	fa00 f009 	lsl.w	r0, r0, r9
 8018014:	4302      	orrs	r2, r0
 8018016:	f84a 2b04 	str.w	r2, [sl], #4
 801801a:	f853 2b04 	ldr.w	r2, [r3], #4
 801801e:	459c      	cmp	ip, r3
 8018020:	fa22 f20e 	lsr.w	r2, r2, lr
 8018024:	d8f3      	bhi.n	801800e <__lshift+0x6e>
 8018026:	ebac 0304 	sub.w	r3, ip, r4
 801802a:	3b15      	subs	r3, #21
 801802c:	f023 0303 	bic.w	r3, r3, #3
 8018030:	3304      	adds	r3, #4
 8018032:	f104 0015 	add.w	r0, r4, #21
 8018036:	4584      	cmp	ip, r0
 8018038:	bf38      	it	cc
 801803a:	2304      	movcc	r3, #4
 801803c:	50ca      	str	r2, [r1, r3]
 801803e:	b10a      	cbz	r2, 8018044 <__lshift+0xa4>
 8018040:	f108 0602 	add.w	r6, r8, #2
 8018044:	3e01      	subs	r6, #1
 8018046:	4638      	mov	r0, r7
 8018048:	612e      	str	r6, [r5, #16]
 801804a:	4621      	mov	r1, r4
 801804c:	f7ff fd8c 	bl	8017b68 <_Bfree>
 8018050:	4628      	mov	r0, r5
 8018052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018056:	f842 0f04 	str.w	r0, [r2, #4]!
 801805a:	3301      	adds	r3, #1
 801805c:	e7c5      	b.n	8017fea <__lshift+0x4a>
 801805e:	3904      	subs	r1, #4
 8018060:	f853 2b04 	ldr.w	r2, [r3], #4
 8018064:	f841 2f04 	str.w	r2, [r1, #4]!
 8018068:	459c      	cmp	ip, r3
 801806a:	d8f9      	bhi.n	8018060 <__lshift+0xc0>
 801806c:	e7ea      	b.n	8018044 <__lshift+0xa4>
 801806e:	bf00      	nop
 8018070:	0801ca99 	.word	0x0801ca99
 8018074:	0801cb8c 	.word	0x0801cb8c

08018078 <__mcmp>:
 8018078:	b530      	push	{r4, r5, lr}
 801807a:	6902      	ldr	r2, [r0, #16]
 801807c:	690c      	ldr	r4, [r1, #16]
 801807e:	1b12      	subs	r2, r2, r4
 8018080:	d10e      	bne.n	80180a0 <__mcmp+0x28>
 8018082:	f100 0314 	add.w	r3, r0, #20
 8018086:	3114      	adds	r1, #20
 8018088:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801808c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018090:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018094:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018098:	42a5      	cmp	r5, r4
 801809a:	d003      	beq.n	80180a4 <__mcmp+0x2c>
 801809c:	d305      	bcc.n	80180aa <__mcmp+0x32>
 801809e:	2201      	movs	r2, #1
 80180a0:	4610      	mov	r0, r2
 80180a2:	bd30      	pop	{r4, r5, pc}
 80180a4:	4283      	cmp	r3, r0
 80180a6:	d3f3      	bcc.n	8018090 <__mcmp+0x18>
 80180a8:	e7fa      	b.n	80180a0 <__mcmp+0x28>
 80180aa:	f04f 32ff 	mov.w	r2, #4294967295
 80180ae:	e7f7      	b.n	80180a0 <__mcmp+0x28>

080180b0 <__mdiff>:
 80180b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180b4:	460c      	mov	r4, r1
 80180b6:	4606      	mov	r6, r0
 80180b8:	4611      	mov	r1, r2
 80180ba:	4620      	mov	r0, r4
 80180bc:	4617      	mov	r7, r2
 80180be:	f7ff ffdb 	bl	8018078 <__mcmp>
 80180c2:	1e05      	subs	r5, r0, #0
 80180c4:	d110      	bne.n	80180e8 <__mdiff+0x38>
 80180c6:	4629      	mov	r1, r5
 80180c8:	4630      	mov	r0, r6
 80180ca:	f7ff fd0d 	bl	8017ae8 <_Balloc>
 80180ce:	b930      	cbnz	r0, 80180de <__mdiff+0x2e>
 80180d0:	4b39      	ldr	r3, [pc, #228]	; (80181b8 <__mdiff+0x108>)
 80180d2:	4602      	mov	r2, r0
 80180d4:	f240 2132 	movw	r1, #562	; 0x232
 80180d8:	4838      	ldr	r0, [pc, #224]	; (80181bc <__mdiff+0x10c>)
 80180da:	f7fe f9d3 	bl	8016484 <__assert_func>
 80180de:	2301      	movs	r3, #1
 80180e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80180e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180e8:	bfa4      	itt	ge
 80180ea:	463b      	movge	r3, r7
 80180ec:	4627      	movge	r7, r4
 80180ee:	4630      	mov	r0, r6
 80180f0:	6879      	ldr	r1, [r7, #4]
 80180f2:	bfa6      	itte	ge
 80180f4:	461c      	movge	r4, r3
 80180f6:	2500      	movge	r5, #0
 80180f8:	2501      	movlt	r5, #1
 80180fa:	f7ff fcf5 	bl	8017ae8 <_Balloc>
 80180fe:	b920      	cbnz	r0, 801810a <__mdiff+0x5a>
 8018100:	4b2d      	ldr	r3, [pc, #180]	; (80181b8 <__mdiff+0x108>)
 8018102:	4602      	mov	r2, r0
 8018104:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018108:	e7e6      	b.n	80180d8 <__mdiff+0x28>
 801810a:	693e      	ldr	r6, [r7, #16]
 801810c:	60c5      	str	r5, [r0, #12]
 801810e:	6925      	ldr	r5, [r4, #16]
 8018110:	f107 0114 	add.w	r1, r7, #20
 8018114:	f104 0914 	add.w	r9, r4, #20
 8018118:	f100 0e14 	add.w	lr, r0, #20
 801811c:	f107 0210 	add.w	r2, r7, #16
 8018120:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8018124:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8018128:	46f2      	mov	sl, lr
 801812a:	2700      	movs	r7, #0
 801812c:	f859 3b04 	ldr.w	r3, [r9], #4
 8018130:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018134:	fa1f f883 	uxth.w	r8, r3
 8018138:	fa17 f78b 	uxtah	r7, r7, fp
 801813c:	0c1b      	lsrs	r3, r3, #16
 801813e:	eba7 0808 	sub.w	r8, r7, r8
 8018142:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018146:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801814a:	fa1f f888 	uxth.w	r8, r8
 801814e:	141f      	asrs	r7, r3, #16
 8018150:	454d      	cmp	r5, r9
 8018152:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018156:	f84a 3b04 	str.w	r3, [sl], #4
 801815a:	d8e7      	bhi.n	801812c <__mdiff+0x7c>
 801815c:	1b2b      	subs	r3, r5, r4
 801815e:	3b15      	subs	r3, #21
 8018160:	f023 0303 	bic.w	r3, r3, #3
 8018164:	3304      	adds	r3, #4
 8018166:	3415      	adds	r4, #21
 8018168:	42a5      	cmp	r5, r4
 801816a:	bf38      	it	cc
 801816c:	2304      	movcc	r3, #4
 801816e:	4419      	add	r1, r3
 8018170:	4473      	add	r3, lr
 8018172:	469e      	mov	lr, r3
 8018174:	460d      	mov	r5, r1
 8018176:	4565      	cmp	r5, ip
 8018178:	d30e      	bcc.n	8018198 <__mdiff+0xe8>
 801817a:	f10c 0203 	add.w	r2, ip, #3
 801817e:	1a52      	subs	r2, r2, r1
 8018180:	f022 0203 	bic.w	r2, r2, #3
 8018184:	3903      	subs	r1, #3
 8018186:	458c      	cmp	ip, r1
 8018188:	bf38      	it	cc
 801818a:	2200      	movcc	r2, #0
 801818c:	441a      	add	r2, r3
 801818e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018192:	b17b      	cbz	r3, 80181b4 <__mdiff+0x104>
 8018194:	6106      	str	r6, [r0, #16]
 8018196:	e7a5      	b.n	80180e4 <__mdiff+0x34>
 8018198:	f855 8b04 	ldr.w	r8, [r5], #4
 801819c:	fa17 f488 	uxtah	r4, r7, r8
 80181a0:	1422      	asrs	r2, r4, #16
 80181a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80181a6:	b2a4      	uxth	r4, r4
 80181a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80181ac:	f84e 4b04 	str.w	r4, [lr], #4
 80181b0:	1417      	asrs	r7, r2, #16
 80181b2:	e7e0      	b.n	8018176 <__mdiff+0xc6>
 80181b4:	3e01      	subs	r6, #1
 80181b6:	e7ea      	b.n	801818e <__mdiff+0xde>
 80181b8:	0801ca99 	.word	0x0801ca99
 80181bc:	0801cb8c 	.word	0x0801cb8c

080181c0 <__ulp>:
 80181c0:	b082      	sub	sp, #8
 80181c2:	ed8d 0b00 	vstr	d0, [sp]
 80181c6:	9b01      	ldr	r3, [sp, #4]
 80181c8:	4912      	ldr	r1, [pc, #72]	; (8018214 <__ulp+0x54>)
 80181ca:	4019      	ands	r1, r3
 80181cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80181d0:	2900      	cmp	r1, #0
 80181d2:	dd05      	ble.n	80181e0 <__ulp+0x20>
 80181d4:	2200      	movs	r2, #0
 80181d6:	460b      	mov	r3, r1
 80181d8:	ec43 2b10 	vmov	d0, r2, r3
 80181dc:	b002      	add	sp, #8
 80181de:	4770      	bx	lr
 80181e0:	4249      	negs	r1, r1
 80181e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80181e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80181ea:	f04f 0200 	mov.w	r2, #0
 80181ee:	f04f 0300 	mov.w	r3, #0
 80181f2:	da04      	bge.n	80181fe <__ulp+0x3e>
 80181f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80181f8:	fa41 f300 	asr.w	r3, r1, r0
 80181fc:	e7ec      	b.n	80181d8 <__ulp+0x18>
 80181fe:	f1a0 0114 	sub.w	r1, r0, #20
 8018202:	291e      	cmp	r1, #30
 8018204:	bfda      	itte	le
 8018206:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801820a:	fa20 f101 	lsrle.w	r1, r0, r1
 801820e:	2101      	movgt	r1, #1
 8018210:	460a      	mov	r2, r1
 8018212:	e7e1      	b.n	80181d8 <__ulp+0x18>
 8018214:	7ff00000 	.word	0x7ff00000

08018218 <__b2d>:
 8018218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801821a:	6905      	ldr	r5, [r0, #16]
 801821c:	f100 0714 	add.w	r7, r0, #20
 8018220:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018224:	1f2e      	subs	r6, r5, #4
 8018226:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801822a:	4620      	mov	r0, r4
 801822c:	f7ff fd52 	bl	8017cd4 <__hi0bits>
 8018230:	f1c0 0320 	rsb	r3, r0, #32
 8018234:	280a      	cmp	r0, #10
 8018236:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80182b4 <__b2d+0x9c>
 801823a:	600b      	str	r3, [r1, #0]
 801823c:	dc14      	bgt.n	8018268 <__b2d+0x50>
 801823e:	f1c0 0e0b 	rsb	lr, r0, #11
 8018242:	fa24 f10e 	lsr.w	r1, r4, lr
 8018246:	42b7      	cmp	r7, r6
 8018248:	ea41 030c 	orr.w	r3, r1, ip
 801824c:	bf34      	ite	cc
 801824e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018252:	2100      	movcs	r1, #0
 8018254:	3015      	adds	r0, #21
 8018256:	fa04 f000 	lsl.w	r0, r4, r0
 801825a:	fa21 f10e 	lsr.w	r1, r1, lr
 801825e:	ea40 0201 	orr.w	r2, r0, r1
 8018262:	ec43 2b10 	vmov	d0, r2, r3
 8018266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018268:	42b7      	cmp	r7, r6
 801826a:	bf3a      	itte	cc
 801826c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018270:	f1a5 0608 	subcc.w	r6, r5, #8
 8018274:	2100      	movcs	r1, #0
 8018276:	380b      	subs	r0, #11
 8018278:	d017      	beq.n	80182aa <__b2d+0x92>
 801827a:	f1c0 0c20 	rsb	ip, r0, #32
 801827e:	fa04 f500 	lsl.w	r5, r4, r0
 8018282:	42be      	cmp	r6, r7
 8018284:	fa21 f40c 	lsr.w	r4, r1, ip
 8018288:	ea45 0504 	orr.w	r5, r5, r4
 801828c:	bf8c      	ite	hi
 801828e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018292:	2400      	movls	r4, #0
 8018294:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018298:	fa01 f000 	lsl.w	r0, r1, r0
 801829c:	fa24 f40c 	lsr.w	r4, r4, ip
 80182a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80182a4:	ea40 0204 	orr.w	r2, r0, r4
 80182a8:	e7db      	b.n	8018262 <__b2d+0x4a>
 80182aa:	ea44 030c 	orr.w	r3, r4, ip
 80182ae:	460a      	mov	r2, r1
 80182b0:	e7d7      	b.n	8018262 <__b2d+0x4a>
 80182b2:	bf00      	nop
 80182b4:	3ff00000 	.word	0x3ff00000

080182b8 <__d2b>:
 80182b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80182bc:	4689      	mov	r9, r1
 80182be:	2101      	movs	r1, #1
 80182c0:	ec57 6b10 	vmov	r6, r7, d0
 80182c4:	4690      	mov	r8, r2
 80182c6:	f7ff fc0f 	bl	8017ae8 <_Balloc>
 80182ca:	4604      	mov	r4, r0
 80182cc:	b930      	cbnz	r0, 80182dc <__d2b+0x24>
 80182ce:	4602      	mov	r2, r0
 80182d0:	4b25      	ldr	r3, [pc, #148]	; (8018368 <__d2b+0xb0>)
 80182d2:	4826      	ldr	r0, [pc, #152]	; (801836c <__d2b+0xb4>)
 80182d4:	f240 310a 	movw	r1, #778	; 0x30a
 80182d8:	f7fe f8d4 	bl	8016484 <__assert_func>
 80182dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80182e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80182e4:	bb35      	cbnz	r5, 8018334 <__d2b+0x7c>
 80182e6:	2e00      	cmp	r6, #0
 80182e8:	9301      	str	r3, [sp, #4]
 80182ea:	d028      	beq.n	801833e <__d2b+0x86>
 80182ec:	4668      	mov	r0, sp
 80182ee:	9600      	str	r6, [sp, #0]
 80182f0:	f7ff fd10 	bl	8017d14 <__lo0bits>
 80182f4:	9900      	ldr	r1, [sp, #0]
 80182f6:	b300      	cbz	r0, 801833a <__d2b+0x82>
 80182f8:	9a01      	ldr	r2, [sp, #4]
 80182fa:	f1c0 0320 	rsb	r3, r0, #32
 80182fe:	fa02 f303 	lsl.w	r3, r2, r3
 8018302:	430b      	orrs	r3, r1
 8018304:	40c2      	lsrs	r2, r0
 8018306:	6163      	str	r3, [r4, #20]
 8018308:	9201      	str	r2, [sp, #4]
 801830a:	9b01      	ldr	r3, [sp, #4]
 801830c:	61a3      	str	r3, [r4, #24]
 801830e:	2b00      	cmp	r3, #0
 8018310:	bf14      	ite	ne
 8018312:	2202      	movne	r2, #2
 8018314:	2201      	moveq	r2, #1
 8018316:	6122      	str	r2, [r4, #16]
 8018318:	b1d5      	cbz	r5, 8018350 <__d2b+0x98>
 801831a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801831e:	4405      	add	r5, r0
 8018320:	f8c9 5000 	str.w	r5, [r9]
 8018324:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018328:	f8c8 0000 	str.w	r0, [r8]
 801832c:	4620      	mov	r0, r4
 801832e:	b003      	add	sp, #12
 8018330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018338:	e7d5      	b.n	80182e6 <__d2b+0x2e>
 801833a:	6161      	str	r1, [r4, #20]
 801833c:	e7e5      	b.n	801830a <__d2b+0x52>
 801833e:	a801      	add	r0, sp, #4
 8018340:	f7ff fce8 	bl	8017d14 <__lo0bits>
 8018344:	9b01      	ldr	r3, [sp, #4]
 8018346:	6163      	str	r3, [r4, #20]
 8018348:	2201      	movs	r2, #1
 801834a:	6122      	str	r2, [r4, #16]
 801834c:	3020      	adds	r0, #32
 801834e:	e7e3      	b.n	8018318 <__d2b+0x60>
 8018350:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018354:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018358:	f8c9 0000 	str.w	r0, [r9]
 801835c:	6918      	ldr	r0, [r3, #16]
 801835e:	f7ff fcb9 	bl	8017cd4 <__hi0bits>
 8018362:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018366:	e7df      	b.n	8018328 <__d2b+0x70>
 8018368:	0801ca99 	.word	0x0801ca99
 801836c:	0801cb8c 	.word	0x0801cb8c

08018370 <__ratio>:
 8018370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018374:	4688      	mov	r8, r1
 8018376:	4669      	mov	r1, sp
 8018378:	4681      	mov	r9, r0
 801837a:	f7ff ff4d 	bl	8018218 <__b2d>
 801837e:	a901      	add	r1, sp, #4
 8018380:	4640      	mov	r0, r8
 8018382:	ec55 4b10 	vmov	r4, r5, d0
 8018386:	f7ff ff47 	bl	8018218 <__b2d>
 801838a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801838e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018392:	eba3 0c02 	sub.w	ip, r3, r2
 8018396:	e9dd 3200 	ldrd	r3, r2, [sp]
 801839a:	1a9b      	subs	r3, r3, r2
 801839c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80183a0:	ec51 0b10 	vmov	r0, r1, d0
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	bfd6      	itet	le
 80183a8:	460a      	movle	r2, r1
 80183aa:	462a      	movgt	r2, r5
 80183ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80183b0:	468b      	mov	fp, r1
 80183b2:	462f      	mov	r7, r5
 80183b4:	bfd4      	ite	le
 80183b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80183ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80183be:	4620      	mov	r0, r4
 80183c0:	ee10 2a10 	vmov	r2, s0
 80183c4:	465b      	mov	r3, fp
 80183c6:	4639      	mov	r1, r7
 80183c8:	f7e8 fa60 	bl	800088c <__aeabi_ddiv>
 80183cc:	ec41 0b10 	vmov	d0, r0, r1
 80183d0:	b003      	add	sp, #12
 80183d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080183d6 <__copybits>:
 80183d6:	3901      	subs	r1, #1
 80183d8:	b570      	push	{r4, r5, r6, lr}
 80183da:	1149      	asrs	r1, r1, #5
 80183dc:	6914      	ldr	r4, [r2, #16]
 80183de:	3101      	adds	r1, #1
 80183e0:	f102 0314 	add.w	r3, r2, #20
 80183e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80183e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80183ec:	1f05      	subs	r5, r0, #4
 80183ee:	42a3      	cmp	r3, r4
 80183f0:	d30c      	bcc.n	801840c <__copybits+0x36>
 80183f2:	1aa3      	subs	r3, r4, r2
 80183f4:	3b11      	subs	r3, #17
 80183f6:	f023 0303 	bic.w	r3, r3, #3
 80183fa:	3211      	adds	r2, #17
 80183fc:	42a2      	cmp	r2, r4
 80183fe:	bf88      	it	hi
 8018400:	2300      	movhi	r3, #0
 8018402:	4418      	add	r0, r3
 8018404:	2300      	movs	r3, #0
 8018406:	4288      	cmp	r0, r1
 8018408:	d305      	bcc.n	8018416 <__copybits+0x40>
 801840a:	bd70      	pop	{r4, r5, r6, pc}
 801840c:	f853 6b04 	ldr.w	r6, [r3], #4
 8018410:	f845 6f04 	str.w	r6, [r5, #4]!
 8018414:	e7eb      	b.n	80183ee <__copybits+0x18>
 8018416:	f840 3b04 	str.w	r3, [r0], #4
 801841a:	e7f4      	b.n	8018406 <__copybits+0x30>

0801841c <__any_on>:
 801841c:	f100 0214 	add.w	r2, r0, #20
 8018420:	6900      	ldr	r0, [r0, #16]
 8018422:	114b      	asrs	r3, r1, #5
 8018424:	4298      	cmp	r0, r3
 8018426:	b510      	push	{r4, lr}
 8018428:	db11      	blt.n	801844e <__any_on+0x32>
 801842a:	dd0a      	ble.n	8018442 <__any_on+0x26>
 801842c:	f011 011f 	ands.w	r1, r1, #31
 8018430:	d007      	beq.n	8018442 <__any_on+0x26>
 8018432:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018436:	fa24 f001 	lsr.w	r0, r4, r1
 801843a:	fa00 f101 	lsl.w	r1, r0, r1
 801843e:	428c      	cmp	r4, r1
 8018440:	d10b      	bne.n	801845a <__any_on+0x3e>
 8018442:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018446:	4293      	cmp	r3, r2
 8018448:	d803      	bhi.n	8018452 <__any_on+0x36>
 801844a:	2000      	movs	r0, #0
 801844c:	bd10      	pop	{r4, pc}
 801844e:	4603      	mov	r3, r0
 8018450:	e7f7      	b.n	8018442 <__any_on+0x26>
 8018452:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018456:	2900      	cmp	r1, #0
 8018458:	d0f5      	beq.n	8018446 <__any_on+0x2a>
 801845a:	2001      	movs	r0, #1
 801845c:	e7f6      	b.n	801844c <__any_on+0x30>

0801845e <_calloc_r>:
 801845e:	b513      	push	{r0, r1, r4, lr}
 8018460:	434a      	muls	r2, r1
 8018462:	4611      	mov	r1, r2
 8018464:	9201      	str	r2, [sp, #4]
 8018466:	f7fc fc1f 	bl	8014ca8 <_malloc_r>
 801846a:	4604      	mov	r4, r0
 801846c:	b118      	cbz	r0, 8018476 <_calloc_r+0x18>
 801846e:	9a01      	ldr	r2, [sp, #4]
 8018470:	2100      	movs	r1, #0
 8018472:	f7fc fbc1 	bl	8014bf8 <memset>
 8018476:	4620      	mov	r0, r4
 8018478:	b002      	add	sp, #8
 801847a:	bd10      	pop	{r4, pc}

0801847c <__ssputs_r>:
 801847c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018480:	688e      	ldr	r6, [r1, #8]
 8018482:	429e      	cmp	r6, r3
 8018484:	4682      	mov	sl, r0
 8018486:	460c      	mov	r4, r1
 8018488:	4690      	mov	r8, r2
 801848a:	461f      	mov	r7, r3
 801848c:	d838      	bhi.n	8018500 <__ssputs_r+0x84>
 801848e:	898a      	ldrh	r2, [r1, #12]
 8018490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018494:	d032      	beq.n	80184fc <__ssputs_r+0x80>
 8018496:	6825      	ldr	r5, [r4, #0]
 8018498:	6909      	ldr	r1, [r1, #16]
 801849a:	eba5 0901 	sub.w	r9, r5, r1
 801849e:	6965      	ldr	r5, [r4, #20]
 80184a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80184a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80184a8:	3301      	adds	r3, #1
 80184aa:	444b      	add	r3, r9
 80184ac:	106d      	asrs	r5, r5, #1
 80184ae:	429d      	cmp	r5, r3
 80184b0:	bf38      	it	cc
 80184b2:	461d      	movcc	r5, r3
 80184b4:	0553      	lsls	r3, r2, #21
 80184b6:	d531      	bpl.n	801851c <__ssputs_r+0xa0>
 80184b8:	4629      	mov	r1, r5
 80184ba:	f7fc fbf5 	bl	8014ca8 <_malloc_r>
 80184be:	4606      	mov	r6, r0
 80184c0:	b950      	cbnz	r0, 80184d8 <__ssputs_r+0x5c>
 80184c2:	230c      	movs	r3, #12
 80184c4:	f8ca 3000 	str.w	r3, [sl]
 80184c8:	89a3      	ldrh	r3, [r4, #12]
 80184ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184ce:	81a3      	strh	r3, [r4, #12]
 80184d0:	f04f 30ff 	mov.w	r0, #4294967295
 80184d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184d8:	6921      	ldr	r1, [r4, #16]
 80184da:	464a      	mov	r2, r9
 80184dc:	f7fc fb64 	bl	8014ba8 <memcpy>
 80184e0:	89a3      	ldrh	r3, [r4, #12]
 80184e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80184e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80184ea:	81a3      	strh	r3, [r4, #12]
 80184ec:	6126      	str	r6, [r4, #16]
 80184ee:	6165      	str	r5, [r4, #20]
 80184f0:	444e      	add	r6, r9
 80184f2:	eba5 0509 	sub.w	r5, r5, r9
 80184f6:	6026      	str	r6, [r4, #0]
 80184f8:	60a5      	str	r5, [r4, #8]
 80184fa:	463e      	mov	r6, r7
 80184fc:	42be      	cmp	r6, r7
 80184fe:	d900      	bls.n	8018502 <__ssputs_r+0x86>
 8018500:	463e      	mov	r6, r7
 8018502:	4632      	mov	r2, r6
 8018504:	6820      	ldr	r0, [r4, #0]
 8018506:	4641      	mov	r1, r8
 8018508:	f7fc fb5c 	bl	8014bc4 <memmove>
 801850c:	68a3      	ldr	r3, [r4, #8]
 801850e:	6822      	ldr	r2, [r4, #0]
 8018510:	1b9b      	subs	r3, r3, r6
 8018512:	4432      	add	r2, r6
 8018514:	60a3      	str	r3, [r4, #8]
 8018516:	6022      	str	r2, [r4, #0]
 8018518:	2000      	movs	r0, #0
 801851a:	e7db      	b.n	80184d4 <__ssputs_r+0x58>
 801851c:	462a      	mov	r2, r5
 801851e:	f000 fcdf 	bl	8018ee0 <_realloc_r>
 8018522:	4606      	mov	r6, r0
 8018524:	2800      	cmp	r0, #0
 8018526:	d1e1      	bne.n	80184ec <__ssputs_r+0x70>
 8018528:	6921      	ldr	r1, [r4, #16]
 801852a:	4650      	mov	r0, sl
 801852c:	f7fc fb6c 	bl	8014c08 <_free_r>
 8018530:	e7c7      	b.n	80184c2 <__ssputs_r+0x46>
	...

08018534 <_svfiprintf_r>:
 8018534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018538:	4698      	mov	r8, r3
 801853a:	898b      	ldrh	r3, [r1, #12]
 801853c:	061b      	lsls	r3, r3, #24
 801853e:	b09d      	sub	sp, #116	; 0x74
 8018540:	4607      	mov	r7, r0
 8018542:	460d      	mov	r5, r1
 8018544:	4614      	mov	r4, r2
 8018546:	d50e      	bpl.n	8018566 <_svfiprintf_r+0x32>
 8018548:	690b      	ldr	r3, [r1, #16]
 801854a:	b963      	cbnz	r3, 8018566 <_svfiprintf_r+0x32>
 801854c:	2140      	movs	r1, #64	; 0x40
 801854e:	f7fc fbab 	bl	8014ca8 <_malloc_r>
 8018552:	6028      	str	r0, [r5, #0]
 8018554:	6128      	str	r0, [r5, #16]
 8018556:	b920      	cbnz	r0, 8018562 <_svfiprintf_r+0x2e>
 8018558:	230c      	movs	r3, #12
 801855a:	603b      	str	r3, [r7, #0]
 801855c:	f04f 30ff 	mov.w	r0, #4294967295
 8018560:	e0d1      	b.n	8018706 <_svfiprintf_r+0x1d2>
 8018562:	2340      	movs	r3, #64	; 0x40
 8018564:	616b      	str	r3, [r5, #20]
 8018566:	2300      	movs	r3, #0
 8018568:	9309      	str	r3, [sp, #36]	; 0x24
 801856a:	2320      	movs	r3, #32
 801856c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018570:	f8cd 800c 	str.w	r8, [sp, #12]
 8018574:	2330      	movs	r3, #48	; 0x30
 8018576:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018720 <_svfiprintf_r+0x1ec>
 801857a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801857e:	f04f 0901 	mov.w	r9, #1
 8018582:	4623      	mov	r3, r4
 8018584:	469a      	mov	sl, r3
 8018586:	f813 2b01 	ldrb.w	r2, [r3], #1
 801858a:	b10a      	cbz	r2, 8018590 <_svfiprintf_r+0x5c>
 801858c:	2a25      	cmp	r2, #37	; 0x25
 801858e:	d1f9      	bne.n	8018584 <_svfiprintf_r+0x50>
 8018590:	ebba 0b04 	subs.w	fp, sl, r4
 8018594:	d00b      	beq.n	80185ae <_svfiprintf_r+0x7a>
 8018596:	465b      	mov	r3, fp
 8018598:	4622      	mov	r2, r4
 801859a:	4629      	mov	r1, r5
 801859c:	4638      	mov	r0, r7
 801859e:	f7ff ff6d 	bl	801847c <__ssputs_r>
 80185a2:	3001      	adds	r0, #1
 80185a4:	f000 80aa 	beq.w	80186fc <_svfiprintf_r+0x1c8>
 80185a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80185aa:	445a      	add	r2, fp
 80185ac:	9209      	str	r2, [sp, #36]	; 0x24
 80185ae:	f89a 3000 	ldrb.w	r3, [sl]
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	f000 80a2 	beq.w	80186fc <_svfiprintf_r+0x1c8>
 80185b8:	2300      	movs	r3, #0
 80185ba:	f04f 32ff 	mov.w	r2, #4294967295
 80185be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80185c2:	f10a 0a01 	add.w	sl, sl, #1
 80185c6:	9304      	str	r3, [sp, #16]
 80185c8:	9307      	str	r3, [sp, #28]
 80185ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80185ce:	931a      	str	r3, [sp, #104]	; 0x68
 80185d0:	4654      	mov	r4, sl
 80185d2:	2205      	movs	r2, #5
 80185d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185d8:	4851      	ldr	r0, [pc, #324]	; (8018720 <_svfiprintf_r+0x1ec>)
 80185da:	f7e7 fe21 	bl	8000220 <memchr>
 80185de:	9a04      	ldr	r2, [sp, #16]
 80185e0:	b9d8      	cbnz	r0, 801861a <_svfiprintf_r+0xe6>
 80185e2:	06d0      	lsls	r0, r2, #27
 80185e4:	bf44      	itt	mi
 80185e6:	2320      	movmi	r3, #32
 80185e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80185ec:	0711      	lsls	r1, r2, #28
 80185ee:	bf44      	itt	mi
 80185f0:	232b      	movmi	r3, #43	; 0x2b
 80185f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80185f6:	f89a 3000 	ldrb.w	r3, [sl]
 80185fa:	2b2a      	cmp	r3, #42	; 0x2a
 80185fc:	d015      	beq.n	801862a <_svfiprintf_r+0xf6>
 80185fe:	9a07      	ldr	r2, [sp, #28]
 8018600:	4654      	mov	r4, sl
 8018602:	2000      	movs	r0, #0
 8018604:	f04f 0c0a 	mov.w	ip, #10
 8018608:	4621      	mov	r1, r4
 801860a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801860e:	3b30      	subs	r3, #48	; 0x30
 8018610:	2b09      	cmp	r3, #9
 8018612:	d94e      	bls.n	80186b2 <_svfiprintf_r+0x17e>
 8018614:	b1b0      	cbz	r0, 8018644 <_svfiprintf_r+0x110>
 8018616:	9207      	str	r2, [sp, #28]
 8018618:	e014      	b.n	8018644 <_svfiprintf_r+0x110>
 801861a:	eba0 0308 	sub.w	r3, r0, r8
 801861e:	fa09 f303 	lsl.w	r3, r9, r3
 8018622:	4313      	orrs	r3, r2
 8018624:	9304      	str	r3, [sp, #16]
 8018626:	46a2      	mov	sl, r4
 8018628:	e7d2      	b.n	80185d0 <_svfiprintf_r+0x9c>
 801862a:	9b03      	ldr	r3, [sp, #12]
 801862c:	1d19      	adds	r1, r3, #4
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	9103      	str	r1, [sp, #12]
 8018632:	2b00      	cmp	r3, #0
 8018634:	bfbb      	ittet	lt
 8018636:	425b      	neglt	r3, r3
 8018638:	f042 0202 	orrlt.w	r2, r2, #2
 801863c:	9307      	strge	r3, [sp, #28]
 801863e:	9307      	strlt	r3, [sp, #28]
 8018640:	bfb8      	it	lt
 8018642:	9204      	strlt	r2, [sp, #16]
 8018644:	7823      	ldrb	r3, [r4, #0]
 8018646:	2b2e      	cmp	r3, #46	; 0x2e
 8018648:	d10c      	bne.n	8018664 <_svfiprintf_r+0x130>
 801864a:	7863      	ldrb	r3, [r4, #1]
 801864c:	2b2a      	cmp	r3, #42	; 0x2a
 801864e:	d135      	bne.n	80186bc <_svfiprintf_r+0x188>
 8018650:	9b03      	ldr	r3, [sp, #12]
 8018652:	1d1a      	adds	r2, r3, #4
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	9203      	str	r2, [sp, #12]
 8018658:	2b00      	cmp	r3, #0
 801865a:	bfb8      	it	lt
 801865c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018660:	3402      	adds	r4, #2
 8018662:	9305      	str	r3, [sp, #20]
 8018664:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018730 <_svfiprintf_r+0x1fc>
 8018668:	7821      	ldrb	r1, [r4, #0]
 801866a:	2203      	movs	r2, #3
 801866c:	4650      	mov	r0, sl
 801866e:	f7e7 fdd7 	bl	8000220 <memchr>
 8018672:	b140      	cbz	r0, 8018686 <_svfiprintf_r+0x152>
 8018674:	2340      	movs	r3, #64	; 0x40
 8018676:	eba0 000a 	sub.w	r0, r0, sl
 801867a:	fa03 f000 	lsl.w	r0, r3, r0
 801867e:	9b04      	ldr	r3, [sp, #16]
 8018680:	4303      	orrs	r3, r0
 8018682:	3401      	adds	r4, #1
 8018684:	9304      	str	r3, [sp, #16]
 8018686:	f814 1b01 	ldrb.w	r1, [r4], #1
 801868a:	4826      	ldr	r0, [pc, #152]	; (8018724 <_svfiprintf_r+0x1f0>)
 801868c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018690:	2206      	movs	r2, #6
 8018692:	f7e7 fdc5 	bl	8000220 <memchr>
 8018696:	2800      	cmp	r0, #0
 8018698:	d038      	beq.n	801870c <_svfiprintf_r+0x1d8>
 801869a:	4b23      	ldr	r3, [pc, #140]	; (8018728 <_svfiprintf_r+0x1f4>)
 801869c:	bb1b      	cbnz	r3, 80186e6 <_svfiprintf_r+0x1b2>
 801869e:	9b03      	ldr	r3, [sp, #12]
 80186a0:	3307      	adds	r3, #7
 80186a2:	f023 0307 	bic.w	r3, r3, #7
 80186a6:	3308      	adds	r3, #8
 80186a8:	9303      	str	r3, [sp, #12]
 80186aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186ac:	4433      	add	r3, r6
 80186ae:	9309      	str	r3, [sp, #36]	; 0x24
 80186b0:	e767      	b.n	8018582 <_svfiprintf_r+0x4e>
 80186b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80186b6:	460c      	mov	r4, r1
 80186b8:	2001      	movs	r0, #1
 80186ba:	e7a5      	b.n	8018608 <_svfiprintf_r+0xd4>
 80186bc:	2300      	movs	r3, #0
 80186be:	3401      	adds	r4, #1
 80186c0:	9305      	str	r3, [sp, #20]
 80186c2:	4619      	mov	r1, r3
 80186c4:	f04f 0c0a 	mov.w	ip, #10
 80186c8:	4620      	mov	r0, r4
 80186ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80186ce:	3a30      	subs	r2, #48	; 0x30
 80186d0:	2a09      	cmp	r2, #9
 80186d2:	d903      	bls.n	80186dc <_svfiprintf_r+0x1a8>
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d0c5      	beq.n	8018664 <_svfiprintf_r+0x130>
 80186d8:	9105      	str	r1, [sp, #20]
 80186da:	e7c3      	b.n	8018664 <_svfiprintf_r+0x130>
 80186dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80186e0:	4604      	mov	r4, r0
 80186e2:	2301      	movs	r3, #1
 80186e4:	e7f0      	b.n	80186c8 <_svfiprintf_r+0x194>
 80186e6:	ab03      	add	r3, sp, #12
 80186e8:	9300      	str	r3, [sp, #0]
 80186ea:	462a      	mov	r2, r5
 80186ec:	4b0f      	ldr	r3, [pc, #60]	; (801872c <_svfiprintf_r+0x1f8>)
 80186ee:	a904      	add	r1, sp, #16
 80186f0:	4638      	mov	r0, r7
 80186f2:	f7fc fbd3 	bl	8014e9c <_printf_float>
 80186f6:	1c42      	adds	r2, r0, #1
 80186f8:	4606      	mov	r6, r0
 80186fa:	d1d6      	bne.n	80186aa <_svfiprintf_r+0x176>
 80186fc:	89ab      	ldrh	r3, [r5, #12]
 80186fe:	065b      	lsls	r3, r3, #25
 8018700:	f53f af2c 	bmi.w	801855c <_svfiprintf_r+0x28>
 8018704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018706:	b01d      	add	sp, #116	; 0x74
 8018708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801870c:	ab03      	add	r3, sp, #12
 801870e:	9300      	str	r3, [sp, #0]
 8018710:	462a      	mov	r2, r5
 8018712:	4b06      	ldr	r3, [pc, #24]	; (801872c <_svfiprintf_r+0x1f8>)
 8018714:	a904      	add	r1, sp, #16
 8018716:	4638      	mov	r0, r7
 8018718:	f7fc fe64 	bl	80153e4 <_printf_i>
 801871c:	e7eb      	b.n	80186f6 <_svfiprintf_r+0x1c2>
 801871e:	bf00      	nop
 8018720:	0801ccec 	.word	0x0801ccec
 8018724:	0801ccf6 	.word	0x0801ccf6
 8018728:	08014e9d 	.word	0x08014e9d
 801872c:	0801847d 	.word	0x0801847d
 8018730:	0801ccf2 	.word	0x0801ccf2

08018734 <__sfputc_r>:
 8018734:	6893      	ldr	r3, [r2, #8]
 8018736:	3b01      	subs	r3, #1
 8018738:	2b00      	cmp	r3, #0
 801873a:	b410      	push	{r4}
 801873c:	6093      	str	r3, [r2, #8]
 801873e:	da08      	bge.n	8018752 <__sfputc_r+0x1e>
 8018740:	6994      	ldr	r4, [r2, #24]
 8018742:	42a3      	cmp	r3, r4
 8018744:	db01      	blt.n	801874a <__sfputc_r+0x16>
 8018746:	290a      	cmp	r1, #10
 8018748:	d103      	bne.n	8018752 <__sfputc_r+0x1e>
 801874a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801874e:	f000 b997 	b.w	8018a80 <__swbuf_r>
 8018752:	6813      	ldr	r3, [r2, #0]
 8018754:	1c58      	adds	r0, r3, #1
 8018756:	6010      	str	r0, [r2, #0]
 8018758:	7019      	strb	r1, [r3, #0]
 801875a:	4608      	mov	r0, r1
 801875c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018760:	4770      	bx	lr

08018762 <__sfputs_r>:
 8018762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018764:	4606      	mov	r6, r0
 8018766:	460f      	mov	r7, r1
 8018768:	4614      	mov	r4, r2
 801876a:	18d5      	adds	r5, r2, r3
 801876c:	42ac      	cmp	r4, r5
 801876e:	d101      	bne.n	8018774 <__sfputs_r+0x12>
 8018770:	2000      	movs	r0, #0
 8018772:	e007      	b.n	8018784 <__sfputs_r+0x22>
 8018774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018778:	463a      	mov	r2, r7
 801877a:	4630      	mov	r0, r6
 801877c:	f7ff ffda 	bl	8018734 <__sfputc_r>
 8018780:	1c43      	adds	r3, r0, #1
 8018782:	d1f3      	bne.n	801876c <__sfputs_r+0xa>
 8018784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018788 <_vfiprintf_r>:
 8018788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801878c:	460d      	mov	r5, r1
 801878e:	b09d      	sub	sp, #116	; 0x74
 8018790:	4614      	mov	r4, r2
 8018792:	4698      	mov	r8, r3
 8018794:	4606      	mov	r6, r0
 8018796:	b118      	cbz	r0, 80187a0 <_vfiprintf_r+0x18>
 8018798:	6983      	ldr	r3, [r0, #24]
 801879a:	b90b      	cbnz	r3, 80187a0 <_vfiprintf_r+0x18>
 801879c:	f7fe fd60 	bl	8017260 <__sinit>
 80187a0:	4b89      	ldr	r3, [pc, #548]	; (80189c8 <_vfiprintf_r+0x240>)
 80187a2:	429d      	cmp	r5, r3
 80187a4:	d11b      	bne.n	80187de <_vfiprintf_r+0x56>
 80187a6:	6875      	ldr	r5, [r6, #4]
 80187a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187aa:	07d9      	lsls	r1, r3, #31
 80187ac:	d405      	bmi.n	80187ba <_vfiprintf_r+0x32>
 80187ae:	89ab      	ldrh	r3, [r5, #12]
 80187b0:	059a      	lsls	r2, r3, #22
 80187b2:	d402      	bmi.n	80187ba <_vfiprintf_r+0x32>
 80187b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187b6:	f7ff f976 	bl	8017aa6 <__retarget_lock_acquire_recursive>
 80187ba:	89ab      	ldrh	r3, [r5, #12]
 80187bc:	071b      	lsls	r3, r3, #28
 80187be:	d501      	bpl.n	80187c4 <_vfiprintf_r+0x3c>
 80187c0:	692b      	ldr	r3, [r5, #16]
 80187c2:	b9eb      	cbnz	r3, 8018800 <_vfiprintf_r+0x78>
 80187c4:	4629      	mov	r1, r5
 80187c6:	4630      	mov	r0, r6
 80187c8:	f000 f9cc 	bl	8018b64 <__swsetup_r>
 80187cc:	b1c0      	cbz	r0, 8018800 <_vfiprintf_r+0x78>
 80187ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187d0:	07dc      	lsls	r4, r3, #31
 80187d2:	d50e      	bpl.n	80187f2 <_vfiprintf_r+0x6a>
 80187d4:	f04f 30ff 	mov.w	r0, #4294967295
 80187d8:	b01d      	add	sp, #116	; 0x74
 80187da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187de:	4b7b      	ldr	r3, [pc, #492]	; (80189cc <_vfiprintf_r+0x244>)
 80187e0:	429d      	cmp	r5, r3
 80187e2:	d101      	bne.n	80187e8 <_vfiprintf_r+0x60>
 80187e4:	68b5      	ldr	r5, [r6, #8]
 80187e6:	e7df      	b.n	80187a8 <_vfiprintf_r+0x20>
 80187e8:	4b79      	ldr	r3, [pc, #484]	; (80189d0 <_vfiprintf_r+0x248>)
 80187ea:	429d      	cmp	r5, r3
 80187ec:	bf08      	it	eq
 80187ee:	68f5      	ldreq	r5, [r6, #12]
 80187f0:	e7da      	b.n	80187a8 <_vfiprintf_r+0x20>
 80187f2:	89ab      	ldrh	r3, [r5, #12]
 80187f4:	0598      	lsls	r0, r3, #22
 80187f6:	d4ed      	bmi.n	80187d4 <_vfiprintf_r+0x4c>
 80187f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187fa:	f7ff f955 	bl	8017aa8 <__retarget_lock_release_recursive>
 80187fe:	e7e9      	b.n	80187d4 <_vfiprintf_r+0x4c>
 8018800:	2300      	movs	r3, #0
 8018802:	9309      	str	r3, [sp, #36]	; 0x24
 8018804:	2320      	movs	r3, #32
 8018806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801880a:	f8cd 800c 	str.w	r8, [sp, #12]
 801880e:	2330      	movs	r3, #48	; 0x30
 8018810:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80189d4 <_vfiprintf_r+0x24c>
 8018814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018818:	f04f 0901 	mov.w	r9, #1
 801881c:	4623      	mov	r3, r4
 801881e:	469a      	mov	sl, r3
 8018820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018824:	b10a      	cbz	r2, 801882a <_vfiprintf_r+0xa2>
 8018826:	2a25      	cmp	r2, #37	; 0x25
 8018828:	d1f9      	bne.n	801881e <_vfiprintf_r+0x96>
 801882a:	ebba 0b04 	subs.w	fp, sl, r4
 801882e:	d00b      	beq.n	8018848 <_vfiprintf_r+0xc0>
 8018830:	465b      	mov	r3, fp
 8018832:	4622      	mov	r2, r4
 8018834:	4629      	mov	r1, r5
 8018836:	4630      	mov	r0, r6
 8018838:	f7ff ff93 	bl	8018762 <__sfputs_r>
 801883c:	3001      	adds	r0, #1
 801883e:	f000 80aa 	beq.w	8018996 <_vfiprintf_r+0x20e>
 8018842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018844:	445a      	add	r2, fp
 8018846:	9209      	str	r2, [sp, #36]	; 0x24
 8018848:	f89a 3000 	ldrb.w	r3, [sl]
 801884c:	2b00      	cmp	r3, #0
 801884e:	f000 80a2 	beq.w	8018996 <_vfiprintf_r+0x20e>
 8018852:	2300      	movs	r3, #0
 8018854:	f04f 32ff 	mov.w	r2, #4294967295
 8018858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801885c:	f10a 0a01 	add.w	sl, sl, #1
 8018860:	9304      	str	r3, [sp, #16]
 8018862:	9307      	str	r3, [sp, #28]
 8018864:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018868:	931a      	str	r3, [sp, #104]	; 0x68
 801886a:	4654      	mov	r4, sl
 801886c:	2205      	movs	r2, #5
 801886e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018872:	4858      	ldr	r0, [pc, #352]	; (80189d4 <_vfiprintf_r+0x24c>)
 8018874:	f7e7 fcd4 	bl	8000220 <memchr>
 8018878:	9a04      	ldr	r2, [sp, #16]
 801887a:	b9d8      	cbnz	r0, 80188b4 <_vfiprintf_r+0x12c>
 801887c:	06d1      	lsls	r1, r2, #27
 801887e:	bf44      	itt	mi
 8018880:	2320      	movmi	r3, #32
 8018882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018886:	0713      	lsls	r3, r2, #28
 8018888:	bf44      	itt	mi
 801888a:	232b      	movmi	r3, #43	; 0x2b
 801888c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018890:	f89a 3000 	ldrb.w	r3, [sl]
 8018894:	2b2a      	cmp	r3, #42	; 0x2a
 8018896:	d015      	beq.n	80188c4 <_vfiprintf_r+0x13c>
 8018898:	9a07      	ldr	r2, [sp, #28]
 801889a:	4654      	mov	r4, sl
 801889c:	2000      	movs	r0, #0
 801889e:	f04f 0c0a 	mov.w	ip, #10
 80188a2:	4621      	mov	r1, r4
 80188a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80188a8:	3b30      	subs	r3, #48	; 0x30
 80188aa:	2b09      	cmp	r3, #9
 80188ac:	d94e      	bls.n	801894c <_vfiprintf_r+0x1c4>
 80188ae:	b1b0      	cbz	r0, 80188de <_vfiprintf_r+0x156>
 80188b0:	9207      	str	r2, [sp, #28]
 80188b2:	e014      	b.n	80188de <_vfiprintf_r+0x156>
 80188b4:	eba0 0308 	sub.w	r3, r0, r8
 80188b8:	fa09 f303 	lsl.w	r3, r9, r3
 80188bc:	4313      	orrs	r3, r2
 80188be:	9304      	str	r3, [sp, #16]
 80188c0:	46a2      	mov	sl, r4
 80188c2:	e7d2      	b.n	801886a <_vfiprintf_r+0xe2>
 80188c4:	9b03      	ldr	r3, [sp, #12]
 80188c6:	1d19      	adds	r1, r3, #4
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	9103      	str	r1, [sp, #12]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	bfbb      	ittet	lt
 80188d0:	425b      	neglt	r3, r3
 80188d2:	f042 0202 	orrlt.w	r2, r2, #2
 80188d6:	9307      	strge	r3, [sp, #28]
 80188d8:	9307      	strlt	r3, [sp, #28]
 80188da:	bfb8      	it	lt
 80188dc:	9204      	strlt	r2, [sp, #16]
 80188de:	7823      	ldrb	r3, [r4, #0]
 80188e0:	2b2e      	cmp	r3, #46	; 0x2e
 80188e2:	d10c      	bne.n	80188fe <_vfiprintf_r+0x176>
 80188e4:	7863      	ldrb	r3, [r4, #1]
 80188e6:	2b2a      	cmp	r3, #42	; 0x2a
 80188e8:	d135      	bne.n	8018956 <_vfiprintf_r+0x1ce>
 80188ea:	9b03      	ldr	r3, [sp, #12]
 80188ec:	1d1a      	adds	r2, r3, #4
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	9203      	str	r2, [sp, #12]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	bfb8      	it	lt
 80188f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80188fa:	3402      	adds	r4, #2
 80188fc:	9305      	str	r3, [sp, #20]
 80188fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80189e4 <_vfiprintf_r+0x25c>
 8018902:	7821      	ldrb	r1, [r4, #0]
 8018904:	2203      	movs	r2, #3
 8018906:	4650      	mov	r0, sl
 8018908:	f7e7 fc8a 	bl	8000220 <memchr>
 801890c:	b140      	cbz	r0, 8018920 <_vfiprintf_r+0x198>
 801890e:	2340      	movs	r3, #64	; 0x40
 8018910:	eba0 000a 	sub.w	r0, r0, sl
 8018914:	fa03 f000 	lsl.w	r0, r3, r0
 8018918:	9b04      	ldr	r3, [sp, #16]
 801891a:	4303      	orrs	r3, r0
 801891c:	3401      	adds	r4, #1
 801891e:	9304      	str	r3, [sp, #16]
 8018920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018924:	482c      	ldr	r0, [pc, #176]	; (80189d8 <_vfiprintf_r+0x250>)
 8018926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801892a:	2206      	movs	r2, #6
 801892c:	f7e7 fc78 	bl	8000220 <memchr>
 8018930:	2800      	cmp	r0, #0
 8018932:	d03f      	beq.n	80189b4 <_vfiprintf_r+0x22c>
 8018934:	4b29      	ldr	r3, [pc, #164]	; (80189dc <_vfiprintf_r+0x254>)
 8018936:	bb1b      	cbnz	r3, 8018980 <_vfiprintf_r+0x1f8>
 8018938:	9b03      	ldr	r3, [sp, #12]
 801893a:	3307      	adds	r3, #7
 801893c:	f023 0307 	bic.w	r3, r3, #7
 8018940:	3308      	adds	r3, #8
 8018942:	9303      	str	r3, [sp, #12]
 8018944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018946:	443b      	add	r3, r7
 8018948:	9309      	str	r3, [sp, #36]	; 0x24
 801894a:	e767      	b.n	801881c <_vfiprintf_r+0x94>
 801894c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018950:	460c      	mov	r4, r1
 8018952:	2001      	movs	r0, #1
 8018954:	e7a5      	b.n	80188a2 <_vfiprintf_r+0x11a>
 8018956:	2300      	movs	r3, #0
 8018958:	3401      	adds	r4, #1
 801895a:	9305      	str	r3, [sp, #20]
 801895c:	4619      	mov	r1, r3
 801895e:	f04f 0c0a 	mov.w	ip, #10
 8018962:	4620      	mov	r0, r4
 8018964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018968:	3a30      	subs	r2, #48	; 0x30
 801896a:	2a09      	cmp	r2, #9
 801896c:	d903      	bls.n	8018976 <_vfiprintf_r+0x1ee>
 801896e:	2b00      	cmp	r3, #0
 8018970:	d0c5      	beq.n	80188fe <_vfiprintf_r+0x176>
 8018972:	9105      	str	r1, [sp, #20]
 8018974:	e7c3      	b.n	80188fe <_vfiprintf_r+0x176>
 8018976:	fb0c 2101 	mla	r1, ip, r1, r2
 801897a:	4604      	mov	r4, r0
 801897c:	2301      	movs	r3, #1
 801897e:	e7f0      	b.n	8018962 <_vfiprintf_r+0x1da>
 8018980:	ab03      	add	r3, sp, #12
 8018982:	9300      	str	r3, [sp, #0]
 8018984:	462a      	mov	r2, r5
 8018986:	4b16      	ldr	r3, [pc, #88]	; (80189e0 <_vfiprintf_r+0x258>)
 8018988:	a904      	add	r1, sp, #16
 801898a:	4630      	mov	r0, r6
 801898c:	f7fc fa86 	bl	8014e9c <_printf_float>
 8018990:	4607      	mov	r7, r0
 8018992:	1c78      	adds	r0, r7, #1
 8018994:	d1d6      	bne.n	8018944 <_vfiprintf_r+0x1bc>
 8018996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018998:	07d9      	lsls	r1, r3, #31
 801899a:	d405      	bmi.n	80189a8 <_vfiprintf_r+0x220>
 801899c:	89ab      	ldrh	r3, [r5, #12]
 801899e:	059a      	lsls	r2, r3, #22
 80189a0:	d402      	bmi.n	80189a8 <_vfiprintf_r+0x220>
 80189a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80189a4:	f7ff f880 	bl	8017aa8 <__retarget_lock_release_recursive>
 80189a8:	89ab      	ldrh	r3, [r5, #12]
 80189aa:	065b      	lsls	r3, r3, #25
 80189ac:	f53f af12 	bmi.w	80187d4 <_vfiprintf_r+0x4c>
 80189b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80189b2:	e711      	b.n	80187d8 <_vfiprintf_r+0x50>
 80189b4:	ab03      	add	r3, sp, #12
 80189b6:	9300      	str	r3, [sp, #0]
 80189b8:	462a      	mov	r2, r5
 80189ba:	4b09      	ldr	r3, [pc, #36]	; (80189e0 <_vfiprintf_r+0x258>)
 80189bc:	a904      	add	r1, sp, #16
 80189be:	4630      	mov	r0, r6
 80189c0:	f7fc fd10 	bl	80153e4 <_printf_i>
 80189c4:	e7e4      	b.n	8018990 <_vfiprintf_r+0x208>
 80189c6:	bf00      	nop
 80189c8:	0801cacc 	.word	0x0801cacc
 80189cc:	0801caec 	.word	0x0801caec
 80189d0:	0801caac 	.word	0x0801caac
 80189d4:	0801ccec 	.word	0x0801ccec
 80189d8:	0801ccf6 	.word	0x0801ccf6
 80189dc:	08014e9d 	.word	0x08014e9d
 80189e0:	08018763 	.word	0x08018763
 80189e4:	0801ccf2 	.word	0x0801ccf2

080189e8 <nan>:
 80189e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80189f0 <nan+0x8>
 80189ec:	4770      	bx	lr
 80189ee:	bf00      	nop
 80189f0:	00000000 	.word	0x00000000
 80189f4:	7ff80000 	.word	0x7ff80000

080189f8 <__sread>:
 80189f8:	b510      	push	{r4, lr}
 80189fa:	460c      	mov	r4, r1
 80189fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a00:	f000 fa94 	bl	8018f2c <_read_r>
 8018a04:	2800      	cmp	r0, #0
 8018a06:	bfab      	itete	ge
 8018a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8018a0c:	181b      	addge	r3, r3, r0
 8018a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018a12:	bfac      	ite	ge
 8018a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8018a16:	81a3      	strhlt	r3, [r4, #12]
 8018a18:	bd10      	pop	{r4, pc}

08018a1a <__swrite>:
 8018a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a1e:	461f      	mov	r7, r3
 8018a20:	898b      	ldrh	r3, [r1, #12]
 8018a22:	05db      	lsls	r3, r3, #23
 8018a24:	4605      	mov	r5, r0
 8018a26:	460c      	mov	r4, r1
 8018a28:	4616      	mov	r6, r2
 8018a2a:	d505      	bpl.n	8018a38 <__swrite+0x1e>
 8018a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a30:	2302      	movs	r3, #2
 8018a32:	2200      	movs	r2, #0
 8018a34:	f000 f9de 	bl	8018df4 <_lseek_r>
 8018a38:	89a3      	ldrh	r3, [r4, #12]
 8018a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018a42:	81a3      	strh	r3, [r4, #12]
 8018a44:	4632      	mov	r2, r6
 8018a46:	463b      	mov	r3, r7
 8018a48:	4628      	mov	r0, r5
 8018a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a4e:	f000 b877 	b.w	8018b40 <_write_r>

08018a52 <__sseek>:
 8018a52:	b510      	push	{r4, lr}
 8018a54:	460c      	mov	r4, r1
 8018a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a5a:	f000 f9cb 	bl	8018df4 <_lseek_r>
 8018a5e:	1c43      	adds	r3, r0, #1
 8018a60:	89a3      	ldrh	r3, [r4, #12]
 8018a62:	bf15      	itete	ne
 8018a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8018a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018a6e:	81a3      	strheq	r3, [r4, #12]
 8018a70:	bf18      	it	ne
 8018a72:	81a3      	strhne	r3, [r4, #12]
 8018a74:	bd10      	pop	{r4, pc}

08018a76 <__sclose>:
 8018a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a7a:	f000 b8e9 	b.w	8018c50 <_close_r>
	...

08018a80 <__swbuf_r>:
 8018a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a82:	460e      	mov	r6, r1
 8018a84:	4614      	mov	r4, r2
 8018a86:	4605      	mov	r5, r0
 8018a88:	b118      	cbz	r0, 8018a92 <__swbuf_r+0x12>
 8018a8a:	6983      	ldr	r3, [r0, #24]
 8018a8c:	b90b      	cbnz	r3, 8018a92 <__swbuf_r+0x12>
 8018a8e:	f7fe fbe7 	bl	8017260 <__sinit>
 8018a92:	4b21      	ldr	r3, [pc, #132]	; (8018b18 <__swbuf_r+0x98>)
 8018a94:	429c      	cmp	r4, r3
 8018a96:	d12b      	bne.n	8018af0 <__swbuf_r+0x70>
 8018a98:	686c      	ldr	r4, [r5, #4]
 8018a9a:	69a3      	ldr	r3, [r4, #24]
 8018a9c:	60a3      	str	r3, [r4, #8]
 8018a9e:	89a3      	ldrh	r3, [r4, #12]
 8018aa0:	071a      	lsls	r2, r3, #28
 8018aa2:	d52f      	bpl.n	8018b04 <__swbuf_r+0x84>
 8018aa4:	6923      	ldr	r3, [r4, #16]
 8018aa6:	b36b      	cbz	r3, 8018b04 <__swbuf_r+0x84>
 8018aa8:	6923      	ldr	r3, [r4, #16]
 8018aaa:	6820      	ldr	r0, [r4, #0]
 8018aac:	1ac0      	subs	r0, r0, r3
 8018aae:	6963      	ldr	r3, [r4, #20]
 8018ab0:	b2f6      	uxtb	r6, r6
 8018ab2:	4283      	cmp	r3, r0
 8018ab4:	4637      	mov	r7, r6
 8018ab6:	dc04      	bgt.n	8018ac2 <__swbuf_r+0x42>
 8018ab8:	4621      	mov	r1, r4
 8018aba:	4628      	mov	r0, r5
 8018abc:	f000 f95e 	bl	8018d7c <_fflush_r>
 8018ac0:	bb30      	cbnz	r0, 8018b10 <__swbuf_r+0x90>
 8018ac2:	68a3      	ldr	r3, [r4, #8]
 8018ac4:	3b01      	subs	r3, #1
 8018ac6:	60a3      	str	r3, [r4, #8]
 8018ac8:	6823      	ldr	r3, [r4, #0]
 8018aca:	1c5a      	adds	r2, r3, #1
 8018acc:	6022      	str	r2, [r4, #0]
 8018ace:	701e      	strb	r6, [r3, #0]
 8018ad0:	6963      	ldr	r3, [r4, #20]
 8018ad2:	3001      	adds	r0, #1
 8018ad4:	4283      	cmp	r3, r0
 8018ad6:	d004      	beq.n	8018ae2 <__swbuf_r+0x62>
 8018ad8:	89a3      	ldrh	r3, [r4, #12]
 8018ada:	07db      	lsls	r3, r3, #31
 8018adc:	d506      	bpl.n	8018aec <__swbuf_r+0x6c>
 8018ade:	2e0a      	cmp	r6, #10
 8018ae0:	d104      	bne.n	8018aec <__swbuf_r+0x6c>
 8018ae2:	4621      	mov	r1, r4
 8018ae4:	4628      	mov	r0, r5
 8018ae6:	f000 f949 	bl	8018d7c <_fflush_r>
 8018aea:	b988      	cbnz	r0, 8018b10 <__swbuf_r+0x90>
 8018aec:	4638      	mov	r0, r7
 8018aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018af0:	4b0a      	ldr	r3, [pc, #40]	; (8018b1c <__swbuf_r+0x9c>)
 8018af2:	429c      	cmp	r4, r3
 8018af4:	d101      	bne.n	8018afa <__swbuf_r+0x7a>
 8018af6:	68ac      	ldr	r4, [r5, #8]
 8018af8:	e7cf      	b.n	8018a9a <__swbuf_r+0x1a>
 8018afa:	4b09      	ldr	r3, [pc, #36]	; (8018b20 <__swbuf_r+0xa0>)
 8018afc:	429c      	cmp	r4, r3
 8018afe:	bf08      	it	eq
 8018b00:	68ec      	ldreq	r4, [r5, #12]
 8018b02:	e7ca      	b.n	8018a9a <__swbuf_r+0x1a>
 8018b04:	4621      	mov	r1, r4
 8018b06:	4628      	mov	r0, r5
 8018b08:	f000 f82c 	bl	8018b64 <__swsetup_r>
 8018b0c:	2800      	cmp	r0, #0
 8018b0e:	d0cb      	beq.n	8018aa8 <__swbuf_r+0x28>
 8018b10:	f04f 37ff 	mov.w	r7, #4294967295
 8018b14:	e7ea      	b.n	8018aec <__swbuf_r+0x6c>
 8018b16:	bf00      	nop
 8018b18:	0801cacc 	.word	0x0801cacc
 8018b1c:	0801caec 	.word	0x0801caec
 8018b20:	0801caac 	.word	0x0801caac

08018b24 <__ascii_wctomb>:
 8018b24:	b149      	cbz	r1, 8018b3a <__ascii_wctomb+0x16>
 8018b26:	2aff      	cmp	r2, #255	; 0xff
 8018b28:	bf85      	ittet	hi
 8018b2a:	238a      	movhi	r3, #138	; 0x8a
 8018b2c:	6003      	strhi	r3, [r0, #0]
 8018b2e:	700a      	strbls	r2, [r1, #0]
 8018b30:	f04f 30ff 	movhi.w	r0, #4294967295
 8018b34:	bf98      	it	ls
 8018b36:	2001      	movls	r0, #1
 8018b38:	4770      	bx	lr
 8018b3a:	4608      	mov	r0, r1
 8018b3c:	4770      	bx	lr
	...

08018b40 <_write_r>:
 8018b40:	b538      	push	{r3, r4, r5, lr}
 8018b42:	4d07      	ldr	r5, [pc, #28]	; (8018b60 <_write_r+0x20>)
 8018b44:	4604      	mov	r4, r0
 8018b46:	4608      	mov	r0, r1
 8018b48:	4611      	mov	r1, r2
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	602a      	str	r2, [r5, #0]
 8018b4e:	461a      	mov	r2, r3
 8018b50:	f7e8 faee 	bl	8001130 <_write>
 8018b54:	1c43      	adds	r3, r0, #1
 8018b56:	d102      	bne.n	8018b5e <_write_r+0x1e>
 8018b58:	682b      	ldr	r3, [r5, #0]
 8018b5a:	b103      	cbz	r3, 8018b5e <_write_r+0x1e>
 8018b5c:	6023      	str	r3, [r4, #0]
 8018b5e:	bd38      	pop	{r3, r4, r5, pc}
 8018b60:	2000cfe4 	.word	0x2000cfe4

08018b64 <__swsetup_r>:
 8018b64:	4b32      	ldr	r3, [pc, #200]	; (8018c30 <__swsetup_r+0xcc>)
 8018b66:	b570      	push	{r4, r5, r6, lr}
 8018b68:	681d      	ldr	r5, [r3, #0]
 8018b6a:	4606      	mov	r6, r0
 8018b6c:	460c      	mov	r4, r1
 8018b6e:	b125      	cbz	r5, 8018b7a <__swsetup_r+0x16>
 8018b70:	69ab      	ldr	r3, [r5, #24]
 8018b72:	b913      	cbnz	r3, 8018b7a <__swsetup_r+0x16>
 8018b74:	4628      	mov	r0, r5
 8018b76:	f7fe fb73 	bl	8017260 <__sinit>
 8018b7a:	4b2e      	ldr	r3, [pc, #184]	; (8018c34 <__swsetup_r+0xd0>)
 8018b7c:	429c      	cmp	r4, r3
 8018b7e:	d10f      	bne.n	8018ba0 <__swsetup_r+0x3c>
 8018b80:	686c      	ldr	r4, [r5, #4]
 8018b82:	89a3      	ldrh	r3, [r4, #12]
 8018b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018b88:	0719      	lsls	r1, r3, #28
 8018b8a:	d42c      	bmi.n	8018be6 <__swsetup_r+0x82>
 8018b8c:	06dd      	lsls	r5, r3, #27
 8018b8e:	d411      	bmi.n	8018bb4 <__swsetup_r+0x50>
 8018b90:	2309      	movs	r3, #9
 8018b92:	6033      	str	r3, [r6, #0]
 8018b94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018b98:	81a3      	strh	r3, [r4, #12]
 8018b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8018b9e:	e03e      	b.n	8018c1e <__swsetup_r+0xba>
 8018ba0:	4b25      	ldr	r3, [pc, #148]	; (8018c38 <__swsetup_r+0xd4>)
 8018ba2:	429c      	cmp	r4, r3
 8018ba4:	d101      	bne.n	8018baa <__swsetup_r+0x46>
 8018ba6:	68ac      	ldr	r4, [r5, #8]
 8018ba8:	e7eb      	b.n	8018b82 <__swsetup_r+0x1e>
 8018baa:	4b24      	ldr	r3, [pc, #144]	; (8018c3c <__swsetup_r+0xd8>)
 8018bac:	429c      	cmp	r4, r3
 8018bae:	bf08      	it	eq
 8018bb0:	68ec      	ldreq	r4, [r5, #12]
 8018bb2:	e7e6      	b.n	8018b82 <__swsetup_r+0x1e>
 8018bb4:	0758      	lsls	r0, r3, #29
 8018bb6:	d512      	bpl.n	8018bde <__swsetup_r+0x7a>
 8018bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018bba:	b141      	cbz	r1, 8018bce <__swsetup_r+0x6a>
 8018bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018bc0:	4299      	cmp	r1, r3
 8018bc2:	d002      	beq.n	8018bca <__swsetup_r+0x66>
 8018bc4:	4630      	mov	r0, r6
 8018bc6:	f7fc f81f 	bl	8014c08 <_free_r>
 8018bca:	2300      	movs	r3, #0
 8018bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8018bce:	89a3      	ldrh	r3, [r4, #12]
 8018bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018bd4:	81a3      	strh	r3, [r4, #12]
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	6063      	str	r3, [r4, #4]
 8018bda:	6923      	ldr	r3, [r4, #16]
 8018bdc:	6023      	str	r3, [r4, #0]
 8018bde:	89a3      	ldrh	r3, [r4, #12]
 8018be0:	f043 0308 	orr.w	r3, r3, #8
 8018be4:	81a3      	strh	r3, [r4, #12]
 8018be6:	6923      	ldr	r3, [r4, #16]
 8018be8:	b94b      	cbnz	r3, 8018bfe <__swsetup_r+0x9a>
 8018bea:	89a3      	ldrh	r3, [r4, #12]
 8018bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018bf4:	d003      	beq.n	8018bfe <__swsetup_r+0x9a>
 8018bf6:	4621      	mov	r1, r4
 8018bf8:	4630      	mov	r0, r6
 8018bfa:	f000 f931 	bl	8018e60 <__smakebuf_r>
 8018bfe:	89a0      	ldrh	r0, [r4, #12]
 8018c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018c04:	f010 0301 	ands.w	r3, r0, #1
 8018c08:	d00a      	beq.n	8018c20 <__swsetup_r+0xbc>
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	60a3      	str	r3, [r4, #8]
 8018c0e:	6963      	ldr	r3, [r4, #20]
 8018c10:	425b      	negs	r3, r3
 8018c12:	61a3      	str	r3, [r4, #24]
 8018c14:	6923      	ldr	r3, [r4, #16]
 8018c16:	b943      	cbnz	r3, 8018c2a <__swsetup_r+0xc6>
 8018c18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018c1c:	d1ba      	bne.n	8018b94 <__swsetup_r+0x30>
 8018c1e:	bd70      	pop	{r4, r5, r6, pc}
 8018c20:	0781      	lsls	r1, r0, #30
 8018c22:	bf58      	it	pl
 8018c24:	6963      	ldrpl	r3, [r4, #20]
 8018c26:	60a3      	str	r3, [r4, #8]
 8018c28:	e7f4      	b.n	8018c14 <__swsetup_r+0xb0>
 8018c2a:	2000      	movs	r0, #0
 8018c2c:	e7f7      	b.n	8018c1e <__swsetup_r+0xba>
 8018c2e:	bf00      	nop
 8018c30:	2000003c 	.word	0x2000003c
 8018c34:	0801cacc 	.word	0x0801cacc
 8018c38:	0801caec 	.word	0x0801caec
 8018c3c:	0801caac 	.word	0x0801caac

08018c40 <abort>:
 8018c40:	b508      	push	{r3, lr}
 8018c42:	2006      	movs	r0, #6
 8018c44:	f000 f9ac 	bl	8018fa0 <raise>
 8018c48:	2001      	movs	r0, #1
 8018c4a:	f7e8 fa67 	bl	800111c <_exit>
	...

08018c50 <_close_r>:
 8018c50:	b538      	push	{r3, r4, r5, lr}
 8018c52:	4d06      	ldr	r5, [pc, #24]	; (8018c6c <_close_r+0x1c>)
 8018c54:	2300      	movs	r3, #0
 8018c56:	4604      	mov	r4, r0
 8018c58:	4608      	mov	r0, r1
 8018c5a:	602b      	str	r3, [r5, #0]
 8018c5c:	f7e8 fa84 	bl	8001168 <_close>
 8018c60:	1c43      	adds	r3, r0, #1
 8018c62:	d102      	bne.n	8018c6a <_close_r+0x1a>
 8018c64:	682b      	ldr	r3, [r5, #0]
 8018c66:	b103      	cbz	r3, 8018c6a <_close_r+0x1a>
 8018c68:	6023      	str	r3, [r4, #0]
 8018c6a:	bd38      	pop	{r3, r4, r5, pc}
 8018c6c:	2000cfe4 	.word	0x2000cfe4

08018c70 <__sflush_r>:
 8018c70:	898a      	ldrh	r2, [r1, #12]
 8018c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c76:	4605      	mov	r5, r0
 8018c78:	0710      	lsls	r0, r2, #28
 8018c7a:	460c      	mov	r4, r1
 8018c7c:	d458      	bmi.n	8018d30 <__sflush_r+0xc0>
 8018c7e:	684b      	ldr	r3, [r1, #4]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	dc05      	bgt.n	8018c90 <__sflush_r+0x20>
 8018c84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	dc02      	bgt.n	8018c90 <__sflush_r+0x20>
 8018c8a:	2000      	movs	r0, #0
 8018c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018c92:	2e00      	cmp	r6, #0
 8018c94:	d0f9      	beq.n	8018c8a <__sflush_r+0x1a>
 8018c96:	2300      	movs	r3, #0
 8018c98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018c9c:	682f      	ldr	r7, [r5, #0]
 8018c9e:	602b      	str	r3, [r5, #0]
 8018ca0:	d032      	beq.n	8018d08 <__sflush_r+0x98>
 8018ca2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018ca4:	89a3      	ldrh	r3, [r4, #12]
 8018ca6:	075a      	lsls	r2, r3, #29
 8018ca8:	d505      	bpl.n	8018cb6 <__sflush_r+0x46>
 8018caa:	6863      	ldr	r3, [r4, #4]
 8018cac:	1ac0      	subs	r0, r0, r3
 8018cae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018cb0:	b10b      	cbz	r3, 8018cb6 <__sflush_r+0x46>
 8018cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018cb4:	1ac0      	subs	r0, r0, r3
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	4602      	mov	r2, r0
 8018cba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018cbc:	6a21      	ldr	r1, [r4, #32]
 8018cbe:	4628      	mov	r0, r5
 8018cc0:	47b0      	blx	r6
 8018cc2:	1c43      	adds	r3, r0, #1
 8018cc4:	89a3      	ldrh	r3, [r4, #12]
 8018cc6:	d106      	bne.n	8018cd6 <__sflush_r+0x66>
 8018cc8:	6829      	ldr	r1, [r5, #0]
 8018cca:	291d      	cmp	r1, #29
 8018ccc:	d82c      	bhi.n	8018d28 <__sflush_r+0xb8>
 8018cce:	4a2a      	ldr	r2, [pc, #168]	; (8018d78 <__sflush_r+0x108>)
 8018cd0:	40ca      	lsrs	r2, r1
 8018cd2:	07d6      	lsls	r6, r2, #31
 8018cd4:	d528      	bpl.n	8018d28 <__sflush_r+0xb8>
 8018cd6:	2200      	movs	r2, #0
 8018cd8:	6062      	str	r2, [r4, #4]
 8018cda:	04d9      	lsls	r1, r3, #19
 8018cdc:	6922      	ldr	r2, [r4, #16]
 8018cde:	6022      	str	r2, [r4, #0]
 8018ce0:	d504      	bpl.n	8018cec <__sflush_r+0x7c>
 8018ce2:	1c42      	adds	r2, r0, #1
 8018ce4:	d101      	bne.n	8018cea <__sflush_r+0x7a>
 8018ce6:	682b      	ldr	r3, [r5, #0]
 8018ce8:	b903      	cbnz	r3, 8018cec <__sflush_r+0x7c>
 8018cea:	6560      	str	r0, [r4, #84]	; 0x54
 8018cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018cee:	602f      	str	r7, [r5, #0]
 8018cf0:	2900      	cmp	r1, #0
 8018cf2:	d0ca      	beq.n	8018c8a <__sflush_r+0x1a>
 8018cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018cf8:	4299      	cmp	r1, r3
 8018cfa:	d002      	beq.n	8018d02 <__sflush_r+0x92>
 8018cfc:	4628      	mov	r0, r5
 8018cfe:	f7fb ff83 	bl	8014c08 <_free_r>
 8018d02:	2000      	movs	r0, #0
 8018d04:	6360      	str	r0, [r4, #52]	; 0x34
 8018d06:	e7c1      	b.n	8018c8c <__sflush_r+0x1c>
 8018d08:	6a21      	ldr	r1, [r4, #32]
 8018d0a:	2301      	movs	r3, #1
 8018d0c:	4628      	mov	r0, r5
 8018d0e:	47b0      	blx	r6
 8018d10:	1c41      	adds	r1, r0, #1
 8018d12:	d1c7      	bne.n	8018ca4 <__sflush_r+0x34>
 8018d14:	682b      	ldr	r3, [r5, #0]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d0c4      	beq.n	8018ca4 <__sflush_r+0x34>
 8018d1a:	2b1d      	cmp	r3, #29
 8018d1c:	d001      	beq.n	8018d22 <__sflush_r+0xb2>
 8018d1e:	2b16      	cmp	r3, #22
 8018d20:	d101      	bne.n	8018d26 <__sflush_r+0xb6>
 8018d22:	602f      	str	r7, [r5, #0]
 8018d24:	e7b1      	b.n	8018c8a <__sflush_r+0x1a>
 8018d26:	89a3      	ldrh	r3, [r4, #12]
 8018d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d2c:	81a3      	strh	r3, [r4, #12]
 8018d2e:	e7ad      	b.n	8018c8c <__sflush_r+0x1c>
 8018d30:	690f      	ldr	r7, [r1, #16]
 8018d32:	2f00      	cmp	r7, #0
 8018d34:	d0a9      	beq.n	8018c8a <__sflush_r+0x1a>
 8018d36:	0793      	lsls	r3, r2, #30
 8018d38:	680e      	ldr	r6, [r1, #0]
 8018d3a:	bf08      	it	eq
 8018d3c:	694b      	ldreq	r3, [r1, #20]
 8018d3e:	600f      	str	r7, [r1, #0]
 8018d40:	bf18      	it	ne
 8018d42:	2300      	movne	r3, #0
 8018d44:	eba6 0807 	sub.w	r8, r6, r7
 8018d48:	608b      	str	r3, [r1, #8]
 8018d4a:	f1b8 0f00 	cmp.w	r8, #0
 8018d4e:	dd9c      	ble.n	8018c8a <__sflush_r+0x1a>
 8018d50:	6a21      	ldr	r1, [r4, #32]
 8018d52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018d54:	4643      	mov	r3, r8
 8018d56:	463a      	mov	r2, r7
 8018d58:	4628      	mov	r0, r5
 8018d5a:	47b0      	blx	r6
 8018d5c:	2800      	cmp	r0, #0
 8018d5e:	dc06      	bgt.n	8018d6e <__sflush_r+0xfe>
 8018d60:	89a3      	ldrh	r3, [r4, #12]
 8018d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d66:	81a3      	strh	r3, [r4, #12]
 8018d68:	f04f 30ff 	mov.w	r0, #4294967295
 8018d6c:	e78e      	b.n	8018c8c <__sflush_r+0x1c>
 8018d6e:	4407      	add	r7, r0
 8018d70:	eba8 0800 	sub.w	r8, r8, r0
 8018d74:	e7e9      	b.n	8018d4a <__sflush_r+0xda>
 8018d76:	bf00      	nop
 8018d78:	20400001 	.word	0x20400001

08018d7c <_fflush_r>:
 8018d7c:	b538      	push	{r3, r4, r5, lr}
 8018d7e:	690b      	ldr	r3, [r1, #16]
 8018d80:	4605      	mov	r5, r0
 8018d82:	460c      	mov	r4, r1
 8018d84:	b913      	cbnz	r3, 8018d8c <_fflush_r+0x10>
 8018d86:	2500      	movs	r5, #0
 8018d88:	4628      	mov	r0, r5
 8018d8a:	bd38      	pop	{r3, r4, r5, pc}
 8018d8c:	b118      	cbz	r0, 8018d96 <_fflush_r+0x1a>
 8018d8e:	6983      	ldr	r3, [r0, #24]
 8018d90:	b90b      	cbnz	r3, 8018d96 <_fflush_r+0x1a>
 8018d92:	f7fe fa65 	bl	8017260 <__sinit>
 8018d96:	4b14      	ldr	r3, [pc, #80]	; (8018de8 <_fflush_r+0x6c>)
 8018d98:	429c      	cmp	r4, r3
 8018d9a:	d11b      	bne.n	8018dd4 <_fflush_r+0x58>
 8018d9c:	686c      	ldr	r4, [r5, #4]
 8018d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d0ef      	beq.n	8018d86 <_fflush_r+0xa>
 8018da6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018da8:	07d0      	lsls	r0, r2, #31
 8018daa:	d404      	bmi.n	8018db6 <_fflush_r+0x3a>
 8018dac:	0599      	lsls	r1, r3, #22
 8018dae:	d402      	bmi.n	8018db6 <_fflush_r+0x3a>
 8018db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018db2:	f7fe fe78 	bl	8017aa6 <__retarget_lock_acquire_recursive>
 8018db6:	4628      	mov	r0, r5
 8018db8:	4621      	mov	r1, r4
 8018dba:	f7ff ff59 	bl	8018c70 <__sflush_r>
 8018dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018dc0:	07da      	lsls	r2, r3, #31
 8018dc2:	4605      	mov	r5, r0
 8018dc4:	d4e0      	bmi.n	8018d88 <_fflush_r+0xc>
 8018dc6:	89a3      	ldrh	r3, [r4, #12]
 8018dc8:	059b      	lsls	r3, r3, #22
 8018dca:	d4dd      	bmi.n	8018d88 <_fflush_r+0xc>
 8018dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018dce:	f7fe fe6b 	bl	8017aa8 <__retarget_lock_release_recursive>
 8018dd2:	e7d9      	b.n	8018d88 <_fflush_r+0xc>
 8018dd4:	4b05      	ldr	r3, [pc, #20]	; (8018dec <_fflush_r+0x70>)
 8018dd6:	429c      	cmp	r4, r3
 8018dd8:	d101      	bne.n	8018dde <_fflush_r+0x62>
 8018dda:	68ac      	ldr	r4, [r5, #8]
 8018ddc:	e7df      	b.n	8018d9e <_fflush_r+0x22>
 8018dde:	4b04      	ldr	r3, [pc, #16]	; (8018df0 <_fflush_r+0x74>)
 8018de0:	429c      	cmp	r4, r3
 8018de2:	bf08      	it	eq
 8018de4:	68ec      	ldreq	r4, [r5, #12]
 8018de6:	e7da      	b.n	8018d9e <_fflush_r+0x22>
 8018de8:	0801cacc 	.word	0x0801cacc
 8018dec:	0801caec 	.word	0x0801caec
 8018df0:	0801caac 	.word	0x0801caac

08018df4 <_lseek_r>:
 8018df4:	b538      	push	{r3, r4, r5, lr}
 8018df6:	4d07      	ldr	r5, [pc, #28]	; (8018e14 <_lseek_r+0x20>)
 8018df8:	4604      	mov	r4, r0
 8018dfa:	4608      	mov	r0, r1
 8018dfc:	4611      	mov	r1, r2
 8018dfe:	2200      	movs	r2, #0
 8018e00:	602a      	str	r2, [r5, #0]
 8018e02:	461a      	mov	r2, r3
 8018e04:	f7e8 f9d7 	bl	80011b6 <_lseek>
 8018e08:	1c43      	adds	r3, r0, #1
 8018e0a:	d102      	bne.n	8018e12 <_lseek_r+0x1e>
 8018e0c:	682b      	ldr	r3, [r5, #0]
 8018e0e:	b103      	cbz	r3, 8018e12 <_lseek_r+0x1e>
 8018e10:	6023      	str	r3, [r4, #0]
 8018e12:	bd38      	pop	{r3, r4, r5, pc}
 8018e14:	2000cfe4 	.word	0x2000cfe4

08018e18 <__swhatbuf_r>:
 8018e18:	b570      	push	{r4, r5, r6, lr}
 8018e1a:	460e      	mov	r6, r1
 8018e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e20:	2900      	cmp	r1, #0
 8018e22:	b096      	sub	sp, #88	; 0x58
 8018e24:	4614      	mov	r4, r2
 8018e26:	461d      	mov	r5, r3
 8018e28:	da07      	bge.n	8018e3a <__swhatbuf_r+0x22>
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	602b      	str	r3, [r5, #0]
 8018e2e:	89b3      	ldrh	r3, [r6, #12]
 8018e30:	061a      	lsls	r2, r3, #24
 8018e32:	d410      	bmi.n	8018e56 <__swhatbuf_r+0x3e>
 8018e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018e38:	e00e      	b.n	8018e58 <__swhatbuf_r+0x40>
 8018e3a:	466a      	mov	r2, sp
 8018e3c:	f000 f8cc 	bl	8018fd8 <_fstat_r>
 8018e40:	2800      	cmp	r0, #0
 8018e42:	dbf2      	blt.n	8018e2a <__swhatbuf_r+0x12>
 8018e44:	9a01      	ldr	r2, [sp, #4]
 8018e46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018e4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018e4e:	425a      	negs	r2, r3
 8018e50:	415a      	adcs	r2, r3
 8018e52:	602a      	str	r2, [r5, #0]
 8018e54:	e7ee      	b.n	8018e34 <__swhatbuf_r+0x1c>
 8018e56:	2340      	movs	r3, #64	; 0x40
 8018e58:	2000      	movs	r0, #0
 8018e5a:	6023      	str	r3, [r4, #0]
 8018e5c:	b016      	add	sp, #88	; 0x58
 8018e5e:	bd70      	pop	{r4, r5, r6, pc}

08018e60 <__smakebuf_r>:
 8018e60:	898b      	ldrh	r3, [r1, #12]
 8018e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018e64:	079d      	lsls	r5, r3, #30
 8018e66:	4606      	mov	r6, r0
 8018e68:	460c      	mov	r4, r1
 8018e6a:	d507      	bpl.n	8018e7c <__smakebuf_r+0x1c>
 8018e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018e70:	6023      	str	r3, [r4, #0]
 8018e72:	6123      	str	r3, [r4, #16]
 8018e74:	2301      	movs	r3, #1
 8018e76:	6163      	str	r3, [r4, #20]
 8018e78:	b002      	add	sp, #8
 8018e7a:	bd70      	pop	{r4, r5, r6, pc}
 8018e7c:	ab01      	add	r3, sp, #4
 8018e7e:	466a      	mov	r2, sp
 8018e80:	f7ff ffca 	bl	8018e18 <__swhatbuf_r>
 8018e84:	9900      	ldr	r1, [sp, #0]
 8018e86:	4605      	mov	r5, r0
 8018e88:	4630      	mov	r0, r6
 8018e8a:	f7fb ff0d 	bl	8014ca8 <_malloc_r>
 8018e8e:	b948      	cbnz	r0, 8018ea4 <__smakebuf_r+0x44>
 8018e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e94:	059a      	lsls	r2, r3, #22
 8018e96:	d4ef      	bmi.n	8018e78 <__smakebuf_r+0x18>
 8018e98:	f023 0303 	bic.w	r3, r3, #3
 8018e9c:	f043 0302 	orr.w	r3, r3, #2
 8018ea0:	81a3      	strh	r3, [r4, #12]
 8018ea2:	e7e3      	b.n	8018e6c <__smakebuf_r+0xc>
 8018ea4:	4b0d      	ldr	r3, [pc, #52]	; (8018edc <__smakebuf_r+0x7c>)
 8018ea6:	62b3      	str	r3, [r6, #40]	; 0x28
 8018ea8:	89a3      	ldrh	r3, [r4, #12]
 8018eaa:	6020      	str	r0, [r4, #0]
 8018eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018eb0:	81a3      	strh	r3, [r4, #12]
 8018eb2:	9b00      	ldr	r3, [sp, #0]
 8018eb4:	6163      	str	r3, [r4, #20]
 8018eb6:	9b01      	ldr	r3, [sp, #4]
 8018eb8:	6120      	str	r0, [r4, #16]
 8018eba:	b15b      	cbz	r3, 8018ed4 <__smakebuf_r+0x74>
 8018ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018ec0:	4630      	mov	r0, r6
 8018ec2:	f000 f89b 	bl	8018ffc <_isatty_r>
 8018ec6:	b128      	cbz	r0, 8018ed4 <__smakebuf_r+0x74>
 8018ec8:	89a3      	ldrh	r3, [r4, #12]
 8018eca:	f023 0303 	bic.w	r3, r3, #3
 8018ece:	f043 0301 	orr.w	r3, r3, #1
 8018ed2:	81a3      	strh	r3, [r4, #12]
 8018ed4:	89a0      	ldrh	r0, [r4, #12]
 8018ed6:	4305      	orrs	r5, r0
 8018ed8:	81a5      	strh	r5, [r4, #12]
 8018eda:	e7cd      	b.n	8018e78 <__smakebuf_r+0x18>
 8018edc:	080171f9 	.word	0x080171f9

08018ee0 <_realloc_r>:
 8018ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ee2:	4607      	mov	r7, r0
 8018ee4:	4614      	mov	r4, r2
 8018ee6:	460e      	mov	r6, r1
 8018ee8:	b921      	cbnz	r1, 8018ef4 <_realloc_r+0x14>
 8018eea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018eee:	4611      	mov	r1, r2
 8018ef0:	f7fb beda 	b.w	8014ca8 <_malloc_r>
 8018ef4:	b922      	cbnz	r2, 8018f00 <_realloc_r+0x20>
 8018ef6:	f7fb fe87 	bl	8014c08 <_free_r>
 8018efa:	4625      	mov	r5, r4
 8018efc:	4628      	mov	r0, r5
 8018efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f00:	f000 f88c 	bl	801901c <_malloc_usable_size_r>
 8018f04:	42a0      	cmp	r0, r4
 8018f06:	d20f      	bcs.n	8018f28 <_realloc_r+0x48>
 8018f08:	4621      	mov	r1, r4
 8018f0a:	4638      	mov	r0, r7
 8018f0c:	f7fb fecc 	bl	8014ca8 <_malloc_r>
 8018f10:	4605      	mov	r5, r0
 8018f12:	2800      	cmp	r0, #0
 8018f14:	d0f2      	beq.n	8018efc <_realloc_r+0x1c>
 8018f16:	4631      	mov	r1, r6
 8018f18:	4622      	mov	r2, r4
 8018f1a:	f7fb fe45 	bl	8014ba8 <memcpy>
 8018f1e:	4631      	mov	r1, r6
 8018f20:	4638      	mov	r0, r7
 8018f22:	f7fb fe71 	bl	8014c08 <_free_r>
 8018f26:	e7e9      	b.n	8018efc <_realloc_r+0x1c>
 8018f28:	4635      	mov	r5, r6
 8018f2a:	e7e7      	b.n	8018efc <_realloc_r+0x1c>

08018f2c <_read_r>:
 8018f2c:	b538      	push	{r3, r4, r5, lr}
 8018f2e:	4d07      	ldr	r5, [pc, #28]	; (8018f4c <_read_r+0x20>)
 8018f30:	4604      	mov	r4, r0
 8018f32:	4608      	mov	r0, r1
 8018f34:	4611      	mov	r1, r2
 8018f36:	2200      	movs	r2, #0
 8018f38:	602a      	str	r2, [r5, #0]
 8018f3a:	461a      	mov	r2, r3
 8018f3c:	f7e8 f948 	bl	80011d0 <_read>
 8018f40:	1c43      	adds	r3, r0, #1
 8018f42:	d102      	bne.n	8018f4a <_read_r+0x1e>
 8018f44:	682b      	ldr	r3, [r5, #0]
 8018f46:	b103      	cbz	r3, 8018f4a <_read_r+0x1e>
 8018f48:	6023      	str	r3, [r4, #0]
 8018f4a:	bd38      	pop	{r3, r4, r5, pc}
 8018f4c:	2000cfe4 	.word	0x2000cfe4

08018f50 <_raise_r>:
 8018f50:	291f      	cmp	r1, #31
 8018f52:	b538      	push	{r3, r4, r5, lr}
 8018f54:	4604      	mov	r4, r0
 8018f56:	460d      	mov	r5, r1
 8018f58:	d904      	bls.n	8018f64 <_raise_r+0x14>
 8018f5a:	2316      	movs	r3, #22
 8018f5c:	6003      	str	r3, [r0, #0]
 8018f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8018f62:	bd38      	pop	{r3, r4, r5, pc}
 8018f64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018f66:	b112      	cbz	r2, 8018f6e <_raise_r+0x1e>
 8018f68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018f6c:	b94b      	cbnz	r3, 8018f82 <_raise_r+0x32>
 8018f6e:	4620      	mov	r0, r4
 8018f70:	f000 f830 	bl	8018fd4 <_getpid_r>
 8018f74:	462a      	mov	r2, r5
 8018f76:	4601      	mov	r1, r0
 8018f78:	4620      	mov	r0, r4
 8018f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f7e:	f000 b817 	b.w	8018fb0 <_kill_r>
 8018f82:	2b01      	cmp	r3, #1
 8018f84:	d00a      	beq.n	8018f9c <_raise_r+0x4c>
 8018f86:	1c59      	adds	r1, r3, #1
 8018f88:	d103      	bne.n	8018f92 <_raise_r+0x42>
 8018f8a:	2316      	movs	r3, #22
 8018f8c:	6003      	str	r3, [r0, #0]
 8018f8e:	2001      	movs	r0, #1
 8018f90:	e7e7      	b.n	8018f62 <_raise_r+0x12>
 8018f92:	2400      	movs	r4, #0
 8018f94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018f98:	4628      	mov	r0, r5
 8018f9a:	4798      	blx	r3
 8018f9c:	2000      	movs	r0, #0
 8018f9e:	e7e0      	b.n	8018f62 <_raise_r+0x12>

08018fa0 <raise>:
 8018fa0:	4b02      	ldr	r3, [pc, #8]	; (8018fac <raise+0xc>)
 8018fa2:	4601      	mov	r1, r0
 8018fa4:	6818      	ldr	r0, [r3, #0]
 8018fa6:	f7ff bfd3 	b.w	8018f50 <_raise_r>
 8018faa:	bf00      	nop
 8018fac:	2000003c 	.word	0x2000003c

08018fb0 <_kill_r>:
 8018fb0:	b538      	push	{r3, r4, r5, lr}
 8018fb2:	4d07      	ldr	r5, [pc, #28]	; (8018fd0 <_kill_r+0x20>)
 8018fb4:	2300      	movs	r3, #0
 8018fb6:	4604      	mov	r4, r0
 8018fb8:	4608      	mov	r0, r1
 8018fba:	4611      	mov	r1, r2
 8018fbc:	602b      	str	r3, [r5, #0]
 8018fbe:	f7e8 f89d 	bl	80010fc <_kill>
 8018fc2:	1c43      	adds	r3, r0, #1
 8018fc4:	d102      	bne.n	8018fcc <_kill_r+0x1c>
 8018fc6:	682b      	ldr	r3, [r5, #0]
 8018fc8:	b103      	cbz	r3, 8018fcc <_kill_r+0x1c>
 8018fca:	6023      	str	r3, [r4, #0]
 8018fcc:	bd38      	pop	{r3, r4, r5, pc}
 8018fce:	bf00      	nop
 8018fd0:	2000cfe4 	.word	0x2000cfe4

08018fd4 <_getpid_r>:
 8018fd4:	f7e8 b88a 	b.w	80010ec <_getpid>

08018fd8 <_fstat_r>:
 8018fd8:	b538      	push	{r3, r4, r5, lr}
 8018fda:	4d07      	ldr	r5, [pc, #28]	; (8018ff8 <_fstat_r+0x20>)
 8018fdc:	2300      	movs	r3, #0
 8018fde:	4604      	mov	r4, r0
 8018fe0:	4608      	mov	r0, r1
 8018fe2:	4611      	mov	r1, r2
 8018fe4:	602b      	str	r3, [r5, #0]
 8018fe6:	f7e8 f8cb 	bl	8001180 <_fstat>
 8018fea:	1c43      	adds	r3, r0, #1
 8018fec:	d102      	bne.n	8018ff4 <_fstat_r+0x1c>
 8018fee:	682b      	ldr	r3, [r5, #0]
 8018ff0:	b103      	cbz	r3, 8018ff4 <_fstat_r+0x1c>
 8018ff2:	6023      	str	r3, [r4, #0]
 8018ff4:	bd38      	pop	{r3, r4, r5, pc}
 8018ff6:	bf00      	nop
 8018ff8:	2000cfe4 	.word	0x2000cfe4

08018ffc <_isatty_r>:
 8018ffc:	b538      	push	{r3, r4, r5, lr}
 8018ffe:	4d06      	ldr	r5, [pc, #24]	; (8019018 <_isatty_r+0x1c>)
 8019000:	2300      	movs	r3, #0
 8019002:	4604      	mov	r4, r0
 8019004:	4608      	mov	r0, r1
 8019006:	602b      	str	r3, [r5, #0]
 8019008:	f7e8 f8ca 	bl	80011a0 <_isatty>
 801900c:	1c43      	adds	r3, r0, #1
 801900e:	d102      	bne.n	8019016 <_isatty_r+0x1a>
 8019010:	682b      	ldr	r3, [r5, #0]
 8019012:	b103      	cbz	r3, 8019016 <_isatty_r+0x1a>
 8019014:	6023      	str	r3, [r4, #0]
 8019016:	bd38      	pop	{r3, r4, r5, pc}
 8019018:	2000cfe4 	.word	0x2000cfe4

0801901c <_malloc_usable_size_r>:
 801901c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019020:	1f18      	subs	r0, r3, #4
 8019022:	2b00      	cmp	r3, #0
 8019024:	bfbc      	itt	lt
 8019026:	580b      	ldrlt	r3, [r1, r0]
 8019028:	18c0      	addlt	r0, r0, r3
 801902a:	4770      	bx	lr

0801902c <_init>:
 801902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801902e:	bf00      	nop
 8019030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019032:	bc08      	pop	{r3}
 8019034:	469e      	mov	lr, r3
 8019036:	4770      	bx	lr

08019038 <_fini>:
 8019038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801903a:	bf00      	nop
 801903c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801903e:	bc08      	pop	{r3}
 8019040:	469e      	mov	lr, r3
 8019042:	4770      	bx	lr
