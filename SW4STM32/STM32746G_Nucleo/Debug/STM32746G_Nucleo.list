
STM32746G_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018870  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037e0  08018a40  08018a40  00028a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c220  0801c220  0002c220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c228  0801c228  0002c228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c22c  0801c22c  0002c22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  20000000  0801c230  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000cddc  2000020c  0801c43c  0003020c  2**2
                  ALLOC
  8 ._user_heap_stack 00000660  2000cfe8  0801c43c  0003cfe8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 10 .TxDescripSection 00000080  2004c080  2004c080  0003c080  2**2
                  ALLOC
 11 .debug_line   000239c6  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0003a230  00000000  00000000  00053c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006f55  00000000  00000000  0008de32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ef0  00000000  00000000  00094d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00119470  00000000  00000000  00096c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001d48  00000000  00000000  001b00e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00034712  00000000  00000000  001b1e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001e6542  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008f80  00000000  00000000  001e65c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .RxDecripSection 00000080  2004c000  2004c000  0003c000  2**2
                  ALLOC
 21 .RxarraySection 000017d0  2004c100  2004c100  0003c100  2**2
                  ALLOC
 22 .TxarraySection 000017d0  2004d8d0  2004d8d0  0003d8d0  2**2
                  ALLOC

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018a28 	.word	0x08018a28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	08018a28 	.word	0x08018a28

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001000 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fce:	e003      	b.n	8000fd8 <LoopCopyDataInit>

08000fd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fd6:	3104      	adds	r1, #4

08000fd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fe0:	d3f6      	bcc.n	8000fd0 <CopyDataInit>
  ldr  r2, =_sbss
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fe4:	e002      	b.n	8000fec <LoopFillZerobss>

08000fe6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fe6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fe8:	f842 3b04 	str.w	r3, [r2], #4

08000fec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ff0:	d3f9      	bcc.n	8000fe6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff2:	f001 ff0b 	bl	8002e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f013 fce7 	bl	80149c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffa:	f000 fca3 	bl	8001944 <main>
  bx  lr    
 8000ffe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001000:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001004:	0801c230 	.word	0x0801c230
  ldr  r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800100c:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 8001010:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 8001014:	2000cfe8 	.word	0x2000cfe8

08001018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC_IRQHandler>
	...

0800101c <_sbrk>:




caddr_t _sbrk(int incr)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <_sbrk+0x60>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <_sbrk+0x16>
		heap_end = &end;
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <_sbrk+0x60>)
 800102e:	4a14      	ldr	r2, [pc, #80]	; (8001080 <_sbrk+0x64>)
 8001030:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <_sbrk+0x60>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	60fb      	str	r3, [r7, #12]

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <_sbrk+0x68>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	60bb      	str	r3, [r7, #8]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001046:	60bb      	str	r3, [r7, #8]

	if (heap_end + incr > min_stack_ptr)
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <_sbrk+0x60>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4413      	add	r3, r2
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	429a      	cmp	r2, r3
 8001054:	d207      	bcs.n	8001066 <_sbrk+0x4a>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001056:	f013 fcb1 	bl	80149bc <__errno>
 800105a:	4602      	mov	r2, r0
 800105c:	230c      	movs	r3, #12
 800105e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	e006      	b.n	8001074 <_sbrk+0x58>
	}

	heap_end += incr;
 8001066:	4b05      	ldr	r3, [pc, #20]	; (800107c <_sbrk+0x60>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	4a03      	ldr	r2, [pc, #12]	; (800107c <_sbrk+0x60>)
 8001070:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001072:	68fb      	ldr	r3, [r7, #12]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000228 	.word	0x20000228
 8001080:	2000cfe8 	.word	0x2000cfe8
 8001084:	e000ed08 	.word	0xe000ed08

08001088 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e009      	b.n	80010ae <_write+0x26>
		{
		   __io_putchar( *ptr++ );
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	60ba      	str	r2, [r7, #8]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dbf1      	blt.n	800109a <_write+0x12>
		}
	return len;
 80010b6:	687b      	ldr	r3, [r7, #4]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <_close>:

int _close(int file)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	return -1;
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_fstat>:

int _fstat(int file, struct stat *st)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e8:	605a      	str	r2, [r3, #4]
	return 0;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_isatty>:

int _isatty(int file)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	return 1;
 8001100:	2301      	movs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800110e:	b480      	push	{r7}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
	return 0;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <_read>:

int _read(int file, char *ptr, int len)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e00a      	b.n	8001150 <_read+0x28>
	{
	  *ptr++ = __io_getchar();
 800113a:	f3af 8000 	nop.w
 800113e:	4601      	mov	r1, r0
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	60ba      	str	r2, [r7, #8]
 8001146:	b2ca      	uxtb	r2, r1
 8001148:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	429a      	cmp	r2, r3
 8001156:	dbf0      	blt.n	800113a <_read+0x12>
	}

   return len;
 8001158:	687b      	ldr	r3, [r7, #4]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <User_notification>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
void User_notification(struct netif *netif) 
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <User_notification+0x20>
  {
#ifdef USE_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <User_notification+0x34>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
    DHCP_state = DHCP_LINK_DOWN;
#endif  /* USE_DHCP */
   /* Turn On LED 3 to indicate ETH and LwIP init error */
   BSP_LED_On(LED3);
  } 
}
 8001182:	e005      	b.n	8001190 <User_notification+0x2c>
    DHCP_state = DHCP_LINK_DOWN;
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <User_notification+0x34>)
 8001186:	2205      	movs	r2, #5
 8001188:	701a      	strb	r2, [r3, #0]
   BSP_LED_On(LED3);
 800118a:	2002      	movs	r0, #2
 800118c:	f001 fe0a 	bl	8002da4 <BSP_LED_On>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000022c 	.word	0x2000022c

0800119c <DHCP_thread>:
* @brief  DHCP Process
* @param  argument: network interface
* @retval None
*/
void DHCP_thread(void const * argument)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	61fb      	str	r3, [r7, #28]
  ip_addr_t gw;
  struct dhcp *dhcp;
  
  for (;;)
  {
    switch (DHCP_state)
 80011a8:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <DHCP_thread+0xc8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d014      	beq.n	80011dc <DHCP_thread+0x40>
 80011b2:	2b05      	cmp	r3, #5
 80011b4:	d04a      	beq.n	800124c <DHCP_thread+0xb0>
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d000      	beq.n	80011bc <DHCP_thread+0x20>
      /* Stop DHCP */
      dhcp_stop(netif);
      DHCP_state = DHCP_OFF; 
    }
    break;
    default: break;
 80011ba:	e04e      	b.n	800125a <DHCP_thread+0xbe>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);       
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
        dhcp_start(netif);
 80011ce:	69f8      	ldr	r0, [r7, #28]
 80011d0:	f007 fc88 	bl	8008ae4 <dhcp_start>
        DHCP_state = DHCP_WAIT_ADDRESS;
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <DHCP_thread+0xc8>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	701a      	strb	r2, [r3, #0]
      break;
 80011da:	e03e      	b.n	800125a <DHCP_thread+0xbe>
        if (dhcp_supplied_address(netif)) 
 80011dc:	69f8      	ldr	r0, [r7, #28]
 80011de:	f008 ff3f 	bl	800a060 <dhcp_supplied_address>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d009      	beq.n	80011fc <DHCP_thread+0x60>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;	
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <DHCP_thread+0xc8>)
 80011ea:	2203      	movs	r2, #3
 80011ec:	701a      	strb	r2, [r3, #0]
          BSP_LED_Off(LED3);
 80011ee:	2002      	movs	r0, #2
 80011f0:	f001 fdf2 	bl	8002dd8 <BSP_LED_Off>
          BSP_LED_On(LED1); 
 80011f4:	2000      	movs	r0, #0
 80011f6:	f001 fdd5 	bl	8002da4 <BSP_LED_On>
      break;
 80011fa:	e02e      	b.n	800125a <DHCP_thread+0xbe>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	61bb      	str	r3, [r7, #24]
          if (dhcp->tries > MAX_DHCP_TRIES)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	799b      	ldrb	r3, [r3, #6]
 8001206:	2b04      	cmp	r3, #4
 8001208:	d91c      	bls.n	8001244 <DHCP_thread+0xa8>
            DHCP_state = DHCP_TIMEOUT;
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <DHCP_thread+0xc8>)
 800120c:	2204      	movs	r2, #4
 800120e:	701a      	strb	r2, [r3, #0]
            dhcp_stop(netif);
 8001210:	69f8      	ldr	r0, [r7, #28]
 8001212:	f008 f98b 	bl	800952c <dhcp_stop>
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <DHCP_thread+0xcc>)
 8001218:	617b      	str	r3, [r7, #20]
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 800121a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800121e:	613b      	str	r3, [r7, #16]
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <DHCP_thread+0xd0>)
 8001222:	60fb      	str	r3, [r7, #12]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	f107 0210 	add.w	r2, r7, #16
 800122c:	f107 0114 	add.w	r1, r7, #20
 8001230:	69f8      	ldr	r0, [r7, #28]
 8001232:	f00c f89f 	bl	800d374 <netif_set_addr>
            BSP_LED_Off(LED3);
 8001236:	2002      	movs	r0, #2
 8001238:	f001 fdce 	bl	8002dd8 <BSP_LED_Off>
            BSP_LED_On(LED1);
 800123c:	2000      	movs	r0, #0
 800123e:	f001 fdb1 	bl	8002da4 <BSP_LED_On>
      break;
 8001242:	e00a      	b.n	800125a <DHCP_thread+0xbe>
            BSP_LED_On(LED3);
 8001244:	2002      	movs	r0, #2
 8001246:	f001 fdad 	bl	8002da4 <BSP_LED_On>
      break;
 800124a:	e006      	b.n	800125a <DHCP_thread+0xbe>
      dhcp_stop(netif);
 800124c:	69f8      	ldr	r0, [r7, #28]
 800124e:	f008 f96d 	bl	800952c <dhcp_stop>
      DHCP_state = DHCP_OFF; 
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <DHCP_thread+0xc8>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
    break;
 8001258:	bf00      	nop
    }
    
    /* wait 250 ms */
    osDelay(250);
 800125a:	20fa      	movs	r0, #250	; 0xfa
 800125c:	f006 f93e 	bl	80074dc <osDelay>
    switch (DHCP_state)
 8001260:	e7a2      	b.n	80011a8 <DHCP_thread+0xc>
 8001262:	bf00      	nop
 8001264:	2000022c 	.word	0x2000022c
 8001268:	6502a9c0 	.word	0x6502a9c0
 800126c:	0102a9c0 	.word	0x0102a9c0

08001270 <HAL_ETH_MspInit>:
  * @brief  Initializes the ETH MSP.
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	; 0x38
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b44      	ldr	r3, [pc, #272]	; (800138c <HAL_ETH_MspInit+0x11c>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a43      	ldr	r2, [pc, #268]	; (800138c <HAL_ETH_MspInit+0x11c>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b41      	ldr	r3, [pc, #260]	; (800138c <HAL_ETH_MspInit+0x11c>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	623b      	str	r3, [r7, #32]
 800128e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	4b3e      	ldr	r3, [pc, #248]	; (800138c <HAL_ETH_MspInit+0x11c>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4a3d      	ldr	r2, [pc, #244]	; (800138c <HAL_ETH_MspInit+0x11c>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
 800129c:	4b3b      	ldr	r3, [pc, #236]	; (800138c <HAL_ETH_MspInit+0x11c>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a8:	4b38      	ldr	r3, [pc, #224]	; (800138c <HAL_ETH_MspInit+0x11c>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	4a37      	ldr	r2, [pc, #220]	; (800138c <HAL_ETH_MspInit+0x11c>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6313      	str	r3, [r2, #48]	; 0x30
 80012b4:	4b35      	ldr	r3, [pc, #212]	; (800138c <HAL_ETH_MspInit+0x11c>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c0:	4b32      	ldr	r3, [pc, #200]	; (800138c <HAL_ETH_MspInit+0x11c>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	4a31      	ldr	r2, [pc, #196]	; (800138c <HAL_ETH_MspInit+0x11c>)
 80012c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ca:	6313      	str	r3, [r2, #48]	; 0x30
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <HAL_ETH_MspInit+0x11c>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697b      	ldr	r3, [r7, #20]
        RMII_MII_TXD0 ---------------------> PG13
        RMII_MII_TXD1 ---------------------> PB13
  */

  /* Configure PA1, PA2 and PA7 */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 80012e4:	230b      	movs	r3, #11
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 80012e8:	2386      	movs	r3, #134	; 0x86
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	4827      	ldr	r0, [pc, #156]	; (8001390 <HAL_ETH_MspInit+0x120>)
 80012f4:	f002 ff6c 	bl	80041d0 <HAL_GPIO_Init>
  
  /* Configure PB13 */
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 80012f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80012fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001302:	4619      	mov	r1, r3
 8001304:	4823      	ldr	r0, [pc, #140]	; (8001394 <HAL_ETH_MspInit+0x124>)
 8001306:	f002 ff63 	bl	80041d0 <HAL_GPIO_Init>
  
  /* Configure PC1, PC4 and PC5 */
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800130a:	2332      	movs	r3, #50	; 0x32
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800130e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001312:	4619      	mov	r1, r3
 8001314:	4820      	ldr	r0, [pc, #128]	; (8001398 <HAL_ETH_MspInit+0x128>)
 8001316:	f002 ff5b 	bl	80041d0 <HAL_GPIO_Init>

  /* Configure PG2, PG11, PG13 and PG14 */
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 800131a:	f642 0304 	movw	r3, #10244	; 0x2804
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	4619      	mov	r1, r3
 8001326:	481d      	ldr	r0, [pc, #116]	; (800139c <HAL_ETH_MspInit+0x12c>)
 8001328:	f002 ff52 	bl	80041d0 <HAL_GPIO_Init>
  
  /* Enable the Ethernet global Interrupt */
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2107      	movs	r1, #7
 8001330:	203d      	movs	r0, #61	; 0x3d
 8001332:	f001 feb9 	bl	80030a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001336:	203d      	movs	r0, #61	; 0x3d
 8001338:	f001 fed2 	bl	80030e0 <HAL_NVIC_EnableIRQ>
  
  /* Enable ETHERNET clock  */
  __HAL_RCC_ETH_CLK_ENABLE();
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_ETH_MspInit+0x11c>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	4a12      	ldr	r2, [pc, #72]	; (800138c <HAL_ETH_MspInit+0x11c>)
 8001342:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001346:	6313      	str	r3, [r2, #48]	; 0x30
 8001348:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_ETH_MspInit+0x11c>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_ETH_MspInit+0x11c>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a0c      	ldr	r2, [pc, #48]	; (800138c <HAL_ETH_MspInit+0x11c>)
 800135a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800135e:	6313      	str	r3, [r2, #48]	; 0x30
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_ETH_MspInit+0x11c>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <HAL_ETH_MspInit+0x11c>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_ETH_MspInit+0x11c>)
 8001372:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001376:	6313      	str	r3, [r2, #48]	; 0x30
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <HAL_ETH_MspInit+0x11c>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
}
 8001384:	bf00      	nop
 8001386:	3738      	adds	r7, #56	; 0x38
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	40020000 	.word	0x40020000
 8001394:	40020400 	.word	0x40020400
 8001398:	40020800 	.word	0x40020800
 800139c:	40021800 	.word	0x40021800

080013a0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <HAL_ETH_RxCpltCallback+0x1c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f006 f9ab 	bl	8007708 <osSemaphoreRelease>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000230 	.word	0x20000230

080013c0 <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static void low_level_init(struct netif *netif)
{
 80013c0:	b5b0      	push	{r4, r5, r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 80013c8:	2302      	movs	r3, #2
 80013ca:	f887 3020 	strb.w	r3, [r7, #32]
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80013d4:	2300      	movs	r3, #0
 80013d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80013da:	2300      	movs	r3, #0
 80013dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  
  EthHandle.Instance = ETH;  
 80013ec:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <low_level_init+0x134>)
 80013ee:	4a42      	ldr	r2, [pc, #264]	; (80014f8 <low_level_init+0x138>)
 80013f0:	601a      	str	r2, [r3, #0]
  EthHandle.Init.MACAddr = macaddress;
 80013f2:	4a40      	ldr	r2, [pc, #256]	; (80014f4 <low_level_init+0x134>)
 80013f4:	f107 0320 	add.w	r3, r7, #32
 80013f8:	6153      	str	r3, [r2, #20]
  EthHandle.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80013fa:	4b3e      	ldr	r3, [pc, #248]	; (80014f4 <low_level_init+0x134>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	605a      	str	r2, [r3, #4]
  EthHandle.Init.Speed = ETH_SPEED_100M;
 8001400:	4b3c      	ldr	r3, [pc, #240]	; (80014f4 <low_level_init+0x134>)
 8001402:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001406:	609a      	str	r2, [r3, #8]
  EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8001408:	4b3a      	ldr	r3, [pc, #232]	; (80014f4 <low_level_init+0x134>)
 800140a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800140e:	60da      	str	r2, [r3, #12]
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8001410:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <low_level_init+0x134>)
 8001412:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001416:	621a      	str	r2, [r3, #32]
  EthHandle.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8001418:	4b36      	ldr	r3, [pc, #216]	; (80014f4 <low_level_init+0x134>)
 800141a:	2201      	movs	r2, #1
 800141c:	619a      	str	r2, [r3, #24]
  EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800141e:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <low_level_init+0x134>)
 8001420:	2200      	movs	r2, #0
 8001422:	61da      	str	r2, [r3, #28]
  EthHandle.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8001424:	4b33      	ldr	r3, [pc, #204]	; (80014f4 <low_level_init+0x134>)
 8001426:	2200      	movs	r2, #0
 8001428:	821a      	strh	r2, [r3, #16]
  
  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  if (HAL_ETH_Init(&EthHandle) == HAL_OK)
 800142a:	4832      	ldr	r0, [pc, #200]	; (80014f4 <low_level_init+0x134>)
 800142c:	f001 fede 	bl	80031ec <HAL_ETH_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d108      	bne.n	8001448 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	b2da      	uxtb	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8001448:	2304      	movs	r3, #4
 800144a:	4a2c      	ldr	r2, [pc, #176]	; (80014fc <low_level_init+0x13c>)
 800144c:	492c      	ldr	r1, [pc, #176]	; (8001500 <low_level_init+0x140>)
 800144e:	4829      	ldr	r0, [pc, #164]	; (80014f4 <low_level_init+0x134>)
 8001450:	f002 f868 	bl	8003524 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&EthHandle, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8001454:	2304      	movs	r3, #4
 8001456:	4a2b      	ldr	r2, [pc, #172]	; (8001504 <low_level_init+0x144>)
 8001458:	492b      	ldr	r1, [pc, #172]	; (8001508 <low_level_init+0x148>)
 800145a:	4826      	ldr	r0, [pc, #152]	; (80014f4 <low_level_init+0x134>)
 800145c:	f002 f8cb 	bl	80035f6 <HAL_ETH_DMARxDescListInit>
  
  /* set netif MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2206      	movs	r2, #6
 8001464:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set netif MAC hardware address */
  netif->hwaddr[0] =  MAC_ADDR0;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2202      	movs	r2, #2
 800146c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  MAC_ADDR1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  MAC_ADDR2;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  MAC_ADDR3;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  MAC_ADDR4;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  MAC_ADDR5;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* set netif maximum transfer unit */
  netif->mtu = 1500;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800149e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014a6:	f043 030a 	orr.w	r3, r3, #10
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	2101      	movs	r1, #1
 80014bc:	4618      	mov	r0, r3
 80014be:	f006 f8b1 	bl	8007624 <osSemaphoreCreate>
 80014c2:	4602      	mov	r2, r0
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <low_level_init+0x14c>)
 80014c6:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <low_level_init+0x150>)
 80014ca:	f107 0408 	add.w	r4, r7, #8
 80014ce:	461d      	mov	r5, r3
 80014d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d4:	682b      	ldr	r3, [r5, #0]
 80014d6:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	f005 ffc9 	bl	8007476 <osThreadCreate>

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&EthHandle);
 80014e4:	4803      	ldr	r0, [pc, #12]	; (80014f4 <low_level_init+0x134>)
 80014e6:	f002 fbae 	bl	8003c46 <HAL_ETH_Start>
}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bdb0      	pop	{r4, r5, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20006914 	.word	0x20006914
 80014f8:	40028000 	.word	0x40028000
 80014fc:	2004d8d0 	.word	0x2004d8d0
 8001500:	2004c080 	.word	0x2004c080
 8001504:	2004c100 	.word	0x2004c100
 8001508:	2004c000 	.word	0x2004c000
 800150c:	20000230 	.word	0x20000230
 8001510:	08018a48 	.word	0x08018a48

08001514 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 800151e:	4b4b      	ldr	r3, [pc, #300]	; (800164c <low_level_output+0x138>)
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]

  DmaTxDesc = EthHandle.TxDesc;
 8001536:	4b45      	ldr	r3, [pc, #276]	; (800164c <low_level_output+0x138>)
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	623b      	str	r3, [r7, #32]
 8001544:	e05a      	b.n	80015fc <low_level_output+0xe8>
  {
    /* Is this buffer available? If not, goto error */
    if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	da03      	bge.n	8001556 <low_level_output+0x42>
    {
      errval = ERR_USE;
 800154e:	23f8      	movs	r3, #248	; 0xf8
 8001550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8001554:	e05c      	b.n	8001610 <low_level_output+0xfc>
    }
    
    /* Get bytes in current lwIP buffer */
    byteslefttocopy = q->len;
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	895b      	ldrh	r3, [r3, #10]
 800155a:	60fb      	str	r3, [r7, #12]
    payloadoffset = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
    
    /* Check if the length of data to copy is bigger than Tx buffer size*/
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8001560:	e02f      	b.n	80015c2 <low_level_output+0xae>
    {
      /* Copy data to Tx buffer*/
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	18d0      	adds	r0, r2, r3
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	18d1      	adds	r1, r2, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8001576:	1a9b      	subs	r3, r3, r2
 8001578:	461a      	mov	r2, r3
 800157a:	f013 fa7a 	bl	8014a72 <memcpy>
      
      /* Point to next descriptor */
      DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	61bb      	str	r3, [r7, #24]
      
      /* Check if the buffer is available */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	da03      	bge.n	8001594 <low_level_output+0x80>
      {
        errval = ERR_USE;
 800158c:	23f8      	movs	r3, #248	; 0xf8
 800158e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8001592:	e03d      	b.n	8001610 <low_level_output+0xfc>
      }
      
      buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	61fb      	str	r3, [r7, #28]
      
      byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80015a4:	60fb      	str	r3, [r7, #12]
      payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80015b0:	60bb      	str	r3, [r7, #8]
      framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80015bc:	617b      	str	r3, [r7, #20]
      bufferoffset = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4413      	add	r3, r2
 80015c8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d8c8      	bhi.n	8001562 <low_level_output+0x4e>
    }
    
    /* Copy the remaining bytes */
    memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	18d0      	adds	r0, r2, r3
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	4413      	add	r3, r2
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f013 fa46 	bl	8014a72 <memcpy>
    bufferoffset = bufferoffset + byteslefttocopy;
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
    framelength = framelength + byteslefttocopy;
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	623b      	str	r3, [r7, #32]
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1a1      	bne.n	8001546 <low_level_output+0x32>
  }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&EthHandle, framelength);
 8001602:	6979      	ldr	r1, [r7, #20]
 8001604:	4811      	ldr	r0, [pc, #68]	; (800164c <low_level_output+0x138>)
 8001606:	f002 f863 	bl	80036d0 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((EthHandle.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <low_level_output+0x138>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	f241 0314 	movw	r3, #4116	; 0x1014
 8001618:	4413      	add	r3, r2
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0320 	and.w	r3, r3, #32
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00d      	beq.n	8001640 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    EthHandle.Instance->DMASR = ETH_DMASR_TUS;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <low_level_output+0x138>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	f241 0314 	movw	r3, #4116	; 0x1014
 800162c:	4413      	add	r3, r2
 800162e:	2220      	movs	r2, #32
 8001630:	601a      	str	r2, [r3, #0]
    
    /* Resume DMA transmission*/
    EthHandle.Instance->DMATPDR = 0;
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <low_level_output+0x138>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	f241 0304 	movw	r3, #4100	; 0x1004
 800163a:	4413      	add	r3, r2
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8001640:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001644:	4618      	mov	r0, r3
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20006914 	.word	0x20006914

08001650 <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08c      	sub	sp, #48	; 0x30
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL, *q = NULL;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800165c:	2300      	movs	r3, #0
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  
  /* get received frame */
  if(HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 8001674:	484f      	ldr	r0, [pc, #316]	; (80017b4 <low_level_input+0x164>)
 8001676:	f002 f915 	bl	80038a4 <HAL_ETH_GetReceivedFrame_IT>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <low_level_input+0x34>
    return NULL;
 8001680:	2300      	movs	r3, #0
 8001682:	e092      	b.n	80017aa <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = EthHandle.RxFrameInfos.length;
 8001684:	4b4b      	ldr	r3, [pc, #300]	; (80017b4 <low_level_input+0x164>)
 8001686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001688:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 800168a:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <low_level_input+0x164>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8001696:	89fb      	ldrh	r3, [r7, #14]
 8001698:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800169c:	4619      	mov	r1, r3
 800169e:	2000      	movs	r0, #0
 80016a0:	f00b ffbe 	bl	800d620 <pbuf_alloc>
 80016a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80016a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d04b      	beq.n	8001744 <low_level_input+0xf4>
  {
    dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 80016ac:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <low_level_input+0x164>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
    
    for(q = p; q != NULL; q = q->next)
 80016b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ba:	e040      	b.n	800173e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80016bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016be:	895b      	ldrh	r3, [r3, #10]
 80016c0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size */
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80016c6:	e021      	b.n	800170c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80016c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	18d0      	adds	r0, r2, r3
 80016d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	18d1      	adds	r1, r2, r3
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80016dc:	1a9b      	subs	r3, r3, r2
 80016de:	461a      	mov	r2, r3
 80016e0:	f013 f9c7 	bl	8014a72 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	4413      	add	r3, r2
 80016f6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80016fa:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001706:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001716:	4293      	cmp	r3, r2
 8001718:	d8d6      	bhi.n	80016c8 <low_level_input+0x78>
      }
      
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800171a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	18d0      	adds	r0, r2, r3
 8001722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	4413      	add	r3, r2
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	4619      	mov	r1, r3
 800172c:	f013 f9a1 	bl	8014a72 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	4413      	add	r3, r2
 8001736:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8001738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
 800173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1bb      	bne.n	80016bc <low_level_input+0x6c>
    }
  }
    
  /* Release descriptors to DMA */
  /* Point to first descriptor */
  dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <low_level_input+0x164>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	623b      	str	r3, [r7, #32]
  /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	e00b      	b.n	8001768 <low_level_input+0x118>
  {  
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	601a      	str	r2, [r3, #0]
    dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	623b      	str	r3, [r7, #32]
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	3301      	adds	r3, #1
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <low_level_input+0x164>)
 800176a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	429a      	cmp	r2, r3
 8001770:	d3ee      	bcc.n	8001750 <low_level_input+0x100>
  }
    
  /* Clear Segment_Count */
  EthHandle.RxFrameInfos.SegCount =0;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <low_level_input+0x164>)
 8001774:	2200      	movs	r2, #0
 8001776:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <low_level_input+0x164>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00d      	beq.n	80017a8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    EthHandle.Instance->DMASR = ETH_DMASR_RBUS;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <low_level_input+0x164>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	f241 0314 	movw	r3, #4116	; 0x1014
 8001794:	4413      	add	r3, r2
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    EthHandle.Instance->DMARPDR = 0;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <low_level_input+0x164>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	f241 0308 	movw	r3, #4104	; 0x1008
 80017a2:	4413      	add	r3, r2
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
  }
  return p;
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3730      	adds	r7, #48	; 0x30
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20006914 	.word	0x20006914

080017b8 <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input( void const * argument )
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <ethernetif_input+0x58>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	4618      	mov	r0, r3
 80017ce:	f005 ff4d 	bl	800766c <osSemaphoreWait>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f5      	bne.n	80017c4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80017d8:	480e      	ldr	r0, [pc, #56]	; (8001814 <ethernetif_input+0x5c>)
 80017da:	f013 f893 	bl	8014904 <sys_mutex_lock>

        p = low_level_input( netif );
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7ff ff36 	bl	8001650 <low_level_input>
 80017e4:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00a      	beq.n	8001802 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	68f9      	ldr	r1, [r7, #12]
 80017f2:	68b8      	ldr	r0, [r7, #8]
 80017f4:	4798      	blx	r3
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80017fc:	68b8      	ldr	r0, [r7, #8]
 80017fe:	f00c f9ef 	bl	800dbe0 <pbuf_free>
          }
        }

        UNLOCK_TCPIP_CORE();
 8001802:	4804      	ldr	r0, [pc, #16]	; (8001814 <ethernetif_input+0x5c>)
 8001804:	f013 f88d 	bl	8014922 <sys_mutex_unlock>

      }while(p!=NULL);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1e4      	bne.n	80017d8 <ethernetif_input+0x20>
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800180e:	e7d9      	b.n	80017c4 <ethernetif_input+0xc>
 8001810:	20000230 	.word	0x20000230
 8001814:	20006a58 	.word	0x20006a58

08001818 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <ethernetif_init+0x1c>
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <ethernetif_init+0x48>)
 8001828:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 800182c:	490d      	ldr	r1, [pc, #52]	; (8001864 <ethernetif_init+0x4c>)
 800182e:	480e      	ldr	r0, [pc, #56]	; (8001868 <ethernetif_init+0x50>)
 8001830:	f013 fe50 	bl	80154d4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2273      	movs	r2, #115	; 0x73
 8001838:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2274      	movs	r2, #116	; 0x74
 8001840:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <ethernetif_init+0x54>)
 8001848:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a08      	ldr	r2, [pc, #32]	; (8001870 <ethernetif_init+0x58>)
 800184e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fdb5 	bl	80013c0 <low_level_init>

  return ERR_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	08018a5c 	.word	0x08018a5c
 8001864:	08018aac 	.word	0x08018aac
 8001868:	08018abc 	.word	0x08018abc
 800186c:	0800a94d 	.word	0x0800a94d
 8001870:	08001515 	.word	0x08001515

08001874 <sys_now>:
  *         when LWIP_TIMERS == 1 and NO_SYS == 1
  * @param  None
  * @retval Time
  */
u32_t sys_now(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001878:	f001 fb30 	bl	8002edc <HAL_GetTick>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001888:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800188c:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <SCB_EnableICache+0x3c>)
 8001892:	2200      	movs	r2, #0
 8001894:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001898:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800189c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <SCB_EnableICache+0x3c>)
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <SCB_EnableICache+0x3c>)
 80018a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018aa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80018ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018b0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <SCB_EnableDCache+0x7c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80018d2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80018d6:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <SCB_EnableDCache+0x7c>)
 80018d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018dc:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	0b5b      	lsrs	r3, r3, #13
 80018e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80018e6:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	08db      	lsrs	r3, r3, #3
 80018ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018f0:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	015a      	lsls	r2, r3, #5
 80018f6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80018fa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001900:	490f      	ldr	r1, [pc, #60]	; (8001940 <SCB_EnableDCache+0x7c>)
 8001902:	4313      	orrs	r3, r2
 8001904:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1e5a      	subs	r2, r3, #1
 800190c:	60ba      	str	r2, [r7, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ef      	bne.n	80018f2 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1e5a      	subs	r2, r3, #1
 8001916:	60fa      	str	r2, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1e5      	bne.n	80018e8 <SCB_EnableDCache+0x24>
 800191c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <SCB_EnableDCache+0x7c>)
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	4a06      	ldr	r2, [pc, #24]	; (8001940 <SCB_EnableDCache+0x7c>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192a:	6153      	str	r3, [r2, #20]
 800192c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001930:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001944:	b5b0      	push	{r4, r5, r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Device memory for ETH DMA descriptors */
  MPU_Config();
 800194a:	f000 f8e3 	bl	8001b14 <MPU_Config>
  
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 800194e:	f000 f923 	bl	8001b98 <CPU_CACHE_Enable>
       - Configure the Flash ART accelerator on ITCM interface
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();  
 8001952:	f001 fa91 	bl	8002e78 <HAL_Init>
  
  /* Configure the system clock to 216 MHz */
  SystemClock_Config(); 
 8001956:	f000 f897 	bl	8001a88 <SystemClock_Config>

  MX_GPIO_Init();
 800195a:	f000 f925 	bl	8001ba8 <MX_GPIO_Init>

  /*configure LED1 and LED3 */
  BSP_LED_Init(LED1);
 800195e:	2000      	movs	r0, #0
 8001960:	f001 f9d4 	bl	8002d0c <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8001964:	2001      	movs	r0, #1
 8001966:	f001 f9d1 	bl	8002d0c <BSP_LED_Init>
  BSP_LED_Init(LED3);
 800196a:	2002      	movs	r0, #2
 800196c:	f001 f9ce 	bl	8002d0c <BSP_LED_Init>

  /* Init thread */
#if defined(__GNUC__)
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <main+0x80>)
 8001972:	1d3c      	adds	r4, r7, #4
 8001974:	461d      	mov	r5, r3
 8001976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197a:	682b      	ldr	r3, [r5, #0]
 800197c:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 2);
#endif
  
  osThreadCreate (osThread(Start), NULL);
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f005 fd77 	bl	8007476 <osThreadCreate>

  /* Start scheduler */
  osKernelStart();
 8001988:	f005 fd5e 	bl	8007448 <osKernelStart>

  while (1)
  {
    /* USER CODE END WHILE */

	  if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 800198c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001990:	480d      	ldr	r0, [pc, #52]	; (80019c8 <main+0x84>)
 8001992:	f002 fdc7 	bl	8004524 <HAL_GPIO_ReadPin>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f7      	beq.n	800198c <main+0x48>
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 800199c:	2201      	movs	r2, #1
 800199e:	2101      	movs	r1, #1
 80019a0:	480a      	ldr	r0, [pc, #40]	; (80019cc <main+0x88>)
 80019a2:	f002 fdd7 	bl	8004554 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 80019a6:	2201      	movs	r2, #1
 80019a8:	2180      	movs	r1, #128	; 0x80
 80019aa:	4808      	ldr	r0, [pc, #32]	; (80019cc <main+0x88>)
 80019ac:	f002 fdd2 	bl	8004554 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <main+0x88>)
 80019b8:	f002 fdcc 	bl	8004554 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, DIR2_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOE, DIR3_Pin, GPIO_PIN_SET);
		//  HAL_GPIO_WritePin(GPIOE, RELAY1_ONOFF_Pin, GPIO_PIN_SET);
		//  HAL_GPIO_WritePin(GPIOE, RELAY1_UPDOWN_Pin, GPIO_PIN_SET);
		  */
		  HAL_Delay(10);
 80019bc:	200a      	movs	r0, #10
 80019be:	f001 fa99 	bl	8002ef4 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 80019c2:	e7e3      	b.n	800198c <main+0x48>
 80019c4:	08018aec 	.word	0x08018aec
 80019c8:	40020800 	.word	0x40020800
 80019cc:	40020400 	.word	0x40020400

080019d0 <StartThread>:
  * @brief  Start Thread 
  * @param  argument not used
  * @retval None
  */
static void StartThread(void const * argument)
{ 
 80019d0:	b5b0      	push	{r4, r5, r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	//todo HAL_UART_Transmit(&huart3, "tcpip_init\r\n", 12, 100);
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 80019d8:	2100      	movs	r1, #0
 80019da:	2000      	movs	r0, #0
 80019dc:	f006 fcba 	bl	8008354 <tcpip_init>
  
  //todo HAL_UART_Transmit(&huart3, "Netif_Config\r\n", 14, 100);
  /* Initialize the LwIP stack */
  Netif_Config();
 80019e0:	f000 f81c 	bl	8001a1c <Netif_Config>
//  }


  //todo HAL_UART_Transmit(&huart3, "tcp_echoserver_init_Before\r\n", 28, 100);
	/* tcp echo server Init */
	tcp_echoserver_init();
 80019e4:	f000 fa8a 	bl	8001efc <tcp_echoserver_init>
	//todo HAL_UART_Transmit(&huart3, "tcp_echoserver_init\r\n", 21, 100);

  
  /* Notify user about the network interface config */
  User_notification(&gnetif);
 80019e8:	480a      	ldr	r0, [pc, #40]	; (8001a14 <StartThread+0x44>)
 80019ea:	f7ff fbbb 	bl	8001164 <User_notification>
  
#ifdef USE_DHCP
  /* Start DHCPClient */
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <StartThread+0x48>)
 80019f0:	f107 040c 	add.w	r4, r7, #12
 80019f4:	461d      	mov	r5, r3
 80019f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019fa:	682b      	ldr	r3, [r5, #0]
 80019fc:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	4904      	ldr	r1, [pc, #16]	; (8001a14 <StartThread+0x44>)
 8001a04:	4618      	mov	r0, r3
 8001a06:	f005 fd36 	bl	8007476 <osThreadCreate>

  for( ;; )
  {
	  //todo HAL_UART_Transmit(&huart3, "osThreadTerminate_Before\r\n", 26, 100);
    /* Delete the Init Thread */ 
    osThreadTerminate(NULL);
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f005 fd5a 	bl	80074c4 <osThreadTerminate>
 8001a10:	e7fb      	b.n	8001a0a <StartThread+0x3a>
 8001a12:	bf00      	nop
 8001a14:	200069dc 	.word	0x200069dc
 8001a18:	08018b08 	.word	0x08018b08

08001a1c <Netif_Config>:
  * @brief  Initializes the lwIP stack
  * @param  None
  * @retval None
  */
static void Netif_Config(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af04      	add	r7, sp, #16
  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;
 
#ifdef USE_DHCP
  ip_addr_set_zero_ip4(&ipaddr);
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
  ip_addr_set_zero_ip4(&netmask);
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
  ip_addr_set_zero_ip4(&gw);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif /* USE_DHCP */
  
  /* add the network interface */    
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001a2e:	1d38      	adds	r0, r7, #4
 8001a30:	f107 0208 	add.w	r2, r7, #8
 8001a34:	f107 010c 	add.w	r1, r7, #12
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <Netif_Config+0x60>)
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <Netif_Config+0x64>)
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	2300      	movs	r3, #0
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	4603      	mov	r3, r0
 8001a46:	480f      	ldr	r0, [pc, #60]	; (8001a84 <Netif_Config+0x68>)
 8001a48:	f00b fb24 	bl	800d094 <netif_add>
  
  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 8001a4c:	480d      	ldr	r0, [pc, #52]	; (8001a84 <Netif_Config+0x68>)
 8001a4e:	f00b fcdb 	bl	800d408 <netif_set_default>
  
  if (netif_is_link_up(&gnetif))
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <Netif_Config+0x68>)
 8001a54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <Netif_Config+0x50>
  {
    /* When the netif is fully configured this function must be called.*/
    netif_set_up(&gnetif);
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <Netif_Config+0x68>)
 8001a66:	f00b fcdf 	bl	800d428 <netif_set_up>
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }
}
 8001a6a:	e002      	b.n	8001a72 <Netif_Config+0x56>
    netif_set_down(&gnetif);
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <Netif_Config+0x68>)
 8001a6e:	f00b fd47 	bl	800d500 <netif_set_down>
}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	08008311 	.word	0x08008311
 8001a80:	08001819 	.word	0x08001819
 8001a84:	200069dc 	.word	0x200069dc

08001a88 <SystemClock_Config>:
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b092      	sub	sp, #72	; 0x48
 8001a8c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a92:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a96:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aa0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aa4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001aa6:	2308      	movs	r3, #8
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8001aaa:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001ab4:	2309      	movs	r3, #9
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 fdb4 	bl	8004628 <HAL_RCC_OscConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <SystemClock_Config+0x42>
  {
    Error_Handler();
 8001ac6:	f000 f822 	bl	8001b0e <Error_Handler>
  }

  /* activate the OverDrive to reach the 216 Mhz Frequency */
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001aca:	f002 fd5d 	bl	8004588 <HAL_PWREx_EnableOverDrive>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001ad4:	f000 f81b 	bl	8001b0e <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001ad8:	230f      	movs	r3, #15
 8001ada:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001adc:	2302      	movs	r3, #2
 8001ade:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8001ae4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ae8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aee:	647b      	str	r3, [r7, #68]	; 0x44
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001af0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001af4:	2107      	movs	r1, #7
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 f83a 	bl	8004b70 <HAL_RCC_ClockConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001b02:	f000 f804 	bl	8001b0e <Error_Handler>
  }
}
 8001b06:	bf00      	nop
 8001b08:	3748      	adds	r7, #72	; 0x48
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 8001b12:	e7fe      	b.n	8001b12 <Error_Handler+0x4>

08001b14 <MPU_Config>:
  * @brief  Configure the MPU attributes .
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;
  
  /* Disable the MPU */
  HAL_MPU_Disable();
 8001b1a:	f001 faef 	bl	80030fc <HAL_MPU_Disable>
  
  /* Configure the MPU as Normal Non Cacheable for Ethernet Buffers in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x2004C000;
 8001b22:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <MPU_Config+0x80>)
 8001b24:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001b26:	230d      	movs	r3, #13
 8001b28:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001b36:	2301      	movs	r3, #1
 8001b38:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001b42:	2300      	movs	r3, #0
 8001b44:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f001 fb09 	bl	8003164 <HAL_MPU_ConfigRegion>
  
  /* Configure the MPU as Device for Ethernet Descriptors in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b52:	2301      	movs	r3, #1
 8001b54:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x2004C000;
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <MPU_Config+0x80>)
 8001b58:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001b76:	2300      	movs	r3, #0
 8001b78:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b7e:	463b      	mov	r3, r7
 8001b80:	4618      	mov	r0, r3
 8001b82:	f001 faef 	bl	8003164 <HAL_MPU_ConfigRegion>
  
  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b86:	2004      	movs	r0, #4
 8001b88:	f001 face 	bl	8003128 <HAL_MPU_Enable>
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	2004c000 	.word	0x2004c000

08001b98 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Enable I-Cache */
  SCB_EnableICache();
 8001b9c:	f7ff fe72 	bl	8001884 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 8001ba0:	f7ff fe90 	bl	80018c4 <SCB_EnableDCache>
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08e      	sub	sp, #56	; 0x38
 8001bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	4b77      	ldr	r3, [pc, #476]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a76      	ldr	r2, [pc, #472]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b74      	ldr	r3, [pc, #464]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	623b      	str	r3, [r7, #32]
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bd6:	4b71      	ldr	r3, [pc, #452]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a70      	ldr	r2, [pc, #448]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001bdc:	f043 0320 	orr.w	r3, r3, #32
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b6e      	ldr	r3, [pc, #440]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bee:	4b6b      	ldr	r3, [pc, #428]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a6a      	ldr	r2, [pc, #424]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b68      	ldr	r3, [pc, #416]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	4b65      	ldr	r3, [pc, #404]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a64      	ldr	r2, [pc, #400]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b62      	ldr	r3, [pc, #392]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	4b5f      	ldr	r3, [pc, #380]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a5e      	ldr	r2, [pc, #376]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b5c      	ldr	r3, [pc, #368]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c36:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a58      	ldr	r2, [pc, #352]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4e:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a52      	ldr	r2, [pc, #328]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001c54:	f043 0308 	orr.w	r3, r3, #8
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b50      	ldr	r3, [pc, #320]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c66:	4b4d      	ldr	r3, [pc, #308]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a4c      	ldr	r2, [pc, #304]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b4a      	ldr	r3, [pc, #296]	; (8001d9c <MX_GPIO_Init+0x1f4>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c84:	4846      	ldr	r0, [pc, #280]	; (8001da0 <MX_GPIO_Init+0x1f8>)
 8001c86:	f002 fc65 	bl	8004554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001c90:	4844      	ldr	r0, [pc, #272]	; (8001da4 <MX_GPIO_Init+0x1fc>)
 8001c92:	f002 fc5f 	bl	8004554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR2_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2180      	movs	r1, #128	; 0x80
 8001c9a:	4843      	ldr	r0, [pc, #268]	; (8001da8 <MX_GPIO_Init+0x200>)
 8001c9c:	f002 fc5a 	bl	8004554 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOF, PILLAR_UPDOWN_Pin, GPIO_PIN_SET);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ca6:	483e      	ldr	r0, [pc, #248]	; (8001da0 <MX_GPIO_Init+0x1f8>)
 8001ca8:	f002 fc54 	bl	8004554 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STEP3_Pin|STEP2_Pin|STEP1_Pin|DIR3_Pin, GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8001cb2:	483e      	ldr	r0, [pc, #248]	; (8001dac <MX_GPIO_Init+0x204>)
 8001cb4:	f002 fc4e 	bl	8004554 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOE, MAGNET1_ONOFF_Pin|MAGNET2_ONOFF_Pin|PILLAR_ONOFF_Pin, GPIO_PIN_SET);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f44f 41a4 	mov.w	r1, #20992	; 0x5200
 8001cbe:	483a      	ldr	r0, [pc, #232]	; (8001da8 <MX_GPIO_Init+0x200>)
 8001cc0:	f002 fc48 	bl	8004554 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2140      	movs	r1, #64	; 0x40
 8001cc8:	4839      	ldr	r0, [pc, #228]	; (8001db0 <MX_GPIO_Init+0x208>)
 8001cca:	f002 fc43 	bl	8004554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cd4:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <MX_GPIO_Init+0x20c>)
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4835      	ldr	r0, [pc, #212]	; (8001db8 <MX_GPIO_Init+0x210>)
 8001ce4:	f002 fa74 	bl	80041d0 <HAL_GPIO_Init>


  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ce8:	f244 0381 	movw	r3, #16513	; 0x4081
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4828      	ldr	r0, [pc, #160]	; (8001da4 <MX_GPIO_Init+0x1fc>)
 8001d02:	f002 fa65 	bl	80041d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY1_UPDOWN_Pin */


  /*Configure GPIO pins : STEP3_Pin STEP2_Pin STEP1_Pin DIR3_Pin */
  GPIO_InitStruct.Pin = STEP3_Pin|STEP2_Pin|STEP1_Pin|DIR3_Pin|DIR4_Pin;
 8001d06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d14:	2301      	movs	r3, #1
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4823      	ldr	r0, [pc, #140]	; (8001dac <MX_GPIO_Init+0x204>)
 8001d20:	f002 fa56 	bl	80041d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DIR5_Pin|STEP5_Pin|STEP4_Pin|MAGNET1_ONOFF_Pin|MAGNET2_ONOFF_Pin|PILLAR_ONOFF_Pin|DIR2_Pin;
 8001d24:	f44f 43fd 	mov.w	r3, #32384	; 0x7e80
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d32:	2301      	movs	r3, #1
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	481a      	ldr	r0, [pc, #104]	; (8001da8 <MX_GPIO_Init+0x200>)
 8001d3e:	f002 fa47 	bl	80041d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DIR6_Pin|STEP6_Pin|PILLAR_UPDOWN_Pin|DIR1_Pin;
 8001d42:	f246 4308 	movw	r3, #25608	; 0x6408
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d50:	2301      	movs	r3, #1
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4811      	ldr	r0, [pc, #68]	; (8001da0 <MX_GPIO_Init+0x1f8>)
 8001d5c:	f002 fa38 	bl	80041d0 <HAL_GPIO_Init>


  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001d60:	2340      	movs	r3, #64	; 0x40
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d74:	4619      	mov	r1, r3
 8001d76:	480e      	ldr	r0, [pc, #56]	; (8001db0 <MX_GPIO_Init+0x208>)
 8001d78:	f002 fa2a 	bl	80041d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4808      	ldr	r0, [pc, #32]	; (8001db0 <MX_GPIO_Init+0x208>)
 8001d90:	f002 fa1e 	bl	80041d0 <HAL_GPIO_Init>

}
 8001d94:	bf00      	nop
 8001d96:	3738      	adds	r7, #56	; 0x38
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40021400 	.word	0x40021400
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021800 	.word	0x40021800
 8001db4:	10110000 	.word	0x10110000
 8001db8:	40020800 	.word	0x40020800

08001dbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	2036      	movs	r0, #54	; 0x36
 8001dd2:	f001 f969 	bl	80030a8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dd6:	2036      	movs	r0, #54	; 0x36
 8001dd8:	f001 f982 	bl	80030e0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ddc:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <HAL_InitTick+0xb4>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	4a23      	ldr	r2, [pc, #140]	; (8001e70 <HAL_InitTick+0xb4>)
 8001de2:	f043 0310 	orr.w	r3, r3, #16
 8001de6:	6413      	str	r3, [r2, #64]	; 0x40
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <HAL_InitTick+0xb4>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001df4:	f107 020c 	add.w	r2, r7, #12
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 f89a 	bl	8004f38 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8001e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e0e:	f003 f87f 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 8001e12:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001e14:	e004      	b.n	8001e20 <HAL_InitTick+0x64>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e16:	f003 f87b 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <HAL_InitTick+0xb8>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	0c9b      	lsrs	r3, r3, #18
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_InitTick+0xbc>)
 8001e30:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <HAL_InitTick+0xc0>)
 8001e32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8001e34:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_InitTick+0xbc>)
 8001e36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e3a:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <HAL_InitTick+0xbc>)
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_InitTick+0xbc>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_InitTick+0xbc>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001e4e:	480a      	ldr	r0, [pc, #40]	; (8001e78 <HAL_InitTick+0xbc>)
 8001e50:	f003 f8a4 	bl	8004f9c <HAL_TIM_Base_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d104      	bne.n	8001e64 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8001e5a:	4807      	ldr	r0, [pc, #28]	; (8001e78 <HAL_InitTick+0xbc>)
 8001e5c:	f003 f8d4 	bl	8005008 <HAL_TIM_Base_Start_IT>
 8001e60:	4603      	mov	r3, r0
 8001e62:	e000      	b.n	8001e66 <HAL_InitTick+0xaa>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3730      	adds	r7, #48	; 0x30
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	431bde83 	.word	0x431bde83
 8001e78:	20006a14 	.word	0x20006a14
 8001e7c:	40001000 	.word	0x40001000

08001e80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 8001e88:	f001 f814 	bl	8002eb4 <HAL_IncTick>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <TIM6_DAC_IRQHandler+0x10>)
 8001e9a:	f003 f8df 	bl	800505c <HAL_TIM_IRQHandler>
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20006a14 	.word	0x20006a14

08001ea8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <HardFault_Handler+0x4>

08001ebc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <MemManage_Handler+0x4>

08001ec2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001ec6:	e7fe      	b.n	8001ec6 <BusFault_Handler+0x4>

08001ec8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <UsageFault_Handler+0x4>

08001ece <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  osSystickHandler();
 8001ee0:	f005 fd0e 	bl	8007900 <osSystickHandler>
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <ETH_IRQHandler>:
  * @brief  This function handles Ethernet interrupt request.
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  HAL_ETH_IRQHandler(&EthHandle);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <ETH_IRQHandler+0x10>)
 8001eee:	f001 fd61 	bl	80039b4 <HAL_ETH_IRQHandler>
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20006914 	.word	0x20006914

08001efc <tcp_echoserver_init>:
 * @brief  Initializes the tcp echo server
 * @param  None
 * @retval None
 */
void tcp_echoserver_init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
	/* create new tcp pcb */
	tcp_echoserver_pcb = tcp_new();
 8001f02:	f00d fc6f 	bl	800f7e4 <tcp_new>
 8001f06:	4602      	mov	r2, r0
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <tcp_echoserver_init+0x68>)
 8001f0a:	601a      	str	r2, [r3, #0]

	if (tcp_echoserver_pcb != NULL)
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <tcp_echoserver_init+0x68>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d022      	beq.n	8001f5a <tcp_echoserver_init+0x5e>
	{
		err_t err;

		/* bind echo_pcb to port 7 (ECHO protocol) */
		err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, SERVER_PORT);
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <tcp_echoserver_init+0x68>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2250      	movs	r2, #80	; 0x50
 8001f1a:	4913      	ldr	r1, [pc, #76]	; (8001f68 <tcp_echoserver_init+0x6c>)
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f00c fbff 	bl	800e720 <tcp_bind>
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]

		if (err == ERR_OK)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10f      	bne.n	8001f4e <tcp_echoserver_init+0x52>
		{
			/* start tcp listening for echo_pcb */
			tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <tcp_echoserver_init+0x68>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	21ff      	movs	r1, #255	; 0xff
 8001f34:	4618      	mov	r0, r3
 8001f36:	f00c fcab 	bl	800e890 <tcp_listen_with_backlog>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <tcp_echoserver_init+0x68>)
 8001f3e:	601a      	str	r2, [r3, #0]

			/* initialize LwIP tcp_accept callback function */
			tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <tcp_echoserver_init+0x68>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4909      	ldr	r1, [pc, #36]	; (8001f6c <tcp_echoserver_init+0x70>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	f00d fcca 	bl	800f8e0 <tcp_accept>
		{
			/* deallocate the pcb */
			memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
		}
	}
}
 8001f4c:	e005      	b.n	8001f5a <tcp_echoserver_init+0x5e>
			memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <tcp_echoserver_init+0x68>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4619      	mov	r1, r3
 8001f54:	2001      	movs	r0, #1
 8001f56:	f00b f86b 	bl	800d030 <memp_free>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000234 	.word	0x20000234
 8001f68:	0801958c 	.word	0x0801958c
 8001f6c:	08001f71 	.word	0x08001f71

08001f70 <tcp_echoserver_accept>:
 * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
 * @param  err: not used
 * @retval err_t: error status
 */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	71fb      	strb	r3, [r7, #7]

	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);

	/* set priority for the newly accepted tcp connection newpcb */
	tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001f7e:	2101      	movs	r1, #1
 8001f80:	68b8      	ldr	r0, [r7, #8]
 8001f82:	f00d fa69 	bl	800f458 <tcp_setprio>

	/* allocate structure es to maintain tcp connection informations */
	es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8001f86:	200c      	movs	r0, #12
 8001f88:	f00a fe7e 	bl	800cc88 <mem_malloc>
 8001f8c:	6138      	str	r0, [r7, #16]
	if (es != NULL)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01f      	beq.n	8001fd4 <tcp_echoserver_accept+0x64>
	{
		es->state = ES_ACCEPTED;
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
		es->pcb = newpcb;
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	605a      	str	r2, [r3, #4]
		es->retries = 0;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	705a      	strb	r2, [r3, #1]
		es->p = NULL;
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]

		/* pass newly allocated es structure as argument to newpcb */
		tcp_arg(newpcb, es);
 8001fac:	6939      	ldr	r1, [r7, #16]
 8001fae:	68b8      	ldr	r0, [r7, #8]
 8001fb0:	f00d fc20 	bl	800f7f4 <tcp_arg>

		/* initialize lwip tcp_recv callback function for newpcb  */
		tcp_recv(newpcb, tcp_echoserver_recv);
 8001fb4:	490d      	ldr	r1, [pc, #52]	; (8001fec <tcp_echoserver_accept+0x7c>)
 8001fb6:	68b8      	ldr	r0, [r7, #8]
 8001fb8:	f00d fc2e 	bl	800f818 <tcp_recv>

		/* initialize lwip tcp_err callback function for newpcb  */
		tcp_err(newpcb, tcp_echoserver_error);
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <tcp_echoserver_accept+0x80>)
 8001fbe:	68b8      	ldr	r0, [r7, #8]
 8001fc0:	f00d fc6c 	bl	800f89c <tcp_err>

		/* initialize lwip tcp_poll callback function for newpcb */
		tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	490b      	ldr	r1, [pc, #44]	; (8001ff4 <tcp_echoserver_accept+0x84>)
 8001fc8:	68b8      	ldr	r0, [r7, #8]
 8001fca:	f00d fca1 	bl	800f910 <tcp_poll>

		ret_err = ERR_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]
 8001fd2:	e005      	b.n	8001fe0 <tcp_echoserver_accept+0x70>
	}
	else
	{
		/*  close tcp connection */
		tcp_echoserver_connection_close(newpcb, es);
 8001fd4:	6939      	ldr	r1, [r7, #16]
 8001fd6:	68b8      	ldr	r0, [r7, #8]
 8001fd8:	f000 fe71 	bl	8002cbe <tcp_echoserver_connection_close>
		/* return memory error */
		ret_err = ERR_MEM;
 8001fdc:	23ff      	movs	r3, #255	; 0xff
 8001fde:	75fb      	strb	r3, [r7, #23]
	}
	return ret_err;
 8001fe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	0800291d 	.word	0x0800291d
 8001ff0:	08002b45 	.word	0x08002b45
 8001ff4:	08002b69 	.word	0x08002b69

08001ff8 <parse_string>:


#define DEBUG_OK {BSP_LED_On(LED2); BSP_LED_Off(LED3);}
#define DEBUG_BAD {BSP_LED_On(LED3); BSP_LED_Off(LED2);}

char *  parse_string(char * s, const unsigned int len){
 8001ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ffc:	b0b1      	sub	sp, #196	; 0xc4
 8001ffe:	af0e      	add	r7, sp, #56	; 0x38
 8002000:	6278      	str	r0, [r7, #36]	; 0x24
 8002002:	6239      	str	r1, [r7, #32]
	BSP_LED_Off(LED3);
 8002004:	2002      	movs	r0, #2
 8002006:	f000 fee7 	bl	8002dd8 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 800200a:	2001      	movs	r0, #1
 800200c:	f000 fee4 	bl	8002dd8 <BSP_LED_Off>

#define str_robot_len 5 // robot
	static char str_robot[str_robot_len] = {"robot"};
	static char str_GO[2] = {"GO"};

	float drive1 = 0;
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	65fb      	str	r3, [r7, #92]	; 0x5c
	float drive2 = 0;
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	65bb      	str	r3, [r7, #88]	; 0x58
	float instrument = 0;
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	657b      	str	r3, [r7, #84]	; 0x54
	float kolonna=0;
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	653b      	str	r3, [r7, #80]	; 0x50
	float rotation=0;
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	64fb      	str	r3, [r7, #76]	; 0x4c
	float rezka=0;
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	64bb      	str	r3, [r7, #72]	; 0x48
	float magnit1=0;
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	647b      	str	r3, [r7, #68]	; 0x44
	float magnit2=0;
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	643b      	str	r3, [r7, #64]	; 0x40

	int velosity_delay = 1; //
 8002040:	2301      	movs	r3, #1
 8002042:	63fb      	str	r3, [r7, #60]	; 0x3c
	int steps_count = 10;
 8002044:	230a      	movs	r3, #10
 8002046:	63bb      	str	r3, [r7, #56]	; 0x38

	int pos = -1;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
	char * pch = NULL;
 800204e:	2300      	movs	r3, #0
 8002050:	633b      	str	r3, [r7, #48]	; 0x30

	pch = strtok(s, ":");
 8002052:	49c2      	ldr	r1, [pc, #776]	; (800235c <parse_string+0x364>)
 8002054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002056:	f014 f8ef 	bl	8016238 <strtok>
 800205a:	6338      	str	r0, [r7, #48]	; 0x30
	//    printf("pch = %s\n", pch);
	  if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 800205c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002060:	48bf      	ldr	r0, [pc, #764]	; (8002360 <parse_string+0x368>)
 8002062:	f002 fa5f 	bl	8004524 <HAL_GPIO_ReadPin>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <parse_string+0x8a>
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	2101      	movs	r1, #1
 8002070:	48bc      	ldr	r0, [pc, #752]	; (8002364 <parse_string+0x36c>)
 8002072:	f002 fa6f 	bl	8004554 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8002076:	2201      	movs	r2, #1
 8002078:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800207c:	48b9      	ldr	r0, [pc, #740]	; (8002364 <parse_string+0x36c>)
 800207e:	f002 fa69 	bl	8004554 <HAL_GPIO_WritePin>
	  }


	if(pch != NULL) {
 8002082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 842a 	beq.w	80028de <parse_string+0x8e6>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800208a:	2201      	movs	r2, #1
 800208c:	2180      	movs	r1, #128	; 0x80
 800208e:	48b5      	ldr	r0, [pc, #724]	; (8002364 <parse_string+0x36c>)
 8002090:	f002 fa60 	bl	8004554 <HAL_GPIO_WritePin>
		pos = memcmp(s, &str_robot, str_robot_len);
 8002094:	2205      	movs	r2, #5
 8002096:	49b4      	ldr	r1, [pc, #720]	; (8002368 <parse_string+0x370>)
 8002098:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800209a:	f012 fcdb 	bl	8014a54 <memcmp>
 800209e:	6378      	str	r0, [r7, #52]	; 0x34
		if(pos==0){   // в начале "robot"
 80020a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 841b 	bne.w	80028de <parse_string+0x8e6>
			pch = strtok(NULL, ":");   // следующая лексема GO
 80020a8:	49ac      	ldr	r1, [pc, #688]	; (800235c <parse_string+0x364>)
 80020aa:	2000      	movs	r0, #0
 80020ac:	f014 f8c4 	bl	8016238 <strtok>
 80020b0:	6338      	str	r0, [r7, #48]	; 0x30
			//            printf("pch = %s\n", pch);

			pos = memcmp(pch, &str_GO, 2);
 80020b2:	2202      	movs	r2, #2
 80020b4:	49ad      	ldr	r1, [pc, #692]	; (800236c <parse_string+0x374>)
 80020b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020b8:	f012 fccc 	bl	8014a54 <memcmp>
 80020bc:	6378      	str	r0, [r7, #52]	; 0x34
			if(pos==0){   // в начале "GO"
 80020be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f040 840c 	bne.w	80028de <parse_string+0x8e6>
				pch = strtok(NULL, ";");   // число drive1
 80020c6:	49aa      	ldr	r1, [pc, #680]	; (8002370 <parse_string+0x378>)
 80020c8:	2000      	movs	r0, #0
 80020ca:	f014 f8b5 	bl	8016238 <strtok>
 80020ce:	6338      	str	r0, [r7, #48]	; 0x30
				//                printf("pch = %s\n", pch);
				if (pch != NULL) {
 80020d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8403 	beq.w	80028de <parse_string+0x8e6>
					drive1 = atof(pch);
 80020d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020da:	f012 fc6b 	bl	80149b4 <atof>
 80020de:	ec54 3b10 	vmov	r3, r4, d0
 80020e2:	4618      	mov	r0, r3
 80020e4:	4621      	mov	r1, r4
 80020e6:	f7fe fd9f 	bl	8000c28 <__aeabi_d2f>
 80020ea:	4603      	mov	r3, r0
 80020ec:	65fb      	str	r3, [r7, #92]	; 0x5c

					pch = strtok(NULL, ";");   // число drive2
 80020ee:	49a0      	ldr	r1, [pc, #640]	; (8002370 <parse_string+0x378>)
 80020f0:	2000      	movs	r0, #0
 80020f2:	f014 f8a1 	bl	8016238 <strtok>
 80020f6:	6338      	str	r0, [r7, #48]	; 0x30
					if (pch != NULL) {
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 83ef 	beq.w	80028de <parse_string+0x8e6>
						drive2 = atof(pch);
 8002100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002102:	f012 fc57 	bl	80149b4 <atof>
 8002106:	ec54 3b10 	vmov	r3, r4, d0
 800210a:	4618      	mov	r0, r3
 800210c:	4621      	mov	r1, r4
 800210e:	f7fe fd8b 	bl	8000c28 <__aeabi_d2f>
 8002112:	4603      	mov	r3, r0
 8002114:	65bb      	str	r3, [r7, #88]	; 0x58

						pch = strtok(NULL, ";");   // число instrument
 8002116:	4996      	ldr	r1, [pc, #600]	; (8002370 <parse_string+0x378>)
 8002118:	2000      	movs	r0, #0
 800211a:	f014 f88d 	bl	8016238 <strtok>
 800211e:	6338      	str	r0, [r7, #48]	; 0x30
						if (pch != NULL) {
 8002120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 83db 	beq.w	80028de <parse_string+0x8e6>
							instrument = atof(pch);
 8002128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800212a:	f012 fc43 	bl	80149b4 <atof>
 800212e:	ec54 3b10 	vmov	r3, r4, d0
 8002132:	4618      	mov	r0, r3
 8002134:	4621      	mov	r1, r4
 8002136:	f7fe fd77 	bl	8000c28 <__aeabi_d2f>
 800213a:	4603      	mov	r3, r0
 800213c:	657b      	str	r3, [r7, #84]	; 0x54

							pch = strtok(NULL, ";");   // число kolonna
 800213e:	498c      	ldr	r1, [pc, #560]	; (8002370 <parse_string+0x378>)
 8002140:	2000      	movs	r0, #0
 8002142:	f014 f879 	bl	8016238 <strtok>
 8002146:	6338      	str	r0, [r7, #48]	; 0x30
								if (pch != NULL) {
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 83c7 	beq.w	80028de <parse_string+0x8e6>
									kolonna = atof(pch);
 8002150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002152:	f012 fc2f 	bl	80149b4 <atof>
 8002156:	ec54 3b10 	vmov	r3, r4, d0
 800215a:	4618      	mov	r0, r3
 800215c:	4621      	mov	r1, r4
 800215e:	f7fe fd63 	bl	8000c28 <__aeabi_d2f>
 8002162:	4603      	mov	r3, r0
 8002164:	653b      	str	r3, [r7, #80]	; 0x50
									pch = strtok(NULL, ";");   // число rotation
 8002166:	4982      	ldr	r1, [pc, #520]	; (8002370 <parse_string+0x378>)
 8002168:	2000      	movs	r0, #0
 800216a:	f014 f865 	bl	8016238 <strtok>
 800216e:	6338      	str	r0, [r7, #48]	; 0x30
										if (pch != NULL) {
 8002170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 83b3 	beq.w	80028de <parse_string+0x8e6>
											rotation = atof(pch);
 8002178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800217a:	f012 fc1b 	bl	80149b4 <atof>
 800217e:	ec54 3b10 	vmov	r3, r4, d0
 8002182:	4618      	mov	r0, r3
 8002184:	4621      	mov	r1, r4
 8002186:	f7fe fd4f 	bl	8000c28 <__aeabi_d2f>
 800218a:	4603      	mov	r3, r0
 800218c:	64fb      	str	r3, [r7, #76]	; 0x4c
											pch = strtok(NULL, ";");   // число rezka
 800218e:	4978      	ldr	r1, [pc, #480]	; (8002370 <parse_string+0x378>)
 8002190:	2000      	movs	r0, #0
 8002192:	f014 f851 	bl	8016238 <strtok>
 8002196:	6338      	str	r0, [r7, #48]	; 0x30
												if (pch != NULL) {
 8002198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 839f 	beq.w	80028de <parse_string+0x8e6>
													rezka = atof(pch);
 80021a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021a2:	f012 fc07 	bl	80149b4 <atof>
 80021a6:	ec54 3b10 	vmov	r3, r4, d0
 80021aa:	4618      	mov	r0, r3
 80021ac:	4621      	mov	r1, r4
 80021ae:	f7fe fd3b 	bl	8000c28 <__aeabi_d2f>
 80021b2:	4603      	mov	r3, r0
 80021b4:	64bb      	str	r3, [r7, #72]	; 0x48
													pch = strtok(NULL, ";");   // число magnit1
 80021b6:	496e      	ldr	r1, [pc, #440]	; (8002370 <parse_string+0x378>)
 80021b8:	2000      	movs	r0, #0
 80021ba:	f014 f83d 	bl	8016238 <strtok>
 80021be:	6338      	str	r0, [r7, #48]	; 0x30
														if (pch != NULL) {
 80021c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 838b 	beq.w	80028de <parse_string+0x8e6>
															magnit1 = atof(pch);
 80021c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021ca:	f012 fbf3 	bl	80149b4 <atof>
 80021ce:	ec54 3b10 	vmov	r3, r4, d0
 80021d2:	4618      	mov	r0, r3
 80021d4:	4621      	mov	r1, r4
 80021d6:	f7fe fd27 	bl	8000c28 <__aeabi_d2f>
 80021da:	4603      	mov	r3, r0
 80021dc:	647b      	str	r3, [r7, #68]	; 0x44

															pch = strtok(NULL, ";");   // число magnit2
 80021de:	4964      	ldr	r1, [pc, #400]	; (8002370 <parse_string+0x378>)
 80021e0:	2000      	movs	r0, #0
 80021e2:	f014 f829 	bl	8016238 <strtok>
 80021e6:	6338      	str	r0, [r7, #48]	; 0x30
																if (pch != NULL) {
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8377 	beq.w	80028de <parse_string+0x8e6>
																	magnit2 = atof(pch);
 80021f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021f2:	f012 fbdf 	bl	80149b4 <atof>
 80021f6:	ec54 3b10 	vmov	r3, r4, d0
 80021fa:	4618      	mov	r0, r3
 80021fc:	4621      	mov	r1, r4
 80021fe:	f7fe fd13 	bl	8000c28 <__aeabi_d2f>
 8002202:	4603      	mov	r3, r0
 8002204:	643b      	str	r3, [r7, #64]	; 0x40
/////////////////
																	///////////////////
																	DEBUG_OK
 8002206:	2001      	movs	r0, #1
 8002208:	f000 fdcc 	bl	8002da4 <BSP_LED_On>
 800220c:	2002      	movs	r0, #2
 800220e:	f000 fde3 	bl	8002dd8 <BSP_LED_Off>
																	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8002212:	2200      	movs	r2, #0
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	4853      	ldr	r0, [pc, #332]	; (8002364 <parse_string+0x36c>)
 8002218:	f002 f99c 	bl	8004554 <HAL_GPIO_WritePin>
																	/*
																	 *  robot:Go drive1, drive2 instrument
																	 *
																	 *
																	 * */
																	if (drive1 > 10) {
 800221c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002220:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222c:	dd34      	ble.n	8002298 <parse_string+0x2a0>
																	//

																		HAL_GPIO_WritePin(GPIOF, DIR1_Pin, GPIO_PIN_SET);
 800222e:	2201      	movs	r2, #1
 8002230:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002234:	484f      	ldr	r0, [pc, #316]	; (8002374 <parse_string+0x37c>)
 8002236:	f002 f98d 	bl	8004554 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002240:	e024      	b.n	800228c <parse_string+0x294>
																			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8002242:	2201      	movs	r2, #1
 8002244:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002248:	4846      	ldr	r0, [pc, #280]	; (8002364 <parse_string+0x36c>)
 800224a:	f002 f983 	bl	8004554 <HAL_GPIO_WritePin>
																			HAL_GPIO_WritePin(GPIOD, STEP1_Pin, GPIO_PIN_SET);
 800224e:	2201      	movs	r2, #1
 8002250:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002254:	4848      	ldr	r0, [pc, #288]	; (8002378 <parse_string+0x380>)
 8002256:	f002 f97d 	bl	8004554 <HAL_GPIO_WritePin>
																			HAL_Delay(velosity_delay);
 800225a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fe49 	bl	8002ef4 <HAL_Delay>
																			HAL_GPIO_WritePin(GPIOD, STEP1_Pin, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002268:	4843      	ldr	r0, [pc, #268]	; (8002378 <parse_string+0x380>)
 800226a:	f002 f973 	bl	8004554 <HAL_GPIO_WritePin>
																			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002274:	483b      	ldr	r0, [pc, #236]	; (8002364 <parse_string+0x36c>)
 8002276:	f002 f96d 	bl	8004554 <HAL_GPIO_WritePin>
																			HAL_Delay(velosity_delay);
 800227a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fe39 	bl	8002ef4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 8002282:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002286:	3301      	adds	r3, #1
 8002288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800228c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	429a      	cmp	r2, r3
 8002294:	dbd5      	blt.n	8002242 <parse_string+0x24a>
 8002296:	e049      	b.n	800232c <parse_string+0x334>
																		}
																		//

																	} else if (drive1 < -10 ){
 8002298:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800229c:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80022a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a8:	d534      	bpl.n	8002314 <parse_string+0x31c>
																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);

																		HAL_GPIO_WritePin(GPIOF, DIR1_Pin, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b0:	4830      	ldr	r0, [pc, #192]	; (8002374 <parse_string+0x37c>)
 80022b2:	f002 f94f 	bl	8004554 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022bc:	e024      	b.n	8002308 <parse_string+0x310>
																			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022c4:	4827      	ldr	r0, [pc, #156]	; (8002364 <parse_string+0x36c>)
 80022c6:	f002 f945 	bl	8004554 <HAL_GPIO_WritePin>
																			HAL_GPIO_WritePin(GPIOD, STEP1_Pin, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d0:	4829      	ldr	r0, [pc, #164]	; (8002378 <parse_string+0x380>)
 80022d2:	f002 f93f 	bl	8004554 <HAL_GPIO_WritePin>
																			HAL_Delay(velosity_delay);
 80022d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fe0b 	bl	8002ef4 <HAL_Delay>
																			HAL_GPIO_WritePin(GPIOD, STEP1_Pin, GPIO_PIN_RESET);
 80022de:	2200      	movs	r2, #0
 80022e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022e4:	4824      	ldr	r0, [pc, #144]	; (8002378 <parse_string+0x380>)
 80022e6:	f002 f935 	bl	8004554 <HAL_GPIO_WritePin>
																			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80022ea:	2200      	movs	r2, #0
 80022ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022f0:	481c      	ldr	r0, [pc, #112]	; (8002364 <parse_string+0x36c>)
 80022f2:	f002 f92f 	bl	8004554 <HAL_GPIO_WritePin>
																			HAL_Delay(velosity_delay);
 80022f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fdfb 	bl	8002ef4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 80022fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002302:	3301      	adds	r3, #1
 8002304:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002308:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800230c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230e:	429a      	cmp	r2, r3
 8002310:	dbd5      	blt.n	80022be <parse_string+0x2c6>
 8002312:	e00b      	b.n	800232c <parse_string+0x334>
																		}
																	}else {
																			HAL_GPIO_WritePin(GPIOF, DIR1_Pin, GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800231a:	4816      	ldr	r0, [pc, #88]	; (8002374 <parse_string+0x37c>)
 800231c:	f002 f91a 	bl	8004554 <HAL_GPIO_WritePin>
																			HAL_GPIO_WritePin(GPIOD, STEP1_Pin, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002326:	4814      	ldr	r0, [pc, #80]	; (8002378 <parse_string+0x380>)
 8002328:	f002 f914 	bl	8004554 <HAL_GPIO_WritePin>
																	}

																	if (drive2 > 10) {
 800232c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002330:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233c:	dd42      	ble.n	80023c4 <parse_string+0x3cc>


																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800233e:	2201      	movs	r2, #1
 8002340:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002344:	4807      	ldr	r0, [pc, #28]	; (8002364 <parse_string+0x36c>)
 8002346:	f002 f905 	bl	8004554 <HAL_GPIO_WritePin>

																		HAL_GPIO_WritePin(GPIOE, DIR2_Pin, GPIO_PIN_SET);
 800234a:	2201      	movs	r2, #1
 800234c:	2180      	movs	r1, #128	; 0x80
 800234e:	480b      	ldr	r0, [pc, #44]	; (800237c <parse_string+0x384>)
 8002350:	f002 f900 	bl	8004554 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 8002354:	2300      	movs	r3, #0
 8002356:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002358:	e029      	b.n	80023ae <parse_string+0x3b6>
 800235a:	bf00      	nop
 800235c:	08018b1c 	.word	0x08018b1c
 8002360:	40020800 	.word	0x40020800
 8002364:	40020400 	.word	0x40020400
 8002368:	20000000 	.word	0x20000000
 800236c:	20000008 	.word	0x20000008
 8002370:	08018b20 	.word	0x08018b20
 8002374:	40021400 	.word	0x40021400
 8002378:	40020c00 	.word	0x40020c00
 800237c:	40021000 	.word	0x40021000
																		HAL_GPIO_WritePin(GPIOD, STEP2_Pin, GPIO_PIN_SET);
 8002380:	2201      	movs	r2, #1
 8002382:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002386:	48c2      	ldr	r0, [pc, #776]	; (8002690 <parse_string+0x698>)
 8002388:	f002 f8e4 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 800238c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fdb0 	bl	8002ef4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOD, STEP2_Pin, GPIO_PIN_RESET);
 8002394:	2200      	movs	r2, #0
 8002396:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800239a:	48bd      	ldr	r0, [pc, #756]	; (8002690 <parse_string+0x698>)
 800239c:	f002 f8da 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 80023a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fda6 	bl	8002ef4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 80023a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023aa:	3301      	adds	r3, #1
 80023ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80023b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b2:	429a      	cmp	r2, r3
 80023b4:	dbe4      	blt.n	8002380 <parse_string+0x388>
																		}

																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80023b6:	2200      	movs	r2, #0
 80023b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023bc:	48b5      	ldr	r0, [pc, #724]	; (8002694 <parse_string+0x69c>)
 80023be:	f002 f8c9 	bl	8004554 <HAL_GPIO_WritePin>
 80023c2:	e043      	b.n	800244c <parse_string+0x454>

																	} else if (drive2 < -10){
 80023c4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80023c8:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80023cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	d52f      	bpl.n	8002436 <parse_string+0x43e>

																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80023d6:	2201      	movs	r2, #1
 80023d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023dc:	48ad      	ldr	r0, [pc, #692]	; (8002694 <parse_string+0x69c>)
 80023de:	f002 f8b9 	bl	8004554 <HAL_GPIO_WritePin>

																		HAL_GPIO_WritePin(GPIOE, DIR2_Pin, GPIO_PIN_RESET);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	48ac      	ldr	r0, [pc, #688]	; (8002698 <parse_string+0x6a0>)
 80023e8:	f002 f8b4 	bl	8004554 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 80023ec:	2300      	movs	r3, #0
 80023ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80023f0:	e016      	b.n	8002420 <parse_string+0x428>
																		HAL_GPIO_WritePin(GPIOD, STEP2_Pin, GPIO_PIN_SET);
 80023f2:	2201      	movs	r2, #1
 80023f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023f8:	48a5      	ldr	r0, [pc, #660]	; (8002690 <parse_string+0x698>)
 80023fa:	f002 f8ab 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 80023fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fd77 	bl	8002ef4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOD, STEP2_Pin, GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800240c:	48a0      	ldr	r0, [pc, #640]	; (8002690 <parse_string+0x698>)
 800240e:	f002 f8a1 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fd6d 	bl	8002ef4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 800241a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800241c:	3301      	adds	r3, #1
 800241e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002420:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002424:	429a      	cmp	r2, r3
 8002426:	dbe4      	blt.n	80023f2 <parse_string+0x3fa>
																		}
																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8002428:	2200      	movs	r2, #0
 800242a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800242e:	4899      	ldr	r0, [pc, #612]	; (8002694 <parse_string+0x69c>)
 8002430:	f002 f890 	bl	8004554 <HAL_GPIO_WritePin>
 8002434:	e00a      	b.n	800244c <parse_string+0x454>

																	}else {
																		HAL_GPIO_WritePin(GPIOE, DIR2_Pin, GPIO_PIN_RESET);
 8002436:	2200      	movs	r2, #0
 8002438:	2180      	movs	r1, #128	; 0x80
 800243a:	4897      	ldr	r0, [pc, #604]	; (8002698 <parse_string+0x6a0>)
 800243c:	f002 f88a 	bl	8004554 <HAL_GPIO_WritePin>
																		  HAL_GPIO_WritePin(GPIOD, STEP2_Pin, GPIO_PIN_RESET);
 8002440:	2200      	movs	r2, #0
 8002442:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002446:	4892      	ldr	r0, [pc, #584]	; (8002690 <parse_string+0x698>)
 8002448:	f002 f884 	bl	8004554 <HAL_GPIO_WritePin>
																	}

																	if (instrument > 0.9) {
 800244c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800244e:	f7fe f89b 	bl	8000588 <__aeabi_f2d>
 8002452:	a38b      	add	r3, pc, #556	; (adr r3, 8002680 <parse_string+0x688>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe fb7e 	bl	8000b58 <__aeabi_dcmpgt>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d024      	beq.n	80024ac <parse_string+0x4b4>

																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);

																		HAL_GPIO_WritePin(GPIOD, DIR3_Pin, GPIO_PIN_SET);
 8002462:	2201      	movs	r2, #1
 8002464:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002468:	4889      	ldr	r0, [pc, #548]	; (8002690 <parse_string+0x698>)
 800246a:	f002 f873 	bl	8004554 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 800246e:	2300      	movs	r3, #0
 8002470:	677b      	str	r3, [r7, #116]	; 0x74
 8002472:	e016      	b.n	80024a2 <parse_string+0x4aa>
																		HAL_GPIO_WritePin(GPIOD, STEP3_Pin, GPIO_PIN_SET);
 8002474:	2201      	movs	r2, #1
 8002476:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800247a:	4885      	ldr	r0, [pc, #532]	; (8002690 <parse_string+0x698>)
 800247c:	f002 f86a 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fd36 	bl	8002ef4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOD, STEP3_Pin, GPIO_PIN_RESET);
 8002488:	2200      	movs	r2, #0
 800248a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800248e:	4880      	ldr	r0, [pc, #512]	; (8002690 <parse_string+0x698>)
 8002490:	f002 f860 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fd2c 	bl	8002ef4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 800249c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800249e:	3301      	adds	r3, #1
 80024a0:	677b      	str	r3, [r7, #116]	; 0x74
 80024a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a6:	429a      	cmp	r2, r3
 80024a8:	dbe4      	blt.n	8002474 <parse_string+0x47c>
 80024aa:	e03b      	b.n	8002524 <parse_string+0x52c>
																		}

																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);

																	} else if (instrument < -0.9){
 80024ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80024ae:	f7fe f86b 	bl	8000588 <__aeabi_f2d>
 80024b2:	a375      	add	r3, pc, #468	; (adr r3, 8002688 <parse_string+0x690>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	f7fe fb30 	bl	8000b1c <__aeabi_dcmplt>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d024      	beq.n	800250c <parse_string+0x514>

																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);

																	    HAL_GPIO_WritePin(GPIOD, DIR3_Pin, GPIO_PIN_RESET);
 80024c2:	2200      	movs	r2, #0
 80024c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024c8:	4871      	ldr	r0, [pc, #452]	; (8002690 <parse_string+0x698>)
 80024ca:	f002 f843 	bl	8004554 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 80024ce:	2300      	movs	r3, #0
 80024d0:	673b      	str	r3, [r7, #112]	; 0x70
 80024d2:	e016      	b.n	8002502 <parse_string+0x50a>
																		HAL_GPIO_WritePin(GPIOD, STEP3_Pin, GPIO_PIN_SET);
 80024d4:	2201      	movs	r2, #1
 80024d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024da:	486d      	ldr	r0, [pc, #436]	; (8002690 <parse_string+0x698>)
 80024dc:	f002 f83a 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 80024e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fd06 	bl	8002ef4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOD, STEP3_Pin, GPIO_PIN_RESET);
 80024e8:	2200      	movs	r2, #0
 80024ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024ee:	4868      	ldr	r0, [pc, #416]	; (8002690 <parse_string+0x698>)
 80024f0:	f002 f830 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 80024f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fcfc 	bl	8002ef4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 80024fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024fe:	3301      	adds	r3, #1
 8002500:	673b      	str	r3, [r7, #112]	; 0x70
 8002502:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002506:	429a      	cmp	r2, r3
 8002508:	dbe4      	blt.n	80024d4 <parse_string+0x4dc>
 800250a:	e00b      	b.n	8002524 <parse_string+0x52c>
																		}
																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);

																	}else {
																		HAL_GPIO_WritePin(GPIOD, DIR3_Pin, GPIO_PIN_RESET);
 800250c:	2200      	movs	r2, #0
 800250e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002512:	485f      	ldr	r0, [pc, #380]	; (8002690 <parse_string+0x698>)
 8002514:	f002 f81e 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOD, STEP3_Pin, GPIO_PIN_RESET);
 8002518:	2200      	movs	r2, #0
 800251a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800251e:	485c      	ldr	r0, [pc, #368]	; (8002690 <parse_string+0x698>)
 8002520:	f002 f818 	bl	8004554 <HAL_GPIO_WritePin>
																	}
																	//rotation
																	if (rotation > 0.9) {
 8002524:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002526:	f7fe f82f 	bl	8000588 <__aeabi_f2d>
 800252a:	a355      	add	r3, pc, #340	; (adr r3, 8002680 <parse_string+0x688>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	f7fe fb12 	bl	8000b58 <__aeabi_dcmpgt>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d030      	beq.n	800259c <parse_string+0x5a4>

																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800253a:	2201      	movs	r2, #1
 800253c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002540:	4854      	ldr	r0, [pc, #336]	; (8002694 <parse_string+0x69c>)
 8002542:	f002 f807 	bl	8004554 <HAL_GPIO_WritePin>

																		HAL_GPIO_WritePin(GPIOE, DIR5_Pin, GPIO_PIN_SET);
 8002546:	2201      	movs	r2, #1
 8002548:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800254c:	4852      	ldr	r0, [pc, #328]	; (8002698 <parse_string+0x6a0>)
 800254e:	f002 f801 	bl	8004554 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 8002552:	2300      	movs	r3, #0
 8002554:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002556:	e016      	b.n	8002586 <parse_string+0x58e>
																		HAL_GPIO_WritePin(GPIOE, STEP5_Pin, GPIO_PIN_SET);
 8002558:	2201      	movs	r2, #1
 800255a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800255e:	484e      	ldr	r0, [pc, #312]	; (8002698 <parse_string+0x6a0>)
 8002560:	f001 fff8 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fcc4 	bl	8002ef4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOE, STEP5_Pin, GPIO_PIN_RESET);
 800256c:	2200      	movs	r2, #0
 800256e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002572:	4849      	ldr	r0, [pc, #292]	; (8002698 <parse_string+0x6a0>)
 8002574:	f001 ffee 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fcba 	bl	8002ef4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 8002580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002582:	3301      	adds	r3, #1
 8002584:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002586:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258a:	429a      	cmp	r2, r3
 800258c:	dbe4      	blt.n	8002558 <parse_string+0x560>
																		}


																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800258e:	2200      	movs	r2, #0
 8002590:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002594:	483f      	ldr	r0, [pc, #252]	; (8002694 <parse_string+0x69c>)
 8002596:	f001 ffdd 	bl	8004554 <HAL_GPIO_WritePin>
 800259a:	e041      	b.n	8002620 <parse_string+0x628>

																	} else if (rotation < -0.9){
 800259c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800259e:	f7fd fff3 	bl	8000588 <__aeabi_f2d>
 80025a2:	a339      	add	r3, pc, #228	; (adr r3, 8002688 <parse_string+0x690>)
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	f7fe fab8 	bl	8000b1c <__aeabi_dcmplt>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d02a      	beq.n	8002608 <parse_string+0x610>

																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80025b2:	2201      	movs	r2, #1
 80025b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025b8:	4836      	ldr	r0, [pc, #216]	; (8002694 <parse_string+0x69c>)
 80025ba:	f001 ffcb 	bl	8004554 <HAL_GPIO_WritePin>

																		for(int i=0; i<steps_count; i++){
 80025be:	2300      	movs	r3, #0
 80025c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80025c2:	e016      	b.n	80025f2 <parse_string+0x5fa>
																		HAL_GPIO_WritePin(GPIOE, STEP5_Pin, GPIO_PIN_SET);
 80025c4:	2201      	movs	r2, #1
 80025c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025ca:	4833      	ldr	r0, [pc, #204]	; (8002698 <parse_string+0x6a0>)
 80025cc:	f001 ffc2 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 80025d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fc8e 	bl	8002ef4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOE, STEP5_Pin, GPIO_PIN_RESET);
 80025d8:	2200      	movs	r2, #0
 80025da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025de:	482e      	ldr	r0, [pc, #184]	; (8002698 <parse_string+0x6a0>)
 80025e0:	f001 ffb8 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 80025e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fc84 	bl	8002ef4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 80025ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ee:	3301      	adds	r3, #1
 80025f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80025f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f6:	429a      	cmp	r2, r3
 80025f8:	dbe4      	blt.n	80025c4 <parse_string+0x5cc>
																		}
																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80025fa:	2200      	movs	r2, #0
 80025fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002600:	4824      	ldr	r0, [pc, #144]	; (8002694 <parse_string+0x69c>)
 8002602:	f001 ffa7 	bl	8004554 <HAL_GPIO_WritePin>
 8002606:	e00b      	b.n	8002620 <parse_string+0x628>

																	}else {
																		HAL_GPIO_WritePin(GPIOE, DIR5_Pin, GPIO_PIN_RESET);
 8002608:	2200      	movs	r2, #0
 800260a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800260e:	4822      	ldr	r0, [pc, #136]	; (8002698 <parse_string+0x6a0>)
 8002610:	f001 ffa0 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOE, STEP5_Pin, GPIO_PIN_RESET);
 8002614:	2200      	movs	r2, #0
 8002616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800261a:	481f      	ldr	r0, [pc, #124]	; (8002698 <parse_string+0x6a0>)
 800261c:	f001 ff9a 	bl	8004554 <HAL_GPIO_WritePin>
																	}
																	//rezka
																	if (rezka > 0.9) {
 8002620:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002622:	f7fd ffb1 	bl	8000588 <__aeabi_f2d>
 8002626:	a316      	add	r3, pc, #88	; (adr r3, 8002680 <parse_string+0x688>)
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f7fe fa94 	bl	8000b58 <__aeabi_dcmpgt>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d032      	beq.n	800269c <parse_string+0x6a4>

																		//HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);

																		HAL_GPIO_WritePin(GPIOD, DIR4_Pin, GPIO_PIN_SET);
 8002636:	2201      	movs	r2, #1
 8002638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800263c:	4814      	ldr	r0, [pc, #80]	; (8002690 <parse_string+0x698>)
 800263e:	f001 ff89 	bl	8004554 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 8002642:	2300      	movs	r3, #0
 8002644:	667b      	str	r3, [r7, #100]	; 0x64
 8002646:	e016      	b.n	8002676 <parse_string+0x67e>
																		HAL_GPIO_WritePin(GPIOE, STEP4_Pin, GPIO_PIN_SET);
 8002648:	2201      	movs	r2, #1
 800264a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800264e:	4812      	ldr	r0, [pc, #72]	; (8002698 <parse_string+0x6a0>)
 8002650:	f001 ff80 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fc4c 	bl	8002ef4 <HAL_Delay>
																		HAL_GPIO_WritePin(GPIOE, STEP4_Pin, GPIO_PIN_RESET);
 800265c:	2200      	movs	r2, #0
 800265e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002662:	480d      	ldr	r0, [pc, #52]	; (8002698 <parse_string+0x6a0>)
 8002664:	f001 ff76 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_Delay(velosity_delay);
 8002668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fc42 	bl	8002ef4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 8002670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002672:	3301      	adds	r3, #1
 8002674:	667b      	str	r3, [r7, #100]	; 0x64
 8002676:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267a:	429a      	cmp	r2, r3
 800267c:	dbe4      	blt.n	8002648 <parse_string+0x650>
 800267e:	e049      	b.n	8002714 <parse_string+0x71c>
 8002680:	cccccccd 	.word	0xcccccccd
 8002684:	3feccccc 	.word	0x3feccccc
 8002688:	cccccccd 	.word	0xcccccccd
 800268c:	bfeccccc 	.word	0xbfeccccc
 8002690:	40020c00 	.word	0x40020c00
 8002694:	40020400 	.word	0x40020400
 8002698:	40021000 	.word	0x40021000
																		}

																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);

																	} else if (rezka < -0.9){
 800269c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800269e:	f7fd ff73 	bl	8000588 <__aeabi_f2d>
 80026a2:	a397      	add	r3, pc, #604	; (adr r3, 8002900 <parse_string+0x908>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	f7fe fa38 	bl	8000b1c <__aeabi_dcmplt>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d024      	beq.n	80026fc <parse_string+0x704>

																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);

																		HAL_GPIO_WritePin(GPIOD, DIR4_Pin, GPIO_PIN_RESET);
 80026b2:	2200      	movs	r2, #0
 80026b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026b8:	4893      	ldr	r0, [pc, #588]	; (8002908 <parse_string+0x910>)
 80026ba:	f001 ff4b 	bl	8004554 <HAL_GPIO_WritePin>
																		for(int i=0; i<steps_count; i++){
 80026be:	2300      	movs	r3, #0
 80026c0:	663b      	str	r3, [r7, #96]	; 0x60
 80026c2:	e016      	b.n	80026f2 <parse_string+0x6fa>
																			HAL_GPIO_WritePin(GPIOE, STEP4_Pin, GPIO_PIN_SET);
 80026c4:	2201      	movs	r2, #1
 80026c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026ca:	4890      	ldr	r0, [pc, #576]	; (800290c <parse_string+0x914>)
 80026cc:	f001 ff42 	bl	8004554 <HAL_GPIO_WritePin>
																			HAL_Delay(velosity_delay);
 80026d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fc0e 	bl	8002ef4 <HAL_Delay>
																			HAL_GPIO_WritePin(GPIOE, STEP4_Pin, GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026de:	488b      	ldr	r0, [pc, #556]	; (800290c <parse_string+0x914>)
 80026e0:	f001 ff38 	bl	8004554 <HAL_GPIO_WritePin>
																			HAL_Delay(velosity_delay);
 80026e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fc04 	bl	8002ef4 <HAL_Delay>
																		for(int i=0; i<steps_count; i++){
 80026ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ee:	3301      	adds	r3, #1
 80026f0:	663b      	str	r3, [r7, #96]	; 0x60
 80026f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	429a      	cmp	r2, r3
 80026f8:	dbe4      	blt.n	80026c4 <parse_string+0x6cc>
 80026fa:	e00b      	b.n	8002714 <parse_string+0x71c>
																		}
																	//	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);

																	}else {
																		HAL_GPIO_WritePin(GPIOD, DIR4_Pin, GPIO_PIN_RESET);
 80026fc:	2200      	movs	r2, #0
 80026fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002702:	4881      	ldr	r0, [pc, #516]	; (8002908 <parse_string+0x910>)
 8002704:	f001 ff26 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOE, STEP4_Pin, GPIO_PIN_RESET);
 8002708:	2200      	movs	r2, #0
 800270a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800270e:	487f      	ldr	r0, [pc, #508]	; (800290c <parse_string+0x914>)
 8002710:	f001 ff20 	bl	8004554 <HAL_GPIO_WritePin>
																	}

//// INVERSIA !!!!
																	if ( kolonna > 0.9) {
 8002714:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002716:	f7fd ff37 	bl	8000588 <__aeabi_f2d>
 800271a:	a377      	add	r3, pc, #476	; (adr r3, 80028f8 <parse_string+0x900>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	f7fe fa1a 	bl	8000b58 <__aeabi_dcmpgt>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01c      	beq.n	8002764 <parse_string+0x76c>
																		 HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800272a:	2201      	movs	r2, #1
 800272c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002730:	4877      	ldr	r0, [pc, #476]	; (8002910 <parse_string+0x918>)
 8002732:	f001 ff0f 	bl	8004554 <HAL_GPIO_WritePin>
																		 HAL_GPIO_WritePin(GPIOE, PILLAR_ONOFF_Pin, GPIO_PIN_RESET);
 8002736:	2200      	movs	r2, #0
 8002738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800273c:	4873      	ldr	r0, [pc, #460]	; (800290c <parse_string+0x914>)
 800273e:	f001 ff09 	bl	8004554 <HAL_GPIO_WritePin>
																		 HAL_GPIO_WritePin(GPIOF, PILLAR_UPDOWN_Pin, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002748:	4872      	ldr	r0, [pc, #456]	; (8002914 <parse_string+0x91c>)
 800274a:	f001 ff03 	bl	8004554 <HAL_GPIO_WritePin>
																		 HAL_Delay(500);
 800274e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002752:	f000 fbcf 	bl	8002ef4 <HAL_Delay>
																		 HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800275c:	486c      	ldr	r0, [pc, #432]	; (8002910 <parse_string+0x918>)
 800275e:	f001 fef9 	bl	8004554 <HAL_GPIO_WritePin>
 8002762:	e033      	b.n	80027cc <parse_string+0x7d4>

																	} else if ( kolonna < -0.9){
 8002764:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002766:	f7fd ff0f 	bl	8000588 <__aeabi_f2d>
 800276a:	a365      	add	r3, pc, #404	; (adr r3, 8002900 <parse_string+0x908>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f7fe f9d4 	bl	8000b1c <__aeabi_dcmplt>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d01c      	beq.n	80027b4 <parse_string+0x7bc>
																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800277a:	2201      	movs	r2, #1
 800277c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002780:	4863      	ldr	r0, [pc, #396]	; (8002910 <parse_string+0x918>)
 8002782:	f001 fee7 	bl	8004554 <HAL_GPIO_WritePin>

																		 HAL_GPIO_WritePin(GPIOE, PILLAR_ONOFF_Pin, GPIO_PIN_RESET);
 8002786:	2200      	movs	r2, #0
 8002788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800278c:	485f      	ldr	r0, [pc, #380]	; (800290c <parse_string+0x914>)
 800278e:	f001 fee1 	bl	8004554 <HAL_GPIO_WritePin>
																		 HAL_GPIO_WritePin(GPIOF, PILLAR_UPDOWN_Pin, GPIO_PIN_SET);
 8002792:	2201      	movs	r2, #1
 8002794:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002798:	485e      	ldr	r0, [pc, #376]	; (8002914 <parse_string+0x91c>)
 800279a:	f001 fedb 	bl	8004554 <HAL_GPIO_WritePin>
																		 HAL_Delay(500);
 800279e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027a2:	f000 fba7 	bl	8002ef4 <HAL_Delay>
																		 HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80027a6:	2200      	movs	r2, #0
 80027a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027ac:	4858      	ldr	r0, [pc, #352]	; (8002910 <parse_string+0x918>)
 80027ae:	f001 fed1 	bl	8004554 <HAL_GPIO_WritePin>
 80027b2:	e00b      	b.n	80027cc <parse_string+0x7d4>

																	}else {
																		HAL_GPIO_WritePin(GPIOE, PILLAR_ONOFF_Pin, GPIO_PIN_SET);
 80027b4:	2201      	movs	r2, #1
 80027b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ba:	4854      	ldr	r0, [pc, #336]	; (800290c <parse_string+0x914>)
 80027bc:	f001 feca 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOF, PILLAR_UPDOWN_Pin, GPIO_PIN_SET);
 80027c0:	2201      	movs	r2, #1
 80027c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027c6:	4853      	ldr	r0, [pc, #332]	; (8002914 <parse_string+0x91c>)
 80027c8:	f001 fec4 	bl	8004554 <HAL_GPIO_WritePin>
																	}

																	if (magnit1 > 0) {
 80027cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80027d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d8:	dd0c      	ble.n	80027f4 <parse_string+0x7fc>
																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80027da:	2201      	movs	r2, #1
 80027dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027e0:	484b      	ldr	r0, [pc, #300]	; (8002910 <parse_string+0x918>)
 80027e2:	f001 feb7 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOE, MAGNET1_ONOFF_Pin, GPIO_PIN_RESET);
 80027e6:	2200      	movs	r2, #0
 80027e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027ec:	4847      	ldr	r0, [pc, #284]	; (800290c <parse_string+0x914>)
 80027ee:	f001 feb1 	bl	8004554 <HAL_GPIO_WritePin>
 80027f2:	e00b      	b.n	800280c <parse_string+0x814>
																	} else {
																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80027f4:	2200      	movs	r2, #0
 80027f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027fa:	4845      	ldr	r0, [pc, #276]	; (8002910 <parse_string+0x918>)
 80027fc:	f001 feaa 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOE, MAGNET1_ONOFF_Pin, GPIO_PIN_SET);
 8002800:	2201      	movs	r2, #1
 8002802:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002806:	4841      	ldr	r0, [pc, #260]	; (800290c <parse_string+0x914>)
 8002808:	f001 fea4 	bl	8004554 <HAL_GPIO_WritePin>
																	}

																	if (magnit2 > 0) {
 800280c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002810:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002818:	dd0c      	ble.n	8002834 <parse_string+0x83c>
																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800281a:	2201      	movs	r2, #1
 800281c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002820:	483b      	ldr	r0, [pc, #236]	; (8002910 <parse_string+0x918>)
 8002822:	f001 fe97 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOE, MAGNET2_ONOFF_Pin, GPIO_PIN_RESET);
 8002826:	2200      	movs	r2, #0
 8002828:	f44f 7100 	mov.w	r1, #512	; 0x200
 800282c:	4837      	ldr	r0, [pc, #220]	; (800290c <parse_string+0x914>)
 800282e:	f001 fe91 	bl	8004554 <HAL_GPIO_WritePin>
 8002832:	e00b      	b.n	800284c <parse_string+0x854>
																	} else {
																		HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8002834:	2200      	movs	r2, #0
 8002836:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800283a:	4835      	ldr	r0, [pc, #212]	; (8002910 <parse_string+0x918>)
 800283c:	f001 fe8a 	bl	8004554 <HAL_GPIO_WritePin>
																		HAL_GPIO_WritePin(GPIOE, MAGNET2_ONOFF_Pin, GPIO_PIN_SET);
 8002840:	2201      	movs	r2, #1
 8002842:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002846:	4831      	ldr	r0, [pc, #196]	; (800290c <parse_string+0x914>)
 8002848:	f001 fe84 	bl	8004554 <HAL_GPIO_WritePin>



																	// run robot
																	char *buf;
																	buf = (char *) malloc(100);
 800284c:	2064      	movs	r0, #100	; 0x64
 800284e:	f012 f8df 	bl	8014a10 <malloc>
 8002852:	4603      	mov	r3, r0
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
																	sprintf(buf,"rcvd: %f; %f; %f; %f; %f; %f; %f; %f;\n", drive1, drive2, instrument, kolonna, rotation, rezka, magnit1, magnit2);
 8002856:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002858:	f7fd fe96 	bl	8000588 <__aeabi_f2d>
 800285c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002860:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002862:	f7fd fe91 	bl	8000588 <__aeabi_f2d>
 8002866:	4682      	mov	sl, r0
 8002868:	468b      	mov	fp, r1
 800286a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800286c:	f7fd fe8c 	bl	8000588 <__aeabi_f2d>
 8002870:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002874:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002876:	f7fd fe87 	bl	8000588 <__aeabi_f2d>
 800287a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800287e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002880:	f7fd fe82 	bl	8000588 <__aeabi_f2d>
 8002884:	e9c7 0100 	strd	r0, r1, [r7]
 8002888:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800288a:	f7fd fe7d 	bl	8000588 <__aeabi_f2d>
 800288e:	4680      	mov	r8, r0
 8002890:	4689      	mov	r9, r1
 8002892:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002894:	f7fd fe78 	bl	8000588 <__aeabi_f2d>
 8002898:	4605      	mov	r5, r0
 800289a:	460e      	mov	r6, r1
 800289c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800289e:	f7fd fe73 	bl	8000588 <__aeabi_f2d>
 80028a2:	4603      	mov	r3, r0
 80028a4:	460c      	mov	r4, r1
 80028a6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80028aa:	e9cd 560a 	strd	r5, r6, [sp, #40]	; 0x28
 80028ae:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80028b2:	ed97 7b00 	vldr	d7, [r7]
 80028b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80028ba:	ed97 7b02 	vldr	d7, [r7, #8]
 80028be:	ed8d 7b04 	vstr	d7, [sp, #16]
 80028c2:	ed97 7b04 	vldr	d7, [r7, #16]
 80028c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80028ca:	e9cd ab00 	strd	sl, fp, [sp]
 80028ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d2:	4911      	ldr	r1, [pc, #68]	; (8002918 <parse_string+0x920>)
 80028d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028d6:	f012 fe59 	bl	801558c <siprintf>
																	return buf;
 80028da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028dc:	e006      	b.n	80028ec <parse_string+0x8f4>
					}
				}
			}
		}
	}
	DEBUG_BAD
 80028de:	2002      	movs	r0, #2
 80028e0:	f000 fa60 	bl	8002da4 <BSP_LED_On>
 80028e4:	2001      	movs	r0, #1
 80028e6:	f000 fa77 	bl	8002dd8 <BSP_LED_Off>
	return NULL;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	378c      	adds	r7, #140	; 0x8c
 80028f0:	46bd      	mov	sp, r7
 80028f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028f6:	bf00      	nop
 80028f8:	cccccccd 	.word	0xcccccccd
 80028fc:	3feccccc 	.word	0x3feccccc
 8002900:	cccccccd 	.word	0xcccccccd
 8002904:	bfeccccc 	.word	0xbfeccccc
 8002908:	40020c00 	.word	0x40020c00
 800290c:	40021000 	.word	0x40021000
 8002910:	40020400 	.word	0x40020400
 8002914:	40021400 	.word	0x40021400
 8002918:	08018b24 	.word	0x08018b24

0800291c <tcp_echoserver_recv>:
 * @param  pbuf: pointer on the received pbuf
 * @param  err: error information regarding the reveived pbuf
 * @retval err_t: error code
 */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b096      	sub	sp, #88	; 0x58
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	70fb      	strb	r3, [r7, #3]
	err_t ret_err;

	char str[50];
	char *buf;

	LWIP_ASSERT("arg != NULL",arg != NULL);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d106      	bne.n	800293e <tcp_echoserver_recv+0x22>
 8002930:	4b80      	ldr	r3, [pc, #512]	; (8002b34 <tcp_echoserver_recv+0x218>)
 8002932:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8002936:	4980      	ldr	r1, [pc, #512]	; (8002b38 <tcp_echoserver_recv+0x21c>)
 8002938:	4880      	ldr	r0, [pc, #512]	; (8002b3c <tcp_echoserver_recv+0x220>)
 800293a:	f012 fdcb 	bl	80154d4 <iprintf>

	es = (struct tcp_echoserver_struct *)arg;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	653b      	str	r3, [r7, #80]	; 0x50

	/* if we receive an empty tcp frame from client => close connection */
	if (p == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d13e      	bne.n	80029c6 <tcp_echoserver_recv+0xaa>
	{
		/* remote host closed connection */
		es->state = ES_CLOSING;
 8002948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800294a:	2203      	movs	r2, #3
 800294c:	701a      	strb	r2, [r3, #0]
		if(es->p == NULL)
 800294e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d104      	bne.n	8002960 <tcp_echoserver_recv+0x44>
		{
			/* we're done sending, close connection */
			tcp_echoserver_connection_close(tpcb, es);
 8002956:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002958:	68b8      	ldr	r0, [r7, #8]
 800295a:	f000 f9b0 	bl	8002cbe <tcp_echoserver_connection_close>
 800295e:	e02e      	b.n	80029be <tcp_echoserver_recv+0xa2>
		}
		else
		{
			/* we're not done yet */
			/* acknowledge received packet */
			tcp_sent(tpcb, tcp_echoserver_sent);
 8002960:	4977      	ldr	r1, [pc, #476]	; (8002b40 <tcp_echoserver_recv+0x224>)
 8002962:	68b8      	ldr	r0, [r7, #8]
 8002964:	f00c ff7a 	bl	800f85c <tcp_sent>

			/* send remaining data*/
			//tcp_echoserver_send(tpcb, es);

			memcpy(str, p -> payload, p -> len);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	895b      	ldrh	r3, [r3, #10]
 8002970:	461a      	mov	r2, r3
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	4618      	mov	r0, r3
 8002978:	f012 f87b 	bl	8014a72 <memcpy>
			buf = parse_string(str, p->len);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	895b      	ldrh	r3, [r3, #10]
 8002980:	461a      	mov	r2, r3
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fb35 	bl	8001ff8 <parse_string>
 800298e:	64b8      	str	r0, [r7, #72]	; 0x48

			/*
			 * Отсылка данных не столько важна, но для отладки это хорошо
			 * */
			if(buf!=NULL){
 8002990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002992:	2b00      	cmp	r3, #0
 8002994:	d013      	beq.n	80029be <tcp_echoserver_recv+0xa2>
				p -> payload = buf;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800299a:	605a      	str	r2, [r3, #4]
				p -> len = strlen(buf);
 800299c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800299e:	f7fd fc37 	bl	8000210 <strlen>
 80029a2:	4603      	mov	r3, r0
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	815a      	strh	r2, [r3, #10]
				es->p = p;
 80029aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	609a      	str	r2, [r3, #8]

				tcp_echoserver_send(tpcb, es);
 80029b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80029b2:	68b8      	ldr	r0, [r7, #8]
 80029b4:	f000 f930 	bl	8002c18 <tcp_echoserver_send>
				free(buf);
 80029b8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80029ba:	f012 f831 	bl	8014a20 <free>
			}


		}
		ret_err = ERR_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80029c4:	e0af      	b.n	8002b26 <tcp_echoserver_recv+0x20a>
	}
	/* else : a non empty frame was received from client but for some reason err != ERR_OK */
	else if(err != ERR_OK)
 80029c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00c      	beq.n	80029e8 <tcp_echoserver_recv+0xcc>
	{
		/* free received pbuf*/
		if (p != NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <tcp_echoserver_recv+0xc4>
		{
			es->p = NULL;
 80029d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
			pbuf_free(p);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f00b f900 	bl	800dbe0 <pbuf_free>
		}
		ret_err = err;
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80029e6:	e09e      	b.n	8002b26 <tcp_echoserver_recv+0x20a>
	}
	else if(es->state == ES_ACCEPTED)
 80029e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d138      	bne.n	8002a62 <tcp_echoserver_recv+0x146>
	{
		/* first data chunk in p->payload */
		es->state = ES_RECEIVED;
 80029f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f2:	2202      	movs	r2, #2
 80029f4:	701a      	strb	r2, [r3, #0]

		/* store reference to incoming pbuf (chain) */
		es->p = p;
 80029f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]

		/* initialize LwIP tcp_sent callback function */
		tcp_sent(tpcb, tcp_echoserver_sent);
 80029fc:	4950      	ldr	r1, [pc, #320]	; (8002b40 <tcp_echoserver_recv+0x224>)
 80029fe:	68b8      	ldr	r0, [r7, #8]
 8002a00:	f00c ff2c 	bl	800f85c <tcp_sent>

		/* send back the received data (echo) */
		//tcp_echoserver_send(tpcb, es);

		memcpy(str, p -> payload, p -> len);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	895b      	ldrh	r3, [r3, #10]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4618      	mov	r0, r3
 8002a14:	f012 f82d 	bl	8014a72 <memcpy>
		buf = parse_string(str, p->len);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	895b      	ldrh	r3, [r3, #10]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fae7 	bl	8001ff8 <parse_string>
 8002a2a:	64b8      	str	r0, [r7, #72]	; 0x48

		/*
		 * Отсылка данных не столько важна, но для отладки это хорошо
		 * */
		if(buf!=NULL){
 8002a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d013      	beq.n	8002a5a <tcp_echoserver_recv+0x13e>
			p -> payload = buf;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a36:	605a      	str	r2, [r3, #4]
			p -> len = strlen(buf);
 8002a38:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002a3a:	f7fd fbe9 	bl	8000210 <strlen>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	815a      	strh	r2, [r3, #10]
			es->p = p;
 8002a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	609a      	str	r2, [r3, #8]

			tcp_echoserver_send(tpcb, es);
 8002a4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002a4e:	68b8      	ldr	r0, [r7, #8]
 8002a50:	f000 f8e2 	bl	8002c18 <tcp_echoserver_send>
			free(buf);
 8002a54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002a56:	f011 ffe3 	bl	8014a20 <free>
		}

		ret_err = ERR_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002a60:	e061      	b.n	8002b26 <tcp_echoserver_recv+0x20a>
	}
	else if (es->state == ES_RECEIVED)
 8002a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d13a      	bne.n	8002ae0 <tcp_echoserver_recv+0x1c4>
	{
		/* more data received from client and previous data has been already sent*/
		if(es->p == NULL)
 8002a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d12b      	bne.n	8002aca <tcp_echoserver_recv+0x1ae>
		{
			//			es->p = p;
			/* send back received data */
			//			tcp_echoserver_send(tpcb, es);

			memcpy(str, p -> payload, p -> len);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	895b      	ldrh	r3, [r3, #10]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	4618      	mov	r0, r3
 8002a82:	f011 fff6 	bl	8014a72 <memcpy>
			buf = parse_string(str, p->len);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	895b      	ldrh	r3, [r3, #10]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fab0 	bl	8001ff8 <parse_string>
 8002a98:	64b8      	str	r0, [r7, #72]	; 0x48

			/*
			 * Отсылка данных не столько важна, но для отладки это хорошо
			 * */
			if(buf!=NULL){
 8002a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01b      	beq.n	8002ad8 <tcp_echoserver_recv+0x1bc>
				p -> payload = buf;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aa4:	605a      	str	r2, [r3, #4]
				p -> len = strlen(buf);
 8002aa6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002aa8:	f7fd fbb2 	bl	8000210 <strlen>
 8002aac:	4603      	mov	r3, r0
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	815a      	strh	r2, [r3, #10]
				es->p = p;
 8002ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	609a      	str	r2, [r3, #8]

				tcp_echoserver_send(tpcb, es);
 8002aba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002abc:	68b8      	ldr	r0, [r7, #8]
 8002abe:	f000 f8ab 	bl	8002c18 <tcp_echoserver_send>
				free(buf);
 8002ac2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002ac4:	f011 ffac 	bl	8014a20 <free>
 8002ac8:	e006      	b.n	8002ad8 <tcp_echoserver_recv+0x1bc>
		else
		{
			struct pbuf *ptr;

			/* chain pbufs to the end of what we recv'ed previously  */
			ptr = es->p;
 8002aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	64fb      	str	r3, [r7, #76]	; 0x4c
			pbuf_chain(ptr,p);
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ad4:	f00b f9a8 	bl	800de28 <pbuf_chain>
		}
		ret_err = ERR_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002ade:	e022      	b.n	8002b26 <tcp_echoserver_recv+0x20a>
	}
	else if(es->state == ES_CLOSING)
 8002ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d10f      	bne.n	8002b08 <tcp_echoserver_recv+0x1ec>
	{
		/* odd case, remote side closing twice, trash data */
		tcp_recved(tpcb, p->tot_len);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	891b      	ldrh	r3, [r3, #8]
 8002aec:	4619      	mov	r1, r3
 8002aee:	68b8      	ldr	r0, [r7, #8]
 8002af0:	f00b ffe4 	bl	800eabc <tcp_recved>
		es->p = NULL;
 8002af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f00b f870 	bl	800dbe0 <pbuf_free>
		ret_err = ERR_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002b06:	e00e      	b.n	8002b26 <tcp_echoserver_recv+0x20a>
	}
	else
	{
		/* unkown es->state, trash data  */
		tcp_recved(tpcb, p->tot_len);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	891b      	ldrh	r3, [r3, #8]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	68b8      	ldr	r0, [r7, #8]
 8002b10:	f00b ffd4 	bl	800eabc <tcp_recved>
		es->p = NULL;
 8002b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f00b f860 	bl	800dbe0 <pbuf_free>
		ret_err = ERR_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	return ret_err;
 8002b26:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3758      	adds	r7, #88	; 0x58
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	08018b4c 	.word	0x08018b4c
 8002b38:	08018b74 	.word	0x08018b74
 8002b3c:	08018b80 	.word	0x08018b80
 8002b40:	08002bc9 	.word	0x08002bc9

08002b44 <tcp_echoserver_error>:
 * @param  arg: pointer on argument parameter
 * @param  err: not used
 * @retval None
 */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	70fb      	strb	r3, [r7, #3]
	struct tcp_echoserver_struct *es;

	LWIP_UNUSED_ARG(err);

	es = (struct tcp_echoserver_struct *)arg;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	60fb      	str	r3, [r7, #12]
	if (es != NULL)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <tcp_echoserver_error+0x1c>
	{
		/*  free es structure */
		mem_free(es);
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f009 fefa 	bl	800c954 <mem_free>
	}
}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <tcp_echoserver_poll>:
 * @param  arg: pointer on argument passed to callback
 * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
 * @retval err_t: error code
 */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
	err_t ret_err;
	struct tcp_echoserver_struct *es;

	es = (struct tcp_echoserver_struct *)arg;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	60bb      	str	r3, [r7, #8]
	if (es != NULL)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d017      	beq.n	8002bac <tcp_echoserver_poll+0x44>
	{
		if (es->p != NULL)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <tcp_echoserver_poll+0x2e>
		{
			tcp_sent(tpcb, tcp_echoserver_sent);
 8002b84:	490f      	ldr	r1, [pc, #60]	; (8002bc4 <tcp_echoserver_poll+0x5c>)
 8002b86:	6838      	ldr	r0, [r7, #0]
 8002b88:	f00c fe68 	bl	800f85c <tcp_sent>
			/* there is a remaining pbuf (chain) , try to send data */
			tcp_echoserver_send(tpcb, es);
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	6838      	ldr	r0, [r7, #0]
 8002b90:	f000 f842 	bl	8002c18 <tcp_echoserver_send>
 8002b94:	e007      	b.n	8002ba6 <tcp_echoserver_poll+0x3e>
		}
		else
		{
			/* no remaining pbuf (chain)  */
			if(es->state == ES_CLOSING)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d103      	bne.n	8002ba6 <tcp_echoserver_poll+0x3e>
			{
				/*  close tcp connection */
				tcp_echoserver_connection_close(tpcb, es);
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	6838      	ldr	r0, [r7, #0]
 8002ba2:	f000 f88c 	bl	8002cbe <tcp_echoserver_connection_close>
			}
		}
		ret_err = ERR_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
 8002baa:	e004      	b.n	8002bb6 <tcp_echoserver_poll+0x4e>
	}
	else
	{
		/* nothing to be done */
		tcp_abort(tpcb);
 8002bac:	6838      	ldr	r0, [r7, #0]
 8002bae:	f00b fdab 	bl	800e708 <tcp_abort>
		ret_err = ERR_ABRT;
 8002bb2:	23f3      	movs	r3, #243	; 0xf3
 8002bb4:	73fb      	strb	r3, [r7, #15]
	}
	return ret_err;
 8002bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	08002bc9 	.word	0x08002bc9

08002bc8 <tcp_echoserver_sent>:
 *         is received from remote host for sent data)
 * @param  None
 * @retval None
 */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]
	struct tcp_echoserver_struct *es;

	LWIP_UNUSED_ARG(len);

	es = (struct tcp_echoserver_struct *)arg;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	617b      	str	r3, [r7, #20]
	es->retries = 0;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	705a      	strb	r2, [r3, #1]

	if(es->p != NULL)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <tcp_echoserver_sent+0x32>
	{
		/* still got pbufs to send */
		tcp_sent(tpcb, tcp_echoserver_sent);
 8002be8:	490a      	ldr	r1, [pc, #40]	; (8002c14 <tcp_echoserver_sent+0x4c>)
 8002bea:	68b8      	ldr	r0, [r7, #8]
 8002bec:	f00c fe36 	bl	800f85c <tcp_sent>
		tcp_echoserver_send(tpcb, es);
 8002bf0:	6979      	ldr	r1, [r7, #20]
 8002bf2:	68b8      	ldr	r0, [r7, #8]
 8002bf4:	f000 f810 	bl	8002c18 <tcp_echoserver_send>
 8002bf8:	e007      	b.n	8002c0a <tcp_echoserver_sent+0x42>
	}
	else
	{
		/* if no more data to send and client closed connection*/
		if(es->state == ES_CLOSING)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d103      	bne.n	8002c0a <tcp_echoserver_sent+0x42>
			tcp_echoserver_connection_close(tpcb, es);
 8002c02:	6979      	ldr	r1, [r7, #20]
 8002c04:	68b8      	ldr	r0, [r7, #8]
 8002c06:	f000 f85a 	bl	8002cbe <tcp_echoserver_connection_close>
	}
	return ERR_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	08002bc9 	.word	0x08002bc9

08002c18 <tcp_echoserver_send>:
 * @param  tpcb: pointer on the tcp_pcb connection
 * @param  es: pointer on echo_state structure
 * @retval None
 */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
	struct pbuf *ptr;
	err_t wr_err = ERR_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	75fb      	strb	r3, [r7, #23]

	while ((wr_err == ERR_OK) &&
 8002c26:	e036      	b.n	8002c96 <tcp_echoserver_send+0x7e>
			(es->p != NULL) &&
			(es->p->len <= tcp_sndbuf(tpcb)))
	{

		/* get pointer on pbuf from es structure */
		ptr = es->p;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	613b      	str	r3, [r7, #16]

		/* enqueue data for transmission */
		wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	6859      	ldr	r1, [r3, #4]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	895a      	ldrh	r2, [r3, #10]
 8002c36:	2301      	movs	r3, #1
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f00f f935 	bl	8011ea8 <tcp_write>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	75fb      	strb	r3, [r7, #23]

		if (wr_err == ERR_OK)
 8002c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d11d      	bne.n	8002c86 <tcp_echoserver_send+0x6e>
		{
			u16_t plen;
			u8_t freed;

			plen = ptr->len;
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	895b      	ldrh	r3, [r3, #10]
 8002c4e:	81fb      	strh	r3, [r7, #14]

			/* continue with next pbuf in chain (if any) */
			es->p = ptr->next;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	609a      	str	r2, [r3, #8]

			if(es->p != NULL)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d004      	beq.n	8002c6a <tcp_echoserver_send+0x52>
			{
				/* increment reference count for es->p */
				pbuf_ref(es->p);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f00b f861 	bl	800dd2c <pbuf_ref>

			/* chop first pbuf from chain */
			do
			{
				/* try hard to free pbuf */
				freed = pbuf_free(ptr);
 8002c6a:	6938      	ldr	r0, [r7, #16]
 8002c6c:	f00a ffb8 	bl	800dbe0 <pbuf_free>
 8002c70:	4603      	mov	r3, r0
 8002c72:	737b      	strb	r3, [r7, #13]
			}
			while(freed == 0);
 8002c74:	7b7b      	ldrb	r3, [r7, #13]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f7      	beq.n	8002c6a <tcp_echoserver_send+0x52>
			/* we can read more data now */
			tcp_recved(tpcb, plen);
 8002c7a:	89fb      	ldrh	r3, [r7, #14]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f00b ff1c 	bl	800eabc <tcp_recved>
 8002c84:	e007      	b.n	8002c96 <tcp_echoserver_send+0x7e>
		}
		else if(wr_err == ERR_MEM)
 8002c86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8e:	d102      	bne.n	8002c96 <tcp_echoserver_send+0x7e>
		{
			/* we are low on memory, try later / harder, defer to poll */
			es->p = ptr;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	609a      	str	r2, [r3, #8]
	while ((wr_err == ERR_OK) &&
 8002c96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10b      	bne.n	8002cb6 <tcp_echoserver_send+0x9e>
			(es->p != NULL) &&
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
	while ((wr_err == ERR_OK) &&
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <tcp_echoserver_send+0x9e>
			(es->p->len <= tcp_sndbuf(tpcb)))
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	895a      	ldrh	r2, [r3, #10]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
			(es->p != NULL) &&
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d9b8      	bls.n	8002c28 <tcp_echoserver_send+0x10>
		else
		{
			/* other problem ?? */
		}
	}
}
 8002cb6:	bf00      	nop
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <tcp_echoserver_connection_close>:
 * @param  tcp_pcb: pointer on the tcp connection
 * @param  es: pointer on echo_state structure
 * @retval None
 */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]

	/* remove all callbacks */
	tcp_arg(tpcb, NULL);
 8002cc8:	2100      	movs	r1, #0
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f00c fd92 	bl	800f7f4 <tcp_arg>
	tcp_sent(tpcb, NULL);
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f00c fdc2 	bl	800f85c <tcp_sent>
	tcp_recv(tpcb, NULL);
 8002cd8:	2100      	movs	r1, #0
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f00c fd9c 	bl	800f818 <tcp_recv>
	tcp_err(tpcb, NULL);
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f00c fdda 	bl	800f89c <tcp_err>
	tcp_poll(tpcb, NULL, 0);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2100      	movs	r1, #0
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f00c fe0f 	bl	800f910 <tcp_poll>

	/* delete es structure */
	if (es != NULL)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <tcp_echoserver_connection_close+0x40>
	{
		mem_free(es);
 8002cf8:	6838      	ldr	r0, [r7, #0]
 8002cfa:	f009 fe2b 	bl	800c954 <mem_free>
	}

	/* close tcp connection */
	tcp_close(tpcb);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f00b fc22 	bl	800e548 <tcp_close>
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	; 0x28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10c      	bne.n	8002d36 <BSP_LED_Init+0x2a>
 8002d1c:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <BSP_LED_Init+0x8c>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <BSP_LED_Init+0x8c>)
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	6313      	str	r3, [r2, #48]	; 0x30
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <BSP_LED_Init+0x8c>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	e00b      	b.n	8002d4e <BSP_LED_Init+0x42>
 8002d36:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <BSP_LED_Init+0x8c>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4a17      	ldr	r2, [pc, #92]	; (8002d98 <BSP_LED_Init+0x8c>)
 8002d3c:	f043 0302 	orr.w	r3, r3, #2
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <BSP_LED_Init+0x8c>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <BSP_LED_Init+0x90>)
 8002d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d60:	2303      	movs	r3, #3
 8002d62:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	4a0e      	ldr	r2, [pc, #56]	; (8002da0 <BSP_LED_Init+0x94>)
 8002d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6c:	f107 0214 	add.w	r2, r7, #20
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 fa2c 	bl	80041d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	4a09      	ldr	r2, [pc, #36]	; (8002da0 <BSP_LED_Init+0x94>)
 8002d7c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	4a06      	ldr	r2, [pc, #24]	; (8002d9c <BSP_LED_Init+0x90>)
 8002d84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f001 fbe2 	bl	8004554 <HAL_GPIO_WritePin>
}
 8002d90:	bf00      	nop
 8002d92:	3728      	adds	r7, #40	; 0x28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	08018ba8 	.word	0x08018ba8
 8002da0:	2000000c 	.word	0x2000000c

08002da4 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <BSP_LED_On+0x2c>)
 8002db2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	4a06      	ldr	r2, [pc, #24]	; (8002dd4 <BSP_LED_On+0x30>)
 8002dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f001 fbc7 	bl	8004554 <HAL_GPIO_WritePin>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	2000000c 	.word	0x2000000c
 8002dd4:	08018ba8 	.word	0x08018ba8

08002dd8 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	4a07      	ldr	r2, [pc, #28]	; (8002e04 <BSP_LED_Off+0x2c>)
 8002de6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	4a06      	ldr	r2, [pc, #24]	; (8002e08 <BSP_LED_Off+0x30>)
 8002dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002df2:	2200      	movs	r2, #0
 8002df4:	4619      	mov	r1, r3
 8002df6:	f001 fbad 	bl	8004554 <HAL_GPIO_WritePin>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	2000000c 	.word	0x2000000c
 8002e08:	08018ba8 	.word	0x08018ba8

08002e0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e10:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <SystemInit+0x5c>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <SystemInit+0x5c>)
 8002e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <SystemInit+0x60>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a11      	ldr	r2, [pc, #68]	; (8002e6c <SystemInit+0x60>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <SystemInit+0x60>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <SystemInit+0x60>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	490d      	ldr	r1, [pc, #52]	; (8002e6c <SystemInit+0x60>)
 8002e38:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <SystemInit+0x64>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <SystemInit+0x60>)
 8002e40:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <SystemInit+0x68>)
 8002e42:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <SystemInit+0x60>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a08      	ldr	r2, [pc, #32]	; (8002e6c <SystemInit+0x60>)
 8002e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <SystemInit+0x60>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e56:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <SystemInit+0x5c>)
 8002e58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e5c:	609a      	str	r2, [r3, #8]
#endif
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000ed00 	.word	0xe000ed00
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	fef6ffff 	.word	0xfef6ffff
 8002e74:	24003010 	.word	0x24003010

08002e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <HAL_Init+0x28>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <HAL_Init+0x28>)
 8002e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e86:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e88:	2003      	movs	r0, #3
 8002e8a:	f000 f902 	bl	8003092 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e8e:	200f      	movs	r0, #15
 8002e90:	f7fe ff94 	bl	8001dbc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002e94:	f000 f806 	bl	8002ea4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023c00 	.word	0x40023c00

08002ea4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_IncTick+0x20>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_IncTick+0x24>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <HAL_IncTick+0x24>)
 8002ec6:	6013      	str	r3, [r2, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000024 	.word	0x20000024
 8002ed8:	20006a54 	.word	0x20006a54

08002edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <HAL_GetTick+0x14>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	20006a54 	.word	0x20006a54

08002ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002efc:	f7ff ffee 	bl	8002edc <HAL_GetTick>
 8002f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d005      	beq.n	8002f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <HAL_Delay+0x40>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4413      	add	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f1a:	bf00      	nop
 8002f1c:	f7ff ffde 	bl	8002edc <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d8f7      	bhi.n	8002f1c <HAL_Delay+0x28>
  {
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000024 	.word	0x20000024

08002f38 <__NVIC_SetPriorityGrouping>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <__NVIC_SetPriorityGrouping+0x40>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f54:	4013      	ands	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f66:	4a04      	ldr	r2, [pc, #16]	; (8002f78 <__NVIC_SetPriorityGrouping+0x40>)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	60d3      	str	r3, [r2, #12]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000ed00 	.word	0xe000ed00
 8002f7c:	05fa0000 	.word	0x05fa0000

08002f80 <__NVIC_GetPriorityGrouping>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <__NVIC_GetPriorityGrouping+0x18>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	f003 0307 	and.w	r3, r3, #7
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_EnableIRQ>:
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	db0b      	blt.n	8002fc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	f003 021f 	and.w	r2, r3, #31
 8002fb4:	4907      	ldr	r1, [pc, #28]	; (8002fd4 <__NVIC_EnableIRQ+0x38>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000e100 	.word	0xe000e100

08002fd8 <__NVIC_SetPriority>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6039      	str	r1, [r7, #0]
 8002fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	db0a      	blt.n	8003002 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	490c      	ldr	r1, [pc, #48]	; (8003024 <__NVIC_SetPriority+0x4c>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	0112      	lsls	r2, r2, #4
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003000:	e00a      	b.n	8003018 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4908      	ldr	r1, [pc, #32]	; (8003028 <__NVIC_SetPriority+0x50>)
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	3b04      	subs	r3, #4
 8003010:	0112      	lsls	r2, r2, #4
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	440b      	add	r3, r1
 8003016:	761a      	strb	r2, [r3, #24]
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000e100 	.word	0xe000e100
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <NVIC_EncodePriority>:
{
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f1c3 0307 	rsb	r3, r3, #7
 8003046:	2b04      	cmp	r3, #4
 8003048:	bf28      	it	cs
 800304a:	2304      	movcs	r3, #4
 800304c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3304      	adds	r3, #4
 8003052:	2b06      	cmp	r3, #6
 8003054:	d902      	bls.n	800305c <NVIC_EncodePriority+0x30>
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3b03      	subs	r3, #3
 800305a:	e000      	b.n	800305e <NVIC_EncodePriority+0x32>
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003060:	f04f 32ff 	mov.w	r2, #4294967295
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43da      	mvns	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	401a      	ands	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003074:	f04f 31ff 	mov.w	r1, #4294967295
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	43d9      	mvns	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003084:	4313      	orrs	r3, r2
}
 8003086:	4618      	mov	r0, r3
 8003088:	3724      	adds	r7, #36	; 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff ff4c 	bl	8002f38 <__NVIC_SetPriorityGrouping>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ba:	f7ff ff61 	bl	8002f80 <__NVIC_GetPriorityGrouping>
 80030be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	6978      	ldr	r0, [r7, #20]
 80030c6:	f7ff ffb1 	bl	800302c <NVIC_EncodePriority>
 80030ca:	4602      	mov	r2, r0
 80030cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff ff80 	bl	8002fd8 <__NVIC_SetPriority>
}
 80030d8:	bf00      	nop
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff ff54 	bl	8002f9c <__NVIC_EnableIRQ>
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003100:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_MPU_Disable+0x24>)
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	4a05      	ldr	r2, [pc, #20]	; (8003120 <HAL_MPU_Disable+0x24>)
 800310a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310e:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <HAL_MPU_Disable+0x28>)
 8003112:	2200      	movs	r2, #0
 8003114:	605a      	str	r2, [r3, #4]
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000ed00 	.word	0xe000ed00
 8003124:	e000ed90 	.word	0xe000ed90

08003128 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003130:	4a0a      	ldr	r2, [pc, #40]	; (800315c <HAL_MPU_Enable+0x34>)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <HAL_MPU_Enable+0x38>)
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	4a08      	ldr	r2, [pc, #32]	; (8003160 <HAL_MPU_Enable+0x38>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003146:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800314a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	e000ed90 	.word	0xe000ed90
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	785a      	ldrb	r2, [r3, #1]
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_MPU_ConfigRegion+0x84>)
 8003172:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d029      	beq.n	80031d0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800317c:	4a1a      	ldr	r2, [pc, #104]	; (80031e8 <HAL_MPU_ConfigRegion+0x84>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	7b1b      	ldrb	r3, [r3, #12]
 8003188:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	7adb      	ldrb	r3, [r3, #11]
 800318e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003190:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7a9b      	ldrb	r3, [r3, #10]
 8003196:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003198:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7b5b      	ldrb	r3, [r3, #13]
 800319e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80031a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	7b9b      	ldrb	r3, [r3, #14]
 80031a6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80031a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7bdb      	ldrb	r3, [r3, #15]
 80031ae:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80031b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7a5b      	ldrb	r3, [r3, #9]
 80031b6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80031b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	7a1b      	ldrb	r3, [r3, #8]
 80031be:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80031c0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80031c8:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80031ca:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80031cc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80031ce:	e005      	b.n	80031dc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_MPU_ConfigRegion+0x84>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80031d6:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <HAL_MPU_ConfigRegion+0x84>)
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed90 	.word	0xe000ed90

080031ec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80031fc:	4ba9      	ldr	r3, [pc, #676]	; (80034a4 <HAL_ETH_Init+0x2b8>)
 80031fe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e183      	b.n	800351a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fe f822 	bl	8001270 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322c:	4b9e      	ldr	r3, [pc, #632]	; (80034a8 <HAL_ETH_Init+0x2bc>)
 800322e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003230:	4a9d      	ldr	r2, [pc, #628]	; (80034a8 <HAL_ETH_Init+0x2bc>)
 8003232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003236:	6453      	str	r3, [r2, #68]	; 0x44
 8003238:	4b9b      	ldr	r3, [pc, #620]	; (80034a8 <HAL_ETH_Init+0x2bc>)
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003244:	4b99      	ldr	r3, [pc, #612]	; (80034ac <HAL_ETH_Init+0x2c0>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4a98      	ldr	r2, [pc, #608]	; (80034ac <HAL_ETH_Init+0x2c0>)
 800324a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800324e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003250:	4b96      	ldr	r3, [pc, #600]	; (80034ac <HAL_ETH_Init+0x2c0>)
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	4994      	ldr	r1, [pc, #592]	; (80034ac <HAL_ETH_Init+0x2c0>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0201 	orr.w	r2, r2, #1
 8003270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003274:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003276:	f7ff fe31 	bl	8002edc <HAL_GetTick>
 800327a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800327c:	e011      	b.n	80032a2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800327e:	f7ff fe2d 	bl	8002edc <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800328c:	d909      	bls.n	80032a2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2203      	movs	r2, #3
 8003292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e13b      	b.n	800351a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e4      	bne.n	800327e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f023 031c 	bic.w	r3, r3, #28
 80032c2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80032c4:	f001 fe18 	bl	8004ef8 <HAL_RCC_GetHCLKFreq>
 80032c8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	4a78      	ldr	r2, [pc, #480]	; (80034b0 <HAL_ETH_Init+0x2c4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d908      	bls.n	80032e4 <HAL_ETH_Init+0xf8>
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4a77      	ldr	r2, [pc, #476]	; (80034b4 <HAL_ETH_Init+0x2c8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d804      	bhi.n	80032e4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f043 0308 	orr.w	r3, r3, #8
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	e027      	b.n	8003334 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	4a73      	ldr	r2, [pc, #460]	; (80034b4 <HAL_ETH_Init+0x2c8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d908      	bls.n	80032fe <HAL_ETH_Init+0x112>
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	4a72      	ldr	r2, [pc, #456]	; (80034b8 <HAL_ETH_Init+0x2cc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d804      	bhi.n	80032fe <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f043 030c 	orr.w	r3, r3, #12
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	e01a      	b.n	8003334 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	4a6d      	ldr	r2, [pc, #436]	; (80034b8 <HAL_ETH_Init+0x2cc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d903      	bls.n	800330e <HAL_ETH_Init+0x122>
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	4a6c      	ldr	r2, [pc, #432]	; (80034bc <HAL_ETH_Init+0x2d0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d911      	bls.n	8003332 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	4a6a      	ldr	r2, [pc, #424]	; (80034bc <HAL_ETH_Init+0x2d0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d908      	bls.n	8003328 <HAL_ETH_Init+0x13c>
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	4a69      	ldr	r2, [pc, #420]	; (80034c0 <HAL_ETH_Init+0x2d4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d804      	bhi.n	8003328 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f043 0304 	orr.w	r3, r3, #4
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	e005      	b.n	8003334 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f043 0310 	orr.w	r3, r3, #16
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	e000      	b.n	8003334 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003332:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800333c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003340:	2100      	movs	r1, #0
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fc19 	bl	8003b7a <HAL_ETH_WritePHYRegister>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003352:	6939      	ldr	r1, [r7, #16]
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fca5 	bl	8003ca4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e0d9      	b.n	800351a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003366:	f640 70ff 	movw	r0, #4095	; 0xfff
 800336a:	f7ff fdc3 	bl	8002ef4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80a6 	beq.w	80034c4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003378:	f7ff fdb0 	bl	8002edc <HAL_GetTick>
 800337c:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800337e:	f107 030c 	add.w	r3, r7, #12
 8003382:	461a      	mov	r2, r3
 8003384:	2101      	movs	r1, #1
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fb8f 	bl	8003aaa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800338c:	f7ff fda6 	bl	8002edc <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	; 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d90f      	bls.n	80033be <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80033a2:	6939      	ldr	r1, [r7, #16]
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fc7d 	bl	8003ca4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e0ad      	b.n	800351a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0da      	beq.n	800337e <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80033c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033cc:	2100      	movs	r1, #0
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fbd3 	bl	8003b7a <HAL_ETH_WritePHYRegister>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00b      	beq.n	80033f2 <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80033de:	6939      	ldr	r1, [r7, #16]
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fc5f 	bl	8003ca4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80033ee:	2301      	movs	r3, #1
 80033f0:	e093      	b.n	800351a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80033f2:	f7ff fd73 	bl	8002edc <HAL_GetTick>
 80033f6:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80033f8:	f107 030c 	add.w	r3, r7, #12
 80033fc:	461a      	mov	r2, r3
 80033fe:	2101      	movs	r1, #1
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fb52 	bl	8003aaa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003406:	f7ff fd69 	bl	8002edc <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	; 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d90f      	bls.n	8003438 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800341c:	6939      	ldr	r1, [r7, #16]
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fc40 	bl	8003ca4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e070      	b.n	800351a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0da      	beq.n	80033f8 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003442:	f107 030c 	add.w	r3, r7, #12
 8003446:	461a      	mov	r2, r3
 8003448:	211f      	movs	r1, #31
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fb2d 	bl	8003aaa <HAL_ETH_ReadPHYRegister>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800345a:	6939      	ldr	r1, [r7, #16]
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fc21 	bl	8003ca4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800346a:	2301      	movs	r3, #1
 800346c:	e055      	b.n	800351a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800347e:	60da      	str	r2, [r3, #12]
 8003480:	e002      	b.n	8003488 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	e036      	b.n	8003508 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034a0:	609a      	str	r2, [r3, #8]
 80034a2:	e031      	b.n	8003508 <HAL_ETH_Init+0x31c>
 80034a4:	03938700 	.word	0x03938700
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40013800 	.word	0x40013800
 80034b0:	01312cff 	.word	0x01312cff
 80034b4:	02160ebf 	.word	0x02160ebf
 80034b8:	039386ff 	.word	0x039386ff
 80034bc:	05f5e0ff 	.word	0x05f5e0ff
 80034c0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	08db      	lsrs	r3, r3, #3
 80034ca:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80034d4:	4313      	orrs	r3, r2
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	2100      	movs	r1, #0
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fb4c 	bl	8003b7a <HAL_ETH_WritePHYRegister>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00b      	beq.n	8003500 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80034ec:	6939      	ldr	r1, [r7, #16]
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fbd8 	bl	8003ca4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e00c      	b.n	800351a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003500:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003504:	f7ff fcf6 	bl	8002ef4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003508:	6939      	ldr	r1, [r7, #16]
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fbca 	bl	8003ca4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop

08003524 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_ETH_DMATxDescListInit+0x20>
 8003540:	2302      	movs	r3, #2
 8003542:	e052      	b.n	80035ea <HAL_ETH_DMATxDescListInit+0xc6>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	e030      	b.n	80035c2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	015b      	lsls	r3, r3, #5
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	4413      	add	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003570:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003578:	fb02 f303 	mul.w	r3, r2, r3
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	4413      	add	r3, r2
 8003580:	461a      	mov	r2, r3
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d105      	bne.n	800359a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	3b01      	subs	r3, #1
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d208      	bcs.n	80035b6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3301      	adds	r3, #1
 80035a8:	015b      	lsls	r3, r3, #5
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	4413      	add	r3, r2
 80035ae:	461a      	mov	r2, r3
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	60da      	str	r2, [r3, #12]
 80035b4:	e002      	b.n	80035bc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	3301      	adds	r3, #1
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d3ca      	bcc.n	8003560 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6819      	ldr	r1, [r3, #0]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	f241 0310 	movw	r3, #4112	; 0x1010
 80035d4:	440b      	add	r3, r1
 80035d6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b087      	sub	sp, #28
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_ETH_DMARxDescListInit+0x20>
 8003612:	2302      	movs	r3, #2
 8003614:	e056      	b.n	80036c4 <HAL_ETH_DMARxDescListInit+0xce>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2202      	movs	r2, #2
 8003622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	e034      	b.n	800369c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	015b      	lsls	r3, r3, #5
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	4413      	add	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003642:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800364a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003652:	fb02 f303 	mul.w	r3, r2, r3
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	461a      	mov	r2, r3
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d105      	bne.n	8003674 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	3b01      	subs	r3, #1
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	429a      	cmp	r2, r3
 800367c:	d208      	bcs.n	8003690 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3301      	adds	r3, #1
 8003682:	015b      	lsls	r3, r3, #5
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	4413      	add	r3, r2
 8003688:	461a      	mov	r2, r3
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	e002      	b.n	8003696 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	3301      	adds	r3, #1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d3c6      	bcc.n	8003632 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6819      	ldr	r1, [r3, #0]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	f241 030c 	movw	r3, #4108	; 0x100c
 80036ae:	440b      	add	r3, r1
 80036b0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_ETH_TransmitFrame+0x24>
 80036f0:	2302      	movs	r3, #2
 80036f2:	e0cd      	b.n	8003890 <HAL_ETH_TransmitFrame+0x1c0>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800371a:	2301      	movs	r3, #1
 800371c:	e0b8      	b.n	8003890 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	da09      	bge.n	800373c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2212      	movs	r2, #18
 800372c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0a9      	b.n	8003890 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003742:	4293      	cmp	r3, r2
 8003744:	d915      	bls.n	8003772 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	4a54      	ldr	r2, [pc, #336]	; (800389c <HAL_ETH_TransmitFrame+0x1cc>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	0a9b      	lsrs	r3, r3, #10
 8003750:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	4b51      	ldr	r3, [pc, #324]	; (800389c <HAL_ETH_TransmitFrame+0x1cc>)
 8003756:	fba3 1302 	umull	r1, r3, r3, r2
 800375a:	0a9b      	lsrs	r3, r3, #10
 800375c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	3301      	adds	r3, #1
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	e001      	b.n	8003776 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8003772:	2301      	movs	r3, #1
 8003774:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d11c      	bne.n	80037b6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800378a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003796:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037a6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	461a      	mov	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80037b4:	e04b      	b.n	800384e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80037b6:	2300      	movs	r3, #0
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	e044      	b.n	8003846 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037ca:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d107      	bne.n	80037e2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037e0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80037ea:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d116      	bne.n	8003824 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003804:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	4a25      	ldr	r2, [pc, #148]	; (80038a0 <HAL_ETH_TransmitFrame+0x1d0>)
 800380a:	fb02 f203 	mul.w	r2, r2, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	4413      	add	r3, r2
 8003812:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003816:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003822:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003832:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	461a      	mov	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	3301      	adds	r3, #1
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	429a      	cmp	r2, r3
 800384c:	d3b6      	bcc.n	80037bc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	f241 0314 	movw	r3, #4116	; 0x1014
 8003856:	4413      	add	r3, r2
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00d      	beq.n	800387e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	f241 0314 	movw	r3, #4116	; 0x1014
 800386a:	4413      	add	r3, r2
 800386c:	2204      	movs	r2, #4
 800386e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	f241 0304 	movw	r3, #4100	; 0x1004
 8003878:	4413      	add	r3, r2
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	ac02b00b 	.word	0xac02b00b
 80038a0:	fffffa0c 	.word	0xfffffa0c

080038a4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e074      	b.n	80039a8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80038ce:	e05a      	b.n	8003986 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	3301      	adds	r3, #1
 80038d4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e4:	d10d      	bne.n	8003902 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	461a      	mov	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003900:	e041      	b.n	8003986 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10b      	bne.n	8003928 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	461a      	mov	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	629a      	str	r2, [r3, #40]	; 0x28
 8003926:	e02e      	b.n	8003986 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	2b01      	cmp	r3, #1
 8003940:	d103      	bne.n	800394a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003956:	1f1a      	subs	r2, r3, #4
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	461a      	mov	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	e010      	b.n	80039a8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	db02      	blt.n	8003996 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b03      	cmp	r3, #3
 8003994:	d99c      	bls.n	80038d0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	f241 0314 	movw	r3, #4116	; 0x1014
 80039c4:	4413      	add	r3, r2
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	d112      	bne.n	80039f6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7fd fce5 	bl	80013a0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	f241 0314 	movw	r3, #4116	; 0x1014
 80039de:	4413      	add	r3, r2
 80039e0:	2240      	movs	r2, #64	; 0x40
 80039e2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039f4:	e01b      	b.n	8003a2e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	f241 0314 	movw	r3, #4116	; 0x1014
 80039fe:	4413      	add	r3, r2
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d111      	bne.n	8003a2e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f839 	bl	8003a82 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a18:	4413      	add	r3, r2
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a36:	4413      	add	r3, r2
 8003a38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a3c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a46:	4413      	add	r3, r2
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a52:	d112      	bne.n	8003a7a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f81e 	bl	8003a96 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a62:	4413      	add	r3, r2
 8003a64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a68:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b086      	sub	sp, #24
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	607a      	str	r2, [r7, #4]
 8003ab6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b82      	cmp	r3, #130	; 0x82
 8003aca:	d101      	bne.n	8003ad0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
 8003ace:	e050      	b.n	8003b72 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2282      	movs	r2, #130	; 0x82
 8003ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 031c 	and.w	r3, r3, #28
 8003ae6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8a1b      	ldrh	r3, [r3, #16]
 8003aec:	02db      	lsls	r3, r3, #11
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003af6:	897b      	ldrh	r3, [r7, #10]
 8003af8:	019b      	lsls	r3, r3, #6
 8003afa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0302 	bic.w	r3, r3, #2
 8003b0a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003b1c:	f7ff f9de 	bl	8002edc <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b22:	e015      	b.n	8003b50 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003b24:	f7ff f9da 	bl	8002edc <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b32:	d309      	bcc.n	8003b48 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e014      	b.n	8003b72 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e4      	bne.n	8003b24 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	460b      	mov	r3, r1
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b42      	cmp	r3, #66	; 0x42
 8003b9a:	d101      	bne.n	8003ba0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e04e      	b.n	8003c3e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2242      	movs	r2, #66	; 0x42
 8003ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f003 031c 	and.w	r3, r3, #28
 8003bb6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8a1b      	ldrh	r3, [r3, #16]
 8003bbc:	02db      	lsls	r3, r3, #11
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003bc6:	897b      	ldrh	r3, [r7, #10]
 8003bc8:	019b      	lsls	r3, r3, #6
 8003bca:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f043 0302 	orr.w	r3, r3, #2
 8003bda:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003bf6:	f7ff f971 	bl	8002edc <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003bfc:	e015      	b.n	8003c2a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003bfe:	f7ff f96d 	bl	8002edc <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0c:	d309      	bcc.n	8003c22 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e00d      	b.n	8003c3e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e4      	bne.n	8003bfe <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_ETH_Start+0x16>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e01f      	b.n	8003c9c <HAL_ETH_Start+0x56>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fa1b 	bl	80040a8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fa35 	bl	80040e2 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fa7f 	bl	800417c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fa4c 	bl	800411c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fa61 	bl	800414c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b0b0      	sub	sp, #192	; 0xc0
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cc0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d103      	bne.n	8003cf2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cee:	663b      	str	r3, [r7, #96]	; 0x60
 8003cf0:	e001      	b.n	8003cf6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cfa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003d00:	2300      	movs	r3, #0
 8003d02:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003d04:	2300      	movs	r3, #0
 8003d06:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003d10:	2340      	movs	r3, #64	; 0x40
 8003d12:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003d14:	2300      	movs	r3, #0
 8003d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003d26:	2300      	movs	r3, #0
 8003d28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003d78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d7c:	4bab      	ldr	r3, [pc, #684]	; (800402c <ETH_MACDMAConfig+0x388>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003d88:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003d8c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003d90:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003d96:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003d9a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003d9e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003da4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003da8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003daa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003dac:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003db0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003db4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003db8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003dba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003dcc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f7ff f88b 	bl	8002ef4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003de6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003de8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003dec:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003df0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003df2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003df6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003dfc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003e02:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003e08:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003e0c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003e14:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e16:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e22:	2001      	movs	r0, #1
 8003e24:	f7ff f866 	bl	8002ef4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e30:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e3a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003e44:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003e50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e54:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003e58:	4013      	ands	r3, r2
 8003e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003e5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e62:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003e64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003e68:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003e6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003e6e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003e74:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003e7a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003e7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003e80:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003e82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e94:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	f7ff f827 	bl	8002ef4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003eae:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003eb0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003eb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003eca:	2001      	movs	r0, #1
 8003ecc:	f7ff f812 	bl	8002ef4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ed8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ee2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003ee8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003eec:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003efa:	2300      	movs	r3, #0
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003efe:	2304      	movs	r3, #4
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f0c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f12:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f18:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003f22:	2300      	movs	r3, #0
 8003f24:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f2e:	4413      	add	r3, r2
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003f36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f3a:	4b3d      	ldr	r3, [pc, #244]	; (8004030 <ETH_MACDMAConfig+0x38c>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003f42:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003f44:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003f46:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003f48:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003f4a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003f4c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003f4e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003f50:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003f52:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003f54:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003f56:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003f58:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003f5a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003f5e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003f62:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003f64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f76:	4413      	add	r3, r2
 8003f78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f7c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f86:	4413      	add	r3, r2
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f8e:	2001      	movs	r0, #1
 8003f90:	f7fe ffb0 	bl	8002ef4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003fa2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003fa8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003fac:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003fb0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003fb4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8003fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003fba:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8003fbe:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fcc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f7fe ff89 	bl	8002ef4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003fee:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d10d      	bne.n	8004014 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	f241 031c 	movw	r3, #4124	; 0x101c
 8004000:	4413      	add	r3, r2
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6811      	ldr	r1, [r2, #0]
 8004008:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <ETH_MACDMAConfig+0x390>)
 800400a:	431a      	orrs	r2, r3
 800400c:	f241 031c 	movw	r3, #4124	; 0x101c
 8004010:	440b      	add	r3, r1
 8004012:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	461a      	mov	r2, r3
 800401a:	2100      	movs	r1, #0
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f80b 	bl	8004038 <ETH_MACAddressConfig>
}
 8004022:	bf00      	nop
 8004024:	37c0      	adds	r7, #192	; 0xc0
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	ff20810f 	.word	0xff20810f
 8004030:	f8de3f23 	.word	0xf8de3f23
 8004034:	00010040 	.word	0x00010040

08004038 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3305      	adds	r3, #5
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	3204      	adds	r2, #4
 8004050:	7812      	ldrb	r2, [r2, #0]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <ETH_MACAddressConfig+0x68>)
 800405a:	4413      	add	r3, r2
 800405c:	461a      	mov	r2, r3
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3303      	adds	r3, #3
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	061a      	lsls	r2, r3, #24
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3302      	adds	r3, #2
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	041b      	lsls	r3, r3, #16
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3301      	adds	r3, #1
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	4313      	orrs	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	7812      	ldrb	r2, [r2, #0]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <ETH_MACAddressConfig+0x6c>)
 800408a:	4413      	add	r3, r2
 800408c:	461a      	mov	r2, r3
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	6013      	str	r3, [r2, #0]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40028040 	.word	0x40028040
 80040a4:	40028044 	.word	0x40028044

080040a8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0208 	orr.w	r2, r2, #8
 80040c2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040cc:	2001      	movs	r0, #1
 80040ce:	f7fe ff11 	bl	8002ef4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	601a      	str	r2, [r3, #0]
}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0204 	orr.w	r2, r2, #4
 80040fc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004106:	2001      	movs	r0, #1
 8004108:	f7fe fef4 	bl	8002ef4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	601a      	str	r2, [r3, #0]
}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	f241 0318 	movw	r3, #4120	; 0x1018
 800412c:	4413      	add	r3, r2
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6811      	ldr	r1, [r2, #0]
 8004134:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004138:	f241 0318 	movw	r3, #4120	; 0x1018
 800413c:	440b      	add	r3, r1
 800413e:	601a      	str	r2, [r3, #0]
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	f241 0318 	movw	r3, #4120	; 0x1018
 800415c:	4413      	add	r3, r2
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6811      	ldr	r1, [r2, #0]
 8004164:	f043 0202 	orr.w	r2, r3, #2
 8004168:	f241 0318 	movw	r3, #4120	; 0x1018
 800416c:	440b      	add	r3, r1
 800416e:	601a      	str	r2, [r3, #0]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004190:	4413      	add	r3, r2
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6811      	ldr	r1, [r2, #0]
 8004198:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800419c:	f241 0318 	movw	r3, #4120	; 0x1018
 80041a0:	440b      	add	r3, r1
 80041a2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80041ac:	4413      	add	r3, r2
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041b2:	2001      	movs	r0, #1
 80041b4:	f7fe fe9e 	bl	8002ef4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6819      	ldr	r1, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	f241 0318 	movw	r3, #4120	; 0x1018
 80041c2:	440b      	add	r3, r1
 80041c4:	601a      	str	r2, [r3, #0]
}
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b089      	sub	sp, #36	; 0x24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80041e2:	2300      	movs	r3, #0
 80041e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	e175      	b.n	80044dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80041f0:	2201      	movs	r2, #1
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4013      	ands	r3, r2
 8004202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	429a      	cmp	r2, r3
 800420a:	f040 8164 	bne.w	80044d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d00b      	beq.n	800422e <HAL_GPIO_Init+0x5e>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d007      	beq.n	800422e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004222:	2b11      	cmp	r3, #17
 8004224:	d003      	beq.n	800422e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b12      	cmp	r3, #18
 800422c:	d130      	bne.n	8004290 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	2203      	movs	r2, #3
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43db      	mvns	r3, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4013      	ands	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004264:	2201      	movs	r2, #1
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f003 0201 	and.w	r2, r3, #1
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	2203      	movs	r2, #3
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4013      	ands	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d003      	beq.n	80042d0 <HAL_GPIO_Init+0x100>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b12      	cmp	r3, #18
 80042ce:	d123      	bne.n	8004318 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	08da      	lsrs	r2, r3, #3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3208      	adds	r2, #8
 80042d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	220f      	movs	r2, #15
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4013      	ands	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	08da      	lsrs	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3208      	adds	r2, #8
 8004312:	69b9      	ldr	r1, [r7, #24]
 8004314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	2203      	movs	r2, #3
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	43db      	mvns	r3, r3
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4013      	ands	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 0203 	and.w	r2, r3, #3
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4313      	orrs	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80be 	beq.w	80044d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800435a:	4b65      	ldr	r3, [pc, #404]	; (80044f0 <HAL_GPIO_Init+0x320>)
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	4a64      	ldr	r2, [pc, #400]	; (80044f0 <HAL_GPIO_Init+0x320>)
 8004360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004364:	6453      	str	r3, [r2, #68]	; 0x44
 8004366:	4b62      	ldr	r3, [pc, #392]	; (80044f0 <HAL_GPIO_Init+0x320>)
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004372:	4a60      	ldr	r2, [pc, #384]	; (80044f4 <HAL_GPIO_Init+0x324>)
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	089b      	lsrs	r3, r3, #2
 8004378:	3302      	adds	r3, #2
 800437a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	220f      	movs	r2, #15
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	43db      	mvns	r3, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4013      	ands	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a57      	ldr	r2, [pc, #348]	; (80044f8 <HAL_GPIO_Init+0x328>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d037      	beq.n	800440e <HAL_GPIO_Init+0x23e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a56      	ldr	r2, [pc, #344]	; (80044fc <HAL_GPIO_Init+0x32c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d031      	beq.n	800440a <HAL_GPIO_Init+0x23a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a55      	ldr	r2, [pc, #340]	; (8004500 <HAL_GPIO_Init+0x330>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d02b      	beq.n	8004406 <HAL_GPIO_Init+0x236>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a54      	ldr	r2, [pc, #336]	; (8004504 <HAL_GPIO_Init+0x334>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d025      	beq.n	8004402 <HAL_GPIO_Init+0x232>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a53      	ldr	r2, [pc, #332]	; (8004508 <HAL_GPIO_Init+0x338>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01f      	beq.n	80043fe <HAL_GPIO_Init+0x22e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a52      	ldr	r2, [pc, #328]	; (800450c <HAL_GPIO_Init+0x33c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d019      	beq.n	80043fa <HAL_GPIO_Init+0x22a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a51      	ldr	r2, [pc, #324]	; (8004510 <HAL_GPIO_Init+0x340>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <HAL_GPIO_Init+0x226>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a50      	ldr	r2, [pc, #320]	; (8004514 <HAL_GPIO_Init+0x344>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00d      	beq.n	80043f2 <HAL_GPIO_Init+0x222>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a4f      	ldr	r2, [pc, #316]	; (8004518 <HAL_GPIO_Init+0x348>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d007      	beq.n	80043ee <HAL_GPIO_Init+0x21e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a4e      	ldr	r2, [pc, #312]	; (800451c <HAL_GPIO_Init+0x34c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d101      	bne.n	80043ea <HAL_GPIO_Init+0x21a>
 80043e6:	2309      	movs	r3, #9
 80043e8:	e012      	b.n	8004410 <HAL_GPIO_Init+0x240>
 80043ea:	230a      	movs	r3, #10
 80043ec:	e010      	b.n	8004410 <HAL_GPIO_Init+0x240>
 80043ee:	2308      	movs	r3, #8
 80043f0:	e00e      	b.n	8004410 <HAL_GPIO_Init+0x240>
 80043f2:	2307      	movs	r3, #7
 80043f4:	e00c      	b.n	8004410 <HAL_GPIO_Init+0x240>
 80043f6:	2306      	movs	r3, #6
 80043f8:	e00a      	b.n	8004410 <HAL_GPIO_Init+0x240>
 80043fa:	2305      	movs	r3, #5
 80043fc:	e008      	b.n	8004410 <HAL_GPIO_Init+0x240>
 80043fe:	2304      	movs	r3, #4
 8004400:	e006      	b.n	8004410 <HAL_GPIO_Init+0x240>
 8004402:	2303      	movs	r3, #3
 8004404:	e004      	b.n	8004410 <HAL_GPIO_Init+0x240>
 8004406:	2302      	movs	r3, #2
 8004408:	e002      	b.n	8004410 <HAL_GPIO_Init+0x240>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <HAL_GPIO_Init+0x240>
 800440e:	2300      	movs	r3, #0
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	f002 0203 	and.w	r2, r2, #3
 8004416:	0092      	lsls	r2, r2, #2
 8004418:	4093      	lsls	r3, r2
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4313      	orrs	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004420:	4934      	ldr	r1, [pc, #208]	; (80044f4 <HAL_GPIO_Init+0x324>)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	089b      	lsrs	r3, r3, #2
 8004426:	3302      	adds	r3, #2
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800442e:	4b3c      	ldr	r3, [pc, #240]	; (8004520 <HAL_GPIO_Init+0x350>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	43db      	mvns	r3, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4013      	ands	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004452:	4a33      	ldr	r2, [pc, #204]	; (8004520 <HAL_GPIO_Init+0x350>)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004458:	4b31      	ldr	r3, [pc, #196]	; (8004520 <HAL_GPIO_Init+0x350>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	43db      	mvns	r3, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4013      	ands	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800447c:	4a28      	ldr	r2, [pc, #160]	; (8004520 <HAL_GPIO_Init+0x350>)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004482:	4b27      	ldr	r3, [pc, #156]	; (8004520 <HAL_GPIO_Init+0x350>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	43db      	mvns	r3, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044a6:	4a1e      	ldr	r2, [pc, #120]	; (8004520 <HAL_GPIO_Init+0x350>)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044ac:	4b1c      	ldr	r3, [pc, #112]	; (8004520 <HAL_GPIO_Init+0x350>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d0:	4a13      	ldr	r2, [pc, #76]	; (8004520 <HAL_GPIO_Init+0x350>)
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	3301      	adds	r3, #1
 80044da:	61fb      	str	r3, [r7, #28]
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b0f      	cmp	r3, #15
 80044e0:	f67f ae86 	bls.w	80041f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80044e4:	bf00      	nop
 80044e6:	3724      	adds	r7, #36	; 0x24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40013800 	.word	0x40013800
 80044f8:	40020000 	.word	0x40020000
 80044fc:	40020400 	.word	0x40020400
 8004500:	40020800 	.word	0x40020800
 8004504:	40020c00 	.word	0x40020c00
 8004508:	40021000 	.word	0x40021000
 800450c:	40021400 	.word	0x40021400
 8004510:	40021800 	.word	0x40021800
 8004514:	40021c00 	.word	0x40021c00
 8004518:	40022000 	.word	0x40022000
 800451c:	40022400 	.word	0x40022400
 8004520:	40013c00 	.word	0x40013c00

08004524 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	887b      	ldrh	r3, [r7, #2]
 8004536:	4013      	ands	r3, r2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	e001      	b.n	8004546 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	807b      	strh	r3, [r7, #2]
 8004560:	4613      	mov	r3, r2
 8004562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004564:	787b      	ldrb	r3, [r7, #1]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800456a:	887a      	ldrh	r2, [r7, #2]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004570:	e003      	b.n	800457a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004572:	887b      	ldrh	r3, [r7, #2]
 8004574:	041a      	lsls	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	619a      	str	r2, [r3, #24]
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004592:	4b23      	ldr	r3, [pc, #140]	; (8004620 <HAL_PWREx_EnableOverDrive+0x98>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	4a22      	ldr	r2, [pc, #136]	; (8004620 <HAL_PWREx_EnableOverDrive+0x98>)
 8004598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459c:	6413      	str	r3, [r2, #64]	; 0x40
 800459e:	4b20      	ldr	r3, [pc, #128]	; (8004620 <HAL_PWREx_EnableOverDrive+0x98>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80045aa:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80045b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045b6:	f7fe fc91 	bl	8002edc <HAL_GetTick>
 80045ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045bc:	e009      	b.n	80045d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045be:	f7fe fc8d 	bl	8002edc <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045cc:	d901      	bls.n	80045d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e022      	b.n	8004618 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045d2:	4b14      	ldr	r3, [pc, #80]	; (8004624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045de:	d1ee      	bne.n	80045be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80045e0:	4b10      	ldr	r3, [pc, #64]	; (8004624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a0f      	ldr	r2, [pc, #60]	; (8004624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80045e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045ec:	f7fe fc76 	bl	8002edc <HAL_GetTick>
 80045f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80045f2:	e009      	b.n	8004608 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045f4:	f7fe fc72 	bl	8002edc <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004602:	d901      	bls.n	8004608 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e007      	b.n	8004618 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <HAL_PWREx_EnableOverDrive+0x9c>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004614:	d1ee      	bne.n	80045f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40023800 	.word	0x40023800
 8004624:	40007000 	.word	0x40007000

08004628 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004630:	2300      	movs	r3, #0
 8004632:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e291      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8087 	beq.w	800475a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800464c:	4b96      	ldr	r3, [pc, #600]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b04      	cmp	r3, #4
 8004656:	d00c      	beq.n	8004672 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004658:	4b93      	ldr	r3, [pc, #588]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 030c 	and.w	r3, r3, #12
 8004660:	2b08      	cmp	r3, #8
 8004662:	d112      	bne.n	800468a <HAL_RCC_OscConfig+0x62>
 8004664:	4b90      	ldr	r3, [pc, #576]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004670:	d10b      	bne.n	800468a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004672:	4b8d      	ldr	r3, [pc, #564]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d06c      	beq.n	8004758 <HAL_RCC_OscConfig+0x130>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d168      	bne.n	8004758 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e26b      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004692:	d106      	bne.n	80046a2 <HAL_RCC_OscConfig+0x7a>
 8004694:	4b84      	ldr	r3, [pc, #528]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a83      	ldr	r2, [pc, #524]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 800469a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	e02e      	b.n	8004700 <HAL_RCC_OscConfig+0xd8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x9c>
 80046aa:	4b7f      	ldr	r3, [pc, #508]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a7e      	ldr	r2, [pc, #504]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80046b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4b7c      	ldr	r3, [pc, #496]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a7b      	ldr	r2, [pc, #492]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80046bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e01d      	b.n	8004700 <HAL_RCC_OscConfig+0xd8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCC_OscConfig+0xc0>
 80046ce:	4b76      	ldr	r3, [pc, #472]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a75      	ldr	r2, [pc, #468]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80046d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	4b73      	ldr	r3, [pc, #460]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a72      	ldr	r2, [pc, #456]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	e00b      	b.n	8004700 <HAL_RCC_OscConfig+0xd8>
 80046e8:	4b6f      	ldr	r3, [pc, #444]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a6e      	ldr	r2, [pc, #440]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80046ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4b6c      	ldr	r3, [pc, #432]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a6b      	ldr	r2, [pc, #428]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80046fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d013      	beq.n	8004730 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fe fbe8 	bl	8002edc <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004710:	f7fe fbe4 	bl	8002edc <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	; 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e21f      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004722:	4b61      	ldr	r3, [pc, #388]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f0      	beq.n	8004710 <HAL_RCC_OscConfig+0xe8>
 800472e:	e014      	b.n	800475a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7fe fbd4 	bl	8002edc <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004738:	f7fe fbd0 	bl	8002edc <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	; 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e20b      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800474a:	4b57      	ldr	r3, [pc, #348]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0x110>
 8004756:	e000      	b.n	800475a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d069      	beq.n	800483a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004766:	4b50      	ldr	r3, [pc, #320]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 030c 	and.w	r3, r3, #12
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00b      	beq.n	800478a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004772:	4b4d      	ldr	r3, [pc, #308]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 030c 	and.w	r3, r3, #12
 800477a:	2b08      	cmp	r3, #8
 800477c:	d11c      	bne.n	80047b8 <HAL_RCC_OscConfig+0x190>
 800477e:	4b4a      	ldr	r3, [pc, #296]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d116      	bne.n	80047b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478a:	4b47      	ldr	r3, [pc, #284]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_RCC_OscConfig+0x17a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d001      	beq.n	80047a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e1df      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a2:	4b41      	ldr	r3, [pc, #260]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	493d      	ldr	r1, [pc, #244]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b6:	e040      	b.n	800483a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d023      	beq.n	8004808 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c0:	4b39      	ldr	r3, [pc, #228]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a38      	ldr	r2, [pc, #224]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fe fb86 	bl	8002edc <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d4:	f7fe fb82 	bl	8002edc <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e1bd      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e6:	4b30      	ldr	r3, [pc, #192]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f2:	4b2d      	ldr	r3, [pc, #180]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4929      	ldr	r1, [pc, #164]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 8004802:	4313      	orrs	r3, r2
 8004804:	600b      	str	r3, [r1, #0]
 8004806:	e018      	b.n	800483a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004808:	4b27      	ldr	r3, [pc, #156]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a26      	ldr	r2, [pc, #152]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 800480e:	f023 0301 	bic.w	r3, r3, #1
 8004812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fe fb62 	bl	8002edc <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800481c:	f7fe fb5e 	bl	8002edc <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e199      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482e:	4b1e      	ldr	r3, [pc, #120]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d038      	beq.n	80048b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d019      	beq.n	8004882 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800484e:	4b16      	ldr	r3, [pc, #88]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 8004850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004852:	4a15      	ldr	r2, [pc, #84]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485a:	f7fe fb3f 	bl	8002edc <HAL_GetTick>
 800485e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004860:	e008      	b.n	8004874 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004862:	f7fe fb3b 	bl	8002edc <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e176      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004874:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 8004876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0f0      	beq.n	8004862 <HAL_RCC_OscConfig+0x23a>
 8004880:	e01a      	b.n	80048b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004882:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 8004884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004886:	4a08      	ldr	r2, [pc, #32]	; (80048a8 <HAL_RCC_OscConfig+0x280>)
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488e:	f7fe fb25 	bl	8002edc <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004894:	e00a      	b.n	80048ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004896:	f7fe fb21 	bl	8002edc <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d903      	bls.n	80048ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e15c      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>
 80048a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ac:	4b91      	ldr	r3, [pc, #580]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 80048ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1ee      	bne.n	8004896 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80a4 	beq.w	8004a0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048c6:	4b8b      	ldr	r3, [pc, #556]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10d      	bne.n	80048ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d2:	4b88      	ldr	r3, [pc, #544]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	4a87      	ldr	r2, [pc, #540]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 80048d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048dc:	6413      	str	r3, [r2, #64]	; 0x40
 80048de:	4b85      	ldr	r3, [pc, #532]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e6:	60bb      	str	r3, [r7, #8]
 80048e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ea:	2301      	movs	r3, #1
 80048ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048ee:	4b82      	ldr	r3, [pc, #520]	; (8004af8 <HAL_RCC_OscConfig+0x4d0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d118      	bne.n	800492c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80048fa:	4b7f      	ldr	r3, [pc, #508]	; (8004af8 <HAL_RCC_OscConfig+0x4d0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a7e      	ldr	r2, [pc, #504]	; (8004af8 <HAL_RCC_OscConfig+0x4d0>)
 8004900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004906:	f7fe fae9 	bl	8002edc <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800490e:	f7fe fae5 	bl	8002edc <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b64      	cmp	r3, #100	; 0x64
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e120      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004920:	4b75      	ldr	r3, [pc, #468]	; (8004af8 <HAL_RCC_OscConfig+0x4d0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d106      	bne.n	8004942 <HAL_RCC_OscConfig+0x31a>
 8004934:	4b6f      	ldr	r3, [pc, #444]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004938:	4a6e      	ldr	r2, [pc, #440]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6713      	str	r3, [r2, #112]	; 0x70
 8004940:	e02d      	b.n	800499e <HAL_RCC_OscConfig+0x376>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10c      	bne.n	8004964 <HAL_RCC_OscConfig+0x33c>
 800494a:	4b6a      	ldr	r3, [pc, #424]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494e:	4a69      	ldr	r2, [pc, #420]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004950:	f023 0301 	bic.w	r3, r3, #1
 8004954:	6713      	str	r3, [r2, #112]	; 0x70
 8004956:	4b67      	ldr	r3, [pc, #412]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	4a66      	ldr	r2, [pc, #408]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 800495c:	f023 0304 	bic.w	r3, r3, #4
 8004960:	6713      	str	r3, [r2, #112]	; 0x70
 8004962:	e01c      	b.n	800499e <HAL_RCC_OscConfig+0x376>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b05      	cmp	r3, #5
 800496a:	d10c      	bne.n	8004986 <HAL_RCC_OscConfig+0x35e>
 800496c:	4b61      	ldr	r3, [pc, #388]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	4a60      	ldr	r2, [pc, #384]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004972:	f043 0304 	orr.w	r3, r3, #4
 8004976:	6713      	str	r3, [r2, #112]	; 0x70
 8004978:	4b5e      	ldr	r3, [pc, #376]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	4a5d      	ldr	r2, [pc, #372]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	6713      	str	r3, [r2, #112]	; 0x70
 8004984:	e00b      	b.n	800499e <HAL_RCC_OscConfig+0x376>
 8004986:	4b5b      	ldr	r3, [pc, #364]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498a:	4a5a      	ldr	r2, [pc, #360]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 800498c:	f023 0301 	bic.w	r3, r3, #1
 8004990:	6713      	str	r3, [r2, #112]	; 0x70
 8004992:	4b58      	ldr	r3, [pc, #352]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	4a57      	ldr	r2, [pc, #348]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004998:	f023 0304 	bic.w	r3, r3, #4
 800499c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d015      	beq.n	80049d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a6:	f7fe fa99 	bl	8002edc <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ac:	e00a      	b.n	80049c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ae:	f7fe fa95 	bl	8002edc <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049bc:	4293      	cmp	r3, r2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e0ce      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c4:	4b4b      	ldr	r3, [pc, #300]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0ee      	beq.n	80049ae <HAL_RCC_OscConfig+0x386>
 80049d0:	e014      	b.n	80049fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d2:	f7fe fa83 	bl	8002edc <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d8:	e00a      	b.n	80049f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049da:	f7fe fa7f 	bl	8002edc <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e0b8      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049f0:	4b40      	ldr	r3, [pc, #256]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 80049f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1ee      	bne.n	80049da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d105      	bne.n	8004a0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a02:	4b3c      	ldr	r3, [pc, #240]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	4a3b      	ldr	r2, [pc, #236]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80a4 	beq.w	8004b60 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a18:	4b36      	ldr	r3, [pc, #216]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 030c 	and.w	r3, r3, #12
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d06b      	beq.n	8004afc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d149      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2c:	4b31      	ldr	r3, [pc, #196]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a30      	ldr	r2, [pc, #192]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fe fa50 	bl	8002edc <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a40:	f7fe fa4c 	bl	8002edc <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e087      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a52:	4b28      	ldr	r3, [pc, #160]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69da      	ldr	r2, [r3, #28]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	019b      	lsls	r3, r3, #6
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	3b01      	subs	r3, #1
 8004a78:	041b      	lsls	r3, r3, #16
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	061b      	lsls	r3, r3, #24
 8004a82:	4313      	orrs	r3, r2
 8004a84:	4a1b      	ldr	r2, [pc, #108]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004a86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a8a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a8c:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7fe fa20 	bl	8002edc <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa0:	f7fe fa1c 	bl	8002edc <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e057      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab2:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x478>
 8004abe:	e04f      	b.n	8004b60 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a0b      	ldr	r2, [pc, #44]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fe fa06 	bl	8002edc <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad4:	f7fe fa02 	bl	8002edc <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e03d      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae6:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <HAL_RCC_OscConfig+0x4cc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4ac>
 8004af2:	e035      	b.n	8004b60 <HAL_RCC_OscConfig+0x538>
 8004af4:	40023800 	.word	0x40023800
 8004af8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004afc:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <HAL_RCC_OscConfig+0x544>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d028      	beq.n	8004b5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d121      	bne.n	8004b5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d11a      	bne.n	8004b5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d111      	bne.n	8004b5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	3b01      	subs	r3, #1
 8004b46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d107      	bne.n	8004b5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d001      	beq.n	8004b60 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800

08004b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0d0      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b88:	4b6a      	ldr	r3, [pc, #424]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 030f 	and.w	r3, r3, #15
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d910      	bls.n	8004bb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b96:	4b67      	ldr	r3, [pc, #412]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 020f 	bic.w	r2, r3, #15
 8004b9e:	4965      	ldr	r1, [pc, #404]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba6:	4b63      	ldr	r3, [pc, #396]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0b8      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd0:	4b59      	ldr	r3, [pc, #356]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	4a58      	ldr	r2, [pc, #352]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004be8:	4b53      	ldr	r3, [pc, #332]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4a52      	ldr	r2, [pc, #328]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bf2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf4:	4b50      	ldr	r3, [pc, #320]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	494d      	ldr	r1, [pc, #308]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d040      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d107      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1a:	4b47      	ldr	r3, [pc, #284]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d115      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e07f      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d107      	bne.n	8004c42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c32:	4b41      	ldr	r3, [pc, #260]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d109      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e073      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c42:	4b3d      	ldr	r3, [pc, #244]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e06b      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c52:	4b39      	ldr	r3, [pc, #228]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f023 0203 	bic.w	r2, r3, #3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	4936      	ldr	r1, [pc, #216]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c64:	f7fe f93a 	bl	8002edc <HAL_GetTick>
 8004c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6a:	e00a      	b.n	8004c82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c6c:	f7fe f936 	bl	8002edc <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e053      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c82:	4b2d      	ldr	r3, [pc, #180]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 020c 	and.w	r2, r3, #12
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d1eb      	bne.n	8004c6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c94:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 030f 	and.w	r3, r3, #15
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d210      	bcs.n	8004cc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca2:	4b24      	ldr	r3, [pc, #144]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f023 020f 	bic.w	r2, r3, #15
 8004caa:	4922      	ldr	r1, [pc, #136]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb2:	4b20      	ldr	r3, [pc, #128]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e032      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd0:	4b19      	ldr	r3, [pc, #100]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4916      	ldr	r1, [pc, #88]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d009      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cee:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	490e      	ldr	r1, [pc, #56]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d02:	f000 f821 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 8004d06:	4601      	mov	r1, r0
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	4a0a      	ldr	r2, [pc, #40]	; (8004d3c <HAL_RCC_ClockConfig+0x1cc>)
 8004d14:	5cd3      	ldrb	r3, [r2, r3]
 8004d16:	fa21 f303 	lsr.w	r3, r1, r3
 8004d1a:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <HAL_RCC_ClockConfig+0x1d0>)
 8004d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <HAL_RCC_ClockConfig+0x1d4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fd f84a 	bl	8001dbc <HAL_InitTick>

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40023c00 	.word	0x40023c00
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	08018bb8 	.word	0x08018bb8
 8004d40:	2000001c 	.word	0x2000001c
 8004d44:	20000020 	.word	0x20000020

08004d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	607b      	str	r3, [r7, #4]
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	2300      	movs	r3, #0
 8004d58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d5e:	4b63      	ldr	r3, [pc, #396]	; (8004eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d007      	beq.n	8004d7a <HAL_RCC_GetSysClockFreq+0x32>
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d008      	beq.n	8004d80 <HAL_RCC_GetSysClockFreq+0x38>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f040 80b4 	bne.w	8004edc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d74:	4b5e      	ldr	r3, [pc, #376]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d76:	60bb      	str	r3, [r7, #8]
      break;
 8004d78:	e0b3      	b.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d7a:	4b5e      	ldr	r3, [pc, #376]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004d7c:	60bb      	str	r3, [r7, #8]
      break;
 8004d7e:	e0b0      	b.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d80:	4b5a      	ldr	r3, [pc, #360]	; (8004eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d88:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004d8a:	4b58      	ldr	r3, [pc, #352]	; (8004eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d04a      	beq.n	8004e2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d96:	4b55      	ldr	r3, [pc, #340]	; (8004eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	099b      	lsrs	r3, r3, #6
 8004d9c:	f04f 0400 	mov.w	r4, #0
 8004da0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	ea03 0501 	and.w	r5, r3, r1
 8004dac:	ea04 0602 	and.w	r6, r4, r2
 8004db0:	4629      	mov	r1, r5
 8004db2:	4632      	mov	r2, r6
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	f04f 0400 	mov.w	r4, #0
 8004dbc:	0154      	lsls	r4, r2, #5
 8004dbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004dc2:	014b      	lsls	r3, r1, #5
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4622      	mov	r2, r4
 8004dc8:	1b49      	subs	r1, r1, r5
 8004dca:	eb62 0206 	sbc.w	r2, r2, r6
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	f04f 0400 	mov.w	r4, #0
 8004dd6:	0194      	lsls	r4, r2, #6
 8004dd8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ddc:	018b      	lsls	r3, r1, #6
 8004dde:	1a5b      	subs	r3, r3, r1
 8004de0:	eb64 0402 	sbc.w	r4, r4, r2
 8004de4:	f04f 0100 	mov.w	r1, #0
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	00e2      	lsls	r2, r4, #3
 8004dee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004df2:	00d9      	lsls	r1, r3, #3
 8004df4:	460b      	mov	r3, r1
 8004df6:	4614      	mov	r4, r2
 8004df8:	195b      	adds	r3, r3, r5
 8004dfa:	eb44 0406 	adc.w	r4, r4, r6
 8004dfe:	f04f 0100 	mov.w	r1, #0
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	0262      	lsls	r2, r4, #9
 8004e08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004e0c:	0259      	lsls	r1, r3, #9
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4614      	mov	r4, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	4621      	mov	r1, r4
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f04f 0400 	mov.w	r4, #0
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4623      	mov	r3, r4
 8004e20:	f7fb ff52 	bl	8000cc8 <__aeabi_uldivmod>
 8004e24:	4603      	mov	r3, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	e049      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2c:	4b2f      	ldr	r3, [pc, #188]	; (8004eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	099b      	lsrs	r3, r3, #6
 8004e32:	f04f 0400 	mov.w	r4, #0
 8004e36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	ea03 0501 	and.w	r5, r3, r1
 8004e42:	ea04 0602 	and.w	r6, r4, r2
 8004e46:	4629      	mov	r1, r5
 8004e48:	4632      	mov	r2, r6
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	f04f 0400 	mov.w	r4, #0
 8004e52:	0154      	lsls	r4, r2, #5
 8004e54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e58:	014b      	lsls	r3, r1, #5
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4622      	mov	r2, r4
 8004e5e:	1b49      	subs	r1, r1, r5
 8004e60:	eb62 0206 	sbc.w	r2, r2, r6
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	f04f 0400 	mov.w	r4, #0
 8004e6c:	0194      	lsls	r4, r2, #6
 8004e6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e72:	018b      	lsls	r3, r1, #6
 8004e74:	1a5b      	subs	r3, r3, r1
 8004e76:	eb64 0402 	sbc.w	r4, r4, r2
 8004e7a:	f04f 0100 	mov.w	r1, #0
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	00e2      	lsls	r2, r4, #3
 8004e84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e88:	00d9      	lsls	r1, r3, #3
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4614      	mov	r4, r2
 8004e8e:	195b      	adds	r3, r3, r5
 8004e90:	eb44 0406 	adc.w	r4, r4, r6
 8004e94:	f04f 0100 	mov.w	r1, #0
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	02a2      	lsls	r2, r4, #10
 8004e9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004ea2:	0299      	lsls	r1, r3, #10
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4614      	mov	r4, r2
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	4621      	mov	r1, r4
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f04f 0400 	mov.w	r4, #0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4623      	mov	r3, r4
 8004eb6:	f7fb ff07 	bl	8000cc8 <__aeabi_uldivmod>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	0c1b      	lsrs	r3, r3, #16
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	3301      	adds	r3, #1
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed8:	60bb      	str	r3, [r7, #8]
      break;
 8004eda:	e002      	b.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004edc:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ede:	60bb      	str	r3, [r7, #8]
      break;
 8004ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	00f42400 	.word	0x00f42400
 8004ef4:	007a1200 	.word	0x007a1200

08004ef8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004efc:	4b03      	ldr	r3, [pc, #12]	; (8004f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004efe:	681b      	ldr	r3, [r3, #0]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	2000001c 	.word	0x2000001c

08004f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f14:	f7ff fff0 	bl	8004ef8 <HAL_RCC_GetHCLKFreq>
 8004f18:	4601      	mov	r1, r0
 8004f1a:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	0a9b      	lsrs	r3, r3, #10
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	4a03      	ldr	r2, [pc, #12]	; (8004f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f26:	5cd3      	ldrb	r3, [r2, r3]
 8004f28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40023800 	.word	0x40023800
 8004f34:	08018bc8 	.word	0x08018bc8

08004f38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	220f      	movs	r2, #15
 8004f46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f48:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <HAL_RCC_GetClockConfig+0x5c>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 0203 	and.w	r2, r3, #3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f54:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <HAL_RCC_GetClockConfig+0x5c>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f60:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <HAL_RCC_GetClockConfig+0x5c>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004f6c:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <HAL_RCC_GetClockConfig+0x5c>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	08db      	lsrs	r3, r3, #3
 8004f72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f7a:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <HAL_RCC_GetClockConfig+0x60>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 020f 	and.w	r2, r3, #15
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	601a      	str	r2, [r3, #0]
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40023800 	.word	0x40023800
 8004f98:	40023c00 	.word	0x40023c00

08004f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e01d      	b.n	8004fea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f815 	bl	8004ff2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f000 f986 	bl	80052ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
	...

08005008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <HAL_TIM_Base_Start_IT+0x50>)
 8005028:	4013      	ands	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b06      	cmp	r3, #6
 8005030:	d00b      	beq.n	800504a <HAL_TIM_Base_Start_IT+0x42>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005038:	d007      	beq.n	800504a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0201 	orr.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	00010007 	.word	0x00010007

0800505c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b02      	cmp	r3, #2
 8005070:	d122      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b02      	cmp	r3, #2
 800507e:	d11b      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0202 	mvn.w	r2, #2
 8005088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f905 	bl	80052ae <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f8f7 	bl	800529a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f908 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d122      	bne.n	800510c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d11b      	bne.n	800510c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0204 	mvn.w	r2, #4
 80050dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f8db 	bl	80052ae <HAL_TIM_IC_CaptureCallback>
 80050f8:	e005      	b.n	8005106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f8cd 	bl	800529a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f8de 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b08      	cmp	r3, #8
 8005118:	d122      	bne.n	8005160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b08      	cmp	r3, #8
 8005126:	d11b      	bne.n	8005160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0208 	mvn.w	r2, #8
 8005130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2204      	movs	r2, #4
 8005136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f8b1 	bl	80052ae <HAL_TIM_IC_CaptureCallback>
 800514c:	e005      	b.n	800515a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f8a3 	bl	800529a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f8b4 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b10      	cmp	r3, #16
 800516c:	d122      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b10      	cmp	r3, #16
 800517a:	d11b      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0210 	mvn.w	r2, #16
 8005184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2208      	movs	r2, #8
 800518a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f887 	bl	80052ae <HAL_TIM_IC_CaptureCallback>
 80051a0:	e005      	b.n	80051ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f879 	bl	800529a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f88a 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10e      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d107      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0201 	mvn.w	r2, #1
 80051d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fc fe50 	bl	8001e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ea:	2b80      	cmp	r3, #128	; 0x80
 80051ec:	d10e      	bne.n	800520c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f8:	2b80      	cmp	r3, #128	; 0x80
 80051fa:	d107      	bne.n	800520c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f91a 	bl	8005440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521a:	d10e      	bne.n	800523a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005226:	2b80      	cmp	r3, #128	; 0x80
 8005228:	d107      	bne.n	800523a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f90d 	bl	8005454 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005244:	2b40      	cmp	r3, #64	; 0x40
 8005246:	d10e      	bne.n	8005266 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005252:	2b40      	cmp	r3, #64	; 0x40
 8005254:	d107      	bne.n	8005266 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800525e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f838 	bl	80052d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b20      	cmp	r3, #32
 8005272:	d10e      	bne.n	8005292 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b20      	cmp	r3, #32
 8005280:	d107      	bne.n	8005292 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f06f 0220 	mvn.w	r2, #32
 800528a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f8cd 	bl	800542c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a40      	ldr	r2, [pc, #256]	; (8005400 <TIM_Base_SetConfig+0x114>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d013      	beq.n	800532c <TIM_Base_SetConfig+0x40>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530a:	d00f      	beq.n	800532c <TIM_Base_SetConfig+0x40>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a3d      	ldr	r2, [pc, #244]	; (8005404 <TIM_Base_SetConfig+0x118>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00b      	beq.n	800532c <TIM_Base_SetConfig+0x40>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a3c      	ldr	r2, [pc, #240]	; (8005408 <TIM_Base_SetConfig+0x11c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d007      	beq.n	800532c <TIM_Base_SetConfig+0x40>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a3b      	ldr	r2, [pc, #236]	; (800540c <TIM_Base_SetConfig+0x120>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_Base_SetConfig+0x40>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a3a      	ldr	r2, [pc, #232]	; (8005410 <TIM_Base_SetConfig+0x124>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d108      	bne.n	800533e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a2f      	ldr	r2, [pc, #188]	; (8005400 <TIM_Base_SetConfig+0x114>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d02b      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534c:	d027      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a2c      	ldr	r2, [pc, #176]	; (8005404 <TIM_Base_SetConfig+0x118>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d023      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a2b      	ldr	r2, [pc, #172]	; (8005408 <TIM_Base_SetConfig+0x11c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d01f      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2a      	ldr	r2, [pc, #168]	; (800540c <TIM_Base_SetConfig+0x120>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d01b      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a29      	ldr	r2, [pc, #164]	; (8005410 <TIM_Base_SetConfig+0x124>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d017      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a28      	ldr	r2, [pc, #160]	; (8005414 <TIM_Base_SetConfig+0x128>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d013      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a27      	ldr	r2, [pc, #156]	; (8005418 <TIM_Base_SetConfig+0x12c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00f      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a26      	ldr	r2, [pc, #152]	; (800541c <TIM_Base_SetConfig+0x130>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00b      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a25      	ldr	r2, [pc, #148]	; (8005420 <TIM_Base_SetConfig+0x134>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d007      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a24      	ldr	r2, [pc, #144]	; (8005424 <TIM_Base_SetConfig+0x138>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d003      	beq.n	800539e <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a23      	ldr	r2, [pc, #140]	; (8005428 <TIM_Base_SetConfig+0x13c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d108      	bne.n	80053b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a0a      	ldr	r2, [pc, #40]	; (8005400 <TIM_Base_SetConfig+0x114>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_Base_SetConfig+0xf8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a0c      	ldr	r2, [pc, #48]	; (8005410 <TIM_Base_SetConfig+0x124>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d103      	bne.n	80053ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	615a      	str	r2, [r3, #20]
}
 80053f2:	bf00      	nop
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40010000 	.word	0x40010000
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40000c00 	.word	0x40000c00
 8005410:	40010400 	.word	0x40010400
 8005414:	40014000 	.word	0x40014000
 8005418:	40014400 	.word	0x40014400
 800541c:	40014800 	.word	0x40014800
 8005420:	40001800 	.word	0x40001800
 8005424:	40001c00 	.word	0x40001c00
 8005428:	40002000 	.word	0x40002000

0800542c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f103 0208 	add.w	r2, r3, #8
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f04f 32ff 	mov.w	r2, #4294967295
 8005480:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f103 0208 	add.w	r2, r3, #8
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f103 0208 	add.w	r2, r3, #8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	601a      	str	r2, [r3, #0]
}
 80054fe:	bf00      	nop
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800550a:	b480      	push	{r7}
 800550c:	b085      	sub	sp, #20
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005520:	d103      	bne.n	800552a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	e00c      	b.n	8005544 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3308      	adds	r3, #8
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	e002      	b.n	8005538 <vListInsert+0x2e>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	429a      	cmp	r2, r3
 8005542:	d2f6      	bcs.n	8005532 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	601a      	str	r2, [r3, #0]
}
 8005570:	bf00      	nop
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6892      	ldr	r2, [r2, #8]
 8005592:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6852      	ldr	r2, [r2, #4]
 800559c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d103      	bne.n	80055b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	1e5a      	subs	r2, r3, #1
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10b      	bne.n	80055fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e8:	b672      	cpsid	i
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	b662      	cpsie	i
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	e7fe      	b.n	80055fa <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80055fc:	f002 fc74 	bl	8007ee8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005608:	68f9      	ldr	r1, [r7, #12]
 800560a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800560c:	fb01 f303 	mul.w	r3, r1, r3
 8005610:	441a      	add	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562c:	3b01      	subs	r3, #1
 800562e:	68f9      	ldr	r1, [r7, #12]
 8005630:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005632:	fb01 f303 	mul.w	r3, r1, r3
 8005636:	441a      	add	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	22ff      	movs	r2, #255	; 0xff
 8005640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	22ff      	movs	r2, #255	; 0xff
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d114      	bne.n	800567c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01a      	beq.n	8005690 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3310      	adds	r3, #16
 800565e:	4618      	mov	r0, r3
 8005660:	f001 fb0e 	bl	8006c80 <xTaskRemoveFromEventList>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d012      	beq.n	8005690 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800566a:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <xQueueGenericReset+0xd0>)
 800566c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	e009      	b.n	8005690 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3310      	adds	r3, #16
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff fef1 	bl	8005468 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3324      	adds	r3, #36	; 0x24
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff feec 	bl	8005468 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005690:	f002 fc5c 	bl	8007f4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005694:	2301      	movs	r3, #1
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	e000ed04 	.word	0xe000ed04

080056a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08a      	sub	sp, #40	; 0x28
 80056a8:	af02      	add	r7, sp, #8
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10b      	bne.n	80056d0 <xQueueGenericCreate+0x2c>
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	b672      	cpsid	i
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	b662      	cpsie	i
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	e7fe      	b.n	80056ce <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d102      	bne.n	80056dc <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	e004      	b.n	80056e6 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	fb02 f303 	mul.w	r3, r2, r3
 80056e4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	3350      	adds	r3, #80	; 0x50
 80056ea:	4618      	mov	r0, r3
 80056ec:	f002 f914 	bl	8007918 <pvPortMalloc>
 80056f0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00d      	beq.n	8005714 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	3350      	adds	r3, #80	; 0x50
 8005700:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005702:	79fa      	ldrb	r2, [r7, #7]
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f805 	bl	800571e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005714:	69bb      	ldr	r3, [r7, #24]
	}
 8005716:	4618      	mov	r0, r3
 8005718:	3720      	adds	r7, #32
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
 800572a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d103      	bne.n	800573a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	e002      	b.n	8005740 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800574c:	2101      	movs	r1, #1
 800574e:	69b8      	ldr	r0, [r7, #24]
 8005750:	f7ff ff3e 	bl	80055d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	78fa      	ldrb	r2, [r7, #3]
 8005758:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00e      	beq.n	8005790 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005784:	2300      	movs	r3, #0
 8005786:	2200      	movs	r2, #0
 8005788:	2100      	movs	r1, #0
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f852 	bl	8005834 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005790:	bf00      	nop
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80057a2:	2301      	movs	r3, #1
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80057aa:	79fb      	ldrb	r3, [r7, #7]
 80057ac:	461a      	mov	r2, r3
 80057ae:	6939      	ldr	r1, [r7, #16]
 80057b0:	6978      	ldr	r0, [r7, #20]
 80057b2:	f7ff ff77 	bl	80056a4 <xQueueGenericCreate>
 80057b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f7ff ffd3 	bl	8005764 <prvInitialiseMutex>

		return xNewQueue;
 80057be:	68fb      	ldr	r3, [r7, #12]
	}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10b      	bne.n	80057f0 <xQueueCreateCountingSemaphore+0x28>
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	b672      	cpsid	i
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	b662      	cpsie	i
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	e7fe      	b.n	80057ee <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d90b      	bls.n	8005810 <xQueueCreateCountingSemaphore+0x48>
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	b672      	cpsid	i
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	b662      	cpsie	i
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	e7fe      	b.n	800580e <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005810:	2202      	movs	r2, #2
 8005812:	2100      	movs	r1, #0
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff ff45 	bl	80056a4 <xQueueGenericCreate>
 800581a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005828:	697b      	ldr	r3, [r7, #20]
	}
 800582a:	4618      	mov	r0, r3
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
	...

08005834 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b08e      	sub	sp, #56	; 0x38
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005842:	2300      	movs	r3, #0
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10b      	bne.n	8005868 <xQueueGenericSend+0x34>
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	b672      	cpsid	i
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	b662      	cpsie	i
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
 8005866:	e7fe      	b.n	8005866 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <xQueueGenericSend+0x42>
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <xQueueGenericSend+0x46>
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <xQueueGenericSend+0x48>
 800587a:	2300      	movs	r3, #0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10b      	bne.n	8005898 <xQueueGenericSend+0x64>
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	b672      	cpsid	i
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	b662      	cpsie	i
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
 8005896:	e7fe      	b.n	8005896 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d103      	bne.n	80058a6 <xQueueGenericSend+0x72>
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <xQueueGenericSend+0x76>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <xQueueGenericSend+0x78>
 80058aa:	2300      	movs	r3, #0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10b      	bne.n	80058c8 <xQueueGenericSend+0x94>
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	b672      	cpsid	i
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	b662      	cpsie	i
 80058c4:	623b      	str	r3, [r7, #32]
 80058c6:	e7fe      	b.n	80058c6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058c8:	f001 fb6a 	bl	8006fa0 <xTaskGetSchedulerState>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d102      	bne.n	80058d8 <xQueueGenericSend+0xa4>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <xQueueGenericSend+0xa8>
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <xQueueGenericSend+0xaa>
 80058dc:	2300      	movs	r3, #0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10b      	bne.n	80058fa <xQueueGenericSend+0xc6>
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	b672      	cpsid	i
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	b662      	cpsie	i
 80058f6:	61fb      	str	r3, [r7, #28]
 80058f8:	e7fe      	b.n	80058f8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058fa:	f002 faf5 	bl	8007ee8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005906:	429a      	cmp	r2, r3
 8005908:	d302      	bcc.n	8005910 <xQueueGenericSend+0xdc>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b02      	cmp	r3, #2
 800590e:	d129      	bne.n	8005964 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005916:	f000 fc4a 	bl	80061ae <prvCopyDataToQueue>
 800591a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	2b00      	cmp	r3, #0
 8005922:	d010      	beq.n	8005946 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005926:	3324      	adds	r3, #36	; 0x24
 8005928:	4618      	mov	r0, r3
 800592a:	f001 f9a9 	bl	8006c80 <xTaskRemoveFromEventList>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d013      	beq.n	800595c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005934:	4b3f      	ldr	r3, [pc, #252]	; (8005a34 <xQueueGenericSend+0x200>)
 8005936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	e00a      	b.n	800595c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d007      	beq.n	800595c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800594c:	4b39      	ldr	r3, [pc, #228]	; (8005a34 <xQueueGenericSend+0x200>)
 800594e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800595c:	f002 faf6 	bl	8007f4c <vPortExitCritical>
				return pdPASS;
 8005960:	2301      	movs	r3, #1
 8005962:	e063      	b.n	8005a2c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d103      	bne.n	8005972 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800596a:	f002 faef 	bl	8007f4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800596e:	2300      	movs	r3, #0
 8005970:	e05c      	b.n	8005a2c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005974:	2b00      	cmp	r3, #0
 8005976:	d106      	bne.n	8005986 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005978:	f107 0314 	add.w	r3, r7, #20
 800597c:	4618      	mov	r0, r3
 800597e:	f001 f9e3 	bl	8006d48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005982:	2301      	movs	r3, #1
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005986:	f002 fae1 	bl	8007f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800598a:	f000 ff6f 	bl	800686c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800598e:	f002 faab 	bl	8007ee8 <vPortEnterCritical>
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005998:	b25b      	sxtb	r3, r3
 800599a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599e:	d103      	bne.n	80059a8 <xQueueGenericSend+0x174>
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059ae:	b25b      	sxtb	r3, r3
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d103      	bne.n	80059be <xQueueGenericSend+0x18a>
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059be:	f002 fac5 	bl	8007f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059c2:	1d3a      	adds	r2, r7, #4
 80059c4:	f107 0314 	add.w	r3, r7, #20
 80059c8:	4611      	mov	r1, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 f9d2 	bl	8006d74 <xTaskCheckForTimeOut>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d124      	bne.n	8005a20 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059d8:	f000 fce1 	bl	800639e <prvIsQueueFull>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d018      	beq.n	8005a14 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	3310      	adds	r3, #16
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	4611      	mov	r1, r2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f001 f922 	bl	8006c34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059f2:	f000 fc6c 	bl	80062ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059f6:	f000 ff47 	bl	8006888 <xTaskResumeAll>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f47f af7c 	bne.w	80058fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005a02:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <xQueueGenericSend+0x200>)
 8005a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	e772      	b.n	80058fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a16:	f000 fc5a 	bl	80062ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a1a:	f000 ff35 	bl	8006888 <xTaskResumeAll>
 8005a1e:	e76c      	b.n	80058fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a22:	f000 fc54 	bl	80062ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a26:	f000 ff2f 	bl	8006888 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3738      	adds	r7, #56	; 0x38
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	e000ed04 	.word	0xe000ed04

08005a38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08e      	sub	sp, #56	; 0x38
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10b      	bne.n	8005a68 <xQueueGenericSendFromISR+0x30>
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	b672      	cpsid	i
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	b662      	cpsie	i
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
 8005a66:	e7fe      	b.n	8005a66 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d103      	bne.n	8005a76 <xQueueGenericSendFromISR+0x3e>
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <xQueueGenericSendFromISR+0x42>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e000      	b.n	8005a7c <xQueueGenericSendFromISR+0x44>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10b      	bne.n	8005a98 <xQueueGenericSendFromISR+0x60>
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	b672      	cpsid	i
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	b662      	cpsie	i
 8005a94:	623b      	str	r3, [r7, #32]
 8005a96:	e7fe      	b.n	8005a96 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d103      	bne.n	8005aa6 <xQueueGenericSendFromISR+0x6e>
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <xQueueGenericSendFromISR+0x72>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <xQueueGenericSendFromISR+0x74>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10b      	bne.n	8005ac8 <xQueueGenericSendFromISR+0x90>
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	b672      	cpsid	i
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	b662      	cpsie	i
 8005ac4:	61fb      	str	r3, [r7, #28]
 8005ac6:	e7fe      	b.n	8005ac6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ac8:	f002 faee 	bl	80080a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005acc:	f3ef 8211 	mrs	r2, BASEPRI
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	b672      	cpsid	i
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	b662      	cpsie	i
 8005ae4:	61ba      	str	r2, [r7, #24]
 8005ae6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ae8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d302      	bcc.n	8005afe <xQueueGenericSendFromISR+0xc6>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d12c      	bne.n	8005b58 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b0e:	f000 fb4e 	bl	80061ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b12:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1a:	d112      	bne.n	8005b42 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d016      	beq.n	8005b52 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	3324      	adds	r3, #36	; 0x24
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f001 f8a9 	bl	8006c80 <xTaskRemoveFromEventList>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00e      	beq.n	8005b52 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e007      	b.n	8005b52 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b46:	3301      	adds	r3, #1
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	b25a      	sxtb	r2, r3
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b52:	2301      	movs	r3, #1
 8005b54:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005b56:	e001      	b.n	8005b5c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3738      	adds	r7, #56	; 0x38
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08e      	sub	sp, #56	; 0x38
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10b      	bne.n	8005b9c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	b672      	cpsid	i
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	b662      	cpsie	i
 8005b98:	623b      	str	r3, [r7, #32]
 8005b9a:	e7fe      	b.n	8005b9a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00b      	beq.n	8005bbc <xQueueGiveFromISR+0x4c>
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	b672      	cpsid	i
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	b662      	cpsie	i
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	e7fe      	b.n	8005bba <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d103      	bne.n	8005bcc <xQueueGiveFromISR+0x5c>
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <xQueueGiveFromISR+0x60>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <xQueueGiveFromISR+0x62>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10b      	bne.n	8005bee <xQueueGiveFromISR+0x7e>
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	b672      	cpsid	i
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	b662      	cpsie	i
 8005bea:	61bb      	str	r3, [r7, #24]
 8005bec:	e7fe      	b.n	8005bec <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bee:	f002 fa5b 	bl	80080a8 <vPortValidateInterruptPriority>
	__asm volatile
 8005bf2:	f3ef 8211 	mrs	r2, BASEPRI
 8005bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfa:	b672      	cpsid	i
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	b662      	cpsie	i
 8005c0a:	617a      	str	r2, [r7, #20]
 8005c0c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005c0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d22b      	bcs.n	8005c7a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3c:	d112      	bne.n	8005c64 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d016      	beq.n	8005c74 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	3324      	adds	r3, #36	; 0x24
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 f818 	bl	8006c80 <xTaskRemoveFromEventList>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00e      	beq.n	8005c74 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	e007      	b.n	8005c74 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c68:	3301      	adds	r3, #1
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	b25a      	sxtb	r2, r3
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c74:	2301      	movs	r3, #1
 8005c76:	637b      	str	r3, [r7, #52]	; 0x34
 8005c78:	e001      	b.n	8005c7e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3738      	adds	r7, #56	; 0x38
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08c      	sub	sp, #48	; 0x30
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10b      	bne.n	8005cc6 <xQueueReceive+0x32>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	b672      	cpsid	i
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	b662      	cpsie	i
 8005cc2:	623b      	str	r3, [r7, #32]
 8005cc4:	e7fe      	b.n	8005cc4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d103      	bne.n	8005cd4 <xQueueReceive+0x40>
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <xQueueReceive+0x44>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e000      	b.n	8005cda <xQueueReceive+0x46>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10b      	bne.n	8005cf6 <xQueueReceive+0x62>
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	b672      	cpsid	i
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	b662      	cpsie	i
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	e7fe      	b.n	8005cf4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cf6:	f001 f953 	bl	8006fa0 <xTaskGetSchedulerState>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d102      	bne.n	8005d06 <xQueueReceive+0x72>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <xQueueReceive+0x76>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <xQueueReceive+0x78>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10b      	bne.n	8005d28 <xQueueReceive+0x94>
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	b672      	cpsid	i
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	b662      	cpsie	i
 8005d24:	61bb      	str	r3, [r7, #24]
 8005d26:	e7fe      	b.n	8005d26 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d28:	f002 f8de 	bl	8007ee8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01f      	beq.n	8005d78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d38:	68b9      	ldr	r1, [r7, #8]
 8005d3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d3c:	f000 faa1 	bl	8006282 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	1e5a      	subs	r2, r3, #1
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00f      	beq.n	8005d70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	3310      	adds	r3, #16
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 ff93 	bl	8006c80 <xTaskRemoveFromEventList>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d60:	4b3c      	ldr	r3, [pc, #240]	; (8005e54 <xQueueReceive+0x1c0>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d70:	f002 f8ec 	bl	8007f4c <vPortExitCritical>
				return pdPASS;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e069      	b.n	8005e4c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d7e:	f002 f8e5 	bl	8007f4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e062      	b.n	8005e4c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d106      	bne.n	8005d9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d8c:	f107 0310 	add.w	r3, r7, #16
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 ffd9 	bl	8006d48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d96:	2301      	movs	r3, #1
 8005d98:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d9a:	f002 f8d7 	bl	8007f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d9e:	f000 fd65 	bl	800686c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005da2:	f002 f8a1 	bl	8007ee8 <vPortEnterCritical>
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dac:	b25b      	sxtb	r3, r3
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db2:	d103      	bne.n	8005dbc <xQueueReceive+0x128>
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dc2:	b25b      	sxtb	r3, r3
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d103      	bne.n	8005dd2 <xQueueReceive+0x13e>
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dd2:	f002 f8bb 	bl	8007f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dd6:	1d3a      	adds	r2, r7, #4
 8005dd8:	f107 0310 	add.w	r3, r7, #16
 8005ddc:	4611      	mov	r1, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 ffc8 	bl	8006d74 <xTaskCheckForTimeOut>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d123      	bne.n	8005e32 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dec:	f000 fac1 	bl	8006372 <prvIsQueueEmpty>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d017      	beq.n	8005e26 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	3324      	adds	r3, #36	; 0x24
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 ff18 	bl	8006c34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e06:	f000 fa62 	bl	80062ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e0a:	f000 fd3d 	bl	8006888 <xTaskResumeAll>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d189      	bne.n	8005d28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005e14:	4b0f      	ldr	r3, [pc, #60]	; (8005e54 <xQueueReceive+0x1c0>)
 8005e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	e780      	b.n	8005d28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e28:	f000 fa51 	bl	80062ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e2c:	f000 fd2c 	bl	8006888 <xTaskResumeAll>
 8005e30:	e77a      	b.n	8005d28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e34:	f000 fa4b 	bl	80062ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e38:	f000 fd26 	bl	8006888 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e3e:	f000 fa98 	bl	8006372 <prvIsQueueEmpty>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f43f af6f 	beq.w	8005d28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3730      	adds	r7, #48	; 0x30
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	e000ed04 	.word	0xe000ed04

08005e58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08e      	sub	sp, #56	; 0x38
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10b      	bne.n	8005e8c <xQueueSemaphoreTake+0x34>
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	b672      	cpsid	i
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	b662      	cpsie	i
 8005e88:	623b      	str	r3, [r7, #32]
 8005e8a:	e7fe      	b.n	8005e8a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <xQueueSemaphoreTake+0x54>
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	b672      	cpsid	i
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	b662      	cpsie	i
 8005ea8:	61fb      	str	r3, [r7, #28]
 8005eaa:	e7fe      	b.n	8005eaa <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005eac:	f001 f878 	bl	8006fa0 <xTaskGetSchedulerState>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d102      	bne.n	8005ebc <xQueueSemaphoreTake+0x64>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <xQueueSemaphoreTake+0x68>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e000      	b.n	8005ec2 <xQueueSemaphoreTake+0x6a>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10b      	bne.n	8005ede <xQueueSemaphoreTake+0x86>
 8005ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eca:	b672      	cpsid	i
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	b662      	cpsie	i
 8005eda:	61bb      	str	r3, [r7, #24]
 8005edc:	e7fe      	b.n	8005edc <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ede:	f002 f803 	bl	8007ee8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d024      	beq.n	8005f38 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	1e5a      	subs	r2, r3, #1
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d104      	bne.n	8005f08 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005efe:	f001 fa11 	bl	8007324 <pvTaskIncrementMutexHeldCount>
 8005f02:	4602      	mov	r2, r0
 8005f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f06:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00f      	beq.n	8005f30 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	3310      	adds	r3, #16
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 feb3 	bl	8006c80 <xTaskRemoveFromEventList>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f20:	4b54      	ldr	r3, [pc, #336]	; (8006074 <xQueueSemaphoreTake+0x21c>)
 8005f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f30:	f002 f80c 	bl	8007f4c <vPortExitCritical>
				return pdPASS;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e098      	b.n	800606a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d112      	bne.n	8005f64 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00b      	beq.n	8005f5c <xQueueSemaphoreTake+0x104>
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	b672      	cpsid	i
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	b662      	cpsie	i
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	e7fe      	b.n	8005f5a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005f5c:	f001 fff6 	bl	8007f4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f60:	2300      	movs	r3, #0
 8005f62:	e082      	b.n	800606a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f6a:	f107 030c 	add.w	r3, r7, #12
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 feea 	bl	8006d48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f74:	2301      	movs	r3, #1
 8005f76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f78:	f001 ffe8 	bl	8007f4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f7c:	f000 fc76 	bl	800686c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f80:	f001 ffb2 	bl	8007ee8 <vPortEnterCritical>
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f8a:	b25b      	sxtb	r3, r3
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d103      	bne.n	8005f9a <xQueueSemaphoreTake+0x142>
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fa0:	b25b      	sxtb	r3, r3
 8005fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa6:	d103      	bne.n	8005fb0 <xQueueSemaphoreTake+0x158>
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fb0:	f001 ffcc 	bl	8007f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fb4:	463a      	mov	r2, r7
 8005fb6:	f107 030c 	add.w	r3, r7, #12
 8005fba:	4611      	mov	r1, r2
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 fed9 	bl	8006d74 <xTaskCheckForTimeOut>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d132      	bne.n	800602e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fca:	f000 f9d2 	bl	8006372 <prvIsQueueEmpty>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d026      	beq.n	8006022 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d109      	bne.n	8005ff0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005fdc:	f001 ff84 	bl	8007ee8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fff9 	bl	8006fdc <xTaskPriorityInherit>
 8005fea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005fec:	f001 ffae 	bl	8007f4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	3324      	adds	r3, #36	; 0x24
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fe1b 	bl	8006c34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006000:	f000 f965 	bl	80062ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006004:	f000 fc40 	bl	8006888 <xTaskResumeAll>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	f47f af67 	bne.w	8005ede <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006010:	4b18      	ldr	r3, [pc, #96]	; (8006074 <xQueueSemaphoreTake+0x21c>)
 8006012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	e75d      	b.n	8005ede <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006022:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006024:	f000 f953 	bl	80062ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006028:	f000 fc2e 	bl	8006888 <xTaskResumeAll>
 800602c:	e757      	b.n	8005ede <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800602e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006030:	f000 f94d 	bl	80062ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006034:	f000 fc28 	bl	8006888 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006038:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800603a:	f000 f99a 	bl	8006372 <prvIsQueueEmpty>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	f43f af4c 	beq.w	8005ede <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00d      	beq.n	8006068 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800604c:	f001 ff4c 	bl	8007ee8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006050:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006052:	f000 f894 	bl	800617e <prvGetDisinheritPriorityAfterTimeout>
 8006056:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800605e:	4618      	mov	r0, r3
 8006060:	f001 f8c4 	bl	80071ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006064:	f001 ff72 	bl	8007f4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006068:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800606a:	4618      	mov	r0, r3
 800606c:	3738      	adds	r7, #56	; 0x38
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	e000ed04 	.word	0xe000ed04

08006078 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08e      	sub	sp, #56	; 0x38
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10b      	bne.n	80060a6 <xQueueReceiveFromISR+0x2e>
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	b672      	cpsid	i
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	b662      	cpsie	i
 80060a2:	623b      	str	r3, [r7, #32]
 80060a4:	e7fe      	b.n	80060a4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d103      	bne.n	80060b4 <xQueueReceiveFromISR+0x3c>
 80060ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <xQueueReceiveFromISR+0x40>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <xQueueReceiveFromISR+0x42>
 80060b8:	2300      	movs	r3, #0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10b      	bne.n	80060d6 <xQueueReceiveFromISR+0x5e>
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	b672      	cpsid	i
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	b662      	cpsie	i
 80060d2:	61fb      	str	r3, [r7, #28]
 80060d4:	e7fe      	b.n	80060d4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060d6:	f001 ffe7 	bl	80080a8 <vPortValidateInterruptPriority>
	__asm volatile
 80060da:	f3ef 8211 	mrs	r2, BASEPRI
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	b672      	cpsid	i
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	b662      	cpsie	i
 80060f2:	61ba      	str	r2, [r7, #24]
 80060f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80060f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	2b00      	cmp	r3, #0
 8006104:	d02f      	beq.n	8006166 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800610c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006114:	f000 f8b5 	bl	8006282 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611a:	1e5a      	subs	r2, r3, #1
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006120:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d112      	bne.n	8006150 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d016      	beq.n	8006160 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	3310      	adds	r3, #16
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fda2 	bl	8006c80 <xTaskRemoveFromEventList>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00e      	beq.n	8006160 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00b      	beq.n	8006160 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	e007      	b.n	8006160 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006154:	3301      	adds	r3, #1
 8006156:	b2db      	uxtb	r3, r3
 8006158:	b25a      	sxtb	r2, r3
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006160:	2301      	movs	r3, #1
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
 8006164:	e001      	b.n	800616a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8006166:	2300      	movs	r3, #0
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
 800616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006176:	4618      	mov	r0, r3
 8006178:	3738      	adds	r7, #56	; 0x38
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	2b00      	cmp	r3, #0
 800618c:	d006      	beq.n	800619c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f1c3 0307 	rsb	r3, r3, #7
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	e001      	b.n	80061a0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80061a0:	68fb      	ldr	r3, [r7, #12]
	}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10d      	bne.n	80061e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d14d      	bne.n	8006270 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 ff7f 	bl	80070dc <xTaskPriorityDisinherit>
 80061de:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	609a      	str	r2, [r3, #8]
 80061e6:	e043      	b.n	8006270 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d119      	bne.n	8006222 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6858      	ldr	r0, [r3, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	461a      	mov	r2, r3
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	f00e fc3a 	bl	8014a72 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	441a      	add	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	429a      	cmp	r2, r3
 8006216:	d32b      	bcc.n	8006270 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	605a      	str	r2, [r3, #4]
 8006220:	e026      	b.n	8006270 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	68d8      	ldr	r0, [r3, #12]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	461a      	mov	r2, r3
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	f00e fc20 	bl	8014a72 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	425b      	negs	r3, r3
 800623c:	441a      	add	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d207      	bcs.n	800625e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	425b      	negs	r3, r3
 8006258:	441a      	add	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d105      	bne.n	8006270 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	3b01      	subs	r3, #1
 800626e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006278:	697b      	ldr	r3, [r7, #20]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d018      	beq.n	80062c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	441a      	add	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d303      	bcc.n	80062b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68d9      	ldr	r1, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	461a      	mov	r2, r3
 80062c0:	6838      	ldr	r0, [r7, #0]
 80062c2:	f00e fbd6 	bl	8014a72 <memcpy>
	}
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80062d6:	f001 fe07 	bl	8007ee8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062e2:	e011      	b.n	8006308 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d012      	beq.n	8006312 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3324      	adds	r3, #36	; 0x24
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fcc5 	bl	8006c80 <xTaskRemoveFromEventList>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062fc:	f000 fd96 	bl	8006e2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	3b01      	subs	r3, #1
 8006304:	b2db      	uxtb	r3, r3
 8006306:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800630c:	2b00      	cmp	r3, #0
 800630e:	dce9      	bgt.n	80062e4 <prvUnlockQueue+0x16>
 8006310:	e000      	b.n	8006314 <prvUnlockQueue+0x46>
					break;
 8006312:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	22ff      	movs	r2, #255	; 0xff
 8006318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800631c:	f001 fe16 	bl	8007f4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006320:	f001 fde2 	bl	8007ee8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800632a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800632c:	e011      	b.n	8006352 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d012      	beq.n	800635c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3310      	adds	r3, #16
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fca0 	bl	8006c80 <xTaskRemoveFromEventList>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006346:	f000 fd71 	bl	8006e2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800634a:	7bbb      	ldrb	r3, [r7, #14]
 800634c:	3b01      	subs	r3, #1
 800634e:	b2db      	uxtb	r3, r3
 8006350:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006352:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006356:	2b00      	cmp	r3, #0
 8006358:	dce9      	bgt.n	800632e <prvUnlockQueue+0x60>
 800635a:	e000      	b.n	800635e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800635c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	22ff      	movs	r2, #255	; 0xff
 8006362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006366:	f001 fdf1 	bl	8007f4c <vPortExitCritical>
}
 800636a:	bf00      	nop
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800637a:	f001 fdb5 	bl	8007ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	2b00      	cmp	r3, #0
 8006384:	d102      	bne.n	800638c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006386:	2301      	movs	r3, #1
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	e001      	b.n	8006390 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006390:	f001 fddc 	bl	8007f4c <vPortExitCritical>

	return xReturn;
 8006394:	68fb      	ldr	r3, [r7, #12]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063a6:	f001 fd9f 	bl	8007ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d102      	bne.n	80063bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80063b6:	2301      	movs	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	e001      	b.n	80063c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063c0:	f001 fdc4 	bl	8007f4c <vPortExitCritical>

	return xReturn;
 80063c4:	68fb      	ldr	r3, [r7, #12]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b08c      	sub	sp, #48	; 0x30
 80063d2:	af04      	add	r7, sp, #16
 80063d4:	60f8      	str	r0, [r7, #12]
 80063d6:	60b9      	str	r1, [r7, #8]
 80063d8:	603b      	str	r3, [r7, #0]
 80063da:	4613      	mov	r3, r2
 80063dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063de:	88fb      	ldrh	r3, [r7, #6]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fa98 	bl	8007918 <pvPortMalloc>
 80063e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00e      	beq.n	800640e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063f0:	205c      	movs	r0, #92	; 0x5c
 80063f2:	f001 fa91 	bl	8007918 <pvPortMalloc>
 80063f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	631a      	str	r2, [r3, #48]	; 0x30
 8006404:	e005      	b.n	8006412 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006406:	6978      	ldr	r0, [r7, #20]
 8006408:	f001 fb4e 	bl	8007aa8 <vPortFree>
 800640c:	e001      	b.n	8006412 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800640e:	2300      	movs	r3, #0
 8006410:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d013      	beq.n	8006440 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006418:	88fa      	ldrh	r2, [r7, #6]
 800641a:	2300      	movs	r3, #0
 800641c:	9303      	str	r3, [sp, #12]
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	9302      	str	r3, [sp, #8]
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68b9      	ldr	r1, [r7, #8]
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f80e 	bl	8006450 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006434:	69f8      	ldr	r0, [r7, #28]
 8006436:	f000 f89b 	bl	8006570 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800643a:	2301      	movs	r3, #1
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	e002      	b.n	8006446 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006440:	f04f 33ff 	mov.w	r3, #4294967295
 8006444:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006446:	69bb      	ldr	r3, [r7, #24]
	}
 8006448:	4618      	mov	r0, r3
 800644a:	3720      	adds	r7, #32
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	461a      	mov	r2, r3
 8006468:	21a5      	movs	r1, #165	; 0xa5
 800646a:	f00e fb26 	bl	8014aba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006478:	440b      	add	r3, r1
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f023 0307 	bic.w	r3, r3, #7
 8006486:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	b672      	cpsid	i
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	b662      	cpsie	i
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	e7fe      	b.n	80064a8 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d01f      	beq.n	80064f0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064b0:	2300      	movs	r3, #0
 80064b2:	61fb      	str	r3, [r7, #28]
 80064b4:	e012      	b.n	80064dc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	7819      	ldrb	r1, [r3, #0]
 80064be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	3334      	adds	r3, #52	; 0x34
 80064c6:	460a      	mov	r2, r1
 80064c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d006      	beq.n	80064e4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	3301      	adds	r3, #1
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b0f      	cmp	r3, #15
 80064e0:	d9e9      	bls.n	80064b6 <prvInitialiseNewTask+0x66>
 80064e2:	e000      	b.n	80064e6 <prvInitialiseNewTask+0x96>
			{
				break;
 80064e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064ee:	e003      	b.n	80064f8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	2b06      	cmp	r3, #6
 80064fc:	d901      	bls.n	8006502 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064fe:	2306      	movs	r3, #6
 8006500:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006506:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800650c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	2200      	movs	r2, #0
 8006512:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	3304      	adds	r3, #4
 8006518:	4618      	mov	r0, r3
 800651a:	f7fe ffc5 	bl	80054a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	3318      	adds	r3, #24
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe ffc0 	bl	80054a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	f1c3 0207 	rsb	r2, r3, #7
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800653c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	2200      	movs	r2, #0
 8006542:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	68f9      	ldr	r1, [r7, #12]
 8006550:	69b8      	ldr	r0, [r7, #24]
 8006552:	f001 fbc1 	bl	8007cd8 <pxPortInitialiseStack>
 8006556:	4602      	mov	r2, r0
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006566:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006568:	bf00      	nop
 800656a:	3720      	adds	r7, #32
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006578:	f001 fcb6 	bl	8007ee8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800657c:	4b2c      	ldr	r3, [pc, #176]	; (8006630 <prvAddNewTaskToReadyList+0xc0>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3301      	adds	r3, #1
 8006582:	4a2b      	ldr	r2, [pc, #172]	; (8006630 <prvAddNewTaskToReadyList+0xc0>)
 8006584:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006586:	4b2b      	ldr	r3, [pc, #172]	; (8006634 <prvAddNewTaskToReadyList+0xc4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d109      	bne.n	80065a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800658e:	4a29      	ldr	r2, [pc, #164]	; (8006634 <prvAddNewTaskToReadyList+0xc4>)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006594:	4b26      	ldr	r3, [pc, #152]	; (8006630 <prvAddNewTaskToReadyList+0xc0>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d110      	bne.n	80065be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800659c:	f000 fc6a 	bl	8006e74 <prvInitialiseTaskLists>
 80065a0:	e00d      	b.n	80065be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065a2:	4b25      	ldr	r3, [pc, #148]	; (8006638 <prvAddNewTaskToReadyList+0xc8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d109      	bne.n	80065be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065aa:	4b22      	ldr	r3, [pc, #136]	; (8006634 <prvAddNewTaskToReadyList+0xc4>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d802      	bhi.n	80065be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065b8:	4a1e      	ldr	r2, [pc, #120]	; (8006634 <prvAddNewTaskToReadyList+0xc4>)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065be:	4b1f      	ldr	r3, [pc, #124]	; (800663c <prvAddNewTaskToReadyList+0xcc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3301      	adds	r3, #1
 80065c4:	4a1d      	ldr	r2, [pc, #116]	; (800663c <prvAddNewTaskToReadyList+0xcc>)
 80065c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80065c8:	4b1c      	ldr	r3, [pc, #112]	; (800663c <prvAddNewTaskToReadyList+0xcc>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	2201      	movs	r2, #1
 80065d6:	409a      	lsls	r2, r3
 80065d8:	4b19      	ldr	r3, [pc, #100]	; (8006640 <prvAddNewTaskToReadyList+0xd0>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4313      	orrs	r3, r2
 80065de:	4a18      	ldr	r2, [pc, #96]	; (8006640 <prvAddNewTaskToReadyList+0xd0>)
 80065e0:	6013      	str	r3, [r2, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4a15      	ldr	r2, [pc, #84]	; (8006644 <prvAddNewTaskToReadyList+0xd4>)
 80065f0:	441a      	add	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3304      	adds	r3, #4
 80065f6:	4619      	mov	r1, r3
 80065f8:	4610      	mov	r0, r2
 80065fa:	f7fe ff62 	bl	80054c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80065fe:	f001 fca5 	bl	8007f4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006602:	4b0d      	ldr	r3, [pc, #52]	; (8006638 <prvAddNewTaskToReadyList+0xc8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00e      	beq.n	8006628 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800660a:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <prvAddNewTaskToReadyList+0xc4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	429a      	cmp	r2, r3
 8006616:	d207      	bcs.n	8006628 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006618:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <prvAddNewTaskToReadyList+0xd8>)
 800661a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006628:	bf00      	nop
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	20000324 	.word	0x20000324
 8006634:	20000238 	.word	0x20000238
 8006638:	20000330 	.word	0x20000330
 800663c:	20000340 	.word	0x20000340
 8006640:	2000032c 	.word	0x2000032c
 8006644:	2000023c 	.word	0x2000023c
 8006648:	e000ed04 	.word	0xe000ed04

0800664c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006654:	f001 fc48 	bl	8007ee8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d102      	bne.n	8006664 <vTaskDelete+0x18>
 800665e:	4b39      	ldr	r3, [pc, #228]	; (8006744 <vTaskDelete+0xf8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	e000      	b.n	8006666 <vTaskDelete+0x1a>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3304      	adds	r3, #4
 800666c:	4618      	mov	r0, r3
 800666e:	f7fe ff85 	bl	800557c <uxListRemove>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d115      	bne.n	80066a4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667c:	4932      	ldr	r1, [pc, #200]	; (8006748 <vTaskDelete+0xfc>)
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	440b      	add	r3, r1
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10a      	bne.n	80066a4 <vTaskDelete+0x58>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	2201      	movs	r2, #1
 8006694:	fa02 f303 	lsl.w	r3, r2, r3
 8006698:	43da      	mvns	r2, r3
 800669a:	4b2c      	ldr	r3, [pc, #176]	; (800674c <vTaskDelete+0x100>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4013      	ands	r3, r2
 80066a0:	4a2a      	ldr	r2, [pc, #168]	; (800674c <vTaskDelete+0x100>)
 80066a2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d004      	beq.n	80066b6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3318      	adds	r3, #24
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fe ff63 	bl	800557c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80066b6:	4b26      	ldr	r3, [pc, #152]	; (8006750 <vTaskDelete+0x104>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3301      	adds	r3, #1
 80066bc:	4a24      	ldr	r2, [pc, #144]	; (8006750 <vTaskDelete+0x104>)
 80066be:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80066c0:	4b20      	ldr	r3, [pc, #128]	; (8006744 <vTaskDelete+0xf8>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d10b      	bne.n	80066e2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3304      	adds	r3, #4
 80066ce:	4619      	mov	r1, r3
 80066d0:	4820      	ldr	r0, [pc, #128]	; (8006754 <vTaskDelete+0x108>)
 80066d2:	f7fe fef6 	bl	80054c2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80066d6:	4b20      	ldr	r3, [pc, #128]	; (8006758 <vTaskDelete+0x10c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3301      	adds	r3, #1
 80066dc:	4a1e      	ldr	r2, [pc, #120]	; (8006758 <vTaskDelete+0x10c>)
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	e009      	b.n	80066f6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80066e2:	4b1e      	ldr	r3, [pc, #120]	; (800675c <vTaskDelete+0x110>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	4a1c      	ldr	r2, [pc, #112]	; (800675c <vTaskDelete+0x110>)
 80066ea:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 fc27 	bl	8006f40 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80066f2:	f000 fc35 	bl	8006f60 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80066f6:	f001 fc29 	bl	8007f4c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80066fa:	4b19      	ldr	r3, [pc, #100]	; (8006760 <vTaskDelete+0x114>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01c      	beq.n	800673c <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8006702:	4b10      	ldr	r3, [pc, #64]	; (8006744 <vTaskDelete+0xf8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	429a      	cmp	r2, r3
 800670a:	d117      	bne.n	800673c <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800670c:	4b15      	ldr	r3, [pc, #84]	; (8006764 <vTaskDelete+0x118>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00b      	beq.n	800672c <vTaskDelete+0xe0>
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	b672      	cpsid	i
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	b662      	cpsie	i
 8006728:	60bb      	str	r3, [r7, #8]
 800672a:	e7fe      	b.n	800672a <vTaskDelete+0xde>
				portYIELD_WITHIN_API();
 800672c:	4b0e      	ldr	r3, [pc, #56]	; (8006768 <vTaskDelete+0x11c>)
 800672e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20000238 	.word	0x20000238
 8006748:	2000023c 	.word	0x2000023c
 800674c:	2000032c 	.word	0x2000032c
 8006750:	20000340 	.word	0x20000340
 8006754:	2000030c 	.word	0x2000030c
 8006758:	20000320 	.word	0x20000320
 800675c:	20000324 	.word	0x20000324
 8006760:	20000330 	.word	0x20000330
 8006764:	2000034c 	.word	0x2000034c
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d018      	beq.n	80067b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800677e:	4b14      	ldr	r3, [pc, #80]	; (80067d0 <vTaskDelay+0x64>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00b      	beq.n	800679e <vTaskDelay+0x32>
 8006786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678a:	b672      	cpsid	i
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	b662      	cpsie	i
 800679a:	60bb      	str	r3, [r7, #8]
 800679c:	e7fe      	b.n	800679c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800679e:	f000 f865 	bl	800686c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067a2:	2100      	movs	r1, #0
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fdd1 	bl	800734c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067aa:	f000 f86d 	bl	8006888 <xTaskResumeAll>
 80067ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d107      	bne.n	80067c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80067b6:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <vTaskDelay+0x68>)
 80067b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067c6:	bf00      	nop
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	2000034c 	.word	0x2000034c
 80067d4:	e000ed04 	.word	0xe000ed04

080067d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80067de:	4b1d      	ldr	r3, [pc, #116]	; (8006854 <vTaskStartScheduler+0x7c>)
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	2300      	movs	r3, #0
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	2300      	movs	r3, #0
 80067e8:	2280      	movs	r2, #128	; 0x80
 80067ea:	491b      	ldr	r1, [pc, #108]	; (8006858 <vTaskStartScheduler+0x80>)
 80067ec:	481b      	ldr	r0, [pc, #108]	; (800685c <vTaskStartScheduler+0x84>)
 80067ee:	f7ff fdee 	bl	80063ce <xTaskCreate>
 80067f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d117      	bne.n	800682a <vTaskStartScheduler+0x52>
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	b672      	cpsid	i
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	b662      	cpsie	i
 800680e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006810:	4b13      	ldr	r3, [pc, #76]	; (8006860 <vTaskStartScheduler+0x88>)
 8006812:	f04f 32ff 	mov.w	r2, #4294967295
 8006816:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006818:	4b12      	ldr	r3, [pc, #72]	; (8006864 <vTaskStartScheduler+0x8c>)
 800681a:	2201      	movs	r2, #1
 800681c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800681e:	4b12      	ldr	r3, [pc, #72]	; (8006868 <vTaskStartScheduler+0x90>)
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006824:	f001 fae4 	bl	8007df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006828:	e00f      	b.n	800684a <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006830:	d10b      	bne.n	800684a <vTaskStartScheduler+0x72>
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	b672      	cpsid	i
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	b662      	cpsie	i
 8006846:	607b      	str	r3, [r7, #4]
 8006848:	e7fe      	b.n	8006848 <vTaskStartScheduler+0x70>
}
 800684a:	bf00      	nop
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000348 	.word	0x20000348
 8006858:	08018bd0 	.word	0x08018bd0
 800685c:	08006e45 	.word	0x08006e45
 8006860:	20000344 	.word	0x20000344
 8006864:	20000330 	.word	0x20000330
 8006868:	20000328 	.word	0x20000328

0800686c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006870:	4b04      	ldr	r3, [pc, #16]	; (8006884 <vTaskSuspendAll+0x18>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3301      	adds	r3, #1
 8006876:	4a03      	ldr	r2, [pc, #12]	; (8006884 <vTaskSuspendAll+0x18>)
 8006878:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800687a:	bf00      	nop
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	2000034c 	.word	0x2000034c

08006888 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006892:	2300      	movs	r3, #0
 8006894:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006896:	4b42      	ldr	r3, [pc, #264]	; (80069a0 <xTaskResumeAll+0x118>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <xTaskResumeAll+0x2e>
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	b672      	cpsid	i
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	b662      	cpsie	i
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	e7fe      	b.n	80068b4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068b6:	f001 fb17 	bl	8007ee8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068ba:	4b39      	ldr	r3, [pc, #228]	; (80069a0 <xTaskResumeAll+0x118>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3b01      	subs	r3, #1
 80068c0:	4a37      	ldr	r2, [pc, #220]	; (80069a0 <xTaskResumeAll+0x118>)
 80068c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068c4:	4b36      	ldr	r3, [pc, #216]	; (80069a0 <xTaskResumeAll+0x118>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d161      	bne.n	8006990 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068cc:	4b35      	ldr	r3, [pc, #212]	; (80069a4 <xTaskResumeAll+0x11c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d05d      	beq.n	8006990 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068d4:	e02e      	b.n	8006934 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d6:	4b34      	ldr	r3, [pc, #208]	; (80069a8 <xTaskResumeAll+0x120>)
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3318      	adds	r3, #24
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fe fe4a 	bl	800557c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fe fe45 	bl	800557c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	2201      	movs	r2, #1
 80068f8:	409a      	lsls	r2, r3
 80068fa:	4b2c      	ldr	r3, [pc, #176]	; (80069ac <xTaskResumeAll+0x124>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4313      	orrs	r3, r2
 8006900:	4a2a      	ldr	r2, [pc, #168]	; (80069ac <xTaskResumeAll+0x124>)
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4a27      	ldr	r2, [pc, #156]	; (80069b0 <xTaskResumeAll+0x128>)
 8006912:	441a      	add	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3304      	adds	r3, #4
 8006918:	4619      	mov	r1, r3
 800691a:	4610      	mov	r0, r2
 800691c:	f7fe fdd1 	bl	80054c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006924:	4b23      	ldr	r3, [pc, #140]	; (80069b4 <xTaskResumeAll+0x12c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	429a      	cmp	r2, r3
 800692c:	d302      	bcc.n	8006934 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800692e:	4b22      	ldr	r3, [pc, #136]	; (80069b8 <xTaskResumeAll+0x130>)
 8006930:	2201      	movs	r2, #1
 8006932:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006934:	4b1c      	ldr	r3, [pc, #112]	; (80069a8 <xTaskResumeAll+0x120>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1cc      	bne.n	80068d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006942:	f000 fb0d 	bl	8006f60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006946:	4b1d      	ldr	r3, [pc, #116]	; (80069bc <xTaskResumeAll+0x134>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d010      	beq.n	8006974 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006952:	f000 f859 	bl	8006a08 <xTaskIncrementTick>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800695c:	4b16      	ldr	r3, [pc, #88]	; (80069b8 <xTaskResumeAll+0x130>)
 800695e:	2201      	movs	r2, #1
 8006960:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3b01      	subs	r3, #1
 8006966:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1f1      	bne.n	8006952 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <xTaskResumeAll+0x134>)
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006974:	4b10      	ldr	r3, [pc, #64]	; (80069b8 <xTaskResumeAll+0x130>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d009      	beq.n	8006990 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800697c:	2301      	movs	r3, #1
 800697e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006980:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <xTaskResumeAll+0x138>)
 8006982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006990:	f001 fadc 	bl	8007f4c <vPortExitCritical>

	return xAlreadyYielded;
 8006994:	68bb      	ldr	r3, [r7, #8]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	2000034c 	.word	0x2000034c
 80069a4:	20000324 	.word	0x20000324
 80069a8:	200002f8 	.word	0x200002f8
 80069ac:	2000032c 	.word	0x2000032c
 80069b0:	2000023c 	.word	0x2000023c
 80069b4:	20000238 	.word	0x20000238
 80069b8:	20000338 	.word	0x20000338
 80069bc:	20000334 	.word	0x20000334
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069ca:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <xTaskGetTickCount+0x1c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069d0:	687b      	ldr	r3, [r7, #4]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20000328 	.word	0x20000328

080069e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069ea:	f001 fb5d 	bl	80080a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80069ee:	2300      	movs	r3, #0
 80069f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80069f2:	4b04      	ldr	r3, [pc, #16]	; (8006a04 <xTaskGetTickCountFromISR+0x20>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069f8:	683b      	ldr	r3, [r7, #0]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000328 	.word	0x20000328

08006a08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a12:	4b4f      	ldr	r3, [pc, #316]	; (8006b50 <xTaskIncrementTick+0x148>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f040 8089 	bne.w	8006b2e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a1c:	4b4d      	ldr	r3, [pc, #308]	; (8006b54 <xTaskIncrementTick+0x14c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3301      	adds	r3, #1
 8006a22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a24:	4a4b      	ldr	r2, [pc, #300]	; (8006b54 <xTaskIncrementTick+0x14c>)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d121      	bne.n	8006a74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a30:	4b49      	ldr	r3, [pc, #292]	; (8006b58 <xTaskIncrementTick+0x150>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00b      	beq.n	8006a52 <xTaskIncrementTick+0x4a>
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	b672      	cpsid	i
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	b662      	cpsie	i
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	e7fe      	b.n	8006a50 <xTaskIncrementTick+0x48>
 8006a52:	4b41      	ldr	r3, [pc, #260]	; (8006b58 <xTaskIncrementTick+0x150>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	4b40      	ldr	r3, [pc, #256]	; (8006b5c <xTaskIncrementTick+0x154>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a3e      	ldr	r2, [pc, #248]	; (8006b58 <xTaskIncrementTick+0x150>)
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	4a3e      	ldr	r2, [pc, #248]	; (8006b5c <xTaskIncrementTick+0x154>)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	4b3e      	ldr	r3, [pc, #248]	; (8006b60 <xTaskIncrementTick+0x158>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	4a3c      	ldr	r2, [pc, #240]	; (8006b60 <xTaskIncrementTick+0x158>)
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	f000 fa76 	bl	8006f60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a74:	4b3b      	ldr	r3, [pc, #236]	; (8006b64 <xTaskIncrementTick+0x15c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d348      	bcc.n	8006b10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a7e:	4b36      	ldr	r3, [pc, #216]	; (8006b58 <xTaskIncrementTick+0x150>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d104      	bne.n	8006a92 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a88:	4b36      	ldr	r3, [pc, #216]	; (8006b64 <xTaskIncrementTick+0x15c>)
 8006a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8e:	601a      	str	r2, [r3, #0]
					break;
 8006a90:	e03e      	b.n	8006b10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a92:	4b31      	ldr	r3, [pc, #196]	; (8006b58 <xTaskIncrementTick+0x150>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d203      	bcs.n	8006ab2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006aaa:	4a2e      	ldr	r2, [pc, #184]	; (8006b64 <xTaskIncrementTick+0x15c>)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ab0:	e02e      	b.n	8006b10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe fd60 	bl	800557c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d004      	beq.n	8006ace <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	3318      	adds	r3, #24
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe fd57 	bl	800557c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	409a      	lsls	r2, r3
 8006ad6:	4b24      	ldr	r3, [pc, #144]	; (8006b68 <xTaskIncrementTick+0x160>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	4a22      	ldr	r2, [pc, #136]	; (8006b68 <xTaskIncrementTick+0x160>)
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4a1f      	ldr	r2, [pc, #124]	; (8006b6c <xTaskIncrementTick+0x164>)
 8006aee:	441a      	add	r2, r3
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	3304      	adds	r3, #4
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f7fe fce3 	bl	80054c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b00:	4b1b      	ldr	r3, [pc, #108]	; (8006b70 <xTaskIncrementTick+0x168>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d3b9      	bcc.n	8006a7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b0e:	e7b6      	b.n	8006a7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b10:	4b17      	ldr	r3, [pc, #92]	; (8006b70 <xTaskIncrementTick+0x168>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b16:	4915      	ldr	r1, [pc, #84]	; (8006b6c <xTaskIncrementTick+0x164>)
 8006b18:	4613      	mov	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d907      	bls.n	8006b38 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	e004      	b.n	8006b38 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b2e:	4b11      	ldr	r3, [pc, #68]	; (8006b74 <xTaskIncrementTick+0x16c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3301      	adds	r3, #1
 8006b34:	4a0f      	ldr	r2, [pc, #60]	; (8006b74 <xTaskIncrementTick+0x16c>)
 8006b36:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006b38:	4b0f      	ldr	r3, [pc, #60]	; (8006b78 <xTaskIncrementTick+0x170>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006b44:	697b      	ldr	r3, [r7, #20]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	2000034c 	.word	0x2000034c
 8006b54:	20000328 	.word	0x20000328
 8006b58:	200002f0 	.word	0x200002f0
 8006b5c:	200002f4 	.word	0x200002f4
 8006b60:	2000033c 	.word	0x2000033c
 8006b64:	20000344 	.word	0x20000344
 8006b68:	2000032c 	.word	0x2000032c
 8006b6c:	2000023c 	.word	0x2000023c
 8006b70:	20000238 	.word	0x20000238
 8006b74:	20000334 	.word	0x20000334
 8006b78:	20000338 	.word	0x20000338

08006b7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b82:	4b27      	ldr	r3, [pc, #156]	; (8006c20 <vTaskSwitchContext+0xa4>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b8a:	4b26      	ldr	r3, [pc, #152]	; (8006c24 <vTaskSwitchContext+0xa8>)
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b90:	e040      	b.n	8006c14 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006b92:	4b24      	ldr	r3, [pc, #144]	; (8006c24 <vTaskSwitchContext+0xa8>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b98:	4b23      	ldr	r3, [pc, #140]	; (8006c28 <vTaskSwitchContext+0xac>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	fab3 f383 	clz	r3, r3
 8006ba4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ba6:	7afb      	ldrb	r3, [r7, #11]
 8006ba8:	f1c3 031f 	rsb	r3, r3, #31
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	491f      	ldr	r1, [pc, #124]	; (8006c2c <vTaskSwitchContext+0xb0>)
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	440b      	add	r3, r1
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10b      	bne.n	8006bda <vTaskSwitchContext+0x5e>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	b672      	cpsid	i
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	b662      	cpsie	i
 8006bd6:	607b      	str	r3, [r7, #4]
 8006bd8:	e7fe      	b.n	8006bd8 <vTaskSwitchContext+0x5c>
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4a11      	ldr	r2, [pc, #68]	; (8006c2c <vTaskSwitchContext+0xb0>)
 8006be6:	4413      	add	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	605a      	str	r2, [r3, #4]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d104      	bne.n	8006c0a <vTaskSwitchContext+0x8e>
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	605a      	str	r2, [r3, #4]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	4a07      	ldr	r2, [pc, #28]	; (8006c30 <vTaskSwitchContext+0xb4>)
 8006c12:	6013      	str	r3, [r2, #0]
}
 8006c14:	bf00      	nop
 8006c16:	371c      	adds	r7, #28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	2000034c 	.word	0x2000034c
 8006c24:	20000338 	.word	0x20000338
 8006c28:	2000032c 	.word	0x2000032c
 8006c2c:	2000023c 	.word	0x2000023c
 8006c30:	20000238 	.word	0x20000238

08006c34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10b      	bne.n	8006c5c <vTaskPlaceOnEventList+0x28>
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	b672      	cpsid	i
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	b662      	cpsie	i
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	e7fe      	b.n	8006c5a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c5c:	4b07      	ldr	r3, [pc, #28]	; (8006c7c <vTaskPlaceOnEventList+0x48>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3318      	adds	r3, #24
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7fe fc50 	bl	800550a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	6838      	ldr	r0, [r7, #0]
 8006c6e:	f000 fb6d 	bl	800734c <prvAddCurrentTaskToDelayedList>
}
 8006c72:	bf00      	nop
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000238 	.word	0x20000238

08006c80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10b      	bne.n	8006cae <xTaskRemoveFromEventList+0x2e>
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	b672      	cpsid	i
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	b662      	cpsie	i
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	e7fe      	b.n	8006cac <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	3318      	adds	r3, #24
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe fc62 	bl	800557c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cb8:	4b1d      	ldr	r3, [pc, #116]	; (8006d30 <xTaskRemoveFromEventList+0xb0>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d11c      	bne.n	8006cfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fe fc59 	bl	800557c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cce:	2201      	movs	r2, #1
 8006cd0:	409a      	lsls	r2, r3
 8006cd2:	4b18      	ldr	r3, [pc, #96]	; (8006d34 <xTaskRemoveFromEventList+0xb4>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	4a16      	ldr	r2, [pc, #88]	; (8006d34 <xTaskRemoveFromEventList+0xb4>)
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4a13      	ldr	r2, [pc, #76]	; (8006d38 <xTaskRemoveFromEventList+0xb8>)
 8006cea:	441a      	add	r2, r3
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	f7fe fbe5 	bl	80054c2 <vListInsertEnd>
 8006cf8:	e005      	b.n	8006d06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	3318      	adds	r3, #24
 8006cfe:	4619      	mov	r1, r3
 8006d00:	480e      	ldr	r0, [pc, #56]	; (8006d3c <xTaskRemoveFromEventList+0xbc>)
 8006d02:	f7fe fbde 	bl	80054c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0a:	4b0d      	ldr	r3, [pc, #52]	; (8006d40 <xTaskRemoveFromEventList+0xc0>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d905      	bls.n	8006d20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d14:	2301      	movs	r3, #1
 8006d16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d18:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <xTaskRemoveFromEventList+0xc4>)
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	e001      	b.n	8006d24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d24:	697b      	ldr	r3, [r7, #20]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	2000034c 	.word	0x2000034c
 8006d34:	2000032c 	.word	0x2000032c
 8006d38:	2000023c 	.word	0x2000023c
 8006d3c:	200002f8 	.word	0x200002f8
 8006d40:	20000238 	.word	0x20000238
 8006d44:	20000338 	.word	0x20000338

08006d48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d50:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <vTaskInternalSetTimeOutState+0x24>)
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d58:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <vTaskInternalSetTimeOutState+0x28>)
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	605a      	str	r2, [r3, #4]
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	2000033c 	.word	0x2000033c
 8006d70:	20000328 	.word	0x20000328

08006d74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10b      	bne.n	8006d9c <xTaskCheckForTimeOut+0x28>
 8006d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d88:	b672      	cpsid	i
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	b662      	cpsie	i
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	e7fe      	b.n	8006d9a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10b      	bne.n	8006dba <xTaskCheckForTimeOut+0x46>
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	b672      	cpsid	i
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	b662      	cpsie	i
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	e7fe      	b.n	8006db8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8006dba:	f001 f895 	bl	8007ee8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006dbe:	4b19      	ldr	r3, [pc, #100]	; (8006e24 <xTaskCheckForTimeOut+0xb0>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	617b      	str	r3, [r7, #20]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <xTaskCheckForTimeOut+0xb4>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d007      	beq.n	8006dea <xTaskCheckForTimeOut+0x76>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d302      	bcc.n	8006dea <xTaskCheckForTimeOut+0x76>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006de4:	2301      	movs	r3, #1
 8006de6:	61fb      	str	r3, [r7, #28]
 8006de8:	e015      	b.n	8006e16 <xTaskCheckForTimeOut+0xa2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d20b      	bcs.n	8006e0c <xTaskCheckForTimeOut+0x98>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	1ad2      	subs	r2, r2, r3
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff ffa1 	bl	8006d48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e06:	2300      	movs	r3, #0
 8006e08:	61fb      	str	r3, [r7, #28]
 8006e0a:	e004      	b.n	8006e16 <xTaskCheckForTimeOut+0xa2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e12:	2301      	movs	r3, #1
 8006e14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e16:	f001 f899 	bl	8007f4c <vPortExitCritical>

	return xReturn;
 8006e1a:	69fb      	ldr	r3, [r7, #28]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3720      	adds	r7, #32
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	20000328 	.word	0x20000328
 8006e28:	2000033c 	.word	0x2000033c

08006e2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e30:	4b03      	ldr	r3, [pc, #12]	; (8006e40 <vTaskMissedYield+0x14>)
 8006e32:	2201      	movs	r2, #1
 8006e34:	601a      	str	r2, [r3, #0]
}
 8006e36:	bf00      	nop
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	20000338 	.word	0x20000338

08006e44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e4c:	f000 f84c 	bl	8006ee8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e50:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <prvIdleTask+0x28>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d9f9      	bls.n	8006e4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e58:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <prvIdleTask+0x2c>)
 8006e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e68:	e7f0      	b.n	8006e4c <prvIdleTask+0x8>
 8006e6a:	bf00      	nop
 8006e6c:	2000023c 	.word	0x2000023c
 8006e70:	e000ed04 	.word	0xe000ed04

08006e74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	607b      	str	r3, [r7, #4]
 8006e7e:	e00c      	b.n	8006e9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4a10      	ldr	r2, [pc, #64]	; (8006ecc <prvInitialiseTaskLists+0x58>)
 8006e8c:	4413      	add	r3, r2
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe faea 	bl	8005468 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3301      	adds	r3, #1
 8006e98:	607b      	str	r3, [r7, #4]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b06      	cmp	r3, #6
 8006e9e:	d9ef      	bls.n	8006e80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ea0:	480b      	ldr	r0, [pc, #44]	; (8006ed0 <prvInitialiseTaskLists+0x5c>)
 8006ea2:	f7fe fae1 	bl	8005468 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ea6:	480b      	ldr	r0, [pc, #44]	; (8006ed4 <prvInitialiseTaskLists+0x60>)
 8006ea8:	f7fe fade 	bl	8005468 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006eac:	480a      	ldr	r0, [pc, #40]	; (8006ed8 <prvInitialiseTaskLists+0x64>)
 8006eae:	f7fe fadb 	bl	8005468 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006eb2:	480a      	ldr	r0, [pc, #40]	; (8006edc <prvInitialiseTaskLists+0x68>)
 8006eb4:	f7fe fad8 	bl	8005468 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006eb8:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <prvInitialiseTaskLists+0x6c>)
 8006eba:	4a05      	ldr	r2, [pc, #20]	; (8006ed0 <prvInitialiseTaskLists+0x5c>)
 8006ebc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ebe:	4b09      	ldr	r3, [pc, #36]	; (8006ee4 <prvInitialiseTaskLists+0x70>)
 8006ec0:	4a04      	ldr	r2, [pc, #16]	; (8006ed4 <prvInitialiseTaskLists+0x60>)
 8006ec2:	601a      	str	r2, [r3, #0]
}
 8006ec4:	bf00      	nop
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	2000023c 	.word	0x2000023c
 8006ed0:	200002c8 	.word	0x200002c8
 8006ed4:	200002dc 	.word	0x200002dc
 8006ed8:	200002f8 	.word	0x200002f8
 8006edc:	2000030c 	.word	0x2000030c
 8006ee0:	200002f0 	.word	0x200002f0
 8006ee4:	200002f4 	.word	0x200002f4

08006ee8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eee:	e019      	b.n	8006f24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ef0:	f000 fffa 	bl	8007ee8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ef4:	4b0f      	ldr	r3, [pc, #60]	; (8006f34 <prvCheckTasksWaitingTermination+0x4c>)
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fe fb3b 	bl	800557c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f06:	4b0c      	ldr	r3, [pc, #48]	; (8006f38 <prvCheckTasksWaitingTermination+0x50>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	4a0a      	ldr	r2, [pc, #40]	; (8006f38 <prvCheckTasksWaitingTermination+0x50>)
 8006f0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <prvCheckTasksWaitingTermination+0x54>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	4a09      	ldr	r2, [pc, #36]	; (8006f3c <prvCheckTasksWaitingTermination+0x54>)
 8006f18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f1a:	f001 f817 	bl	8007f4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f80e 	bl	8006f40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f24:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <prvCheckTasksWaitingTermination+0x54>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e1      	bne.n	8006ef0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	2000030c 	.word	0x2000030c
 8006f38:	20000324 	.word	0x20000324
 8006f3c:	20000320 	.word	0x20000320

08006f40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 fdab 	bl	8007aa8 <vPortFree>
			vPortFree( pxTCB );
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fda8 	bl	8007aa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f58:	bf00      	nop
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f66:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <prvResetNextTaskUnblockTime+0x38>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d104      	bne.n	8006f7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f70:	4b0a      	ldr	r3, [pc, #40]	; (8006f9c <prvResetNextTaskUnblockTime+0x3c>)
 8006f72:	f04f 32ff 	mov.w	r2, #4294967295
 8006f76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f78:	e008      	b.n	8006f8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f7a:	4b07      	ldr	r3, [pc, #28]	; (8006f98 <prvResetNextTaskUnblockTime+0x38>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	4a04      	ldr	r2, [pc, #16]	; (8006f9c <prvResetNextTaskUnblockTime+0x3c>)
 8006f8a:	6013      	str	r3, [r2, #0]
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	200002f0 	.word	0x200002f0
 8006f9c:	20000344 	.word	0x20000344

08006fa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fa6:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <xTaskGetSchedulerState+0x34>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d102      	bne.n	8006fb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	607b      	str	r3, [r7, #4]
 8006fb2:	e008      	b.n	8006fc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fb4:	4b08      	ldr	r3, [pc, #32]	; (8006fd8 <xTaskGetSchedulerState+0x38>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d102      	bne.n	8006fc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	607b      	str	r3, [r7, #4]
 8006fc0:	e001      	b.n	8006fc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fc6:	687b      	ldr	r3, [r7, #4]
	}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	20000330 	.word	0x20000330
 8006fd8:	2000034c 	.word	0x2000034c

08006fdc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d069      	beq.n	80070c6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff6:	4b36      	ldr	r3, [pc, #216]	; (80070d0 <xTaskPriorityInherit+0xf4>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d259      	bcs.n	80070b4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	db06      	blt.n	8007016 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007008:	4b31      	ldr	r3, [pc, #196]	; (80070d0 <xTaskPriorityInherit+0xf4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	f1c3 0207 	rsb	r2, r3, #7
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	6959      	ldr	r1, [r3, #20]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4a2b      	ldr	r2, [pc, #172]	; (80070d4 <xTaskPriorityInherit+0xf8>)
 8007028:	4413      	add	r3, r2
 800702a:	4299      	cmp	r1, r3
 800702c:	d13a      	bne.n	80070a4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	3304      	adds	r3, #4
 8007032:	4618      	mov	r0, r3
 8007034:	f7fe faa2 	bl	800557c <uxListRemove>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d115      	bne.n	800706a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007042:	4924      	ldr	r1, [pc, #144]	; (80070d4 <xTaskPriorityInherit+0xf8>)
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10a      	bne.n	800706a <xTaskPriorityInherit+0x8e>
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	2201      	movs	r2, #1
 800705a:	fa02 f303 	lsl.w	r3, r2, r3
 800705e:	43da      	mvns	r2, r3
 8007060:	4b1d      	ldr	r3, [pc, #116]	; (80070d8 <xTaskPriorityInherit+0xfc>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4013      	ands	r3, r2
 8007066:	4a1c      	ldr	r2, [pc, #112]	; (80070d8 <xTaskPriorityInherit+0xfc>)
 8007068:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800706a:	4b19      	ldr	r3, [pc, #100]	; (80070d0 <xTaskPriorityInherit+0xf4>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	2201      	movs	r2, #1
 800707a:	409a      	lsls	r2, r3
 800707c:	4b16      	ldr	r3, [pc, #88]	; (80070d8 <xTaskPriorityInherit+0xfc>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4313      	orrs	r3, r2
 8007082:	4a15      	ldr	r2, [pc, #84]	; (80070d8 <xTaskPriorityInherit+0xfc>)
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708a:	4613      	mov	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4a10      	ldr	r2, [pc, #64]	; (80070d4 <xTaskPriorityInherit+0xf8>)
 8007094:	441a      	add	r2, r3
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	3304      	adds	r3, #4
 800709a:	4619      	mov	r1, r3
 800709c:	4610      	mov	r0, r2
 800709e:	f7fe fa10 	bl	80054c2 <vListInsertEnd>
 80070a2:	e004      	b.n	80070ae <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070a4:	4b0a      	ldr	r3, [pc, #40]	; (80070d0 <xTaskPriorityInherit+0xf4>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80070ae:	2301      	movs	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	e008      	b.n	80070c6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <xTaskPriorityInherit+0xf4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	429a      	cmp	r2, r3
 80070c0:	d201      	bcs.n	80070c6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80070c2:	2301      	movs	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070c6:	68fb      	ldr	r3, [r7, #12]
	}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20000238 	.word	0x20000238
 80070d4:	2000023c 	.word	0x2000023c
 80070d8:	2000032c 	.word	0x2000032c

080070dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070e8:	2300      	movs	r3, #0
 80070ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d070      	beq.n	80071d4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070f2:	4b3b      	ldr	r3, [pc, #236]	; (80071e0 <xTaskPriorityDisinherit+0x104>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d00b      	beq.n	8007114 <xTaskPriorityDisinherit+0x38>
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	b672      	cpsid	i
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	b662      	cpsie	i
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	e7fe      	b.n	8007112 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10b      	bne.n	8007134 <xTaskPriorityDisinherit+0x58>
 800711c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007120:	b672      	cpsid	i
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	b662      	cpsie	i
 8007130:	60bb      	str	r3, [r7, #8]
 8007132:	e7fe      	b.n	8007132 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007138:	1e5a      	subs	r2, r3, #1
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007146:	429a      	cmp	r2, r3
 8007148:	d044      	beq.n	80071d4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800714e:	2b00      	cmp	r3, #0
 8007150:	d140      	bne.n	80071d4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	3304      	adds	r3, #4
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe fa10 	bl	800557c <uxListRemove>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d115      	bne.n	800718e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007166:	491f      	ldr	r1, [pc, #124]	; (80071e4 <xTaskPriorityDisinherit+0x108>)
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	440b      	add	r3, r1
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10a      	bne.n	800718e <xTaskPriorityDisinherit+0xb2>
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	2201      	movs	r2, #1
 800717e:	fa02 f303 	lsl.w	r3, r2, r3
 8007182:	43da      	mvns	r2, r3
 8007184:	4b18      	ldr	r3, [pc, #96]	; (80071e8 <xTaskPriorityDisinherit+0x10c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4013      	ands	r3, r2
 800718a:	4a17      	ldr	r2, [pc, #92]	; (80071e8 <xTaskPriorityDisinherit+0x10c>)
 800718c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719a:	f1c3 0207 	rsb	r2, r3, #7
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a6:	2201      	movs	r2, #1
 80071a8:	409a      	lsls	r2, r3
 80071aa:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <xTaskPriorityDisinherit+0x10c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	4a0d      	ldr	r2, [pc, #52]	; (80071e8 <xTaskPriorityDisinherit+0x10c>)
 80071b2:	6013      	str	r3, [r2, #0]
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b8:	4613      	mov	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4a08      	ldr	r2, [pc, #32]	; (80071e4 <xTaskPriorityDisinherit+0x108>)
 80071c2:	441a      	add	r2, r3
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	3304      	adds	r3, #4
 80071c8:	4619      	mov	r1, r3
 80071ca:	4610      	mov	r0, r2
 80071cc:	f7fe f979 	bl	80054c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071d0:	2301      	movs	r3, #1
 80071d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071d4:	697b      	ldr	r3, [r7, #20]
	}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20000238 	.word	0x20000238
 80071e4:	2000023c 	.word	0x2000023c
 80071e8:	2000032c 	.word	0x2000032c

080071ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80071fa:	2301      	movs	r3, #1
 80071fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 8085 	beq.w	8007310 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10b      	bne.n	8007226 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	b672      	cpsid	i
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	b662      	cpsie	i
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	e7fe      	b.n	8007224 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	d902      	bls.n	8007236 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	61fb      	str	r3, [r7, #28]
 8007234:	e002      	b.n	800723c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	429a      	cmp	r2, r3
 8007244:	d064      	beq.n	8007310 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	429a      	cmp	r2, r3
 800724e:	d15f      	bne.n	8007310 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007250:	4b31      	ldr	r3, [pc, #196]	; (8007318 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	429a      	cmp	r2, r3
 8007258:	d10b      	bne.n	8007272 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800725a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725e:	b672      	cpsid	i
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	b662      	cpsie	i
 800726e:	60bb      	str	r3, [r7, #8]
 8007270:	e7fe      	b.n	8007270 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007276:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	2b00      	cmp	r3, #0
 8007284:	db04      	blt.n	8007290 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	f1c3 0207 	rsb	r2, r3, #7
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	6959      	ldr	r1, [r3, #20]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4a1f      	ldr	r2, [pc, #124]	; (800731c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80072a0:	4413      	add	r3, r2
 80072a2:	4299      	cmp	r1, r3
 80072a4:	d134      	bne.n	8007310 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	3304      	adds	r3, #4
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe f966 	bl	800557c <uxListRemove>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d115      	bne.n	80072e2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ba:	4918      	ldr	r1, [pc, #96]	; (800731c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80072bc:	4613      	mov	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	440b      	add	r3, r1
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10a      	bne.n	80072e2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	2201      	movs	r2, #1
 80072d2:	fa02 f303 	lsl.w	r3, r2, r3
 80072d6:	43da      	mvns	r2, r3
 80072d8:	4b11      	ldr	r3, [pc, #68]	; (8007320 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4013      	ands	r3, r2
 80072de:	4a10      	ldr	r2, [pc, #64]	; (8007320 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80072e0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e6:	2201      	movs	r2, #1
 80072e8:	409a      	lsls	r2, r3
 80072ea:	4b0d      	ldr	r3, [pc, #52]	; (8007320 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	4a0b      	ldr	r2, [pc, #44]	; (8007320 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f8:	4613      	mov	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4a06      	ldr	r2, [pc, #24]	; (800731c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007302:	441a      	add	r2, r3
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	3304      	adds	r3, #4
 8007308:	4619      	mov	r1, r3
 800730a:	4610      	mov	r0, r2
 800730c:	f7fe f8d9 	bl	80054c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007310:	bf00      	nop
 8007312:	3720      	adds	r7, #32
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	20000238 	.word	0x20000238
 800731c:	2000023c 	.word	0x2000023c
 8007320:	2000032c 	.word	0x2000032c

08007324 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007328:	4b07      	ldr	r3, [pc, #28]	; (8007348 <pvTaskIncrementMutexHeldCount+0x24>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d004      	beq.n	800733a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007330:	4b05      	ldr	r3, [pc, #20]	; (8007348 <pvTaskIncrementMutexHeldCount+0x24>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007336:	3201      	adds	r2, #1
 8007338:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800733a:	4b03      	ldr	r3, [pc, #12]	; (8007348 <pvTaskIncrementMutexHeldCount+0x24>)
 800733c:	681b      	ldr	r3, [r3, #0]
	}
 800733e:	4618      	mov	r0, r3
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	20000238 	.word	0x20000238

0800734c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007356:	4b21      	ldr	r3, [pc, #132]	; (80073dc <prvAddCurrentTaskToDelayedList+0x90>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800735c:	4b20      	ldr	r3, [pc, #128]	; (80073e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3304      	adds	r3, #4
 8007362:	4618      	mov	r0, r3
 8007364:	f7fe f90a 	bl	800557c <uxListRemove>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10b      	bne.n	8007386 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800736e:	4b1c      	ldr	r3, [pc, #112]	; (80073e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	2201      	movs	r2, #1
 8007376:	fa02 f303 	lsl.w	r3, r2, r3
 800737a:	43da      	mvns	r2, r3
 800737c:	4b19      	ldr	r3, [pc, #100]	; (80073e4 <prvAddCurrentTaskToDelayedList+0x98>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4013      	ands	r3, r2
 8007382:	4a18      	ldr	r2, [pc, #96]	; (80073e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007384:	6013      	str	r3, [r2, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4413      	add	r3, r2
 800738c:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800738e:	4b14      	ldr	r3, [pc, #80]	; (80073e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	429a      	cmp	r2, r3
 800739c:	d209      	bcs.n	80073b2 <prvAddCurrentTaskToDelayedList+0x66>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800739e:	4b12      	ldr	r3, [pc, #72]	; (80073e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	4b0f      	ldr	r3, [pc, #60]	; (80073e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3304      	adds	r3, #4
 80073a8:	4619      	mov	r1, r3
 80073aa:	4610      	mov	r0, r2
 80073ac:	f7fe f8ad 	bl	800550a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073b0:	e010      	b.n	80073d4 <prvAddCurrentTaskToDelayedList+0x88>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073b2:	4b0e      	ldr	r3, [pc, #56]	; (80073ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4b0a      	ldr	r3, [pc, #40]	; (80073e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4619      	mov	r1, r3
 80073be:	4610      	mov	r0, r2
 80073c0:	f7fe f8a3 	bl	800550a <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 80073c4:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d202      	bcs.n	80073d4 <prvAddCurrentTaskToDelayedList+0x88>
				xNextTaskUnblockTime = xTimeToWake;
 80073ce:	4a08      	ldr	r2, [pc, #32]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	6013      	str	r3, [r2, #0]
}
 80073d4:	bf00      	nop
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	20000328 	.word	0x20000328
 80073e0:	20000238 	.word	0x20000238
 80073e4:	2000032c 	.word	0x2000032c
 80073e8:	200002f4 	.word	0x200002f4
 80073ec:	200002f0 	.word	0x200002f0
 80073f0:	20000344 	.word	0x20000344

080073f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007406:	2b84      	cmp	r3, #132	; 0x84
 8007408:	d005      	beq.n	8007416 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800740a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	4413      	add	r3, r2
 8007412:	3303      	adds	r3, #3
 8007414:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007416:	68fb      	ldr	r3, [r7, #12]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800742a:	f3ef 8305 	mrs	r3, IPSR
 800742e:	607b      	str	r3, [r7, #4]
  return(result);
 8007430:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007432:	2b00      	cmp	r3, #0
 8007434:	bf14      	ite	ne
 8007436:	2301      	movne	r3, #1
 8007438:	2300      	moveq	r3, #0
 800743a:	b2db      	uxtb	r3, r3
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800744c:	f7ff f9c4 	bl	80067d8 <vTaskStartScheduler>
  
  return osOK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	bd80      	pop	{r7, pc}

08007456 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800745a:	f7ff ffe3 	bl	8007424 <inHandlerMode>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007464:	f7ff fabe 	bl	80069e4 <xTaskGetTickCountFromISR>
 8007468:	4603      	mov	r3, r0
 800746a:	e002      	b.n	8007472 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800746c:	f7ff faaa 	bl	80069c4 <xTaskGetTickCount>
 8007470:	4603      	mov	r3, r0
  }
}
 8007472:	4618      	mov	r0, r3
 8007474:	bd80      	pop	{r7, pc}

08007476 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007476:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007478:	b087      	sub	sp, #28
 800747a:	af02      	add	r7, sp, #8
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685c      	ldr	r4, [r3, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800748c:	b29e      	uxth	r6, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff ffad 	bl	80073f4 <makeFreeRtosPriority>
 800749a:	4602      	mov	r2, r0
 800749c:	f107 030c 	add.w	r3, r7, #12
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	9200      	str	r2, [sp, #0]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	4632      	mov	r2, r6
 80074a8:	4629      	mov	r1, r5
 80074aa:	4620      	mov	r0, r4
 80074ac:	f7fe ff8f 	bl	80063ce <xTaskCreate>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d001      	beq.n	80074ba <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	e000      	b.n	80074bc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80074ba:	68fb      	ldr	r3, [r7, #12]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074c4 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff f8bd 	bl	800664c <vTaskDelete>
  return osOK;
 80074d2:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <osDelay+0x16>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	e000      	b.n	80074f4 <osDelay+0x18>
 80074f2:	2301      	movs	r3, #1
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff f939 	bl	800676c <vTaskDelay>
  
  return osOK;
 80074fa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800750c:	2001      	movs	r0, #1
 800750e:	f7fe f943 	bl	8005798 <xQueueCreateMutex>
 8007512:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007526:	2300      	movs	r3, #0
 8007528:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <osMutexWait+0x18>
    return osErrorParameter;
 8007530:	2380      	movs	r3, #128	; 0x80
 8007532:	e03a      	b.n	80075aa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753e:	d103      	bne.n	8007548 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007540:	f04f 33ff 	mov.w	r3, #4294967295
 8007544:	60fb      	str	r3, [r7, #12]
 8007546:	e009      	b.n	800755c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d006      	beq.n	800755c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <osMutexWait+0x40>
      ticks = 1;
 8007558:	2301      	movs	r3, #1
 800755a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800755c:	f7ff ff62 	bl	8007424 <inHandlerMode>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d017      	beq.n	8007596 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007566:	f107 0308 	add.w	r3, r7, #8
 800756a:	461a      	mov	r2, r3
 800756c:	2100      	movs	r1, #0
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7fe fd82 	bl	8006078 <xQueueReceiveFromISR>
 8007574:	4603      	mov	r3, r0
 8007576:	2b01      	cmp	r3, #1
 8007578:	d001      	beq.n	800757e <osMutexWait+0x62>
      return osErrorOS;
 800757a:	23ff      	movs	r3, #255	; 0xff
 800757c:	e015      	b.n	80075aa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d011      	beq.n	80075a8 <osMutexWait+0x8c>
 8007584:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <osMutexWait+0x98>)
 8007586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	e008      	b.n	80075a8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007596:	68f9      	ldr	r1, [r7, #12]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7fe fc5d 	bl	8005e58 <xQueueSemaphoreTake>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d001      	beq.n	80075a8 <osMutexWait+0x8c>
    return osErrorOS;
 80075a4:	23ff      	movs	r3, #255	; 0xff
 80075a6:	e000      	b.n	80075aa <osMutexWait+0x8e>
  }
  
  return osOK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	e000ed04 	.word	0xe000ed04

080075b8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80075c8:	f7ff ff2c 	bl	8007424 <inHandlerMode>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d016      	beq.n	8007600 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80075d2:	f107 0308 	add.w	r3, r7, #8
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7fe fac9 	bl	8005b70 <xQueueGiveFromISR>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d001      	beq.n	80075e8 <osMutexRelease+0x30>
      return osErrorOS;
 80075e4:	23ff      	movs	r3, #255	; 0xff
 80075e6:	e017      	b.n	8007618 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d013      	beq.n	8007616 <osMutexRelease+0x5e>
 80075ee:	4b0c      	ldr	r3, [pc, #48]	; (8007620 <osMutexRelease+0x68>)
 80075f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	e00a      	b.n	8007616 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007600:	2300      	movs	r3, #0
 8007602:	2200      	movs	r2, #0
 8007604:	2100      	movs	r1, #0
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fe f914 	bl	8005834 <xQueueGenericSend>
 800760c:	4603      	mov	r3, r0
 800760e:	2b01      	cmp	r3, #1
 8007610:	d001      	beq.n	8007616 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007612:	23ff      	movs	r3, #255	; 0xff
 8007614:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007616:	68fb      	ldr	r3, [r7, #12]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d110      	bne.n	8007656 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8007634:	2203      	movs	r2, #3
 8007636:	2100      	movs	r1, #0
 8007638:	2001      	movs	r0, #1
 800763a:	f7fe f833 	bl	80056a4 <xQueueGenericCreate>
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d005      	beq.n	8007652 <osSemaphoreCreate+0x2e>
 8007646:	2300      	movs	r3, #0
 8007648:	2200      	movs	r2, #0
 800764a:	2100      	movs	r1, #0
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f7fe f8f1 	bl	8005834 <xQueueGenericSend>
    return sema;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	e006      	b.n	8007664 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	4611      	mov	r1, r2
 800765c:	4618      	mov	r0, r3
 800765e:	f7fe f8b3 	bl	80057c8 <xQueueCreateCountingSemaphore>
 8007662:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007676:	2300      	movs	r3, #0
 8007678:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007680:	2380      	movs	r3, #128	; 0x80
 8007682:	e03a      	b.n	80076fa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007684:	2300      	movs	r3, #0
 8007686:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768e:	d103      	bne.n	8007698 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007690:	f04f 33ff 	mov.w	r3, #4294967295
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	e009      	b.n	80076ac <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d006      	beq.n	80076ac <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <osSemaphoreWait+0x40>
      ticks = 1;
 80076a8:	2301      	movs	r3, #1
 80076aa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80076ac:	f7ff feba 	bl	8007424 <inHandlerMode>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d017      	beq.n	80076e6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80076b6:	f107 0308 	add.w	r3, r7, #8
 80076ba:	461a      	mov	r2, r3
 80076bc:	2100      	movs	r1, #0
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7fe fcda 	bl	8006078 <xQueueReceiveFromISR>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d001      	beq.n	80076ce <osSemaphoreWait+0x62>
      return osErrorOS;
 80076ca:	23ff      	movs	r3, #255	; 0xff
 80076cc:	e015      	b.n	80076fa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d011      	beq.n	80076f8 <osSemaphoreWait+0x8c>
 80076d4:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <osSemaphoreWait+0x98>)
 80076d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	e008      	b.n	80076f8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80076e6:	68f9      	ldr	r1, [r7, #12]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7fe fbb5 	bl	8005e58 <xQueueSemaphoreTake>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d001      	beq.n	80076f8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80076f4:	23ff      	movs	r3, #255	; 0xff
 80076f6:	e000      	b.n	80076fa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	e000ed04 	.word	0xe000ed04

08007708 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007710:	2300      	movs	r3, #0
 8007712:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007714:	2300      	movs	r3, #0
 8007716:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007718:	f7ff fe84 	bl	8007424 <inHandlerMode>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d016      	beq.n	8007750 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007722:	f107 0308 	add.w	r3, r7, #8
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7fe fa21 	bl	8005b70 <xQueueGiveFromISR>
 800772e:	4603      	mov	r3, r0
 8007730:	2b01      	cmp	r3, #1
 8007732:	d001      	beq.n	8007738 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007734:	23ff      	movs	r3, #255	; 0xff
 8007736:	e017      	b.n	8007768 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d013      	beq.n	8007766 <osSemaphoreRelease+0x5e>
 800773e:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <osSemaphoreRelease+0x68>)
 8007740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	e00a      	b.n	8007766 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007750:	2300      	movs	r3, #0
 8007752:	2200      	movs	r2, #0
 8007754:	2100      	movs	r1, #0
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7fe f86c 	bl	8005834 <xQueueGenericSend>
 800775c:	4603      	mov	r3, r0
 800775e:	2b01      	cmp	r3, #1
 8007760:	d001      	beq.n	8007766 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007762:	23ff      	movs	r3, #255	; 0xff
 8007764:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007766:	68fb      	ldr	r3, [r7, #12]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	e000ed04 	.word	0xe000ed04

08007774 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6818      	ldr	r0, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	4619      	mov	r1, r3
 800778a:	f7fd ff8b 	bl	80056a4 <xQueueGenericCreate>
 800778e:	4603      	mov	r3, r0
#endif
}
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80077a4:	2300      	movs	r3, #0
 80077a6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <osMessagePut+0x1e>
    ticks = 1;
 80077b2:	2301      	movs	r3, #1
 80077b4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80077b6:	f7ff fe35 	bl	8007424 <inHandlerMode>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d018      	beq.n	80077f2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80077c0:	f107 0210 	add.w	r2, r7, #16
 80077c4:	f107 0108 	add.w	r1, r7, #8
 80077c8:	2300      	movs	r3, #0
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7fe f934 	bl	8005a38 <xQueueGenericSendFromISR>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d001      	beq.n	80077da <osMessagePut+0x42>
      return osErrorOS;
 80077d6:	23ff      	movs	r3, #255	; 0xff
 80077d8:	e018      	b.n	800780c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d014      	beq.n	800780a <osMessagePut+0x72>
 80077e0:	4b0c      	ldr	r3, [pc, #48]	; (8007814 <osMessagePut+0x7c>)
 80077e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	e00b      	b.n	800780a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80077f2:	f107 0108 	add.w	r1, r7, #8
 80077f6:	2300      	movs	r3, #0
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f7fe f81a 	bl	8005834 <xQueueGenericSend>
 8007800:	4603      	mov	r3, r0
 8007802:	2b01      	cmp	r3, #1
 8007804:	d001      	beq.n	800780a <osMessagePut+0x72>
      return osErrorOS;
 8007806:	23ff      	movs	r3, #255	; 0xff
 8007808:	e000      	b.n	800780c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	e000ed04 	.word	0xe000ed04

08007818 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007818:	b590      	push	{r4, r7, lr}
 800781a:	b08b      	sub	sp, #44	; 0x2c
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007832:	2380      	movs	r3, #128	; 0x80
 8007834:	617b      	str	r3, [r7, #20]
    return event;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	461c      	mov	r4, r3
 800783a:	f107 0314 	add.w	r3, r7, #20
 800783e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007842:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007846:	e054      	b.n	80078f2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007848:	2300      	movs	r3, #0
 800784a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007856:	d103      	bne.n	8007860 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007858:	f04f 33ff 	mov.w	r3, #4294967295
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
 800785e:	e009      	b.n	8007874 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d006      	beq.n	8007874 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <osMessageGet+0x5c>
      ticks = 1;
 8007870:	2301      	movs	r3, #1
 8007872:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007874:	f7ff fdd6 	bl	8007424 <inHandlerMode>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d01c      	beq.n	80078b8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800787e:	f107 0220 	add.w	r2, r7, #32
 8007882:	f107 0314 	add.w	r3, r7, #20
 8007886:	3304      	adds	r3, #4
 8007888:	4619      	mov	r1, r3
 800788a:	68b8      	ldr	r0, [r7, #8]
 800788c:	f7fe fbf4 	bl	8006078 <xQueueReceiveFromISR>
 8007890:	4603      	mov	r3, r0
 8007892:	2b01      	cmp	r3, #1
 8007894:	d102      	bne.n	800789c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007896:	2310      	movs	r3, #16
 8007898:	617b      	str	r3, [r7, #20]
 800789a:	e001      	b.n	80078a0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800789c:	2300      	movs	r3, #0
 800789e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d01d      	beq.n	80078e2 <osMessageGet+0xca>
 80078a6:	4b15      	ldr	r3, [pc, #84]	; (80078fc <osMessageGet+0xe4>)
 80078a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	e014      	b.n	80078e2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80078b8:	f107 0314 	add.w	r3, r7, #20
 80078bc:	3304      	adds	r3, #4
 80078be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c0:	4619      	mov	r1, r3
 80078c2:	68b8      	ldr	r0, [r7, #8]
 80078c4:	f7fe f9e6 	bl	8005c94 <xQueueReceive>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d102      	bne.n	80078d4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80078ce:	2310      	movs	r3, #16
 80078d0:	617b      	str	r3, [r7, #20]
 80078d2:	e006      	b.n	80078e2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <osMessageGet+0xc6>
 80078da:	2300      	movs	r3, #0
 80078dc:	e000      	b.n	80078e0 <osMessageGet+0xc8>
 80078de:	2340      	movs	r3, #64	; 0x40
 80078e0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	461c      	mov	r4, r3
 80078e6:	f107 0314 	add.w	r3, r7, #20
 80078ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80078ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	372c      	adds	r7, #44	; 0x2c
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd90      	pop	{r4, r7, pc}
 80078fa:	bf00      	nop
 80078fc:	e000ed04 	.word	0xe000ed04

08007900 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8007904:	f7ff fb4c 	bl	8006fa0 <xTaskGetSchedulerState>
 8007908:	4603      	mov	r3, r0
 800790a:	2b01      	cmp	r3, #1
 800790c:	d001      	beq.n	8007912 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800790e:	f000 fb7b 	bl	8008008 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8007912:	bf00      	nop
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08a      	sub	sp, #40	; 0x28
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007920:	2300      	movs	r3, #0
 8007922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007924:	f7fe ffa2 	bl	800686c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007928:	4b5a      	ldr	r3, [pc, #360]	; (8007a94 <pvPortMalloc+0x17c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007930:	f000 f916 	bl	8007b60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007934:	4b58      	ldr	r3, [pc, #352]	; (8007a98 <pvPortMalloc+0x180>)
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4013      	ands	r3, r2
 800793c:	2b00      	cmp	r3, #0
 800793e:	f040 8090 	bne.w	8007a62 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d01e      	beq.n	8007986 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007948:	2208      	movs	r2, #8
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4413      	add	r3, r2
 800794e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	2b00      	cmp	r3, #0
 8007958:	d015      	beq.n	8007986 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f023 0307 	bic.w	r3, r3, #7
 8007960:	3308      	adds	r3, #8
 8007962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00b      	beq.n	8007986 <pvPortMalloc+0x6e>
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	b672      	cpsid	i
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	b662      	cpsie	i
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	e7fe      	b.n	8007984 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d06a      	beq.n	8007a62 <pvPortMalloc+0x14a>
 800798c:	4b43      	ldr	r3, [pc, #268]	; (8007a9c <pvPortMalloc+0x184>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	429a      	cmp	r2, r3
 8007994:	d865      	bhi.n	8007a62 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007996:	4b42      	ldr	r3, [pc, #264]	; (8007aa0 <pvPortMalloc+0x188>)
 8007998:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800799a:	4b41      	ldr	r3, [pc, #260]	; (8007aa0 <pvPortMalloc+0x188>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079a0:	e004      	b.n	80079ac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d903      	bls.n	80079be <pvPortMalloc+0xa6>
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1f1      	bne.n	80079a2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079be:	4b35      	ldr	r3, [pc, #212]	; (8007a94 <pvPortMalloc+0x17c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d04c      	beq.n	8007a62 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2208      	movs	r2, #8
 80079ce:	4413      	add	r3, r2
 80079d0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	1ad2      	subs	r2, r2, r3
 80079e2:	2308      	movs	r3, #8
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d920      	bls.n	8007a2c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4413      	add	r3, r2
 80079f0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	f003 0307 	and.w	r3, r3, #7
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00b      	beq.n	8007a14 <pvPortMalloc+0xfc>
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	b672      	cpsid	i
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	b662      	cpsie	i
 8007a10:	613b      	str	r3, [r7, #16]
 8007a12:	e7fe      	b.n	8007a12 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	1ad2      	subs	r2, r2, r3
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a26:	69b8      	ldr	r0, [r7, #24]
 8007a28:	f000 f8fc 	bl	8007c24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a2c:	4b1b      	ldr	r3, [pc, #108]	; (8007a9c <pvPortMalloc+0x184>)
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	4a19      	ldr	r2, [pc, #100]	; (8007a9c <pvPortMalloc+0x184>)
 8007a38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a3a:	4b18      	ldr	r3, [pc, #96]	; (8007a9c <pvPortMalloc+0x184>)
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	4b19      	ldr	r3, [pc, #100]	; (8007aa4 <pvPortMalloc+0x18c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d203      	bcs.n	8007a4e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a46:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <pvPortMalloc+0x184>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a16      	ldr	r2, [pc, #88]	; (8007aa4 <pvPortMalloc+0x18c>)
 8007a4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	4b11      	ldr	r3, [pc, #68]	; (8007a98 <pvPortMalloc+0x180>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	431a      	orrs	r2, r3
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a62:	f7fe ff11 	bl	8006888 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	f003 0307 	and.w	r3, r3, #7
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00b      	beq.n	8007a88 <pvPortMalloc+0x170>
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	b672      	cpsid	i
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	b662      	cpsie	i
 8007a84:	60fb      	str	r3, [r7, #12]
 8007a86:	e7fe      	b.n	8007a86 <pvPortMalloc+0x16e>
	return pvReturn;
 8007a88:	69fb      	ldr	r3, [r7, #28]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3728      	adds	r7, #40	; 0x28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	20006758 	.word	0x20006758
 8007a98:	20006764 	.word	0x20006764
 8007a9c:	2000675c 	.word	0x2000675c
 8007aa0:	20006750 	.word	0x20006750
 8007aa4:	20006760 	.word	0x20006760

08007aa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d04a      	beq.n	8007b50 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007aba:	2308      	movs	r3, #8
 8007abc:	425b      	negs	r3, r3
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	4b22      	ldr	r3, [pc, #136]	; (8007b58 <vPortFree+0xb0>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10b      	bne.n	8007aee <vPortFree+0x46>
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	b672      	cpsid	i
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	b662      	cpsie	i
 8007aea:	60fb      	str	r3, [r7, #12]
 8007aec:	e7fe      	b.n	8007aec <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00b      	beq.n	8007b0e <vPortFree+0x66>
 8007af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afa:	b672      	cpsid	i
 8007afc:	f383 8811 	msr	BASEPRI, r3
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	b662      	cpsie	i
 8007b0a:	60bb      	str	r3, [r7, #8]
 8007b0c:	e7fe      	b.n	8007b0c <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	4b11      	ldr	r3, [pc, #68]	; (8007b58 <vPortFree+0xb0>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4013      	ands	r3, r2
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d019      	beq.n	8007b50 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d115      	bne.n	8007b50 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <vPortFree+0xb0>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	43db      	mvns	r3, r3
 8007b2e:	401a      	ands	r2, r3
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b34:	f7fe fe9a 	bl	800686c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	4b07      	ldr	r3, [pc, #28]	; (8007b5c <vPortFree+0xb4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4413      	add	r3, r2
 8007b42:	4a06      	ldr	r2, [pc, #24]	; (8007b5c <vPortFree+0xb4>)
 8007b44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b46:	6938      	ldr	r0, [r7, #16]
 8007b48:	f000 f86c 	bl	8007c24 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007b4c:	f7fe fe9c 	bl	8006888 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b50:	bf00      	nop
 8007b52:	3718      	adds	r7, #24
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20006764 	.word	0x20006764
 8007b5c:	2000675c 	.word	0x2000675c

08007b60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b66:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007b6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b6c:	4b27      	ldr	r3, [pc, #156]	; (8007c0c <prvHeapInit+0xac>)
 8007b6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f003 0307 	and.w	r3, r3, #7
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00c      	beq.n	8007b94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3307      	adds	r3, #7
 8007b7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f023 0307 	bic.w	r3, r3, #7
 8007b86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	4a1f      	ldr	r2, [pc, #124]	; (8007c0c <prvHeapInit+0xac>)
 8007b90:	4413      	add	r3, r2
 8007b92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b98:	4a1d      	ldr	r2, [pc, #116]	; (8007c10 <prvHeapInit+0xb0>)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b9e:	4b1c      	ldr	r3, [pc, #112]	; (8007c10 <prvHeapInit+0xb0>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	4413      	add	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007bac:	2208      	movs	r2, #8
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1a9b      	subs	r3, r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0307 	bic.w	r3, r3, #7
 8007bba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4a15      	ldr	r2, [pc, #84]	; (8007c14 <prvHeapInit+0xb4>)
 8007bc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bc2:	4b14      	ldr	r3, [pc, #80]	; (8007c14 <prvHeapInit+0xb4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bca:	4b12      	ldr	r3, [pc, #72]	; (8007c14 <prvHeapInit+0xb4>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	1ad2      	subs	r2, r2, r3
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007be0:	4b0c      	ldr	r3, [pc, #48]	; (8007c14 <prvHeapInit+0xb4>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	4a0a      	ldr	r2, [pc, #40]	; (8007c18 <prvHeapInit+0xb8>)
 8007bee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	4a09      	ldr	r2, [pc, #36]	; (8007c1c <prvHeapInit+0xbc>)
 8007bf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bf8:	4b09      	ldr	r3, [pc, #36]	; (8007c20 <prvHeapInit+0xc0>)
 8007bfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007bfe:	601a      	str	r2, [r3, #0]
}
 8007c00:	bf00      	nop
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	20000350 	.word	0x20000350
 8007c10:	20006750 	.word	0x20006750
 8007c14:	20006758 	.word	0x20006758
 8007c18:	20006760 	.word	0x20006760
 8007c1c:	2000675c 	.word	0x2000675c
 8007c20:	20006764 	.word	0x20006764

08007c24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c2c:	4b28      	ldr	r3, [pc, #160]	; (8007cd0 <prvInsertBlockIntoFreeList+0xac>)
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	e002      	b.n	8007c38 <prvInsertBlockIntoFreeList+0x14>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d8f7      	bhi.n	8007c32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d108      	bne.n	8007c66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	441a      	add	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	441a      	add	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d118      	bne.n	8007cac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	4b15      	ldr	r3, [pc, #84]	; (8007cd4 <prvInsertBlockIntoFreeList+0xb0>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d00d      	beq.n	8007ca2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685a      	ldr	r2, [r3, #4]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	441a      	add	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	e008      	b.n	8007cb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ca2:	4b0c      	ldr	r3, [pc, #48]	; (8007cd4 <prvInsertBlockIntoFreeList+0xb0>)
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	e003      	b.n	8007cb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d002      	beq.n	8007cc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cc2:	bf00      	nop
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	20006750 	.word	0x20006750
 8007cd4:	20006758 	.word	0x20006758

08007cd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3b04      	subs	r3, #4
 8007ce8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3b04      	subs	r3, #4
 8007cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f023 0201 	bic.w	r2, r3, #1
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3b04      	subs	r3, #4
 8007d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d08:	4a0c      	ldr	r2, [pc, #48]	; (8007d3c <pxPortInitialiseStack+0x64>)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3b14      	subs	r3, #20
 8007d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3b04      	subs	r3, #4
 8007d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f06f 0202 	mvn.w	r2, #2
 8007d26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3b20      	subs	r3, #32
 8007d2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	08007d41 	.word	0x08007d41

08007d40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d4a:	4b13      	ldr	r3, [pc, #76]	; (8007d98 <prvTaskExitError+0x58>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d52:	d00b      	beq.n	8007d6c <prvTaskExitError+0x2c>
 8007d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d58:	b672      	cpsid	i
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	b662      	cpsie	i
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	e7fe      	b.n	8007d6a <prvTaskExitError+0x2a>
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	b672      	cpsid	i
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	b662      	cpsie	i
 8007d80:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d82:	bf00      	nop
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0fc      	beq.n	8007d84 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d8a:	bf00      	nop
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	20000028 	.word	0x20000028
 8007d9c:	00000000 	.word	0x00000000

08007da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <pxCurrentTCBConst2>)
 8007da2:	6819      	ldr	r1, [r3, #0]
 8007da4:	6808      	ldr	r0, [r1, #0]
 8007da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007daa:	f380 8809 	msr	PSP, r0
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f04f 0000 	mov.w	r0, #0
 8007db6:	f380 8811 	msr	BASEPRI, r0
 8007dba:	4770      	bx	lr
 8007dbc:	f3af 8000 	nop.w

08007dc0 <pxCurrentTCBConst2>:
 8007dc0:	20000238 	.word	0x20000238
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop

08007dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007dc8:	4808      	ldr	r0, [pc, #32]	; (8007dec <prvPortStartFirstTask+0x24>)
 8007dca:	6800      	ldr	r0, [r0, #0]
 8007dcc:	6800      	ldr	r0, [r0, #0]
 8007dce:	f380 8808 	msr	MSP, r0
 8007dd2:	f04f 0000 	mov.w	r0, #0
 8007dd6:	f380 8814 	msr	CONTROL, r0
 8007dda:	b662      	cpsie	i
 8007ddc:	b661      	cpsie	f
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	df00      	svc	0
 8007de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007dea:	bf00      	nop
 8007dec:	e000ed08 	.word	0xe000ed08

08007df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007df6:	4b36      	ldr	r3, [pc, #216]	; (8007ed0 <xPortStartScheduler+0xe0>)
 8007df8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	22ff      	movs	r2, #255	; 0xff
 8007e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	4b2e      	ldr	r3, [pc, #184]	; (8007ed4 <xPortStartScheduler+0xe4>)
 8007e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e1e:	4b2e      	ldr	r3, [pc, #184]	; (8007ed8 <xPortStartScheduler+0xe8>)
 8007e20:	2207      	movs	r2, #7
 8007e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e24:	e009      	b.n	8007e3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e26:	4b2c      	ldr	r3, [pc, #176]	; (8007ed8 <xPortStartScheduler+0xe8>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	4a2a      	ldr	r2, [pc, #168]	; (8007ed8 <xPortStartScheduler+0xe8>)
 8007e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e3a:	78fb      	ldrb	r3, [r7, #3]
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e42:	2b80      	cmp	r3, #128	; 0x80
 8007e44:	d0ef      	beq.n	8007e26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e46:	4b24      	ldr	r3, [pc, #144]	; (8007ed8 <xPortStartScheduler+0xe8>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f1c3 0307 	rsb	r3, r3, #7
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	d00b      	beq.n	8007e6a <xPortStartScheduler+0x7a>
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	b672      	cpsid	i
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	b662      	cpsie	i
 8007e66:	60bb      	str	r3, [r7, #8]
 8007e68:	e7fe      	b.n	8007e68 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e6a:	4b1b      	ldr	r3, [pc, #108]	; (8007ed8 <xPortStartScheduler+0xe8>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	021b      	lsls	r3, r3, #8
 8007e70:	4a19      	ldr	r2, [pc, #100]	; (8007ed8 <xPortStartScheduler+0xe8>)
 8007e72:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e74:	4b18      	ldr	r3, [pc, #96]	; (8007ed8 <xPortStartScheduler+0xe8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e7c:	4a16      	ldr	r2, [pc, #88]	; (8007ed8 <xPortStartScheduler+0xe8>)
 8007e7e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e88:	4b14      	ldr	r3, [pc, #80]	; (8007edc <xPortStartScheduler+0xec>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a13      	ldr	r2, [pc, #76]	; (8007edc <xPortStartScheduler+0xec>)
 8007e8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e92:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e94:	4b11      	ldr	r3, [pc, #68]	; (8007edc <xPortStartScheduler+0xec>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a10      	ldr	r2, [pc, #64]	; (8007edc <xPortStartScheduler+0xec>)
 8007e9a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e9e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ea0:	f000 f8d4 	bl	800804c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ea4:	4b0e      	ldr	r3, [pc, #56]	; (8007ee0 <xPortStartScheduler+0xf0>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007eaa:	f000 f8f3 	bl	8008094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007eae:	4b0d      	ldr	r3, [pc, #52]	; (8007ee4 <xPortStartScheduler+0xf4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a0c      	ldr	r2, [pc, #48]	; (8007ee4 <xPortStartScheduler+0xf4>)
 8007eb4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007eb8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007eba:	f7ff ff85 	bl	8007dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ebe:	f7fe fe5d 	bl	8006b7c <vTaskSwitchContext>
	prvTaskExitError();
 8007ec2:	f7ff ff3d 	bl	8007d40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	e000e400 	.word	0xe000e400
 8007ed4:	20006768 	.word	0x20006768
 8007ed8:	2000676c 	.word	0x2000676c
 8007edc:	e000ed20 	.word	0xe000ed20
 8007ee0:	20000028 	.word	0x20000028
 8007ee4:	e000ef34 	.word	0xe000ef34

08007ee8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	b672      	cpsid	i
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	b662      	cpsie	i
 8007f02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f04:	4b0f      	ldr	r3, [pc, #60]	; (8007f44 <vPortEnterCritical+0x5c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	4a0e      	ldr	r2, [pc, #56]	; (8007f44 <vPortEnterCritical+0x5c>)
 8007f0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f0e:	4b0d      	ldr	r3, [pc, #52]	; (8007f44 <vPortEnterCritical+0x5c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d110      	bne.n	8007f38 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f16:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <vPortEnterCritical+0x60>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00b      	beq.n	8007f38 <vPortEnterCritical+0x50>
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	b672      	cpsid	i
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	b662      	cpsie	i
 8007f34:	603b      	str	r3, [r7, #0]
 8007f36:	e7fe      	b.n	8007f36 <vPortEnterCritical+0x4e>
	}
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	20000028 	.word	0x20000028
 8007f48:	e000ed04 	.word	0xe000ed04

08007f4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f52:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <vPortExitCritical+0x50>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10b      	bne.n	8007f72 <vPortExitCritical+0x26>
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	b672      	cpsid	i
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	b662      	cpsie	i
 8007f6e:	607b      	str	r3, [r7, #4]
 8007f70:	e7fe      	b.n	8007f70 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8007f72:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <vPortExitCritical+0x50>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	4a08      	ldr	r2, [pc, #32]	; (8007f9c <vPortExitCritical+0x50>)
 8007f7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f7c:	4b07      	ldr	r3, [pc, #28]	; (8007f9c <vPortExitCritical+0x50>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d104      	bne.n	8007f8e <vPortExitCritical+0x42>
 8007f84:	2300      	movs	r3, #0
 8007f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	20000028 	.word	0x20000028

08007fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fa0:	f3ef 8009 	mrs	r0, PSP
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	4b15      	ldr	r3, [pc, #84]	; (8008000 <pxCurrentTCBConst>)
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	f01e 0f10 	tst.w	lr, #16
 8007fb0:	bf08      	it	eq
 8007fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fba:	6010      	str	r0, [r2, #0]
 8007fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007fc4:	b672      	cpsid	i
 8007fc6:	f380 8811 	msr	BASEPRI, r0
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	b662      	cpsie	i
 8007fd4:	f7fe fdd2 	bl	8006b7c <vTaskSwitchContext>
 8007fd8:	f04f 0000 	mov.w	r0, #0
 8007fdc:	f380 8811 	msr	BASEPRI, r0
 8007fe0:	bc09      	pop	{r0, r3}
 8007fe2:	6819      	ldr	r1, [r3, #0]
 8007fe4:	6808      	ldr	r0, [r1, #0]
 8007fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fea:	f01e 0f10 	tst.w	lr, #16
 8007fee:	bf08      	it	eq
 8007ff0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ff4:	f380 8809 	msr	PSP, r0
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop

08008000 <pxCurrentTCBConst>:
 8008000:	20000238 	.word	0x20000238
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop

08008008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	b672      	cpsid	i
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	b662      	cpsie	i
 8008022:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008024:	f7fe fcf0 	bl	8006a08 <xTaskIncrementTick>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800802e:	4b06      	ldr	r3, [pc, #24]	; (8008048 <xPortSysTickHandler+0x40>)
 8008030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	2300      	movs	r3, #0
 8008038:	603b      	str	r3, [r7, #0]
	__asm volatile
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008050:	4b0b      	ldr	r3, [pc, #44]	; (8008080 <vPortSetupTimerInterrupt+0x34>)
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008056:	4b0b      	ldr	r3, [pc, #44]	; (8008084 <vPortSetupTimerInterrupt+0x38>)
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800805c:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <vPortSetupTimerInterrupt+0x3c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a0a      	ldr	r2, [pc, #40]	; (800808c <vPortSetupTimerInterrupt+0x40>)
 8008062:	fba2 2303 	umull	r2, r3, r2, r3
 8008066:	099b      	lsrs	r3, r3, #6
 8008068:	4a09      	ldr	r2, [pc, #36]	; (8008090 <vPortSetupTimerInterrupt+0x44>)
 800806a:	3b01      	subs	r3, #1
 800806c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800806e:	4b04      	ldr	r3, [pc, #16]	; (8008080 <vPortSetupTimerInterrupt+0x34>)
 8008070:	2207      	movs	r2, #7
 8008072:	601a      	str	r2, [r3, #0]
}
 8008074:	bf00      	nop
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	e000e010 	.word	0xe000e010
 8008084:	e000e018 	.word	0xe000e018
 8008088:	2000001c 	.word	0x2000001c
 800808c:	10624dd3 	.word	0x10624dd3
 8008090:	e000e014 	.word	0xe000e014

08008094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080a4 <vPortEnableVFP+0x10>
 8008098:	6801      	ldr	r1, [r0, #0]
 800809a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800809e:	6001      	str	r1, [r0, #0]
 80080a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080a2:	bf00      	nop
 80080a4:	e000ed88 	.word	0xe000ed88

080080a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080ae:	f3ef 8305 	mrs	r3, IPSR
 80080b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b0f      	cmp	r3, #15
 80080b8:	d915      	bls.n	80080e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080ba:	4a18      	ldr	r2, [pc, #96]	; (800811c <vPortValidateInterruptPriority+0x74>)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	4413      	add	r3, r2
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80080c4:	4b16      	ldr	r3, [pc, #88]	; (8008120 <vPortValidateInterruptPriority+0x78>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	7afa      	ldrb	r2, [r7, #11]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d20b      	bcs.n	80080e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	b672      	cpsid	i
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	b662      	cpsie	i
 80080e2:	607b      	str	r3, [r7, #4]
 80080e4:	e7fe      	b.n	80080e4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080e6:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <vPortValidateInterruptPriority+0x7c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080ee:	4b0e      	ldr	r3, [pc, #56]	; (8008128 <vPortValidateInterruptPriority+0x80>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d90b      	bls.n	800810e <vPortValidateInterruptPriority+0x66>
 80080f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fa:	b672      	cpsid	i
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	b662      	cpsie	i
 800810a:	603b      	str	r3, [r7, #0]
 800810c:	e7fe      	b.n	800810c <vPortValidateInterruptPriority+0x64>
	}
 800810e:	bf00      	nop
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	e000e3f0 	.word	0xe000e3f0
 8008120:	20006768 	.word	0x20006768
 8008124:	e000ed0c 	.word	0xe000ed0c
 8008128:	2000676c 	.word	0x2000676c

0800812c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008136:	f00b fd6b 	bl	8013c10 <sys_timeouts_sleeptime>
 800813a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008142:	d10b      	bne.n	800815c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008144:	4813      	ldr	r0, [pc, #76]	; (8008194 <tcpip_timeouts_mbox_fetch+0x68>)
 8008146:	f00c fbec 	bl	8014922 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800814a:	2200      	movs	r2, #0
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f00c fb60 	bl	8014814 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008154:	480f      	ldr	r0, [pc, #60]	; (8008194 <tcpip_timeouts_mbox_fetch+0x68>)
 8008156:	f00c fbd5 	bl	8014904 <sys_mutex_lock>
    return;
 800815a:	e018      	b.n	800818e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d102      	bne.n	8008168 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8008162:	f00b fd1b 	bl	8013b9c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008166:	e7e6      	b.n	8008136 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008168:	480a      	ldr	r0, [pc, #40]	; (8008194 <tcpip_timeouts_mbox_fetch+0x68>)
 800816a:	f00c fbda 	bl	8014922 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f00c fb4e 	bl	8014814 <sys_arch_mbox_fetch>
 8008178:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800817a:	4806      	ldr	r0, [pc, #24]	; (8008194 <tcpip_timeouts_mbox_fetch+0x68>)
 800817c:	f00c fbc2 	bl	8014904 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008186:	d102      	bne.n	800818e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008188:	f00b fd08 	bl	8013b9c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800818c:	e7d3      	b.n	8008136 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	20006a58 	.word	0x20006a58

08008198 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80081a0:	4810      	ldr	r0, [pc, #64]	; (80081e4 <tcpip_thread+0x4c>)
 80081a2:	f00c fbaf 	bl	8014904 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80081a6:	4b10      	ldr	r3, [pc, #64]	; (80081e8 <tcpip_thread+0x50>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d005      	beq.n	80081ba <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80081ae:	4b0e      	ldr	r3, [pc, #56]	; (80081e8 <tcpip_thread+0x50>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a0e      	ldr	r2, [pc, #56]	; (80081ec <tcpip_thread+0x54>)
 80081b4:	6812      	ldr	r2, [r2, #0]
 80081b6:	4610      	mov	r0, r2
 80081b8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80081ba:	f107 030c 	add.w	r3, r7, #12
 80081be:	4619      	mov	r1, r3
 80081c0:	480b      	ldr	r0, [pc, #44]	; (80081f0 <tcpip_thread+0x58>)
 80081c2:	f7ff ffb3 	bl	800812c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80081cc:	4b09      	ldr	r3, [pc, #36]	; (80081f4 <tcpip_thread+0x5c>)
 80081ce:	2291      	movs	r2, #145	; 0x91
 80081d0:	4909      	ldr	r1, [pc, #36]	; (80081f8 <tcpip_thread+0x60>)
 80081d2:	480a      	ldr	r0, [pc, #40]	; (80081fc <tcpip_thread+0x64>)
 80081d4:	f00d f97e 	bl	80154d4 <iprintf>
      continue;
 80081d8:	e003      	b.n	80081e2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 f80f 	bl	8008200 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80081e2:	e7ea      	b.n	80081ba <tcpip_thread+0x22>
 80081e4:	20006a58 	.word	0x20006a58
 80081e8:	20006770 	.word	0x20006770
 80081ec:	20006774 	.word	0x20006774
 80081f0:	20006778 	.word	0x20006778
 80081f4:	08018be8 	.word	0x08018be8
 80081f8:	08018c54 	.word	0x08018c54
 80081fc:	08018c74 	.word	0x08018c74

08008200 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d018      	beq.n	8008242 <tcpip_thread_handle_msg+0x42>
 8008210:	2b02      	cmp	r3, #2
 8008212:	d021      	beq.n	8008258 <tcpip_thread_handle_msg+0x58>
 8008214:	2b00      	cmp	r3, #0
 8008216:	d126      	bne.n	8008266 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	6850      	ldr	r0, [r2, #4]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	6892      	ldr	r2, [r2, #8]
 8008224:	4611      	mov	r1, r2
 8008226:	4798      	blx	r3
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	4618      	mov	r0, r3
 8008234:	f005 fcd4 	bl	800dbe0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008238:	6879      	ldr	r1, [r7, #4]
 800823a:	2009      	movs	r0, #9
 800823c:	f004 fef8 	bl	800d030 <memp_free>
      break;
 8008240:	e018      	b.n	8008274 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	6892      	ldr	r2, [r2, #8]
 800824a:	4610      	mov	r0, r2
 800824c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800824e:	6879      	ldr	r1, [r7, #4]
 8008250:	2008      	movs	r0, #8
 8008252:	f004 feed 	bl	800d030 <memp_free>
      break;
 8008256:	e00d      	b.n	8008274 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	6892      	ldr	r2, [r2, #8]
 8008260:	4610      	mov	r0, r2
 8008262:	4798      	blx	r3
      break;
 8008264:	e006      	b.n	8008274 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008266:	4b05      	ldr	r3, [pc, #20]	; (800827c <tcpip_thread_handle_msg+0x7c>)
 8008268:	22cf      	movs	r2, #207	; 0xcf
 800826a:	4905      	ldr	r1, [pc, #20]	; (8008280 <tcpip_thread_handle_msg+0x80>)
 800826c:	4805      	ldr	r0, [pc, #20]	; (8008284 <tcpip_thread_handle_msg+0x84>)
 800826e:	f00d f931 	bl	80154d4 <iprintf>
      break;
 8008272:	bf00      	nop
  }
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	08018be8 	.word	0x08018be8
 8008280:	08018c54 	.word	0x08018c54
 8008284:	08018c74 	.word	0x08018c74

08008288 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008294:	481a      	ldr	r0, [pc, #104]	; (8008300 <tcpip_inpkt+0x78>)
 8008296:	f00c fafc 	bl	8014892 <sys_mbox_valid>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d105      	bne.n	80082ac <tcpip_inpkt+0x24>
 80082a0:	4b18      	ldr	r3, [pc, #96]	; (8008304 <tcpip_inpkt+0x7c>)
 80082a2:	22fc      	movs	r2, #252	; 0xfc
 80082a4:	4918      	ldr	r1, [pc, #96]	; (8008308 <tcpip_inpkt+0x80>)
 80082a6:	4819      	ldr	r0, [pc, #100]	; (800830c <tcpip_inpkt+0x84>)
 80082a8:	f00d f914 	bl	80154d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80082ac:	2009      	movs	r0, #9
 80082ae:	f004 fe6d 	bl	800cf8c <memp_malloc>
 80082b2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d102      	bne.n	80082c0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80082ba:	f04f 33ff 	mov.w	r3, #4294967295
 80082be:	e01a      	b.n	80082f6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2200      	movs	r2, #0
 80082c4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80082d8:	6979      	ldr	r1, [r7, #20]
 80082da:	4809      	ldr	r0, [pc, #36]	; (8008300 <tcpip_inpkt+0x78>)
 80082dc:	f00c fa80 	bl	80147e0 <sys_mbox_trypost>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d006      	beq.n	80082f4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80082e6:	6979      	ldr	r1, [r7, #20]
 80082e8:	2009      	movs	r0, #9
 80082ea:	f004 fea1 	bl	800d030 <memp_free>
    return ERR_MEM;
 80082ee:	f04f 33ff 	mov.w	r3, #4294967295
 80082f2:	e000      	b.n	80082f6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80082f4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20006778 	.word	0x20006778
 8008304:	08018be8 	.word	0x08018be8
 8008308:	08018c9c 	.word	0x08018c9c
 800830c:	08018c74 	.word	0x08018c74

08008310 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008320:	f003 0318 	and.w	r3, r3, #24
 8008324:	2b00      	cmp	r3, #0
 8008326:	d006      	beq.n	8008336 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008328:	4a08      	ldr	r2, [pc, #32]	; (800834c <tcpip_input+0x3c>)
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff ffab 	bl	8008288 <tcpip_inpkt>
 8008332:	4603      	mov	r3, r0
 8008334:	e005      	b.n	8008342 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8008336:	4a06      	ldr	r2, [pc, #24]	; (8008350 <tcpip_input+0x40>)
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7ff ffa4 	bl	8008288 <tcpip_inpkt>
 8008340:	4603      	mov	r3, r0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	080145f9 	.word	0x080145f9
 8008350:	0800b3b1 	.word	0x0800b3b1

08008354 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af02      	add	r7, sp, #8
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800835e:	f004 f98d 	bl	800c67c <lwip_init>

  tcpip_init_done = initfunc;
 8008362:	4a17      	ldr	r2, [pc, #92]	; (80083c0 <tcpip_init+0x6c>)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008368:	4a16      	ldr	r2, [pc, #88]	; (80083c4 <tcpip_init+0x70>)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800836e:	2106      	movs	r1, #6
 8008370:	4815      	ldr	r0, [pc, #84]	; (80083c8 <tcpip_init+0x74>)
 8008372:	f00c fa17 	bl	80147a4 <sys_mbox_new>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d006      	beq.n	800838a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800837c:	4b13      	ldr	r3, [pc, #76]	; (80083cc <tcpip_init+0x78>)
 800837e:	f240 2261 	movw	r2, #609	; 0x261
 8008382:	4913      	ldr	r1, [pc, #76]	; (80083d0 <tcpip_init+0x7c>)
 8008384:	4813      	ldr	r0, [pc, #76]	; (80083d4 <tcpip_init+0x80>)
 8008386:	f00d f8a5 	bl	80154d4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800838a:	4813      	ldr	r0, [pc, #76]	; (80083d8 <tcpip_init+0x84>)
 800838c:	f00c faa0 	bl	80148d0 <sys_mutex_new>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d006      	beq.n	80083a4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008396:	4b0d      	ldr	r3, [pc, #52]	; (80083cc <tcpip_init+0x78>)
 8008398:	f240 2265 	movw	r2, #613	; 0x265
 800839c:	490f      	ldr	r1, [pc, #60]	; (80083dc <tcpip_init+0x88>)
 800839e:	480d      	ldr	r0, [pc, #52]	; (80083d4 <tcpip_init+0x80>)
 80083a0:	f00d f898 	bl	80154d4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80083a4:	2302      	movs	r3, #2
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083ac:	2200      	movs	r2, #0
 80083ae:	490c      	ldr	r1, [pc, #48]	; (80083e0 <tcpip_init+0x8c>)
 80083b0:	480c      	ldr	r0, [pc, #48]	; (80083e4 <tcpip_init+0x90>)
 80083b2:	f00c fac3 	bl	801493c <sys_thread_new>
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	20006770 	.word	0x20006770
 80083c4:	20006774 	.word	0x20006774
 80083c8:	20006778 	.word	0x20006778
 80083cc:	08018be8 	.word	0x08018be8
 80083d0:	08018cac 	.word	0x08018cac
 80083d4:	08018c74 	.word	0x08018c74
 80083d8:	20006a58 	.word	0x20006a58
 80083dc:	08018cd0 	.word	0x08018cd0
 80083e0:	08008199 	.word	0x08008199
 80083e4:	08018cf4 	.word	0x08018cf4

080083e8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80083ec:	4b20      	ldr	r3, [pc, #128]	; (8008470 <dhcp_inc_pcb_refcount+0x88>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d133      	bne.n	800845c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80083f4:	4b1f      	ldr	r3, [pc, #124]	; (8008474 <dhcp_inc_pcb_refcount+0x8c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d005      	beq.n	8008408 <dhcp_inc_pcb_refcount+0x20>
 80083fc:	4b1e      	ldr	r3, [pc, #120]	; (8008478 <dhcp_inc_pcb_refcount+0x90>)
 80083fe:	22e5      	movs	r2, #229	; 0xe5
 8008400:	491e      	ldr	r1, [pc, #120]	; (800847c <dhcp_inc_pcb_refcount+0x94>)
 8008402:	481f      	ldr	r0, [pc, #124]	; (8008480 <dhcp_inc_pcb_refcount+0x98>)
 8008404:	f00d f866 	bl	80154d4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8008408:	f00c f8ae 	bl	8014568 <udp_new>
 800840c:	4602      	mov	r2, r0
 800840e:	4b19      	ldr	r3, [pc, #100]	; (8008474 <dhcp_inc_pcb_refcount+0x8c>)
 8008410:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8008412:	4b18      	ldr	r3, [pc, #96]	; (8008474 <dhcp_inc_pcb_refcount+0x8c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d102      	bne.n	8008420 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800841a:	f04f 33ff 	mov.w	r3, #4294967295
 800841e:	e024      	b.n	800846a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8008420:	4b14      	ldr	r3, [pc, #80]	; (8008474 <dhcp_inc_pcb_refcount+0x8c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	7a5a      	ldrb	r2, [r3, #9]
 8008426:	4b13      	ldr	r3, [pc, #76]	; (8008474 <dhcp_inc_pcb_refcount+0x8c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0220 	orr.w	r2, r2, #32
 800842e:	b2d2      	uxtb	r2, r2
 8008430:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8008432:	4b10      	ldr	r3, [pc, #64]	; (8008474 <dhcp_inc_pcb_refcount+0x8c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2244      	movs	r2, #68	; 0x44
 8008438:	4912      	ldr	r1, [pc, #72]	; (8008484 <dhcp_inc_pcb_refcount+0x9c>)
 800843a:	4618      	mov	r0, r3
 800843c:	f00b ff3c 	bl	80142b8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8008440:	4b0c      	ldr	r3, [pc, #48]	; (8008474 <dhcp_inc_pcb_refcount+0x8c>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2243      	movs	r2, #67	; 0x43
 8008446:	490f      	ldr	r1, [pc, #60]	; (8008484 <dhcp_inc_pcb_refcount+0x9c>)
 8008448:	4618      	mov	r0, r3
 800844a:	f00b ffbd 	bl	80143c8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800844e:	4b09      	ldr	r3, [pc, #36]	; (8008474 <dhcp_inc_pcb_refcount+0x8c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2200      	movs	r2, #0
 8008454:	490c      	ldr	r1, [pc, #48]	; (8008488 <dhcp_inc_pcb_refcount+0xa0>)
 8008456:	4618      	mov	r0, r3
 8008458:	f00c f824 	bl	80144a4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800845c:	4b04      	ldr	r3, [pc, #16]	; (8008470 <dhcp_inc_pcb_refcount+0x88>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	3301      	adds	r3, #1
 8008462:	b2da      	uxtb	r2, r3
 8008464:	4b02      	ldr	r3, [pc, #8]	; (8008470 <dhcp_inc_pcb_refcount+0x88>)
 8008466:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	20006780 	.word	0x20006780
 8008474:	2000677c 	.word	0x2000677c
 8008478:	08018cfc 	.word	0x08018cfc
 800847c:	08018d6c 	.word	0x08018d6c
 8008480:	08018d94 	.word	0x08018d94
 8008484:	0801958c 	.word	0x0801958c
 8008488:	08009cc1 	.word	0x08009cc1

0800848c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8008490:	4b0e      	ldr	r3, [pc, #56]	; (80084cc <dhcp_dec_pcb_refcount+0x40>)
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d105      	bne.n	80084a4 <dhcp_dec_pcb_refcount+0x18>
 8008498:	4b0d      	ldr	r3, [pc, #52]	; (80084d0 <dhcp_dec_pcb_refcount+0x44>)
 800849a:	22ff      	movs	r2, #255	; 0xff
 800849c:	490d      	ldr	r1, [pc, #52]	; (80084d4 <dhcp_dec_pcb_refcount+0x48>)
 800849e:	480e      	ldr	r0, [pc, #56]	; (80084d8 <dhcp_dec_pcb_refcount+0x4c>)
 80084a0:	f00d f818 	bl	80154d4 <iprintf>
  dhcp_pcb_refcount--;
 80084a4:	4b09      	ldr	r3, [pc, #36]	; (80084cc <dhcp_dec_pcb_refcount+0x40>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	4b07      	ldr	r3, [pc, #28]	; (80084cc <dhcp_dec_pcb_refcount+0x40>)
 80084ae:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80084b0:	4b06      	ldr	r3, [pc, #24]	; (80084cc <dhcp_dec_pcb_refcount+0x40>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d107      	bne.n	80084c8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80084b8:	4b08      	ldr	r3, [pc, #32]	; (80084dc <dhcp_dec_pcb_refcount+0x50>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4618      	mov	r0, r3
 80084be:	f00c f811 	bl	80144e4 <udp_remove>
    dhcp_pcb = NULL;
 80084c2:	4b06      	ldr	r3, [pc, #24]	; (80084dc <dhcp_dec_pcb_refcount+0x50>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]
  }
}
 80084c8:	bf00      	nop
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20006780 	.word	0x20006780
 80084d0:	08018cfc 	.word	0x08018cfc
 80084d4:	08018dbc 	.word	0x08018dbc
 80084d8:	08018d94 	.word	0x08018d94
 80084dc:	2000677c 	.word	0x2000677c

080084e0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ec:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80084ee:	210c      	movs	r1, #12
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f001 f826 	bl	8009542 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80084f6:	4b06      	ldr	r3, [pc, #24]	; (8008510 <dhcp_handle_nak+0x30>)
 80084f8:	4a05      	ldr	r2, [pc, #20]	; (8008510 <dhcp_handle_nak+0x30>)
 80084fa:	4905      	ldr	r1, [pc, #20]	; (8008510 <dhcp_handle_nak+0x30>)
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f004 ff39 	bl	800d374 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fc0e 	bl	8008d24 <dhcp_discover>
}
 8008508:	bf00      	nop
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	0801958c 	.word	0x0801958c

08008514 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8008522:	2108      	movs	r1, #8
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f001 f80c 	bl	8009542 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	331c      	adds	r3, #28
 800852e:	2200      	movs	r2, #0
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f002 fb0c 	bl	800ab50 <etharp_query>
 8008538:	4603      	mov	r3, r0
 800853a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	799b      	ldrb	r3, [r3, #6]
 8008540:	2bff      	cmp	r3, #255	; 0xff
 8008542:	d005      	beq.n	8008550 <dhcp_check+0x3c>
    dhcp->tries++;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	799b      	ldrb	r3, [r3, #6]
 8008548:	3301      	adds	r3, #1
 800854a:	b2da      	uxtb	r2, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8008550:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008554:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008556:	893b      	ldrh	r3, [r7, #8]
 8008558:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800855c:	4a06      	ldr	r2, [pc, #24]	; (8008578 <dhcp_check+0x64>)
 800855e:	fb82 1203 	smull	r1, r2, r2, r3
 8008562:	1152      	asrs	r2, r2, #5
 8008564:	17db      	asrs	r3, r3, #31
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	b29a      	uxth	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800856e:	bf00      	nop
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	10624dd3 	.word	0x10624dd3

0800857c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800858c:	4b0c      	ldr	r3, [pc, #48]	; (80085c0 <dhcp_handle_offer+0x44>)
 800858e:	789b      	ldrb	r3, [r3, #2]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d011      	beq.n	80085b8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800859a:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <dhcp_handle_offer+0x48>)
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	4618      	mov	r0, r3
 80085a0:	f003 ffa9 	bl	800c4f6 <lwip_htonl>
 80085a4:	4602      	mov	r2, r0
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	691a      	ldr	r2, [r3, #16]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f808 	bl	80085c8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80085b8:	bf00      	nop
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	20006a5c 	.word	0x20006a5c
 80085c4:	20006a64 	.word	0x20006a64

080085c8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80085c8:	b5b0      	push	{r4, r5, r7, lr}
 80085ca:	b08a      	sub	sp, #40	; 0x28
 80085cc:	af02      	add	r7, sp, #8
 80085ce:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d109      	bne.n	80085ea <dhcp_select+0x22>
 80085d6:	4b71      	ldr	r3, [pc, #452]	; (800879c <dhcp_select+0x1d4>)
 80085d8:	f240 1277 	movw	r2, #375	; 0x177
 80085dc:	4970      	ldr	r1, [pc, #448]	; (80087a0 <dhcp_select+0x1d8>)
 80085de:	4871      	ldr	r0, [pc, #452]	; (80087a4 <dhcp_select+0x1dc>)
 80085e0:	f00c ff78 	bl	80154d4 <iprintf>
 80085e4:	f06f 030f 	mvn.w	r3, #15
 80085e8:	e0d3      	b.n	8008792 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d109      	bne.n	800860a <dhcp_select+0x42>
 80085f6:	4b69      	ldr	r3, [pc, #420]	; (800879c <dhcp_select+0x1d4>)
 80085f8:	f240 1279 	movw	r2, #377	; 0x179
 80085fc:	496a      	ldr	r1, [pc, #424]	; (80087a8 <dhcp_select+0x1e0>)
 80085fe:	4869      	ldr	r0, [pc, #420]	; (80087a4 <dhcp_select+0x1dc>)
 8008600:	f00c ff68 	bl	80154d4 <iprintf>
 8008604:	f06f 0305 	mvn.w	r3, #5
 8008608:	e0c3      	b.n	8008792 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800860a:	2101      	movs	r1, #1
 800860c:	69b8      	ldr	r0, [r7, #24]
 800860e:	f000 ff98 	bl	8009542 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008612:	f107 030c 	add.w	r3, r7, #12
 8008616:	2203      	movs	r2, #3
 8008618:	69b9      	ldr	r1, [r7, #24]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f001 fc1c 	bl	8009e58 <dhcp_create_msg>
 8008620:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 8085 	beq.w	8008734 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008630:	89b8      	ldrh	r0, [r7, #12]
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008638:	2302      	movs	r3, #2
 800863a:	2239      	movs	r2, #57	; 0x39
 800863c:	f000 ff9c 	bl	8009578 <dhcp_option>
 8008640:	4603      	mov	r3, r0
 8008642:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008644:	89b8      	ldrh	r0, [r7, #12]
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008650:	461a      	mov	r2, r3
 8008652:	f000 ffeb 	bl	800962c <dhcp_option_short>
 8008656:	4603      	mov	r3, r0
 8008658:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800865a:	89b8      	ldrh	r0, [r7, #12]
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008662:	2304      	movs	r3, #4
 8008664:	2232      	movs	r2, #50	; 0x32
 8008666:	f000 ff87 	bl	8009578 <dhcp_option>
 800866a:	4603      	mov	r3, r0
 800866c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800866e:	89bc      	ldrh	r4, [r7, #12]
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	4618      	mov	r0, r3
 800867c:	f003 ff3b 	bl	800c4f6 <lwip_htonl>
 8008680:	4603      	mov	r3, r0
 8008682:	461a      	mov	r2, r3
 8008684:	4629      	mov	r1, r5
 8008686:	4620      	mov	r0, r4
 8008688:	f001 f802 	bl	8009690 <dhcp_option_long>
 800868c:	4603      	mov	r3, r0
 800868e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8008690:	89b8      	ldrh	r0, [r7, #12]
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008698:	2304      	movs	r3, #4
 800869a:	2236      	movs	r2, #54	; 0x36
 800869c:	f000 ff6c 	bl	8009578 <dhcp_option>
 80086a0:	4603      	mov	r3, r0
 80086a2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80086a4:	89bc      	ldrh	r4, [r7, #12]
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f003 ff20 	bl	800c4f6 <lwip_htonl>
 80086b6:	4603      	mov	r3, r0
 80086b8:	461a      	mov	r2, r3
 80086ba:	4629      	mov	r1, r5
 80086bc:	4620      	mov	r0, r4
 80086be:	f000 ffe7 	bl	8009690 <dhcp_option_long>
 80086c2:	4603      	mov	r3, r0
 80086c4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80086c6:	89b8      	ldrh	r0, [r7, #12]
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80086ce:	2303      	movs	r3, #3
 80086d0:	2237      	movs	r2, #55	; 0x37
 80086d2:	f000 ff51 	bl	8009578 <dhcp_option>
 80086d6:	4603      	mov	r3, r0
 80086d8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80086da:	2300      	movs	r3, #0
 80086dc:	77bb      	strb	r3, [r7, #30]
 80086de:	e00e      	b.n	80086fe <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80086e0:	89b8      	ldrh	r0, [r7, #12]
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80086e8:	7fbb      	ldrb	r3, [r7, #30]
 80086ea:	4a30      	ldr	r2, [pc, #192]	; (80087ac <dhcp_select+0x1e4>)
 80086ec:	5cd3      	ldrb	r3, [r2, r3]
 80086ee:	461a      	mov	r2, r3
 80086f0:	f000 ff76 	bl	80095e0 <dhcp_option_byte>
 80086f4:	4603      	mov	r3, r0
 80086f6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80086f8:	7fbb      	ldrb	r3, [r7, #30]
 80086fa:	3301      	adds	r3, #1
 80086fc:	77bb      	strb	r3, [r7, #30]
 80086fe:	7fbb      	ldrb	r3, [r7, #30]
 8008700:	2b02      	cmp	r3, #2
 8008702:	d9ed      	bls.n	80086e0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008704:	89b8      	ldrh	r0, [r7, #12]
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	33f0      	adds	r3, #240	; 0xf0
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	4619      	mov	r1, r3
 800870e:	f001 fc79 	bl	800a004 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8008712:	4b27      	ldr	r3, [pc, #156]	; (80087b0 <dhcp_select+0x1e8>)
 8008714:	6818      	ldr	r0, [r3, #0]
 8008716:	4b27      	ldr	r3, [pc, #156]	; (80087b4 <dhcp_select+0x1ec>)
 8008718:	9301      	str	r3, [sp, #4]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	2343      	movs	r3, #67	; 0x43
 8008720:	4a25      	ldr	r2, [pc, #148]	; (80087b8 <dhcp_select+0x1f0>)
 8008722:	6979      	ldr	r1, [r7, #20]
 8008724:	f00b fce2 	bl	80140ec <udp_sendto_if_src>
 8008728:	4603      	mov	r3, r0
 800872a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800872c:	6978      	ldr	r0, [r7, #20]
 800872e:	f005 fa57 	bl	800dbe0 <pbuf_free>
 8008732:	e001      	b.n	8008738 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8008734:	23ff      	movs	r3, #255	; 0xff
 8008736:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	799b      	ldrb	r3, [r3, #6]
 800873c:	2bff      	cmp	r3, #255	; 0xff
 800873e:	d005      	beq.n	800874c <dhcp_select+0x184>
    dhcp->tries++;
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	799b      	ldrb	r3, [r3, #6]
 8008744:	3301      	adds	r3, #1
 8008746:	b2da      	uxtb	r2, r3
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	799b      	ldrb	r3, [r3, #6]
 8008750:	2b05      	cmp	r3, #5
 8008752:	d80d      	bhi.n	8008770 <dhcp_select+0x1a8>
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	799b      	ldrb	r3, [r3, #6]
 8008758:	461a      	mov	r2, r3
 800875a:	2301      	movs	r3, #1
 800875c:	4093      	lsls	r3, r2
 800875e:	b29b      	uxth	r3, r3
 8008760:	461a      	mov	r2, r3
 8008762:	0152      	lsls	r2, r2, #5
 8008764:	1ad2      	subs	r2, r2, r3
 8008766:	0092      	lsls	r2, r2, #2
 8008768:	4413      	add	r3, r2
 800876a:	00db      	lsls	r3, r3, #3
 800876c:	b29b      	uxth	r3, r3
 800876e:	e001      	b.n	8008774 <dhcp_select+0x1ac>
 8008770:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008774:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008776:	89fb      	ldrh	r3, [r7, #14]
 8008778:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800877c:	4a0f      	ldr	r2, [pc, #60]	; (80087bc <dhcp_select+0x1f4>)
 800877e:	fb82 1203 	smull	r1, r2, r2, r3
 8008782:	1152      	asrs	r2, r2, #5
 8008784:	17db      	asrs	r3, r3, #31
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	b29a      	uxth	r2, r3
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800878e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3720      	adds	r7, #32
 8008796:	46bd      	mov	sp, r7
 8008798:	bdb0      	pop	{r4, r5, r7, pc}
 800879a:	bf00      	nop
 800879c:	08018cfc 	.word	0x08018cfc
 80087a0:	08018de0 	.word	0x08018de0
 80087a4:	08018d94 	.word	0x08018d94
 80087a8:	08018dfc 	.word	0x08018dfc
 80087ac:	2000002c 	.word	0x2000002c
 80087b0:	2000677c 	.word	0x2000677c
 80087b4:	0801958c 	.word	0x0801958c
 80087b8:	08019590 	.word	0x08019590
 80087bc:	10624dd3 	.word	0x10624dd3

080087c0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80087c6:	4b27      	ldr	r3, [pc, #156]	; (8008864 <dhcp_coarse_tmr+0xa4>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	607b      	str	r3, [r7, #4]
 80087cc:	e042      	b.n	8008854 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d039      	beq.n	800884e <dhcp_coarse_tmr+0x8e>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	795b      	ldrb	r3, [r3, #5]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d035      	beq.n	800884e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	8a9b      	ldrh	r3, [r3, #20]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d012      	beq.n	8008810 <dhcp_coarse_tmr+0x50>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	8a5b      	ldrh	r3, [r3, #18]
 80087ee:	3301      	adds	r3, #1
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	825a      	strh	r2, [r3, #18]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	8a5a      	ldrh	r2, [r3, #18]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	8a9b      	ldrh	r3, [r3, #20]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d106      	bne.n	8008810 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fdf8 	bl	80093f8 <dhcp_release_and_stop>
        dhcp_start(netif);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f96b 	bl	8008ae4 <dhcp_start>
 800880e:	e01e      	b.n	800884e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	8a1b      	ldrh	r3, [r3, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00b      	beq.n	8008830 <dhcp_coarse_tmr+0x70>
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	8a1b      	ldrh	r3, [r3, #16]
 800881c:	1e5a      	subs	r2, r3, #1
 800881e:	b291      	uxth	r1, r2
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	8211      	strh	r1, [r2, #16]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d103      	bne.n	8008830 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f8c7 	bl	80089bc <dhcp_t2_timeout>
 800882e:	e00e      	b.n	800884e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	89db      	ldrh	r3, [r3, #14]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00a      	beq.n	800884e <dhcp_coarse_tmr+0x8e>
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	89db      	ldrh	r3, [r3, #14]
 800883c:	1e5a      	subs	r2, r3, #1
 800883e:	b291      	uxth	r1, r2
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	81d1      	strh	r1, [r2, #14]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d102      	bne.n	800884e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f888 	bl	800895e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	607b      	str	r3, [r7, #4]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1b9      	bne.n	80087ce <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800885a:	bf00      	nop
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	2000cfb8 	.word	0x2000cfb8

08008868 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800886e:	4b16      	ldr	r3, [pc, #88]	; (80088c8 <dhcp_fine_tmr+0x60>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	607b      	str	r3, [r7, #4]
 8008874:	e020      	b.n	80088b8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d017      	beq.n	80088b2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	891b      	ldrh	r3, [r3, #8]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d906      	bls.n	8008898 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	891b      	ldrh	r3, [r3, #8]
 800888e:	3b01      	subs	r3, #1
 8008890:	b29a      	uxth	r2, r3
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	811a      	strh	r2, [r3, #8]
 8008896:	e00c      	b.n	80088b2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	891b      	ldrh	r3, [r3, #8]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d108      	bne.n	80088b2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	891b      	ldrh	r3, [r3, #8]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f80d 	bl	80088cc <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	607b      	str	r3, [r7, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1db      	bne.n	8008876 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80088be:	bf00      	nop
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	2000cfb8 	.word	0x2000cfb8

080088cc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	795b      	ldrb	r3, [r3, #5]
 80088de:	2b0c      	cmp	r3, #12
 80088e0:	d003      	beq.n	80088ea <dhcp_timeout+0x1e>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	795b      	ldrb	r3, [r3, #5]
 80088e6:	2b06      	cmp	r3, #6
 80088e8:	d103      	bne.n	80088f2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fa1a 	bl	8008d24 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80088f0:	e031      	b.n	8008956 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	795b      	ldrb	r3, [r3, #5]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d10e      	bne.n	8008918 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	799b      	ldrb	r3, [r3, #6]
 80088fe:	2b05      	cmp	r3, #5
 8008900:	d803      	bhi.n	800890a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7ff fe60 	bl	80085c8 <dhcp_select>
}
 8008908:	e025      	b.n	8008956 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fd74 	bl	80093f8 <dhcp_release_and_stop>
      dhcp_start(netif);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f8e7 	bl	8008ae4 <dhcp_start>
}
 8008916:	e01e      	b.n	8008956 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	795b      	ldrb	r3, [r3, #5]
 800891c:	2b08      	cmp	r3, #8
 800891e:	d10b      	bne.n	8008938 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	799b      	ldrb	r3, [r3, #6]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d803      	bhi.n	8008930 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7ff fdf3 	bl	8008514 <dhcp_check>
}
 800892e:	e012      	b.n	8008956 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fa99 	bl	8008e68 <dhcp_bind>
}
 8008936:	e00e      	b.n	8008956 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	795b      	ldrb	r3, [r3, #5]
 800893c:	2b03      	cmp	r3, #3
 800893e:	d10a      	bne.n	8008956 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	799b      	ldrb	r3, [r3, #6]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d803      	bhi.n	8008950 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fc9f 	bl	800928c <dhcp_reboot>
}
 800894e:	e002      	b.n	8008956 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f9e7 	bl	8008d24 <dhcp_discover>
}
 8008956:	bf00      	nop
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	795b      	ldrb	r3, [r3, #5]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d007      	beq.n	8008984 <dhcp_t1_timeout+0x26>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	795b      	ldrb	r3, [r3, #5]
 8008978:	2b0a      	cmp	r3, #10
 800897a:	d003      	beq.n	8008984 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8008980:	2b05      	cmp	r3, #5
 8008982:	d117      	bne.n	80089b4 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fb49 	bl	800901c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	899b      	ldrh	r3, [r3, #12]
 800898e:	461a      	mov	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	8a5b      	ldrh	r3, [r3, #18]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	2b01      	cmp	r3, #1
 8008998:	dd0c      	ble.n	80089b4 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	899b      	ldrh	r3, [r3, #12]
 800899e:	461a      	mov	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8a5b      	ldrh	r3, [r3, #18]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	da00      	bge.n	80089ac <dhcp_t1_timeout+0x4e>
 80089aa:	3301      	adds	r3, #1
 80089ac:	105b      	asrs	r3, r3, #1
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80089b4:	bf00      	nop
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	795b      	ldrb	r3, [r3, #5]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d00b      	beq.n	80089ea <dhcp_t2_timeout+0x2e>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	795b      	ldrb	r3, [r3, #5]
 80089d6:	2b0a      	cmp	r3, #10
 80089d8:	d007      	beq.n	80089ea <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80089de:	2b05      	cmp	r3, #5
 80089e0:	d003      	beq.n	80089ea <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	795b      	ldrb	r3, [r3, #5]
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	d117      	bne.n	8008a1a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fbb2 	bl	8009154 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8a9b      	ldrh	r3, [r3, #20]
 80089f4:	461a      	mov	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	8a5b      	ldrh	r3, [r3, #18]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	dd0c      	ble.n	8008a1a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	8a9b      	ldrh	r3, [r3, #20]
 8008a04:	461a      	mov	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	8a5b      	ldrh	r3, [r3, #18]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	da00      	bge.n	8008a12 <dhcp_t2_timeout+0x56>
 8008a10:	3301      	adds	r3, #1
 8008a12:	105b      	asrs	r3, r3, #1
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8008a1a:	bf00      	nop
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
	...

08008a24 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8008a40:	4b26      	ldr	r3, [pc, #152]	; (8008adc <dhcp_handle_ack+0xb8>)
 8008a42:	78db      	ldrb	r3, [r3, #3]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8008a48:	4b25      	ldr	r3, [pc, #148]	; (8008ae0 <dhcp_handle_ack+0xbc>)
 8008a4a:	68da      	ldr	r2, [r3, #12]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8008a50:	4b22      	ldr	r3, [pc, #136]	; (8008adc <dhcp_handle_ack+0xb8>)
 8008a52:	791b      	ldrb	r3, [r3, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d004      	beq.n	8008a62 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8008a58:	4b21      	ldr	r3, [pc, #132]	; (8008ae0 <dhcp_handle_ack+0xbc>)
 8008a5a:	691a      	ldr	r2, [r3, #16]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008a60:	e004      	b.n	8008a6c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a66:	085a      	lsrs	r2, r3, #1
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8008a6c:	4b1b      	ldr	r3, [pc, #108]	; (8008adc <dhcp_handle_ack+0xb8>)
 8008a6e:	795b      	ldrb	r3, [r3, #5]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d004      	beq.n	8008a7e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8008a74:	4b1a      	ldr	r3, [pc, #104]	; (8008ae0 <dhcp_handle_ack+0xbc>)
 8008a76:	695a      	ldr	r2, [r3, #20]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8008a7c:	e007      	b.n	8008a8e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a82:	4613      	mov	r3, r2
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	1a9b      	subs	r3, r3, r2
 8008a88:	08da      	lsrs	r2, r3, #3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	691a      	ldr	r2, [r3, #16]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8008a96:	4b11      	ldr	r3, [pc, #68]	; (8008adc <dhcp_handle_ack+0xb8>)
 8008a98:	799b      	ldrb	r3, [r3, #6]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8008a9e:	4b10      	ldr	r3, [pc, #64]	; (8008ae0 <dhcp_handle_ack+0xbc>)
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f003 fd27 	bl	800c4f6 <lwip_htonl>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	71da      	strb	r2, [r3, #7]
 8008ab4:	e002      	b.n	8008abc <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8008abc:	4b07      	ldr	r3, [pc, #28]	; (8008adc <dhcp_handle_ack+0xb8>)
 8008abe:	79db      	ldrb	r3, [r3, #7]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d007      	beq.n	8008ad4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8008ac4:	4b06      	ldr	r3, [pc, #24]	; (8008ae0 <dhcp_handle_ack+0xbc>)
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f003 fd14 	bl	800c4f6 <lwip_htonl>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8008ad4:	bf00      	nop
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	20006a5c 	.word	0x20006a5c
 8008ae0:	20006a64 	.word	0x20006a64

08008ae4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d109      	bne.n	8008b06 <dhcp_start+0x22>
 8008af2:	4b37      	ldr	r3, [pc, #220]	; (8008bd0 <dhcp_start+0xec>)
 8008af4:	f240 22e7 	movw	r2, #743	; 0x2e7
 8008af8:	4936      	ldr	r1, [pc, #216]	; (8008bd4 <dhcp_start+0xf0>)
 8008afa:	4837      	ldr	r0, [pc, #220]	; (8008bd8 <dhcp_start+0xf4>)
 8008afc:	f00c fcea 	bl	80154d4 <iprintf>
 8008b00:	f06f 030f 	mvn.w	r3, #15
 8008b04:	e060      	b.n	8008bc8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b0c:	f003 0301 	and.w	r3, r3, #1
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d109      	bne.n	8008b28 <dhcp_start+0x44>
 8008b14:	4b2e      	ldr	r3, [pc, #184]	; (8008bd0 <dhcp_start+0xec>)
 8008b16:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8008b1a:	4930      	ldr	r1, [pc, #192]	; (8008bdc <dhcp_start+0xf8>)
 8008b1c:	482e      	ldr	r0, [pc, #184]	; (8008bd8 <dhcp_start+0xf4>)
 8008b1e:	f00c fcd9 	bl	80154d4 <iprintf>
 8008b22:	f06f 030f 	mvn.w	r3, #15
 8008b26:	e04f      	b.n	8008bc8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b32:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008b36:	d202      	bcs.n	8008b3e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8008b38:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3c:	e044      	b.n	8008bc8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10d      	bne.n	8008b60 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8008b44:	2034      	movs	r0, #52	; 0x34
 8008b46:	f004 f89f 	bl	800cc88 <mem_malloc>
 8008b4a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d102      	bne.n	8008b58 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8008b52:	f04f 33ff 	mov.w	r3, #4294967295
 8008b56:	e037      	b.n	8008bc8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	625a      	str	r2, [r3, #36]	; 0x24
 8008b5e:	e005      	b.n	8008b6c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	791b      	ldrb	r3, [r3, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8008b68:	f7ff fc90 	bl	800848c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8008b6c:	2234      	movs	r2, #52	; 0x34
 8008b6e:	2100      	movs	r1, #0
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f00b ffa2 	bl	8014aba <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8008b76:	f7ff fc37 	bl	80083e8 <dhcp_inc_pcb_refcount>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <dhcp_start+0xa2>
    return ERR_MEM;
 8008b80:	f04f 33ff 	mov.w	r3, #4294967295
 8008b84:	e020      	b.n	8008bc8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b92:	f003 0304 	and.w	r3, r3, #4
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d105      	bne.n	8008ba6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8008b9a:	2102      	movs	r1, #2
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 fcd0 	bl	8009542 <dhcp_set_state>
    return ERR_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	e010      	b.n	8008bc8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f8bc 	bl	8008d24 <dhcp_discover>
 8008bac:	4603      	mov	r3, r0
 8008bae:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8008bb0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d005      	beq.n	8008bc4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fc1d 	bl	80093f8 <dhcp_release_and_stop>
    return ERR_MEM;
 8008bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc2:	e001      	b.n	8008bc8 <dhcp_start+0xe4>
  }
  return result;
 8008bc4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	08018cfc 	.word	0x08018cfc
 8008bd4:	08018e18 	.word	0x08018e18
 8008bd8:	08018d94 	.word	0x08018d94
 8008bdc:	08018e5c 	.word	0x08018e5c

08008be0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d107      	bne.n	8008c00 <dhcp_arp_reply+0x20>
 8008bf0:	4b0e      	ldr	r3, [pc, #56]	; (8008c2c <dhcp_arp_reply+0x4c>)
 8008bf2:	f240 328b 	movw	r2, #907	; 0x38b
 8008bf6:	490e      	ldr	r1, [pc, #56]	; (8008c30 <dhcp_arp_reply+0x50>)
 8008bf8:	480e      	ldr	r0, [pc, #56]	; (8008c34 <dhcp_arp_reply+0x54>)
 8008bfa:	f00c fc6b 	bl	80154d4 <iprintf>
 8008bfe:	e012      	b.n	8008c26 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c04:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00c      	beq.n	8008c26 <dhcp_arp_reply+0x46>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	795b      	ldrb	r3, [r3, #5]
 8008c10:	2b08      	cmp	r3, #8
 8008c12:	d108      	bne.n	8008c26 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	69db      	ldr	r3, [r3, #28]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d102      	bne.n	8008c26 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f809 	bl	8008c38 <dhcp_decline>
    }
  }
}
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	08018cfc 	.word	0x08018cfc
 8008c30:	08018e18 	.word	0x08018e18
 8008c34:	08018d94 	.word	0x08018d94

08008c38 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8008c38:	b5b0      	push	{r4, r5, r7, lr}
 8008c3a:	b08a      	sub	sp, #40	; 0x28
 8008c3c:	af02      	add	r7, sp, #8
 8008c3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c44:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8008c46:	210c      	movs	r1, #12
 8008c48:	69b8      	ldr	r0, [r7, #24]
 8008c4a:	f000 fc7a 	bl	8009542 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8008c4e:	f107 030c 	add.w	r3, r7, #12
 8008c52:	2204      	movs	r2, #4
 8008c54:	69b9      	ldr	r1, [r7, #24]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f001 f8fe 	bl	8009e58 <dhcp_create_msg>
 8008c5c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d035      	beq.n	8008cd0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8008c6a:	89b8      	ldrh	r0, [r7, #12]
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008c72:	2304      	movs	r3, #4
 8008c74:	2232      	movs	r2, #50	; 0x32
 8008c76:	f000 fc7f 	bl	8009578 <dhcp_option>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008c7e:	89bc      	ldrh	r4, [r7, #12]
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f003 fc33 	bl	800c4f6 <lwip_htonl>
 8008c90:	4603      	mov	r3, r0
 8008c92:	461a      	mov	r2, r3
 8008c94:	4629      	mov	r1, r5
 8008c96:	4620      	mov	r0, r4
 8008c98:	f000 fcfa 	bl	8009690 <dhcp_option_long>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008ca0:	89b8      	ldrh	r0, [r7, #12]
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	33f0      	adds	r3, #240	; 0xf0
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	f001 f9ab 	bl	800a004 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8008cae:	4b19      	ldr	r3, [pc, #100]	; (8008d14 <dhcp_decline+0xdc>)
 8008cb0:	6818      	ldr	r0, [r3, #0]
 8008cb2:	4b19      	ldr	r3, [pc, #100]	; (8008d18 <dhcp_decline+0xe0>)
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	2343      	movs	r3, #67	; 0x43
 8008cbc:	4a17      	ldr	r2, [pc, #92]	; (8008d1c <dhcp_decline+0xe4>)
 8008cbe:	6979      	ldr	r1, [r7, #20]
 8008cc0:	f00b fa14 	bl	80140ec <udp_sendto_if_src>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8008cc8:	6978      	ldr	r0, [r7, #20]
 8008cca:	f004 ff89 	bl	800dbe0 <pbuf_free>
 8008cce:	e001      	b.n	8008cd4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8008cd0:	23ff      	movs	r3, #255	; 0xff
 8008cd2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	799b      	ldrb	r3, [r3, #6]
 8008cd8:	2bff      	cmp	r3, #255	; 0xff
 8008cda:	d005      	beq.n	8008ce8 <dhcp_decline+0xb0>
    dhcp->tries++;
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	799b      	ldrb	r3, [r3, #6]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8008ce8:	f242 7310 	movw	r3, #10000	; 0x2710
 8008cec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008cee:	89fb      	ldrh	r3, [r7, #14]
 8008cf0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008cf4:	4a0a      	ldr	r2, [pc, #40]	; (8008d20 <dhcp_decline+0xe8>)
 8008cf6:	fb82 1203 	smull	r1, r2, r2, r3
 8008cfa:	1152      	asrs	r2, r2, #5
 8008cfc:	17db      	asrs	r3, r3, #31
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008d06:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3720      	adds	r7, #32
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bdb0      	pop	{r4, r5, r7, pc}
 8008d12:	bf00      	nop
 8008d14:	2000677c 	.word	0x2000677c
 8008d18:	0801958c 	.word	0x0801958c
 8008d1c:	08019590 	.word	0x08019590
 8008d20:	10624dd3 	.word	0x10624dd3

08008d24 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b08a      	sub	sp, #40	; 0x28
 8008d28:	af02      	add	r7, sp, #8
 8008d2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8008d3c:	2106      	movs	r1, #6
 8008d3e:	69b8      	ldr	r0, [r7, #24]
 8008d40:	f000 fbff 	bl	8009542 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8008d44:	f107 0308 	add.w	r3, r7, #8
 8008d48:	2201      	movs	r2, #1
 8008d4a:	69b9      	ldr	r1, [r7, #24]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 f883 	bl	8009e58 <dhcp_create_msg>
 8008d52:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d04b      	beq.n	8008df2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008d60:	8938      	ldrh	r0, [r7, #8]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008d68:	2302      	movs	r3, #2
 8008d6a:	2239      	movs	r2, #57	; 0x39
 8008d6c:	f000 fc04 	bl	8009578 <dhcp_option>
 8008d70:	4603      	mov	r3, r0
 8008d72:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008d74:	8938      	ldrh	r0, [r7, #8]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d80:	461a      	mov	r2, r3
 8008d82:	f000 fc53 	bl	800962c <dhcp_option_short>
 8008d86:	4603      	mov	r3, r0
 8008d88:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008d8a:	8938      	ldrh	r0, [r7, #8]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008d92:	2303      	movs	r3, #3
 8008d94:	2237      	movs	r2, #55	; 0x37
 8008d96:	f000 fbef 	bl	8009578 <dhcp_option>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008d9e:	2300      	movs	r3, #0
 8008da0:	77fb      	strb	r3, [r7, #31]
 8008da2:	e00e      	b.n	8008dc2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008da4:	8938      	ldrh	r0, [r7, #8]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008dac:	7ffb      	ldrb	r3, [r7, #31]
 8008dae:	4a29      	ldr	r2, [pc, #164]	; (8008e54 <dhcp_discover+0x130>)
 8008db0:	5cd3      	ldrb	r3, [r2, r3]
 8008db2:	461a      	mov	r2, r3
 8008db4:	f000 fc14 	bl	80095e0 <dhcp_option_byte>
 8008db8:	4603      	mov	r3, r0
 8008dba:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008dbc:	7ffb      	ldrb	r3, [r7, #31]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	77fb      	strb	r3, [r7, #31]
 8008dc2:	7ffb      	ldrb	r3, [r7, #31]
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d9ed      	bls.n	8008da4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008dc8:	8938      	ldrh	r0, [r7, #8]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	33f0      	adds	r3, #240	; 0xf0
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	f001 f917 	bl	800a004 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8008dd6:	4b20      	ldr	r3, [pc, #128]	; (8008e58 <dhcp_discover+0x134>)
 8008dd8:	6818      	ldr	r0, [r3, #0]
 8008dda:	4b20      	ldr	r3, [pc, #128]	; (8008e5c <dhcp_discover+0x138>)
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	2343      	movs	r3, #67	; 0x43
 8008de4:	4a1e      	ldr	r2, [pc, #120]	; (8008e60 <dhcp_discover+0x13c>)
 8008de6:	6939      	ldr	r1, [r7, #16]
 8008de8:	f00b f980 	bl	80140ec <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8008dec:	6938      	ldr	r0, [r7, #16]
 8008dee:	f004 fef7 	bl	800dbe0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	799b      	ldrb	r3, [r3, #6]
 8008df6:	2bff      	cmp	r3, #255	; 0xff
 8008df8:	d005      	beq.n	8008e06 <dhcp_discover+0xe2>
    dhcp->tries++;
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	799b      	ldrb	r3, [r3, #6]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	799b      	ldrb	r3, [r3, #6]
 8008e0a:	2b05      	cmp	r3, #5
 8008e0c:	d80d      	bhi.n	8008e2a <dhcp_discover+0x106>
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	799b      	ldrb	r3, [r3, #6]
 8008e12:	461a      	mov	r2, r3
 8008e14:	2301      	movs	r3, #1
 8008e16:	4093      	lsls	r3, r2
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	0152      	lsls	r2, r2, #5
 8008e1e:	1ad2      	subs	r2, r2, r3
 8008e20:	0092      	lsls	r2, r2, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	00db      	lsls	r3, r3, #3
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	e001      	b.n	8008e2e <dhcp_discover+0x10a>
 8008e2a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008e2e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008e30:	897b      	ldrh	r3, [r7, #10]
 8008e32:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008e36:	4a0b      	ldr	r2, [pc, #44]	; (8008e64 <dhcp_discover+0x140>)
 8008e38:	fb82 1203 	smull	r1, r2, r2, r3
 8008e3c:	1152      	asrs	r2, r2, #5
 8008e3e:	17db      	asrs	r3, r3, #31
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008e48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3720      	adds	r7, #32
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	2000002c 	.word	0x2000002c
 8008e58:	2000677c 	.word	0x2000677c
 8008e5c:	0801958c 	.word	0x0801958c
 8008e60:	08019590 	.word	0x08019590
 8008e64:	10624dd3 	.word	0x10624dd3

08008e68 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b088      	sub	sp, #32
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d107      	bne.n	8008e86 <dhcp_bind+0x1e>
 8008e76:	4b64      	ldr	r3, [pc, #400]	; (8009008 <dhcp_bind+0x1a0>)
 8008e78:	f240 4215 	movw	r2, #1045	; 0x415
 8008e7c:	4963      	ldr	r1, [pc, #396]	; (800900c <dhcp_bind+0x1a4>)
 8008e7e:	4864      	ldr	r0, [pc, #400]	; (8009010 <dhcp_bind+0x1a8>)
 8008e80:	f00c fb28 	bl	80154d4 <iprintf>
 8008e84:	e0bc      	b.n	8009000 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d107      	bne.n	8008ea2 <dhcp_bind+0x3a>
 8008e92:	4b5d      	ldr	r3, [pc, #372]	; (8009008 <dhcp_bind+0x1a0>)
 8008e94:	f240 4217 	movw	r2, #1047	; 0x417
 8008e98:	495e      	ldr	r1, [pc, #376]	; (8009014 <dhcp_bind+0x1ac>)
 8008e9a:	485d      	ldr	r0, [pc, #372]	; (8009010 <dhcp_bind+0x1a8>)
 8008e9c:	f00c fb1a 	bl	80154d4 <iprintf>
 8008ea0:	e0ae      	b.n	8009000 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb0:	d019      	beq.n	8008ee6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb6:	331e      	adds	r3, #30
 8008eb8:	4a57      	ldr	r2, [pc, #348]	; (8009018 <dhcp_bind+0x1b0>)
 8008eba:	fba2 2303 	umull	r2, r3, r2, r3
 8008ebe:	095b      	lsrs	r3, r3, #5
 8008ec0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ec8:	d302      	bcc.n	8008ed0 <dhcp_bind+0x68>
      timeout = 0xffff;
 8008eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ece:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	8a9b      	ldrh	r3, [r3, #20]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d102      	bne.n	8008ee6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eee:	d01d      	beq.n	8008f2c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef4:	331e      	adds	r3, #30
 8008ef6:	4a48      	ldr	r2, [pc, #288]	; (8009018 <dhcp_bind+0x1b0>)
 8008ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8008efc:	095b      	lsrs	r3, r3, #5
 8008efe:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f06:	d302      	bcc.n	8008f0e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8008f08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f0c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	895b      	ldrh	r3, [r3, #10]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d102      	bne.n	8008f24 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	2201      	movs	r2, #1
 8008f22:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	895a      	ldrh	r2, [r3, #10]
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f34:	d01d      	beq.n	8008f72 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3a:	331e      	adds	r3, #30
 8008f3c:	4a36      	ldr	r2, [pc, #216]	; (8009018 <dhcp_bind+0x1b0>)
 8008f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f42:	095b      	lsrs	r3, r3, #5
 8008f44:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f4c:	d302      	bcc.n	8008f54 <dhcp_bind+0xec>
      timeout = 0xffff;
 8008f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f52:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	899b      	ldrh	r3, [r3, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d102      	bne.n	8008f6a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	2201      	movs	r2, #1
 8008f68:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	899a      	ldrh	r2, [r3, #12]
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	895a      	ldrh	r2, [r3, #10]
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	899b      	ldrh	r3, [r3, #12]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d306      	bcc.n	8008f8c <dhcp_bind+0x124>
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	899b      	ldrh	r3, [r3, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	79db      	ldrb	r3, [r3, #7]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d003      	beq.n	8008f9c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	6a1b      	ldr	r3, [r3, #32]
 8008f98:	613b      	str	r3, [r7, #16]
 8008f9a:	e014      	b.n	8008fc6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	331c      	adds	r3, #28
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8008fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	db02      	blt.n	8008fb2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8008fac:	23ff      	movs	r3, #255	; 0xff
 8008fae:	613b      	str	r3, [r7, #16]
 8008fb0:	e009      	b.n	8008fc6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8008fb2:	7dfb      	ldrb	r3, [r7, #23]
 8008fb4:	2bbf      	cmp	r3, #191	; 0xbf
 8008fb6:	d903      	bls.n	8008fc0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8008fb8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008fbc:	613b      	str	r3, [r7, #16]
 8008fbe:	e002      	b.n	8008fc6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8008fc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008fc4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d108      	bne.n	8008fe4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	69da      	ldr	r2, [r3, #28]
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	4013      	ands	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fe2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8008fe4:	210a      	movs	r1, #10
 8008fe6:	69b8      	ldr	r0, [r7, #24]
 8008fe8:	f000 faab 	bl	8009542 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	f103 011c 	add.w	r1, r3, #28
 8008ff2:	f107 030c 	add.w	r3, r7, #12
 8008ff6:	f107 0210 	add.w	r2, r7, #16
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f004 f9ba 	bl	800d374 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8009000:	3720      	adds	r7, #32
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	08018cfc 	.word	0x08018cfc
 800900c:	08018e94 	.word	0x08018e94
 8009010:	08018d94 	.word	0x08018d94
 8009014:	08018eb0 	.word	0x08018eb0
 8009018:	88888889 	.word	0x88888889

0800901c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b08a      	sub	sp, #40	; 0x28
 8009020:	af02      	add	r7, sp, #8
 8009022:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009028:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800902a:	2105      	movs	r1, #5
 800902c:	69b8      	ldr	r0, [r7, #24]
 800902e:	f000 fa88 	bl	8009542 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8009032:	f107 030c 	add.w	r3, r7, #12
 8009036:	2203      	movs	r2, #3
 8009038:	69b9      	ldr	r1, [r7, #24]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 ff0c 	bl	8009e58 <dhcp_create_msg>
 8009040:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d04e      	beq.n	80090e6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800904e:	89b8      	ldrh	r0, [r7, #12]
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8009056:	2302      	movs	r3, #2
 8009058:	2239      	movs	r2, #57	; 0x39
 800905a:	f000 fa8d 	bl	8009578 <dhcp_option>
 800905e:	4603      	mov	r3, r0
 8009060:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8009062:	89b8      	ldrh	r0, [r7, #12]
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800906e:	461a      	mov	r2, r3
 8009070:	f000 fadc 	bl	800962c <dhcp_option_short>
 8009074:	4603      	mov	r3, r0
 8009076:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009078:	89b8      	ldrh	r0, [r7, #12]
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8009080:	2303      	movs	r3, #3
 8009082:	2237      	movs	r2, #55	; 0x37
 8009084:	f000 fa78 	bl	8009578 <dhcp_option>
 8009088:	4603      	mov	r3, r0
 800908a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800908c:	2300      	movs	r3, #0
 800908e:	77bb      	strb	r3, [r7, #30]
 8009090:	e00e      	b.n	80090b0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8009092:	89b8      	ldrh	r0, [r7, #12]
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800909a:	7fbb      	ldrb	r3, [r7, #30]
 800909c:	4a2a      	ldr	r2, [pc, #168]	; (8009148 <dhcp_renew+0x12c>)
 800909e:	5cd3      	ldrb	r3, [r2, r3]
 80090a0:	461a      	mov	r2, r3
 80090a2:	f000 fa9d 	bl	80095e0 <dhcp_option_byte>
 80090a6:	4603      	mov	r3, r0
 80090a8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80090aa:	7fbb      	ldrb	r3, [r7, #30]
 80090ac:	3301      	adds	r3, #1
 80090ae:	77bb      	strb	r3, [r7, #30]
 80090b0:	7fbb      	ldrb	r3, [r7, #30]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d9ed      	bls.n	8009092 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80090b6:	89b8      	ldrh	r0, [r7, #12]
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	33f0      	adds	r3, #240	; 0xf0
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	4619      	mov	r1, r3
 80090c0:	f000 ffa0 	bl	800a004 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80090c4:	4b21      	ldr	r3, [pc, #132]	; (800914c <dhcp_renew+0x130>)
 80090c6:	6818      	ldr	r0, [r3, #0]
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	f103 0218 	add.w	r2, r3, #24
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	2343      	movs	r3, #67	; 0x43
 80090d4:	6979      	ldr	r1, [r7, #20]
 80090d6:	f00a ff95 	bl	8014004 <udp_sendto_if>
 80090da:	4603      	mov	r3, r0
 80090dc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80090de:	6978      	ldr	r0, [r7, #20]
 80090e0:	f004 fd7e 	bl	800dbe0 <pbuf_free>
 80090e4:	e001      	b.n	80090ea <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80090e6:	23ff      	movs	r3, #255	; 0xff
 80090e8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	799b      	ldrb	r3, [r3, #6]
 80090ee:	2bff      	cmp	r3, #255	; 0xff
 80090f0:	d005      	beq.n	80090fe <dhcp_renew+0xe2>
    dhcp->tries++;
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	799b      	ldrb	r3, [r3, #6]
 80090f6:	3301      	adds	r3, #1
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	799b      	ldrb	r3, [r3, #6]
 8009102:	2b09      	cmp	r3, #9
 8009104:	d80a      	bhi.n	800911c <dhcp_renew+0x100>
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	799b      	ldrb	r3, [r3, #6]
 800910a:	b29b      	uxth	r3, r3
 800910c:	461a      	mov	r2, r3
 800910e:	0152      	lsls	r2, r2, #5
 8009110:	1ad2      	subs	r2, r2, r3
 8009112:	0092      	lsls	r2, r2, #2
 8009114:	4413      	add	r3, r2
 8009116:	011b      	lsls	r3, r3, #4
 8009118:	b29b      	uxth	r3, r3
 800911a:	e001      	b.n	8009120 <dhcp_renew+0x104>
 800911c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009120:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8009122:	89fb      	ldrh	r3, [r7, #14]
 8009124:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009128:	4a09      	ldr	r2, [pc, #36]	; (8009150 <dhcp_renew+0x134>)
 800912a:	fb82 1203 	smull	r1, r2, r2, r3
 800912e:	1152      	asrs	r2, r2, #5
 8009130:	17db      	asrs	r3, r3, #31
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	b29a      	uxth	r2, r3
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800913a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3720      	adds	r7, #32
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	2000002c 	.word	0x2000002c
 800914c:	2000677c 	.word	0x2000677c
 8009150:	10624dd3 	.word	0x10624dd3

08009154 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b08a      	sub	sp, #40	; 0x28
 8009158:	af02      	add	r7, sp, #8
 800915a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009160:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8009162:	2104      	movs	r1, #4
 8009164:	69b8      	ldr	r0, [r7, #24]
 8009166:	f000 f9ec 	bl	8009542 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800916a:	f107 030c 	add.w	r3, r7, #12
 800916e:	2203      	movs	r2, #3
 8009170:	69b9      	ldr	r1, [r7, #24]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fe70 	bl	8009e58 <dhcp_create_msg>
 8009178:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d04c      	beq.n	800921a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009186:	89b8      	ldrh	r0, [r7, #12]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800918e:	2302      	movs	r3, #2
 8009190:	2239      	movs	r2, #57	; 0x39
 8009192:	f000 f9f1 	bl	8009578 <dhcp_option>
 8009196:	4603      	mov	r3, r0
 8009198:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800919a:	89b8      	ldrh	r0, [r7, #12]
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091a6:	461a      	mov	r2, r3
 80091a8:	f000 fa40 	bl	800962c <dhcp_option_short>
 80091ac:	4603      	mov	r3, r0
 80091ae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80091b0:	89b8      	ldrh	r0, [r7, #12]
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80091b8:	2303      	movs	r3, #3
 80091ba:	2237      	movs	r2, #55	; 0x37
 80091bc:	f000 f9dc 	bl	8009578 <dhcp_option>
 80091c0:	4603      	mov	r3, r0
 80091c2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80091c4:	2300      	movs	r3, #0
 80091c6:	77bb      	strb	r3, [r7, #30]
 80091c8:	e00e      	b.n	80091e8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80091ca:	89b8      	ldrh	r0, [r7, #12]
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80091d2:	7fbb      	ldrb	r3, [r7, #30]
 80091d4:	4a29      	ldr	r2, [pc, #164]	; (800927c <dhcp_rebind+0x128>)
 80091d6:	5cd3      	ldrb	r3, [r2, r3]
 80091d8:	461a      	mov	r2, r3
 80091da:	f000 fa01 	bl	80095e0 <dhcp_option_byte>
 80091de:	4603      	mov	r3, r0
 80091e0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80091e2:	7fbb      	ldrb	r3, [r7, #30]
 80091e4:	3301      	adds	r3, #1
 80091e6:	77bb      	strb	r3, [r7, #30]
 80091e8:	7fbb      	ldrb	r3, [r7, #30]
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d9ed      	bls.n	80091ca <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80091ee:	89b8      	ldrh	r0, [r7, #12]
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	33f0      	adds	r3, #240	; 0xf0
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	4619      	mov	r1, r3
 80091f8:	f000 ff04 	bl	800a004 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80091fc:	4b20      	ldr	r3, [pc, #128]	; (8009280 <dhcp_rebind+0x12c>)
 80091fe:	6818      	ldr	r0, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	2343      	movs	r3, #67	; 0x43
 8009206:	4a1f      	ldr	r2, [pc, #124]	; (8009284 <dhcp_rebind+0x130>)
 8009208:	6979      	ldr	r1, [r7, #20]
 800920a:	f00a fefb 	bl	8014004 <udp_sendto_if>
 800920e:	4603      	mov	r3, r0
 8009210:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8009212:	6978      	ldr	r0, [r7, #20]
 8009214:	f004 fce4 	bl	800dbe0 <pbuf_free>
 8009218:	e001      	b.n	800921e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800921a:	23ff      	movs	r3, #255	; 0xff
 800921c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	799b      	ldrb	r3, [r3, #6]
 8009222:	2bff      	cmp	r3, #255	; 0xff
 8009224:	d005      	beq.n	8009232 <dhcp_rebind+0xde>
    dhcp->tries++;
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	799b      	ldrb	r3, [r3, #6]
 800922a:	3301      	adds	r3, #1
 800922c:	b2da      	uxtb	r2, r3
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	799b      	ldrb	r3, [r3, #6]
 8009236:	2b09      	cmp	r3, #9
 8009238:	d80a      	bhi.n	8009250 <dhcp_rebind+0xfc>
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	799b      	ldrb	r3, [r3, #6]
 800923e:	b29b      	uxth	r3, r3
 8009240:	461a      	mov	r2, r3
 8009242:	0152      	lsls	r2, r2, #5
 8009244:	1ad2      	subs	r2, r2, r3
 8009246:	0092      	lsls	r2, r2, #2
 8009248:	4413      	add	r3, r2
 800924a:	00db      	lsls	r3, r3, #3
 800924c:	b29b      	uxth	r3, r3
 800924e:	e001      	b.n	8009254 <dhcp_rebind+0x100>
 8009250:	f242 7310 	movw	r3, #10000	; 0x2710
 8009254:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8009256:	89fb      	ldrh	r3, [r7, #14]
 8009258:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800925c:	4a0a      	ldr	r2, [pc, #40]	; (8009288 <dhcp_rebind+0x134>)
 800925e:	fb82 1203 	smull	r1, r2, r2, r3
 8009262:	1152      	asrs	r2, r2, #5
 8009264:	17db      	asrs	r3, r3, #31
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	b29a      	uxth	r2, r3
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800926e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3720      	adds	r7, #32
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	2000002c 	.word	0x2000002c
 8009280:	2000677c 	.word	0x2000677c
 8009284:	08019590 	.word	0x08019590
 8009288:	10624dd3 	.word	0x10624dd3

0800928c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800928c:	b5b0      	push	{r4, r5, r7, lr}
 800928e:	b08a      	sub	sp, #40	; 0x28
 8009290:	af02      	add	r7, sp, #8
 8009292:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800929a:	2103      	movs	r1, #3
 800929c:	69b8      	ldr	r0, [r7, #24]
 800929e:	f000 f950 	bl	8009542 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80092a2:	f107 030c 	add.w	r3, r7, #12
 80092a6:	2203      	movs	r2, #3
 80092a8:	69b9      	ldr	r1, [r7, #24]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fdd4 	bl	8009e58 <dhcp_create_msg>
 80092b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d066      	beq.n	8009386 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80092be:	89b8      	ldrh	r0, [r7, #12]
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80092c6:	2302      	movs	r3, #2
 80092c8:	2239      	movs	r2, #57	; 0x39
 80092ca:	f000 f955 	bl	8009578 <dhcp_option>
 80092ce:	4603      	mov	r3, r0
 80092d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80092d2:	89b8      	ldrh	r0, [r7, #12]
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	33f0      	adds	r3, #240	; 0xf0
 80092d8:	f44f 7210 	mov.w	r2, #576	; 0x240
 80092dc:	4619      	mov	r1, r3
 80092de:	f000 f9a5 	bl	800962c <dhcp_option_short>
 80092e2:	4603      	mov	r3, r0
 80092e4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80092e6:	89b8      	ldrh	r0, [r7, #12]
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80092ee:	2304      	movs	r3, #4
 80092f0:	2232      	movs	r2, #50	; 0x32
 80092f2:	f000 f941 	bl	8009578 <dhcp_option>
 80092f6:	4603      	mov	r3, r0
 80092f8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80092fa:	89bc      	ldrh	r4, [r7, #12]
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	69db      	ldr	r3, [r3, #28]
 8009306:	4618      	mov	r0, r3
 8009308:	f003 f8f5 	bl	800c4f6 <lwip_htonl>
 800930c:	4603      	mov	r3, r0
 800930e:	461a      	mov	r2, r3
 8009310:	4629      	mov	r1, r5
 8009312:	4620      	mov	r0, r4
 8009314:	f000 f9bc 	bl	8009690 <dhcp_option_long>
 8009318:	4603      	mov	r3, r0
 800931a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800931c:	89b8      	ldrh	r0, [r7, #12]
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8009324:	2303      	movs	r3, #3
 8009326:	2237      	movs	r2, #55	; 0x37
 8009328:	f000 f926 	bl	8009578 <dhcp_option>
 800932c:	4603      	mov	r3, r0
 800932e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009330:	2300      	movs	r3, #0
 8009332:	77bb      	strb	r3, [r7, #30]
 8009334:	e00e      	b.n	8009354 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8009336:	89b8      	ldrh	r0, [r7, #12]
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800933e:	7fbb      	ldrb	r3, [r7, #30]
 8009340:	4a29      	ldr	r2, [pc, #164]	; (80093e8 <dhcp_reboot+0x15c>)
 8009342:	5cd3      	ldrb	r3, [r2, r3]
 8009344:	461a      	mov	r2, r3
 8009346:	f000 f94b 	bl	80095e0 <dhcp_option_byte>
 800934a:	4603      	mov	r3, r0
 800934c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800934e:	7fbb      	ldrb	r3, [r7, #30]
 8009350:	3301      	adds	r3, #1
 8009352:	77bb      	strb	r3, [r7, #30]
 8009354:	7fbb      	ldrb	r3, [r7, #30]
 8009356:	2b02      	cmp	r3, #2
 8009358:	d9ed      	bls.n	8009336 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800935a:	89b8      	ldrh	r0, [r7, #12]
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	33f0      	adds	r3, #240	; 0xf0
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	4619      	mov	r1, r3
 8009364:	f000 fe4e 	bl	800a004 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8009368:	4b20      	ldr	r3, [pc, #128]	; (80093ec <dhcp_reboot+0x160>)
 800936a:	6818      	ldr	r0, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	2343      	movs	r3, #67	; 0x43
 8009372:	4a1f      	ldr	r2, [pc, #124]	; (80093f0 <dhcp_reboot+0x164>)
 8009374:	6979      	ldr	r1, [r7, #20]
 8009376:	f00a fe45 	bl	8014004 <udp_sendto_if>
 800937a:	4603      	mov	r3, r0
 800937c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800937e:	6978      	ldr	r0, [r7, #20]
 8009380:	f004 fc2e 	bl	800dbe0 <pbuf_free>
 8009384:	e001      	b.n	800938a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8009386:	23ff      	movs	r3, #255	; 0xff
 8009388:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	799b      	ldrb	r3, [r3, #6]
 800938e:	2bff      	cmp	r3, #255	; 0xff
 8009390:	d005      	beq.n	800939e <dhcp_reboot+0x112>
    dhcp->tries++;
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	799b      	ldrb	r3, [r3, #6]
 8009396:	3301      	adds	r3, #1
 8009398:	b2da      	uxtb	r2, r3
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	799b      	ldrb	r3, [r3, #6]
 80093a2:	2b09      	cmp	r3, #9
 80093a4:	d80a      	bhi.n	80093bc <dhcp_reboot+0x130>
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	799b      	ldrb	r3, [r3, #6]
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	461a      	mov	r2, r3
 80093ae:	0152      	lsls	r2, r2, #5
 80093b0:	1ad2      	subs	r2, r2, r3
 80093b2:	0092      	lsls	r2, r2, #2
 80093b4:	4413      	add	r3, r2
 80093b6:	00db      	lsls	r3, r3, #3
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	e001      	b.n	80093c0 <dhcp_reboot+0x134>
 80093bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80093c0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80093c2:	89fb      	ldrh	r3, [r7, #14]
 80093c4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80093c8:	4a0a      	ldr	r2, [pc, #40]	; (80093f4 <dhcp_reboot+0x168>)
 80093ca:	fb82 1203 	smull	r1, r2, r2, r3
 80093ce:	1152      	asrs	r2, r2, #5
 80093d0:	17db      	asrs	r3, r3, #31
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80093da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3720      	adds	r7, #32
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bdb0      	pop	{r4, r5, r7, pc}
 80093e6:	bf00      	nop
 80093e8:	2000002c 	.word	0x2000002c
 80093ec:	2000677c 	.word	0x2000677c
 80093f0:	08019590 	.word	0x08019590
 80093f4:	10624dd3 	.word	0x10624dd3

080093f8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80093f8:	b5b0      	push	{r4, r5, r7, lr}
 80093fa:	b08a      	sub	sp, #40	; 0x28
 80093fc:	af02      	add	r7, sp, #8
 80093fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	2b00      	cmp	r3, #0
 800940a:	f000 8084 	beq.w	8009516 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	795b      	ldrb	r3, [r3, #5]
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 8081 	beq.w	800951a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	2200      	movs	r2, #0
 8009422:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	2200      	movs	r2, #0
 8009428:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	2200      	movs	r2, #0
 800942e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	2200      	movs	r2, #0
 8009434:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	2200      	movs	r2, #0
 800943a:	631a      	str	r2, [r3, #48]	; 0x30
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	62da      	str	r2, [r3, #44]	; 0x2c
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	2200      	movs	r2, #0
 8009450:	829a      	strh	r2, [r3, #20]
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	8a9a      	ldrh	r2, [r3, #20]
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	825a      	strh	r2, [r3, #18]
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	8a5a      	ldrh	r2, [r3, #18]
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	821a      	strh	r2, [r3, #16]
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	8a1a      	ldrh	r2, [r3, #16]
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fdf8 	bl	800a060 <dhcp_supplied_address>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d03b      	beq.n	80094ee <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8009476:	f107 030e 	add.w	r3, r7, #14
 800947a:	2207      	movs	r2, #7
 800947c:	69f9      	ldr	r1, [r7, #28]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fcea 	bl	8009e58 <dhcp_create_msg>
 8009484:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d030      	beq.n	80094ee <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8009492:	89f8      	ldrh	r0, [r7, #14]
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800949a:	2304      	movs	r3, #4
 800949c:	2236      	movs	r2, #54	; 0x36
 800949e:	f000 f86b 	bl	8009578 <dhcp_option>
 80094a2:	4603      	mov	r3, r0
 80094a4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80094a6:	89fc      	ldrh	r4, [r7, #14]
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	4618      	mov	r0, r3
 80094b2:	f003 f820 	bl	800c4f6 <lwip_htonl>
 80094b6:	4603      	mov	r3, r0
 80094b8:	461a      	mov	r2, r3
 80094ba:	4629      	mov	r1, r5
 80094bc:	4620      	mov	r0, r4
 80094be:	f000 f8e7 	bl	8009690 <dhcp_option_long>
 80094c2:	4603      	mov	r3, r0
 80094c4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80094c6:	89f8      	ldrh	r0, [r7, #14]
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	33f0      	adds	r3, #240	; 0xf0
 80094cc:	69ba      	ldr	r2, [r7, #24]
 80094ce:	4619      	mov	r1, r3
 80094d0:	f000 fd98 	bl	800a004 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80094d4:	4b13      	ldr	r3, [pc, #76]	; (8009524 <dhcp_release_and_stop+0x12c>)
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	f107 0210 	add.w	r2, r7, #16
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	2343      	movs	r3, #67	; 0x43
 80094e2:	69b9      	ldr	r1, [r7, #24]
 80094e4:	f00a fd8e 	bl	8014004 <udp_sendto_if>
      pbuf_free(p_out);
 80094e8:	69b8      	ldr	r0, [r7, #24]
 80094ea:	f004 fb79 	bl	800dbe0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80094ee:	4b0e      	ldr	r3, [pc, #56]	; (8009528 <dhcp_release_and_stop+0x130>)
 80094f0:	4a0d      	ldr	r2, [pc, #52]	; (8009528 <dhcp_release_and_stop+0x130>)
 80094f2:	490d      	ldr	r1, [pc, #52]	; (8009528 <dhcp_release_and_stop+0x130>)
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f003 ff3d 	bl	800d374 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80094fa:	2100      	movs	r1, #0
 80094fc:	69f8      	ldr	r0, [r7, #28]
 80094fe:	f000 f820 	bl	8009542 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	791b      	ldrb	r3, [r3, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d008      	beq.n	800951c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800950a:	f7fe ffbf 	bl	800848c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	2200      	movs	r2, #0
 8009512:	711a      	strb	r2, [r3, #4]
 8009514:	e002      	b.n	800951c <dhcp_release_and_stop+0x124>
    return;
 8009516:	bf00      	nop
 8009518:	e000      	b.n	800951c <dhcp_release_and_stop+0x124>
    return;
 800951a:	bf00      	nop
  }
}
 800951c:	3720      	adds	r7, #32
 800951e:	46bd      	mov	sp, r7
 8009520:	bdb0      	pop	{r4, r5, r7, pc}
 8009522:	bf00      	nop
 8009524:	2000677c 	.word	0x2000677c
 8009528:	0801958c 	.word	0x0801958c

0800952c <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7ff ff5f 	bl	80093f8 <dhcp_release_and_stop>
}
 800953a:	bf00      	nop
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8009542:	b480      	push	{r7}
 8009544:	b083      	sub	sp, #12
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	460b      	mov	r3, r1
 800954c:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	795b      	ldrb	r3, [r3, #5]
 8009552:	78fa      	ldrb	r2, [r7, #3]
 8009554:	429a      	cmp	r2, r3
 8009556:	d008      	beq.n	800956a <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	78fa      	ldrb	r2, [r7, #3]
 800955c:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	811a      	strh	r2, [r3, #8]
  }
}
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
	...

08009578 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6039      	str	r1, [r7, #0]
 8009580:	4611      	mov	r1, r2
 8009582:	461a      	mov	r2, r3
 8009584:	4603      	mov	r3, r0
 8009586:	80fb      	strh	r3, [r7, #6]
 8009588:	460b      	mov	r3, r1
 800958a:	717b      	strb	r3, [r7, #5]
 800958c:	4613      	mov	r3, r2
 800958e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8009590:	88fa      	ldrh	r2, [r7, #6]
 8009592:	793b      	ldrb	r3, [r7, #4]
 8009594:	4413      	add	r3, r2
 8009596:	3302      	adds	r3, #2
 8009598:	2b44      	cmp	r3, #68	; 0x44
 800959a:	d906      	bls.n	80095aa <dhcp_option+0x32>
 800959c:	4b0d      	ldr	r3, [pc, #52]	; (80095d4 <dhcp_option+0x5c>)
 800959e:	f240 529a 	movw	r2, #1434	; 0x59a
 80095a2:	490d      	ldr	r1, [pc, #52]	; (80095d8 <dhcp_option+0x60>)
 80095a4:	480d      	ldr	r0, [pc, #52]	; (80095dc <dhcp_option+0x64>)
 80095a6:	f00b ff95 	bl	80154d4 <iprintf>
  options[options_out_len++] = option_type;
 80095aa:	88fb      	ldrh	r3, [r7, #6]
 80095ac:	1c5a      	adds	r2, r3, #1
 80095ae:	80fa      	strh	r2, [r7, #6]
 80095b0:	461a      	mov	r2, r3
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	4413      	add	r3, r2
 80095b6:	797a      	ldrb	r2, [r7, #5]
 80095b8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80095ba:	88fb      	ldrh	r3, [r7, #6]
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	80fa      	strh	r2, [r7, #6]
 80095c0:	461a      	mov	r2, r3
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	4413      	add	r3, r2
 80095c6:	793a      	ldrb	r2, [r7, #4]
 80095c8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80095ca:	88fb      	ldrh	r3, [r7, #6]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	08018cfc 	.word	0x08018cfc
 80095d8:	08018ec8 	.word	0x08018ec8
 80095dc:	08018d94 	.word	0x08018d94

080095e0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	4603      	mov	r3, r0
 80095e8:	6039      	str	r1, [r7, #0]
 80095ea:	80fb      	strh	r3, [r7, #6]
 80095ec:	4613      	mov	r3, r2
 80095ee:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80095f0:	88fb      	ldrh	r3, [r7, #6]
 80095f2:	2b43      	cmp	r3, #67	; 0x43
 80095f4:	d906      	bls.n	8009604 <dhcp_option_byte+0x24>
 80095f6:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <dhcp_option_byte+0x40>)
 80095f8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80095fc:	4909      	ldr	r1, [pc, #36]	; (8009624 <dhcp_option_byte+0x44>)
 80095fe:	480a      	ldr	r0, [pc, #40]	; (8009628 <dhcp_option_byte+0x48>)
 8009600:	f00b ff68 	bl	80154d4 <iprintf>
  options[options_out_len++] = value;
 8009604:	88fb      	ldrh	r3, [r7, #6]
 8009606:	1c5a      	adds	r2, r3, #1
 8009608:	80fa      	strh	r2, [r7, #6]
 800960a:	461a      	mov	r2, r3
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	4413      	add	r3, r2
 8009610:	797a      	ldrb	r2, [r7, #5]
 8009612:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8009614:	88fb      	ldrh	r3, [r7, #6]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	08018cfc 	.word	0x08018cfc
 8009624:	08018f0c 	.word	0x08018f0c
 8009628:	08018d94 	.word	0x08018d94

0800962c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	6039      	str	r1, [r7, #0]
 8009636:	80fb      	strh	r3, [r7, #6]
 8009638:	4613      	mov	r3, r2
 800963a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800963c:	88fb      	ldrh	r3, [r7, #6]
 800963e:	3302      	adds	r3, #2
 8009640:	2b44      	cmp	r3, #68	; 0x44
 8009642:	d906      	bls.n	8009652 <dhcp_option_short+0x26>
 8009644:	4b0f      	ldr	r3, [pc, #60]	; (8009684 <dhcp_option_short+0x58>)
 8009646:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800964a:	490f      	ldr	r1, [pc, #60]	; (8009688 <dhcp_option_short+0x5c>)
 800964c:	480f      	ldr	r0, [pc, #60]	; (800968c <dhcp_option_short+0x60>)
 800964e:	f00b ff41 	bl	80154d4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8009652:	88bb      	ldrh	r3, [r7, #4]
 8009654:	0a1b      	lsrs	r3, r3, #8
 8009656:	b29a      	uxth	r2, r3
 8009658:	88fb      	ldrh	r3, [r7, #6]
 800965a:	1c59      	adds	r1, r3, #1
 800965c:	80f9      	strh	r1, [r7, #6]
 800965e:	4619      	mov	r1, r3
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	440b      	add	r3, r1
 8009664:	b2d2      	uxtb	r2, r2
 8009666:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8009668:	88fb      	ldrh	r3, [r7, #6]
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	80fa      	strh	r2, [r7, #6]
 800966e:	461a      	mov	r2, r3
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	4413      	add	r3, r2
 8009674:	88ba      	ldrh	r2, [r7, #4]
 8009676:	b2d2      	uxtb	r2, r2
 8009678:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800967a:	88fb      	ldrh	r3, [r7, #6]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	08018cfc 	.word	0x08018cfc
 8009688:	08018f44 	.word	0x08018f44
 800968c:	08018d94 	.word	0x08018d94

08009690 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
 800969c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800969e:	89fb      	ldrh	r3, [r7, #14]
 80096a0:	3304      	adds	r3, #4
 80096a2:	2b44      	cmp	r3, #68	; 0x44
 80096a4:	d906      	bls.n	80096b4 <dhcp_option_long+0x24>
 80096a6:	4b19      	ldr	r3, [pc, #100]	; (800970c <dhcp_option_long+0x7c>)
 80096a8:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80096ac:	4918      	ldr	r1, [pc, #96]	; (8009710 <dhcp_option_long+0x80>)
 80096ae:	4819      	ldr	r0, [pc, #100]	; (8009714 <dhcp_option_long+0x84>)
 80096b0:	f00b ff10 	bl	80154d4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	0e1a      	lsrs	r2, r3, #24
 80096b8:	89fb      	ldrh	r3, [r7, #14]
 80096ba:	1c59      	adds	r1, r3, #1
 80096bc:	81f9      	strh	r1, [r7, #14]
 80096be:	4619      	mov	r1, r3
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	440b      	add	r3, r1
 80096c4:	b2d2      	uxtb	r2, r2
 80096c6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	0c1a      	lsrs	r2, r3, #16
 80096cc:	89fb      	ldrh	r3, [r7, #14]
 80096ce:	1c59      	adds	r1, r3, #1
 80096d0:	81f9      	strh	r1, [r7, #14]
 80096d2:	4619      	mov	r1, r3
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	440b      	add	r3, r1
 80096d8:	b2d2      	uxtb	r2, r2
 80096da:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	0a1a      	lsrs	r2, r3, #8
 80096e0:	89fb      	ldrh	r3, [r7, #14]
 80096e2:	1c59      	adds	r1, r3, #1
 80096e4:	81f9      	strh	r1, [r7, #14]
 80096e6:	4619      	mov	r1, r3
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	440b      	add	r3, r1
 80096ec:	b2d2      	uxtb	r2, r2
 80096ee:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80096f0:	89fb      	ldrh	r3, [r7, #14]
 80096f2:	1c5a      	adds	r2, r3, #1
 80096f4:	81fa      	strh	r2, [r7, #14]
 80096f6:	461a      	mov	r2, r3
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	4413      	add	r3, r2
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	b2d2      	uxtb	r2, r2
 8009700:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8009702:	89fb      	ldrh	r3, [r7, #14]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	08018cfc 	.word	0x08018cfc
 8009710:	08018f80 	.word	0x08018f80
 8009714:	08018d94 	.word	0x08018d94

08009718 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b090      	sub	sp, #64	; 0x40
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800972a:	2208      	movs	r2, #8
 800972c:	2100      	movs	r1, #0
 800972e:	48be      	ldr	r0, [pc, #760]	; (8009a28 <dhcp_parse_reply+0x310>)
 8009730:	f00b f9c3 	bl	8014aba <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	895b      	ldrh	r3, [r3, #10]
 8009738:	2b2b      	cmp	r3, #43	; 0x2b
 800973a:	d802      	bhi.n	8009742 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800973c:	f06f 0301 	mvn.w	r3, #1
 8009740:	e2a8      	b.n	8009c94 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8009748:	23f0      	movs	r3, #240	; 0xf0
 800974a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	891b      	ldrh	r3, [r3, #8]
 8009750:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8009756:	e00c      	b.n	8009772 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8009758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975a:	895b      	ldrh	r3, [r3, #10]
 800975c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8009762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009764:	895b      	ldrh	r3, [r3, #10]
 8009766:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800976c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	2b00      	cmp	r3, #0
 8009776:	d004      	beq.n	8009782 <dhcp_parse_reply+0x6a>
 8009778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977a:	895b      	ldrh	r3, [r3, #10]
 800977c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800977e:	429a      	cmp	r2, r3
 8009780:	d2ea      	bcs.n	8009758 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	2b00      	cmp	r3, #0
 8009786:	d102      	bne.n	800978e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8009788:	f06f 0301 	mvn.w	r3, #1
 800978c:	e282      	b.n	8009c94 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 800978e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009790:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8009792:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009794:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8009796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800979c:	e23a      	b.n	8009c14 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 800979e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80097a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80097a2:	4413      	add	r3, r2
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80097a8:	2300      	movs	r3, #0
 80097aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80097ae:	f04f 33ff 	mov.w	r3, #4294967295
 80097b2:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80097b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80097b6:	3302      	adds	r3, #2
 80097b8:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80097ba:	8bfa      	ldrh	r2, [r7, #30]
 80097bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80097be:	429a      	cmp	r2, r3
 80097c0:	d202      	bcs.n	80097c8 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80097c2:	f06f 0301 	mvn.w	r3, #1
 80097c6:	e265      	b.n	8009c94 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80097c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80097ca:	3301      	adds	r3, #1
 80097cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ce:	8952      	ldrh	r2, [r2, #10]
 80097d0:	4293      	cmp	r3, r2
 80097d2:	da07      	bge.n	80097e4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80097d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80097d6:	3301      	adds	r3, #1
 80097d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80097da:	4413      	add	r3, r2
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80097e2:	e00b      	b.n	80097fc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80097e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d004      	beq.n	80097f6 <dhcp_parse_reply+0xde>
 80097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	e000      	b.n	80097f8 <dhcp_parse_reply+0xe0>
 80097f6:	2300      	movs	r3, #0
 80097f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80097fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009800:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8009804:	7dfb      	ldrb	r3, [r7, #23]
 8009806:	2b3b      	cmp	r3, #59	; 0x3b
 8009808:	f200 812d 	bhi.w	8009a66 <dhcp_parse_reply+0x34e>
 800980c:	a201      	add	r2, pc, #4	; (adr r2, 8009814 <dhcp_parse_reply+0xfc>)
 800980e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009812:	bf00      	nop
 8009814:	08009905 	.word	0x08009905
 8009818:	08009915 	.word	0x08009915
 800981c:	08009a67 	.word	0x08009a67
 8009820:	08009937 	.word	0x08009937
 8009824:	08009a67 	.word	0x08009a67
 8009828:	08009a67 	.word	0x08009a67
 800982c:	08009a67 	.word	0x08009a67
 8009830:	08009a67 	.word	0x08009a67
 8009834:	08009a67 	.word	0x08009a67
 8009838:	08009a67 	.word	0x08009a67
 800983c:	08009a67 	.word	0x08009a67
 8009840:	08009a67 	.word	0x08009a67
 8009844:	08009a67 	.word	0x08009a67
 8009848:	08009a67 	.word	0x08009a67
 800984c:	08009a67 	.word	0x08009a67
 8009850:	08009a67 	.word	0x08009a67
 8009854:	08009a67 	.word	0x08009a67
 8009858:	08009a67 	.word	0x08009a67
 800985c:	08009a67 	.word	0x08009a67
 8009860:	08009a67 	.word	0x08009a67
 8009864:	08009a67 	.word	0x08009a67
 8009868:	08009a67 	.word	0x08009a67
 800986c:	08009a67 	.word	0x08009a67
 8009870:	08009a67 	.word	0x08009a67
 8009874:	08009a67 	.word	0x08009a67
 8009878:	08009a67 	.word	0x08009a67
 800987c:	08009a67 	.word	0x08009a67
 8009880:	08009a67 	.word	0x08009a67
 8009884:	08009a67 	.word	0x08009a67
 8009888:	08009a67 	.word	0x08009a67
 800988c:	08009a67 	.word	0x08009a67
 8009890:	08009a67 	.word	0x08009a67
 8009894:	08009a67 	.word	0x08009a67
 8009898:	08009a67 	.word	0x08009a67
 800989c:	08009a67 	.word	0x08009a67
 80098a0:	08009a67 	.word	0x08009a67
 80098a4:	08009a67 	.word	0x08009a67
 80098a8:	08009a67 	.word	0x08009a67
 80098ac:	08009a67 	.word	0x08009a67
 80098b0:	08009a67 	.word	0x08009a67
 80098b4:	08009a67 	.word	0x08009a67
 80098b8:	08009a67 	.word	0x08009a67
 80098bc:	08009a67 	.word	0x08009a67
 80098c0:	08009a67 	.word	0x08009a67
 80098c4:	08009a67 	.word	0x08009a67
 80098c8:	08009a67 	.word	0x08009a67
 80098cc:	08009a67 	.word	0x08009a67
 80098d0:	08009a67 	.word	0x08009a67
 80098d4:	08009a67 	.word	0x08009a67
 80098d8:	08009a67 	.word	0x08009a67
 80098dc:	08009a67 	.word	0x08009a67
 80098e0:	08009963 	.word	0x08009963
 80098e4:	08009985 	.word	0x08009985
 80098e8:	080099c1 	.word	0x080099c1
 80098ec:	080099e3 	.word	0x080099e3
 80098f0:	08009a67 	.word	0x08009a67
 80098f4:	08009a67 	.word	0x08009a67
 80098f8:	08009a67 	.word	0x08009a67
 80098fc:	08009a05 	.word	0x08009a05
 8009900:	08009a45 	.word	0x08009a45
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800990a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800990e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8009912:	e0ac      	b.n	8009a6e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009918:	2b04      	cmp	r3, #4
 800991a:	d009      	beq.n	8009930 <dhcp_parse_reply+0x218>
 800991c:	4b43      	ldr	r3, [pc, #268]	; (8009a2c <dhcp_parse_reply+0x314>)
 800991e:	f240 622e 	movw	r2, #1582	; 0x62e
 8009922:	4943      	ldr	r1, [pc, #268]	; (8009a30 <dhcp_parse_reply+0x318>)
 8009924:	4843      	ldr	r0, [pc, #268]	; (8009a34 <dhcp_parse_reply+0x31c>)
 8009926:	f00b fdd5 	bl	80154d4 <iprintf>
 800992a:	f06f 0305 	mvn.w	r3, #5
 800992e:	e1b1      	b.n	8009c94 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8009930:	2306      	movs	r3, #6
 8009932:	623b      	str	r3, [r7, #32]
        break;
 8009934:	e09b      	b.n	8009a6e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8009936:	2304      	movs	r3, #4
 8009938:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800993c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009940:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009944:	429a      	cmp	r2, r3
 8009946:	d209      	bcs.n	800995c <dhcp_parse_reply+0x244>
 8009948:	4b38      	ldr	r3, [pc, #224]	; (8009a2c <dhcp_parse_reply+0x314>)
 800994a:	f240 6233 	movw	r2, #1587	; 0x633
 800994e:	493a      	ldr	r1, [pc, #232]	; (8009a38 <dhcp_parse_reply+0x320>)
 8009950:	4838      	ldr	r0, [pc, #224]	; (8009a34 <dhcp_parse_reply+0x31c>)
 8009952:	f00b fdbf 	bl	80154d4 <iprintf>
 8009956:	f06f 0305 	mvn.w	r3, #5
 800995a:	e19b      	b.n	8009c94 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800995c:	2307      	movs	r3, #7
 800995e:	623b      	str	r3, [r7, #32]
        break;
 8009960:	e085      	b.n	8009a6e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009966:	2b04      	cmp	r3, #4
 8009968:	d009      	beq.n	800997e <dhcp_parse_reply+0x266>
 800996a:	4b30      	ldr	r3, [pc, #192]	; (8009a2c <dhcp_parse_reply+0x314>)
 800996c:	f240 6241 	movw	r2, #1601	; 0x641
 8009970:	492f      	ldr	r1, [pc, #188]	; (8009a30 <dhcp_parse_reply+0x318>)
 8009972:	4830      	ldr	r0, [pc, #192]	; (8009a34 <dhcp_parse_reply+0x31c>)
 8009974:	f00b fdae 	bl	80154d4 <iprintf>
 8009978:	f06f 0305 	mvn.w	r3, #5
 800997c:	e18a      	b.n	8009c94 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800997e:	2303      	movs	r3, #3
 8009980:	623b      	str	r3, [r7, #32]
        break;
 8009982:	e074      	b.n	8009a6e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8009984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009988:	2b01      	cmp	r3, #1
 800998a:	d009      	beq.n	80099a0 <dhcp_parse_reply+0x288>
 800998c:	4b27      	ldr	r3, [pc, #156]	; (8009a2c <dhcp_parse_reply+0x314>)
 800998e:	f240 624f 	movw	r2, #1615	; 0x64f
 8009992:	492a      	ldr	r1, [pc, #168]	; (8009a3c <dhcp_parse_reply+0x324>)
 8009994:	4827      	ldr	r0, [pc, #156]	; (8009a34 <dhcp_parse_reply+0x31c>)
 8009996:	f00b fd9d 	bl	80154d4 <iprintf>
 800999a:	f06f 0305 	mvn.w	r3, #5
 800999e:	e179      	b.n	8009c94 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80099a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80099a2:	2bf0      	cmp	r3, #240	; 0xf0
 80099a4:	d009      	beq.n	80099ba <dhcp_parse_reply+0x2a2>
 80099a6:	4b21      	ldr	r3, [pc, #132]	; (8009a2c <dhcp_parse_reply+0x314>)
 80099a8:	f240 6251 	movw	r2, #1617	; 0x651
 80099ac:	4924      	ldr	r1, [pc, #144]	; (8009a40 <dhcp_parse_reply+0x328>)
 80099ae:	4821      	ldr	r0, [pc, #132]	; (8009a34 <dhcp_parse_reply+0x31c>)
 80099b0:	f00b fd90 	bl	80154d4 <iprintf>
 80099b4:	f06f 0305 	mvn.w	r3, #5
 80099b8:	e16c      	b.n	8009c94 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80099ba:	2300      	movs	r3, #0
 80099bc:	623b      	str	r3, [r7, #32]
        break;
 80099be:	e056      	b.n	8009a6e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80099c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d009      	beq.n	80099dc <dhcp_parse_reply+0x2c4>
 80099c8:	4b18      	ldr	r3, [pc, #96]	; (8009a2c <dhcp_parse_reply+0x314>)
 80099ca:	f240 6255 	movw	r2, #1621	; 0x655
 80099ce:	491b      	ldr	r1, [pc, #108]	; (8009a3c <dhcp_parse_reply+0x324>)
 80099d0:	4818      	ldr	r0, [pc, #96]	; (8009a34 <dhcp_parse_reply+0x31c>)
 80099d2:	f00b fd7f 	bl	80154d4 <iprintf>
 80099d6:	f06f 0305 	mvn.w	r3, #5
 80099da:	e15b      	b.n	8009c94 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80099dc:	2301      	movs	r3, #1
 80099de:	623b      	str	r3, [r7, #32]
        break;
 80099e0:	e045      	b.n	8009a6e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80099e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099e6:	2b04      	cmp	r3, #4
 80099e8:	d009      	beq.n	80099fe <dhcp_parse_reply+0x2e6>
 80099ea:	4b10      	ldr	r3, [pc, #64]	; (8009a2c <dhcp_parse_reply+0x314>)
 80099ec:	f240 6259 	movw	r2, #1625	; 0x659
 80099f0:	490f      	ldr	r1, [pc, #60]	; (8009a30 <dhcp_parse_reply+0x318>)
 80099f2:	4810      	ldr	r0, [pc, #64]	; (8009a34 <dhcp_parse_reply+0x31c>)
 80099f4:	f00b fd6e 	bl	80154d4 <iprintf>
 80099f8:	f06f 0305 	mvn.w	r3, #5
 80099fc:	e14a      	b.n	8009c94 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80099fe:	2302      	movs	r3, #2
 8009a00:	623b      	str	r3, [r7, #32]
        break;
 8009a02:	e034      	b.n	8009a6e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	d009      	beq.n	8009a20 <dhcp_parse_reply+0x308>
 8009a0c:	4b07      	ldr	r3, [pc, #28]	; (8009a2c <dhcp_parse_reply+0x314>)
 8009a0e:	f240 625d 	movw	r2, #1629	; 0x65d
 8009a12:	4907      	ldr	r1, [pc, #28]	; (8009a30 <dhcp_parse_reply+0x318>)
 8009a14:	4807      	ldr	r0, [pc, #28]	; (8009a34 <dhcp_parse_reply+0x31c>)
 8009a16:	f00b fd5d 	bl	80154d4 <iprintf>
 8009a1a:	f06f 0305 	mvn.w	r3, #5
 8009a1e:	e139      	b.n	8009c94 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8009a20:	2304      	movs	r3, #4
 8009a22:	623b      	str	r3, [r7, #32]
        break;
 8009a24:	e023      	b.n	8009a6e <dhcp_parse_reply+0x356>
 8009a26:	bf00      	nop
 8009a28:	20006a5c 	.word	0x20006a5c
 8009a2c:	08018cfc 	.word	0x08018cfc
 8009a30:	08018fbc 	.word	0x08018fbc
 8009a34:	08018d94 	.word	0x08018d94
 8009a38:	08018fc8 	.word	0x08018fc8
 8009a3c:	08018fdc 	.word	0x08018fdc
 8009a40:	08018fe8 	.word	0x08018fe8
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a48:	2b04      	cmp	r3, #4
 8009a4a:	d009      	beq.n	8009a60 <dhcp_parse_reply+0x348>
 8009a4c:	4b93      	ldr	r3, [pc, #588]	; (8009c9c <dhcp_parse_reply+0x584>)
 8009a4e:	f240 6261 	movw	r2, #1633	; 0x661
 8009a52:	4993      	ldr	r1, [pc, #588]	; (8009ca0 <dhcp_parse_reply+0x588>)
 8009a54:	4893      	ldr	r0, [pc, #588]	; (8009ca4 <dhcp_parse_reply+0x58c>)
 8009a56:	f00b fd3d 	bl	80154d4 <iprintf>
 8009a5a:	f06f 0305 	mvn.w	r3, #5
 8009a5e:	e119      	b.n	8009c94 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8009a60:	2305      	movs	r3, #5
 8009a62:	623b      	str	r3, [r7, #32]
        break;
 8009a64:	e003      	b.n	8009a6e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8009a6c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8009a6e:	7dfb      	ldrb	r3, [r7, #23]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d103      	bne.n	8009a7c <dhcp_parse_reply+0x364>
      offset++;
 8009a74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009a76:	3301      	adds	r3, #1
 8009a78:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009a7a:	e0a1      	b.n	8009bc0 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8009a7c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a82:	4413      	add	r3, r2
 8009a84:	3302      	adds	r3, #2
 8009a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a8a:	db02      	blt.n	8009a92 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8009a8c:	f06f 0301 	mvn.w	r3, #1
 8009a90:	e100      	b.n	8009c94 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8009a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009a9a:	4413      	add	r3, r2
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	3302      	adds	r3, #2
 8009aa0:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8009aa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 808a 	beq.w	8009bc0 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8009ab0:	6a3b      	ldr	r3, [r7, #32]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	db02      	blt.n	8009abc <dhcp_parse_reply+0x3a4>
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	2b07      	cmp	r3, #7
 8009aba:	dd06      	ble.n	8009aca <dhcp_parse_reply+0x3b2>
 8009abc:	4b77      	ldr	r3, [pc, #476]	; (8009c9c <dhcp_parse_reply+0x584>)
 8009abe:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8009ac2:	4979      	ldr	r1, [pc, #484]	; (8009ca8 <dhcp_parse_reply+0x590>)
 8009ac4:	4877      	ldr	r0, [pc, #476]	; (8009ca4 <dhcp_parse_reply+0x58c>)
 8009ac6:	f00b fd05 	bl	80154d4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8009aca:	4a78      	ldr	r2, [pc, #480]	; (8009cac <dhcp_parse_reply+0x594>)
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	4413      	add	r3, r2
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d174      	bne.n	8009bc0 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8009ad6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ada:	2b04      	cmp	r3, #4
 8009adc:	bf28      	it	cs
 8009ade:	2304      	movcs	r3, #4
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8009ae4:	8bfb      	ldrh	r3, [r7, #30]
 8009ae6:	8aba      	ldrh	r2, [r7, #20]
 8009ae8:	f107 0108 	add.w	r1, r7, #8
 8009aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aee:	f004 fa7d 	bl	800dfec <pbuf_copy_partial>
 8009af2:	4603      	mov	r3, r0
 8009af4:	461a      	mov	r2, r3
 8009af6:	8abb      	ldrh	r3, [r7, #20]
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d002      	beq.n	8009b02 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8009afc:	f06f 0301 	mvn.w	r3, #1
 8009b00:	e0c8      	b.n	8009c94 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8009b02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b06:	2b04      	cmp	r3, #4
 8009b08:	d933      	bls.n	8009b72 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8009b0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b0e:	f003 0303 	and.w	r3, r3, #3
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d009      	beq.n	8009b2c <dhcp_parse_reply+0x414>
 8009b18:	4b60      	ldr	r3, [pc, #384]	; (8009c9c <dhcp_parse_reply+0x584>)
 8009b1a:	f240 6281 	movw	r2, #1665	; 0x681
 8009b1e:	4964      	ldr	r1, [pc, #400]	; (8009cb0 <dhcp_parse_reply+0x598>)
 8009b20:	4860      	ldr	r0, [pc, #384]	; (8009ca4 <dhcp_parse_reply+0x58c>)
 8009b22:	f00b fcd7 	bl	80154d4 <iprintf>
 8009b26:	f06f 0305 	mvn.w	r3, #5
 8009b2a:	e0b3      	b.n	8009c94 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8009b2c:	4a5f      	ldr	r2, [pc, #380]	; (8009cac <dhcp_parse_reply+0x594>)
 8009b2e:	6a3b      	ldr	r3, [r7, #32]
 8009b30:	4413      	add	r3, r2
 8009b32:	2201      	movs	r2, #1
 8009b34:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f002 fcdc 	bl	800c4f6 <lwip_htonl>
 8009b3e:	4601      	mov	r1, r0
 8009b40:	4a5c      	ldr	r2, [pc, #368]	; (8009cb4 <dhcp_parse_reply+0x59c>)
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8009b48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b4c:	3b04      	subs	r3, #4
 8009b4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8009b52:	8bfb      	ldrh	r3, [r7, #30]
 8009b54:	3304      	adds	r3, #4
 8009b56:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8009b58:	8a7a      	ldrh	r2, [r7, #18]
 8009b5a:	8bfb      	ldrh	r3, [r7, #30]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d202      	bcs.n	8009b66 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8009b60:	f06f 0301 	mvn.w	r3, #1
 8009b64:	e096      	b.n	8009c94 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8009b66:	8a7b      	ldrh	r3, [r7, #18]
 8009b68:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8009b70:	e79e      	b.n	8009ab0 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8009b72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b76:	2b04      	cmp	r3, #4
 8009b78:	d106      	bne.n	8009b88 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f002 fcba 	bl	800c4f6 <lwip_htonl>
 8009b82:	4603      	mov	r3, r0
 8009b84:	60bb      	str	r3, [r7, #8]
 8009b86:	e011      	b.n	8009bac <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8009b88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d009      	beq.n	8009ba4 <dhcp_parse_reply+0x48c>
 8009b90:	4b42      	ldr	r3, [pc, #264]	; (8009c9c <dhcp_parse_reply+0x584>)
 8009b92:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8009b96:	4948      	ldr	r1, [pc, #288]	; (8009cb8 <dhcp_parse_reply+0x5a0>)
 8009b98:	4842      	ldr	r0, [pc, #264]	; (8009ca4 <dhcp_parse_reply+0x58c>)
 8009b9a:	f00b fc9b 	bl	80154d4 <iprintf>
 8009b9e:	f06f 0305 	mvn.w	r3, #5
 8009ba2:	e077      	b.n	8009c94 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8009ba4:	f107 0308 	add.w	r3, r7, #8
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8009bac:	4a3f      	ldr	r2, [pc, #252]	; (8009cac <dhcp_parse_reply+0x594>)
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	493e      	ldr	r1, [pc, #248]	; (8009cb4 <dhcp_parse_reply+0x59c>)
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc2:	895b      	ldrh	r3, [r3, #10]
 8009bc4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d324      	bcc.n	8009c14 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	895b      	ldrh	r3, [r3, #10]
 8009bce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd6:	895b      	ldrh	r3, [r3, #10]
 8009bd8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8009bde:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009be0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d213      	bcs.n	8009c0e <dhcp_parse_reply+0x4f6>
        q = q->next;
 8009be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8009bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d109      	bne.n	8009c06 <dhcp_parse_reply+0x4ee>
 8009bf2:	4b2a      	ldr	r3, [pc, #168]	; (8009c9c <dhcp_parse_reply+0x584>)
 8009bf4:	f240 629d 	movw	r2, #1693	; 0x69d
 8009bf8:	4930      	ldr	r1, [pc, #192]	; (8009cbc <dhcp_parse_reply+0x5a4>)
 8009bfa:	482a      	ldr	r0, [pc, #168]	; (8009ca4 <dhcp_parse_reply+0x58c>)
 8009bfc:	f00b fc6a 	bl	80154d4 <iprintf>
 8009c00:	f06f 0305 	mvn.w	r3, #5
 8009c04:	e046      	b.n	8009c94 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c0c:	e002      	b.n	8009c14 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8009c0e:	f06f 0301 	mvn.w	r3, #1
 8009c12:	e03f      	b.n	8009c94 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8009c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00a      	beq.n	8009c30 <dhcp_parse_reply+0x518>
 8009c1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009c1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d206      	bcs.n	8009c30 <dhcp_parse_reply+0x518>
 8009c22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009c24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c26:	4413      	add	r3, r2
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	2bff      	cmp	r3, #255	; 0xff
 8009c2c:	f47f adb7 	bne.w	800979e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8009c30:	4b1e      	ldr	r3, [pc, #120]	; (8009cac <dhcp_parse_reply+0x594>)
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d018      	beq.n	8009c6a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009c38:	4b1e      	ldr	r3, [pc, #120]	; (8009cb4 <dhcp_parse_reply+0x59c>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009c3e:	4b1b      	ldr	r3, [pc, #108]	; (8009cac <dhcp_parse_reply+0x594>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d102      	bne.n	8009c50 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c4e:	e00c      	b.n	8009c6a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d102      	bne.n	8009c5c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8009c56:	2301      	movs	r3, #1
 8009c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c5a:	e006      	b.n	8009c6a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2b03      	cmp	r3, #3
 8009c60:	d103      	bne.n	8009c6a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8009c62:	2301      	movs	r3, #1
 8009c64:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8009c66:	2301      	movs	r3, #1
 8009c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8009c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d006      	beq.n	8009c7e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8009c70:	2300      	movs	r3, #0
 8009c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8009c74:	236c      	movs	r3, #108	; 0x6c
 8009c76:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8009c78:	23ec      	movs	r3, #236	; 0xec
 8009c7a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8009c7c:	e569      	b.n	8009752 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8009c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d006      	beq.n	8009c92 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8009c84:	2300      	movs	r3, #0
 8009c86:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8009c88:	232c      	movs	r3, #44	; 0x2c
 8009c8a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8009c8c:	236c      	movs	r3, #108	; 0x6c
 8009c8e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8009c90:	e55f      	b.n	8009752 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3740      	adds	r7, #64	; 0x40
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	08018cfc 	.word	0x08018cfc
 8009ca0:	08018fbc 	.word	0x08018fbc
 8009ca4:	08018d94 	.word	0x08018d94
 8009ca8:	08019000 	.word	0x08019000
 8009cac:	20006a5c 	.word	0x20006a5c
 8009cb0:	08019014 	.word	0x08019014
 8009cb4:	20006a64 	.word	0x20006a64
 8009cb8:	0801902c 	.word	0x0801902c
 8009cbc:	08019040 	.word	0x08019040

08009cc0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b08a      	sub	sp, #40	; 0x28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
 8009ccc:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8009cce:	4b5f      	ldr	r3, [pc, #380]	; (8009e4c <dhcp_recv+0x18c>)
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 809d 	beq.w	8009e22 <dhcp_recv+0x162>
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	791b      	ldrb	r3, [r3, #4]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f000 8098 	beq.w	8009e22 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	895b      	ldrh	r3, [r3, #10]
 8009cf6:	2b2b      	cmp	r3, #43	; 0x2b
 8009cf8:	f240 8095 	bls.w	8009e26 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	f040 8092 	bne.w	8009e2a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8009d06:	2300      	movs	r3, #0
 8009d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d0c:	e012      	b.n	8009d34 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8009d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d12:	6a3a      	ldr	r2, [r7, #32]
 8009d14:	4413      	add	r3, r2
 8009d16:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8009d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d1e:	69b9      	ldr	r1, [r7, #24]
 8009d20:	440b      	add	r3, r1
 8009d22:	7f1b      	ldrb	r3, [r3, #28]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	f040 8082 	bne.w	8009e2e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8009d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d2e:	3301      	adds	r3, #1
 8009d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d203      	bcs.n	8009d4a <dhcp_recv+0x8a>
 8009d42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d46:	2b05      	cmp	r3, #5
 8009d48:	d9e1      	bls.n	8009d0e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f002 fbd1 	bl	800c4f6 <lwip_htonl>
 8009d54:	4602      	mov	r2, r0
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d169      	bne.n	8009e32 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8009d5e:	69f9      	ldr	r1, [r7, #28]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff fcd9 	bl	8009718 <dhcp_parse_reply>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d164      	bne.n	8009e36 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8009d6c:	4b38      	ldr	r3, [pc, #224]	; (8009e50 <dhcp_recv+0x190>)
 8009d6e:	785b      	ldrb	r3, [r3, #1]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d062      	beq.n	8009e3a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8009d7a:	4b36      	ldr	r3, [pc, #216]	; (8009e54 <dhcp_recv+0x194>)
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8009d80:	7cfb      	ldrb	r3, [r7, #19]
 8009d82:	2b05      	cmp	r3, #5
 8009d84:	d12a      	bne.n	8009ddc <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	795b      	ldrb	r3, [r3, #5]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d112      	bne.n	8009db4 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8009d8e:	6979      	ldr	r1, [r7, #20]
 8009d90:	6a38      	ldr	r0, [r7, #32]
 8009d92:	f7fe fe47 	bl	8008a24 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d9c:	f003 0308 	and.w	r3, r3, #8
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d003      	beq.n	8009dac <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8009da4:	6a38      	ldr	r0, [r7, #32]
 8009da6:	f7fe fbb5 	bl	8008514 <dhcp_check>
 8009daa:	e047      	b.n	8009e3c <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8009dac:	6a38      	ldr	r0, [r7, #32]
 8009dae:	f7ff f85b 	bl	8008e68 <dhcp_bind>
 8009db2:	e043      	b.n	8009e3c <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	795b      	ldrb	r3, [r3, #5]
 8009db8:	2b03      	cmp	r3, #3
 8009dba:	d007      	beq.n	8009dcc <dhcp_recv+0x10c>
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	795b      	ldrb	r3, [r3, #5]
 8009dc0:	2b04      	cmp	r3, #4
 8009dc2:	d003      	beq.n	8009dcc <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8009dc8:	2b05      	cmp	r3, #5
 8009dca:	d137      	bne.n	8009e3c <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8009dcc:	6979      	ldr	r1, [r7, #20]
 8009dce:	6a38      	ldr	r0, [r7, #32]
 8009dd0:	f7fe fe28 	bl	8008a24 <dhcp_handle_ack>
      dhcp_bind(netif);
 8009dd4:	6a38      	ldr	r0, [r7, #32]
 8009dd6:	f7ff f847 	bl	8008e68 <dhcp_bind>
 8009dda:	e02f      	b.n	8009e3c <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8009ddc:	7cfb      	ldrb	r3, [r7, #19]
 8009dde:	2b06      	cmp	r3, #6
 8009de0:	d113      	bne.n	8009e0a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d00b      	beq.n	8009e02 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	795b      	ldrb	r3, [r3, #5]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d007      	beq.n	8009e02 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8009df6:	2b04      	cmp	r3, #4
 8009df8:	d003      	beq.n	8009e02 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	795b      	ldrb	r3, [r3, #5]
 8009dfe:	2b05      	cmp	r3, #5
 8009e00:	d103      	bne.n	8009e0a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8009e02:	6a38      	ldr	r0, [r7, #32]
 8009e04:	f7fe fb6c 	bl	80084e0 <dhcp_handle_nak>
 8009e08:	e018      	b.n	8009e3c <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8009e0a:	7cfb      	ldrb	r3, [r7, #19]
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d108      	bne.n	8009e22 <dhcp_recv+0x162>
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	795b      	ldrb	r3, [r3, #5]
 8009e14:	2b06      	cmp	r3, #6
 8009e16:	d104      	bne.n	8009e22 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8009e18:	6979      	ldr	r1, [r7, #20]
 8009e1a:	6a38      	ldr	r0, [r7, #32]
 8009e1c:	f7fe fbae 	bl	800857c <dhcp_handle_offer>
 8009e20:	e00c      	b.n	8009e3c <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8009e22:	bf00      	nop
 8009e24:	e00a      	b.n	8009e3c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8009e26:	bf00      	nop
 8009e28:	e008      	b.n	8009e3c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8009e2a:	bf00      	nop
 8009e2c:	e006      	b.n	8009e3c <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8009e2e:	bf00      	nop
 8009e30:	e004      	b.n	8009e3c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8009e32:	bf00      	nop
 8009e34:	e002      	b.n	8009e3c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8009e36:	bf00      	nop
 8009e38:	e000      	b.n	8009e3c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8009e3a:	bf00      	nop
  pbuf_free(p);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f003 fecf 	bl	800dbe0 <pbuf_free>
}
 8009e42:	bf00      	nop
 8009e44:	3728      	adds	r7, #40	; 0x28
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	20006a84 	.word	0x20006a84
 8009e50:	20006a5c 	.word	0x20006a5c
 8009e54:	20006a64 	.word	0x20006a64

08009e58 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b088      	sub	sp, #32
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	603b      	str	r3, [r7, #0]
 8009e64:	4613      	mov	r3, r2
 8009e66:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d108      	bne.n	8009e80 <dhcp_create_msg+0x28>
 8009e6e:	4b5f      	ldr	r3, [pc, #380]	; (8009fec <dhcp_create_msg+0x194>)
 8009e70:	f240 7269 	movw	r2, #1897	; 0x769
 8009e74:	495e      	ldr	r1, [pc, #376]	; (8009ff0 <dhcp_create_msg+0x198>)
 8009e76:	485f      	ldr	r0, [pc, #380]	; (8009ff4 <dhcp_create_msg+0x19c>)
 8009e78:	f00b fb2c 	bl	80154d4 <iprintf>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	e0b1      	b.n	8009fe4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d108      	bne.n	8009e98 <dhcp_create_msg+0x40>
 8009e86:	4b59      	ldr	r3, [pc, #356]	; (8009fec <dhcp_create_msg+0x194>)
 8009e88:	f240 726a 	movw	r2, #1898	; 0x76a
 8009e8c:	495a      	ldr	r1, [pc, #360]	; (8009ff8 <dhcp_create_msg+0x1a0>)
 8009e8e:	4859      	ldr	r0, [pc, #356]	; (8009ff4 <dhcp_create_msg+0x19c>)
 8009e90:	f00b fb20 	bl	80154d4 <iprintf>
 8009e94:	2300      	movs	r3, #0
 8009e96:	e0a5      	b.n	8009fe4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8009e98:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009e9c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8009ea0:	2036      	movs	r0, #54	; 0x36
 8009ea2:	f003 fbbd 	bl	800d620 <pbuf_alloc>
 8009ea6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e098      	b.n	8009fe4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	895b      	ldrh	r3, [r3, #10]
 8009eb6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8009eba:	d206      	bcs.n	8009eca <dhcp_create_msg+0x72>
 8009ebc:	4b4b      	ldr	r3, [pc, #300]	; (8009fec <dhcp_create_msg+0x194>)
 8009ebe:	f240 7272 	movw	r2, #1906	; 0x772
 8009ec2:	494e      	ldr	r1, [pc, #312]	; (8009ffc <dhcp_create_msg+0x1a4>)
 8009ec4:	484b      	ldr	r0, [pc, #300]	; (8009ff4 <dhcp_create_msg+0x19c>)
 8009ec6:	f00b fb05 	bl	80154d4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8009eca:	79fb      	ldrb	r3, [r7, #7]
 8009ecc:	2b03      	cmp	r3, #3
 8009ece:	d103      	bne.n	8009ed8 <dhcp_create_msg+0x80>
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	795b      	ldrb	r3, [r3, #5]
 8009ed4:	2b03      	cmp	r3, #3
 8009ed6:	d10d      	bne.n	8009ef4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	799b      	ldrb	r3, [r3, #6]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d105      	bne.n	8009eec <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8009ee0:	f00b fb10 	bl	8015504 <rand>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	4b45      	ldr	r3, [pc, #276]	; (800a000 <dhcp_create_msg+0x1a8>)
 8009eea:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8009eec:	4b44      	ldr	r3, [pc, #272]	; (800a000 <dhcp_create_msg+0x1a8>)
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8009efa:	f44f 729a 	mov.w	r2, #308	; 0x134
 8009efe:	2100      	movs	r1, #0
 8009f00:	6978      	ldr	r0, [r7, #20]
 8009f02:	f00a fdda 	bl	8014aba <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f002 fae8 	bl	800c4f6 <lwip_htonl>
 8009f26:	4602      	mov	r2, r0
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8009f2c:	79fb      	ldrb	r3, [r7, #7]
 8009f2e:	2b08      	cmp	r3, #8
 8009f30:	d010      	beq.n	8009f54 <dhcp_create_msg+0xfc>
 8009f32:	79fb      	ldrb	r3, [r7, #7]
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	d00d      	beq.n	8009f54 <dhcp_create_msg+0xfc>
 8009f38:	79fb      	ldrb	r3, [r7, #7]
 8009f3a:	2b07      	cmp	r3, #7
 8009f3c:	d00a      	beq.n	8009f54 <dhcp_create_msg+0xfc>
 8009f3e:	79fb      	ldrb	r3, [r7, #7]
 8009f40:	2b03      	cmp	r3, #3
 8009f42:	d10c      	bne.n	8009f5e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8009f48:	2b05      	cmp	r3, #5
 8009f4a:	d003      	beq.n	8009f54 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	795b      	ldrb	r3, [r3, #5]
 8009f50:	2b04      	cmp	r3, #4
 8009f52:	d104      	bne.n	8009f5e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3304      	adds	r3, #4
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8009f5e:	2300      	movs	r3, #0
 8009f60:	83fb      	strh	r3, [r7, #30]
 8009f62:	e00c      	b.n	8009f7e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8009f64:	8bfa      	ldrh	r2, [r7, #30]
 8009f66:	8bfb      	ldrh	r3, [r7, #30]
 8009f68:	68f9      	ldr	r1, [r7, #12]
 8009f6a:	440a      	add	r2, r1
 8009f6c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8009f70:	697a      	ldr	r2, [r7, #20]
 8009f72:	4413      	add	r3, r2
 8009f74:	460a      	mov	r2, r1
 8009f76:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8009f78:	8bfb      	ldrh	r3, [r7, #30]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	83fb      	strh	r3, [r7, #30]
 8009f7e:	8bfb      	ldrh	r3, [r7, #30]
 8009f80:	2b05      	cmp	r3, #5
 8009f82:	d9ef      	bls.n	8009f64 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8009f8c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8009f90:	2200      	movs	r2, #0
 8009f92:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8009f96:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8009fa0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8009faa:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	2235      	movs	r2, #53	; 0x35
 8009fb8:	2000      	movs	r0, #0
 8009fba:	f7ff fadd 	bl	8009578 <dhcp_option>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8009fc8:	79fa      	ldrb	r2, [r7, #7]
 8009fca:	8a7b      	ldrh	r3, [r7, #18]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7ff fb07 	bl	80095e0 <dhcp_option_byte>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	8a7a      	ldrh	r2, [r7, #18]
 8009fe0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8009fe2:	69bb      	ldr	r3, [r7, #24]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3720      	adds	r7, #32
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	08018cfc 	.word	0x08018cfc
 8009ff0:	08019054 	.word	0x08019054
 8009ff4:	08018d94 	.word	0x08018d94
 8009ff8:	08019074 	.word	0x08019074
 8009ffc:	08019094 	.word	0x08019094
 800a000:	20006784 	.word	0x20006784

0800a004 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	4603      	mov	r3, r0
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800a012:	89fb      	ldrh	r3, [r7, #14]
 800a014:	1c5a      	adds	r2, r3, #1
 800a016:	81fa      	strh	r2, [r7, #14]
 800a018:	461a      	mov	r2, r3
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	4413      	add	r3, r2
 800a01e:	22ff      	movs	r2, #255	; 0xff
 800a020:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800a022:	e007      	b.n	800a034 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800a024:	89fb      	ldrh	r3, [r7, #14]
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	81fa      	strh	r2, [r7, #14]
 800a02a:	461a      	mov	r2, r3
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	4413      	add	r3, r2
 800a030:	2200      	movs	r2, #0
 800a032:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800a034:	89fb      	ldrh	r3, [r7, #14]
 800a036:	2b43      	cmp	r3, #67	; 0x43
 800a038:	d904      	bls.n	800a044 <dhcp_option_trailer+0x40>
 800a03a:	89fb      	ldrh	r3, [r7, #14]
 800a03c:	f003 0303 	and.w	r3, r3, #3
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <dhcp_option_trailer+0x46>
 800a044:	89fb      	ldrh	r3, [r7, #14]
 800a046:	2b43      	cmp	r3, #67	; 0x43
 800a048:	d9ec      	bls.n	800a024 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800a04a:	89fb      	ldrh	r3, [r7, #14]
 800a04c:	33f0      	adds	r3, #240	; 0xf0
 800a04e:	b29b      	uxth	r3, r3
 800a050:	4619      	mov	r1, r3
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f003 fc3e 	bl	800d8d4 <pbuf_realloc>
}
 800a058:	bf00      	nop
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d017      	beq.n	800a09e <dhcp_supplied_address+0x3e>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a072:	2b00      	cmp	r3, #0
 800a074:	d013      	beq.n	800a09e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	795b      	ldrb	r3, [r3, #5]
 800a080:	2b0a      	cmp	r3, #10
 800a082:	d007      	beq.n	800a094 <dhcp_supplied_address+0x34>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	795b      	ldrb	r3, [r3, #5]
 800a088:	2b05      	cmp	r3, #5
 800a08a:	d003      	beq.n	800a094 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800a090:	2b04      	cmp	r3, #4
 800a092:	d101      	bne.n	800a098 <dhcp_supplied_address+0x38>
 800a094:	2301      	movs	r3, #1
 800a096:	e000      	b.n	800a09a <dhcp_supplied_address+0x3a>
 800a098:	2300      	movs	r3, #0
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	e000      	b.n	800a0a0 <dhcp_supplied_address+0x40>
  }
  return 0;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3714      	adds	r7, #20
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a0b4:	4915      	ldr	r1, [pc, #84]	; (800a10c <etharp_free_entry+0x60>)
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	005b      	lsls	r3, r3, #1
 800a0bc:	4413      	add	r3, r2
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	440b      	add	r3, r1
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d013      	beq.n	800a0f0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a0c8:	4910      	ldr	r1, [pc, #64]	; (800a10c <etharp_free_entry+0x60>)
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	005b      	lsls	r3, r3, #1
 800a0d0:	4413      	add	r3, r2
 800a0d2:	00db      	lsls	r3, r3, #3
 800a0d4:	440b      	add	r3, r1
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f003 fd81 	bl	800dbe0 <pbuf_free>
    arp_table[i].q = NULL;
 800a0de:	490b      	ldr	r1, [pc, #44]	; (800a10c <etharp_free_entry+0x60>)
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	005b      	lsls	r3, r3, #1
 800a0e6:	4413      	add	r3, r2
 800a0e8:	00db      	lsls	r3, r3, #3
 800a0ea:	440b      	add	r3, r1
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a0f0:	4906      	ldr	r1, [pc, #24]	; (800a10c <etharp_free_entry+0x60>)
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	005b      	lsls	r3, r3, #1
 800a0f8:	4413      	add	r3, r2
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	440b      	add	r3, r1
 800a0fe:	3314      	adds	r3, #20
 800a100:	2200      	movs	r2, #0
 800a102:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800a104:	bf00      	nop
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	20006788 	.word	0x20006788

0800a110 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a116:	2300      	movs	r3, #0
 800a118:	607b      	str	r3, [r7, #4]
 800a11a:	e096      	b.n	800a24a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800a11c:	494f      	ldr	r1, [pc, #316]	; (800a25c <etharp_tmr+0x14c>)
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	4613      	mov	r3, r2
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	4413      	add	r3, r2
 800a126:	00db      	lsls	r3, r3, #3
 800a128:	440b      	add	r3, r1
 800a12a:	3314      	adds	r3, #20
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	2b00      	cmp	r3, #0
 800a134:	f000 8086 	beq.w	800a244 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800a138:	4948      	ldr	r1, [pc, #288]	; (800a25c <etharp_tmr+0x14c>)
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	4613      	mov	r3, r2
 800a13e:	005b      	lsls	r3, r3, #1
 800a140:	4413      	add	r3, r2
 800a142:	00db      	lsls	r3, r3, #3
 800a144:	440b      	add	r3, r1
 800a146:	3312      	adds	r3, #18
 800a148:	881b      	ldrh	r3, [r3, #0]
 800a14a:	3301      	adds	r3, #1
 800a14c:	b298      	uxth	r0, r3
 800a14e:	4943      	ldr	r1, [pc, #268]	; (800a25c <etharp_tmr+0x14c>)
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	4613      	mov	r3, r2
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	4413      	add	r3, r2
 800a158:	00db      	lsls	r3, r3, #3
 800a15a:	440b      	add	r3, r1
 800a15c:	3312      	adds	r3, #18
 800a15e:	4602      	mov	r2, r0
 800a160:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a162:	493e      	ldr	r1, [pc, #248]	; (800a25c <etharp_tmr+0x14c>)
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	4613      	mov	r3, r2
 800a168:	005b      	lsls	r3, r3, #1
 800a16a:	4413      	add	r3, r2
 800a16c:	00db      	lsls	r3, r3, #3
 800a16e:	440b      	add	r3, r1
 800a170:	3312      	adds	r3, #18
 800a172:	881b      	ldrh	r3, [r3, #0]
 800a174:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a178:	d215      	bcs.n	800a1a6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a17a:	4938      	ldr	r1, [pc, #224]	; (800a25c <etharp_tmr+0x14c>)
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	4613      	mov	r3, r2
 800a180:	005b      	lsls	r3, r3, #1
 800a182:	4413      	add	r3, r2
 800a184:	00db      	lsls	r3, r3, #3
 800a186:	440b      	add	r3, r1
 800a188:	3314      	adds	r3, #20
 800a18a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d10e      	bne.n	800a1ae <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800a190:	4932      	ldr	r1, [pc, #200]	; (800a25c <etharp_tmr+0x14c>)
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	4613      	mov	r3, r2
 800a196:	005b      	lsls	r3, r3, #1
 800a198:	4413      	add	r3, r2
 800a19a:	00db      	lsls	r3, r3, #3
 800a19c:	440b      	add	r3, r1
 800a19e:	3312      	adds	r3, #18
 800a1a0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a1a2:	2b04      	cmp	r3, #4
 800a1a4:	d903      	bls.n	800a1ae <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7ff ff80 	bl	800a0ac <etharp_free_entry>
 800a1ac:	e04a      	b.n	800a244 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800a1ae:	492b      	ldr	r1, [pc, #172]	; (800a25c <etharp_tmr+0x14c>)
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	4413      	add	r3, r2
 800a1b8:	00db      	lsls	r3, r3, #3
 800a1ba:	440b      	add	r3, r1
 800a1bc:	3314      	adds	r3, #20
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	2b03      	cmp	r3, #3
 800a1c2:	d10a      	bne.n	800a1da <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a1c4:	4925      	ldr	r1, [pc, #148]	; (800a25c <etharp_tmr+0x14c>)
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	005b      	lsls	r3, r3, #1
 800a1cc:	4413      	add	r3, r2
 800a1ce:	00db      	lsls	r3, r3, #3
 800a1d0:	440b      	add	r3, r1
 800a1d2:	3314      	adds	r3, #20
 800a1d4:	2204      	movs	r2, #4
 800a1d6:	701a      	strb	r2, [r3, #0]
 800a1d8:	e034      	b.n	800a244 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800a1da:	4920      	ldr	r1, [pc, #128]	; (800a25c <etharp_tmr+0x14c>)
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	005b      	lsls	r3, r3, #1
 800a1e2:	4413      	add	r3, r2
 800a1e4:	00db      	lsls	r3, r3, #3
 800a1e6:	440b      	add	r3, r1
 800a1e8:	3314      	adds	r3, #20
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	2b04      	cmp	r3, #4
 800a1ee:	d10a      	bne.n	800a206 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a1f0:	491a      	ldr	r1, [pc, #104]	; (800a25c <etharp_tmr+0x14c>)
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	4413      	add	r3, r2
 800a1fa:	00db      	lsls	r3, r3, #3
 800a1fc:	440b      	add	r3, r1
 800a1fe:	3314      	adds	r3, #20
 800a200:	2202      	movs	r2, #2
 800a202:	701a      	strb	r2, [r3, #0]
 800a204:	e01e      	b.n	800a244 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a206:	4915      	ldr	r1, [pc, #84]	; (800a25c <etharp_tmr+0x14c>)
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	4613      	mov	r3, r2
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	4413      	add	r3, r2
 800a210:	00db      	lsls	r3, r3, #3
 800a212:	440b      	add	r3, r1
 800a214:	3314      	adds	r3, #20
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d113      	bne.n	800a244 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a21c:	490f      	ldr	r1, [pc, #60]	; (800a25c <etharp_tmr+0x14c>)
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	4613      	mov	r3, r2
 800a222:	005b      	lsls	r3, r3, #1
 800a224:	4413      	add	r3, r2
 800a226:	00db      	lsls	r3, r3, #3
 800a228:	440b      	add	r3, r1
 800a22a:	3308      	adds	r3, #8
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	4613      	mov	r3, r2
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	4413      	add	r3, r2
 800a236:	00db      	lsls	r3, r3, #3
 800a238:	4a08      	ldr	r2, [pc, #32]	; (800a25c <etharp_tmr+0x14c>)
 800a23a:	4413      	add	r3, r2
 800a23c:	3304      	adds	r3, #4
 800a23e:	4619      	mov	r1, r3
 800a240:	f000 fe72 	bl	800af28 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	3301      	adds	r3, #1
 800a248:	607b      	str	r3, [r7, #4]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b09      	cmp	r3, #9
 800a24e:	f77f af65 	ble.w	800a11c <etharp_tmr+0xc>
      }
    }
  }
}
 800a252:	bf00      	nop
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	20006788 	.word	0x20006788

0800a260 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b08a      	sub	sp, #40	; 0x28
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	460b      	mov	r3, r1
 800a26a:	607a      	str	r2, [r7, #4]
 800a26c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a26e:	230a      	movs	r3, #10
 800a270:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a272:	230a      	movs	r3, #10
 800a274:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800a276:	230a      	movs	r3, #10
 800a278:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800a27a:	2300      	movs	r3, #0
 800a27c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800a27e:	230a      	movs	r3, #10
 800a280:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a282:	2300      	movs	r3, #0
 800a284:	83bb      	strh	r3, [r7, #28]
 800a286:	2300      	movs	r3, #0
 800a288:	837b      	strh	r3, [r7, #26]
 800a28a:	2300      	movs	r3, #0
 800a28c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a28e:	2300      	movs	r3, #0
 800a290:	843b      	strh	r3, [r7, #32]
 800a292:	e0ae      	b.n	800a3f2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800a294:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a298:	49a6      	ldr	r1, [pc, #664]	; (800a534 <etharp_find_entry+0x2d4>)
 800a29a:	4613      	mov	r3, r2
 800a29c:	005b      	lsls	r3, r3, #1
 800a29e:	4413      	add	r3, r2
 800a2a0:	00db      	lsls	r3, r3, #3
 800a2a2:	440b      	add	r3, r1
 800a2a4:	3314      	adds	r3, #20
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a2aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a2ae:	2b0a      	cmp	r3, #10
 800a2b0:	d105      	bne.n	800a2be <etharp_find_entry+0x5e>
 800a2b2:	7dfb      	ldrb	r3, [r7, #23]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d102      	bne.n	800a2be <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800a2b8:	8c3b      	ldrh	r3, [r7, #32]
 800a2ba:	847b      	strh	r3, [r7, #34]	; 0x22
 800a2bc:	e095      	b.n	800a3ea <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 8092 	beq.w	800a3ea <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800a2c6:	7dfb      	ldrb	r3, [r7, #23]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d009      	beq.n	800a2e0 <etharp_find_entry+0x80>
 800a2cc:	7dfb      	ldrb	r3, [r7, #23]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d806      	bhi.n	800a2e0 <etharp_find_entry+0x80>
 800a2d2:	4b99      	ldr	r3, [pc, #612]	; (800a538 <etharp_find_entry+0x2d8>)
 800a2d4:	f44f 7292 	mov.w	r2, #292	; 0x124
 800a2d8:	4998      	ldr	r1, [pc, #608]	; (800a53c <etharp_find_entry+0x2dc>)
 800a2da:	4899      	ldr	r0, [pc, #612]	; (800a540 <etharp_find_entry+0x2e0>)
 800a2dc:	f00b f8fa 	bl	80154d4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d020      	beq.n	800a328 <etharp_find_entry+0xc8>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6819      	ldr	r1, [r3, #0]
 800a2ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a2ee:	4891      	ldr	r0, [pc, #580]	; (800a534 <etharp_find_entry+0x2d4>)
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	005b      	lsls	r3, r3, #1
 800a2f4:	4413      	add	r3, r2
 800a2f6:	00db      	lsls	r3, r3, #3
 800a2f8:	4403      	add	r3, r0
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4299      	cmp	r1, r3
 800a300:	d112      	bne.n	800a328 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00c      	beq.n	800a322 <etharp_find_entry+0xc2>
 800a308:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a30c:	4989      	ldr	r1, [pc, #548]	; (800a534 <etharp_find_entry+0x2d4>)
 800a30e:	4613      	mov	r3, r2
 800a310:	005b      	lsls	r3, r3, #1
 800a312:	4413      	add	r3, r2
 800a314:	00db      	lsls	r3, r3, #3
 800a316:	440b      	add	r3, r1
 800a318:	3308      	adds	r3, #8
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d102      	bne.n	800a328 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800a322:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a326:	e100      	b.n	800a52a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d140      	bne.n	800a3b0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800a32e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a332:	4980      	ldr	r1, [pc, #512]	; (800a534 <etharp_find_entry+0x2d4>)
 800a334:	4613      	mov	r3, r2
 800a336:	005b      	lsls	r3, r3, #1
 800a338:	4413      	add	r3, r2
 800a33a:	00db      	lsls	r3, r3, #3
 800a33c:	440b      	add	r3, r1
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d01a      	beq.n	800a37a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800a344:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a348:	497a      	ldr	r1, [pc, #488]	; (800a534 <etharp_find_entry+0x2d4>)
 800a34a:	4613      	mov	r3, r2
 800a34c:	005b      	lsls	r3, r3, #1
 800a34e:	4413      	add	r3, r2
 800a350:	00db      	lsls	r3, r3, #3
 800a352:	440b      	add	r3, r1
 800a354:	3312      	adds	r3, #18
 800a356:	881b      	ldrh	r3, [r3, #0]
 800a358:	8bba      	ldrh	r2, [r7, #28]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d845      	bhi.n	800a3ea <etharp_find_entry+0x18a>
            old_queue = i;
 800a35e:	8c3b      	ldrh	r3, [r7, #32]
 800a360:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800a362:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a366:	4973      	ldr	r1, [pc, #460]	; (800a534 <etharp_find_entry+0x2d4>)
 800a368:	4613      	mov	r3, r2
 800a36a:	005b      	lsls	r3, r3, #1
 800a36c:	4413      	add	r3, r2
 800a36e:	00db      	lsls	r3, r3, #3
 800a370:	440b      	add	r3, r1
 800a372:	3312      	adds	r3, #18
 800a374:	881b      	ldrh	r3, [r3, #0]
 800a376:	83bb      	strh	r3, [r7, #28]
 800a378:	e037      	b.n	800a3ea <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800a37a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a37e:	496d      	ldr	r1, [pc, #436]	; (800a534 <etharp_find_entry+0x2d4>)
 800a380:	4613      	mov	r3, r2
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	4413      	add	r3, r2
 800a386:	00db      	lsls	r3, r3, #3
 800a388:	440b      	add	r3, r1
 800a38a:	3312      	adds	r3, #18
 800a38c:	881b      	ldrh	r3, [r3, #0]
 800a38e:	8b7a      	ldrh	r2, [r7, #26]
 800a390:	429a      	cmp	r2, r3
 800a392:	d82a      	bhi.n	800a3ea <etharp_find_entry+0x18a>
            old_pending = i;
 800a394:	8c3b      	ldrh	r3, [r7, #32]
 800a396:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800a398:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a39c:	4965      	ldr	r1, [pc, #404]	; (800a534 <etharp_find_entry+0x2d4>)
 800a39e:	4613      	mov	r3, r2
 800a3a0:	005b      	lsls	r3, r3, #1
 800a3a2:	4413      	add	r3, r2
 800a3a4:	00db      	lsls	r3, r3, #3
 800a3a6:	440b      	add	r3, r1
 800a3a8:	3312      	adds	r3, #18
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	837b      	strh	r3, [r7, #26]
 800a3ae:	e01c      	b.n	800a3ea <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800a3b0:	7dfb      	ldrb	r3, [r7, #23]
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d919      	bls.n	800a3ea <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800a3b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a3ba:	495e      	ldr	r1, [pc, #376]	; (800a534 <etharp_find_entry+0x2d4>)
 800a3bc:	4613      	mov	r3, r2
 800a3be:	005b      	lsls	r3, r3, #1
 800a3c0:	4413      	add	r3, r2
 800a3c2:	00db      	lsls	r3, r3, #3
 800a3c4:	440b      	add	r3, r1
 800a3c6:	3312      	adds	r3, #18
 800a3c8:	881b      	ldrh	r3, [r3, #0]
 800a3ca:	8b3a      	ldrh	r2, [r7, #24]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d80c      	bhi.n	800a3ea <etharp_find_entry+0x18a>
            old_stable = i;
 800a3d0:	8c3b      	ldrh	r3, [r7, #32]
 800a3d2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800a3d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a3d8:	4956      	ldr	r1, [pc, #344]	; (800a534 <etharp_find_entry+0x2d4>)
 800a3da:	4613      	mov	r3, r2
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	4413      	add	r3, r2
 800a3e0:	00db      	lsls	r3, r3, #3
 800a3e2:	440b      	add	r3, r1
 800a3e4:	3312      	adds	r3, #18
 800a3e6:	881b      	ldrh	r3, [r3, #0]
 800a3e8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a3ea:	8c3b      	ldrh	r3, [r7, #32]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	843b      	strh	r3, [r7, #32]
 800a3f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a3f6:	2b09      	cmp	r3, #9
 800a3f8:	f77f af4c 	ble.w	800a294 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800a3fc:	7afb      	ldrb	r3, [r7, #11]
 800a3fe:	f003 0302 	and.w	r3, r3, #2
 800a402:	2b00      	cmp	r3, #0
 800a404:	d108      	bne.n	800a418 <etharp_find_entry+0x1b8>
 800a406:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a40a:	2b0a      	cmp	r3, #10
 800a40c:	d107      	bne.n	800a41e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800a40e:	7afb      	ldrb	r3, [r7, #11]
 800a410:	f003 0301 	and.w	r3, r3, #1
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800a418:	f04f 33ff 	mov.w	r3, #4294967295
 800a41c:	e085      	b.n	800a52a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800a41e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a422:	2b09      	cmp	r3, #9
 800a424:	dc02      	bgt.n	800a42c <etharp_find_entry+0x1cc>
    i = empty;
 800a426:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a428:	843b      	strh	r3, [r7, #32]
 800a42a:	e039      	b.n	800a4a0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800a42c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a430:	2b09      	cmp	r3, #9
 800a432:	dc14      	bgt.n	800a45e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800a434:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a436:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a438:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a43c:	493d      	ldr	r1, [pc, #244]	; (800a534 <etharp_find_entry+0x2d4>)
 800a43e:	4613      	mov	r3, r2
 800a440:	005b      	lsls	r3, r3, #1
 800a442:	4413      	add	r3, r2
 800a444:	00db      	lsls	r3, r3, #3
 800a446:	440b      	add	r3, r1
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d018      	beq.n	800a480 <etharp_find_entry+0x220>
 800a44e:	4b3a      	ldr	r3, [pc, #232]	; (800a538 <etharp_find_entry+0x2d8>)
 800a450:	f240 126d 	movw	r2, #365	; 0x16d
 800a454:	493b      	ldr	r1, [pc, #236]	; (800a544 <etharp_find_entry+0x2e4>)
 800a456:	483a      	ldr	r0, [pc, #232]	; (800a540 <etharp_find_entry+0x2e0>)
 800a458:	f00b f83c 	bl	80154d4 <iprintf>
 800a45c:	e010      	b.n	800a480 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800a45e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a462:	2b09      	cmp	r3, #9
 800a464:	dc02      	bgt.n	800a46c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800a466:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a468:	843b      	strh	r3, [r7, #32]
 800a46a:	e009      	b.n	800a480 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800a46c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a470:	2b09      	cmp	r3, #9
 800a472:	dc02      	bgt.n	800a47a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800a474:	8bfb      	ldrh	r3, [r7, #30]
 800a476:	843b      	strh	r3, [r7, #32]
 800a478:	e002      	b.n	800a480 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800a47a:	f04f 33ff 	mov.w	r3, #4294967295
 800a47e:	e054      	b.n	800a52a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a480:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a484:	2b09      	cmp	r3, #9
 800a486:	dd06      	ble.n	800a496 <etharp_find_entry+0x236>
 800a488:	4b2b      	ldr	r3, [pc, #172]	; (800a538 <etharp_find_entry+0x2d8>)
 800a48a:	f240 127f 	movw	r2, #383	; 0x17f
 800a48e:	492e      	ldr	r1, [pc, #184]	; (800a548 <etharp_find_entry+0x2e8>)
 800a490:	482b      	ldr	r0, [pc, #172]	; (800a540 <etharp_find_entry+0x2e0>)
 800a492:	f00b f81f 	bl	80154d4 <iprintf>
    etharp_free_entry(i);
 800a496:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7ff fe06 	bl	800a0ac <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a4a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a4a4:	2b09      	cmp	r3, #9
 800a4a6:	dd06      	ble.n	800a4b6 <etharp_find_entry+0x256>
 800a4a8:	4b23      	ldr	r3, [pc, #140]	; (800a538 <etharp_find_entry+0x2d8>)
 800a4aa:	f240 1283 	movw	r2, #387	; 0x183
 800a4ae:	4926      	ldr	r1, [pc, #152]	; (800a548 <etharp_find_entry+0x2e8>)
 800a4b0:	4823      	ldr	r0, [pc, #140]	; (800a540 <etharp_find_entry+0x2e0>)
 800a4b2:	f00b f80f 	bl	80154d4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a4b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a4ba:	491e      	ldr	r1, [pc, #120]	; (800a534 <etharp_find_entry+0x2d4>)
 800a4bc:	4613      	mov	r3, r2
 800a4be:	005b      	lsls	r3, r3, #1
 800a4c0:	4413      	add	r3, r2
 800a4c2:	00db      	lsls	r3, r3, #3
 800a4c4:	440b      	add	r3, r1
 800a4c6:	3314      	adds	r3, #20
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d006      	beq.n	800a4dc <etharp_find_entry+0x27c>
 800a4ce:	4b1a      	ldr	r3, [pc, #104]	; (800a538 <etharp_find_entry+0x2d8>)
 800a4d0:	f240 1285 	movw	r2, #389	; 0x185
 800a4d4:	491d      	ldr	r1, [pc, #116]	; (800a54c <etharp_find_entry+0x2ec>)
 800a4d6:	481a      	ldr	r0, [pc, #104]	; (800a540 <etharp_find_entry+0x2e0>)
 800a4d8:	f00a fffc 	bl	80154d4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00b      	beq.n	800a4fa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a4e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6819      	ldr	r1, [r3, #0]
 800a4ea:	4812      	ldr	r0, [pc, #72]	; (800a534 <etharp_find_entry+0x2d4>)
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	005b      	lsls	r3, r3, #1
 800a4f0:	4413      	add	r3, r2
 800a4f2:	00db      	lsls	r3, r3, #3
 800a4f4:	4403      	add	r3, r0
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800a4fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a4fe:	490d      	ldr	r1, [pc, #52]	; (800a534 <etharp_find_entry+0x2d4>)
 800a500:	4613      	mov	r3, r2
 800a502:	005b      	lsls	r3, r3, #1
 800a504:	4413      	add	r3, r2
 800a506:	00db      	lsls	r3, r3, #3
 800a508:	440b      	add	r3, r1
 800a50a:	3312      	adds	r3, #18
 800a50c:	2200      	movs	r2, #0
 800a50e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800a510:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a514:	4907      	ldr	r1, [pc, #28]	; (800a534 <etharp_find_entry+0x2d4>)
 800a516:	4613      	mov	r3, r2
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	4413      	add	r3, r2
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	440b      	add	r3, r1
 800a520:	3308      	adds	r3, #8
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800a526:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3728      	adds	r7, #40	; 0x28
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	20006788 	.word	0x20006788
 800a538:	080190d4 	.word	0x080190d4
 800a53c:	08019148 	.word	0x08019148
 800a540:	08019188 	.word	0x08019188
 800a544:	080191b0 	.word	0x080191b0
 800a548:	080191c8 	.word	0x080191c8
 800a54c:	080191dc 	.word	0x080191dc

0800a550 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af02      	add	r7, sp, #8
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a564:	2b06      	cmp	r3, #6
 800a566:	d006      	beq.n	800a576 <etharp_update_arp_entry+0x26>
 800a568:	4b48      	ldr	r3, [pc, #288]	; (800a68c <etharp_update_arp_entry+0x13c>)
 800a56a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800a56e:	4948      	ldr	r1, [pc, #288]	; (800a690 <etharp_update_arp_entry+0x140>)
 800a570:	4848      	ldr	r0, [pc, #288]	; (800a694 <etharp_update_arp_entry+0x144>)
 800a572:	f00a ffaf 	bl	80154d4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d012      	beq.n	800a5a2 <etharp_update_arp_entry+0x52>
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00e      	beq.n	800a5a2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68f9      	ldr	r1, [r7, #12]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f001 f928 	bl	800b7e0 <ip4_addr_isbroadcast_u32>
 800a590:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800a592:	2b00      	cmp	r3, #0
 800a594:	d105      	bne.n	800a5a2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a59e:	2be0      	cmp	r3, #224	; 0xe0
 800a5a0:	d102      	bne.n	800a5a8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a5a2:	f06f 030f 	mvn.w	r3, #15
 800a5a6:	e06c      	b.n	800a682 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800a5a8:	78fb      	ldrb	r3, [r7, #3]
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	68b8      	ldr	r0, [r7, #8]
 800a5b0:	f7ff fe56 	bl	800a260 <etharp_find_entry>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800a5b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	da02      	bge.n	800a5c6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800a5c0:	8afb      	ldrh	r3, [r7, #22]
 800a5c2:	b25b      	sxtb	r3, r3
 800a5c4:	e05d      	b.n	800a682 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a5c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a5ca:	4933      	ldr	r1, [pc, #204]	; (800a698 <etharp_update_arp_entry+0x148>)
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	4413      	add	r3, r2
 800a5d2:	00db      	lsls	r3, r3, #3
 800a5d4:	440b      	add	r3, r1
 800a5d6:	3314      	adds	r3, #20
 800a5d8:	2202      	movs	r2, #2
 800a5da:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800a5dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a5e0:	492d      	ldr	r1, [pc, #180]	; (800a698 <etharp_update_arp_entry+0x148>)
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	4413      	add	r3, r2
 800a5e8:	00db      	lsls	r3, r3, #3
 800a5ea:	440b      	add	r3, r1
 800a5ec:	3308      	adds	r3, #8
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800a5f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	005b      	lsls	r3, r3, #1
 800a5fa:	4413      	add	r3, r2
 800a5fc:	00db      	lsls	r3, r3, #3
 800a5fe:	3308      	adds	r3, #8
 800a600:	4a25      	ldr	r2, [pc, #148]	; (800a698 <etharp_update_arp_entry+0x148>)
 800a602:	4413      	add	r3, r2
 800a604:	3304      	adds	r3, #4
 800a606:	2206      	movs	r2, #6
 800a608:	6879      	ldr	r1, [r7, #4]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f00a fa31 	bl	8014a72 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800a610:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a614:	4920      	ldr	r1, [pc, #128]	; (800a698 <etharp_update_arp_entry+0x148>)
 800a616:	4613      	mov	r3, r2
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	4413      	add	r3, r2
 800a61c:	00db      	lsls	r3, r3, #3
 800a61e:	440b      	add	r3, r1
 800a620:	3312      	adds	r3, #18
 800a622:	2200      	movs	r2, #0
 800a624:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800a626:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a62a:	491b      	ldr	r1, [pc, #108]	; (800a698 <etharp_update_arp_entry+0x148>)
 800a62c:	4613      	mov	r3, r2
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	4413      	add	r3, r2
 800a632:	00db      	lsls	r3, r3, #3
 800a634:	440b      	add	r3, r1
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d021      	beq.n	800a680 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800a63c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a640:	4915      	ldr	r1, [pc, #84]	; (800a698 <etharp_update_arp_entry+0x148>)
 800a642:	4613      	mov	r3, r2
 800a644:	005b      	lsls	r3, r3, #1
 800a646:	4413      	add	r3, r2
 800a648:	00db      	lsls	r3, r3, #3
 800a64a:	440b      	add	r3, r1
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800a650:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a654:	4910      	ldr	r1, [pc, #64]	; (800a698 <etharp_update_arp_entry+0x148>)
 800a656:	4613      	mov	r3, r2
 800a658:	005b      	lsls	r3, r3, #1
 800a65a:	4413      	add	r3, r2
 800a65c:	00db      	lsls	r3, r3, #3
 800a65e:	440b      	add	r3, r1
 800a660:	2200      	movs	r2, #0
 800a662:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800a66a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6939      	ldr	r1, [r7, #16]
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f00a f84d 	bl	8014714 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800a67a:	6938      	ldr	r0, [r7, #16]
 800a67c:	f003 fab0 	bl	800dbe0 <pbuf_free>
  }
  return ERR_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3718      	adds	r7, #24
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	080190d4 	.word	0x080190d4
 800a690:	08019208 	.word	0x08019208
 800a694:	08019188 	.word	0x08019188
 800a698:	20006788 	.word	0x20006788

0800a69c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	60fb      	str	r3, [r7, #12]
 800a6a8:	e01e      	b.n	800a6e8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800a6aa:	4913      	ldr	r1, [pc, #76]	; (800a6f8 <etharp_cleanup_netif+0x5c>)
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	4413      	add	r3, r2
 800a6b4:	00db      	lsls	r3, r3, #3
 800a6b6:	440b      	add	r3, r1
 800a6b8:	3314      	adds	r3, #20
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800a6be:	7afb      	ldrb	r3, [r7, #11]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00e      	beq.n	800a6e2 <etharp_cleanup_netif+0x46>
 800a6c4:	490c      	ldr	r1, [pc, #48]	; (800a6f8 <etharp_cleanup_netif+0x5c>)
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	005b      	lsls	r3, r3, #1
 800a6cc:	4413      	add	r3, r2
 800a6ce:	00db      	lsls	r3, r3, #3
 800a6d0:	440b      	add	r3, r1
 800a6d2:	3308      	adds	r3, #8
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d102      	bne.n	800a6e2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f7ff fce5 	bl	800a0ac <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	60fb      	str	r3, [r7, #12]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b09      	cmp	r3, #9
 800a6ec:	dddd      	ble.n	800a6aa <etharp_cleanup_netif+0xe>
    }
  }
}
 800a6ee:	bf00      	nop
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	20006788 	.word	0x20006788

0800a6fc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800a6fc:	b5b0      	push	{r4, r5, r7, lr}
 800a6fe:	b08a      	sub	sp, #40	; 0x28
 800a700:	af04      	add	r7, sp, #16
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d107      	bne.n	800a71c <etharp_input+0x20>
 800a70c:	4b3f      	ldr	r3, [pc, #252]	; (800a80c <etharp_input+0x110>)
 800a70e:	f240 228a 	movw	r2, #650	; 0x28a
 800a712:	493f      	ldr	r1, [pc, #252]	; (800a810 <etharp_input+0x114>)
 800a714:	483f      	ldr	r0, [pc, #252]	; (800a814 <etharp_input+0x118>)
 800a716:	f00a fedd 	bl	80154d4 <iprintf>
 800a71a:	e074      	b.n	800a806 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	b29b      	uxth	r3, r3
 800a728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a72c:	d10c      	bne.n	800a748 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a732:	2b06      	cmp	r3, #6
 800a734:	d108      	bne.n	800a748 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	d104      	bne.n	800a748 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	885b      	ldrh	r3, [r3, #2]
 800a742:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a744:	2b08      	cmp	r3, #8
 800a746:	d003      	beq.n	800a750 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f003 fa49 	bl	800dbe0 <pbuf_free>
    return;
 800a74e:	e05a      	b.n	800a806 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	330e      	adds	r3, #14
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	3318      	adds	r3, #24
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	3304      	adds	r3, #4
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d102      	bne.n	800a770 <etharp_input+0x74>
    for_us = 0;
 800a76a:	2300      	movs	r3, #0
 800a76c:	75fb      	strb	r3, [r7, #23]
 800a76e:	e009      	b.n	800a784 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	3304      	adds	r3, #4
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	429a      	cmp	r2, r3
 800a77a:	bf0c      	ite	eq
 800a77c:	2301      	moveq	r3, #1
 800a77e:	2300      	movne	r3, #0
 800a780:	b2db      	uxtb	r3, r3
 800a782:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	f103 0208 	add.w	r2, r3, #8
 800a78a:	7dfb      	ldrb	r3, [r7, #23]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <etharp_input+0x98>
 800a790:	2301      	movs	r3, #1
 800a792:	e000      	b.n	800a796 <etharp_input+0x9a>
 800a794:	2302      	movs	r3, #2
 800a796:	f107 010c 	add.w	r1, r7, #12
 800a79a:	6838      	ldr	r0, [r7, #0]
 800a79c:	f7ff fed8 	bl	800a550 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	88db      	ldrh	r3, [r3, #6]
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7aa:	d003      	beq.n	800a7b4 <etharp_input+0xb8>
 800a7ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7b0:	d01e      	beq.n	800a7f0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800a7b2:	e025      	b.n	800a800 <etharp_input+0x104>
      if (for_us) {
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d021      	beq.n	800a7fe <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800a7d4:	2102      	movs	r1, #2
 800a7d6:	9103      	str	r1, [sp, #12]
 800a7d8:	f107 010c 	add.w	r1, r7, #12
 800a7dc:	9102      	str	r1, [sp, #8]
 800a7de:	9201      	str	r2, [sp, #4]
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	462b      	mov	r3, r5
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	4601      	mov	r1, r0
 800a7e8:	6838      	ldr	r0, [r7, #0]
 800a7ea:	f000 faef 	bl	800adcc <etharp_raw>
      break;
 800a7ee:	e006      	b.n	800a7fe <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800a7f0:	f107 030c 	add.w	r3, r7, #12
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6838      	ldr	r0, [r7, #0]
 800a7f8:	f7fe f9f2 	bl	8008be0 <dhcp_arp_reply>
      break;
 800a7fc:	e000      	b.n	800a800 <etharp_input+0x104>
      break;
 800a7fe:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f003 f9ed 	bl	800dbe0 <pbuf_free>
}
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bdb0      	pop	{r4, r5, r7, pc}
 800a80c:	080190d4 	.word	0x080190d4
 800a810:	08019260 	.word	0x08019260
 800a814:	08019188 	.word	0x08019188

0800a818 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af02      	add	r7, sp, #8
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	4613      	mov	r3, r2
 800a824:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a826:	79fa      	ldrb	r2, [r7, #7]
 800a828:	4944      	ldr	r1, [pc, #272]	; (800a93c <etharp_output_to_arp_index+0x124>)
 800a82a:	4613      	mov	r3, r2
 800a82c:	005b      	lsls	r3, r3, #1
 800a82e:	4413      	add	r3, r2
 800a830:	00db      	lsls	r3, r3, #3
 800a832:	440b      	add	r3, r1
 800a834:	3314      	adds	r3, #20
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d806      	bhi.n	800a84a <etharp_output_to_arp_index+0x32>
 800a83c:	4b40      	ldr	r3, [pc, #256]	; (800a940 <etharp_output_to_arp_index+0x128>)
 800a83e:	f240 22ef 	movw	r2, #751	; 0x2ef
 800a842:	4940      	ldr	r1, [pc, #256]	; (800a944 <etharp_output_to_arp_index+0x12c>)
 800a844:	4840      	ldr	r0, [pc, #256]	; (800a948 <etharp_output_to_arp_index+0x130>)
 800a846:	f00a fe45 	bl	80154d4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a84a:	79fa      	ldrb	r2, [r7, #7]
 800a84c:	493b      	ldr	r1, [pc, #236]	; (800a93c <etharp_output_to_arp_index+0x124>)
 800a84e:	4613      	mov	r3, r2
 800a850:	005b      	lsls	r3, r3, #1
 800a852:	4413      	add	r3, r2
 800a854:	00db      	lsls	r3, r3, #3
 800a856:	440b      	add	r3, r1
 800a858:	3314      	adds	r3, #20
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d153      	bne.n	800a908 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a860:	79fa      	ldrb	r2, [r7, #7]
 800a862:	4936      	ldr	r1, [pc, #216]	; (800a93c <etharp_output_to_arp_index+0x124>)
 800a864:	4613      	mov	r3, r2
 800a866:	005b      	lsls	r3, r3, #1
 800a868:	4413      	add	r3, r2
 800a86a:	00db      	lsls	r3, r3, #3
 800a86c:	440b      	add	r3, r1
 800a86e:	3312      	adds	r3, #18
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800a876:	d919      	bls.n	800a8ac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a878:	79fa      	ldrb	r2, [r7, #7]
 800a87a:	4613      	mov	r3, r2
 800a87c:	005b      	lsls	r3, r3, #1
 800a87e:	4413      	add	r3, r2
 800a880:	00db      	lsls	r3, r3, #3
 800a882:	4a2e      	ldr	r2, [pc, #184]	; (800a93c <etharp_output_to_arp_index+0x124>)
 800a884:	4413      	add	r3, r2
 800a886:	3304      	adds	r3, #4
 800a888:	4619      	mov	r1, r3
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f000 fb4c 	bl	800af28 <etharp_request>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d138      	bne.n	800a908 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a896:	79fa      	ldrb	r2, [r7, #7]
 800a898:	4928      	ldr	r1, [pc, #160]	; (800a93c <etharp_output_to_arp_index+0x124>)
 800a89a:	4613      	mov	r3, r2
 800a89c:	005b      	lsls	r3, r3, #1
 800a89e:	4413      	add	r3, r2
 800a8a0:	00db      	lsls	r3, r3, #3
 800a8a2:	440b      	add	r3, r1
 800a8a4:	3314      	adds	r3, #20
 800a8a6:	2203      	movs	r2, #3
 800a8a8:	701a      	strb	r2, [r3, #0]
 800a8aa:	e02d      	b.n	800a908 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800a8ac:	79fa      	ldrb	r2, [r7, #7]
 800a8ae:	4923      	ldr	r1, [pc, #140]	; (800a93c <etharp_output_to_arp_index+0x124>)
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	005b      	lsls	r3, r3, #1
 800a8b4:	4413      	add	r3, r2
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	440b      	add	r3, r1
 800a8ba:	3312      	adds	r3, #18
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a8c2:	d321      	bcc.n	800a908 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a8c4:	79fa      	ldrb	r2, [r7, #7]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	005b      	lsls	r3, r3, #1
 800a8ca:	4413      	add	r3, r2
 800a8cc:	00db      	lsls	r3, r3, #3
 800a8ce:	4a1b      	ldr	r2, [pc, #108]	; (800a93c <etharp_output_to_arp_index+0x124>)
 800a8d0:	4413      	add	r3, r2
 800a8d2:	1d19      	adds	r1, r3, #4
 800a8d4:	79fa      	ldrb	r2, [r7, #7]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	4413      	add	r3, r2
 800a8dc:	00db      	lsls	r3, r3, #3
 800a8de:	3308      	adds	r3, #8
 800a8e0:	4a16      	ldr	r2, [pc, #88]	; (800a93c <etharp_output_to_arp_index+0x124>)
 800a8e2:	4413      	add	r3, r2
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f000 fafb 	bl	800aee4 <etharp_request_dst>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d109      	bne.n	800a908 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a8f4:	79fa      	ldrb	r2, [r7, #7]
 800a8f6:	4911      	ldr	r1, [pc, #68]	; (800a93c <etharp_output_to_arp_index+0x124>)
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	005b      	lsls	r3, r3, #1
 800a8fc:	4413      	add	r3, r2
 800a8fe:	00db      	lsls	r3, r3, #3
 800a900:	440b      	add	r3, r1
 800a902:	3314      	adds	r3, #20
 800a904:	2203      	movs	r2, #3
 800a906:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800a90e:	79fa      	ldrb	r2, [r7, #7]
 800a910:	4613      	mov	r3, r2
 800a912:	005b      	lsls	r3, r3, #1
 800a914:	4413      	add	r3, r2
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	3308      	adds	r3, #8
 800a91a:	4a08      	ldr	r2, [pc, #32]	; (800a93c <etharp_output_to_arp_index+0x124>)
 800a91c:	4413      	add	r3, r2
 800a91e:	1d1a      	adds	r2, r3, #4
 800a920:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	4613      	mov	r3, r2
 800a928:	460a      	mov	r2, r1
 800a92a:	68b9      	ldr	r1, [r7, #8]
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f009 fef1 	bl	8014714 <ethernet_output>
 800a932:	4603      	mov	r3, r0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	20006788 	.word	0x20006788
 800a940:	080190d4 	.word	0x080190d4
 800a944:	08019280 	.word	0x08019280
 800a948:	08019188 	.word	0x08019188

0800a94c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b08a      	sub	sp, #40	; 0x28
 800a950:	af02      	add	r7, sp, #8
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d106      	bne.n	800a970 <etharp_output+0x24>
 800a962:	4b73      	ldr	r3, [pc, #460]	; (800ab30 <etharp_output+0x1e4>)
 800a964:	f240 321e 	movw	r2, #798	; 0x31e
 800a968:	4972      	ldr	r1, [pc, #456]	; (800ab34 <etharp_output+0x1e8>)
 800a96a:	4873      	ldr	r0, [pc, #460]	; (800ab38 <etharp_output+0x1ec>)
 800a96c:	f00a fdb2 	bl	80154d4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d106      	bne.n	800a984 <etharp_output+0x38>
 800a976:	4b6e      	ldr	r3, [pc, #440]	; (800ab30 <etharp_output+0x1e4>)
 800a978:	f240 321f 	movw	r2, #799	; 0x31f
 800a97c:	496f      	ldr	r1, [pc, #444]	; (800ab3c <etharp_output+0x1f0>)
 800a97e:	486e      	ldr	r0, [pc, #440]	; (800ab38 <etharp_output+0x1ec>)
 800a980:	f00a fda8 	bl	80154d4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d106      	bne.n	800a998 <etharp_output+0x4c>
 800a98a:	4b69      	ldr	r3, [pc, #420]	; (800ab30 <etharp_output+0x1e4>)
 800a98c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a990:	496b      	ldr	r1, [pc, #428]	; (800ab40 <etharp_output+0x1f4>)
 800a992:	4869      	ldr	r0, [pc, #420]	; (800ab38 <etharp_output+0x1ec>)
 800a994:	f00a fd9e 	bl	80154d4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68f9      	ldr	r1, [r7, #12]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 ff1e 	bl	800b7e0 <ip4_addr_isbroadcast_u32>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d002      	beq.n	800a9b0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800a9aa:	4b66      	ldr	r3, [pc, #408]	; (800ab44 <etharp_output+0x1f8>)
 800a9ac:	61fb      	str	r3, [r7, #28]
 800a9ae:	e0af      	b.n	800ab10 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9b8:	2be0      	cmp	r3, #224	; 0xe0
 800a9ba:	d118      	bne.n	800a9ee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800a9c4:	235e      	movs	r3, #94	; 0x5e
 800a9c6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	3302      	adds	r3, #2
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	3303      	adds	r3, #3
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800a9e6:	f107 0310 	add.w	r3, r7, #16
 800a9ea:	61fb      	str	r3, [r7, #28]
 800a9ec:	e090      	b.n	800ab10 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	405a      	eors	r2, r3
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	3308      	adds	r3, #8
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4013      	ands	r3, r2
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d012      	beq.n	800aa2c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800aa0c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d00b      	beq.n	800aa2c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	330c      	adds	r3, #12
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d003      	beq.n	800aa26 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	330c      	adds	r3, #12
 800aa22:	61bb      	str	r3, [r7, #24]
 800aa24:	e002      	b.n	800aa2c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800aa26:	f06f 0303 	mvn.w	r3, #3
 800aa2a:	e07d      	b.n	800ab28 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800aa2c:	4b46      	ldr	r3, [pc, #280]	; (800ab48 <etharp_output+0x1fc>)
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	4619      	mov	r1, r3
 800aa32:	4a46      	ldr	r2, [pc, #280]	; (800ab4c <etharp_output+0x200>)
 800aa34:	460b      	mov	r3, r1
 800aa36:	005b      	lsls	r3, r3, #1
 800aa38:	440b      	add	r3, r1
 800aa3a:	00db      	lsls	r3, r3, #3
 800aa3c:	4413      	add	r3, r2
 800aa3e:	3314      	adds	r3, #20
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d925      	bls.n	800aa92 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800aa46:	4b40      	ldr	r3, [pc, #256]	; (800ab48 <etharp_output+0x1fc>)
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	4a3f      	ldr	r2, [pc, #252]	; (800ab4c <etharp_output+0x200>)
 800aa4e:	460b      	mov	r3, r1
 800aa50:	005b      	lsls	r3, r3, #1
 800aa52:	440b      	add	r3, r1
 800aa54:	00db      	lsls	r3, r3, #3
 800aa56:	4413      	add	r3, r2
 800aa58:	3308      	adds	r3, #8
 800aa5a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d117      	bne.n	800aa92 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	4b38      	ldr	r3, [pc, #224]	; (800ab48 <etharp_output+0x1fc>)
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	4937      	ldr	r1, [pc, #220]	; (800ab4c <etharp_output+0x200>)
 800aa6e:	4603      	mov	r3, r0
 800aa70:	005b      	lsls	r3, r3, #1
 800aa72:	4403      	add	r3, r0
 800aa74:	00db      	lsls	r3, r3, #3
 800aa76:	440b      	add	r3, r1
 800aa78:	3304      	adds	r3, #4
 800aa7a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d108      	bne.n	800aa92 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800aa80:	4b31      	ldr	r3, [pc, #196]	; (800ab48 <etharp_output+0x1fc>)
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	461a      	mov	r2, r3
 800aa86:	68b9      	ldr	r1, [r7, #8]
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f7ff fec5 	bl	800a818 <etharp_output_to_arp_index>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	e04a      	b.n	800ab28 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800aa92:	2300      	movs	r3, #0
 800aa94:	75fb      	strb	r3, [r7, #23]
 800aa96:	e031      	b.n	800aafc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800aa98:	7dfa      	ldrb	r2, [r7, #23]
 800aa9a:	492c      	ldr	r1, [pc, #176]	; (800ab4c <etharp_output+0x200>)
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	005b      	lsls	r3, r3, #1
 800aaa0:	4413      	add	r3, r2
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	440b      	add	r3, r1
 800aaa6:	3314      	adds	r3, #20
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d923      	bls.n	800aaf6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800aaae:	7dfa      	ldrb	r2, [r7, #23]
 800aab0:	4926      	ldr	r1, [pc, #152]	; (800ab4c <etharp_output+0x200>)
 800aab2:	4613      	mov	r3, r2
 800aab4:	005b      	lsls	r3, r3, #1
 800aab6:	4413      	add	r3, r2
 800aab8:	00db      	lsls	r3, r3, #3
 800aaba:	440b      	add	r3, r1
 800aabc:	3308      	adds	r3, #8
 800aabe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d117      	bne.n	800aaf6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	6819      	ldr	r1, [r3, #0]
 800aaca:	7dfa      	ldrb	r2, [r7, #23]
 800aacc:	481f      	ldr	r0, [pc, #124]	; (800ab4c <etharp_output+0x200>)
 800aace:	4613      	mov	r3, r2
 800aad0:	005b      	lsls	r3, r3, #1
 800aad2:	4413      	add	r3, r2
 800aad4:	00db      	lsls	r3, r3, #3
 800aad6:	4403      	add	r3, r0
 800aad8:	3304      	adds	r3, #4
 800aada:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800aadc:	4299      	cmp	r1, r3
 800aade:	d10a      	bne.n	800aaf6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800aae0:	4a19      	ldr	r2, [pc, #100]	; (800ab48 <etharp_output+0x1fc>)
 800aae2:	7dfb      	ldrb	r3, [r7, #23]
 800aae4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
 800aae8:	461a      	mov	r2, r3
 800aaea:	68b9      	ldr	r1, [r7, #8]
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f7ff fe93 	bl	800a818 <etharp_output_to_arp_index>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	e018      	b.n	800ab28 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800aaf6:	7dfb      	ldrb	r3, [r7, #23]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	75fb      	strb	r3, [r7, #23]
 800aafc:	7dfb      	ldrb	r3, [r7, #23]
 800aafe:	2b09      	cmp	r3, #9
 800ab00:	d9ca      	bls.n	800aa98 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	69b9      	ldr	r1, [r7, #24]
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f000 f822 	bl	800ab50 <etharp_query>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	e00b      	b.n	800ab28 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800ab16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	68b9      	ldr	r1, [r7, #8]
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f009 fdf7 	bl	8014714 <ethernet_output>
 800ab26:	4603      	mov	r3, r0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3720      	adds	r7, #32
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	080190d4 	.word	0x080190d4
 800ab34:	08019260 	.word	0x08019260
 800ab38:	08019188 	.word	0x08019188
 800ab3c:	080192b0 	.word	0x080192b0
 800ab40:	08019250 	.word	0x08019250
 800ab44:	0801be28 	.word	0x0801be28
 800ab48:	20006878 	.word	0x20006878
 800ab4c:	20006788 	.word	0x20006788

0800ab50 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b08c      	sub	sp, #48	; 0x30
 800ab54:	af02      	add	r7, sp, #8
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	332a      	adds	r3, #42	; 0x2a
 800ab60:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ab62:	23ff      	movs	r3, #255	; 0xff
 800ab64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68f9      	ldr	r1, [r7, #12]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 fe34 	bl	800b7e0 <ip4_addr_isbroadcast_u32>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10c      	bne.n	800ab98 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ab86:	2be0      	cmp	r3, #224	; 0xe0
 800ab88:	d006      	beq.n	800ab98 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d003      	beq.n	800ab98 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d102      	bne.n	800ab9e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ab98:	f06f 030f 	mvn.w	r3, #15
 800ab9c:	e102      	b.n	800ada4 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	2101      	movs	r1, #1
 800aba2:	68b8      	ldr	r0, [r7, #8]
 800aba4:	f7ff fb5c 	bl	800a260 <etharp_find_entry>
 800aba8:	4603      	mov	r3, r0
 800abaa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800abac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	da02      	bge.n	800abba <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800abb4:	8a7b      	ldrh	r3, [r7, #18]
 800abb6:	b25b      	sxtb	r3, r3
 800abb8:	e0f4      	b.n	800ada4 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800abba:	8a7b      	ldrh	r3, [r7, #18]
 800abbc:	2b7e      	cmp	r3, #126	; 0x7e
 800abbe:	d906      	bls.n	800abce <etharp_query+0x7e>
 800abc0:	4b7a      	ldr	r3, [pc, #488]	; (800adac <etharp_query+0x25c>)
 800abc2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800abc6:	497a      	ldr	r1, [pc, #488]	; (800adb0 <etharp_query+0x260>)
 800abc8:	487a      	ldr	r0, [pc, #488]	; (800adb4 <etharp_query+0x264>)
 800abca:	f00a fc83 	bl	80154d4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800abce:	8a7b      	ldrh	r3, [r7, #18]
 800abd0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800abd2:	7c7a      	ldrb	r2, [r7, #17]
 800abd4:	4978      	ldr	r1, [pc, #480]	; (800adb8 <etharp_query+0x268>)
 800abd6:	4613      	mov	r3, r2
 800abd8:	005b      	lsls	r3, r3, #1
 800abda:	4413      	add	r3, r2
 800abdc:	00db      	lsls	r3, r3, #3
 800abde:	440b      	add	r3, r1
 800abe0:	3314      	adds	r3, #20
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d115      	bne.n	800ac14 <etharp_query+0xc4>
    is_new_entry = 1;
 800abe8:	2301      	movs	r3, #1
 800abea:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800abec:	7c7a      	ldrb	r2, [r7, #17]
 800abee:	4972      	ldr	r1, [pc, #456]	; (800adb8 <etharp_query+0x268>)
 800abf0:	4613      	mov	r3, r2
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	4413      	add	r3, r2
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	440b      	add	r3, r1
 800abfa:	3314      	adds	r3, #20
 800abfc:	2201      	movs	r2, #1
 800abfe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ac00:	7c7a      	ldrb	r2, [r7, #17]
 800ac02:	496d      	ldr	r1, [pc, #436]	; (800adb8 <etharp_query+0x268>)
 800ac04:	4613      	mov	r3, r2
 800ac06:	005b      	lsls	r3, r3, #1
 800ac08:	4413      	add	r3, r2
 800ac0a:	00db      	lsls	r3, r3, #3
 800ac0c:	440b      	add	r3, r1
 800ac0e:	3308      	adds	r3, #8
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ac14:	7c7a      	ldrb	r2, [r7, #17]
 800ac16:	4968      	ldr	r1, [pc, #416]	; (800adb8 <etharp_query+0x268>)
 800ac18:	4613      	mov	r3, r2
 800ac1a:	005b      	lsls	r3, r3, #1
 800ac1c:	4413      	add	r3, r2
 800ac1e:	00db      	lsls	r3, r3, #3
 800ac20:	440b      	add	r3, r1
 800ac22:	3314      	adds	r3, #20
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d011      	beq.n	800ac4e <etharp_query+0xfe>
 800ac2a:	7c7a      	ldrb	r2, [r7, #17]
 800ac2c:	4962      	ldr	r1, [pc, #392]	; (800adb8 <etharp_query+0x268>)
 800ac2e:	4613      	mov	r3, r2
 800ac30:	005b      	lsls	r3, r3, #1
 800ac32:	4413      	add	r3, r2
 800ac34:	00db      	lsls	r3, r3, #3
 800ac36:	440b      	add	r3, r1
 800ac38:	3314      	adds	r3, #20
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d806      	bhi.n	800ac4e <etharp_query+0xfe>
 800ac40:	4b5a      	ldr	r3, [pc, #360]	; (800adac <etharp_query+0x25c>)
 800ac42:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ac46:	495d      	ldr	r1, [pc, #372]	; (800adbc <etharp_query+0x26c>)
 800ac48:	485a      	ldr	r0, [pc, #360]	; (800adb4 <etharp_query+0x264>)
 800ac4a:	f00a fc43 	bl	80154d4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ac4e:	6a3b      	ldr	r3, [r7, #32]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d102      	bne.n	800ac5a <etharp_query+0x10a>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10c      	bne.n	800ac74 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ac5a:	68b9      	ldr	r1, [r7, #8]
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f000 f963 	bl	800af28 <etharp_request>
 800ac62:	4603      	mov	r3, r0
 800ac64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d102      	bne.n	800ac74 <etharp_query+0x124>
      return result;
 800ac6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac72:	e097      	b.n	800ada4 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d106      	bne.n	800ac88 <etharp_query+0x138>
 800ac7a:	4b4c      	ldr	r3, [pc, #304]	; (800adac <etharp_query+0x25c>)
 800ac7c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ac80:	494f      	ldr	r1, [pc, #316]	; (800adc0 <etharp_query+0x270>)
 800ac82:	484c      	ldr	r0, [pc, #304]	; (800adb4 <etharp_query+0x264>)
 800ac84:	f00a fc26 	bl	80154d4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ac88:	7c7a      	ldrb	r2, [r7, #17]
 800ac8a:	494b      	ldr	r1, [pc, #300]	; (800adb8 <etharp_query+0x268>)
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	005b      	lsls	r3, r3, #1
 800ac90:	4413      	add	r3, r2
 800ac92:	00db      	lsls	r3, r3, #3
 800ac94:	440b      	add	r3, r1
 800ac96:	3314      	adds	r3, #20
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d918      	bls.n	800acd0 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ac9e:	4a49      	ldr	r2, [pc, #292]	; (800adc4 <etharp_query+0x274>)
 800aca0:	7c7b      	ldrb	r3, [r7, #17]
 800aca2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800aca4:	7c7a      	ldrb	r2, [r7, #17]
 800aca6:	4613      	mov	r3, r2
 800aca8:	005b      	lsls	r3, r3, #1
 800acaa:	4413      	add	r3, r2
 800acac:	00db      	lsls	r3, r3, #3
 800acae:	3308      	adds	r3, #8
 800acb0:	4a41      	ldr	r2, [pc, #260]	; (800adb8 <etharp_query+0x268>)
 800acb2:	4413      	add	r3, r2
 800acb4:	1d1a      	adds	r2, r3, #4
 800acb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	4613      	mov	r3, r2
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	6879      	ldr	r1, [r7, #4]
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f009 fd26 	bl	8014714 <ethernet_output>
 800acc8:	4603      	mov	r3, r0
 800acca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800acce:	e067      	b.n	800ada0 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800acd0:	7c7a      	ldrb	r2, [r7, #17]
 800acd2:	4939      	ldr	r1, [pc, #228]	; (800adb8 <etharp_query+0x268>)
 800acd4:	4613      	mov	r3, r2
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	4413      	add	r3, r2
 800acda:	00db      	lsls	r3, r3, #3
 800acdc:	440b      	add	r3, r1
 800acde:	3314      	adds	r3, #20
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d15c      	bne.n	800ada0 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	61fb      	str	r3, [r7, #28]
    while (p) {
 800acee:	e01c      	b.n	800ad2a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	895a      	ldrh	r2, [r3, #10]
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	891b      	ldrh	r3, [r3, #8]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d10a      	bne.n	800ad12 <etharp_query+0x1c2>
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d006      	beq.n	800ad12 <etharp_query+0x1c2>
 800ad04:	4b29      	ldr	r3, [pc, #164]	; (800adac <etharp_query+0x25c>)
 800ad06:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ad0a:	492f      	ldr	r1, [pc, #188]	; (800adc8 <etharp_query+0x278>)
 800ad0c:	4829      	ldr	r0, [pc, #164]	; (800adb4 <etharp_query+0x264>)
 800ad0e:	f00a fbe1 	bl	80154d4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	7b1b      	ldrb	r3, [r3, #12]
 800ad16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d002      	beq.n	800ad24 <etharp_query+0x1d4>
        copy_needed = 1;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	61bb      	str	r3, [r7, #24]
        break;
 800ad22:	e005      	b.n	800ad30 <etharp_query+0x1e0>
      }
      p = p->next;
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1df      	bne.n	800acf0 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d007      	beq.n	800ad46 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ad3c:	200e      	movs	r0, #14
 800ad3e:	f003 f9c7 	bl	800e0d0 <pbuf_clone>
 800ad42:	61f8      	str	r0, [r7, #28]
 800ad44:	e004      	b.n	800ad50 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ad4a:	69f8      	ldr	r0, [r7, #28]
 800ad4c:	f002 ffee 	bl	800dd2c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d021      	beq.n	800ad9a <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ad56:	7c7a      	ldrb	r2, [r7, #17]
 800ad58:	4917      	ldr	r1, [pc, #92]	; (800adb8 <etharp_query+0x268>)
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	005b      	lsls	r3, r3, #1
 800ad5e:	4413      	add	r3, r2
 800ad60:	00db      	lsls	r3, r3, #3
 800ad62:	440b      	add	r3, r1
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d00a      	beq.n	800ad80 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ad6a:	7c7a      	ldrb	r2, [r7, #17]
 800ad6c:	4912      	ldr	r1, [pc, #72]	; (800adb8 <etharp_query+0x268>)
 800ad6e:	4613      	mov	r3, r2
 800ad70:	005b      	lsls	r3, r3, #1
 800ad72:	4413      	add	r3, r2
 800ad74:	00db      	lsls	r3, r3, #3
 800ad76:	440b      	add	r3, r1
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f002 ff30 	bl	800dbe0 <pbuf_free>
      }
      arp_table[i].q = p;
 800ad80:	7c7a      	ldrb	r2, [r7, #17]
 800ad82:	490d      	ldr	r1, [pc, #52]	; (800adb8 <etharp_query+0x268>)
 800ad84:	4613      	mov	r3, r2
 800ad86:	005b      	lsls	r3, r3, #1
 800ad88:	4413      	add	r3, r2
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	440b      	add	r3, r1
 800ad8e:	69fa      	ldr	r2, [r7, #28]
 800ad90:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ad98:	e002      	b.n	800ada0 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ad9a:	23ff      	movs	r3, #255	; 0xff
 800ad9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ada0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3728      	adds	r7, #40	; 0x28
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	080190d4 	.word	0x080190d4
 800adb0:	080192bc 	.word	0x080192bc
 800adb4:	08019188 	.word	0x08019188
 800adb8:	20006788 	.word	0x20006788
 800adbc:	080192cc 	.word	0x080192cc
 800adc0:	080192b0 	.word	0x080192b0
 800adc4:	20006878 	.word	0x20006878
 800adc8:	080192f4 	.word	0x080192f4

0800adcc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b08a      	sub	sp, #40	; 0x28
 800add0:	af02      	add	r7, sp, #8
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
 800add8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d106      	bne.n	800adf2 <etharp_raw+0x26>
 800ade4:	4b3a      	ldr	r3, [pc, #232]	; (800aed0 <etharp_raw+0x104>)
 800ade6:	f240 4257 	movw	r2, #1111	; 0x457
 800adea:	493a      	ldr	r1, [pc, #232]	; (800aed4 <etharp_raw+0x108>)
 800adec:	483a      	ldr	r0, [pc, #232]	; (800aed8 <etharp_raw+0x10c>)
 800adee:	f00a fb71 	bl	80154d4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800adf2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800adf6:	211c      	movs	r1, #28
 800adf8:	200e      	movs	r0, #14
 800adfa:	f002 fc11 	bl	800d620 <pbuf_alloc>
 800adfe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d102      	bne.n	800ae0c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ae06:	f04f 33ff 	mov.w	r3, #4294967295
 800ae0a:	e05d      	b.n	800aec8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	895b      	ldrh	r3, [r3, #10]
 800ae10:	2b1b      	cmp	r3, #27
 800ae12:	d806      	bhi.n	800ae22 <etharp_raw+0x56>
 800ae14:	4b2e      	ldr	r3, [pc, #184]	; (800aed0 <etharp_raw+0x104>)
 800ae16:	f240 4263 	movw	r2, #1123	; 0x463
 800ae1a:	4930      	ldr	r1, [pc, #192]	; (800aedc <etharp_raw+0x110>)
 800ae1c:	482e      	ldr	r0, [pc, #184]	; (800aed8 <etharp_raw+0x10c>)
 800ae1e:	f00a fb59 	bl	80154d4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ae28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f001 fb4e 	bl	800c4cc <lwip_htons>
 800ae30:	4603      	mov	r3, r0
 800ae32:	461a      	mov	r2, r3
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae3e:	2b06      	cmp	r3, #6
 800ae40:	d006      	beq.n	800ae50 <etharp_raw+0x84>
 800ae42:	4b23      	ldr	r3, [pc, #140]	; (800aed0 <etharp_raw+0x104>)
 800ae44:	f240 426a 	movw	r2, #1130	; 0x46a
 800ae48:	4925      	ldr	r1, [pc, #148]	; (800aee0 <etharp_raw+0x114>)
 800ae4a:	4823      	ldr	r0, [pc, #140]	; (800aed8 <etharp_raw+0x10c>)
 800ae4c:	f00a fb42 	bl	80154d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	3308      	adds	r3, #8
 800ae54:	2206      	movs	r2, #6
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f009 fe0a 	bl	8014a72 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	3312      	adds	r3, #18
 800ae62:	2206      	movs	r2, #6
 800ae64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae66:	4618      	mov	r0, r3
 800ae68:	f009 fe03 	bl	8014a72 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	330e      	adds	r3, #14
 800ae70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae72:	6812      	ldr	r2, [r2, #0]
 800ae74:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	3318      	adds	r3, #24
 800ae7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae7c:	6812      	ldr	r2, [r2, #0]
 800ae7e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	2200      	movs	r2, #0
 800ae84:	701a      	strb	r2, [r3, #0]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f042 0201 	orr.w	r2, r2, #1
 800ae8c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f042 0208 	orr.w	r2, r2, #8
 800ae96:	709a      	strb	r2, [r3, #2]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	2206      	movs	r2, #6
 800aea0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	2204      	movs	r2, #4
 800aea6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800aea8:	f640 0306 	movw	r3, #2054	; 0x806
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	69b9      	ldr	r1, [r7, #24]
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f009 fc2d 	bl	8014714 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800aeba:	69b8      	ldr	r0, [r7, #24]
 800aebc:	f002 fe90 	bl	800dbe0 <pbuf_free>
  p = NULL;
 800aec0:	2300      	movs	r3, #0
 800aec2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800aec4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3720      	adds	r7, #32
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	080190d4 	.word	0x080190d4
 800aed4:	08019260 	.word	0x08019260
 800aed8:	08019188 	.word	0x08019188
 800aedc:	08019310 	.word	0x08019310
 800aee0:	08019344 	.word	0x08019344

0800aee4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af04      	add	r7, sp, #16
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800af00:	2201      	movs	r2, #1
 800af02:	9203      	str	r2, [sp, #12]
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	9202      	str	r2, [sp, #8]
 800af08:	4a06      	ldr	r2, [pc, #24]	; (800af24 <etharp_request_dst+0x40>)
 800af0a:	9201      	str	r2, [sp, #4]
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	4603      	mov	r3, r0
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f7ff ff5a 	bl	800adcc <etharp_raw>
 800af18:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	0801be30 	.word	0x0801be30

0800af28 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800af32:	4a05      	ldr	r2, [pc, #20]	; (800af48 <etharp_request+0x20>)
 800af34:	6839      	ldr	r1, [r7, #0]
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f7ff ffd4 	bl	800aee4 <etharp_request_dst>
 800af3c:	4603      	mov	r3, r0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	0801be28 	.word	0x0801be28

0800af4c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b08e      	sub	sp, #56	; 0x38
 800af50:	af04      	add	r7, sp, #16
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800af56:	4b7e      	ldr	r3, [pc, #504]	; (800b150 <icmp_input+0x204>)
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800af5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	f003 030f 	and.w	r3, r3, #15
 800af64:	b2db      	uxtb	r3, r3
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800af6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af6e:	2b13      	cmp	r3, #19
 800af70:	f240 80d7 	bls.w	800b122 <icmp_input+0x1d6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	895b      	ldrh	r3, [r3, #10]
 800af78:	2b03      	cmp	r3, #3
 800af7a:	f240 80d4 	bls.w	800b126 <icmp_input+0x1da>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800af88:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 80c1 	beq.w	800b114 <icmp_input+0x1c8>
 800af92:	2b08      	cmp	r3, #8
 800af94:	f040 80c1 	bne.w	800b11a <icmp_input+0x1ce>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800af98:	4b6e      	ldr	r3, [pc, #440]	; (800b154 <icmp_input+0x208>)
 800af9a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800af9c:	4b6c      	ldr	r3, [pc, #432]	; (800b150 <icmp_input+0x204>)
 800af9e:	695b      	ldr	r3, [r3, #20]
 800afa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afa4:	2be0      	cmp	r3, #224	; 0xe0
 800afa6:	f000 80c5 	beq.w	800b134 <icmp_input+0x1e8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800afaa:	4b69      	ldr	r3, [pc, #420]	; (800b150 <icmp_input+0x204>)
 800afac:	695a      	ldr	r2, [r3, #20]
 800afae:	4b68      	ldr	r3, [pc, #416]	; (800b150 <icmp_input+0x204>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4619      	mov	r1, r3
 800afb4:	4610      	mov	r0, r2
 800afb6:	f000 fc13 	bl	800b7e0 <ip4_addr_isbroadcast_u32>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f040 80bb 	bne.w	800b138 <icmp_input+0x1ec>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	891b      	ldrh	r3, [r3, #8]
 800afc6:	2b07      	cmp	r3, #7
 800afc8:	f240 80af 	bls.w	800b12a <icmp_input+0x1de>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f001 fb08 	bl	800c5e2 <inet_chksum_pbuf>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d003      	beq.n	800afe0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f002 fe01 	bl	800dbe0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800afde:	e0b4      	b.n	800b14a <icmp_input+0x1fe>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800afe0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afe2:	330e      	adds	r3, #14
 800afe4:	4619      	mov	r1, r3
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f002 fd64 	bl	800dab4 <pbuf_add_header>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d04b      	beq.n	800b08a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	891a      	ldrh	r2, [r3, #8]
 800aff6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aff8:	4413      	add	r3, r2
 800affa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	891b      	ldrh	r3, [r3, #8]
 800b000:	8b7a      	ldrh	r2, [r7, #26]
 800b002:	429a      	cmp	r2, r3
 800b004:	f0c0 809a 	bcc.w	800b13c <icmp_input+0x1f0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800b008:	8b7b      	ldrh	r3, [r7, #26]
 800b00a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b00e:	4619      	mov	r1, r3
 800b010:	200e      	movs	r0, #14
 800b012:	f002 fb05 	bl	800d620 <pbuf_alloc>
 800b016:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f000 8090 	beq.w	800b140 <icmp_input+0x1f4>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	895b      	ldrh	r3, [r3, #10]
 800b024:	461a      	mov	r2, r3
 800b026:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b028:	3308      	adds	r3, #8
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d203      	bcs.n	800b036 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800b02e:	6978      	ldr	r0, [r7, #20]
 800b030:	f002 fdd6 	bl	800dbe0 <pbuf_free>
          goto icmperr;
 800b034:	e085      	b.n	800b142 <icmp_input+0x1f6>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b03c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b03e:	4618      	mov	r0, r3
 800b040:	f009 fd17 	bl	8014a72 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800b044:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b046:	4619      	mov	r1, r3
 800b048:	6978      	ldr	r0, [r7, #20]
 800b04a:	f002 fd43 	bl	800dad4 <pbuf_remove_header>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d009      	beq.n	800b068 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b054:	4b40      	ldr	r3, [pc, #256]	; (800b158 <icmp_input+0x20c>)
 800b056:	22b6      	movs	r2, #182	; 0xb6
 800b058:	4940      	ldr	r1, [pc, #256]	; (800b15c <icmp_input+0x210>)
 800b05a:	4841      	ldr	r0, [pc, #260]	; (800b160 <icmp_input+0x214>)
 800b05c:	f00a fa3a 	bl	80154d4 <iprintf>
          pbuf_free(r);
 800b060:	6978      	ldr	r0, [r7, #20]
 800b062:	f002 fdbd 	bl	800dbe0 <pbuf_free>
          goto icmperr;
 800b066:	e06c      	b.n	800b142 <icmp_input+0x1f6>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800b068:	6879      	ldr	r1, [r7, #4]
 800b06a:	6978      	ldr	r0, [r7, #20]
 800b06c:	f002 feec 	bl	800de48 <pbuf_copy>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d003      	beq.n	800b07e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800b076:	6978      	ldr	r0, [r7, #20]
 800b078:	f002 fdb2 	bl	800dbe0 <pbuf_free>
          goto icmperr;
 800b07c:	e061      	b.n	800b142 <icmp_input+0x1f6>
        }
        /* free the original p */
        pbuf_free(p);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f002 fdae 	bl	800dbe0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	607b      	str	r3, [r7, #4]
 800b088:	e00f      	b.n	800b0aa <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b08a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b08c:	330e      	adds	r3, #14
 800b08e:	4619      	mov	r1, r3
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f002 fd1f 	bl	800dad4 <pbuf_remove_header>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d006      	beq.n	800b0aa <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800b09c:	4b2e      	ldr	r3, [pc, #184]	; (800b158 <icmp_input+0x20c>)
 800b09e:	22c7      	movs	r2, #199	; 0xc7
 800b0a0:	4930      	ldr	r1, [pc, #192]	; (800b164 <icmp_input+0x218>)
 800b0a2:	482f      	ldr	r0, [pc, #188]	; (800b160 <icmp_input+0x214>)
 800b0a4:	f00a fa16 	bl	80154d4 <iprintf>
          goto icmperr;
 800b0a8:	e04b      	b.n	800b142 <icmp_input+0x1f6>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800b0b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f002 fcfd 	bl	800dab4 <pbuf_add_header>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d12b      	bne.n	800b118 <icmp_input+0x1cc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b0ce:	4b20      	ldr	r3, [pc, #128]	; (800b150 <icmp_input+0x204>)
 800b0d0:	691a      	ldr	r2, [r3, #16]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	709a      	strb	r2, [r3, #2]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	22ff      	movs	r2, #255	; 0xff
 800b0ea:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	729a      	strb	r2, [r3, #10]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	9302      	str	r3, [sp, #8]
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	9301      	str	r3, [sp, #4]
 800b0fe:	2300      	movs	r3, #0
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	23ff      	movs	r3, #255	; 0xff
 800b104:	2200      	movs	r2, #0
 800b106:	69f9      	ldr	r1, [r7, #28]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 fa91 	bl	800b630 <ip4_output_if>
 800b10e:	4603      	mov	r3, r0
 800b110:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800b112:	e001      	b.n	800b118 <icmp_input+0x1cc>
      break;
 800b114:	bf00      	nop
 800b116:	e000      	b.n	800b11a <icmp_input+0x1ce>
      break;
 800b118:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f002 fd60 	bl	800dbe0 <pbuf_free>
  return;
 800b120:	e013      	b.n	800b14a <icmp_input+0x1fe>
    goto lenerr;
 800b122:	bf00      	nop
 800b124:	e002      	b.n	800b12c <icmp_input+0x1e0>
    goto lenerr;
 800b126:	bf00      	nop
 800b128:	e000      	b.n	800b12c <icmp_input+0x1e0>
        goto lenerr;
 800b12a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f002 fd57 	bl	800dbe0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b132:	e00a      	b.n	800b14a <icmp_input+0x1fe>
        goto icmperr;
 800b134:	bf00      	nop
 800b136:	e004      	b.n	800b142 <icmp_input+0x1f6>
        goto icmperr;
 800b138:	bf00      	nop
 800b13a:	e002      	b.n	800b142 <icmp_input+0x1f6>
          goto icmperr;
 800b13c:	bf00      	nop
 800b13e:	e000      	b.n	800b142 <icmp_input+0x1f6>
          goto icmperr;
 800b140:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f002 fd4c 	bl	800dbe0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b148:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800b14a:	3728      	adds	r7, #40	; 0x28
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	20006a84 	.word	0x20006a84
 800b154:	20006a98 	.word	0x20006a98
 800b158:	08019388 	.word	0x08019388
 800b15c:	080193f8 	.word	0x080193f8
 800b160:	08019430 	.word	0x08019430
 800b164:	08019458 	.word	0x08019458

0800b168 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	460b      	mov	r3, r1
 800b172:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800b174:	78fb      	ldrb	r3, [r7, #3]
 800b176:	461a      	mov	r2, r3
 800b178:	2103      	movs	r1, #3
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 f814 	bl	800b1a8 <icmp_send_response>
}
 800b180:	bf00      	nop
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	460b      	mov	r3, r1
 800b192:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800b194:	78fb      	ldrb	r3, [r7, #3]
 800b196:	461a      	mov	r2, r3
 800b198:	210b      	movs	r1, #11
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f804 	bl	800b1a8 <icmp_send_response>
}
 800b1a0:	bf00      	nop
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b08c      	sub	sp, #48	; 0x30
 800b1ac:	af04      	add	r7, sp, #16
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	70fb      	strb	r3, [r7, #3]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b1b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b1bc:	2124      	movs	r1, #36	; 0x24
 800b1be:	2022      	movs	r0, #34	; 0x22
 800b1c0:	f002 fa2e 	bl	800d620 <pbuf_alloc>
 800b1c4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d04c      	beq.n	800b266 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	895b      	ldrh	r3, [r3, #10]
 800b1d0:	2b23      	cmp	r3, #35	; 0x23
 800b1d2:	d806      	bhi.n	800b1e2 <icmp_send_response+0x3a>
 800b1d4:	4b26      	ldr	r3, [pc, #152]	; (800b270 <icmp_send_response+0xc8>)
 800b1d6:	f240 1269 	movw	r2, #361	; 0x169
 800b1da:	4926      	ldr	r1, [pc, #152]	; (800b274 <icmp_send_response+0xcc>)
 800b1dc:	4826      	ldr	r0, [pc, #152]	; (800b278 <icmp_send_response+0xd0>)
 800b1de:	f00a f979 	bl	80154d4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	78fa      	ldrb	r2, [r7, #3]
 800b1f2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	78ba      	ldrb	r2, [r7, #2]
 800b1f8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	711a      	strb	r2, [r3, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	2200      	movs	r2, #0
 800b208:	719a      	strb	r2, [r3, #6]
 800b20a:	2200      	movs	r2, #0
 800b20c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	f103 0008 	add.w	r0, r3, #8
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	221c      	movs	r2, #28
 800b21c:	4619      	mov	r1, r3
 800b21e:	f009 fc28 	bl	8014a72 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800b228:	f107 030c 	add.w	r3, r7, #12
 800b22c:	4618      	mov	r0, r3
 800b22e:	f000 f825 	bl	800b27c <ip4_route>
 800b232:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d011      	beq.n	800b25e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	2200      	movs	r2, #0
 800b23e:	709a      	strb	r2, [r3, #2]
 800b240:	2200      	movs	r2, #0
 800b242:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800b244:	f107 020c 	add.w	r2, r7, #12
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	9302      	str	r3, [sp, #8]
 800b24c:	2301      	movs	r3, #1
 800b24e:	9301      	str	r3, [sp, #4]
 800b250:	2300      	movs	r3, #0
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	23ff      	movs	r3, #255	; 0xff
 800b256:	2100      	movs	r1, #0
 800b258:	69f8      	ldr	r0, [r7, #28]
 800b25a:	f000 f9e9 	bl	800b630 <ip4_output_if>
  }
  pbuf_free(q);
 800b25e:	69f8      	ldr	r0, [r7, #28]
 800b260:	f002 fcbe 	bl	800dbe0 <pbuf_free>
 800b264:	e000      	b.n	800b268 <icmp_send_response+0xc0>
    return;
 800b266:	bf00      	nop
}
 800b268:	3720      	adds	r7, #32
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	08019388 	.word	0x08019388
 800b274:	0801948c 	.word	0x0801948c
 800b278:	08019430 	.word	0x08019430

0800b27c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800b284:	4b33      	ldr	r3, [pc, #204]	; (800b354 <ip4_route+0xd8>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	60fb      	str	r3, [r7, #12]
 800b28a:	e036      	b.n	800b2fa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d02b      	beq.n	800b2f4 <ip4_route+0x78>
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2a2:	089b      	lsrs	r3, r3, #2
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d022      	beq.n	800b2f4 <ip4_route+0x78>
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d01d      	beq.n	800b2f4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	3304      	adds	r3, #4
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	405a      	eors	r2, r3
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	3308      	adds	r3, #8
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4013      	ands	r3, r2
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d101      	bne.n	800b2d4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	e038      	b.n	800b346 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2da:	f003 0302 	and.w	r3, r3, #2
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d108      	bne.n	800b2f4 <ip4_route+0x78>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	330c      	adds	r3, #12
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d101      	bne.n	800b2f4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	e028      	b.n	800b346 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	60fb      	str	r3, [r7, #12]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1c5      	bne.n	800b28c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b300:	4b15      	ldr	r3, [pc, #84]	; (800b358 <ip4_route+0xdc>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d01a      	beq.n	800b33e <ip4_route+0xc2>
 800b308:	4b13      	ldr	r3, [pc, #76]	; (800b358 <ip4_route+0xdc>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b310:	f003 0301 	and.w	r3, r3, #1
 800b314:	2b00      	cmp	r3, #0
 800b316:	d012      	beq.n	800b33e <ip4_route+0xc2>
 800b318:	4b0f      	ldr	r3, [pc, #60]	; (800b358 <ip4_route+0xdc>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b320:	f003 0304 	and.w	r3, r3, #4
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00a      	beq.n	800b33e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b328:	4b0b      	ldr	r3, [pc, #44]	; (800b358 <ip4_route+0xdc>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	3304      	adds	r3, #4
 800b32e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b330:	2b00      	cmp	r3, #0
 800b332:	d004      	beq.n	800b33e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	2b7f      	cmp	r3, #127	; 0x7f
 800b33c:	d101      	bne.n	800b342 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800b33e:	2300      	movs	r3, #0
 800b340:	e001      	b.n	800b346 <ip4_route+0xca>
  }

  return netif_default;
 800b342:	4b05      	ldr	r3, [pc, #20]	; (800b358 <ip4_route+0xdc>)
 800b344:	681b      	ldr	r3, [r3, #0]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3714      	adds	r7, #20
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop
 800b354:	2000cfb8 	.word	0x2000cfb8
 800b358:	2000cfbc 	.word	0x2000cfbc

0800b35c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b36a:	f003 0301 	and.w	r3, r3, #1
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	2b00      	cmp	r3, #0
 800b372:	d016      	beq.n	800b3a2 <ip4_input_accept+0x46>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	3304      	adds	r3, #4
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d011      	beq.n	800b3a2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b37e:	4b0b      	ldr	r3, [pc, #44]	; (800b3ac <ip4_input_accept+0x50>)
 800b380:	695a      	ldr	r2, [r3, #20]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	3304      	adds	r3, #4
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d008      	beq.n	800b39e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800b38c:	4b07      	ldr	r3, [pc, #28]	; (800b3ac <ip4_input_accept+0x50>)
 800b38e:	695b      	ldr	r3, [r3, #20]
 800b390:	6879      	ldr	r1, [r7, #4]
 800b392:	4618      	mov	r0, r3
 800b394:	f000 fa24 	bl	800b7e0 <ip4_addr_isbroadcast_u32>
 800b398:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e000      	b.n	800b3a4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	20006a84 	.word	0x20006a84

0800b3b0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b088      	sub	sp, #32
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	091b      	lsrs	r3, r3, #4
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	2b04      	cmp	r3, #4
 800b3ce:	d004      	beq.n	800b3da <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f002 fc05 	bl	800dbe0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	e121      	b.n	800b61e <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	f003 030f 	and.w	r3, r3, #15
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	885b      	ldrh	r3, [r3, #2]
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f001 f86b 	bl	800c4cc <lwip_htons>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	891b      	ldrh	r3, [r3, #8]
 800b3fe:	8a3a      	ldrh	r2, [r7, #16]
 800b400:	429a      	cmp	r2, r3
 800b402:	d204      	bcs.n	800b40e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800b404:	8a3b      	ldrh	r3, [r7, #16]
 800b406:	4619      	mov	r1, r3
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f002 fa63 	bl	800d8d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	895b      	ldrh	r3, [r3, #10]
 800b412:	8a7a      	ldrh	r2, [r7, #18]
 800b414:	429a      	cmp	r2, r3
 800b416:	d807      	bhi.n	800b428 <ip4_input+0x78>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	891b      	ldrh	r3, [r3, #8]
 800b41c:	8a3a      	ldrh	r2, [r7, #16]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d802      	bhi.n	800b428 <ip4_input+0x78>
 800b422:	8a7b      	ldrh	r3, [r7, #18]
 800b424:	2b13      	cmp	r3, #19
 800b426:	d804      	bhi.n	800b432 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f002 fbd9 	bl	800dbe0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	e0f5      	b.n	800b61e <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	4a7c      	ldr	r2, [pc, #496]	; (800b628 <ip4_input+0x278>)
 800b438:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	4a7a      	ldr	r2, [pc, #488]	; (800b628 <ip4_input+0x278>)
 800b440:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b442:	4b79      	ldr	r3, [pc, #484]	; (800b628 <ip4_input+0x278>)
 800b444:	695b      	ldr	r3, [r3, #20]
 800b446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b44a:	2be0      	cmp	r3, #224	; 0xe0
 800b44c:	d112      	bne.n	800b474 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b454:	f003 0301 	and.w	r3, r3, #1
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d007      	beq.n	800b46e <ip4_input+0xbe>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	3304      	adds	r3, #4
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <ip4_input+0xbe>
      netif = inp;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	61bb      	str	r3, [r7, #24]
 800b46c:	e02a      	b.n	800b4c4 <ip4_input+0x114>
    } else {
      netif = NULL;
 800b46e:	2300      	movs	r3, #0
 800b470:	61bb      	str	r3, [r7, #24]
 800b472:	e027      	b.n	800b4c4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800b474:	6838      	ldr	r0, [r7, #0]
 800b476:	f7ff ff71 	bl	800b35c <ip4_input_accept>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <ip4_input+0xd6>
      netif = inp;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	61bb      	str	r3, [r7, #24]
 800b484:	e01e      	b.n	800b4c4 <ip4_input+0x114>
    } else {
      netif = NULL;
 800b486:	2300      	movs	r3, #0
 800b488:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800b48a:	4b67      	ldr	r3, [pc, #412]	; (800b628 <ip4_input+0x278>)
 800b48c:	695b      	ldr	r3, [r3, #20]
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	2b7f      	cmp	r3, #127	; 0x7f
 800b492:	d017      	beq.n	800b4c4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800b494:	4b65      	ldr	r3, [pc, #404]	; (800b62c <ip4_input+0x27c>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	61bb      	str	r3, [r7, #24]
 800b49a:	e00e      	b.n	800b4ba <ip4_input+0x10a>
          if (netif == inp) {
 800b49c:	69ba      	ldr	r2, [r7, #24]
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d006      	beq.n	800b4b2 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800b4a4:	69b8      	ldr	r0, [r7, #24]
 800b4a6:	f7ff ff59 	bl	800b35c <ip4_input_accept>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d108      	bne.n	800b4c2 <ip4_input+0x112>
 800b4b0:	e000      	b.n	800b4b4 <ip4_input+0x104>
            continue;
 800b4b2:	bf00      	nop
        NETIF_FOREACH(netif) {
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	61bb      	str	r3, [r7, #24]
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d1ed      	bne.n	800b49c <ip4_input+0xec>
 800b4c0:	e000      	b.n	800b4c4 <ip4_input+0x114>
            break;
 800b4c2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d111      	bne.n	800b4ee <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	7a5b      	ldrb	r3, [r3, #9]
 800b4ce:	2b11      	cmp	r3, #17
 800b4d0:	d10d      	bne.n	800b4ee <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800b4d2:	8a7b      	ldrh	r3, [r7, #18]
 800b4d4:	69fa      	ldr	r2, [r7, #28]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	885b      	ldrh	r3, [r3, #2]
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800b4e4:	d103      	bne.n	800b4ee <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d017      	beq.n	800b524 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800b4f4:	4b4c      	ldr	r3, [pc, #304]	; (800b628 <ip4_input+0x278>)
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d013      	beq.n	800b524 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b4fc:	4b4a      	ldr	r3, [pc, #296]	; (800b628 <ip4_input+0x278>)
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	4618      	mov	r0, r3
 800b504:	f000 f96c 	bl	800b7e0 <ip4_addr_isbroadcast_u32>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d105      	bne.n	800b51a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800b50e:	4b46      	ldr	r3, [pc, #280]	; (800b628 <ip4_input+0x278>)
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b516:	2be0      	cmp	r3, #224	; 0xe0
 800b518:	d104      	bne.n	800b524 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f002 fb60 	bl	800dbe0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800b520:	2300      	movs	r3, #0
 800b522:	e07c      	b.n	800b61e <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d104      	bne.n	800b534 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f002 fb58 	bl	800dbe0 <pbuf_free>
    return ERR_OK;
 800b530:	2300      	movs	r3, #0
 800b532:	e074      	b.n	800b61e <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	88db      	ldrh	r3, [r3, #6]
 800b538:	b29b      	uxth	r3, r3
 800b53a:	461a      	mov	r2, r3
 800b53c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800b540:	4013      	ands	r3, r2
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00b      	beq.n	800b55e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fc90 	bl	800be6c <ip4_reass>
 800b54c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d101      	bne.n	800b558 <ip4_input+0x1a8>
      return ERR_OK;
 800b554:	2300      	movs	r3, #0
 800b556:	e062      	b.n	800b61e <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800b55e:	4a32      	ldr	r2, [pc, #200]	; (800b628 <ip4_input+0x278>)
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800b564:	4a30      	ldr	r2, [pc, #192]	; (800b628 <ip4_input+0x278>)
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b56a:	4a2f      	ldr	r2, [pc, #188]	; (800b628 <ip4_input+0x278>)
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	f003 030f 	and.w	r3, r3, #15
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	b29a      	uxth	r2, r3
 800b580:	4b29      	ldr	r3, [pc, #164]	; (800b628 <ip4_input+0x278>)
 800b582:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800b584:	8a7b      	ldrh	r3, [r7, #18]
 800b586:	4619      	mov	r1, r3
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f002 faa3 	bl	800dad4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	7a5b      	ldrb	r3, [r3, #9]
 800b592:	2b06      	cmp	r3, #6
 800b594:	d009      	beq.n	800b5aa <ip4_input+0x1fa>
 800b596:	2b11      	cmp	r3, #17
 800b598:	d002      	beq.n	800b5a0 <ip4_input+0x1f0>
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d00a      	beq.n	800b5b4 <ip4_input+0x204>
 800b59e:	e00e      	b.n	800b5be <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800b5a0:	6839      	ldr	r1, [r7, #0]
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f008 fc1a 	bl	8013ddc <udp_input>
        break;
 800b5a8:	e026      	b.n	800b5f8 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800b5aa:	6839      	ldr	r1, [r7, #0]
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f004 fb7f 	bl	800fcb0 <tcp_input>
        break;
 800b5b2:	e021      	b.n	800b5f8 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f7ff fcc8 	bl	800af4c <icmp_input>
        break;
 800b5bc:	e01c      	b.n	800b5f8 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b5be:	4b1a      	ldr	r3, [pc, #104]	; (800b628 <ip4_input+0x278>)
 800b5c0:	695b      	ldr	r3, [r3, #20]
 800b5c2:	69b9      	ldr	r1, [r7, #24]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f000 f90b 	bl	800b7e0 <ip4_addr_isbroadcast_u32>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10f      	bne.n	800b5f0 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b5d0:	4b15      	ldr	r3, [pc, #84]	; (800b628 <ip4_input+0x278>)
 800b5d2:	695b      	ldr	r3, [r3, #20]
 800b5d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b5d8:	2be0      	cmp	r3, #224	; 0xe0
 800b5da:	d009      	beq.n	800b5f0 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800b5dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f002 fae9 	bl	800dbba <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800b5e8:	2102      	movs	r1, #2
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7ff fdbc 	bl	800b168 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f002 faf5 	bl	800dbe0 <pbuf_free>
        break;
 800b5f6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800b5f8:	4b0b      	ldr	r3, [pc, #44]	; (800b628 <ip4_input+0x278>)
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800b5fe:	4b0a      	ldr	r3, [pc, #40]	; (800b628 <ip4_input+0x278>)
 800b600:	2200      	movs	r2, #0
 800b602:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800b604:	4b08      	ldr	r3, [pc, #32]	; (800b628 <ip4_input+0x278>)
 800b606:	2200      	movs	r2, #0
 800b608:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800b60a:	4b07      	ldr	r3, [pc, #28]	; (800b628 <ip4_input+0x278>)
 800b60c:	2200      	movs	r2, #0
 800b60e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800b610:	4b05      	ldr	r3, [pc, #20]	; (800b628 <ip4_input+0x278>)
 800b612:	2200      	movs	r2, #0
 800b614:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800b616:	4b04      	ldr	r3, [pc, #16]	; (800b628 <ip4_input+0x278>)
 800b618:	2200      	movs	r2, #0
 800b61a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3720      	adds	r7, #32
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	20006a84 	.word	0x20006a84
 800b62c:	2000cfb8 	.word	0x2000cfb8

0800b630 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b08a      	sub	sp, #40	; 0x28
 800b634:	af04      	add	r7, sp, #16
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
 800b63c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d009      	beq.n	800b65c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d003      	beq.n	800b656 <ip4_output_if+0x26>
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d102      	bne.n	800b65c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800b656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b658:	3304      	adds	r3, #4
 800b65a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800b65c:	78fa      	ldrb	r2, [r7, #3]
 800b65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b660:	9302      	str	r3, [sp, #8]
 800b662:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b666:	9301      	str	r3, [sp, #4]
 800b668:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	4613      	mov	r3, r2
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	6979      	ldr	r1, [r7, #20]
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f000 f805 	bl	800b684 <ip4_output_if_src>
 800b67a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3718      	adds	r7, #24
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b088      	sub	sp, #32
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
 800b690:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	7b9b      	ldrb	r3, [r3, #14]
 800b696:	2b01      	cmp	r3, #1
 800b698:	d006      	beq.n	800b6a8 <ip4_output_if_src+0x24>
 800b69a:	4b4b      	ldr	r3, [pc, #300]	; (800b7c8 <ip4_output_if_src+0x144>)
 800b69c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800b6a0:	494a      	ldr	r1, [pc, #296]	; (800b7cc <ip4_output_if_src+0x148>)
 800b6a2:	484b      	ldr	r0, [pc, #300]	; (800b7d0 <ip4_output_if_src+0x14c>)
 800b6a4:	f009 ff16 	bl	80154d4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d060      	beq.n	800b770 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800b6ae:	2314      	movs	r3, #20
 800b6b0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800b6b2:	2114      	movs	r1, #20
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	f002 f9fd 	bl	800dab4 <pbuf_add_header>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d002      	beq.n	800b6c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b6c0:	f06f 0301 	mvn.w	r3, #1
 800b6c4:	e07c      	b.n	800b7c0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	895b      	ldrh	r3, [r3, #10]
 800b6d0:	2b13      	cmp	r3, #19
 800b6d2:	d806      	bhi.n	800b6e2 <ip4_output_if_src+0x5e>
 800b6d4:	4b3c      	ldr	r3, [pc, #240]	; (800b7c8 <ip4_output_if_src+0x144>)
 800b6d6:	f240 3289 	movw	r2, #905	; 0x389
 800b6da:	493e      	ldr	r1, [pc, #248]	; (800b7d4 <ip4_output_if_src+0x150>)
 800b6dc:	483c      	ldr	r0, [pc, #240]	; (800b7d0 <ip4_output_if_src+0x14c>)
 800b6de:	f009 fef9 	bl	80154d4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	78fa      	ldrb	r2, [r7, #3]
 800b6e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b6ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800b6f8:	8b7b      	ldrh	r3, [r7, #26]
 800b6fa:	089b      	lsrs	r3, r3, #2
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b704:	b2da      	uxtb	r2, r3
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b710:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	891b      	ldrh	r3, [r3, #8]
 800b716:	4618      	mov	r0, r3
 800b718:	f000 fed8 	bl	800c4cc <lwip_htons>
 800b71c:	4603      	mov	r3, r0
 800b71e:	461a      	mov	r2, r3
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	2200      	movs	r2, #0
 800b728:	719a      	strb	r2, [r3, #6]
 800b72a:	2200      	movs	r2, #0
 800b72c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800b72e:	4b2a      	ldr	r3, [pc, #168]	; (800b7d8 <ip4_output_if_src+0x154>)
 800b730:	881b      	ldrh	r3, [r3, #0]
 800b732:	4618      	mov	r0, r3
 800b734:	f000 feca 	bl	800c4cc <lwip_htons>
 800b738:	4603      	mov	r3, r0
 800b73a:	461a      	mov	r2, r3
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800b740:	4b25      	ldr	r3, [pc, #148]	; (800b7d8 <ip4_output_if_src+0x154>)
 800b742:	881b      	ldrh	r3, [r3, #0]
 800b744:	3301      	adds	r3, #1
 800b746:	b29a      	uxth	r2, r3
 800b748:	4b23      	ldr	r3, [pc, #140]	; (800b7d8 <ip4_output_if_src+0x154>)
 800b74a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d104      	bne.n	800b75c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800b752:	4b22      	ldr	r3, [pc, #136]	; (800b7dc <ip4_output_if_src+0x158>)
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	60da      	str	r2, [r3, #12]
 800b75a:	e003      	b.n	800b764 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	69fb      	ldr	r3, [r7, #28]
 800b762:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	2200      	movs	r2, #0
 800b768:	729a      	strb	r2, [r3, #10]
 800b76a:	2200      	movs	r2, #0
 800b76c:	72da      	strb	r2, [r3, #11]
 800b76e:	e00f      	b.n	800b790 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	895b      	ldrh	r3, [r3, #10]
 800b774:	2b13      	cmp	r3, #19
 800b776:	d802      	bhi.n	800b77e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b778:	f06f 0301 	mvn.w	r3, #1
 800b77c:	e020      	b.n	800b7c0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	691b      	ldr	r3, [r3, #16]
 800b788:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800b78a:	f107 0314 	add.w	r3, r7, #20
 800b78e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800b790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b794:	2b00      	cmp	r3, #0
 800b796:	d00c      	beq.n	800b7b2 <ip4_output_if_src+0x12e>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	891a      	ldrh	r2, [r3, #8]
 800b79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d906      	bls.n	800b7b2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f000 fd4b 	bl	800c244 <ip4_frag>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	e006      	b.n	800b7c0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800b7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b4:	695b      	ldr	r3, [r3, #20]
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	68f9      	ldr	r1, [r7, #12]
 800b7ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7bc:	4798      	blx	r3
 800b7be:	4603      	mov	r3, r0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3720      	adds	r7, #32
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	080194b8 	.word	0x080194b8
 800b7cc:	08019528 	.word	0x08019528
 800b7d0:	08019534 	.word	0x08019534
 800b7d4:	0801955c 	.word	0x0801955c
 800b7d8:	2000687a 	.word	0x2000687a
 800b7dc:	0801958c 	.word	0x0801958c

0800b7e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f4:	d002      	beq.n	800b7fc <ip4_addr_isbroadcast_u32+0x1c>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d101      	bne.n	800b800 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	e02a      	b.n	800b856 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b806:	f003 0302 	and.w	r3, r3, #2
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d101      	bne.n	800b812 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800b80e:	2300      	movs	r3, #0
 800b810:	e021      	b.n	800b856 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	3304      	adds	r3, #4
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d101      	bne.n	800b822 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800b81e:	2300      	movs	r3, #0
 800b820:	e019      	b.n	800b856 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	3304      	adds	r3, #4
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	405a      	eors	r2, r3
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	3308      	adds	r3, #8
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4013      	ands	r3, r2
 800b834:	2b00      	cmp	r3, #0
 800b836:	d10d      	bne.n	800b854 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	3308      	adds	r3, #8
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	43da      	mvns	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	3308      	adds	r3, #8
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d101      	bne.n	800b854 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800b850:	2301      	movs	r3, #1
 800b852:	e000      	b.n	800b856 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800b854:	2300      	movs	r3, #0
  }
}
 800b856:	4618      	mov	r0, r3
 800b858:	3714      	adds	r7, #20
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
	...

0800b864 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800b86a:	2300      	movs	r3, #0
 800b86c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800b86e:	4b12      	ldr	r3, [pc, #72]	; (800b8b8 <ip_reass_tmr+0x54>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800b874:	e018      	b.n	800b8a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	7fdb      	ldrb	r3, [r3, #31]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00b      	beq.n	800b896 <ip_reass_tmr+0x32>
      r->timer--;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	7fdb      	ldrb	r3, [r3, #31]
 800b882:	3b01      	subs	r3, #1
 800b884:	b2da      	uxtb	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	60fb      	str	r3, [r7, #12]
 800b894:	e008      	b.n	800b8a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800b8a0:	68b9      	ldr	r1, [r7, #8]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f80a 	bl	800b8bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e3      	bne.n	800b876 <ip_reass_tmr+0x12>
    }
  }
}
 800b8ae:	bf00      	nop
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	2000687c 	.word	0x2000687c

0800b8bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b088      	sub	sp, #32
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800b8ca:	683a      	ldr	r2, [r7, #0]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d105      	bne.n	800b8de <ip_reass_free_complete_datagram+0x22>
 800b8d2:	4b45      	ldr	r3, [pc, #276]	; (800b9e8 <ip_reass_free_complete_datagram+0x12c>)
 800b8d4:	22ab      	movs	r2, #171	; 0xab
 800b8d6:	4945      	ldr	r1, [pc, #276]	; (800b9ec <ip_reass_free_complete_datagram+0x130>)
 800b8d8:	4845      	ldr	r0, [pc, #276]	; (800b9f0 <ip_reass_free_complete_datagram+0x134>)
 800b8da:	f009 fdfb 	bl	80154d4 <iprintf>
  if (prev != NULL) {
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00a      	beq.n	800b8fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d005      	beq.n	800b8fa <ip_reass_free_complete_datagram+0x3e>
 800b8ee:	4b3e      	ldr	r3, [pc, #248]	; (800b9e8 <ip_reass_free_complete_datagram+0x12c>)
 800b8f0:	22ad      	movs	r2, #173	; 0xad
 800b8f2:	4940      	ldr	r1, [pc, #256]	; (800b9f4 <ip_reass_free_complete_datagram+0x138>)
 800b8f4:	483e      	ldr	r0, [pc, #248]	; (800b9f0 <ip_reass_free_complete_datagram+0x134>)
 800b8f6:	f009 fded 	bl	80154d4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	889b      	ldrh	r3, [r3, #4]
 800b906:	b29b      	uxth	r3, r3
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d12a      	bne.n	800b962 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	6858      	ldr	r0, [r3, #4]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	3308      	adds	r3, #8
 800b922:	2214      	movs	r2, #20
 800b924:	4619      	mov	r1, r3
 800b926:	f009 f8a4 	bl	8014a72 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800b92a:	2101      	movs	r1, #1
 800b92c:	69b8      	ldr	r0, [r7, #24]
 800b92e:	f7ff fc2b 	bl	800b188 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800b932:	69b8      	ldr	r0, [r7, #24]
 800b934:	f002 f9e2 	bl	800dcfc <pbuf_clen>
 800b938:	4603      	mov	r3, r0
 800b93a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b93c:	8bfa      	ldrh	r2, [r7, #30]
 800b93e:	8a7b      	ldrh	r3, [r7, #18]
 800b940:	4413      	add	r3, r2
 800b942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b946:	db05      	blt.n	800b954 <ip_reass_free_complete_datagram+0x98>
 800b948:	4b27      	ldr	r3, [pc, #156]	; (800b9e8 <ip_reass_free_complete_datagram+0x12c>)
 800b94a:	22bc      	movs	r2, #188	; 0xbc
 800b94c:	492a      	ldr	r1, [pc, #168]	; (800b9f8 <ip_reass_free_complete_datagram+0x13c>)
 800b94e:	4828      	ldr	r0, [pc, #160]	; (800b9f0 <ip_reass_free_complete_datagram+0x134>)
 800b950:	f009 fdc0 	bl	80154d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800b954:	8bfa      	ldrh	r2, [r7, #30]
 800b956:	8a7b      	ldrh	r3, [r7, #18]
 800b958:	4413      	add	r3, r2
 800b95a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800b95c:	69b8      	ldr	r0, [r7, #24]
 800b95e:	f002 f93f 	bl	800dbe0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800b968:	e01f      	b.n	800b9aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f002 f9be 	bl	800dcfc <pbuf_clen>
 800b980:	4603      	mov	r3, r0
 800b982:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b984:	8bfa      	ldrh	r2, [r7, #30]
 800b986:	8a7b      	ldrh	r3, [r7, #18]
 800b988:	4413      	add	r3, r2
 800b98a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b98e:	db05      	blt.n	800b99c <ip_reass_free_complete_datagram+0xe0>
 800b990:	4b15      	ldr	r3, [pc, #84]	; (800b9e8 <ip_reass_free_complete_datagram+0x12c>)
 800b992:	22cc      	movs	r2, #204	; 0xcc
 800b994:	4918      	ldr	r1, [pc, #96]	; (800b9f8 <ip_reass_free_complete_datagram+0x13c>)
 800b996:	4816      	ldr	r0, [pc, #88]	; (800b9f0 <ip_reass_free_complete_datagram+0x134>)
 800b998:	f009 fd9c 	bl	80154d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800b99c:	8bfa      	ldrh	r2, [r7, #30]
 800b99e:	8a7b      	ldrh	r3, [r7, #18]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f002 f91b 	bl	800dbe0 <pbuf_free>
  while (p != NULL) {
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1dc      	bne.n	800b96a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800b9b0:	6839      	ldr	r1, [r7, #0]
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 f8c2 	bl	800bb3c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800b9b8:	4b10      	ldr	r3, [pc, #64]	; (800b9fc <ip_reass_free_complete_datagram+0x140>)
 800b9ba:	881b      	ldrh	r3, [r3, #0]
 800b9bc:	8bfa      	ldrh	r2, [r7, #30]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d905      	bls.n	800b9ce <ip_reass_free_complete_datagram+0x112>
 800b9c2:	4b09      	ldr	r3, [pc, #36]	; (800b9e8 <ip_reass_free_complete_datagram+0x12c>)
 800b9c4:	22d2      	movs	r2, #210	; 0xd2
 800b9c6:	490e      	ldr	r1, [pc, #56]	; (800ba00 <ip_reass_free_complete_datagram+0x144>)
 800b9c8:	4809      	ldr	r0, [pc, #36]	; (800b9f0 <ip_reass_free_complete_datagram+0x134>)
 800b9ca:	f009 fd83 	bl	80154d4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800b9ce:	4b0b      	ldr	r3, [pc, #44]	; (800b9fc <ip_reass_free_complete_datagram+0x140>)
 800b9d0:	881a      	ldrh	r2, [r3, #0]
 800b9d2:	8bfb      	ldrh	r3, [r7, #30]
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	4b08      	ldr	r3, [pc, #32]	; (800b9fc <ip_reass_free_complete_datagram+0x140>)
 800b9da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800b9dc:	8bfb      	ldrh	r3, [r7, #30]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3720      	adds	r7, #32
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	0801963c 	.word	0x0801963c
 800b9ec:	080196b0 	.word	0x080196b0
 800b9f0:	080196bc 	.word	0x080196bc
 800b9f4:	080196e4 	.word	0x080196e4
 800b9f8:	080196f8 	.word	0x080196f8
 800b9fc:	20006880 	.word	0x20006880
 800ba00:	08019718 	.word	0x08019718

0800ba04 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b08a      	sub	sp, #40	; 0x28
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ba12:	2300      	movs	r3, #0
 800ba14:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ba16:	2300      	movs	r3, #0
 800ba18:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ba22:	4b28      	ldr	r3, [pc, #160]	; (800bac4 <ip_reass_remove_oldest_datagram+0xc0>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ba28:	e030      	b.n	800ba8c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2c:	695a      	ldr	r2, [r3, #20]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d10c      	bne.n	800ba50 <ip_reass_remove_oldest_datagram+0x4c>
 800ba36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba38:	699a      	ldr	r2, [r3, #24]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	691b      	ldr	r3, [r3, #16]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d106      	bne.n	800ba50 <ip_reass_remove_oldest_datagram+0x4c>
 800ba42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba44:	899a      	ldrh	r2, [r3, #12]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	889b      	ldrh	r3, [r3, #4]
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d014      	beq.n	800ba7a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	3301      	adds	r3, #1
 800ba54:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ba56:	6a3b      	ldr	r3, [r7, #32]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d104      	bne.n	800ba66 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	61bb      	str	r3, [r7, #24]
 800ba64:	e009      	b.n	800ba7a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ba66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba68:	7fda      	ldrb	r2, [r3, #31]
 800ba6a:	6a3b      	ldr	r3, [r7, #32]
 800ba6c:	7fdb      	ldrb	r3, [r3, #31]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d803      	bhi.n	800ba7a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ba72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba74:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d001      	beq.n	800ba86 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ba82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba84:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ba86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1cb      	bne.n	800ba2a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ba92:	6a3b      	ldr	r3, [r7, #32]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d008      	beq.n	800baaa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ba98:	69b9      	ldr	r1, [r7, #24]
 800ba9a:	6a38      	ldr	r0, [r7, #32]
 800ba9c:	f7ff ff0e 	bl	800b8bc <ip_reass_free_complete_datagram>
 800baa0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800baa2:	697a      	ldr	r2, [r7, #20]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	4413      	add	r3, r2
 800baa8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800baaa:	697a      	ldr	r2, [r7, #20]
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	429a      	cmp	r2, r3
 800bab0:	da02      	bge.n	800bab8 <ip_reass_remove_oldest_datagram+0xb4>
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	dcac      	bgt.n	800ba12 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800bab8:	697b      	ldr	r3, [r7, #20]
}
 800baba:	4618      	mov	r0, r3
 800babc:	3728      	adds	r7, #40	; 0x28
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	2000687c 	.word	0x2000687c

0800bac8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800bad2:	2004      	movs	r0, #4
 800bad4:	f001 fa5a 	bl	800cf8c <memp_malloc>
 800bad8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d110      	bne.n	800bb02 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800bae0:	6839      	ldr	r1, [r7, #0]
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f7ff ff8e 	bl	800ba04 <ip_reass_remove_oldest_datagram>
 800bae8:	4602      	mov	r2, r0
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	4293      	cmp	r3, r2
 800baee:	dc03      	bgt.n	800baf8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800baf0:	2004      	movs	r0, #4
 800baf2:	f001 fa4b 	bl	800cf8c <memp_malloc>
 800baf6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d101      	bne.n	800bb02 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800bafe:	2300      	movs	r3, #0
 800bb00:	e016      	b.n	800bb30 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800bb02:	2220      	movs	r2, #32
 800bb04:	2100      	movs	r1, #0
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f008 ffd7 	bl	8014aba <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	220f      	movs	r2, #15
 800bb10:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800bb12:	4b09      	ldr	r3, [pc, #36]	; (800bb38 <ip_reass_enqueue_new_datagram+0x70>)
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800bb1a:	4a07      	ldr	r2, [pc, #28]	; (800bb38 <ip_reass_enqueue_new_datagram+0x70>)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	3308      	adds	r3, #8
 800bb24:	2214      	movs	r2, #20
 800bb26:	6879      	ldr	r1, [r7, #4]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f008 ffa2 	bl	8014a72 <memcpy>
  return ipr;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	2000687c 	.word	0x2000687c

0800bb3c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800bb46:	4b10      	ldr	r3, [pc, #64]	; (800bb88 <ip_reass_dequeue_datagram+0x4c>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d104      	bne.n	800bb5a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a0c      	ldr	r2, [pc, #48]	; (800bb88 <ip_reass_dequeue_datagram+0x4c>)
 800bb56:	6013      	str	r3, [r2, #0]
 800bb58:	e00d      	b.n	800bb76 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d106      	bne.n	800bb6e <ip_reass_dequeue_datagram+0x32>
 800bb60:	4b0a      	ldr	r3, [pc, #40]	; (800bb8c <ip_reass_dequeue_datagram+0x50>)
 800bb62:	f240 1245 	movw	r2, #325	; 0x145
 800bb66:	490a      	ldr	r1, [pc, #40]	; (800bb90 <ip_reass_dequeue_datagram+0x54>)
 800bb68:	480a      	ldr	r0, [pc, #40]	; (800bb94 <ip_reass_dequeue_datagram+0x58>)
 800bb6a:	f009 fcb3 	bl	80154d4 <iprintf>
    prev->next = ipr->next;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800bb76:	6879      	ldr	r1, [r7, #4]
 800bb78:	2004      	movs	r0, #4
 800bb7a:	f001 fa59 	bl	800d030 <memp_free>
}
 800bb7e:	bf00      	nop
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	2000687c 	.word	0x2000687c
 800bb8c:	0801963c 	.word	0x0801963c
 800bb90:	0801973c 	.word	0x0801973c
 800bb94:	080196bc 	.word	0x080196bc

0800bb98 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b08c      	sub	sp, #48	; 0x30
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800bba4:	2300      	movs	r3, #0
 800bba6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	885b      	ldrh	r3, [r3, #2]
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f000 fc87 	bl	800c4cc <lwip_htons>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	f003 030f 	and.w	r3, r3, #15
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800bbd0:	7e7b      	ldrb	r3, [r7, #25]
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	8b7a      	ldrh	r2, [r7, #26]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d202      	bcs.n	800bbe0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bbda:	f04f 33ff 	mov.w	r3, #4294967295
 800bbde:	e135      	b.n	800be4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800bbe0:	7e7b      	ldrb	r3, [r7, #25]
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	8b7a      	ldrh	r2, [r7, #26]
 800bbe6:	1ad3      	subs	r3, r2, r3
 800bbe8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	88db      	ldrh	r3, [r3, #6]
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f000 fc6b 	bl	800c4cc <lwip_htons>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	00db      	lsls	r3, r3, #3
 800bc00:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800bc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	701a      	strb	r2, [r3, #0]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	705a      	strb	r2, [r3, #1]
 800bc12:	2200      	movs	r2, #0
 800bc14:	709a      	strb	r2, [r3, #2]
 800bc16:	2200      	movs	r2, #0
 800bc18:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800bc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1c:	8afa      	ldrh	r2, [r7, #22]
 800bc1e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800bc20:	8afa      	ldrh	r2, [r7, #22]
 800bc22:	8b7b      	ldrh	r3, [r7, #26]
 800bc24:	4413      	add	r3, r2
 800bc26:	b29a      	uxth	r2, r3
 800bc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800bc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2e:	88db      	ldrh	r3, [r3, #6]
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	8afa      	ldrh	r2, [r7, #22]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d902      	bls.n	800bc3e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bc38:	f04f 33ff 	mov.w	r3, #4294967295
 800bc3c:	e106      	b.n	800be4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	627b      	str	r3, [r7, #36]	; 0x24
 800bc44:	e068      	b.n	800bd18 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800bc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800bc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4e:	889b      	ldrh	r3, [r3, #4]
 800bc50:	b29a      	uxth	r2, r3
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	889b      	ldrh	r3, [r3, #4]
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d235      	bcs.n	800bcc8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800bc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc60:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800bc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d020      	beq.n	800bcaa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800bc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6a:	889b      	ldrh	r3, [r3, #4]
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc70:	88db      	ldrh	r3, [r3, #6]
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d307      	bcc.n	800bc88 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800bc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7a:	88db      	ldrh	r3, [r3, #6]
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	889b      	ldrh	r3, [r3, #4]
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d902      	bls.n	800bc8e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bc88:	f04f 33ff 	mov.w	r3, #4294967295
 800bc8c:	e0de      	b.n	800be4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800bc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc90:	68ba      	ldr	r2, [r7, #8]
 800bc92:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800bc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc96:	88db      	ldrh	r3, [r3, #6]
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9c:	889b      	ldrh	r3, [r3, #4]
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d03d      	beq.n	800bd20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800bca8:	e03a      	b.n	800bd20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800bcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcac:	88db      	ldrh	r3, [r3, #6]
 800bcae:	b29a      	uxth	r2, r3
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	889b      	ldrh	r3, [r3, #4]
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d902      	bls.n	800bcc0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bcba:	f04f 33ff 	mov.w	r3, #4294967295
 800bcbe:	e0c5      	b.n	800be4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	605a      	str	r2, [r3, #4]
      break;
 800bcc6:	e02b      	b.n	800bd20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800bcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcca:	889b      	ldrh	r3, [r3, #4]
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	889b      	ldrh	r3, [r3, #4]
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d102      	bne.n	800bcde <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bcd8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcdc:	e0b6      	b.n	800be4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800bcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce0:	889b      	ldrh	r3, [r3, #4]
 800bce2:	b29a      	uxth	r2, r3
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	88db      	ldrh	r3, [r3, #6]
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d202      	bcs.n	800bcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bcee:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf2:	e0ab      	b.n	800be4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800bcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d009      	beq.n	800bd0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800bcfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfc:	88db      	ldrh	r3, [r3, #6]
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	889b      	ldrh	r3, [r3, #4]
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d001      	beq.n	800bd0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800bd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d193      	bne.n	800bc46 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800bd1e:	e000      	b.n	800bd22 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800bd20:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800bd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d12d      	bne.n	800bd84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d01c      	beq.n	800bd68 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	88db      	ldrh	r3, [r3, #6]
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd36:	889b      	ldrh	r3, [r3, #4]
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d906      	bls.n	800bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800bd3e:	4b45      	ldr	r3, [pc, #276]	; (800be54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bd40:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800bd44:	4944      	ldr	r1, [pc, #272]	; (800be58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800bd46:	4845      	ldr	r0, [pc, #276]	; (800be5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bd48:	f009 fbc4 	bl	80154d4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800bd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4e:	68ba      	ldr	r2, [r7, #8]
 800bd50:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800bd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd54:	88db      	ldrh	r3, [r3, #6]
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5a:	889b      	ldrh	r3, [r3, #4]
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d010      	beq.n	800bd84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800bd62:	2300      	movs	r3, #0
 800bd64:	623b      	str	r3, [r7, #32]
 800bd66:	e00d      	b.n	800bd84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d006      	beq.n	800bd7e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800bd70:	4b38      	ldr	r3, [pc, #224]	; (800be54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bd72:	f240 12bf 	movw	r2, #447	; 0x1bf
 800bd76:	493a      	ldr	r1, [pc, #232]	; (800be60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800bd78:	4838      	ldr	r0, [pc, #224]	; (800be5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bd7a:	f009 fbab 	bl	80154d4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d105      	bne.n	800bd96 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	7f9b      	ldrb	r3, [r3, #30]
 800bd8e:	f003 0301 	and.w	r3, r3, #1
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d059      	beq.n	800be4a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800bd96:	6a3b      	ldr	r3, [r7, #32]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d04f      	beq.n	800be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d006      	beq.n	800bdb2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	889b      	ldrh	r3, [r3, #4]
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d002      	beq.n	800bdb8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	623b      	str	r3, [r7, #32]
 800bdb6:	e041      	b.n	800be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800bdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800bdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800bdc2:	e012      	b.n	800bdea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800bdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdcc:	88db      	ldrh	r3, [r3, #6]
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd2:	889b      	ldrh	r3, [r3, #4]
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d002      	beq.n	800bde0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	623b      	str	r3, [r7, #32]
            break;
 800bdde:	e007      	b.n	800bdf0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800bde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800bde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1e9      	bne.n	800bdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d022      	beq.n	800be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d106      	bne.n	800be0c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800bdfe:	4b15      	ldr	r3, [pc, #84]	; (800be54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800be00:	f240 12df 	movw	r2, #479	; 0x1df
 800be04:	4917      	ldr	r1, [pc, #92]	; (800be64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800be06:	4815      	ldr	r0, [pc, #84]	; (800be5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800be08:	f009 fb64 	bl	80154d4 <iprintf>
          LWIP_ASSERT("sanity check",
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be14:	429a      	cmp	r2, r3
 800be16:	d106      	bne.n	800be26 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800be18:	4b0e      	ldr	r3, [pc, #56]	; (800be54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800be1a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800be1e:	4911      	ldr	r1, [pc, #68]	; (800be64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800be20:	480e      	ldr	r0, [pc, #56]	; (800be5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800be22:	f009 fb57 	bl	80154d4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800be26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d006      	beq.n	800be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800be2e:	4b09      	ldr	r3, [pc, #36]	; (800be54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800be30:	f240 12e3 	movw	r2, #483	; 0x1e3
 800be34:	490c      	ldr	r1, [pc, #48]	; (800be68 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800be36:	4809      	ldr	r0, [pc, #36]	; (800be5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800be38:	f009 fb4c 	bl	80154d4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800be3c:	6a3b      	ldr	r3, [r7, #32]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	bf14      	ite	ne
 800be42:	2301      	movne	r3, #1
 800be44:	2300      	moveq	r3, #0
 800be46:	b2db      	uxtb	r3, r3
 800be48:	e000      	b.n	800be4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3730      	adds	r7, #48	; 0x30
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	0801963c 	.word	0x0801963c
 800be58:	08019758 	.word	0x08019758
 800be5c:	080196bc 	.word	0x080196bc
 800be60:	08019778 	.word	0x08019778
 800be64:	080197b0 	.word	0x080197b0
 800be68:	080197c0 	.word	0x080197c0

0800be6c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b08e      	sub	sp, #56	; 0x38
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800be7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	f003 030f 	and.w	r3, r3, #15
 800be82:	b2db      	uxtb	r3, r3
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	b2db      	uxtb	r3, r3
 800be88:	2b14      	cmp	r3, #20
 800be8a:	f040 8167 	bne.w	800c15c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800be8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be90:	88db      	ldrh	r3, [r3, #6]
 800be92:	b29b      	uxth	r3, r3
 800be94:	4618      	mov	r0, r3
 800be96:	f000 fb19 	bl	800c4cc <lwip_htons>
 800be9a:	4603      	mov	r3, r0
 800be9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	00db      	lsls	r3, r3, #3
 800bea4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	885b      	ldrh	r3, [r3, #2]
 800beaa:	b29b      	uxth	r3, r3
 800beac:	4618      	mov	r0, r3
 800beae:	f000 fb0d 	bl	800c4cc <lwip_htons>
 800beb2:	4603      	mov	r3, r0
 800beb4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800beb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	f003 030f 	and.w	r3, r3, #15
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800bec6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800beca:	b29b      	uxth	r3, r3
 800becc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bece:	429a      	cmp	r2, r3
 800bed0:	f0c0 8146 	bcc.w	800c160 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800bed4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bed8:	b29b      	uxth	r3, r3
 800beda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bedc:	1ad3      	subs	r3, r2, r3
 800bede:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f001 ff0b 	bl	800dcfc <pbuf_clen>
 800bee6:	4603      	mov	r3, r0
 800bee8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800beea:	4ba3      	ldr	r3, [pc, #652]	; (800c178 <ip4_reass+0x30c>)
 800beec:	881b      	ldrh	r3, [r3, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	8c3b      	ldrh	r3, [r7, #32]
 800bef2:	4413      	add	r3, r2
 800bef4:	2b0a      	cmp	r3, #10
 800bef6:	dd10      	ble.n	800bf1a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bef8:	8c3b      	ldrh	r3, [r7, #32]
 800befa:	4619      	mov	r1, r3
 800befc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800befe:	f7ff fd81 	bl	800ba04 <ip_reass_remove_oldest_datagram>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f000 812d 	beq.w	800c164 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800bf0a:	4b9b      	ldr	r3, [pc, #620]	; (800c178 <ip4_reass+0x30c>)
 800bf0c:	881b      	ldrh	r3, [r3, #0]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	8c3b      	ldrh	r3, [r7, #32]
 800bf12:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bf14:	2b0a      	cmp	r3, #10
 800bf16:	f300 8125 	bgt.w	800c164 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800bf1a:	4b98      	ldr	r3, [pc, #608]	; (800c17c <ip4_reass+0x310>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	633b      	str	r3, [r7, #48]	; 0x30
 800bf20:	e015      	b.n	800bf4e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800bf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf24:	695a      	ldr	r2, [r3, #20]
 800bf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d10c      	bne.n	800bf48 <ip4_reass+0xdc>
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	699a      	ldr	r2, [r3, #24]
 800bf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d106      	bne.n	800bf48 <ip4_reass+0xdc>
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3c:	899a      	ldrh	r2, [r3, #12]
 800bf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf40:	889b      	ldrh	r3, [r3, #4]
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d006      	beq.n	800bf56 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800bf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	633b      	str	r3, [r7, #48]	; 0x30
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d1e6      	bne.n	800bf22 <ip4_reass+0xb6>
 800bf54:	e000      	b.n	800bf58 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800bf56:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800bf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d109      	bne.n	800bf72 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800bf5e:	8c3b      	ldrh	r3, [r7, #32]
 800bf60:	4619      	mov	r1, r3
 800bf62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf64:	f7ff fdb0 	bl	800bac8 <ip_reass_enqueue_new_datagram>
 800bf68:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d11c      	bne.n	800bfaa <ip4_reass+0x13e>
      goto nullreturn;
 800bf70:	e0f9      	b.n	800c166 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800bf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf74:	88db      	ldrh	r3, [r3, #6]
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 faa7 	bl	800c4cc <lwip_htons>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d110      	bne.n	800bfaa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8a:	89db      	ldrh	r3, [r3, #14]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 fa9d 	bl	800c4cc <lwip_htons>
 800bf92:	4603      	mov	r3, r0
 800bf94:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d006      	beq.n	800bfaa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800bf9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	2214      	movs	r2, #20
 800bfa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f008 fd64 	bl	8014a72 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfac:	88db      	ldrh	r3, [r3, #6]
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	f003 0320 	and.w	r3, r3, #32
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	bf0c      	ite	eq
 800bfb8:	2301      	moveq	r3, #1
 800bfba:	2300      	movne	r3, #0
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00e      	beq.n	800bfe4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800bfc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bfc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfca:	4413      	add	r3, r2
 800bfcc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800bfce:	8b7a      	ldrh	r2, [r7, #26]
 800bfd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	f0c0 80a0 	bcc.w	800c118 <ip4_reass+0x2ac>
 800bfd8:	8b7b      	ldrh	r3, [r7, #26]
 800bfda:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	f200 809a 	bhi.w	800c118 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800bfe4:	69fa      	ldr	r2, [r7, #28]
 800bfe6:	6879      	ldr	r1, [r7, #4]
 800bfe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfea:	f7ff fdd5 	bl	800bb98 <ip_reass_chain_frag_into_datagram_and_validate>
 800bfee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff6:	f000 8091 	beq.w	800c11c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800bffa:	4b5f      	ldr	r3, [pc, #380]	; (800c178 <ip4_reass+0x30c>)
 800bffc:	881a      	ldrh	r2, [r3, #0]
 800bffe:	8c3b      	ldrh	r3, [r7, #32]
 800c000:	4413      	add	r3, r2
 800c002:	b29a      	uxth	r2, r3
 800c004:	4b5c      	ldr	r3, [pc, #368]	; (800c178 <ip4_reass+0x30c>)
 800c006:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00d      	beq.n	800c02a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800c00e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c010:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c012:	4413      	add	r3, r2
 800c014:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	8a7a      	ldrh	r2, [r7, #18]
 800c01a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01e:	7f9b      	ldrb	r3, [r3, #30]
 800c020:	f043 0301 	orr.w	r3, r3, #1
 800c024:	b2da      	uxtb	r2, r3
 800c026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c028:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d171      	bne.n	800c114 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800c030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c032:	8b9b      	ldrh	r3, [r3, #28]
 800c034:	3314      	adds	r3, #20
 800c036:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800c038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800c042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04c:	3308      	adds	r3, #8
 800c04e:	2214      	movs	r2, #20
 800c050:	4619      	mov	r1, r3
 800c052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c054:	f008 fd0d 	bl	8014a72 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800c058:	8a3b      	ldrh	r3, [r7, #16]
 800c05a:	4618      	mov	r0, r3
 800c05c:	f000 fa36 	bl	800c4cc <lwip_htons>
 800c060:	4603      	mov	r3, r0
 800c062:	461a      	mov	r2, r3
 800c064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c066:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800c068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06a:	2200      	movs	r2, #0
 800c06c:	719a      	strb	r2, [r3, #6]
 800c06e:	2200      	movs	r2, #0
 800c070:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800c072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c074:	2200      	movs	r2, #0
 800c076:	729a      	strb	r2, [r3, #10]
 800c078:	2200      	movs	r2, #0
 800c07a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800c07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800c082:	e00d      	b.n	800c0a0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800c084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800c08a:	2114      	movs	r1, #20
 800c08c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c08e:	f001 fd21 	bl	800dad4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800c092:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f001 fe71 	bl	800dd7c <pbuf_cat>
      r = iprh->next_pbuf;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800c0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1ee      	bne.n	800c084 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800c0a6:	4b35      	ldr	r3, [pc, #212]	; (800c17c <ip4_reass+0x310>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d102      	bne.n	800c0b6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0b4:	e010      	b.n	800c0d8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c0b6:	4b31      	ldr	r3, [pc, #196]	; (800c17c <ip4_reass+0x310>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0bc:	e007      	b.n	800c0ce <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800c0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d006      	beq.n	800c0d6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d1f4      	bne.n	800c0be <ip4_reass+0x252>
 800c0d4:	e000      	b.n	800c0d8 <ip4_reass+0x26c>
          break;
 800c0d6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800c0d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0dc:	f7ff fd2e 	bl	800bb3c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f001 fe0b 	bl	800dcfc <pbuf_clen>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800c0ea:	4b23      	ldr	r3, [pc, #140]	; (800c178 <ip4_reass+0x30c>)
 800c0ec:	881b      	ldrh	r3, [r3, #0]
 800c0ee:	8c3a      	ldrh	r2, [r7, #32]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d906      	bls.n	800c102 <ip4_reass+0x296>
 800c0f4:	4b22      	ldr	r3, [pc, #136]	; (800c180 <ip4_reass+0x314>)
 800c0f6:	f240 229b 	movw	r2, #667	; 0x29b
 800c0fa:	4922      	ldr	r1, [pc, #136]	; (800c184 <ip4_reass+0x318>)
 800c0fc:	4822      	ldr	r0, [pc, #136]	; (800c188 <ip4_reass+0x31c>)
 800c0fe:	f009 f9e9 	bl	80154d4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800c102:	4b1d      	ldr	r3, [pc, #116]	; (800c178 <ip4_reass+0x30c>)
 800c104:	881a      	ldrh	r2, [r3, #0]
 800c106:	8c3b      	ldrh	r3, [r7, #32]
 800c108:	1ad3      	subs	r3, r2, r3
 800c10a:	b29a      	uxth	r2, r3
 800c10c:	4b1a      	ldr	r3, [pc, #104]	; (800c178 <ip4_reass+0x30c>)
 800c10e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	e02c      	b.n	800c16e <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800c114:	2300      	movs	r3, #0
 800c116:	e02a      	b.n	800c16e <ip4_reass+0x302>

nullreturn_ipr:
 800c118:	bf00      	nop
 800c11a:	e000      	b.n	800c11e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800c11c:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	2b00      	cmp	r3, #0
 800c122:	d106      	bne.n	800c132 <ip4_reass+0x2c6>
 800c124:	4b16      	ldr	r3, [pc, #88]	; (800c180 <ip4_reass+0x314>)
 800c126:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800c12a:	4918      	ldr	r1, [pc, #96]	; (800c18c <ip4_reass+0x320>)
 800c12c:	4816      	ldr	r0, [pc, #88]	; (800c188 <ip4_reass+0x31c>)
 800c12e:	f009 f9d1 	bl	80154d4 <iprintf>
  if (ipr->p == NULL) {
 800c132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d114      	bne.n	800c164 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800c13a:	4b10      	ldr	r3, [pc, #64]	; (800c17c <ip4_reass+0x310>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c140:	429a      	cmp	r2, r3
 800c142:	d006      	beq.n	800c152 <ip4_reass+0x2e6>
 800c144:	4b0e      	ldr	r3, [pc, #56]	; (800c180 <ip4_reass+0x314>)
 800c146:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c14a:	4911      	ldr	r1, [pc, #68]	; (800c190 <ip4_reass+0x324>)
 800c14c:	480e      	ldr	r0, [pc, #56]	; (800c188 <ip4_reass+0x31c>)
 800c14e:	f009 f9c1 	bl	80154d4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800c152:	2100      	movs	r1, #0
 800c154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c156:	f7ff fcf1 	bl	800bb3c <ip_reass_dequeue_datagram>
 800c15a:	e004      	b.n	800c166 <ip4_reass+0x2fa>
    goto nullreturn;
 800c15c:	bf00      	nop
 800c15e:	e002      	b.n	800c166 <ip4_reass+0x2fa>
    goto nullreturn;
 800c160:	bf00      	nop
 800c162:	e000      	b.n	800c166 <ip4_reass+0x2fa>
  }

nullreturn:
 800c164:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f001 fd3a 	bl	800dbe0 <pbuf_free>
  return NULL;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3738      	adds	r7, #56	; 0x38
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	20006880 	.word	0x20006880
 800c17c:	2000687c 	.word	0x2000687c
 800c180:	0801963c 	.word	0x0801963c
 800c184:	080197e4 	.word	0x080197e4
 800c188:	080196bc 	.word	0x080196bc
 800c18c:	08019800 	.word	0x08019800
 800c190:	0801980c 	.word	0x0801980c

0800c194 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800c198:	2005      	movs	r0, #5
 800c19a:	f000 fef7 	bl	800cf8c <memp_malloc>
 800c19e:	4603      	mov	r3, r0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d106      	bne.n	800c1c0 <ip_frag_free_pbuf_custom_ref+0x1c>
 800c1b2:	4b07      	ldr	r3, [pc, #28]	; (800c1d0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800c1b4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800c1b8:	4906      	ldr	r1, [pc, #24]	; (800c1d4 <ip_frag_free_pbuf_custom_ref+0x30>)
 800c1ba:	4807      	ldr	r0, [pc, #28]	; (800c1d8 <ip_frag_free_pbuf_custom_ref+0x34>)
 800c1bc:	f009 f98a 	bl	80154d4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800c1c0:	6879      	ldr	r1, [r7, #4]
 800c1c2:	2005      	movs	r0, #5
 800c1c4:	f000 ff34 	bl	800d030 <memp_free>
}
 800c1c8:	bf00      	nop
 800c1ca:	3708      	adds	r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	0801963c 	.word	0x0801963c
 800c1d4:	0801982c 	.word	0x0801982c
 800c1d8:	080196bc 	.word	0x080196bc

0800c1dc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d106      	bne.n	800c1fc <ipfrag_free_pbuf_custom+0x20>
 800c1ee:	4b11      	ldr	r3, [pc, #68]	; (800c234 <ipfrag_free_pbuf_custom+0x58>)
 800c1f0:	f240 22ce 	movw	r2, #718	; 0x2ce
 800c1f4:	4910      	ldr	r1, [pc, #64]	; (800c238 <ipfrag_free_pbuf_custom+0x5c>)
 800c1f6:	4811      	ldr	r0, [pc, #68]	; (800c23c <ipfrag_free_pbuf_custom+0x60>)
 800c1f8:	f009 f96c 	bl	80154d4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800c1fc:	68fa      	ldr	r2, [r7, #12]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	429a      	cmp	r2, r3
 800c202:	d006      	beq.n	800c212 <ipfrag_free_pbuf_custom+0x36>
 800c204:	4b0b      	ldr	r3, [pc, #44]	; (800c234 <ipfrag_free_pbuf_custom+0x58>)
 800c206:	f240 22cf 	movw	r2, #719	; 0x2cf
 800c20a:	490d      	ldr	r1, [pc, #52]	; (800c240 <ipfrag_free_pbuf_custom+0x64>)
 800c20c:	480b      	ldr	r0, [pc, #44]	; (800c23c <ipfrag_free_pbuf_custom+0x60>)
 800c20e:	f009 f961 	bl	80154d4 <iprintf>
  if (pcr->original != NULL) {
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	695b      	ldr	r3, [r3, #20]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d004      	beq.n	800c224 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	695b      	ldr	r3, [r3, #20]
 800c21e:	4618      	mov	r0, r3
 800c220:	f001 fcde 	bl	800dbe0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f7ff ffbd 	bl	800c1a4 <ip_frag_free_pbuf_custom_ref>
}
 800c22a:	bf00      	nop
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	0801963c 	.word	0x0801963c
 800c238:	08019838 	.word	0x08019838
 800c23c:	080196bc 	.word	0x080196bc
 800c240:	08019844 	.word	0x08019844

0800c244 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b094      	sub	sp, #80	; 0x50
 800c248:	af02      	add	r7, sp, #8
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800c250:	2300      	movs	r3, #0
 800c252:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c25a:	3b14      	subs	r3, #20
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	da00      	bge.n	800c262 <ip4_frag+0x1e>
 800c260:	3307      	adds	r3, #7
 800c262:	10db      	asrs	r3, r3, #3
 800c264:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800c266:	2314      	movs	r3, #20
 800c268:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800c270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c272:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800c274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	f003 030f 	and.w	r3, r3, #15
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	b2db      	uxtb	r3, r3
 800c282:	2b14      	cmp	r3, #20
 800c284:	d002      	beq.n	800c28c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800c286:	f06f 0305 	mvn.w	r3, #5
 800c28a:	e10f      	b.n	800c4ac <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	895b      	ldrh	r3, [r3, #10]
 800c290:	2b13      	cmp	r3, #19
 800c292:	d809      	bhi.n	800c2a8 <ip4_frag+0x64>
 800c294:	4b87      	ldr	r3, [pc, #540]	; (800c4b4 <ip4_frag+0x270>)
 800c296:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800c29a:	4987      	ldr	r1, [pc, #540]	; (800c4b8 <ip4_frag+0x274>)
 800c29c:	4887      	ldr	r0, [pc, #540]	; (800c4bc <ip4_frag+0x278>)
 800c29e:	f009 f919 	bl	80154d4 <iprintf>
 800c2a2:	f06f 0305 	mvn.w	r3, #5
 800c2a6:	e101      	b.n	800c4ac <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2aa:	88db      	ldrh	r3, [r3, #6]
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f000 f90c 	bl	800c4cc <lwip_htons>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800c2b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c2ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800c2c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c2c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c2c8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	891b      	ldrh	r3, [r3, #8]
 800c2ce:	3b14      	subs	r3, #20
 800c2d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800c2d4:	e0e0      	b.n	800c498 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c2d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c2d8:	00db      	lsls	r3, r3, #3
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	bf28      	it	cs
 800c2e4:	4613      	movcs	r3, r2
 800c2e6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c2e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c2ec:	2114      	movs	r1, #20
 800c2ee:	200e      	movs	r0, #14
 800c2f0:	f001 f996 	bl	800d620 <pbuf_alloc>
 800c2f4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800c2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f000 80d4 	beq.w	800c4a6 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c300:	895b      	ldrh	r3, [r3, #10]
 800c302:	2b13      	cmp	r3, #19
 800c304:	d806      	bhi.n	800c314 <ip4_frag+0xd0>
 800c306:	4b6b      	ldr	r3, [pc, #428]	; (800c4b4 <ip4_frag+0x270>)
 800c308:	f240 3225 	movw	r2, #805	; 0x325
 800c30c:	496c      	ldr	r1, [pc, #432]	; (800c4c0 <ip4_frag+0x27c>)
 800c30e:	486b      	ldr	r0, [pc, #428]	; (800c4bc <ip4_frag+0x278>)
 800c310:	f009 f8e0 	bl	80154d4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	2214      	movs	r2, #20
 800c31a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c31c:	4618      	mov	r0, r3
 800c31e:	f008 fba8 	bl	8014a72 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800c328:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c32a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800c32e:	e064      	b.n	800c3fa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	895a      	ldrh	r2, [r3, #10]
 800c334:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	895b      	ldrh	r3, [r3, #10]
 800c33e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c340:	429a      	cmp	r2, r3
 800c342:	d906      	bls.n	800c352 <ip4_frag+0x10e>
 800c344:	4b5b      	ldr	r3, [pc, #364]	; (800c4b4 <ip4_frag+0x270>)
 800c346:	f240 322d 	movw	r2, #813	; 0x32d
 800c34a:	495e      	ldr	r1, [pc, #376]	; (800c4c4 <ip4_frag+0x280>)
 800c34c:	485b      	ldr	r0, [pc, #364]	; (800c4bc <ip4_frag+0x278>)
 800c34e:	f009 f8c1 	bl	80154d4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c352:	8bfa      	ldrh	r2, [r7, #30]
 800c354:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c358:	4293      	cmp	r3, r2
 800c35a:	bf28      	it	cs
 800c35c:	4613      	movcs	r3, r2
 800c35e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800c362:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c366:	2b00      	cmp	r3, #0
 800c368:	d105      	bne.n	800c376 <ip4_frag+0x132>
        poff = 0;
 800c36a:	2300      	movs	r3, #0
 800c36c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	60fb      	str	r3, [r7, #12]
        continue;
 800c374:	e041      	b.n	800c3fa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c376:	f7ff ff0d 	bl	800c194 <ip_frag_alloc_pbuf_custom_ref>
 800c37a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d103      	bne.n	800c38a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800c382:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c384:	f001 fc2c 	bl	800dbe0 <pbuf_free>
        goto memerr;
 800c388:	e08e      	b.n	800c4a8 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c38a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c390:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c392:	4413      	add	r3, r2
 800c394:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800c398:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800c39c:	9201      	str	r2, [sp, #4]
 800c39e:	9300      	str	r3, [sp, #0]
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2241      	movs	r2, #65	; 0x41
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	f001 fa61 	bl	800d86c <pbuf_alloced_custom>
 800c3aa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d106      	bne.n	800c3c0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800c3b2:	69b8      	ldr	r0, [r7, #24]
 800c3b4:	f7ff fef6 	bl	800c1a4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800c3b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3ba:	f001 fc11 	bl	800dbe0 <pbuf_free>
        goto memerr;
 800c3be:	e073      	b.n	800c4a8 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f001 fcb3 	bl	800dd2c <pbuf_ref>
      pcr->original = p;
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	4a3e      	ldr	r2, [pc, #248]	; (800c4c8 <ip4_frag+0x284>)
 800c3d0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800c3d2:	6979      	ldr	r1, [r7, #20]
 800c3d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3d6:	f001 fcd1 	bl	800dd7c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800c3da:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800c3de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c3e2:	1ad3      	subs	r3, r2, r3
 800c3e4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800c3e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d004      	beq.n	800c3fa <ip4_frag+0x1b6>
        poff = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800c3fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d196      	bne.n	800c330 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800c402:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c404:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c408:	4413      	add	r3, r2
 800c40a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800c40c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c414:	3b14      	subs	r3, #20
 800c416:	429a      	cmp	r2, r3
 800c418:	bfd4      	ite	le
 800c41a:	2301      	movle	r3, #1
 800c41c:	2300      	movgt	r3, #0
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800c422:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c426:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c42a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800c42c:	6a3b      	ldr	r3, [r7, #32]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d002      	beq.n	800c438 <ip4_frag+0x1f4>
 800c432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c434:	2b00      	cmp	r3, #0
 800c436:	d003      	beq.n	800c440 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800c438:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c43a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c43e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800c440:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c442:	4618      	mov	r0, r3
 800c444:	f000 f842 	bl	800c4cc <lwip_htons>
 800c448:	4603      	mov	r3, r0
 800c44a:	461a      	mov	r2, r3
 800c44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800c450:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c452:	3314      	adds	r3, #20
 800c454:	b29b      	uxth	r3, r3
 800c456:	4618      	mov	r0, r3
 800c458:	f000 f838 	bl	800c4cc <lwip_htons>
 800c45c:	4603      	mov	r3, r0
 800c45e:	461a      	mov	r2, r3
 800c460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c462:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800c464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c466:	2200      	movs	r2, #0
 800c468:	729a      	strb	r2, [r3, #10]
 800c46a:	2200      	movs	r2, #0
 800c46c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	695b      	ldr	r3, [r3, #20]
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c476:	68b8      	ldr	r0, [r7, #8]
 800c478:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800c47a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c47c:	f001 fbb0 	bl	800dbe0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800c480:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c484:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c486:	1ad3      	subs	r3, r2, r3
 800c488:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800c48c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c490:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c492:	4413      	add	r3, r2
 800c494:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800c498:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f47f af1a 	bne.w	800c2d6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e002      	b.n	800c4ac <ip4_frag+0x268>
      goto memerr;
 800c4a6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800c4a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3748      	adds	r7, #72	; 0x48
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	0801963c 	.word	0x0801963c
 800c4b8:	08019850 	.word	0x08019850
 800c4bc:	080196bc 	.word	0x080196bc
 800c4c0:	0801986c 	.word	0x0801986c
 800c4c4:	0801988c 	.word	0x0801988c
 800c4c8:	0800c1dd 	.word	0x0800c1dd

0800c4cc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c4d6:	88fb      	ldrh	r3, [r7, #6]
 800c4d8:	021b      	lsls	r3, r3, #8
 800c4da:	b21a      	sxth	r2, r3
 800c4dc:	88fb      	ldrh	r3, [r7, #6]
 800c4de:	0a1b      	lsrs	r3, r3, #8
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	b21b      	sxth	r3, r3
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	b21b      	sxth	r3, r3
 800c4e8:	b29b      	uxth	r3, r3
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c4f6:	b480      	push	{r7}
 800c4f8:	b083      	sub	sp, #12
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	061a      	lsls	r2, r3, #24
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	021b      	lsls	r3, r3, #8
 800c506:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c50a:	431a      	orrs	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	0a1b      	lsrs	r3, r3, #8
 800c510:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c514:	431a      	orrs	r2, r3
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	0e1b      	lsrs	r3, r3, #24
 800c51a:	4313      	orrs	r3, r2
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	370c      	adds	r7, #12
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800c528:	b480      	push	{r7}
 800c52a:	b089      	sub	sp, #36	; 0x24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800c536:	2300      	movs	r3, #0
 800c538:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	f003 0301 	and.w	r3, r3, #1
 800c544:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d00d      	beq.n	800c568 <lwip_standard_chksum+0x40>
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	dd0a      	ble.n	800c568 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800c552:	69fa      	ldr	r2, [r7, #28]
 800c554:	1c53      	adds	r3, r2, #1
 800c556:	61fb      	str	r3, [r7, #28]
 800c558:	f107 030e 	add.w	r3, r7, #14
 800c55c:	3301      	adds	r3, #1
 800c55e:	7812      	ldrb	r2, [r2, #0]
 800c560:	701a      	strb	r2, [r3, #0]
    len--;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	3b01      	subs	r3, #1
 800c566:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800c56c:	e00a      	b.n	800c584 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	1c9a      	adds	r2, r3, #2
 800c572:	61ba      	str	r2, [r7, #24]
 800c574:	881b      	ldrh	r3, [r3, #0]
 800c576:	461a      	mov	r2, r3
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	4413      	add	r3, r2
 800c57c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	3b02      	subs	r3, #2
 800c582:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	2b01      	cmp	r3, #1
 800c588:	dcf1      	bgt.n	800c56e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	dd04      	ble.n	800c59a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800c590:	f107 030e 	add.w	r3, r7, #14
 800c594:	69ba      	ldr	r2, [r7, #24]
 800c596:	7812      	ldrb	r2, [r2, #0]
 800c598:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800c59a:	89fb      	ldrh	r3, [r7, #14]
 800c59c:	461a      	mov	r2, r3
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	0c1a      	lsrs	r2, r3, #16
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	4413      	add	r3, r2
 800c5ae:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	0c1a      	lsrs	r2, r3, #16
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	4413      	add	r3, r2
 800c5ba:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d007      	beq.n	800c5d2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	021b      	lsls	r3, r3, #8
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	0a1b      	lsrs	r3, r3, #8
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	b29b      	uxth	r3, r3
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3724      	adds	r7, #36	; 0x24
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b086      	sub	sp, #24
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	613b      	str	r3, [r7, #16]
 800c5f6:	e02b      	b.n	800c650 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	685a      	ldr	r2, [r3, #4]
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	895b      	ldrh	r3, [r3, #10]
 800c600:	4619      	mov	r1, r3
 800c602:	4610      	mov	r0, r2
 800c604:	f7ff ff90 	bl	800c528 <lwip_standard_chksum>
 800c608:	4603      	mov	r3, r0
 800c60a:	461a      	mov	r2, r3
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	4413      	add	r3, r2
 800c610:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	0c1a      	lsrs	r2, r3, #16
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	b29b      	uxth	r3, r3
 800c61a:	4413      	add	r3, r2
 800c61c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	895b      	ldrh	r3, [r3, #10]
 800c622:	f003 0301 	and.w	r3, r3, #1
 800c626:	b29b      	uxth	r3, r3
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00e      	beq.n	800c64a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	bf0c      	ite	eq
 800c632:	2301      	moveq	r3, #1
 800c634:	2300      	movne	r3, #0
 800c636:	b2db      	uxtb	r3, r3
 800c638:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	021b      	lsls	r3, r3, #8
 800c63e:	b29a      	uxth	r2, r3
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	0a1b      	lsrs	r3, r3, #8
 800c644:	b2db      	uxtb	r3, r3
 800c646:	4313      	orrs	r3, r2
 800c648:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	613b      	str	r3, [r7, #16]
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1d0      	bne.n	800c5f8 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d007      	beq.n	800c66c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	021b      	lsls	r3, r3, #8
 800c660:	b29a      	uxth	r2, r3
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	0a1b      	lsrs	r3, r3, #8
 800c666:	b2db      	uxtb	r3, r3
 800c668:	4313      	orrs	r3, r2
 800c66a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	b29b      	uxth	r3, r3
 800c670:	43db      	mvns	r3, r3
 800c672:	b29b      	uxth	r3, r3
}
 800c674:	4618      	mov	r0, r3
 800c676:	3718      	adds	r7, #24
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c682:	2300      	movs	r3, #0
 800c684:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c686:	f008 f915 	bl	80148b4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c68a:	f000 f8d5 	bl	800c838 <mem_init>
  memp_init();
 800c68e:	f000 fc31 	bl	800cef4 <memp_init>
  pbuf_init();
  netif_init();
 800c692:	f000 fcf7 	bl	800d084 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c696:	f007 faf3 	bl	8013c80 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c69a:	f001 fd4b 	bl	800e134 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c69e:	f007 fa37 	bl	8013b10 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c6a2:	bf00      	nop
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
	...

0800c6ac <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c6b6:	4b05      	ldr	r3, [pc, #20]	; (800c6cc <ptr_to_mem+0x20>)
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	88fb      	ldrh	r3, [r7, #6]
 800c6bc:	4413      	add	r3, r2
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	370c      	adds	r7, #12
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	20006884 	.word	0x20006884

0800c6d0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b083      	sub	sp, #12
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	4a05      	ldr	r2, [pc, #20]	; (800c6f0 <mem_to_ptr+0x20>)
 800c6dc:	6812      	ldr	r2, [r2, #0]
 800c6de:	1a9b      	subs	r3, r3, r2
 800c6e0:	b29b      	uxth	r3, r3
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	370c      	adds	r7, #12
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	20006884 	.word	0x20006884

0800c6f4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c6f4:	b590      	push	{r4, r7, lr}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c6fc:	4b45      	ldr	r3, [pc, #276]	; (800c814 <plug_holes+0x120>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	429a      	cmp	r2, r3
 800c704:	d206      	bcs.n	800c714 <plug_holes+0x20>
 800c706:	4b44      	ldr	r3, [pc, #272]	; (800c818 <plug_holes+0x124>)
 800c708:	f240 12df 	movw	r2, #479	; 0x1df
 800c70c:	4943      	ldr	r1, [pc, #268]	; (800c81c <plug_holes+0x128>)
 800c70e:	4844      	ldr	r0, [pc, #272]	; (800c820 <plug_holes+0x12c>)
 800c710:	f008 fee0 	bl	80154d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c714:	4b43      	ldr	r3, [pc, #268]	; (800c824 <plug_holes+0x130>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d306      	bcc.n	800c72c <plug_holes+0x38>
 800c71e:	4b3e      	ldr	r3, [pc, #248]	; (800c818 <plug_holes+0x124>)
 800c720:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c724:	4940      	ldr	r1, [pc, #256]	; (800c828 <plug_holes+0x134>)
 800c726:	483e      	ldr	r0, [pc, #248]	; (800c820 <plug_holes+0x12c>)
 800c728:	f008 fed4 	bl	80154d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	791b      	ldrb	r3, [r3, #4]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d006      	beq.n	800c742 <plug_holes+0x4e>
 800c734:	4b38      	ldr	r3, [pc, #224]	; (800c818 <plug_holes+0x124>)
 800c736:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c73a:	493c      	ldr	r1, [pc, #240]	; (800c82c <plug_holes+0x138>)
 800c73c:	4838      	ldr	r0, [pc, #224]	; (800c820 <plug_holes+0x12c>)
 800c73e:	f008 fec9 	bl	80154d4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	881b      	ldrh	r3, [r3, #0]
 800c746:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c74a:	d906      	bls.n	800c75a <plug_holes+0x66>
 800c74c:	4b32      	ldr	r3, [pc, #200]	; (800c818 <plug_holes+0x124>)
 800c74e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c752:	4937      	ldr	r1, [pc, #220]	; (800c830 <plug_holes+0x13c>)
 800c754:	4832      	ldr	r0, [pc, #200]	; (800c820 <plug_holes+0x12c>)
 800c756:	f008 febd 	bl	80154d4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	881b      	ldrh	r3, [r3, #0]
 800c75e:	4618      	mov	r0, r3
 800c760:	f7ff ffa4 	bl	800c6ac <ptr_to_mem>
 800c764:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d024      	beq.n	800c7b8 <plug_holes+0xc4>
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	791b      	ldrb	r3, [r3, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d120      	bne.n	800c7b8 <plug_holes+0xc4>
 800c776:	4b2b      	ldr	r3, [pc, #172]	; (800c824 <plug_holes+0x130>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	68fa      	ldr	r2, [r7, #12]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d01b      	beq.n	800c7b8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c780:	4b2c      	ldr	r3, [pc, #176]	; (800c834 <plug_holes+0x140>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	68fa      	ldr	r2, [r7, #12]
 800c786:	429a      	cmp	r2, r3
 800c788:	d102      	bne.n	800c790 <plug_holes+0x9c>
      lfree = mem;
 800c78a:	4a2a      	ldr	r2, [pc, #168]	; (800c834 <plug_holes+0x140>)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	881a      	ldrh	r2, [r3, #0]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	881b      	ldrh	r3, [r3, #0]
 800c79c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c7a0:	d00a      	beq.n	800c7b8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	881b      	ldrh	r3, [r3, #0]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7ff ff80 	bl	800c6ac <ptr_to_mem>
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f7ff ff8e 	bl	800c6d0 <mem_to_ptr>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	885b      	ldrh	r3, [r3, #2]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7ff ff75 	bl	800c6ac <ptr_to_mem>
 800c7c2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c7c4:	68ba      	ldr	r2, [r7, #8]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d01f      	beq.n	800c80c <plug_holes+0x118>
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	791b      	ldrb	r3, [r3, #4]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d11b      	bne.n	800c80c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c7d4:	4b17      	ldr	r3, [pc, #92]	; (800c834 <plug_holes+0x140>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d102      	bne.n	800c7e4 <plug_holes+0xf0>
      lfree = pmem;
 800c7de:	4a15      	ldr	r2, [pc, #84]	; (800c834 <plug_holes+0x140>)
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	881a      	ldrh	r2, [r3, #0]
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	881b      	ldrh	r3, [r3, #0]
 800c7f0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c7f4:	d00a      	beq.n	800c80c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	881b      	ldrh	r3, [r3, #0]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7ff ff56 	bl	800c6ac <ptr_to_mem>
 800c800:	4604      	mov	r4, r0
 800c802:	68b8      	ldr	r0, [r7, #8]
 800c804:	f7ff ff64 	bl	800c6d0 <mem_to_ptr>
 800c808:	4603      	mov	r3, r0
 800c80a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c80c:	bf00      	nop
 800c80e:	3714      	adds	r7, #20
 800c810:	46bd      	mov	sp, r7
 800c812:	bd90      	pop	{r4, r7, pc}
 800c814:	20006884 	.word	0x20006884
 800c818:	0801989c 	.word	0x0801989c
 800c81c:	08019908 	.word	0x08019908
 800c820:	08019920 	.word	0x08019920
 800c824:	20006888 	.word	0x20006888
 800c828:	08019948 	.word	0x08019948
 800c82c:	08019964 	.word	0x08019964
 800c830:	08019980 	.word	0x08019980
 800c834:	20006890 	.word	0x20006890

0800c838 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c83e:	4b1f      	ldr	r3, [pc, #124]	; (800c8bc <mem_init+0x84>)
 800c840:	3303      	adds	r3, #3
 800c842:	f023 0303 	bic.w	r3, r3, #3
 800c846:	461a      	mov	r2, r3
 800c848:	4b1d      	ldr	r3, [pc, #116]	; (800c8c0 <mem_init+0x88>)
 800c84a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c84c:	4b1c      	ldr	r3, [pc, #112]	; (800c8c0 <mem_init+0x88>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c858:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c866:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800c86a:	f7ff ff1f 	bl	800c6ac <ptr_to_mem>
 800c86e:	4602      	mov	r2, r0
 800c870:	4b14      	ldr	r3, [pc, #80]	; (800c8c4 <mem_init+0x8c>)
 800c872:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800c874:	4b13      	ldr	r3, [pc, #76]	; (800c8c4 <mem_init+0x8c>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2201      	movs	r2, #1
 800c87a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c87c:	4b11      	ldr	r3, [pc, #68]	; (800c8c4 <mem_init+0x8c>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c884:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c886:	4b0f      	ldr	r3, [pc, #60]	; (800c8c4 <mem_init+0x8c>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c88e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c890:	4b0b      	ldr	r3, [pc, #44]	; (800c8c0 <mem_init+0x88>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a0c      	ldr	r2, [pc, #48]	; (800c8c8 <mem_init+0x90>)
 800c896:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c898:	480c      	ldr	r0, [pc, #48]	; (800c8cc <mem_init+0x94>)
 800c89a:	f008 f819 	bl	80148d0 <sys_mutex_new>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d006      	beq.n	800c8b2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c8a4:	4b0a      	ldr	r3, [pc, #40]	; (800c8d0 <mem_init+0x98>)
 800c8a6:	f240 221f 	movw	r2, #543	; 0x21f
 800c8aa:	490a      	ldr	r1, [pc, #40]	; (800c8d4 <mem_init+0x9c>)
 800c8ac:	480a      	ldr	r0, [pc, #40]	; (800c8d8 <mem_init+0xa0>)
 800c8ae:	f008 fe11 	bl	80154d4 <iprintf>
  }
}
 800c8b2:	bf00      	nop
 800c8b4:	3708      	adds	r7, #8
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	20006a9c 	.word	0x20006a9c
 800c8c0:	20006884 	.word	0x20006884
 800c8c4:	20006888 	.word	0x20006888
 800c8c8:	20006890 	.word	0x20006890
 800c8cc:	2000688c 	.word	0x2000688c
 800c8d0:	0801989c 	.word	0x0801989c
 800c8d4:	080199ac 	.word	0x080199ac
 800c8d8:	08019920 	.word	0x08019920

0800c8dc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f7ff fef3 	bl	800c6d0 <mem_to_ptr>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	881b      	ldrh	r3, [r3, #0]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7ff feda 	bl	800c6ac <ptr_to_mem>
 800c8f8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	885b      	ldrh	r3, [r3, #2]
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7ff fed4 	bl	800c6ac <ptr_to_mem>
 800c904:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	881b      	ldrh	r3, [r3, #0]
 800c90a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c90e:	d818      	bhi.n	800c942 <mem_link_valid+0x66>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	885b      	ldrh	r3, [r3, #2]
 800c914:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c918:	d813      	bhi.n	800c942 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c91e:	8afa      	ldrh	r2, [r7, #22]
 800c920:	429a      	cmp	r2, r3
 800c922:	d004      	beq.n	800c92e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	881b      	ldrh	r3, [r3, #0]
 800c928:	8afa      	ldrh	r2, [r7, #22]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d109      	bne.n	800c942 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c92e:	4b08      	ldr	r3, [pc, #32]	; (800c950 <mem_link_valid+0x74>)
 800c930:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c932:	693a      	ldr	r2, [r7, #16]
 800c934:	429a      	cmp	r2, r3
 800c936:	d006      	beq.n	800c946 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	885b      	ldrh	r3, [r3, #2]
 800c93c:	8afa      	ldrh	r2, [r7, #22]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d001      	beq.n	800c946 <mem_link_valid+0x6a>
    return 0;
 800c942:	2300      	movs	r3, #0
 800c944:	e000      	b.n	800c948 <mem_link_valid+0x6c>
  }
  return 1;
 800c946:	2301      	movs	r3, #1
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3718      	adds	r7, #24
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	20006888 	.word	0x20006888

0800c954 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b088      	sub	sp, #32
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d070      	beq.n	800ca44 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f003 0303 	and.w	r3, r3, #3
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00d      	beq.n	800c988 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c96c:	4b37      	ldr	r3, [pc, #220]	; (800ca4c <mem_free+0xf8>)
 800c96e:	f240 2273 	movw	r2, #627	; 0x273
 800c972:	4937      	ldr	r1, [pc, #220]	; (800ca50 <mem_free+0xfc>)
 800c974:	4837      	ldr	r0, [pc, #220]	; (800ca54 <mem_free+0x100>)
 800c976:	f008 fdad 	bl	80154d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c97a:	f007 fffd 	bl	8014978 <sys_arch_protect>
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	f008 f807 	bl	8014994 <sys_arch_unprotect>
    return;
 800c986:	e05e      	b.n	800ca46 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	3b08      	subs	r3, #8
 800c98c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c98e:	4b32      	ldr	r3, [pc, #200]	; (800ca58 <mem_free+0x104>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	69fa      	ldr	r2, [r7, #28]
 800c994:	429a      	cmp	r2, r3
 800c996:	d306      	bcc.n	800c9a6 <mem_free+0x52>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f103 020c 	add.w	r2, r3, #12
 800c99e:	4b2f      	ldr	r3, [pc, #188]	; (800ca5c <mem_free+0x108>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d90d      	bls.n	800c9c2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c9a6:	4b29      	ldr	r3, [pc, #164]	; (800ca4c <mem_free+0xf8>)
 800c9a8:	f240 227f 	movw	r2, #639	; 0x27f
 800c9ac:	492c      	ldr	r1, [pc, #176]	; (800ca60 <mem_free+0x10c>)
 800c9ae:	4829      	ldr	r0, [pc, #164]	; (800ca54 <mem_free+0x100>)
 800c9b0:	f008 fd90 	bl	80154d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c9b4:	f007 ffe0 	bl	8014978 <sys_arch_protect>
 800c9b8:	6138      	str	r0, [r7, #16]
 800c9ba:	6938      	ldr	r0, [r7, #16]
 800c9bc:	f007 ffea 	bl	8014994 <sys_arch_unprotect>
    return;
 800c9c0:	e041      	b.n	800ca46 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c9c2:	4828      	ldr	r0, [pc, #160]	; (800ca64 <mem_free+0x110>)
 800c9c4:	f007 ff9e 	bl	8014904 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	791b      	ldrb	r3, [r3, #4]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d110      	bne.n	800c9f2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c9d0:	4b1e      	ldr	r3, [pc, #120]	; (800ca4c <mem_free+0xf8>)
 800c9d2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c9d6:	4924      	ldr	r1, [pc, #144]	; (800ca68 <mem_free+0x114>)
 800c9d8:	481e      	ldr	r0, [pc, #120]	; (800ca54 <mem_free+0x100>)
 800c9da:	f008 fd7b 	bl	80154d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c9de:	4821      	ldr	r0, [pc, #132]	; (800ca64 <mem_free+0x110>)
 800c9e0:	f007 ff9f 	bl	8014922 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c9e4:	f007 ffc8 	bl	8014978 <sys_arch_protect>
 800c9e8:	6178      	str	r0, [r7, #20]
 800c9ea:	6978      	ldr	r0, [r7, #20]
 800c9ec:	f007 ffd2 	bl	8014994 <sys_arch_unprotect>
    return;
 800c9f0:	e029      	b.n	800ca46 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c9f2:	69f8      	ldr	r0, [r7, #28]
 800c9f4:	f7ff ff72 	bl	800c8dc <mem_link_valid>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d110      	bne.n	800ca20 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c9fe:	4b13      	ldr	r3, [pc, #76]	; (800ca4c <mem_free+0xf8>)
 800ca00:	f240 2295 	movw	r2, #661	; 0x295
 800ca04:	4919      	ldr	r1, [pc, #100]	; (800ca6c <mem_free+0x118>)
 800ca06:	4813      	ldr	r0, [pc, #76]	; (800ca54 <mem_free+0x100>)
 800ca08:	f008 fd64 	bl	80154d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca0c:	4815      	ldr	r0, [pc, #84]	; (800ca64 <mem_free+0x110>)
 800ca0e:	f007 ff88 	bl	8014922 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca12:	f007 ffb1 	bl	8014978 <sys_arch_protect>
 800ca16:	61b8      	str	r0, [r7, #24]
 800ca18:	69b8      	ldr	r0, [r7, #24]
 800ca1a:	f007 ffbb 	bl	8014994 <sys_arch_unprotect>
    return;
 800ca1e:	e012      	b.n	800ca46 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	2200      	movs	r2, #0
 800ca24:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ca26:	4b12      	ldr	r3, [pc, #72]	; (800ca70 <mem_free+0x11c>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	69fa      	ldr	r2, [r7, #28]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d202      	bcs.n	800ca36 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ca30:	4a0f      	ldr	r2, [pc, #60]	; (800ca70 <mem_free+0x11c>)
 800ca32:	69fb      	ldr	r3, [r7, #28]
 800ca34:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ca36:	69f8      	ldr	r0, [r7, #28]
 800ca38:	f7ff fe5c 	bl	800c6f4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ca3c:	4809      	ldr	r0, [pc, #36]	; (800ca64 <mem_free+0x110>)
 800ca3e:	f007 ff70 	bl	8014922 <sys_mutex_unlock>
 800ca42:	e000      	b.n	800ca46 <mem_free+0xf2>
    return;
 800ca44:	bf00      	nop
}
 800ca46:	3720      	adds	r7, #32
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	0801989c 	.word	0x0801989c
 800ca50:	080199c8 	.word	0x080199c8
 800ca54:	08019920 	.word	0x08019920
 800ca58:	20006884 	.word	0x20006884
 800ca5c:	20006888 	.word	0x20006888
 800ca60:	080199ec 	.word	0x080199ec
 800ca64:	2000688c 	.word	0x2000688c
 800ca68:	08019a08 	.word	0x08019a08
 800ca6c:	08019a30 	.word	0x08019a30
 800ca70:	20006890 	.word	0x20006890

0800ca74 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b088      	sub	sp, #32
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ca80:	887b      	ldrh	r3, [r7, #2]
 800ca82:	3303      	adds	r3, #3
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	f023 0303 	bic.w	r3, r3, #3
 800ca8a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ca8c:	8bfb      	ldrh	r3, [r7, #30]
 800ca8e:	2b0b      	cmp	r3, #11
 800ca90:	d801      	bhi.n	800ca96 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ca92:	230c      	movs	r3, #12
 800ca94:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ca96:	8bfb      	ldrh	r3, [r7, #30]
 800ca98:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ca9c:	d803      	bhi.n	800caa6 <mem_trim+0x32>
 800ca9e:	8bfa      	ldrh	r2, [r7, #30]
 800caa0:	887b      	ldrh	r3, [r7, #2]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d201      	bcs.n	800caaa <mem_trim+0x36>
    return NULL;
 800caa6:	2300      	movs	r3, #0
 800caa8:	e0d8      	b.n	800cc5c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800caaa:	4b6e      	ldr	r3, [pc, #440]	; (800cc64 <mem_trim+0x1f0>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d304      	bcc.n	800cabe <mem_trim+0x4a>
 800cab4:	4b6c      	ldr	r3, [pc, #432]	; (800cc68 <mem_trim+0x1f4>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d306      	bcc.n	800cacc <mem_trim+0x58>
 800cabe:	4b6b      	ldr	r3, [pc, #428]	; (800cc6c <mem_trim+0x1f8>)
 800cac0:	f240 22d2 	movw	r2, #722	; 0x2d2
 800cac4:	496a      	ldr	r1, [pc, #424]	; (800cc70 <mem_trim+0x1fc>)
 800cac6:	486b      	ldr	r0, [pc, #428]	; (800cc74 <mem_trim+0x200>)
 800cac8:	f008 fd04 	bl	80154d4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cacc:	4b65      	ldr	r3, [pc, #404]	; (800cc64 <mem_trim+0x1f0>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d304      	bcc.n	800cae0 <mem_trim+0x6c>
 800cad6:	4b64      	ldr	r3, [pc, #400]	; (800cc68 <mem_trim+0x1f4>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d307      	bcc.n	800caf0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cae0:	f007 ff4a 	bl	8014978 <sys_arch_protect>
 800cae4:	60b8      	str	r0, [r7, #8]
 800cae6:	68b8      	ldr	r0, [r7, #8]
 800cae8:	f007 ff54 	bl	8014994 <sys_arch_unprotect>
    return rmem;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	e0b5      	b.n	800cc5c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	3b08      	subs	r3, #8
 800caf4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800caf6:	69b8      	ldr	r0, [r7, #24]
 800caf8:	f7ff fdea 	bl	800c6d0 <mem_to_ptr>
 800cafc:	4603      	mov	r3, r0
 800cafe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	881a      	ldrh	r2, [r3, #0]
 800cb04:	8afb      	ldrh	r3, [r7, #22]
 800cb06:	1ad3      	subs	r3, r2, r3
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	3b08      	subs	r3, #8
 800cb0c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cb0e:	8bfa      	ldrh	r2, [r7, #30]
 800cb10:	8abb      	ldrh	r3, [r7, #20]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d906      	bls.n	800cb24 <mem_trim+0xb0>
 800cb16:	4b55      	ldr	r3, [pc, #340]	; (800cc6c <mem_trim+0x1f8>)
 800cb18:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cb1c:	4956      	ldr	r1, [pc, #344]	; (800cc78 <mem_trim+0x204>)
 800cb1e:	4855      	ldr	r0, [pc, #340]	; (800cc74 <mem_trim+0x200>)
 800cb20:	f008 fcd8 	bl	80154d4 <iprintf>
  if (newsize > size) {
 800cb24:	8bfa      	ldrh	r2, [r7, #30]
 800cb26:	8abb      	ldrh	r3, [r7, #20]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d901      	bls.n	800cb30 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	e095      	b.n	800cc5c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800cb30:	8bfa      	ldrh	r2, [r7, #30]
 800cb32:	8abb      	ldrh	r3, [r7, #20]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d101      	bne.n	800cb3c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	e08f      	b.n	800cc5c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cb3c:	484f      	ldr	r0, [pc, #316]	; (800cc7c <mem_trim+0x208>)
 800cb3e:	f007 fee1 	bl	8014904 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	881b      	ldrh	r3, [r3, #0]
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7ff fdb0 	bl	800c6ac <ptr_to_mem>
 800cb4c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	791b      	ldrb	r3, [r3, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d13f      	bne.n	800cbd6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	881b      	ldrh	r3, [r3, #0]
 800cb5a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cb5e:	d106      	bne.n	800cb6e <mem_trim+0xfa>
 800cb60:	4b42      	ldr	r3, [pc, #264]	; (800cc6c <mem_trim+0x1f8>)
 800cb62:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cb66:	4946      	ldr	r1, [pc, #280]	; (800cc80 <mem_trim+0x20c>)
 800cb68:	4842      	ldr	r0, [pc, #264]	; (800cc74 <mem_trim+0x200>)
 800cb6a:	f008 fcb3 	bl	80154d4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	881b      	ldrh	r3, [r3, #0]
 800cb72:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cb74:	8afa      	ldrh	r2, [r7, #22]
 800cb76:	8bfb      	ldrh	r3, [r7, #30]
 800cb78:	4413      	add	r3, r2
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	3308      	adds	r3, #8
 800cb7e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cb80:	4b40      	ldr	r3, [pc, #256]	; (800cc84 <mem_trim+0x210>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	693a      	ldr	r2, [r7, #16]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d106      	bne.n	800cb98 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cb8a:	89fb      	ldrh	r3, [r7, #14]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7ff fd8d 	bl	800c6ac <ptr_to_mem>
 800cb92:	4602      	mov	r2, r0
 800cb94:	4b3b      	ldr	r3, [pc, #236]	; (800cc84 <mem_trim+0x210>)
 800cb96:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cb98:	89fb      	ldrh	r3, [r7, #14]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7ff fd86 	bl	800c6ac <ptr_to_mem>
 800cba0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	2200      	movs	r2, #0
 800cba6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	89ba      	ldrh	r2, [r7, #12]
 800cbac:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	8afa      	ldrh	r2, [r7, #22]
 800cbb2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	89fa      	ldrh	r2, [r7, #14]
 800cbb8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	881b      	ldrh	r3, [r3, #0]
 800cbbe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cbc2:	d047      	beq.n	800cc54 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	881b      	ldrh	r3, [r3, #0]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7ff fd6f 	bl	800c6ac <ptr_to_mem>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	89fb      	ldrh	r3, [r7, #14]
 800cbd2:	8053      	strh	r3, [r2, #2]
 800cbd4:	e03e      	b.n	800cc54 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cbd6:	8bfb      	ldrh	r3, [r7, #30]
 800cbd8:	f103 0214 	add.w	r2, r3, #20
 800cbdc:	8abb      	ldrh	r3, [r7, #20]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d838      	bhi.n	800cc54 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cbe2:	8afa      	ldrh	r2, [r7, #22]
 800cbe4:	8bfb      	ldrh	r3, [r7, #30]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	3308      	adds	r3, #8
 800cbec:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	881b      	ldrh	r3, [r3, #0]
 800cbf2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cbf6:	d106      	bne.n	800cc06 <mem_trim+0x192>
 800cbf8:	4b1c      	ldr	r3, [pc, #112]	; (800cc6c <mem_trim+0x1f8>)
 800cbfa:	f240 3216 	movw	r2, #790	; 0x316
 800cbfe:	4920      	ldr	r1, [pc, #128]	; (800cc80 <mem_trim+0x20c>)
 800cc00:	481c      	ldr	r0, [pc, #112]	; (800cc74 <mem_trim+0x200>)
 800cc02:	f008 fc67 	bl	80154d4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cc06:	89fb      	ldrh	r3, [r7, #14]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7ff fd4f 	bl	800c6ac <ptr_to_mem>
 800cc0e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cc10:	4b1c      	ldr	r3, [pc, #112]	; (800cc84 <mem_trim+0x210>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	693a      	ldr	r2, [r7, #16]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d202      	bcs.n	800cc20 <mem_trim+0x1ac>
      lfree = mem2;
 800cc1a:	4a1a      	ldr	r2, [pc, #104]	; (800cc84 <mem_trim+0x210>)
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	2200      	movs	r2, #0
 800cc24:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	881a      	ldrh	r2, [r3, #0]
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	8afa      	ldrh	r2, [r7, #22]
 800cc32:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	89fa      	ldrh	r2, [r7, #14]
 800cc38:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	881b      	ldrh	r3, [r3, #0]
 800cc3e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cc42:	d007      	beq.n	800cc54 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	881b      	ldrh	r3, [r3, #0]
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7ff fd2f 	bl	800c6ac <ptr_to_mem>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	89fb      	ldrh	r3, [r7, #14]
 800cc52:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cc54:	4809      	ldr	r0, [pc, #36]	; (800cc7c <mem_trim+0x208>)
 800cc56:	f007 fe64 	bl	8014922 <sys_mutex_unlock>
  return rmem;
 800cc5a:	687b      	ldr	r3, [r7, #4]
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3720      	adds	r7, #32
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	20006884 	.word	0x20006884
 800cc68:	20006888 	.word	0x20006888
 800cc6c:	0801989c 	.word	0x0801989c
 800cc70:	08019a64 	.word	0x08019a64
 800cc74:	08019920 	.word	0x08019920
 800cc78:	08019a7c 	.word	0x08019a7c
 800cc7c:	2000688c 	.word	0x2000688c
 800cc80:	08019a9c 	.word	0x08019a9c
 800cc84:	20006890 	.word	0x20006890

0800cc88 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b088      	sub	sp, #32
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	4603      	mov	r3, r0
 800cc90:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cc92:	88fb      	ldrh	r3, [r7, #6]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d101      	bne.n	800cc9c <mem_malloc+0x14>
    return NULL;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	e0e2      	b.n	800ce62 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cc9c:	88fb      	ldrh	r3, [r7, #6]
 800cc9e:	3303      	adds	r3, #3
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	f023 0303 	bic.w	r3, r3, #3
 800cca6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cca8:	8bbb      	ldrh	r3, [r7, #28]
 800ccaa:	2b0b      	cmp	r3, #11
 800ccac:	d801      	bhi.n	800ccb2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ccae:	230c      	movs	r3, #12
 800ccb0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ccb2:	8bbb      	ldrh	r3, [r7, #28]
 800ccb4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ccb8:	d803      	bhi.n	800ccc2 <mem_malloc+0x3a>
 800ccba:	8bba      	ldrh	r2, [r7, #28]
 800ccbc:	88fb      	ldrh	r3, [r7, #6]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d201      	bcs.n	800ccc6 <mem_malloc+0x3e>
    return NULL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	e0cd      	b.n	800ce62 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ccc6:	4869      	ldr	r0, [pc, #420]	; (800ce6c <mem_malloc+0x1e4>)
 800ccc8:	f007 fe1c 	bl	8014904 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cccc:	4b68      	ldr	r3, [pc, #416]	; (800ce70 <mem_malloc+0x1e8>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7ff fcfd 	bl	800c6d0 <mem_to_ptr>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	83fb      	strh	r3, [r7, #30]
 800ccda:	e0b7      	b.n	800ce4c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ccdc:	8bfb      	ldrh	r3, [r7, #30]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7ff fce4 	bl	800c6ac <ptr_to_mem>
 800cce4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	791b      	ldrb	r3, [r3, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f040 80a7 	bne.w	800ce3e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	881b      	ldrh	r3, [r3, #0]
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	8bfb      	ldrh	r3, [r7, #30]
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	f1a3 0208 	sub.w	r2, r3, #8
 800ccfe:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cd00:	429a      	cmp	r2, r3
 800cd02:	f0c0 809c 	bcc.w	800ce3e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	881b      	ldrh	r3, [r3, #0]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	8bfb      	ldrh	r3, [r7, #30]
 800cd0e:	1ad3      	subs	r3, r2, r3
 800cd10:	f1a3 0208 	sub.w	r2, r3, #8
 800cd14:	8bbb      	ldrh	r3, [r7, #28]
 800cd16:	3314      	adds	r3, #20
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d333      	bcc.n	800cd84 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cd1c:	8bfa      	ldrh	r2, [r7, #30]
 800cd1e:	8bbb      	ldrh	r3, [r7, #28]
 800cd20:	4413      	add	r3, r2
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	3308      	adds	r3, #8
 800cd26:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cd28:	8a7b      	ldrh	r3, [r7, #18]
 800cd2a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cd2e:	d106      	bne.n	800cd3e <mem_malloc+0xb6>
 800cd30:	4b50      	ldr	r3, [pc, #320]	; (800ce74 <mem_malloc+0x1ec>)
 800cd32:	f240 3287 	movw	r2, #903	; 0x387
 800cd36:	4950      	ldr	r1, [pc, #320]	; (800ce78 <mem_malloc+0x1f0>)
 800cd38:	4850      	ldr	r0, [pc, #320]	; (800ce7c <mem_malloc+0x1f4>)
 800cd3a:	f008 fbcb 	bl	80154d4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cd3e:	8a7b      	ldrh	r3, [r7, #18]
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7ff fcb3 	bl	800c6ac <ptr_to_mem>
 800cd46:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	881a      	ldrh	r2, [r3, #0]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	8bfa      	ldrh	r2, [r7, #30]
 800cd5a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	8a7a      	ldrh	r2, [r7, #18]
 800cd60:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	2201      	movs	r2, #1
 800cd66:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	881b      	ldrh	r3, [r3, #0]
 800cd6c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cd70:	d00b      	beq.n	800cd8a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	881b      	ldrh	r3, [r3, #0]
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7ff fc98 	bl	800c6ac <ptr_to_mem>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	8a7b      	ldrh	r3, [r7, #18]
 800cd80:	8053      	strh	r3, [r2, #2]
 800cd82:	e002      	b.n	800cd8a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	2201      	movs	r2, #1
 800cd88:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cd8a:	4b39      	ldr	r3, [pc, #228]	; (800ce70 <mem_malloc+0x1e8>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	697a      	ldr	r2, [r7, #20]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d127      	bne.n	800cde4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cd94:	4b36      	ldr	r3, [pc, #216]	; (800ce70 <mem_malloc+0x1e8>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cd9a:	e005      	b.n	800cda8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	881b      	ldrh	r3, [r3, #0]
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7ff fc83 	bl	800c6ac <ptr_to_mem>
 800cda6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cda8:	69bb      	ldr	r3, [r7, #24]
 800cdaa:	791b      	ldrb	r3, [r3, #4]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d004      	beq.n	800cdba <mem_malloc+0x132>
 800cdb0:	4b33      	ldr	r3, [pc, #204]	; (800ce80 <mem_malloc+0x1f8>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	69ba      	ldr	r2, [r7, #24]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d1f0      	bne.n	800cd9c <mem_malloc+0x114>
          }
          lfree = cur;
 800cdba:	4a2d      	ldr	r2, [pc, #180]	; (800ce70 <mem_malloc+0x1e8>)
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cdc0:	4b2b      	ldr	r3, [pc, #172]	; (800ce70 <mem_malloc+0x1e8>)
 800cdc2:	681a      	ldr	r2, [r3, #0]
 800cdc4:	4b2e      	ldr	r3, [pc, #184]	; (800ce80 <mem_malloc+0x1f8>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d00b      	beq.n	800cde4 <mem_malloc+0x15c>
 800cdcc:	4b28      	ldr	r3, [pc, #160]	; (800ce70 <mem_malloc+0x1e8>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	791b      	ldrb	r3, [r3, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d006      	beq.n	800cde4 <mem_malloc+0x15c>
 800cdd6:	4b27      	ldr	r3, [pc, #156]	; (800ce74 <mem_malloc+0x1ec>)
 800cdd8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800cddc:	4929      	ldr	r1, [pc, #164]	; (800ce84 <mem_malloc+0x1fc>)
 800cdde:	4827      	ldr	r0, [pc, #156]	; (800ce7c <mem_malloc+0x1f4>)
 800cde0:	f008 fb78 	bl	80154d4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800cde4:	4821      	ldr	r0, [pc, #132]	; (800ce6c <mem_malloc+0x1e4>)
 800cde6:	f007 fd9c 	bl	8014922 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cdea:	8bba      	ldrh	r2, [r7, #28]
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	4413      	add	r3, r2
 800cdf0:	3308      	adds	r3, #8
 800cdf2:	4a23      	ldr	r2, [pc, #140]	; (800ce80 <mem_malloc+0x1f8>)
 800cdf4:	6812      	ldr	r2, [r2, #0]
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d906      	bls.n	800ce08 <mem_malloc+0x180>
 800cdfa:	4b1e      	ldr	r3, [pc, #120]	; (800ce74 <mem_malloc+0x1ec>)
 800cdfc:	f240 32ba 	movw	r2, #954	; 0x3ba
 800ce00:	4921      	ldr	r1, [pc, #132]	; (800ce88 <mem_malloc+0x200>)
 800ce02:	481e      	ldr	r0, [pc, #120]	; (800ce7c <mem_malloc+0x1f4>)
 800ce04:	f008 fb66 	bl	80154d4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	f003 0303 	and.w	r3, r3, #3
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d006      	beq.n	800ce20 <mem_malloc+0x198>
 800ce12:	4b18      	ldr	r3, [pc, #96]	; (800ce74 <mem_malloc+0x1ec>)
 800ce14:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800ce18:	491c      	ldr	r1, [pc, #112]	; (800ce8c <mem_malloc+0x204>)
 800ce1a:	4818      	ldr	r0, [pc, #96]	; (800ce7c <mem_malloc+0x1f4>)
 800ce1c:	f008 fb5a 	bl	80154d4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	f003 0303 	and.w	r3, r3, #3
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d006      	beq.n	800ce38 <mem_malloc+0x1b0>
 800ce2a:	4b12      	ldr	r3, [pc, #72]	; (800ce74 <mem_malloc+0x1ec>)
 800ce2c:	f240 32be 	movw	r2, #958	; 0x3be
 800ce30:	4917      	ldr	r1, [pc, #92]	; (800ce90 <mem_malloc+0x208>)
 800ce32:	4812      	ldr	r0, [pc, #72]	; (800ce7c <mem_malloc+0x1f4>)
 800ce34:	f008 fb4e 	bl	80154d4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	3308      	adds	r3, #8
 800ce3c:	e011      	b.n	800ce62 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ce3e:	8bfb      	ldrh	r3, [r7, #30]
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7ff fc33 	bl	800c6ac <ptr_to_mem>
 800ce46:	4603      	mov	r3, r0
 800ce48:	881b      	ldrh	r3, [r3, #0]
 800ce4a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ce4c:	8bfa      	ldrh	r2, [r7, #30]
 800ce4e:	8bbb      	ldrh	r3, [r7, #28]
 800ce50:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800ce54:	429a      	cmp	r2, r3
 800ce56:	f4ff af41 	bcc.w	800ccdc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ce5a:	4804      	ldr	r0, [pc, #16]	; (800ce6c <mem_malloc+0x1e4>)
 800ce5c:	f007 fd61 	bl	8014922 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ce60:	2300      	movs	r3, #0
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3720      	adds	r7, #32
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	2000688c 	.word	0x2000688c
 800ce70:	20006890 	.word	0x20006890
 800ce74:	0801989c 	.word	0x0801989c
 800ce78:	08019a9c 	.word	0x08019a9c
 800ce7c:	08019920 	.word	0x08019920
 800ce80:	20006888 	.word	0x20006888
 800ce84:	08019ab0 	.word	0x08019ab0
 800ce88:	08019acc 	.word	0x08019acc
 800ce8c:	08019afc 	.word	0x08019afc
 800ce90:	08019b2c 	.word	0x08019b2c

0800ce94 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b085      	sub	sp, #20
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	689b      	ldr	r3, [r3, #8]
 800cea0:	2200      	movs	r2, #0
 800cea2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	3303      	adds	r3, #3
 800ceaa:	f023 0303 	bic.w	r3, r3, #3
 800ceae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	60fb      	str	r3, [r7, #12]
 800ceb4:	e011      	b.n	800ceda <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	689b      	ldr	r3, [r3, #8]
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	881b      	ldrh	r3, [r3, #0]
 800cecc:	461a      	mov	r2, r3
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	4413      	add	r3, r2
 800ced2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	3301      	adds	r3, #1
 800ced8:	60fb      	str	r3, [r7, #12]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	885b      	ldrh	r3, [r3, #2]
 800cede:	461a      	mov	r2, r3
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	4293      	cmp	r3, r2
 800cee4:	dbe7      	blt.n	800ceb6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cee6:	bf00      	nop
 800cee8:	3714      	adds	r7, #20
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
	...

0800cef4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cefa:	2300      	movs	r3, #0
 800cefc:	80fb      	strh	r3, [r7, #6]
 800cefe:	e009      	b.n	800cf14 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cf00:	88fb      	ldrh	r3, [r7, #6]
 800cf02:	4a08      	ldr	r2, [pc, #32]	; (800cf24 <memp_init+0x30>)
 800cf04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7ff ffc3 	bl	800ce94 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf0e:	88fb      	ldrh	r3, [r7, #6]
 800cf10:	3301      	adds	r3, #1
 800cf12:	80fb      	strh	r3, [r7, #6]
 800cf14:	88fb      	ldrh	r3, [r7, #6]
 800cf16:	2b0c      	cmp	r3, #12
 800cf18:	d9f2      	bls.n	800cf00 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cf1a:	bf00      	nop
 800cf1c:	3708      	adds	r7, #8
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	08019bec 	.word	0x08019bec

0800cf28 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cf30:	f007 fd22 	bl	8014978 <sys_arch_protect>
 800cf34:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	689b      	ldr	r3, [r3, #8]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d015      	beq.n	800cf70 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	689b      	ldr	r3, [r3, #8]
 800cf48:	68ba      	ldr	r2, [r7, #8]
 800cf4a:	6812      	ldr	r2, [r2, #0]
 800cf4c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	f003 0303 	and.w	r3, r3, #3
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d006      	beq.n	800cf66 <do_memp_malloc_pool+0x3e>
 800cf58:	4b09      	ldr	r3, [pc, #36]	; (800cf80 <do_memp_malloc_pool+0x58>)
 800cf5a:	f240 1219 	movw	r2, #281	; 0x119
 800cf5e:	4909      	ldr	r1, [pc, #36]	; (800cf84 <do_memp_malloc_pool+0x5c>)
 800cf60:	4809      	ldr	r0, [pc, #36]	; (800cf88 <do_memp_malloc_pool+0x60>)
 800cf62:	f008 fab7 	bl	80154d4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f007 fd14 	bl	8014994 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	e003      	b.n	800cf78 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cf70:	68f8      	ldr	r0, [r7, #12]
 800cf72:	f007 fd0f 	bl	8014994 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3710      	adds	r7, #16
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	08019c20 	.word	0x08019c20
 800cf84:	08019c8c 	.word	0x08019c8c
 800cf88:	08019cb0 	.word	0x08019cb0

0800cf8c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	4603      	mov	r3, r0
 800cf94:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cf96:	79fb      	ldrb	r3, [r7, #7]
 800cf98:	2b0c      	cmp	r3, #12
 800cf9a:	d908      	bls.n	800cfae <memp_malloc+0x22>
 800cf9c:	4b0a      	ldr	r3, [pc, #40]	; (800cfc8 <memp_malloc+0x3c>)
 800cf9e:	f240 1257 	movw	r2, #343	; 0x157
 800cfa2:	490a      	ldr	r1, [pc, #40]	; (800cfcc <memp_malloc+0x40>)
 800cfa4:	480a      	ldr	r0, [pc, #40]	; (800cfd0 <memp_malloc+0x44>)
 800cfa6:	f008 fa95 	bl	80154d4 <iprintf>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	e008      	b.n	800cfc0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cfae:	79fb      	ldrb	r3, [r7, #7]
 800cfb0:	4a08      	ldr	r2, [pc, #32]	; (800cfd4 <memp_malloc+0x48>)
 800cfb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7ff ffb6 	bl	800cf28 <do_memp_malloc_pool>
 800cfbc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3710      	adds	r7, #16
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	08019c20 	.word	0x08019c20
 800cfcc:	08019cec 	.word	0x08019cec
 800cfd0:	08019cb0 	.word	0x08019cb0
 800cfd4:	08019bec 	.word	0x08019bec

0800cfd8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	f003 0303 	and.w	r3, r3, #3
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d006      	beq.n	800cffa <do_memp_free_pool+0x22>
 800cfec:	4b0d      	ldr	r3, [pc, #52]	; (800d024 <do_memp_free_pool+0x4c>)
 800cfee:	f240 126d 	movw	r2, #365	; 0x16d
 800cff2:	490d      	ldr	r1, [pc, #52]	; (800d028 <do_memp_free_pool+0x50>)
 800cff4:	480d      	ldr	r0, [pc, #52]	; (800d02c <do_memp_free_pool+0x54>)
 800cff6:	f008 fa6d 	bl	80154d4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800cffe:	f007 fcbb 	bl	8014978 <sys_arch_protect>
 800d002:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	68fa      	ldr	r2, [r7, #12]
 800d014:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d016:	68b8      	ldr	r0, [r7, #8]
 800d018:	f007 fcbc 	bl	8014994 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d01c:	bf00      	nop
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	08019c20 	.word	0x08019c20
 800d028:	08019d0c 	.word	0x08019d0c
 800d02c:	08019cb0 	.word	0x08019cb0

0800d030 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	4603      	mov	r3, r0
 800d038:	6039      	str	r1, [r7, #0]
 800d03a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d03c:	79fb      	ldrb	r3, [r7, #7]
 800d03e:	2b0c      	cmp	r3, #12
 800d040:	d907      	bls.n	800d052 <memp_free+0x22>
 800d042:	4b0c      	ldr	r3, [pc, #48]	; (800d074 <memp_free+0x44>)
 800d044:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d048:	490b      	ldr	r1, [pc, #44]	; (800d078 <memp_free+0x48>)
 800d04a:	480c      	ldr	r0, [pc, #48]	; (800d07c <memp_free+0x4c>)
 800d04c:	f008 fa42 	bl	80154d4 <iprintf>
 800d050:	e00c      	b.n	800d06c <memp_free+0x3c>

  if (mem == NULL) {
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d008      	beq.n	800d06a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d058:	79fb      	ldrb	r3, [r7, #7]
 800d05a:	4a09      	ldr	r2, [pc, #36]	; (800d080 <memp_free+0x50>)
 800d05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d060:	6839      	ldr	r1, [r7, #0]
 800d062:	4618      	mov	r0, r3
 800d064:	f7ff ffb8 	bl	800cfd8 <do_memp_free_pool>
 800d068:	e000      	b.n	800d06c <memp_free+0x3c>
    return;
 800d06a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d06c:	3708      	adds	r7, #8
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
 800d072:	bf00      	nop
 800d074:	08019c20 	.word	0x08019c20
 800d078:	08019d2c 	.word	0x08019d2c
 800d07c:	08019cb0 	.word	0x08019cb0
 800d080:	08019bec 	.word	0x08019bec

0800d084 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d084:	b480      	push	{r7}
 800d086:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d088:	bf00      	nop
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr
	...

0800d094 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b086      	sub	sp, #24
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
 800d0a0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d108      	bne.n	800d0ba <netif_add+0x26>
 800d0a8:	4b5b      	ldr	r3, [pc, #364]	; (800d218 <netif_add+0x184>)
 800d0aa:	f240 1227 	movw	r2, #295	; 0x127
 800d0ae:	495b      	ldr	r1, [pc, #364]	; (800d21c <netif_add+0x188>)
 800d0b0:	485b      	ldr	r0, [pc, #364]	; (800d220 <netif_add+0x18c>)
 800d0b2:	f008 fa0f 	bl	80154d4 <iprintf>
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	e0a9      	b.n	800d20e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d108      	bne.n	800d0d2 <netif_add+0x3e>
 800d0c0:	4b55      	ldr	r3, [pc, #340]	; (800d218 <netif_add+0x184>)
 800d0c2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d0c6:	4957      	ldr	r1, [pc, #348]	; (800d224 <netif_add+0x190>)
 800d0c8:	4855      	ldr	r0, [pc, #340]	; (800d220 <netif_add+0x18c>)
 800d0ca:	f008 fa03 	bl	80154d4 <iprintf>
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	e09d      	b.n	800d20e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d101      	bne.n	800d0dc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d0d8:	4b53      	ldr	r3, [pc, #332]	; (800d228 <netif_add+0x194>)
 800d0da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d0e2:	4b51      	ldr	r3, [pc, #324]	; (800d228 <netif_add+0x194>)
 800d0e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d101      	bne.n	800d0f0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d0ec:	4b4e      	ldr	r3, [pc, #312]	; (800d228 <netif_add+0x194>)
 800d0ee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	4a49      	ldr	r2, [pc, #292]	; (800d22c <netif_add+0x198>)
 800d106:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2200      	movs	r2, #0
 800d10c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2200      	movs	r2, #0
 800d112:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	3324      	adds	r3, #36	; 0x24
 800d11a:	2204      	movs	r2, #4
 800d11c:	2100      	movs	r1, #0
 800d11e:	4618      	mov	r0, r3
 800d120:	f007 fccb 	bl	8014aba <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2200      	movs	r2, #0
 800d128:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	6a3a      	ldr	r2, [r7, #32]
 800d12e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d130:	4b3f      	ldr	r3, [pc, #252]	; (800d230 <netif_add+0x19c>)
 800d132:	781a      	ldrb	r2, [r3, #0]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d13e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	68b9      	ldr	r1, [r7, #8]
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	f000 f914 	bl	800d374 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	4798      	blx	r3
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d001      	beq.n	800d15c <netif_add+0xc8>
    return NULL;
 800d158:	2300      	movs	r3, #0
 800d15a:	e058      	b.n	800d20e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d162:	2bff      	cmp	r3, #255	; 0xff
 800d164:	d103      	bne.n	800d16e <netif_add+0xda>
        netif->num = 0;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2200      	movs	r2, #0
 800d16a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800d16e:	2300      	movs	r3, #0
 800d170:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d172:	4b30      	ldr	r3, [pc, #192]	; (800d234 <netif_add+0x1a0>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	617b      	str	r3, [r7, #20]
 800d178:	e02b      	b.n	800d1d2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d17a:	697a      	ldr	r2, [r7, #20]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d106      	bne.n	800d190 <netif_add+0xfc>
 800d182:	4b25      	ldr	r3, [pc, #148]	; (800d218 <netif_add+0x184>)
 800d184:	f240 128b 	movw	r2, #395	; 0x18b
 800d188:	492b      	ldr	r1, [pc, #172]	; (800d238 <netif_add+0x1a4>)
 800d18a:	4825      	ldr	r0, [pc, #148]	; (800d220 <netif_add+0x18c>)
 800d18c:	f008 f9a2 	bl	80154d4 <iprintf>
        num_netifs++;
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	3301      	adds	r3, #1
 800d194:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	2bff      	cmp	r3, #255	; 0xff
 800d19a:	dd06      	ble.n	800d1aa <netif_add+0x116>
 800d19c:	4b1e      	ldr	r3, [pc, #120]	; (800d218 <netif_add+0x184>)
 800d19e:	f240 128d 	movw	r2, #397	; 0x18d
 800d1a2:	4926      	ldr	r1, [pc, #152]	; (800d23c <netif_add+0x1a8>)
 800d1a4:	481e      	ldr	r0, [pc, #120]	; (800d220 <netif_add+0x18c>)
 800d1a6:	f008 f995 	bl	80154d4 <iprintf>
        if (netif2->num == netif->num) {
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d108      	bne.n	800d1cc <netif_add+0x138>
          netif->num++;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d1c0:	3301      	adds	r3, #1
 800d1c2:	b2da      	uxtb	r2, r3
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800d1ca:	e005      	b.n	800d1d8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	617b      	str	r3, [r7, #20]
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1d0      	bne.n	800d17a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1be      	bne.n	800d15c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d1e4:	2bfe      	cmp	r3, #254	; 0xfe
 800d1e6:	d103      	bne.n	800d1f0 <netif_add+0x15c>
    netif_num = 0;
 800d1e8:	4b11      	ldr	r3, [pc, #68]	; (800d230 <netif_add+0x19c>)
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	701a      	strb	r2, [r3, #0]
 800d1ee:	e006      	b.n	800d1fe <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	b2da      	uxtb	r2, r3
 800d1fa:	4b0d      	ldr	r3, [pc, #52]	; (800d230 <netif_add+0x19c>)
 800d1fc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d1fe:	4b0d      	ldr	r3, [pc, #52]	; (800d234 <netif_add+0x1a0>)
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d206:	4a0b      	ldr	r2, [pc, #44]	; (800d234 <netif_add+0x1a0>)
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d20c:	68fb      	ldr	r3, [r7, #12]
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3718      	adds	r7, #24
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	08019d48 	.word	0x08019d48
 800d21c:	08019e14 	.word	0x08019e14
 800d220:	08019dd0 	.word	0x08019dd0
 800d224:	08019e30 	.word	0x08019e30
 800d228:	0801958c 	.word	0x0801958c
 800d22c:	0800d565 	.word	0x0800d565
 800d230:	200068c8 	.word	0x200068c8
 800d234:	2000cfb8 	.word	0x2000cfb8
 800d238:	08019e54 	.word	0x08019e54
 800d23c:	08019e68 	.word	0x08019e68

0800d240 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d24a:	6839      	ldr	r1, [r7, #0]
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f002 fcf1 	bl	800fc34 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d252:	6839      	ldr	r1, [r7, #0]
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f007 f99f 	bl	8014598 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d25a:	bf00      	nop
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
	...

0800d264 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d106      	bne.n	800d284 <netif_do_set_ipaddr+0x20>
 800d276:	4b1d      	ldr	r3, [pc, #116]	; (800d2ec <netif_do_set_ipaddr+0x88>)
 800d278:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d27c:	491c      	ldr	r1, [pc, #112]	; (800d2f0 <netif_do_set_ipaddr+0x8c>)
 800d27e:	481d      	ldr	r0, [pc, #116]	; (800d2f4 <netif_do_set_ipaddr+0x90>)
 800d280:	f008 f928 	bl	80154d4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d106      	bne.n	800d298 <netif_do_set_ipaddr+0x34>
 800d28a:	4b18      	ldr	r3, [pc, #96]	; (800d2ec <netif_do_set_ipaddr+0x88>)
 800d28c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d290:	4917      	ldr	r1, [pc, #92]	; (800d2f0 <netif_do_set_ipaddr+0x8c>)
 800d292:	4818      	ldr	r0, [pc, #96]	; (800d2f4 <netif_do_set_ipaddr+0x90>)
 800d294:	f008 f91e 	bl	80154d4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	3304      	adds	r3, #4
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d01c      	beq.n	800d2e0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	3304      	adds	r3, #4
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d2b6:	f107 0314 	add.w	r3, r7, #20
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f7ff ffbf 	bl	800d240 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d002      	beq.n	800d2ce <netif_do_set_ipaddr+0x6a>
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	e000      	b.n	800d2d0 <netif_do_set_ipaddr+0x6c>
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	68fa      	ldr	r2, [r7, #12]
 800d2d2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d2d4:	2101      	movs	r1, #1
 800d2d6:	68f8      	ldr	r0, [r7, #12]
 800d2d8:	f000 f8d2 	bl	800d480 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e000      	b.n	800d2e2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d2e0:	2300      	movs	r3, #0
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3718      	adds	r7, #24
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	08019d48 	.word	0x08019d48
 800d2f0:	08019e98 	.word	0x08019e98
 800d2f4:	08019dd0 	.word	0x08019dd0

0800d2f8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	3308      	adds	r3, #8
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d00a      	beq.n	800d328 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d002      	beq.n	800d31e <netif_do_set_netmask+0x26>
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	e000      	b.n	800d320 <netif_do_set_netmask+0x28>
 800d31e:	2300      	movs	r3, #0
 800d320:	68fa      	ldr	r2, [r7, #12]
 800d322:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d324:	2301      	movs	r3, #1
 800d326:	e000      	b.n	800d32a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3714      	adds	r7, #20
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr

0800d336 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d336:	b480      	push	{r7}
 800d338:	b085      	sub	sp, #20
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	60f8      	str	r0, [r7, #12]
 800d33e:	60b9      	str	r1, [r7, #8]
 800d340:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	681a      	ldr	r2, [r3, #0]
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	330c      	adds	r3, #12
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d00a      	beq.n	800d366 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d002      	beq.n	800d35c <netif_do_set_gw+0x26>
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	e000      	b.n	800d35e <netif_do_set_gw+0x28>
 800d35c:	2300      	movs	r3, #0
 800d35e:	68fa      	ldr	r2, [r7, #12]
 800d360:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d362:	2301      	movs	r3, #1
 800d364:	e000      	b.n	800d368 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d366:	2300      	movs	r3, #0
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3714      	adds	r7, #20
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr

0800d374 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b088      	sub	sp, #32
 800d378:	af00      	add	r7, sp, #0
 800d37a:	60f8      	str	r0, [r7, #12]
 800d37c:	60b9      	str	r1, [r7, #8]
 800d37e:	607a      	str	r2, [r7, #4]
 800d380:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d382:	2300      	movs	r3, #0
 800d384:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d386:	2300      	movs	r3, #0
 800d388:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d101      	bne.n	800d394 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d390:	4b1c      	ldr	r3, [pc, #112]	; (800d404 <netif_set_addr+0x90>)
 800d392:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d101      	bne.n	800d39e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d39a:	4b1a      	ldr	r3, [pc, #104]	; (800d404 <netif_set_addr+0x90>)
 800d39c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d101      	bne.n	800d3a8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d3a4:	4b17      	ldr	r3, [pc, #92]	; (800d404 <netif_set_addr+0x90>)
 800d3a6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d003      	beq.n	800d3b6 <netif_set_addr+0x42>
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d101      	bne.n	800d3ba <netif_set_addr+0x46>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e000      	b.n	800d3bc <netif_set_addr+0x48>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d006      	beq.n	800d3d2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d3c4:	f107 0310 	add.w	r3, r7, #16
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	68b9      	ldr	r1, [r7, #8]
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f7ff ff49 	bl	800d264 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d3d2:	69fa      	ldr	r2, [r7, #28]
 800d3d4:	6879      	ldr	r1, [r7, #4]
 800d3d6:	68f8      	ldr	r0, [r7, #12]
 800d3d8:	f7ff ff8e 	bl	800d2f8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d3dc:	69ba      	ldr	r2, [r7, #24]
 800d3de:	6839      	ldr	r1, [r7, #0]
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f7ff ffa8 	bl	800d336 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d106      	bne.n	800d3fa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d3ec:	f107 0310 	add.w	r3, r7, #16
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	68b9      	ldr	r1, [r7, #8]
 800d3f4:	68f8      	ldr	r0, [r7, #12]
 800d3f6:	f7ff ff35 	bl	800d264 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d3fa:	bf00      	nop
 800d3fc:	3720      	adds	r7, #32
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	0801958c 	.word	0x0801958c

0800d408 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d410:	4a04      	ldr	r2, [pc, #16]	; (800d424 <netif_set_default+0x1c>)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d416:	bf00      	nop
 800d418:	370c      	adds	r7, #12
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	2000cfbc 	.word	0x2000cfbc

0800d428 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d107      	bne.n	800d446 <netif_set_up+0x1e>
 800d436:	4b0f      	ldr	r3, [pc, #60]	; (800d474 <netif_set_up+0x4c>)
 800d438:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d43c:	490e      	ldr	r1, [pc, #56]	; (800d478 <netif_set_up+0x50>)
 800d43e:	480f      	ldr	r0, [pc, #60]	; (800d47c <netif_set_up+0x54>)
 800d440:	f008 f848 	bl	80154d4 <iprintf>
 800d444:	e013      	b.n	800d46e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d44c:	f003 0301 	and.w	r3, r3, #1
 800d450:	2b00      	cmp	r3, #0
 800d452:	d10c      	bne.n	800d46e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d45a:	f043 0301 	orr.w	r3, r3, #1
 800d45e:	b2da      	uxtb	r2, r3
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d466:	2103      	movs	r1, #3
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 f809 	bl	800d480 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d46e:	3708      	adds	r7, #8
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	08019d48 	.word	0x08019d48
 800d478:	08019f08 	.word	0x08019f08
 800d47c:	08019dd0 	.word	0x08019dd0

0800d480 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	460b      	mov	r3, r1
 800d48a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d106      	bne.n	800d4a0 <netif_issue_reports+0x20>
 800d492:	4b18      	ldr	r3, [pc, #96]	; (800d4f4 <netif_issue_reports+0x74>)
 800d494:	f240 326d 	movw	r2, #877	; 0x36d
 800d498:	4917      	ldr	r1, [pc, #92]	; (800d4f8 <netif_issue_reports+0x78>)
 800d49a:	4818      	ldr	r0, [pc, #96]	; (800d4fc <netif_issue_reports+0x7c>)
 800d49c:	f008 f81a 	bl	80154d4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d4a6:	f003 0304 	and.w	r3, r3, #4
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d01e      	beq.n	800d4ec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d4b4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d017      	beq.n	800d4ec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d4bc:	78fb      	ldrb	r3, [r7, #3]
 800d4be:	f003 0301 	and.w	r3, r3, #1
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d013      	beq.n	800d4ee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	3304      	adds	r3, #4
 800d4ca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00e      	beq.n	800d4ee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d4d6:	f003 0308 	and.w	r3, r3, #8
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d007      	beq.n	800d4ee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	3304      	adds	r3, #4
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7fd fd1f 	bl	800af28 <etharp_request>
 800d4ea:	e000      	b.n	800d4ee <netif_issue_reports+0x6e>
    return;
 800d4ec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d4ee:	3708      	adds	r7, #8
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	08019d48 	.word	0x08019d48
 800d4f8:	08019f24 	.word	0x08019f24
 800d4fc:	08019dd0 	.word	0x08019dd0

0800d500 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d107      	bne.n	800d51e <netif_set_down+0x1e>
 800d50e:	4b12      	ldr	r3, [pc, #72]	; (800d558 <netif_set_down+0x58>)
 800d510:	f240 329b 	movw	r2, #923	; 0x39b
 800d514:	4911      	ldr	r1, [pc, #68]	; (800d55c <netif_set_down+0x5c>)
 800d516:	4812      	ldr	r0, [pc, #72]	; (800d560 <netif_set_down+0x60>)
 800d518:	f007 ffdc 	bl	80154d4 <iprintf>
 800d51c:	e019      	b.n	800d552 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d524:	f003 0301 	and.w	r3, r3, #1
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d012      	beq.n	800d552 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d532:	f023 0301 	bic.w	r3, r3, #1
 800d536:	b2da      	uxtb	r2, r3
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d544:	f003 0308 	and.w	r3, r3, #8
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d002      	beq.n	800d552 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f7fd f8a5 	bl	800a69c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d552:	3708      	adds	r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	08019d48 	.word	0x08019d48
 800d55c:	08019f48 	.word	0x08019f48
 800d560:	08019dd0 	.word	0x08019dd0

0800d564 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d564:	b480      	push	{r7}
 800d566:	b085      	sub	sp, #20
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d570:	f06f 030b 	mvn.w	r3, #11
}
 800d574:	4618      	mov	r0, r3
 800d576:	3714      	adds	r7, #20
 800d578:	46bd      	mov	sp, r7
 800d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57e:	4770      	bx	lr

0800d580 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d580:	b480      	push	{r7}
 800d582:	b085      	sub	sp, #20
 800d584:	af00      	add	r7, sp, #0
 800d586:	4603      	mov	r3, r0
 800d588:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d58a:	79fb      	ldrb	r3, [r7, #7]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d013      	beq.n	800d5b8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d590:	4b0d      	ldr	r3, [pc, #52]	; (800d5c8 <netif_get_by_index+0x48>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	60fb      	str	r3, [r7, #12]
 800d596:	e00c      	b.n	800d5b2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d59e:	3301      	adds	r3, #1
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	79fa      	ldrb	r2, [r7, #7]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d101      	bne.n	800d5ac <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	e006      	b.n	800d5ba <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	60fb      	str	r3, [r7, #12]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d1ef      	bne.n	800d598 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d5b8:	2300      	movs	r3, #0
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3714      	adds	r7, #20
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c4:	4770      	bx	lr
 800d5c6:	bf00      	nop
 800d5c8:	2000cfb8 	.word	0x2000cfb8

0800d5cc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	461a      	mov	r2, r3
 800d5da:	460b      	mov	r3, r1
 800d5dc:	80fb      	strh	r3, [r7, #6]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	68ba      	ldr	r2, [r7, #8]
 800d5ec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	88fa      	ldrh	r2, [r7, #6]
 800d5f2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	88ba      	ldrh	r2, [r7, #4]
 800d5f8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d5fa:	8b3b      	ldrh	r3, [r7, #24]
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	7f3a      	ldrb	r2, [r7, #28]
 800d606:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2201      	movs	r2, #1
 800d60c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2200      	movs	r2, #0
 800d612:	73da      	strb	r2, [r3, #15]
}
 800d614:	bf00      	nop
 800d616:	3714      	adds	r7, #20
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr

0800d620 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b08c      	sub	sp, #48	; 0x30
 800d624:	af02      	add	r7, sp, #8
 800d626:	4603      	mov	r3, r0
 800d628:	71fb      	strb	r3, [r7, #7]
 800d62a:	460b      	mov	r3, r1
 800d62c:	80bb      	strh	r3, [r7, #4]
 800d62e:	4613      	mov	r3, r2
 800d630:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d632:	79fb      	ldrb	r3, [r7, #7]
 800d634:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d636:	887b      	ldrh	r3, [r7, #2]
 800d638:	2b41      	cmp	r3, #65	; 0x41
 800d63a:	d00b      	beq.n	800d654 <pbuf_alloc+0x34>
 800d63c:	2b41      	cmp	r3, #65	; 0x41
 800d63e:	dc02      	bgt.n	800d646 <pbuf_alloc+0x26>
 800d640:	2b01      	cmp	r3, #1
 800d642:	d007      	beq.n	800d654 <pbuf_alloc+0x34>
 800d644:	e0c2      	b.n	800d7cc <pbuf_alloc+0x1ac>
 800d646:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d64a:	d00b      	beq.n	800d664 <pbuf_alloc+0x44>
 800d64c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d650:	d070      	beq.n	800d734 <pbuf_alloc+0x114>
 800d652:	e0bb      	b.n	800d7cc <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d654:	887a      	ldrh	r2, [r7, #2]
 800d656:	88bb      	ldrh	r3, [r7, #4]
 800d658:	4619      	mov	r1, r3
 800d65a:	2000      	movs	r0, #0
 800d65c:	f000 f8d2 	bl	800d804 <pbuf_alloc_reference>
 800d660:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d662:	e0bd      	b.n	800d7e0 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d664:	2300      	movs	r3, #0
 800d666:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d668:	2300      	movs	r3, #0
 800d66a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d66c:	88bb      	ldrh	r3, [r7, #4]
 800d66e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d670:	200c      	movs	r0, #12
 800d672:	f7ff fc8b 	bl	800cf8c <memp_malloc>
 800d676:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d107      	bne.n	800d68e <pbuf_alloc+0x6e>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800d67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d680:	2b00      	cmp	r3, #0
 800d682:	d002      	beq.n	800d68a <pbuf_alloc+0x6a>
            pbuf_free(p);
 800d684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d686:	f000 faab 	bl	800dbe0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d68a:	2300      	movs	r3, #0
 800d68c:	e0a9      	b.n	800d7e2 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d68e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d690:	3303      	adds	r3, #3
 800d692:	b29b      	uxth	r3, r3
 800d694:	f023 0303 	bic.w	r3, r3, #3
 800d698:	b29a      	uxth	r2, r3
 800d69a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800d69e:	1a9b      	subs	r3, r3, r2
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	8b7a      	ldrh	r2, [r7, #26]
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	bf28      	it	cs
 800d6a8:	4613      	movcs	r3, r2
 800d6aa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d6ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6ae:	3310      	adds	r3, #16
 800d6b0:	693a      	ldr	r2, [r7, #16]
 800d6b2:	4413      	add	r3, r2
 800d6b4:	3303      	adds	r3, #3
 800d6b6:	f023 0303 	bic.w	r3, r3, #3
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	89f9      	ldrh	r1, [r7, #14]
 800d6be:	8b7a      	ldrh	r2, [r7, #26]
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	9301      	str	r3, [sp, #4]
 800d6c4:	887b      	ldrh	r3, [r7, #2]
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	4601      	mov	r1, r0
 800d6cc:	6938      	ldr	r0, [r7, #16]
 800d6ce:	f7ff ff7d 	bl	800d5cc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	f003 0303 	and.w	r3, r3, #3
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d006      	beq.n	800d6ec <pbuf_alloc+0xcc>
 800d6de:	4b43      	ldr	r3, [pc, #268]	; (800d7ec <pbuf_alloc+0x1cc>)
 800d6e0:	f240 1201 	movw	r2, #257	; 0x101
 800d6e4:	4942      	ldr	r1, [pc, #264]	; (800d7f0 <pbuf_alloc+0x1d0>)
 800d6e6:	4843      	ldr	r0, [pc, #268]	; (800d7f4 <pbuf_alloc+0x1d4>)
 800d6e8:	f007 fef4 	bl	80154d4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d6ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6ee:	3303      	adds	r3, #3
 800d6f0:	f023 0303 	bic.w	r3, r3, #3
 800d6f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d106      	bne.n	800d70a <pbuf_alloc+0xea>
 800d6fc:	4b3b      	ldr	r3, [pc, #236]	; (800d7ec <pbuf_alloc+0x1cc>)
 800d6fe:	f240 1203 	movw	r2, #259	; 0x103
 800d702:	493d      	ldr	r1, [pc, #244]	; (800d7f8 <pbuf_alloc+0x1d8>)
 800d704:	483b      	ldr	r0, [pc, #236]	; (800d7f4 <pbuf_alloc+0x1d4>)
 800d706:	f007 fee5 	bl	80154d4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d102      	bne.n	800d716 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	627b      	str	r3, [r7, #36]	; 0x24
 800d714:	e002      	b.n	800d71c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d716:	69fb      	ldr	r3, [r7, #28]
 800d718:	693a      	ldr	r2, [r7, #16]
 800d71a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d720:	8b7a      	ldrh	r2, [r7, #26]
 800d722:	89fb      	ldrh	r3, [r7, #14]
 800d724:	1ad3      	subs	r3, r2, r3
 800d726:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d728:	2300      	movs	r3, #0
 800d72a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d72c:	8b7b      	ldrh	r3, [r7, #26]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d19e      	bne.n	800d670 <pbuf_alloc+0x50>
      break;
 800d732:	e055      	b.n	800d7e0 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d734:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d736:	3303      	adds	r3, #3
 800d738:	b29b      	uxth	r3, r3
 800d73a:	f023 0303 	bic.w	r3, r3, #3
 800d73e:	b29a      	uxth	r2, r3
 800d740:	88bb      	ldrh	r3, [r7, #4]
 800d742:	3303      	adds	r3, #3
 800d744:	b29b      	uxth	r3, r3
 800d746:	f023 0303 	bic.w	r3, r3, #3
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	4413      	add	r3, r2
 800d74e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d750:	8b3b      	ldrh	r3, [r7, #24]
 800d752:	3310      	adds	r3, #16
 800d754:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d756:	8b3a      	ldrh	r2, [r7, #24]
 800d758:	88bb      	ldrh	r3, [r7, #4]
 800d75a:	3303      	adds	r3, #3
 800d75c:	f023 0303 	bic.w	r3, r3, #3
 800d760:	429a      	cmp	r2, r3
 800d762:	d306      	bcc.n	800d772 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d764:	8afa      	ldrh	r2, [r7, #22]
 800d766:	88bb      	ldrh	r3, [r7, #4]
 800d768:	3303      	adds	r3, #3
 800d76a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d76e:	429a      	cmp	r2, r3
 800d770:	d201      	bcs.n	800d776 <pbuf_alloc+0x156>
        return NULL;
 800d772:	2300      	movs	r3, #0
 800d774:	e035      	b.n	800d7e2 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d776:	8afb      	ldrh	r3, [r7, #22]
 800d778:	4618      	mov	r0, r3
 800d77a:	f7ff fa85 	bl	800cc88 <mem_malloc>
 800d77e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d782:	2b00      	cmp	r3, #0
 800d784:	d101      	bne.n	800d78a <pbuf_alloc+0x16a>
        return NULL;
 800d786:	2300      	movs	r3, #0
 800d788:	e02b      	b.n	800d7e2 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d78a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d78c:	3310      	adds	r3, #16
 800d78e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d790:	4413      	add	r3, r2
 800d792:	3303      	adds	r3, #3
 800d794:	f023 0303 	bic.w	r3, r3, #3
 800d798:	4618      	mov	r0, r3
 800d79a:	88b9      	ldrh	r1, [r7, #4]
 800d79c:	88ba      	ldrh	r2, [r7, #4]
 800d79e:	2300      	movs	r3, #0
 800d7a0:	9301      	str	r3, [sp, #4]
 800d7a2:	887b      	ldrh	r3, [r7, #2]
 800d7a4:	9300      	str	r3, [sp, #0]
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	4601      	mov	r1, r0
 800d7aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7ac:	f7ff ff0e 	bl	800d5cc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	f003 0303 	and.w	r3, r3, #3
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d010      	beq.n	800d7de <pbuf_alloc+0x1be>
 800d7bc:	4b0b      	ldr	r3, [pc, #44]	; (800d7ec <pbuf_alloc+0x1cc>)
 800d7be:	f240 1223 	movw	r2, #291	; 0x123
 800d7c2:	490e      	ldr	r1, [pc, #56]	; (800d7fc <pbuf_alloc+0x1dc>)
 800d7c4:	480b      	ldr	r0, [pc, #44]	; (800d7f4 <pbuf_alloc+0x1d4>)
 800d7c6:	f007 fe85 	bl	80154d4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d7ca:	e008      	b.n	800d7de <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d7cc:	4b07      	ldr	r3, [pc, #28]	; (800d7ec <pbuf_alloc+0x1cc>)
 800d7ce:	f240 1227 	movw	r2, #295	; 0x127
 800d7d2:	490b      	ldr	r1, [pc, #44]	; (800d800 <pbuf_alloc+0x1e0>)
 800d7d4:	4807      	ldr	r0, [pc, #28]	; (800d7f4 <pbuf_alloc+0x1d4>)
 800d7d6:	f007 fe7d 	bl	80154d4 <iprintf>
      return NULL;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	e001      	b.n	800d7e2 <pbuf_alloc+0x1c2>
      break;
 800d7de:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3728      	adds	r7, #40	; 0x28
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	08019fb0 	.word	0x08019fb0
 800d7f0:	0801a01c 	.word	0x0801a01c
 800d7f4:	0801a04c 	.word	0x0801a04c
 800d7f8:	0801a074 	.word	0x0801a074
 800d7fc:	0801a0a8 	.word	0x0801a0a8
 800d800:	0801a0d4 	.word	0x0801a0d4

0800d804 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b086      	sub	sp, #24
 800d808:	af02      	add	r7, sp, #8
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	460b      	mov	r3, r1
 800d80e:	807b      	strh	r3, [r7, #2]
 800d810:	4613      	mov	r3, r2
 800d812:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d814:	883b      	ldrh	r3, [r7, #0]
 800d816:	2b41      	cmp	r3, #65	; 0x41
 800d818:	d009      	beq.n	800d82e <pbuf_alloc_reference+0x2a>
 800d81a:	883b      	ldrh	r3, [r7, #0]
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d006      	beq.n	800d82e <pbuf_alloc_reference+0x2a>
 800d820:	4b0f      	ldr	r3, [pc, #60]	; (800d860 <pbuf_alloc_reference+0x5c>)
 800d822:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d826:	490f      	ldr	r1, [pc, #60]	; (800d864 <pbuf_alloc_reference+0x60>)
 800d828:	480f      	ldr	r0, [pc, #60]	; (800d868 <pbuf_alloc_reference+0x64>)
 800d82a:	f007 fe53 	bl	80154d4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d82e:	200b      	movs	r0, #11
 800d830:	f7ff fbac 	bl	800cf8c <memp_malloc>
 800d834:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d101      	bne.n	800d840 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d83c:	2300      	movs	r3, #0
 800d83e:	e00b      	b.n	800d858 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d840:	8879      	ldrh	r1, [r7, #2]
 800d842:	887a      	ldrh	r2, [r7, #2]
 800d844:	2300      	movs	r3, #0
 800d846:	9301      	str	r3, [sp, #4]
 800d848:	883b      	ldrh	r3, [r7, #0]
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	460b      	mov	r3, r1
 800d84e:	6879      	ldr	r1, [r7, #4]
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f7ff febb 	bl	800d5cc <pbuf_init_alloced_pbuf>
  return p;
 800d856:	68fb      	ldr	r3, [r7, #12]
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3710      	adds	r7, #16
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	08019fb0 	.word	0x08019fb0
 800d864:	0801a0f0 	.word	0x0801a0f0
 800d868:	0801a04c 	.word	0x0801a04c

0800d86c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b088      	sub	sp, #32
 800d870:	af02      	add	r7, sp, #8
 800d872:	607b      	str	r3, [r7, #4]
 800d874:	4603      	mov	r3, r0
 800d876:	73fb      	strb	r3, [r7, #15]
 800d878:	460b      	mov	r3, r1
 800d87a:	81bb      	strh	r3, [r7, #12]
 800d87c:	4613      	mov	r3, r2
 800d87e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d880:	7bfb      	ldrb	r3, [r7, #15]
 800d882:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d884:	8a7b      	ldrh	r3, [r7, #18]
 800d886:	3303      	adds	r3, #3
 800d888:	f023 0203 	bic.w	r2, r3, #3
 800d88c:	89bb      	ldrh	r3, [r7, #12]
 800d88e:	441a      	add	r2, r3
 800d890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d892:	429a      	cmp	r2, r3
 800d894:	d901      	bls.n	800d89a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d896:	2300      	movs	r3, #0
 800d898:	e018      	b.n	800d8cc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d89a:	6a3b      	ldr	r3, [r7, #32]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d007      	beq.n	800d8b0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d8a0:	8a7b      	ldrh	r3, [r7, #18]
 800d8a2:	3303      	adds	r3, #3
 800d8a4:	f023 0303 	bic.w	r3, r3, #3
 800d8a8:	6a3a      	ldr	r2, [r7, #32]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	617b      	str	r3, [r7, #20]
 800d8ae:	e001      	b.n	800d8b4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	89b9      	ldrh	r1, [r7, #12]
 800d8b8:	89ba      	ldrh	r2, [r7, #12]
 800d8ba:	2302      	movs	r3, #2
 800d8bc:	9301      	str	r3, [sp, #4]
 800d8be:	897b      	ldrh	r3, [r7, #10]
 800d8c0:	9300      	str	r3, [sp, #0]
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	6979      	ldr	r1, [r7, #20]
 800d8c6:	f7ff fe81 	bl	800d5cc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d8ca:	687b      	ldr	r3, [r7, #4]
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3718      	adds	r7, #24
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	460b      	mov	r3, r1
 800d8de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d106      	bne.n	800d8f4 <pbuf_realloc+0x20>
 800d8e6:	4b3a      	ldr	r3, [pc, #232]	; (800d9d0 <pbuf_realloc+0xfc>)
 800d8e8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d8ec:	4939      	ldr	r1, [pc, #228]	; (800d9d4 <pbuf_realloc+0x100>)
 800d8ee:	483a      	ldr	r0, [pc, #232]	; (800d9d8 <pbuf_realloc+0x104>)
 800d8f0:	f007 fdf0 	bl	80154d4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	891b      	ldrh	r3, [r3, #8]
 800d8f8:	887a      	ldrh	r2, [r7, #2]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d264      	bcs.n	800d9c8 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	891a      	ldrh	r2, [r3, #8]
 800d902:	887b      	ldrh	r3, [r7, #2]
 800d904:	1ad3      	subs	r3, r2, r3
 800d906:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d908:	887b      	ldrh	r3, [r7, #2]
 800d90a:	817b      	strh	r3, [r7, #10]
  q = p;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d910:	e018      	b.n	800d944 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	895b      	ldrh	r3, [r3, #10]
 800d916:	897a      	ldrh	r2, [r7, #10]
 800d918:	1ad3      	subs	r3, r2, r3
 800d91a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	891a      	ldrh	r2, [r3, #8]
 800d920:	893b      	ldrh	r3, [r7, #8]
 800d922:	1ad3      	subs	r3, r2, r3
 800d924:	b29a      	uxth	r2, r3
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d106      	bne.n	800d944 <pbuf_realloc+0x70>
 800d936:	4b26      	ldr	r3, [pc, #152]	; (800d9d0 <pbuf_realloc+0xfc>)
 800d938:	f240 12af 	movw	r2, #431	; 0x1af
 800d93c:	4927      	ldr	r1, [pc, #156]	; (800d9dc <pbuf_realloc+0x108>)
 800d93e:	4826      	ldr	r0, [pc, #152]	; (800d9d8 <pbuf_realloc+0x104>)
 800d940:	f007 fdc8 	bl	80154d4 <iprintf>
  while (rem_len > q->len) {
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	895b      	ldrh	r3, [r3, #10]
 800d948:	897a      	ldrh	r2, [r7, #10]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d8e1      	bhi.n	800d912 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	7b1b      	ldrb	r3, [r3, #12]
 800d952:	f003 030f 	and.w	r3, r3, #15
 800d956:	2b00      	cmp	r3, #0
 800d958:	d122      	bne.n	800d9a0 <pbuf_realloc+0xcc>
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	895b      	ldrh	r3, [r3, #10]
 800d95e:	897a      	ldrh	r2, [r7, #10]
 800d960:	429a      	cmp	r2, r3
 800d962:	d01d      	beq.n	800d9a0 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	7b5b      	ldrb	r3, [r3, #13]
 800d968:	f003 0302 	and.w	r3, r3, #2
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d117      	bne.n	800d9a0 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	461a      	mov	r2, r3
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	1ad3      	subs	r3, r2, r3
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	897b      	ldrh	r3, [r7, #10]
 800d97e:	4413      	add	r3, r2
 800d980:	b29b      	uxth	r3, r3
 800d982:	4619      	mov	r1, r3
 800d984:	68f8      	ldr	r0, [r7, #12]
 800d986:	f7ff f875 	bl	800ca74 <mem_trim>
 800d98a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d106      	bne.n	800d9a0 <pbuf_realloc+0xcc>
 800d992:	4b0f      	ldr	r3, [pc, #60]	; (800d9d0 <pbuf_realloc+0xfc>)
 800d994:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d998:	4911      	ldr	r1, [pc, #68]	; (800d9e0 <pbuf_realloc+0x10c>)
 800d99a:	480f      	ldr	r0, [pc, #60]	; (800d9d8 <pbuf_realloc+0x104>)
 800d99c:	f007 fd9a 	bl	80154d4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	897a      	ldrh	r2, [r7, #10]
 800d9a4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	895a      	ldrh	r2, [r3, #10]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d004      	beq.n	800d9c0 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f000 f910 	bl	800dbe0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	601a      	str	r2, [r3, #0]
 800d9c6:	e000      	b.n	800d9ca <pbuf_realloc+0xf6>
    return;
 800d9c8:	bf00      	nop

}
 800d9ca:	3710      	adds	r7, #16
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	08019fb0 	.word	0x08019fb0
 800d9d4:	0801a104 	.word	0x0801a104
 800d9d8:	0801a04c 	.word	0x0801a04c
 800d9dc:	0801a11c 	.word	0x0801a11c
 800d9e0:	0801a134 	.word	0x0801a134

0800d9e4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b086      	sub	sp, #24
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d106      	bne.n	800da06 <pbuf_add_header_impl+0x22>
 800d9f8:	4b2b      	ldr	r3, [pc, #172]	; (800daa8 <pbuf_add_header_impl+0xc4>)
 800d9fa:	f240 12df 	movw	r2, #479	; 0x1df
 800d9fe:	492b      	ldr	r1, [pc, #172]	; (800daac <pbuf_add_header_impl+0xc8>)
 800da00:	482b      	ldr	r0, [pc, #172]	; (800dab0 <pbuf_add_header_impl+0xcc>)
 800da02:	f007 fd67 	bl	80154d4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d003      	beq.n	800da14 <pbuf_add_header_impl+0x30>
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da12:	d301      	bcc.n	800da18 <pbuf_add_header_impl+0x34>
    return 1;
 800da14:	2301      	movs	r3, #1
 800da16:	e043      	b.n	800daa0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d101      	bne.n	800da22 <pbuf_add_header_impl+0x3e>
    return 0;
 800da1e:	2300      	movs	r3, #0
 800da20:	e03e      	b.n	800daa0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	891a      	ldrh	r2, [r3, #8]
 800da2a:	8a7b      	ldrh	r3, [r7, #18]
 800da2c:	4413      	add	r3, r2
 800da2e:	b29b      	uxth	r3, r3
 800da30:	8a7a      	ldrh	r2, [r7, #18]
 800da32:	429a      	cmp	r2, r3
 800da34:	d901      	bls.n	800da3a <pbuf_add_header_impl+0x56>
    return 1;
 800da36:	2301      	movs	r3, #1
 800da38:	e032      	b.n	800daa0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	7b1b      	ldrb	r3, [r3, #12]
 800da3e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800da40:	8a3b      	ldrh	r3, [r7, #16]
 800da42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da46:	2b00      	cmp	r3, #0
 800da48:	d00c      	beq.n	800da64 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	685a      	ldr	r2, [r3, #4]
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	425b      	negs	r3, r3
 800da52:	4413      	add	r3, r2
 800da54:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	3310      	adds	r3, #16
 800da5a:	697a      	ldr	r2, [r7, #20]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d20d      	bcs.n	800da7c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800da60:	2301      	movs	r3, #1
 800da62:	e01d      	b.n	800daa0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800da64:	79fb      	ldrb	r3, [r7, #7]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d006      	beq.n	800da78 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	685a      	ldr	r2, [r3, #4]
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	425b      	negs	r3, r3
 800da72:	4413      	add	r3, r2
 800da74:	617b      	str	r3, [r7, #20]
 800da76:	e001      	b.n	800da7c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800da78:	2301      	movs	r3, #1
 800da7a:	e011      	b.n	800daa0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	697a      	ldr	r2, [r7, #20]
 800da80:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	895a      	ldrh	r2, [r3, #10]
 800da86:	8a7b      	ldrh	r3, [r7, #18]
 800da88:	4413      	add	r3, r2
 800da8a:	b29a      	uxth	r2, r3
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	891a      	ldrh	r2, [r3, #8]
 800da94:	8a7b      	ldrh	r3, [r7, #18]
 800da96:	4413      	add	r3, r2
 800da98:	b29a      	uxth	r2, r3
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	811a      	strh	r2, [r3, #8]


  return 0;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3718      	adds	r7, #24
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	08019fb0 	.word	0x08019fb0
 800daac:	0801a150 	.word	0x0801a150
 800dab0:	0801a04c 	.word	0x0801a04c

0800dab4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dabe:	2200      	movs	r2, #0
 800dac0:	6839      	ldr	r1, [r7, #0]
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f7ff ff8e 	bl	800d9e4 <pbuf_add_header_impl>
 800dac8:	4603      	mov	r3, r0
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
	...

0800dad4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d106      	bne.n	800daf2 <pbuf_remove_header+0x1e>
 800dae4:	4b20      	ldr	r3, [pc, #128]	; (800db68 <pbuf_remove_header+0x94>)
 800dae6:	f240 224b 	movw	r2, #587	; 0x24b
 800daea:	4920      	ldr	r1, [pc, #128]	; (800db6c <pbuf_remove_header+0x98>)
 800daec:	4820      	ldr	r0, [pc, #128]	; (800db70 <pbuf_remove_header+0x9c>)
 800daee:	f007 fcf1 	bl	80154d4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d003      	beq.n	800db00 <pbuf_remove_header+0x2c>
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dafe:	d301      	bcc.n	800db04 <pbuf_remove_header+0x30>
    return 1;
 800db00:	2301      	movs	r3, #1
 800db02:	e02c      	b.n	800db5e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d101      	bne.n	800db0e <pbuf_remove_header+0x3a>
    return 0;
 800db0a:	2300      	movs	r3, #0
 800db0c:	e027      	b.n	800db5e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	895b      	ldrh	r3, [r3, #10]
 800db16:	89fa      	ldrh	r2, [r7, #14]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d908      	bls.n	800db2e <pbuf_remove_header+0x5a>
 800db1c:	4b12      	ldr	r3, [pc, #72]	; (800db68 <pbuf_remove_header+0x94>)
 800db1e:	f240 2255 	movw	r2, #597	; 0x255
 800db22:	4914      	ldr	r1, [pc, #80]	; (800db74 <pbuf_remove_header+0xa0>)
 800db24:	4812      	ldr	r0, [pc, #72]	; (800db70 <pbuf_remove_header+0x9c>)
 800db26:	f007 fcd5 	bl	80154d4 <iprintf>
 800db2a:	2301      	movs	r3, #1
 800db2c:	e017      	b.n	800db5e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	685a      	ldr	r2, [r3, #4]
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	441a      	add	r2, r3
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	895a      	ldrh	r2, [r3, #10]
 800db44:	89fb      	ldrh	r3, [r7, #14]
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	b29a      	uxth	r2, r3
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	891a      	ldrh	r2, [r3, #8]
 800db52:	89fb      	ldrh	r3, [r7, #14]
 800db54:	1ad3      	subs	r3, r2, r3
 800db56:	b29a      	uxth	r2, r3
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800db5c:	2300      	movs	r3, #0
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3710      	adds	r7, #16
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	08019fb0 	.word	0x08019fb0
 800db6c:	0801a150 	.word	0x0801a150
 800db70:	0801a04c 	.word	0x0801a04c
 800db74:	0801a15c 	.word	0x0801a15c

0800db78 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	460b      	mov	r3, r1
 800db82:	807b      	strh	r3, [r7, #2]
 800db84:	4613      	mov	r3, r2
 800db86:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800db88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	da08      	bge.n	800dba2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800db90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db94:	425b      	negs	r3, r3
 800db96:	4619      	mov	r1, r3
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f7ff ff9b 	bl	800dad4 <pbuf_remove_header>
 800db9e:	4603      	mov	r3, r0
 800dba0:	e007      	b.n	800dbb2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dba2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dba6:	787a      	ldrb	r2, [r7, #1]
 800dba8:	4619      	mov	r1, r3
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f7ff ff1a 	bl	800d9e4 <pbuf_add_header_impl>
 800dbb0:	4603      	mov	r3, r0
  }
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b082      	sub	sp, #8
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	460b      	mov	r3, r1
 800dbc4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dbc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff ffd2 	bl	800db78 <pbuf_header_impl>
 800dbd4:	4603      	mov	r3, r0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3708      	adds	r7, #8
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
	...

0800dbe0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b088      	sub	sp, #32
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d10b      	bne.n	800dc06 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d106      	bne.n	800dc02 <pbuf_free+0x22>
 800dbf4:	4b3b      	ldr	r3, [pc, #236]	; (800dce4 <pbuf_free+0x104>)
 800dbf6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800dbfa:	493b      	ldr	r1, [pc, #236]	; (800dce8 <pbuf_free+0x108>)
 800dbfc:	483b      	ldr	r0, [pc, #236]	; (800dcec <pbuf_free+0x10c>)
 800dbfe:	f007 fc69 	bl	80154d4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800dc02:	2300      	movs	r3, #0
 800dc04:	e069      	b.n	800dcda <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800dc06:	2300      	movs	r3, #0
 800dc08:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800dc0a:	e062      	b.n	800dcd2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800dc0c:	f006 feb4 	bl	8014978 <sys_arch_protect>
 800dc10:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	7b9b      	ldrb	r3, [r3, #14]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d106      	bne.n	800dc28 <pbuf_free+0x48>
 800dc1a:	4b32      	ldr	r3, [pc, #200]	; (800dce4 <pbuf_free+0x104>)
 800dc1c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800dc20:	4933      	ldr	r1, [pc, #204]	; (800dcf0 <pbuf_free+0x110>)
 800dc22:	4832      	ldr	r0, [pc, #200]	; (800dcec <pbuf_free+0x10c>)
 800dc24:	f007 fc56 	bl	80154d4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	7b9b      	ldrb	r3, [r3, #14]
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	b2da      	uxtb	r2, r3
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	739a      	strb	r2, [r3, #14]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	7b9b      	ldrb	r3, [r3, #14]
 800dc38:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800dc3a:	69b8      	ldr	r0, [r7, #24]
 800dc3c:	f006 feaa 	bl	8014994 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800dc40:	7dfb      	ldrb	r3, [r7, #23]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d143      	bne.n	800dcce <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	7b1b      	ldrb	r3, [r3, #12]
 800dc50:	f003 030f 	and.w	r3, r3, #15
 800dc54:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	7b5b      	ldrb	r3, [r3, #13]
 800dc5a:	f003 0302 	and.w	r3, r3, #2
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d011      	beq.n	800dc86 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	691b      	ldr	r3, [r3, #16]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d106      	bne.n	800dc7c <pbuf_free+0x9c>
 800dc6e:	4b1d      	ldr	r3, [pc, #116]	; (800dce4 <pbuf_free+0x104>)
 800dc70:	f240 22ff 	movw	r2, #767	; 0x2ff
 800dc74:	491f      	ldr	r1, [pc, #124]	; (800dcf4 <pbuf_free+0x114>)
 800dc76:	481d      	ldr	r0, [pc, #116]	; (800dcec <pbuf_free+0x10c>)
 800dc78:	f007 fc2c 	bl	80154d4 <iprintf>
        pc->custom_free_function(p);
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	691b      	ldr	r3, [r3, #16]
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	4798      	blx	r3
 800dc84:	e01d      	b.n	800dcc2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800dc86:	7bfb      	ldrb	r3, [r7, #15]
 800dc88:	2b02      	cmp	r3, #2
 800dc8a:	d104      	bne.n	800dc96 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800dc8c:	6879      	ldr	r1, [r7, #4]
 800dc8e:	200c      	movs	r0, #12
 800dc90:	f7ff f9ce 	bl	800d030 <memp_free>
 800dc94:	e015      	b.n	800dcc2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800dc96:	7bfb      	ldrb	r3, [r7, #15]
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d104      	bne.n	800dca6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800dc9c:	6879      	ldr	r1, [r7, #4]
 800dc9e:	200b      	movs	r0, #11
 800dca0:	f7ff f9c6 	bl	800d030 <memp_free>
 800dca4:	e00d      	b.n	800dcc2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800dca6:	7bfb      	ldrb	r3, [r7, #15]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d103      	bne.n	800dcb4 <pbuf_free+0xd4>
          mem_free(p);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f7fe fe51 	bl	800c954 <mem_free>
 800dcb2:	e006      	b.n	800dcc2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800dcb4:	4b0b      	ldr	r3, [pc, #44]	; (800dce4 <pbuf_free+0x104>)
 800dcb6:	f240 320f 	movw	r2, #783	; 0x30f
 800dcba:	490f      	ldr	r1, [pc, #60]	; (800dcf8 <pbuf_free+0x118>)
 800dcbc:	480b      	ldr	r0, [pc, #44]	; (800dcec <pbuf_free+0x10c>)
 800dcbe:	f007 fc09 	bl	80154d4 <iprintf>
        }
      }
      count++;
 800dcc2:	7ffb      	ldrb	r3, [r7, #31]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	607b      	str	r3, [r7, #4]
 800dccc:	e001      	b.n	800dcd2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d199      	bne.n	800dc0c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800dcd8:	7ffb      	ldrb	r3, [r7, #31]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3720      	adds	r7, #32
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	08019fb0 	.word	0x08019fb0
 800dce8:	0801a150 	.word	0x0801a150
 800dcec:	0801a04c 	.word	0x0801a04c
 800dcf0:	0801a17c 	.word	0x0801a17c
 800dcf4:	0801a194 	.word	0x0801a194
 800dcf8:	0801a1b8 	.word	0x0801a1b8

0800dcfc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b085      	sub	sp, #20
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800dd04:	2300      	movs	r3, #0
 800dd06:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800dd08:	e005      	b.n	800dd16 <pbuf_clen+0x1a>
    ++len;
 800dd0a:	89fb      	ldrh	r3, [r7, #14]
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d1f6      	bne.n	800dd0a <pbuf_clen+0xe>
  }
  return len;
 800dd1c:	89fb      	ldrh	r3, [r7, #14]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3714      	adds	r7, #20
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
	...

0800dd2c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b084      	sub	sp, #16
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d016      	beq.n	800dd68 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800dd3a:	f006 fe1d 	bl	8014978 <sys_arch_protect>
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	7b9b      	ldrb	r3, [r3, #14]
 800dd44:	3301      	adds	r3, #1
 800dd46:	b2da      	uxtb	r2, r3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	739a      	strb	r2, [r3, #14]
 800dd4c:	68f8      	ldr	r0, [r7, #12]
 800dd4e:	f006 fe21 	bl	8014994 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	7b9b      	ldrb	r3, [r3, #14]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d106      	bne.n	800dd68 <pbuf_ref+0x3c>
 800dd5a:	4b05      	ldr	r3, [pc, #20]	; (800dd70 <pbuf_ref+0x44>)
 800dd5c:	f240 3242 	movw	r2, #834	; 0x342
 800dd60:	4904      	ldr	r1, [pc, #16]	; (800dd74 <pbuf_ref+0x48>)
 800dd62:	4805      	ldr	r0, [pc, #20]	; (800dd78 <pbuf_ref+0x4c>)
 800dd64:	f007 fbb6 	bl	80154d4 <iprintf>
  }
}
 800dd68:	bf00      	nop
 800dd6a:	3710      	adds	r7, #16
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}
 800dd70:	08019fb0 	.word	0x08019fb0
 800dd74:	0801a1cc 	.word	0x0801a1cc
 800dd78:	0801a04c 	.word	0x0801a04c

0800dd7c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d002      	beq.n	800dd92 <pbuf_cat+0x16>
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d107      	bne.n	800dda2 <pbuf_cat+0x26>
 800dd92:	4b20      	ldr	r3, [pc, #128]	; (800de14 <pbuf_cat+0x98>)
 800dd94:	f240 325a 	movw	r2, #858	; 0x35a
 800dd98:	491f      	ldr	r1, [pc, #124]	; (800de18 <pbuf_cat+0x9c>)
 800dd9a:	4820      	ldr	r0, [pc, #128]	; (800de1c <pbuf_cat+0xa0>)
 800dd9c:	f007 fb9a 	bl	80154d4 <iprintf>
 800dda0:	e034      	b.n	800de0c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	60fb      	str	r3, [r7, #12]
 800dda6:	e00a      	b.n	800ddbe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	891a      	ldrh	r2, [r3, #8]
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	891b      	ldrh	r3, [r3, #8]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	b29a      	uxth	r2, r3
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	60fb      	str	r3, [r7, #12]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d1f0      	bne.n	800dda8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	891a      	ldrh	r2, [r3, #8]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	895b      	ldrh	r3, [r3, #10]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d006      	beq.n	800dde0 <pbuf_cat+0x64>
 800ddd2:	4b10      	ldr	r3, [pc, #64]	; (800de14 <pbuf_cat+0x98>)
 800ddd4:	f240 3262 	movw	r2, #866	; 0x362
 800ddd8:	4911      	ldr	r1, [pc, #68]	; (800de20 <pbuf_cat+0xa4>)
 800ddda:	4810      	ldr	r0, [pc, #64]	; (800de1c <pbuf_cat+0xa0>)
 800dddc:	f007 fb7a 	bl	80154d4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d006      	beq.n	800ddf6 <pbuf_cat+0x7a>
 800dde8:	4b0a      	ldr	r3, [pc, #40]	; (800de14 <pbuf_cat+0x98>)
 800ddea:	f240 3263 	movw	r2, #867	; 0x363
 800ddee:	490d      	ldr	r1, [pc, #52]	; (800de24 <pbuf_cat+0xa8>)
 800ddf0:	480a      	ldr	r0, [pc, #40]	; (800de1c <pbuf_cat+0xa0>)
 800ddf2:	f007 fb6f 	bl	80154d4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	891a      	ldrh	r2, [r3, #8]
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	891b      	ldrh	r3, [r3, #8]
 800ddfe:	4413      	add	r3, r2
 800de00:	b29a      	uxth	r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	683a      	ldr	r2, [r7, #0]
 800de0a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800de0c:	3710      	adds	r7, #16
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	08019fb0 	.word	0x08019fb0
 800de18:	0801a1e0 	.word	0x0801a1e0
 800de1c:	0801a04c 	.word	0x0801a04c
 800de20:	0801a218 	.word	0x0801a218
 800de24:	0801a248 	.word	0x0801a248

0800de28 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800de32:	6839      	ldr	r1, [r7, #0]
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f7ff ffa1 	bl	800dd7c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800de3a:	6838      	ldr	r0, [r7, #0]
 800de3c:	f7ff ff76 	bl	800dd2c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800de40:	bf00      	nop
 800de42:	3708      	adds	r7, #8
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b086      	sub	sp, #24
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800de52:	2300      	movs	r3, #0
 800de54:	617b      	str	r3, [r7, #20]
 800de56:	2300      	movs	r3, #0
 800de58:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d008      	beq.n	800de72 <pbuf_copy+0x2a>
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d005      	beq.n	800de72 <pbuf_copy+0x2a>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	891a      	ldrh	r2, [r3, #8]
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	891b      	ldrh	r3, [r3, #8]
 800de6e:	429a      	cmp	r2, r3
 800de70:	d209      	bcs.n	800de86 <pbuf_copy+0x3e>
 800de72:	4b57      	ldr	r3, [pc, #348]	; (800dfd0 <pbuf_copy+0x188>)
 800de74:	f240 32ca 	movw	r2, #970	; 0x3ca
 800de78:	4956      	ldr	r1, [pc, #344]	; (800dfd4 <pbuf_copy+0x18c>)
 800de7a:	4857      	ldr	r0, [pc, #348]	; (800dfd8 <pbuf_copy+0x190>)
 800de7c:	f007 fb2a 	bl	80154d4 <iprintf>
 800de80:	f06f 030f 	mvn.w	r3, #15
 800de84:	e09f      	b.n	800dfc6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	895b      	ldrh	r3, [r3, #10]
 800de8a:	461a      	mov	r2, r3
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	1ad2      	subs	r2, r2, r3
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	895b      	ldrh	r3, [r3, #10]
 800de94:	4619      	mov	r1, r3
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	1acb      	subs	r3, r1, r3
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d306      	bcc.n	800deac <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	895b      	ldrh	r3, [r3, #10]
 800dea2:	461a      	mov	r2, r3
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	1ad3      	subs	r3, r2, r3
 800dea8:	60fb      	str	r3, [r7, #12]
 800deaa:	e005      	b.n	800deb8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	895b      	ldrh	r3, [r3, #10]
 800deb0:	461a      	mov	r2, r3
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	685a      	ldr	r2, [r3, #4]
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	18d0      	adds	r0, r2, r3
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	685a      	ldr	r2, [r3, #4]
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	4413      	add	r3, r2
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	4619      	mov	r1, r3
 800decc:	f006 fdd1 	bl	8014a72 <memcpy>
    offset_to += len;
 800ded0:	697a      	ldr	r2, [r7, #20]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	4413      	add	r3, r2
 800ded6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ded8:	693a      	ldr	r2, [r7, #16]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	4413      	add	r3, r2
 800dede:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	895b      	ldrh	r3, [r3, #10]
 800dee4:	461a      	mov	r2, r3
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	4293      	cmp	r3, r2
 800deea:	d906      	bls.n	800defa <pbuf_copy+0xb2>
 800deec:	4b38      	ldr	r3, [pc, #224]	; (800dfd0 <pbuf_copy+0x188>)
 800deee:	f240 32d9 	movw	r2, #985	; 0x3d9
 800def2:	493a      	ldr	r1, [pc, #232]	; (800dfdc <pbuf_copy+0x194>)
 800def4:	4838      	ldr	r0, [pc, #224]	; (800dfd8 <pbuf_copy+0x190>)
 800def6:	f007 faed 	bl	80154d4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	895b      	ldrh	r3, [r3, #10]
 800defe:	461a      	mov	r2, r3
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	4293      	cmp	r3, r2
 800df04:	d906      	bls.n	800df14 <pbuf_copy+0xcc>
 800df06:	4b32      	ldr	r3, [pc, #200]	; (800dfd0 <pbuf_copy+0x188>)
 800df08:	f240 32da 	movw	r2, #986	; 0x3da
 800df0c:	4934      	ldr	r1, [pc, #208]	; (800dfe0 <pbuf_copy+0x198>)
 800df0e:	4832      	ldr	r0, [pc, #200]	; (800dfd8 <pbuf_copy+0x190>)
 800df10:	f007 fae0 	bl	80154d4 <iprintf>
    if (offset_from >= p_from->len) {
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	895b      	ldrh	r3, [r3, #10]
 800df18:	461a      	mov	r2, r3
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d304      	bcc.n	800df2a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800df20:	2300      	movs	r3, #0
 800df22:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	895b      	ldrh	r3, [r3, #10]
 800df2e:	461a      	mov	r2, r3
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	4293      	cmp	r3, r2
 800df34:	d114      	bne.n	800df60 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800df36:	2300      	movs	r3, #0
 800df38:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d10c      	bne.n	800df60 <pbuf_copy+0x118>
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d009      	beq.n	800df60 <pbuf_copy+0x118>
 800df4c:	4b20      	ldr	r3, [pc, #128]	; (800dfd0 <pbuf_copy+0x188>)
 800df4e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800df52:	4924      	ldr	r1, [pc, #144]	; (800dfe4 <pbuf_copy+0x19c>)
 800df54:	4820      	ldr	r0, [pc, #128]	; (800dfd8 <pbuf_copy+0x190>)
 800df56:	f007 fabd 	bl	80154d4 <iprintf>
 800df5a:	f06f 030f 	mvn.w	r3, #15
 800df5e:	e032      	b.n	800dfc6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d013      	beq.n	800df8e <pbuf_copy+0x146>
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	895a      	ldrh	r2, [r3, #10]
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	891b      	ldrh	r3, [r3, #8]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d10d      	bne.n	800df8e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d009      	beq.n	800df8e <pbuf_copy+0x146>
 800df7a:	4b15      	ldr	r3, [pc, #84]	; (800dfd0 <pbuf_copy+0x188>)
 800df7c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800df80:	4919      	ldr	r1, [pc, #100]	; (800dfe8 <pbuf_copy+0x1a0>)
 800df82:	4815      	ldr	r0, [pc, #84]	; (800dfd8 <pbuf_copy+0x190>)
 800df84:	f007 faa6 	bl	80154d4 <iprintf>
 800df88:	f06f 0305 	mvn.w	r3, #5
 800df8c:	e01b      	b.n	800dfc6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d013      	beq.n	800dfbc <pbuf_copy+0x174>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	895a      	ldrh	r2, [r3, #10]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	891b      	ldrh	r3, [r3, #8]
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d10d      	bne.n	800dfbc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d009      	beq.n	800dfbc <pbuf_copy+0x174>
 800dfa8:	4b09      	ldr	r3, [pc, #36]	; (800dfd0 <pbuf_copy+0x188>)
 800dfaa:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800dfae:	490e      	ldr	r1, [pc, #56]	; (800dfe8 <pbuf_copy+0x1a0>)
 800dfb0:	4809      	ldr	r0, [pc, #36]	; (800dfd8 <pbuf_copy+0x190>)
 800dfb2:	f007 fa8f 	bl	80154d4 <iprintf>
 800dfb6:	f06f 0305 	mvn.w	r3, #5
 800dfba:	e004      	b.n	800dfc6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	f47f af61 	bne.w	800de86 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800dfc4:	2300      	movs	r3, #0
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3718      	adds	r7, #24
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	08019fb0 	.word	0x08019fb0
 800dfd4:	0801a294 	.word	0x0801a294
 800dfd8:	0801a04c 	.word	0x0801a04c
 800dfdc:	0801a2c4 	.word	0x0801a2c4
 800dfe0:	0801a2dc 	.word	0x0801a2dc
 800dfe4:	0801a2f8 	.word	0x0801a2f8
 800dfe8:	0801a308 	.word	0x0801a308

0800dfec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b088      	sub	sp, #32
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	4611      	mov	r1, r2
 800dff8:	461a      	mov	r2, r3
 800dffa:	460b      	mov	r3, r1
 800dffc:	80fb      	strh	r3, [r7, #6]
 800dffe:	4613      	mov	r3, r2
 800e000:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e002:	2300      	movs	r3, #0
 800e004:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e006:	2300      	movs	r3, #0
 800e008:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d108      	bne.n	800e022 <pbuf_copy_partial+0x36>
 800e010:	4b2b      	ldr	r3, [pc, #172]	; (800e0c0 <pbuf_copy_partial+0xd4>)
 800e012:	f240 420a 	movw	r2, #1034	; 0x40a
 800e016:	492b      	ldr	r1, [pc, #172]	; (800e0c4 <pbuf_copy_partial+0xd8>)
 800e018:	482b      	ldr	r0, [pc, #172]	; (800e0c8 <pbuf_copy_partial+0xdc>)
 800e01a:	f007 fa5b 	bl	80154d4 <iprintf>
 800e01e:	2300      	movs	r3, #0
 800e020:	e04a      	b.n	800e0b8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d108      	bne.n	800e03a <pbuf_copy_partial+0x4e>
 800e028:	4b25      	ldr	r3, [pc, #148]	; (800e0c0 <pbuf_copy_partial+0xd4>)
 800e02a:	f240 420b 	movw	r2, #1035	; 0x40b
 800e02e:	4927      	ldr	r1, [pc, #156]	; (800e0cc <pbuf_copy_partial+0xe0>)
 800e030:	4825      	ldr	r0, [pc, #148]	; (800e0c8 <pbuf_copy_partial+0xdc>)
 800e032:	f007 fa4f 	bl	80154d4 <iprintf>
 800e036:	2300      	movs	r3, #0
 800e038:	e03e      	b.n	800e0b8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	61fb      	str	r3, [r7, #28]
 800e03e:	e034      	b.n	800e0aa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e040:	88bb      	ldrh	r3, [r7, #4]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00a      	beq.n	800e05c <pbuf_copy_partial+0x70>
 800e046:	69fb      	ldr	r3, [r7, #28]
 800e048:	895b      	ldrh	r3, [r3, #10]
 800e04a:	88ba      	ldrh	r2, [r7, #4]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d305      	bcc.n	800e05c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	895b      	ldrh	r3, [r3, #10]
 800e054:	88ba      	ldrh	r2, [r7, #4]
 800e056:	1ad3      	subs	r3, r2, r3
 800e058:	80bb      	strh	r3, [r7, #4]
 800e05a:	e023      	b.n	800e0a4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	895a      	ldrh	r2, [r3, #10]
 800e060:	88bb      	ldrh	r3, [r7, #4]
 800e062:	1ad3      	subs	r3, r2, r3
 800e064:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e066:	8b3a      	ldrh	r2, [r7, #24]
 800e068:	88fb      	ldrh	r3, [r7, #6]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d901      	bls.n	800e072 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e06e:	88fb      	ldrh	r3, [r7, #6]
 800e070:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e072:	8b7b      	ldrh	r3, [r7, #26]
 800e074:	68ba      	ldr	r2, [r7, #8]
 800e076:	18d0      	adds	r0, r2, r3
 800e078:	69fb      	ldr	r3, [r7, #28]
 800e07a:	685a      	ldr	r2, [r3, #4]
 800e07c:	88bb      	ldrh	r3, [r7, #4]
 800e07e:	4413      	add	r3, r2
 800e080:	8b3a      	ldrh	r2, [r7, #24]
 800e082:	4619      	mov	r1, r3
 800e084:	f006 fcf5 	bl	8014a72 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e088:	8afa      	ldrh	r2, [r7, #22]
 800e08a:	8b3b      	ldrh	r3, [r7, #24]
 800e08c:	4413      	add	r3, r2
 800e08e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e090:	8b7a      	ldrh	r2, [r7, #26]
 800e092:	8b3b      	ldrh	r3, [r7, #24]
 800e094:	4413      	add	r3, r2
 800e096:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e098:	88fa      	ldrh	r2, [r7, #6]
 800e09a:	8b3b      	ldrh	r3, [r7, #24]
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	61fb      	str	r3, [r7, #28]
 800e0aa:	88fb      	ldrh	r3, [r7, #6]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d002      	beq.n	800e0b6 <pbuf_copy_partial+0xca>
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d1c4      	bne.n	800e040 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e0b6:	8afb      	ldrh	r3, [r7, #22]
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3720      	adds	r7, #32
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	08019fb0 	.word	0x08019fb0
 800e0c4:	0801a334 	.word	0x0801a334
 800e0c8:	0801a04c 	.word	0x0801a04c
 800e0cc:	0801a354 	.word	0x0801a354

0800e0d0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	603a      	str	r2, [r7, #0]
 800e0da:	71fb      	strb	r3, [r7, #7]
 800e0dc:	460b      	mov	r3, r1
 800e0de:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	8919      	ldrh	r1, [r3, #8]
 800e0e4:	88ba      	ldrh	r2, [r7, #4]
 800e0e6:	79fb      	ldrb	r3, [r7, #7]
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7ff fa99 	bl	800d620 <pbuf_alloc>
 800e0ee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d101      	bne.n	800e0fa <pbuf_clone+0x2a>
    return NULL;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e011      	b.n	800e11e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e0fa:	6839      	ldr	r1, [r7, #0]
 800e0fc:	68f8      	ldr	r0, [r7, #12]
 800e0fe:	f7ff fea3 	bl	800de48 <pbuf_copy>
 800e102:	4603      	mov	r3, r0
 800e104:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e106:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d006      	beq.n	800e11c <pbuf_clone+0x4c>
 800e10e:	4b06      	ldr	r3, [pc, #24]	; (800e128 <pbuf_clone+0x58>)
 800e110:	f240 5224 	movw	r2, #1316	; 0x524
 800e114:	4905      	ldr	r1, [pc, #20]	; (800e12c <pbuf_clone+0x5c>)
 800e116:	4806      	ldr	r0, [pc, #24]	; (800e130 <pbuf_clone+0x60>)
 800e118:	f007 f9dc 	bl	80154d4 <iprintf>
  return q;
 800e11c:	68fb      	ldr	r3, [r7, #12]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3710      	adds	r7, #16
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop
 800e128:	08019fb0 	.word	0x08019fb0
 800e12c:	0801a460 	.word	0x0801a460
 800e130:	0801a04c 	.word	0x0801a04c

0800e134 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e138:	f007 f9e4 	bl	8015504 <rand>
 800e13c:	4603      	mov	r3, r0
 800e13e:	b29b      	uxth	r3, r3
 800e140:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e144:	b29b      	uxth	r3, r3
 800e146:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e14a:	b29a      	uxth	r2, r3
 800e14c:	4b01      	ldr	r3, [pc, #4]	; (800e154 <tcp_init+0x20>)
 800e14e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e150:	bf00      	nop
 800e152:	bd80      	pop	{r7, pc}
 800e154:	20000030 	.word	0x20000030

0800e158 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b082      	sub	sp, #8
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	7d1b      	ldrb	r3, [r3, #20]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d105      	bne.n	800e174 <tcp_free+0x1c>
 800e168:	4b06      	ldr	r3, [pc, #24]	; (800e184 <tcp_free+0x2c>)
 800e16a:	22d4      	movs	r2, #212	; 0xd4
 800e16c:	4906      	ldr	r1, [pc, #24]	; (800e188 <tcp_free+0x30>)
 800e16e:	4807      	ldr	r0, [pc, #28]	; (800e18c <tcp_free+0x34>)
 800e170:	f007 f9b0 	bl	80154d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e174:	6879      	ldr	r1, [r7, #4]
 800e176:	2001      	movs	r0, #1
 800e178:	f7fe ff5a 	bl	800d030 <memp_free>
}
 800e17c:	bf00      	nop
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	0801a540 	.word	0x0801a540
 800e188:	0801a5ac 	.word	0x0801a5ac
 800e18c:	0801a5c0 	.word	0x0801a5c0

0800e190 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	7d1b      	ldrb	r3, [r3, #20]
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d105      	bne.n	800e1ac <tcp_free_listen+0x1c>
 800e1a0:	4b06      	ldr	r3, [pc, #24]	; (800e1bc <tcp_free_listen+0x2c>)
 800e1a2:	22df      	movs	r2, #223	; 0xdf
 800e1a4:	4906      	ldr	r1, [pc, #24]	; (800e1c0 <tcp_free_listen+0x30>)
 800e1a6:	4807      	ldr	r0, [pc, #28]	; (800e1c4 <tcp_free_listen+0x34>)
 800e1a8:	f007 f994 	bl	80154d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e1ac:	6879      	ldr	r1, [r7, #4]
 800e1ae:	2002      	movs	r0, #2
 800e1b0:	f7fe ff3e 	bl	800d030 <memp_free>
}
 800e1b4:	bf00      	nop
 800e1b6:	3708      	adds	r7, #8
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	0801a540 	.word	0x0801a540
 800e1c0:	0801a5e8 	.word	0x0801a5e8
 800e1c4:	0801a5c0 	.word	0x0801a5c0

0800e1c8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e1cc:	f001 f836 	bl	800f23c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e1d0:	4b07      	ldr	r3, [pc, #28]	; (800e1f0 <tcp_tmr+0x28>)
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	b2da      	uxtb	r2, r3
 800e1d8:	4b05      	ldr	r3, [pc, #20]	; (800e1f0 <tcp_tmr+0x28>)
 800e1da:	701a      	strb	r2, [r3, #0]
 800e1dc:	4b04      	ldr	r3, [pc, #16]	; (800e1f0 <tcp_tmr+0x28>)
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	f003 0301 	and.w	r3, r3, #1
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d001      	beq.n	800e1ec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e1e8:	f000 fd00 	bl	800ebec <tcp_slowtmr>
  }
}
 800e1ec:	bf00      	nop
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	200068c9 	.word	0x200068c9

0800e1f4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d105      	bne.n	800e210 <tcp_remove_listener+0x1c>
 800e204:	4b0d      	ldr	r3, [pc, #52]	; (800e23c <tcp_remove_listener+0x48>)
 800e206:	22ff      	movs	r2, #255	; 0xff
 800e208:	490d      	ldr	r1, [pc, #52]	; (800e240 <tcp_remove_listener+0x4c>)
 800e20a:	480e      	ldr	r0, [pc, #56]	; (800e244 <tcp_remove_listener+0x50>)
 800e20c:	f007 f962 	bl	80154d4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	60fb      	str	r3, [r7, #12]
 800e214:	e00a      	b.n	800e22c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e21a:	683a      	ldr	r2, [r7, #0]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d102      	bne.n	800e226 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2200      	movs	r2, #0
 800e224:	679a      	str	r2, [r3, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	68db      	ldr	r3, [r3, #12]
 800e22a:	60fb      	str	r3, [r7, #12]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d1f1      	bne.n	800e216 <tcp_remove_listener+0x22>
    }
  }
}
 800e232:	bf00      	nop
 800e234:	3710      	adds	r7, #16
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	0801a540 	.word	0x0801a540
 800e240:	0801a604 	.word	0x0801a604
 800e244:	0801a5c0 	.word	0x0801a5c0

0800e248 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d106      	bne.n	800e264 <tcp_listen_closed+0x1c>
 800e256:	4b14      	ldr	r3, [pc, #80]	; (800e2a8 <tcp_listen_closed+0x60>)
 800e258:	f240 1211 	movw	r2, #273	; 0x111
 800e25c:	4913      	ldr	r1, [pc, #76]	; (800e2ac <tcp_listen_closed+0x64>)
 800e25e:	4814      	ldr	r0, [pc, #80]	; (800e2b0 <tcp_listen_closed+0x68>)
 800e260:	f007 f938 	bl	80154d4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	7d1b      	ldrb	r3, [r3, #20]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d006      	beq.n	800e27a <tcp_listen_closed+0x32>
 800e26c:	4b0e      	ldr	r3, [pc, #56]	; (800e2a8 <tcp_listen_closed+0x60>)
 800e26e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e272:	4910      	ldr	r1, [pc, #64]	; (800e2b4 <tcp_listen_closed+0x6c>)
 800e274:	480e      	ldr	r0, [pc, #56]	; (800e2b0 <tcp_listen_closed+0x68>)
 800e276:	f007 f92d 	bl	80154d4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e27a:	2301      	movs	r3, #1
 800e27c:	60fb      	str	r3, [r7, #12]
 800e27e:	e00b      	b.n	800e298 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e280:	4a0d      	ldr	r2, [pc, #52]	; (800e2b8 <tcp_listen_closed+0x70>)
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	6879      	ldr	r1, [r7, #4]
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7ff ffb1 	bl	800e1f4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	3301      	adds	r3, #1
 800e296:	60fb      	str	r3, [r7, #12]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2b03      	cmp	r3, #3
 800e29c:	d9f0      	bls.n	800e280 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e29e:	bf00      	nop
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	0801a540 	.word	0x0801a540
 800e2ac:	0801a62c 	.word	0x0801a62c
 800e2b0:	0801a5c0 	.word	0x0801a5c0
 800e2b4:	0801a638 	.word	0x0801a638
 800e2b8:	0801a530 	.word	0x0801a530

0800e2bc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e2bc:	b5b0      	push	{r4, r5, r7, lr}
 800e2be:	b088      	sub	sp, #32
 800e2c0:	af04      	add	r7, sp, #16
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d106      	bne.n	800e2dc <tcp_close_shutdown+0x20>
 800e2ce:	4b62      	ldr	r3, [pc, #392]	; (800e458 <tcp_close_shutdown+0x19c>)
 800e2d0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e2d4:	4961      	ldr	r1, [pc, #388]	; (800e45c <tcp_close_shutdown+0x1a0>)
 800e2d6:	4862      	ldr	r0, [pc, #392]	; (800e460 <tcp_close_shutdown+0x1a4>)
 800e2d8:	f007 f8fc 	bl	80154d4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e2dc:	78fb      	ldrb	r3, [r7, #3]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d067      	beq.n	800e3b2 <tcp_close_shutdown+0xf6>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	7d1b      	ldrb	r3, [r3, #20]
 800e2e6:	2b04      	cmp	r3, #4
 800e2e8:	d003      	beq.n	800e2f2 <tcp_close_shutdown+0x36>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	7d1b      	ldrb	r3, [r3, #20]
 800e2ee:	2b07      	cmp	r3, #7
 800e2f0:	d15f      	bne.n	800e3b2 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d105      	bne.n	800e306 <tcp_close_shutdown+0x4a>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2fe:	f640 3268 	movw	r2, #2920	; 0xb68
 800e302:	4293      	cmp	r3, r2
 800e304:	d055      	beq.n	800e3b2 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	8b5b      	ldrh	r3, [r3, #26]
 800e30a:	f003 0310 	and.w	r3, r3, #16
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d106      	bne.n	800e320 <tcp_close_shutdown+0x64>
 800e312:	4b51      	ldr	r3, [pc, #324]	; (800e458 <tcp_close_shutdown+0x19c>)
 800e314:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e318:	4952      	ldr	r1, [pc, #328]	; (800e464 <tcp_close_shutdown+0x1a8>)
 800e31a:	4851      	ldr	r0, [pc, #324]	; (800e460 <tcp_close_shutdown+0x1a4>)
 800e31c:	f007 f8da 	bl	80154d4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e328:	687d      	ldr	r5, [r7, #4]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	3304      	adds	r3, #4
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	8ad2      	ldrh	r2, [r2, #22]
 800e332:	6879      	ldr	r1, [r7, #4]
 800e334:	8b09      	ldrh	r1, [r1, #24]
 800e336:	9102      	str	r1, [sp, #8]
 800e338:	9201      	str	r2, [sp, #4]
 800e33a:	9300      	str	r3, [sp, #0]
 800e33c:	462b      	mov	r3, r5
 800e33e:	4622      	mov	r2, r4
 800e340:	4601      	mov	r1, r0
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f005 f962 	bl	801360c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f001 fb11 	bl	800f970 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e34e:	4b46      	ldr	r3, [pc, #280]	; (800e468 <tcp_close_shutdown+0x1ac>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	429a      	cmp	r2, r3
 800e356:	d105      	bne.n	800e364 <tcp_close_shutdown+0xa8>
 800e358:	4b43      	ldr	r3, [pc, #268]	; (800e468 <tcp_close_shutdown+0x1ac>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	4a42      	ldr	r2, [pc, #264]	; (800e468 <tcp_close_shutdown+0x1ac>)
 800e360:	6013      	str	r3, [r2, #0]
 800e362:	e013      	b.n	800e38c <tcp_close_shutdown+0xd0>
 800e364:	4b40      	ldr	r3, [pc, #256]	; (800e468 <tcp_close_shutdown+0x1ac>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	60fb      	str	r3, [r7, #12]
 800e36a:	e00c      	b.n	800e386 <tcp_close_shutdown+0xca>
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	68db      	ldr	r3, [r3, #12]
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	429a      	cmp	r2, r3
 800e374:	d104      	bne.n	800e380 <tcp_close_shutdown+0xc4>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	68da      	ldr	r2, [r3, #12]
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	60da      	str	r2, [r3, #12]
 800e37e:	e005      	b.n	800e38c <tcp_close_shutdown+0xd0>
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	60fb      	str	r3, [r7, #12]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d1ef      	bne.n	800e36c <tcp_close_shutdown+0xb0>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2200      	movs	r2, #0
 800e390:	60da      	str	r2, [r3, #12]
 800e392:	4b36      	ldr	r3, [pc, #216]	; (800e46c <tcp_close_shutdown+0x1b0>)
 800e394:	2201      	movs	r2, #1
 800e396:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e398:	4b35      	ldr	r3, [pc, #212]	; (800e470 <tcp_close_shutdown+0x1b4>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d102      	bne.n	800e3a8 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e3a2:	f003 fbc3 	bl	8011b2c <tcp_trigger_input_pcb_close>
 800e3a6:	e002      	b.n	800e3ae <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f7ff fed5 	bl	800e158 <tcp_free>
      }
      return ERR_OK;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	e04d      	b.n	800e44e <tcp_close_shutdown+0x192>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	7d1b      	ldrb	r3, [r3, #20]
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d02d      	beq.n	800e416 <tcp_close_shutdown+0x15a>
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d036      	beq.n	800e42c <tcp_close_shutdown+0x170>
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d13f      	bne.n	800e442 <tcp_close_shutdown+0x186>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	8adb      	ldrh	r3, [r3, #22]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d021      	beq.n	800e40e <tcp_close_shutdown+0x152>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e3ca:	4b2a      	ldr	r3, [pc, #168]	; (800e474 <tcp_close_shutdown+0x1b8>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d105      	bne.n	800e3e0 <tcp_close_shutdown+0x124>
 800e3d4:	4b27      	ldr	r3, [pc, #156]	; (800e474 <tcp_close_shutdown+0x1b8>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	4a26      	ldr	r2, [pc, #152]	; (800e474 <tcp_close_shutdown+0x1b8>)
 800e3dc:	6013      	str	r3, [r2, #0]
 800e3de:	e013      	b.n	800e408 <tcp_close_shutdown+0x14c>
 800e3e0:	4b24      	ldr	r3, [pc, #144]	; (800e474 <tcp_close_shutdown+0x1b8>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	60bb      	str	r3, [r7, #8]
 800e3e6:	e00c      	b.n	800e402 <tcp_close_shutdown+0x146>
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d104      	bne.n	800e3fc <tcp_close_shutdown+0x140>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	68da      	ldr	r2, [r3, #12]
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	60da      	str	r2, [r3, #12]
 800e3fa:	e005      	b.n	800e408 <tcp_close_shutdown+0x14c>
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	68db      	ldr	r3, [r3, #12]
 800e400:	60bb      	str	r3, [r7, #8]
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1ef      	bne.n	800e3e8 <tcp_close_shutdown+0x12c>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2200      	movs	r2, #0
 800e40c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f7ff fea2 	bl	800e158 <tcp_free>
      break;
 800e414:	e01a      	b.n	800e44c <tcp_close_shutdown+0x190>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f7ff ff16 	bl	800e248 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e41c:	6879      	ldr	r1, [r7, #4]
 800e41e:	4816      	ldr	r0, [pc, #88]	; (800e478 <tcp_close_shutdown+0x1bc>)
 800e420:	f001 faf0 	bl	800fa04 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f7ff feb3 	bl	800e190 <tcp_free_listen>
      break;
 800e42a:	e00f      	b.n	800e44c <tcp_close_shutdown+0x190>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e42c:	6879      	ldr	r1, [r7, #4]
 800e42e:	480e      	ldr	r0, [pc, #56]	; (800e468 <tcp_close_shutdown+0x1ac>)
 800e430:	f001 fae8 	bl	800fa04 <tcp_pcb_remove>
 800e434:	4b0d      	ldr	r3, [pc, #52]	; (800e46c <tcp_close_shutdown+0x1b0>)
 800e436:	2201      	movs	r2, #1
 800e438:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f7ff fe8c 	bl	800e158 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e440:	e004      	b.n	800e44c <tcp_close_shutdown+0x190>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 f81a 	bl	800e47c <tcp_close_shutdown_fin>
 800e448:	4603      	mov	r3, r0
 800e44a:	e000      	b.n	800e44e <tcp_close_shutdown+0x192>
  }
  return ERR_OK;
 800e44c:	2300      	movs	r3, #0
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bdb0      	pop	{r4, r5, r7, pc}
 800e456:	bf00      	nop
 800e458:	0801a540 	.word	0x0801a540
 800e45c:	0801a650 	.word	0x0801a650
 800e460:	0801a5c0 	.word	0x0801a5c0
 800e464:	0801a670 	.word	0x0801a670
 800e468:	2000cfc4 	.word	0x2000cfc4
 800e46c:	2000cfc0 	.word	0x2000cfc0
 800e470:	2000cfd8 	.word	0x2000cfd8
 800e474:	2000cfd0 	.word	0x2000cfd0
 800e478:	2000cfcc 	.word	0x2000cfcc

0800e47c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d106      	bne.n	800e498 <tcp_close_shutdown_fin+0x1c>
 800e48a:	4b2c      	ldr	r3, [pc, #176]	; (800e53c <tcp_close_shutdown_fin+0xc0>)
 800e48c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e490:	492b      	ldr	r1, [pc, #172]	; (800e540 <tcp_close_shutdown_fin+0xc4>)
 800e492:	482c      	ldr	r0, [pc, #176]	; (800e544 <tcp_close_shutdown_fin+0xc8>)
 800e494:	f007 f81e 	bl	80154d4 <iprintf>

  switch (pcb->state) {
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	7d1b      	ldrb	r3, [r3, #20]
 800e49c:	2b04      	cmp	r3, #4
 800e49e:	d010      	beq.n	800e4c2 <tcp_close_shutdown_fin+0x46>
 800e4a0:	2b07      	cmp	r3, #7
 800e4a2:	d01b      	beq.n	800e4dc <tcp_close_shutdown_fin+0x60>
 800e4a4:	2b03      	cmp	r3, #3
 800e4a6:	d126      	bne.n	800e4f6 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f004 f9ab 	bl	8012804 <tcp_send_fin>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e4b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d11f      	bne.n	800e4fa <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2205      	movs	r2, #5
 800e4be:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e4c0:	e01b      	b.n	800e4fa <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f004 f99e 	bl	8012804 <tcp_send_fin>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e4cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d114      	bne.n	800e4fe <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2205      	movs	r2, #5
 800e4d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e4da:	e010      	b.n	800e4fe <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f004 f991 	bl	8012804 <tcp_send_fin>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e4e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d109      	bne.n	800e502 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2209      	movs	r2, #9
 800e4f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e4f4:	e005      	b.n	800e502 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	e01c      	b.n	800e534 <tcp_close_shutdown_fin+0xb8>
      break;
 800e4fa:	bf00      	nop
 800e4fc:	e002      	b.n	800e504 <tcp_close_shutdown_fin+0x88>
      break;
 800e4fe:	bf00      	nop
 800e500:	e000      	b.n	800e504 <tcp_close_shutdown_fin+0x88>
      break;
 800e502:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d103      	bne.n	800e514 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f004 fab7 	bl	8012a80 <tcp_output>
 800e512:	e00d      	b.n	800e530 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800e514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e51c:	d108      	bne.n	800e530 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	8b5b      	ldrh	r3, [r3, #26]
 800e522:	f043 0308 	orr.w	r3, r3, #8
 800e526:	b29a      	uxth	r2, r3
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e52c:	2300      	movs	r3, #0
 800e52e:	e001      	b.n	800e534 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800e530:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e534:	4618      	mov	r0, r3
 800e536:	3710      	adds	r7, #16
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}
 800e53c:	0801a540 	.word	0x0801a540
 800e540:	0801a62c 	.word	0x0801a62c
 800e544:	0801a5c0 	.word	0x0801a5c0

0800e548 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d109      	bne.n	800e56a <tcp_close+0x22>
 800e556:	4b0f      	ldr	r3, [pc, #60]	; (800e594 <tcp_close+0x4c>)
 800e558:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e55c:	490e      	ldr	r1, [pc, #56]	; (800e598 <tcp_close+0x50>)
 800e55e:	480f      	ldr	r0, [pc, #60]	; (800e59c <tcp_close+0x54>)
 800e560:	f006 ffb8 	bl	80154d4 <iprintf>
 800e564:	f06f 030f 	mvn.w	r3, #15
 800e568:	e00f      	b.n	800e58a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	7d1b      	ldrb	r3, [r3, #20]
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d006      	beq.n	800e580 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	8b5b      	ldrh	r3, [r3, #26]
 800e576:	f043 0310 	orr.w	r3, r3, #16
 800e57a:	b29a      	uxth	r2, r3
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e580:	2101      	movs	r1, #1
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f7ff fe9a 	bl	800e2bc <tcp_close_shutdown>
 800e588:	4603      	mov	r3, r0
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3708      	adds	r7, #8
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	0801a540 	.word	0x0801a540
 800e598:	0801a68c 	.word	0x0801a68c
 800e59c:	0801a5c0 	.word	0x0801a5c0

0800e5a0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b08e      	sub	sp, #56	; 0x38
 800e5a4:	af04      	add	r7, sp, #16
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d107      	bne.n	800e5c0 <tcp_abandon+0x20>
 800e5b0:	4b4d      	ldr	r3, [pc, #308]	; (800e6e8 <tcp_abandon+0x148>)
 800e5b2:	f240 223d 	movw	r2, #573	; 0x23d
 800e5b6:	494d      	ldr	r1, [pc, #308]	; (800e6ec <tcp_abandon+0x14c>)
 800e5b8:	484d      	ldr	r0, [pc, #308]	; (800e6f0 <tcp_abandon+0x150>)
 800e5ba:	f006 ff8b 	bl	80154d4 <iprintf>
 800e5be:	e090      	b.n	800e6e2 <tcp_abandon+0x142>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	7d1b      	ldrb	r3, [r3, #20]
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d106      	bne.n	800e5d6 <tcp_abandon+0x36>
 800e5c8:	4b47      	ldr	r3, [pc, #284]	; (800e6e8 <tcp_abandon+0x148>)
 800e5ca:	f240 2241 	movw	r2, #577	; 0x241
 800e5ce:	4949      	ldr	r1, [pc, #292]	; (800e6f4 <tcp_abandon+0x154>)
 800e5d0:	4847      	ldr	r0, [pc, #284]	; (800e6f0 <tcp_abandon+0x150>)
 800e5d2:	f006 ff7f 	bl	80154d4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	7d1b      	ldrb	r3, [r3, #20]
 800e5da:	2b0a      	cmp	r3, #10
 800e5dc:	d107      	bne.n	800e5ee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e5de:	6879      	ldr	r1, [r7, #4]
 800e5e0:	4845      	ldr	r0, [pc, #276]	; (800e6f8 <tcp_abandon+0x158>)
 800e5e2:	f001 fa0f 	bl	800fa04 <tcp_pcb_remove>
    tcp_free(pcb);
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f7ff fdb6 	bl	800e158 <tcp_free>
 800e5ec:	e079      	b.n	800e6e2 <tcp_abandon+0x142>
  } else {
    int send_rst = 0;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5fa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e600:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e608:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	691b      	ldr	r3, [r3, #16]
 800e60e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	7d1b      	ldrb	r3, [r3, #20]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d126      	bne.n	800e666 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	8adb      	ldrh	r3, [r3, #22]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d02e      	beq.n	800e67e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e620:	4b36      	ldr	r3, [pc, #216]	; (800e6fc <tcp_abandon+0x15c>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	429a      	cmp	r2, r3
 800e628:	d105      	bne.n	800e636 <tcp_abandon+0x96>
 800e62a:	4b34      	ldr	r3, [pc, #208]	; (800e6fc <tcp_abandon+0x15c>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	4a32      	ldr	r2, [pc, #200]	; (800e6fc <tcp_abandon+0x15c>)
 800e632:	6013      	str	r3, [r2, #0]
 800e634:	e013      	b.n	800e65e <tcp_abandon+0xbe>
 800e636:	4b31      	ldr	r3, [pc, #196]	; (800e6fc <tcp_abandon+0x15c>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	61fb      	str	r3, [r7, #28]
 800e63c:	e00c      	b.n	800e658 <tcp_abandon+0xb8>
 800e63e:	69fb      	ldr	r3, [r7, #28]
 800e640:	68db      	ldr	r3, [r3, #12]
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	429a      	cmp	r2, r3
 800e646:	d104      	bne.n	800e652 <tcp_abandon+0xb2>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	68da      	ldr	r2, [r3, #12]
 800e64c:	69fb      	ldr	r3, [r7, #28]
 800e64e:	60da      	str	r2, [r3, #12]
 800e650:	e005      	b.n	800e65e <tcp_abandon+0xbe>
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	68db      	ldr	r3, [r3, #12]
 800e656:	61fb      	str	r3, [r7, #28]
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d1ef      	bne.n	800e63e <tcp_abandon+0x9e>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2200      	movs	r2, #0
 800e662:	60da      	str	r2, [r3, #12]
 800e664:	e00b      	b.n	800e67e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	8adb      	ldrh	r3, [r3, #22]
 800e66e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e670:	6879      	ldr	r1, [r7, #4]
 800e672:	4823      	ldr	r0, [pc, #140]	; (800e700 <tcp_abandon+0x160>)
 800e674:	f001 f9c6 	bl	800fa04 <tcp_pcb_remove>
 800e678:	4b22      	ldr	r3, [pc, #136]	; (800e704 <tcp_abandon+0x164>)
 800e67a:	2201      	movs	r2, #1
 800e67c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e682:	2b00      	cmp	r3, #0
 800e684:	d004      	beq.n	800e690 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e68a:	4618      	mov	r0, r3
 800e68c:	f000 feb8 	bl	800f400 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e694:	2b00      	cmp	r3, #0
 800e696:	d004      	beq.n	800e6a2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e69c:	4618      	mov	r0, r3
 800e69e:	f000 feaf 	bl	800f400 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00e      	beq.n	800e6c6 <tcp_abandon+0x126>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e6a8:	6879      	ldr	r1, [r7, #4]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	3304      	adds	r3, #4
 800e6ae:	687a      	ldr	r2, [r7, #4]
 800e6b0:	8b12      	ldrh	r2, [r2, #24]
 800e6b2:	9202      	str	r2, [sp, #8]
 800e6b4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e6b6:	9201      	str	r2, [sp, #4]
 800e6b8:	9300      	str	r3, [sp, #0]
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	697a      	ldr	r2, [r7, #20]
 800e6be:	69b9      	ldr	r1, [r7, #24]
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f004 ffa3 	bl	801360c <tcp_rst>
    }
    last_state = pcb->state;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	7d1b      	ldrb	r3, [r3, #20]
 800e6ca:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7ff fd43 	bl	800e158 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d004      	beq.n	800e6e2 <tcp_abandon+0x142>
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	f06f 010c 	mvn.w	r1, #12
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	4798      	blx	r3
  }
}
 800e6e2:	3728      	adds	r7, #40	; 0x28
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	0801a540 	.word	0x0801a540
 800e6ec:	0801a6c0 	.word	0x0801a6c0
 800e6f0:	0801a5c0 	.word	0x0801a5c0
 800e6f4:	0801a6dc 	.word	0x0801a6dc
 800e6f8:	2000cfd4 	.word	0x2000cfd4
 800e6fc:	2000cfd0 	.word	0x2000cfd0
 800e700:	2000cfc4 	.word	0x2000cfc4
 800e704:	2000cfc0 	.word	0x2000cfc0

0800e708 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e710:	2101      	movs	r1, #1
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7ff ff44 	bl	800e5a0 <tcp_abandon>
}
 800e718:	bf00      	nop
 800e71a:	3708      	adds	r7, #8
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b088      	sub	sp, #32
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	4613      	mov	r3, r2
 800e72c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e72e:	2304      	movs	r3, #4
 800e730:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d101      	bne.n	800e73c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e738:	4b3e      	ldr	r3, [pc, #248]	; (800e834 <tcp_bind+0x114>)
 800e73a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d109      	bne.n	800e756 <tcp_bind+0x36>
 800e742:	4b3d      	ldr	r3, [pc, #244]	; (800e838 <tcp_bind+0x118>)
 800e744:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e748:	493c      	ldr	r1, [pc, #240]	; (800e83c <tcp_bind+0x11c>)
 800e74a:	483d      	ldr	r0, [pc, #244]	; (800e840 <tcp_bind+0x120>)
 800e74c:	f006 fec2 	bl	80154d4 <iprintf>
 800e750:	f06f 030f 	mvn.w	r3, #15
 800e754:	e06a      	b.n	800e82c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	7d1b      	ldrb	r3, [r3, #20]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d009      	beq.n	800e772 <tcp_bind+0x52>
 800e75e:	4b36      	ldr	r3, [pc, #216]	; (800e838 <tcp_bind+0x118>)
 800e760:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e764:	4937      	ldr	r1, [pc, #220]	; (800e844 <tcp_bind+0x124>)
 800e766:	4836      	ldr	r0, [pc, #216]	; (800e840 <tcp_bind+0x120>)
 800e768:	f006 feb4 	bl	80154d4 <iprintf>
 800e76c:	f06f 0305 	mvn.w	r3, #5
 800e770:	e05c      	b.n	800e82c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e772:	88fb      	ldrh	r3, [r7, #6]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d109      	bne.n	800e78c <tcp_bind+0x6c>
    port = tcp_new_port();
 800e778:	f000 f9f2 	bl	800eb60 <tcp_new_port>
 800e77c:	4603      	mov	r3, r0
 800e77e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e780:	88fb      	ldrh	r3, [r7, #6]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d135      	bne.n	800e7f2 <tcp_bind+0xd2>
      return ERR_BUF;
 800e786:	f06f 0301 	mvn.w	r3, #1
 800e78a:	e04f      	b.n	800e82c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e78c:	2300      	movs	r3, #0
 800e78e:	61fb      	str	r3, [r7, #28]
 800e790:	e02b      	b.n	800e7ea <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e792:	4a2d      	ldr	r2, [pc, #180]	; (800e848 <tcp_bind+0x128>)
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	61bb      	str	r3, [r7, #24]
 800e79e:	e01e      	b.n	800e7de <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e7a0:	69bb      	ldr	r3, [r7, #24]
 800e7a2:	8adb      	ldrh	r3, [r3, #22]
 800e7a4:	88fa      	ldrh	r2, [r7, #6]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d116      	bne.n	800e7d8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e7aa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d010      	beq.n	800e7d2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d00c      	beq.n	800e7d2 <tcp_bind+0xb2>
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d009      	beq.n	800e7d2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d005      	beq.n	800e7d2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d102      	bne.n	800e7d8 <tcp_bind+0xb8>
              return ERR_USE;
 800e7d2:	f06f 0307 	mvn.w	r3, #7
 800e7d6:	e029      	b.n	800e82c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	68db      	ldr	r3, [r3, #12]
 800e7dc:	61bb      	str	r3, [r7, #24]
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d1dd      	bne.n	800e7a0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e7e4:	69fb      	ldr	r3, [r7, #28]
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	61fb      	str	r3, [r7, #28]
 800e7ea:	69fa      	ldr	r2, [r7, #28]
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	dbcf      	blt.n	800e792 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d00c      	beq.n	800e812 <tcp_bind+0xf2>
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d008      	beq.n	800e812 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d002      	beq.n	800e80c <tcp_bind+0xec>
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	e000      	b.n	800e80e <tcp_bind+0xee>
 800e80c:	2300      	movs	r3, #0
 800e80e:	68fa      	ldr	r2, [r7, #12]
 800e810:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	88fa      	ldrh	r2, [r7, #6]
 800e816:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e818:	4b0c      	ldr	r3, [pc, #48]	; (800e84c <tcp_bind+0x12c>)
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	60da      	str	r2, [r3, #12]
 800e820:	4a0a      	ldr	r2, [pc, #40]	; (800e84c <tcp_bind+0x12c>)
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6013      	str	r3, [r2, #0]
 800e826:	f005 f8b3 	bl	8013990 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e82a:	2300      	movs	r3, #0
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3720      	adds	r7, #32
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	0801958c 	.word	0x0801958c
 800e838:	0801a540 	.word	0x0801a540
 800e83c:	0801a710 	.word	0x0801a710
 800e840:	0801a5c0 	.word	0x0801a5c0
 800e844:	0801a728 	.word	0x0801a728
 800e848:	0801a530 	.word	0x0801a530
 800e84c:	2000cfd0 	.word	0x2000cfd0

0800e850 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	4613      	mov	r3, r2
 800e85c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d106      	bne.n	800e872 <tcp_accept_null+0x22>
 800e864:	4b07      	ldr	r3, [pc, #28]	; (800e884 <tcp_accept_null+0x34>)
 800e866:	f240 320f 	movw	r2, #783	; 0x30f
 800e86a:	4907      	ldr	r1, [pc, #28]	; (800e888 <tcp_accept_null+0x38>)
 800e86c:	4807      	ldr	r0, [pc, #28]	; (800e88c <tcp_accept_null+0x3c>)
 800e86e:	f006 fe31 	bl	80154d4 <iprintf>

  tcp_abort(pcb);
 800e872:	68b8      	ldr	r0, [r7, #8]
 800e874:	f7ff ff48 	bl	800e708 <tcp_abort>

  return ERR_ABRT;
 800e878:	f06f 030c 	mvn.w	r3, #12
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	0801a540 	.word	0x0801a540
 800e888:	0801a750 	.word	0x0801a750
 800e88c:	0801a5c0 	.word	0x0801a5c0

0800e890 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	460b      	mov	r3, r1
 800e89a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800e89c:	78fb      	ldrb	r3, [r7, #3]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 f806 	bl	800e8b4 <tcp_listen_with_backlog_and_err>
 800e8a8:	4603      	mov	r3, r0
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3708      	adds	r7, #8
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
	...

0800e8b4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b088      	sub	sp, #32
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	460b      	mov	r3, r1
 800e8be:	607a      	str	r2, [r7, #4]
 800e8c0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d109      	bne.n	800e8e0 <tcp_listen_with_backlog_and_err+0x2c>
 800e8cc:	4b47      	ldr	r3, [pc, #284]	; (800e9ec <tcp_listen_with_backlog_and_err+0x138>)
 800e8ce:	f240 3259 	movw	r2, #857	; 0x359
 800e8d2:	4947      	ldr	r1, [pc, #284]	; (800e9f0 <tcp_listen_with_backlog_and_err+0x13c>)
 800e8d4:	4847      	ldr	r0, [pc, #284]	; (800e9f4 <tcp_listen_with_backlog_and_err+0x140>)
 800e8d6:	f006 fdfd 	bl	80154d4 <iprintf>
 800e8da:	23f0      	movs	r3, #240	; 0xf0
 800e8dc:	76fb      	strb	r3, [r7, #27]
 800e8de:	e079      	b.n	800e9d4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	7d1b      	ldrb	r3, [r3, #20]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d009      	beq.n	800e8fc <tcp_listen_with_backlog_and_err+0x48>
 800e8e8:	4b40      	ldr	r3, [pc, #256]	; (800e9ec <tcp_listen_with_backlog_and_err+0x138>)
 800e8ea:	f240 325a 	movw	r2, #858	; 0x35a
 800e8ee:	4942      	ldr	r1, [pc, #264]	; (800e9f8 <tcp_listen_with_backlog_and_err+0x144>)
 800e8f0:	4840      	ldr	r0, [pc, #256]	; (800e9f4 <tcp_listen_with_backlog_and_err+0x140>)
 800e8f2:	f006 fdef 	bl	80154d4 <iprintf>
 800e8f6:	23f1      	movs	r3, #241	; 0xf1
 800e8f8:	76fb      	strb	r3, [r7, #27]
 800e8fa:	e06b      	b.n	800e9d4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	7d1b      	ldrb	r3, [r3, #20]
 800e900:	2b01      	cmp	r3, #1
 800e902:	d104      	bne.n	800e90e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e908:	23f7      	movs	r3, #247	; 0xf7
 800e90a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e90c:	e062      	b.n	800e9d4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e90e:	2002      	movs	r0, #2
 800e910:	f7fe fb3c 	bl	800cf8c <memp_malloc>
 800e914:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d102      	bne.n	800e922 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e91c:	23ff      	movs	r3, #255	; 0xff
 800e91e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e920:	e058      	b.n	800e9d4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	691a      	ldr	r2, [r3, #16]
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	8ada      	ldrh	r2, [r3, #22]
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	2201      	movs	r2, #1
 800e936:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	7d5a      	ldrb	r2, [r3, #21]
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	7a5a      	ldrb	r2, [r3, #9]
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	2200      	movs	r2, #0
 800e94c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	7ada      	ldrb	r2, [r3, #11]
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	7a9a      	ldrb	r2, [r3, #10]
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	69fb      	ldr	r3, [r7, #28]
 800e964:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	8adb      	ldrh	r3, [r3, #22]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d021      	beq.n	800e9b2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e96e:	4b23      	ldr	r3, [pc, #140]	; (800e9fc <tcp_listen_with_backlog_and_err+0x148>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	68fa      	ldr	r2, [r7, #12]
 800e974:	429a      	cmp	r2, r3
 800e976:	d105      	bne.n	800e984 <tcp_listen_with_backlog_and_err+0xd0>
 800e978:	4b20      	ldr	r3, [pc, #128]	; (800e9fc <tcp_listen_with_backlog_and_err+0x148>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	4a1f      	ldr	r2, [pc, #124]	; (800e9fc <tcp_listen_with_backlog_and_err+0x148>)
 800e980:	6013      	str	r3, [r2, #0]
 800e982:	e013      	b.n	800e9ac <tcp_listen_with_backlog_and_err+0xf8>
 800e984:	4b1d      	ldr	r3, [pc, #116]	; (800e9fc <tcp_listen_with_backlog_and_err+0x148>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	617b      	str	r3, [r7, #20]
 800e98a:	e00c      	b.n	800e9a6 <tcp_listen_with_backlog_and_err+0xf2>
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	68db      	ldr	r3, [r3, #12]
 800e990:	68fa      	ldr	r2, [r7, #12]
 800e992:	429a      	cmp	r2, r3
 800e994:	d104      	bne.n	800e9a0 <tcp_listen_with_backlog_and_err+0xec>
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	68da      	ldr	r2, [r3, #12]
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	60da      	str	r2, [r3, #12]
 800e99e:	e005      	b.n	800e9ac <tcp_listen_with_backlog_and_err+0xf8>
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	68db      	ldr	r3, [r3, #12]
 800e9a4:	617b      	str	r3, [r7, #20]
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d1ef      	bne.n	800e98c <tcp_listen_with_backlog_and_err+0xd8>
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e9b2:	68f8      	ldr	r0, [r7, #12]
 800e9b4:	f7ff fbd0 	bl	800e158 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	4a11      	ldr	r2, [pc, #68]	; (800ea00 <tcp_listen_with_backlog_and_err+0x14c>)
 800e9bc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e9be:	4b11      	ldr	r3, [pc, #68]	; (800ea04 <tcp_listen_with_backlog_and_err+0x150>)
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	60da      	str	r2, [r3, #12]
 800e9c6:	4a0f      	ldr	r2, [pc, #60]	; (800ea04 <tcp_listen_with_backlog_and_err+0x150>)
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	6013      	str	r3, [r2, #0]
 800e9cc:	f004 ffe0 	bl	8013990 <tcp_timer_needed>
  res = ERR_OK;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d002      	beq.n	800e9e0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	7efa      	ldrb	r2, [r7, #27]
 800e9de:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e9e0:	69fb      	ldr	r3, [r7, #28]
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3720      	adds	r7, #32
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	0801a540 	.word	0x0801a540
 800e9f0:	0801a770 	.word	0x0801a770
 800e9f4:	0801a5c0 	.word	0x0801a5c0
 800e9f8:	0801a7a0 	.word	0x0801a7a0
 800e9fc:	2000cfd0 	.word	0x2000cfd0
 800ea00:	0800e851 	.word	0x0800e851
 800ea04:	2000cfcc 	.word	0x2000cfcc

0800ea08 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d106      	bne.n	800ea24 <tcp_update_rcv_ann_wnd+0x1c>
 800ea16:	4b25      	ldr	r3, [pc, #148]	; (800eaac <tcp_update_rcv_ann_wnd+0xa4>)
 800ea18:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ea1c:	4924      	ldr	r1, [pc, #144]	; (800eab0 <tcp_update_rcv_ann_wnd+0xa8>)
 800ea1e:	4825      	ldr	r0, [pc, #148]	; (800eab4 <tcp_update_rcv_ann_wnd+0xac>)
 800ea20:	f006 fd58 	bl	80154d4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ea2c:	4413      	add	r3, r2
 800ea2e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ea38:	f240 51b4 	movw	r1, #1460	; 0x5b4
 800ea3c:	428a      	cmp	r2, r1
 800ea3e:	bf28      	it	cs
 800ea40:	460a      	movcs	r2, r1
 800ea42:	b292      	uxth	r2, r2
 800ea44:	4413      	add	r3, r2
 800ea46:	68fa      	ldr	r2, [r7, #12]
 800ea48:	1ad3      	subs	r3, r2, r3
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	db08      	blt.n	800ea60 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea5a:	68fa      	ldr	r2, [r7, #12]
 800ea5c:	1ad3      	subs	r3, r2, r3
 800ea5e:	e020      	b.n	800eaa2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea68:	1ad3      	subs	r3, r2, r3
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	dd03      	ble.n	800ea76 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2200      	movs	r2, #0
 800ea72:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ea74:	e014      	b.n	800eaa0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea7e:	1ad3      	subs	r3, r2, r3
 800ea80:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea88:	d306      	bcc.n	800ea98 <tcp_update_rcv_ann_wnd+0x90>
 800ea8a:	4b08      	ldr	r3, [pc, #32]	; (800eaac <tcp_update_rcv_ann_wnd+0xa4>)
 800ea8c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ea90:	4909      	ldr	r1, [pc, #36]	; (800eab8 <tcp_update_rcv_ann_wnd+0xb0>)
 800ea92:	4808      	ldr	r0, [pc, #32]	; (800eab4 <tcp_update_rcv_ann_wnd+0xac>)
 800ea94:	f006 fd1e 	bl	80154d4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	b29a      	uxth	r2, r3
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800eaa0:	2300      	movs	r3, #0
  }
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3710      	adds	r7, #16
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	0801a540 	.word	0x0801a540
 800eab0:	0801a7d8 	.word	0x0801a7d8
 800eab4:	0801a5c0 	.word	0x0801a5c0
 800eab8:	0801a7fc 	.word	0x0801a7fc

0800eabc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	460b      	mov	r3, r1
 800eac6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d107      	bne.n	800eade <tcp_recved+0x22>
 800eace:	4b20      	ldr	r3, [pc, #128]	; (800eb50 <tcp_recved+0x94>)
 800ead0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ead4:	491f      	ldr	r1, [pc, #124]	; (800eb54 <tcp_recved+0x98>)
 800ead6:	4820      	ldr	r0, [pc, #128]	; (800eb58 <tcp_recved+0x9c>)
 800ead8:	f006 fcfc 	bl	80154d4 <iprintf>
 800eadc:	e034      	b.n	800eb48 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	7d1b      	ldrb	r3, [r3, #20]
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d106      	bne.n	800eaf4 <tcp_recved+0x38>
 800eae6:	4b1a      	ldr	r3, [pc, #104]	; (800eb50 <tcp_recved+0x94>)
 800eae8:	f240 32d3 	movw	r2, #979	; 0x3d3
 800eaec:	491b      	ldr	r1, [pc, #108]	; (800eb5c <tcp_recved+0xa0>)
 800eaee:	481a      	ldr	r0, [pc, #104]	; (800eb58 <tcp_recved+0x9c>)
 800eaf0:	f006 fcf0 	bl	80154d4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eaf8:	887b      	ldrh	r3, [r7, #2]
 800eafa:	4413      	add	r3, r2
 800eafc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800eafe:	89fb      	ldrh	r3, [r7, #14]
 800eb00:	f640 3268 	movw	r2, #2920	; 0xb68
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d804      	bhi.n	800eb12 <tcp_recved+0x56>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb0c:	89fa      	ldrh	r2, [r7, #14]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d204      	bcs.n	800eb1c <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f640 3268 	movw	r2, #2920	; 0xb68
 800eb18:	851a      	strh	r2, [r3, #40]	; 0x28
 800eb1a:	e002      	b.n	800eb22 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	89fa      	ldrh	r2, [r7, #14]
 800eb20:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f7ff ff70 	bl	800ea08 <tcp_update_rcv_ann_wnd>
 800eb28:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	f240 22d9 	movw	r2, #729	; 0x2d9
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d909      	bls.n	800eb48 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	8b5b      	ldrh	r3, [r3, #26]
 800eb38:	f043 0302 	orr.w	r3, r3, #2
 800eb3c:	b29a      	uxth	r2, r3
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f003 ff9c 	bl	8012a80 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	0801a540 	.word	0x0801a540
 800eb54:	0801a818 	.word	0x0801a818
 800eb58:	0801a5c0 	.word	0x0801a5c0
 800eb5c:	0801a830 	.word	0x0801a830

0800eb60 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800eb66:	2300      	movs	r3, #0
 800eb68:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800eb6a:	4b1e      	ldr	r3, [pc, #120]	; (800ebe4 <tcp_new_port+0x84>)
 800eb6c:	881b      	ldrh	r3, [r3, #0]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	b29a      	uxth	r2, r3
 800eb72:	4b1c      	ldr	r3, [pc, #112]	; (800ebe4 <tcp_new_port+0x84>)
 800eb74:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800eb76:	4b1b      	ldr	r3, [pc, #108]	; (800ebe4 <tcp_new_port+0x84>)
 800eb78:	881b      	ldrh	r3, [r3, #0]
 800eb7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d103      	bne.n	800eb8a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800eb82:	4b18      	ldr	r3, [pc, #96]	; (800ebe4 <tcp_new_port+0x84>)
 800eb84:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800eb88:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	71fb      	strb	r3, [r7, #7]
 800eb8e:	e01e      	b.n	800ebce <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800eb90:	79fb      	ldrb	r3, [r7, #7]
 800eb92:	4a15      	ldr	r2, [pc, #84]	; (800ebe8 <tcp_new_port+0x88>)
 800eb94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	603b      	str	r3, [r7, #0]
 800eb9c:	e011      	b.n	800ebc2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	8ada      	ldrh	r2, [r3, #22]
 800eba2:	4b10      	ldr	r3, [pc, #64]	; (800ebe4 <tcp_new_port+0x84>)
 800eba4:	881b      	ldrh	r3, [r3, #0]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d108      	bne.n	800ebbc <tcp_new_port+0x5c>
        n++;
 800ebaa:	88bb      	ldrh	r3, [r7, #4]
 800ebac:	3301      	adds	r3, #1
 800ebae:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ebb0:	88bb      	ldrh	r3, [r7, #4]
 800ebb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ebb6:	d3d8      	bcc.n	800eb6a <tcp_new_port+0xa>
          return 0;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	e00d      	b.n	800ebd8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	68db      	ldr	r3, [r3, #12]
 800ebc0:	603b      	str	r3, [r7, #0]
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1ea      	bne.n	800eb9e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ebc8:	79fb      	ldrb	r3, [r7, #7]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	71fb      	strb	r3, [r7, #7]
 800ebce:	79fb      	ldrb	r3, [r7, #7]
 800ebd0:	2b03      	cmp	r3, #3
 800ebd2:	d9dd      	bls.n	800eb90 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ebd4:	4b03      	ldr	r3, [pc, #12]	; (800ebe4 <tcp_new_port+0x84>)
 800ebd6:	881b      	ldrh	r3, [r3, #0]
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	370c      	adds	r7, #12
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr
 800ebe4:	20000030 	.word	0x20000030
 800ebe8:	0801a530 	.word	0x0801a530

0800ebec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ebec:	b5b0      	push	{r4, r5, r7, lr}
 800ebee:	b090      	sub	sp, #64	; 0x40
 800ebf0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ebf8:	4b94      	ldr	r3, [pc, #592]	; (800ee4c <tcp_slowtmr+0x260>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	4a93      	ldr	r2, [pc, #588]	; (800ee4c <tcp_slowtmr+0x260>)
 800ec00:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ec02:	4b93      	ldr	r3, [pc, #588]	; (800ee50 <tcp_slowtmr+0x264>)
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	3301      	adds	r3, #1
 800ec08:	b2da      	uxtb	r2, r3
 800ec0a:	4b91      	ldr	r3, [pc, #580]	; (800ee50 <tcp_slowtmr+0x264>)
 800ec0c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ec12:	4b90      	ldr	r3, [pc, #576]	; (800ee54 <tcp_slowtmr+0x268>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ec18:	e287      	b.n	800f12a <tcp_slowtmr+0x53e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ec1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1c:	7d1b      	ldrb	r3, [r3, #20]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d106      	bne.n	800ec30 <tcp_slowtmr+0x44>
 800ec22:	4b8d      	ldr	r3, [pc, #564]	; (800ee58 <tcp_slowtmr+0x26c>)
 800ec24:	f240 42be 	movw	r2, #1214	; 0x4be
 800ec28:	498c      	ldr	r1, [pc, #560]	; (800ee5c <tcp_slowtmr+0x270>)
 800ec2a:	488d      	ldr	r0, [pc, #564]	; (800ee60 <tcp_slowtmr+0x274>)
 800ec2c:	f006 fc52 	bl	80154d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ec30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec32:	7d1b      	ldrb	r3, [r3, #20]
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d106      	bne.n	800ec46 <tcp_slowtmr+0x5a>
 800ec38:	4b87      	ldr	r3, [pc, #540]	; (800ee58 <tcp_slowtmr+0x26c>)
 800ec3a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ec3e:	4989      	ldr	r1, [pc, #548]	; (800ee64 <tcp_slowtmr+0x278>)
 800ec40:	4887      	ldr	r0, [pc, #540]	; (800ee60 <tcp_slowtmr+0x274>)
 800ec42:	f006 fc47 	bl	80154d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ec46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec48:	7d1b      	ldrb	r3, [r3, #20]
 800ec4a:	2b0a      	cmp	r3, #10
 800ec4c:	d106      	bne.n	800ec5c <tcp_slowtmr+0x70>
 800ec4e:	4b82      	ldr	r3, [pc, #520]	; (800ee58 <tcp_slowtmr+0x26c>)
 800ec50:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ec54:	4984      	ldr	r1, [pc, #528]	; (800ee68 <tcp_slowtmr+0x27c>)
 800ec56:	4882      	ldr	r0, [pc, #520]	; (800ee60 <tcp_slowtmr+0x274>)
 800ec58:	f006 fc3c 	bl	80154d4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ec5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec5e:	7f9a      	ldrb	r2, [r3, #30]
 800ec60:	4b7b      	ldr	r3, [pc, #492]	; (800ee50 <tcp_slowtmr+0x264>)
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d105      	bne.n	800ec74 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ec68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ec6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6e:	68db      	ldr	r3, [r3, #12]
 800ec70:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ec72:	e25a      	b.n	800f12a <tcp_slowtmr+0x53e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ec74:	4b76      	ldr	r3, [pc, #472]	; (800ee50 <tcp_slowtmr+0x264>)
 800ec76:	781a      	ldrb	r2, [r3, #0]
 800ec78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ec82:	2300      	movs	r3, #0
 800ec84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ec88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8a:	7d1b      	ldrb	r3, [r3, #20]
 800ec8c:	2b02      	cmp	r3, #2
 800ec8e:	d10a      	bne.n	800eca6 <tcp_slowtmr+0xba>
 800ec90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec96:	2b05      	cmp	r3, #5
 800ec98:	d905      	bls.n	800eca6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ec9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec9e:	3301      	adds	r3, #1
 800eca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eca4:	e11e      	b.n	800eee4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800eca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ecac:	2b0b      	cmp	r3, #11
 800ecae:	d905      	bls.n	800ecbc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ecb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ecba:	e113      	b.n	800eee4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ecbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbe:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d075      	beq.n	800edb2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ecc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d006      	beq.n	800ecdc <tcp_slowtmr+0xf0>
 800ecce:	4b62      	ldr	r3, [pc, #392]	; (800ee58 <tcp_slowtmr+0x26c>)
 800ecd0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ecd4:	4965      	ldr	r1, [pc, #404]	; (800ee6c <tcp_slowtmr+0x280>)
 800ecd6:	4862      	ldr	r0, [pc, #392]	; (800ee60 <tcp_slowtmr+0x274>)
 800ecd8:	f006 fbfc 	bl	80154d4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ecdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d106      	bne.n	800ecf2 <tcp_slowtmr+0x106>
 800ece4:	4b5c      	ldr	r3, [pc, #368]	; (800ee58 <tcp_slowtmr+0x26c>)
 800ece6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ecea:	4961      	ldr	r1, [pc, #388]	; (800ee70 <tcp_slowtmr+0x284>)
 800ecec:	485c      	ldr	r0, [pc, #368]	; (800ee60 <tcp_slowtmr+0x274>)
 800ecee:	f006 fbf1 	bl	80154d4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ecf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800ecf8:	2b0b      	cmp	r3, #11
 800ecfa:	d905      	bls.n	800ed08 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ecfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed00:	3301      	adds	r3, #1
 800ed02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed06:	e0ed      	b.n	800eee4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ed08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ed0e:	3b01      	subs	r3, #1
 800ed10:	4a58      	ldr	r2, [pc, #352]	; (800ee74 <tcp_slowtmr+0x288>)
 800ed12:	5cd3      	ldrb	r3, [r2, r3]
 800ed14:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ed16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed18:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800ed1c:	7c7a      	ldrb	r2, [r7, #17]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d907      	bls.n	800ed32 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ed22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed24:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800ed28:	3301      	adds	r3, #1
 800ed2a:	b2da      	uxtb	r2, r3
 800ed2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed2e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ed32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed34:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800ed38:	7c7a      	ldrb	r2, [r7, #17]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	f200 80d2 	bhi.w	800eee4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ed40:	2301      	movs	r3, #1
 800ed42:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ed44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d108      	bne.n	800ed60 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ed4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed50:	f004 fd50 	bl	80137f4 <tcp_zero_window_probe>
 800ed54:	4603      	mov	r3, r0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d014      	beq.n	800ed84 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	623b      	str	r3, [r7, #32]
 800ed5e:	e011      	b.n	800ed84 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ed60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed66:	4619      	mov	r1, r3
 800ed68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed6a:	f003 fc03 	bl	8012574 <tcp_split_unsent_seg>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d107      	bne.n	800ed84 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ed74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed76:	f003 fe83 	bl	8012a80 <tcp_output>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d101      	bne.n	800ed84 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ed80:	2300      	movs	r3, #0
 800ed82:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ed84:	6a3b      	ldr	r3, [r7, #32]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f000 80ac 	beq.w	800eee4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ed8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8e:	2200      	movs	r2, #0
 800ed90:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ed94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed96:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ed9a:	2b06      	cmp	r3, #6
 800ed9c:	f200 80a2 	bhi.w	800eee4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800eda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800eda6:	3301      	adds	r3, #1
 800eda8:	b2da      	uxtb	r2, r3
 800edaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edac:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800edb0:	e098      	b.n	800eee4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800edb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800edb8:	2b00      	cmp	r3, #0
 800edba:	db0f      	blt.n	800eddc <tcp_slowtmr+0x1f0>
 800edbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edbe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800edc2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d008      	beq.n	800eddc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800edca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edcc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800edd0:	b29b      	uxth	r3, r3
 800edd2:	3301      	adds	r3, #1
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	b21a      	sxth	r2, r3
 800edd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edda:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800eddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edde:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ede2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ede8:	429a      	cmp	r2, r3
 800edea:	db7b      	blt.n	800eee4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800edec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edee:	f004 f93f 	bl	8013070 <tcp_rexmit_rto_prepare>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d007      	beq.n	800ee08 <tcp_slowtmr+0x21c>
 800edf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d171      	bne.n	800eee4 <tcp_slowtmr+0x2f8>
 800ee00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d06d      	beq.n	800eee4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ee08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0a:	7d1b      	ldrb	r3, [r3, #20]
 800ee0c:	2b02      	cmp	r3, #2
 800ee0e:	d03a      	beq.n	800ee86 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ee10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee16:	2b0c      	cmp	r3, #12
 800ee18:	bf28      	it	cs
 800ee1a:	230c      	movcs	r3, #12
 800ee1c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ee1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ee24:	10db      	asrs	r3, r3, #3
 800ee26:	b21b      	sxth	r3, r3
 800ee28:	461a      	mov	r2, r3
 800ee2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee2c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ee30:	4413      	add	r3, r2
 800ee32:	7efa      	ldrb	r2, [r7, #27]
 800ee34:	4910      	ldr	r1, [pc, #64]	; (800ee78 <tcp_slowtmr+0x28c>)
 800ee36:	5c8a      	ldrb	r2, [r1, r2]
 800ee38:	4093      	lsls	r3, r2
 800ee3a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ee42:	4293      	cmp	r3, r2
 800ee44:	dc1a      	bgt.n	800ee7c <tcp_slowtmr+0x290>
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	b21a      	sxth	r2, r3
 800ee4a:	e019      	b.n	800ee80 <tcp_slowtmr+0x294>
 800ee4c:	2000cfc8 	.word	0x2000cfc8
 800ee50:	200068ca 	.word	0x200068ca
 800ee54:	2000cfc4 	.word	0x2000cfc4
 800ee58:	0801a540 	.word	0x0801a540
 800ee5c:	0801a8c0 	.word	0x0801a8c0
 800ee60:	0801a5c0 	.word	0x0801a5c0
 800ee64:	0801a8ec 	.word	0x0801a8ec
 800ee68:	0801a918 	.word	0x0801a918
 800ee6c:	0801a948 	.word	0x0801a948
 800ee70:	0801a97c 	.word	0x0801a97c
 800ee74:	0801a528 	.word	0x0801a528
 800ee78:	0801a518 	.word	0x0801a518
 800ee7c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ee80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ee86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee88:	2200      	movs	r2, #0
 800ee8a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ee8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ee92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	bf28      	it	cs
 800ee9c:	4613      	movcs	r3, r2
 800ee9e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800eea0:	8a7b      	ldrh	r3, [r7, #18]
 800eea2:	085b      	lsrs	r3, r3, #1
 800eea4:	b29a      	uxth	r2, r3
 800eea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800eeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800eeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eeb6:	005b      	lsls	r3, r3, #1
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d206      	bcs.n	800eecc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800eebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eec2:	005b      	lsls	r3, r3, #1
 800eec4:	b29a      	uxth	r2, r3
 800eec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800eecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eece:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800eed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800eed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed8:	2200      	movs	r2, #0
 800eeda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800eede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eee0:	f004 f936 	bl	8013150 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800eee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee6:	7d1b      	ldrb	r3, [r3, #20]
 800eee8:	2b06      	cmp	r3, #6
 800eeea:	d111      	bne.n	800ef10 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800eeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeee:	8b5b      	ldrh	r3, [r3, #26]
 800eef0:	f003 0310 	and.w	r3, r3, #16
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d00b      	beq.n	800ef10 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eef8:	4b91      	ldr	r3, [pc, #580]	; (800f140 <tcp_slowtmr+0x554>)
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefe:	6a1b      	ldr	r3, [r3, #32]
 800ef00:	1ad3      	subs	r3, r2, r3
 800ef02:	2b28      	cmp	r3, #40	; 0x28
 800ef04:	d904      	bls.n	800ef10 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ef06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ef10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef12:	7a5b      	ldrb	r3, [r3, #9]
 800ef14:	f003 0308 	and.w	r3, r3, #8
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d04a      	beq.n	800efb2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ef1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ef20:	2b04      	cmp	r3, #4
 800ef22:	d003      	beq.n	800ef2c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ef24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef26:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ef28:	2b07      	cmp	r3, #7
 800ef2a:	d142      	bne.n	800efb2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef2c:	4b84      	ldr	r3, [pc, #528]	; (800f140 <tcp_slowtmr+0x554>)
 800ef2e:	681a      	ldr	r2, [r3, #0]
 800ef30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef32:	6a1b      	ldr	r3, [r3, #32]
 800ef34:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ef36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef38:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800ef3c:	4b81      	ldr	r3, [pc, #516]	; (800f144 <tcp_slowtmr+0x558>)
 800ef3e:	440b      	add	r3, r1
 800ef40:	4981      	ldr	r1, [pc, #516]	; (800f148 <tcp_slowtmr+0x55c>)
 800ef42:	fba1 1303 	umull	r1, r3, r1, r3
 800ef46:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d90a      	bls.n	800ef62 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ef4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef50:	3301      	adds	r3, #1
 800ef52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ef56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ef60:	e027      	b.n	800efb2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef62:	4b77      	ldr	r3, [pc, #476]	; (800f140 <tcp_slowtmr+0x554>)
 800ef64:	681a      	ldr	r2, [r3, #0]
 800ef66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef68:	6a1b      	ldr	r3, [r3, #32]
 800ef6a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ef6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800ef72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef74:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800ef78:	4618      	mov	r0, r3
 800ef7a:	4b74      	ldr	r3, [pc, #464]	; (800f14c <tcp_slowtmr+0x560>)
 800ef7c:	fb03 f300 	mul.w	r3, r3, r0
 800ef80:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ef82:	4971      	ldr	r1, [pc, #452]	; (800f148 <tcp_slowtmr+0x55c>)
 800ef84:	fba1 1303 	umull	r1, r3, r1, r3
 800ef88:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d911      	bls.n	800efb2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800ef8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef90:	f004 fbf0 	bl	8013774 <tcp_keepalive>
 800ef94:	4603      	mov	r3, r0
 800ef96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ef9a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d107      	bne.n	800efb2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800efa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa4:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800efa8:	3301      	adds	r3, #1
 800efaa:	b2da      	uxtb	r2, r3
 800efac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efae:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
      tcp_free_ooseq(pcb);
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800efb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb4:	7d1b      	ldrb	r3, [r3, #20]
 800efb6:	2b03      	cmp	r3, #3
 800efb8:	d10b      	bne.n	800efd2 <tcp_slowtmr+0x3e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800efba:	4b61      	ldr	r3, [pc, #388]	; (800f140 <tcp_slowtmr+0x554>)
 800efbc:	681a      	ldr	r2, [r3, #0]
 800efbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc0:	6a1b      	ldr	r3, [r3, #32]
 800efc2:	1ad3      	subs	r3, r2, r3
 800efc4:	2b28      	cmp	r3, #40	; 0x28
 800efc6:	d904      	bls.n	800efd2 <tcp_slowtmr+0x3e6>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800efc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efcc:	3301      	adds	r3, #1
 800efce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800efd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd4:	7d1b      	ldrb	r3, [r3, #20]
 800efd6:	2b09      	cmp	r3, #9
 800efd8:	d10b      	bne.n	800eff2 <tcp_slowtmr+0x406>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800efda:	4b59      	ldr	r3, [pc, #356]	; (800f140 <tcp_slowtmr+0x554>)
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe0:	6a1b      	ldr	r3, [r3, #32]
 800efe2:	1ad3      	subs	r3, r2, r3
 800efe4:	2bf0      	cmp	r3, #240	; 0xf0
 800efe6:	d904      	bls.n	800eff2 <tcp_slowtmr+0x406>
        ++pcb_remove;
 800efe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efec:	3301      	adds	r3, #1
 800efee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d060      	beq.n	800f0bc <tcp_slowtmr+0x4d0>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800effa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f000:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f004:	f000 fcb4 	bl	800f970 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d010      	beq.n	800f030 <tcp_slowtmr+0x444>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f00e:	4b50      	ldr	r3, [pc, #320]	; (800f150 <tcp_slowtmr+0x564>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f014:	429a      	cmp	r2, r3
 800f016:	d106      	bne.n	800f026 <tcp_slowtmr+0x43a>
 800f018:	4b4e      	ldr	r3, [pc, #312]	; (800f154 <tcp_slowtmr+0x568>)
 800f01a:	f240 526d 	movw	r2, #1389	; 0x56d
 800f01e:	494e      	ldr	r1, [pc, #312]	; (800f158 <tcp_slowtmr+0x56c>)
 800f020:	484e      	ldr	r0, [pc, #312]	; (800f15c <tcp_slowtmr+0x570>)
 800f022:	f006 fa57 	bl	80154d4 <iprintf>
        prev->next = pcb->next;
 800f026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f028:	68da      	ldr	r2, [r3, #12]
 800f02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f02c:	60da      	str	r2, [r3, #12]
 800f02e:	e00f      	b.n	800f050 <tcp_slowtmr+0x464>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f030:	4b47      	ldr	r3, [pc, #284]	; (800f150 <tcp_slowtmr+0x564>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f036:	429a      	cmp	r2, r3
 800f038:	d006      	beq.n	800f048 <tcp_slowtmr+0x45c>
 800f03a:	4b46      	ldr	r3, [pc, #280]	; (800f154 <tcp_slowtmr+0x568>)
 800f03c:	f240 5271 	movw	r2, #1393	; 0x571
 800f040:	4947      	ldr	r1, [pc, #284]	; (800f160 <tcp_slowtmr+0x574>)
 800f042:	4846      	ldr	r0, [pc, #280]	; (800f15c <tcp_slowtmr+0x570>)
 800f044:	f006 fa46 	bl	80154d4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	4a40      	ldr	r2, [pc, #256]	; (800f150 <tcp_slowtmr+0x564>)
 800f04e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f050:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f054:	2b00      	cmp	r3, #0
 800f056:	d013      	beq.n	800f080 <tcp_slowtmr+0x494>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f060:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f064:	3304      	adds	r3, #4
 800f066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f068:	8ad2      	ldrh	r2, [r2, #22]
 800f06a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f06c:	8b09      	ldrh	r1, [r1, #24]
 800f06e:	9102      	str	r1, [sp, #8]
 800f070:	9201      	str	r2, [sp, #4]
 800f072:	9300      	str	r3, [sp, #0]
 800f074:	462b      	mov	r3, r5
 800f076:	4622      	mov	r2, r4
 800f078:	4601      	mov	r1, r0
 800f07a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f07c:	f004 fac6 	bl	801360c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f082:	691b      	ldr	r3, [r3, #16]
 800f084:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f088:	7d1b      	ldrb	r3, [r3, #20]
 800f08a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f092:	68db      	ldr	r3, [r3, #12]
 800f094:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f096:	6838      	ldr	r0, [r7, #0]
 800f098:	f7ff f85e 	bl	800e158 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f09c:	4b31      	ldr	r3, [pc, #196]	; (800f164 <tcp_slowtmr+0x578>)
 800f09e:	2200      	movs	r2, #0
 800f0a0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d004      	beq.n	800f0b2 <tcp_slowtmr+0x4c6>
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f06f 010c 	mvn.w	r1, #12
 800f0ae:	68b8      	ldr	r0, [r7, #8]
 800f0b0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f0b2:	4b2c      	ldr	r3, [pc, #176]	; (800f164 <tcp_slowtmr+0x578>)
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d037      	beq.n	800f12a <tcp_slowtmr+0x53e>
        goto tcp_slowtmr_start;
 800f0ba:	e5a8      	b.n	800ec0e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c2:	68db      	ldr	r3, [r3, #12]
 800f0c4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c8:	7f1b      	ldrb	r3, [r3, #28]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	b2da      	uxtb	r2, r3
 800f0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d4:	7f1a      	ldrb	r2, [r3, #28]
 800f0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d8:	7f5b      	ldrb	r3, [r3, #29]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d325      	bcc.n	800f12a <tcp_slowtmr+0x53e>
        prev->polltmr = 0;
 800f0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f0e4:	4b1f      	ldr	r3, [pc, #124]	; (800f164 <tcp_slowtmr+0x578>)
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d00b      	beq.n	800f10c <tcp_slowtmr+0x520>
 800f0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0fc:	6912      	ldr	r2, [r2, #16]
 800f0fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f100:	4610      	mov	r0, r2
 800f102:	4798      	blx	r3
 800f104:	4603      	mov	r3, r0
 800f106:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f10a:	e002      	b.n	800f112 <tcp_slowtmr+0x526>
 800f10c:	2300      	movs	r3, #0
 800f10e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f112:	4b14      	ldr	r3, [pc, #80]	; (800f164 <tcp_slowtmr+0x578>)
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d000      	beq.n	800f11c <tcp_slowtmr+0x530>
          goto tcp_slowtmr_start;
 800f11a:	e578      	b.n	800ec0e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f11c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f120:	2b00      	cmp	r3, #0
 800f122:	d102      	bne.n	800f12a <tcp_slowtmr+0x53e>
          tcp_output(prev);
 800f124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f126:	f003 fcab 	bl	8012a80 <tcp_output>
  while (pcb != NULL) {
 800f12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	f47f ad74 	bne.w	800ec1a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f132:	2300      	movs	r3, #0
 800f134:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f136:	4b0c      	ldr	r3, [pc, #48]	; (800f168 <tcp_slowtmr+0x57c>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f13c:	e069      	b.n	800f212 <tcp_slowtmr+0x626>
 800f13e:	bf00      	nop
 800f140:	2000cfc8 	.word	0x2000cfc8
 800f144:	000a4cb8 	.word	0x000a4cb8
 800f148:	10624dd3 	.word	0x10624dd3
 800f14c:	000124f8 	.word	0x000124f8
 800f150:	2000cfc4 	.word	0x2000cfc4
 800f154:	0801a540 	.word	0x0801a540
 800f158:	0801a9b4 	.word	0x0801a9b4
 800f15c:	0801a5c0 	.word	0x0801a5c0
 800f160:	0801a9e0 	.word	0x0801a9e0
 800f164:	2000cfc0 	.word	0x2000cfc0
 800f168:	2000cfd4 	.word	0x2000cfd4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16e:	7d1b      	ldrb	r3, [r3, #20]
 800f170:	2b0a      	cmp	r3, #10
 800f172:	d006      	beq.n	800f182 <tcp_slowtmr+0x596>
 800f174:	4b2a      	ldr	r3, [pc, #168]	; (800f220 <tcp_slowtmr+0x634>)
 800f176:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f17a:	492a      	ldr	r1, [pc, #168]	; (800f224 <tcp_slowtmr+0x638>)
 800f17c:	482a      	ldr	r0, [pc, #168]	; (800f228 <tcp_slowtmr+0x63c>)
 800f17e:	f006 f9a9 	bl	80154d4 <iprintf>
    pcb_remove = 0;
 800f182:	2300      	movs	r3, #0
 800f184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f188:	4b28      	ldr	r3, [pc, #160]	; (800f22c <tcp_slowtmr+0x640>)
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18e:	6a1b      	ldr	r3, [r3, #32]
 800f190:	1ad3      	subs	r3, r2, r3
 800f192:	2bf0      	cmp	r3, #240	; 0xf0
 800f194:	d904      	bls.n	800f1a0 <tcp_slowtmr+0x5b4>
      ++pcb_remove;
 800f196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f19a:	3301      	adds	r3, #1
 800f19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d02f      	beq.n	800f208 <tcp_slowtmr+0x61c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f1a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1aa:	f000 fbe1 	bl	800f970 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d010      	beq.n	800f1d6 <tcp_slowtmr+0x5ea>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f1b4:	4b1e      	ldr	r3, [pc, #120]	; (800f230 <tcp_slowtmr+0x644>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d106      	bne.n	800f1cc <tcp_slowtmr+0x5e0>
 800f1be:	4b18      	ldr	r3, [pc, #96]	; (800f220 <tcp_slowtmr+0x634>)
 800f1c0:	f240 52af 	movw	r2, #1455	; 0x5af
 800f1c4:	491b      	ldr	r1, [pc, #108]	; (800f234 <tcp_slowtmr+0x648>)
 800f1c6:	4818      	ldr	r0, [pc, #96]	; (800f228 <tcp_slowtmr+0x63c>)
 800f1c8:	f006 f984 	bl	80154d4 <iprintf>
        prev->next = pcb->next;
 800f1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ce:	68da      	ldr	r2, [r3, #12]
 800f1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d2:	60da      	str	r2, [r3, #12]
 800f1d4:	e00f      	b.n	800f1f6 <tcp_slowtmr+0x60a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f1d6:	4b16      	ldr	r3, [pc, #88]	; (800f230 <tcp_slowtmr+0x644>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d006      	beq.n	800f1ee <tcp_slowtmr+0x602>
 800f1e0:	4b0f      	ldr	r3, [pc, #60]	; (800f220 <tcp_slowtmr+0x634>)
 800f1e2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f1e6:	4914      	ldr	r1, [pc, #80]	; (800f238 <tcp_slowtmr+0x64c>)
 800f1e8:	480f      	ldr	r0, [pc, #60]	; (800f228 <tcp_slowtmr+0x63c>)
 800f1ea:	f006 f973 	bl	80154d4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f0:	68db      	ldr	r3, [r3, #12]
 800f1f2:	4a0f      	ldr	r2, [pc, #60]	; (800f230 <tcp_slowtmr+0x644>)
 800f1f4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f200:	69f8      	ldr	r0, [r7, #28]
 800f202:	f7fe ffa9 	bl	800e158 <tcp_free>
 800f206:	e004      	b.n	800f212 <tcp_slowtmr+0x626>
    } else {
      prev = pcb;
 800f208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20e:	68db      	ldr	r3, [r3, #12]
 800f210:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f214:	2b00      	cmp	r3, #0
 800f216:	d1a9      	bne.n	800f16c <tcp_slowtmr+0x580>
    }
  }
}
 800f218:	bf00      	nop
 800f21a:	3730      	adds	r7, #48	; 0x30
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bdb0      	pop	{r4, r5, r7, pc}
 800f220:	0801a540 	.word	0x0801a540
 800f224:	0801aa0c 	.word	0x0801aa0c
 800f228:	0801a5c0 	.word	0x0801a5c0
 800f22c:	2000cfc8 	.word	0x2000cfc8
 800f230:	2000cfd4 	.word	0x2000cfd4
 800f234:	0801aa3c 	.word	0x0801aa3c
 800f238:	0801aa64 	.word	0x0801aa64

0800f23c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f242:	4b2d      	ldr	r3, [pc, #180]	; (800f2f8 <tcp_fasttmr+0xbc>)
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	3301      	adds	r3, #1
 800f248:	b2da      	uxtb	r2, r3
 800f24a:	4b2b      	ldr	r3, [pc, #172]	; (800f2f8 <tcp_fasttmr+0xbc>)
 800f24c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f24e:	4b2b      	ldr	r3, [pc, #172]	; (800f2fc <tcp_fasttmr+0xc0>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f254:	e048      	b.n	800f2e8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	7f9a      	ldrb	r2, [r3, #30]
 800f25a:	4b27      	ldr	r3, [pc, #156]	; (800f2f8 <tcp_fasttmr+0xbc>)
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	429a      	cmp	r2, r3
 800f260:	d03f      	beq.n	800f2e2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f262:	4b25      	ldr	r3, [pc, #148]	; (800f2f8 <tcp_fasttmr+0xbc>)
 800f264:	781a      	ldrb	r2, [r3, #0]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	8b5b      	ldrh	r3, [r3, #26]
 800f26e:	f003 0301 	and.w	r3, r3, #1
 800f272:	2b00      	cmp	r3, #0
 800f274:	d010      	beq.n	800f298 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	8b5b      	ldrh	r3, [r3, #26]
 800f27a:	f043 0302 	orr.w	r3, r3, #2
 800f27e:	b29a      	uxth	r2, r3
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f003 fbfb 	bl	8012a80 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	8b5b      	ldrh	r3, [r3, #26]
 800f28e:	f023 0303 	bic.w	r3, r3, #3
 800f292:	b29a      	uxth	r2, r3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	8b5b      	ldrh	r3, [r3, #26]
 800f29c:	f003 0308 	and.w	r3, r3, #8
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d009      	beq.n	800f2b8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	8b5b      	ldrh	r3, [r3, #26]
 800f2a8:	f023 0308 	bic.w	r3, r3, #8
 800f2ac:	b29a      	uxth	r2, r3
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7ff f8e2 	bl	800e47c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	68db      	ldr	r3, [r3, #12]
 800f2bc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d00a      	beq.n	800f2dc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f2c6:	4b0e      	ldr	r3, [pc, #56]	; (800f300 <tcp_fasttmr+0xc4>)
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f000 f819 	bl	800f304 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f2d2:	4b0b      	ldr	r3, [pc, #44]	; (800f300 <tcp_fasttmr+0xc4>)
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d000      	beq.n	800f2dc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f2da:	e7b8      	b.n	800f24e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	607b      	str	r3, [r7, #4]
 800f2e0:	e002      	b.n	800f2e8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d1b3      	bne.n	800f256 <tcp_fasttmr+0x1a>
    }
  }
}
 800f2ee:	bf00      	nop
 800f2f0:	3708      	adds	r7, #8
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	200068ca 	.word	0x200068ca
 800f2fc:	2000cfc4 	.word	0x2000cfc4
 800f300:	2000cfc0 	.word	0x2000cfc0

0800f304 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f304:	b590      	push	{r4, r7, lr}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d109      	bne.n	800f326 <tcp_process_refused_data+0x22>
 800f312:	4b38      	ldr	r3, [pc, #224]	; (800f3f4 <tcp_process_refused_data+0xf0>)
 800f314:	f240 6209 	movw	r2, #1545	; 0x609
 800f318:	4937      	ldr	r1, [pc, #220]	; (800f3f8 <tcp_process_refused_data+0xf4>)
 800f31a:	4838      	ldr	r0, [pc, #224]	; (800f3fc <tcp_process_refused_data+0xf8>)
 800f31c:	f006 f8da 	bl	80154d4 <iprintf>
 800f320:	f06f 030f 	mvn.w	r3, #15
 800f324:	e061      	b.n	800f3ea <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f32a:	7b5b      	ldrb	r3, [r3, #13]
 800f32c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f332:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2200      	movs	r2, #0
 800f338:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f340:	2b00      	cmp	r3, #0
 800f342:	d00b      	beq.n	800f35c <tcp_process_refused_data+0x58>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6918      	ldr	r0, [r3, #16]
 800f34e:	2300      	movs	r3, #0
 800f350:	68ba      	ldr	r2, [r7, #8]
 800f352:	6879      	ldr	r1, [r7, #4]
 800f354:	47a0      	blx	r4
 800f356:	4603      	mov	r3, r0
 800f358:	73fb      	strb	r3, [r7, #15]
 800f35a:	e007      	b.n	800f36c <tcp_process_refused_data+0x68>
 800f35c:	2300      	movs	r3, #0
 800f35e:	68ba      	ldr	r2, [r7, #8]
 800f360:	6879      	ldr	r1, [r7, #4]
 800f362:	2000      	movs	r0, #0
 800f364:	f000 f896 	bl	800f494 <tcp_recv_null>
 800f368:	4603      	mov	r3, r0
 800f36a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f36c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d12b      	bne.n	800f3cc <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f374:	7bbb      	ldrb	r3, [r7, #14]
 800f376:	f003 0320 	and.w	r3, r3, #32
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d034      	beq.n	800f3e8 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f382:	f640 3268 	movw	r2, #2920	; 0xb68
 800f386:	4293      	cmp	r3, r2
 800f388:	d005      	beq.n	800f396 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f38e:	3301      	adds	r3, #1
 800f390:	b29a      	uxth	r2, r3
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d00b      	beq.n	800f3b8 <tcp_process_refused_data+0xb4>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6918      	ldr	r0, [r3, #16]
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	6879      	ldr	r1, [r7, #4]
 800f3b0:	47a0      	blx	r4
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	73fb      	strb	r3, [r7, #15]
 800f3b6:	e001      	b.n	800f3bc <tcp_process_refused_data+0xb8>
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f3bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3c0:	f113 0f0d 	cmn.w	r3, #13
 800f3c4:	d110      	bne.n	800f3e8 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800f3c6:	f06f 030c 	mvn.w	r3, #12
 800f3ca:	e00e      	b.n	800f3ea <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800f3cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3d0:	f113 0f0d 	cmn.w	r3, #13
 800f3d4:	d102      	bne.n	800f3dc <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f3d6:	f06f 030c 	mvn.w	r3, #12
 800f3da:	e006      	b.n	800f3ea <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	68ba      	ldr	r2, [r7, #8]
 800f3e0:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800f3e2:	f06f 0304 	mvn.w	r3, #4
 800f3e6:	e000      	b.n	800f3ea <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800f3e8:	2300      	movs	r3, #0
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3714      	adds	r7, #20
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd90      	pop	{r4, r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	0801a540 	.word	0x0801a540
 800f3f8:	0801aa8c 	.word	0x0801aa8c
 800f3fc:	0801a5c0 	.word	0x0801a5c0

0800f400 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f408:	e007      	b.n	800f41a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f000 f809 	bl	800f428 <tcp_seg_free>
    seg = next;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d1f4      	bne.n	800f40a <tcp_segs_free+0xa>
  }
}
 800f420:	bf00      	nop
 800f422:	3710      	adds	r7, #16
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d00c      	beq.n	800f450 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d004      	beq.n	800f448 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	4618      	mov	r0, r3
 800f444:	f7fe fbcc 	bl	800dbe0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f448:	6879      	ldr	r1, [r7, #4]
 800f44a:	2003      	movs	r0, #3
 800f44c:	f7fd fdf0 	bl	800d030 <memp_free>
  }
}
 800f450:	bf00      	nop
 800f452:	3708      	adds	r7, #8
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	460b      	mov	r3, r1
 800f462:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d107      	bne.n	800f47a <tcp_setprio+0x22>
 800f46a:	4b07      	ldr	r3, [pc, #28]	; (800f488 <tcp_setprio+0x30>)
 800f46c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800f470:	4906      	ldr	r1, [pc, #24]	; (800f48c <tcp_setprio+0x34>)
 800f472:	4807      	ldr	r0, [pc, #28]	; (800f490 <tcp_setprio+0x38>)
 800f474:	f006 f82e 	bl	80154d4 <iprintf>
 800f478:	e002      	b.n	800f480 <tcp_setprio+0x28>

  pcb->prio = prio;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	78fa      	ldrb	r2, [r7, #3]
 800f47e:	755a      	strb	r2, [r3, #21]
}
 800f480:	3708      	adds	r7, #8
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	0801a540 	.word	0x0801a540
 800f48c:	0801aab4 	.word	0x0801aab4
 800f490:	0801a5c0 	.word	0x0801a5c0

0800f494 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b084      	sub	sp, #16
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	607a      	str	r2, [r7, #4]
 800f4a0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d109      	bne.n	800f4bc <tcp_recv_null+0x28>
 800f4a8:	4b12      	ldr	r3, [pc, #72]	; (800f4f4 <tcp_recv_null+0x60>)
 800f4aa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f4ae:	4912      	ldr	r1, [pc, #72]	; (800f4f8 <tcp_recv_null+0x64>)
 800f4b0:	4812      	ldr	r0, [pc, #72]	; (800f4fc <tcp_recv_null+0x68>)
 800f4b2:	f006 f80f 	bl	80154d4 <iprintf>
 800f4b6:	f06f 030f 	mvn.w	r3, #15
 800f4ba:	e016      	b.n	800f4ea <tcp_recv_null+0x56>

  if (p != NULL) {
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d009      	beq.n	800f4d6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	891b      	ldrh	r3, [r3, #8]
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	68b8      	ldr	r0, [r7, #8]
 800f4ca:	f7ff faf7 	bl	800eabc <tcp_recved>
    pbuf_free(p);
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7fe fb86 	bl	800dbe0 <pbuf_free>
 800f4d4:	e008      	b.n	800f4e8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f4d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d104      	bne.n	800f4e8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f4de:	68b8      	ldr	r0, [r7, #8]
 800f4e0:	f7ff f832 	bl	800e548 <tcp_close>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	e000      	b.n	800f4ea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f4e8:	2300      	movs	r3, #0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3710      	adds	r7, #16
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	0801a540 	.word	0x0801a540
 800f4f8:	0801aad0 	.word	0x0801aad0
 800f4fc:	0801a5c0 	.word	0x0801a5c0

0800f500 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b086      	sub	sp, #24
 800f504:	af00      	add	r7, sp, #0
 800f506:	4603      	mov	r3, r0
 800f508:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f50a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	db01      	blt.n	800f516 <tcp_kill_prio+0x16>
 800f512:	79fb      	ldrb	r3, [r7, #7]
 800f514:	e000      	b.n	800f518 <tcp_kill_prio+0x18>
 800f516:	237f      	movs	r3, #127	; 0x7f
 800f518:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f51a:	7afb      	ldrb	r3, [r7, #11]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d034      	beq.n	800f58a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f520:	7afb      	ldrb	r3, [r7, #11]
 800f522:	3b01      	subs	r3, #1
 800f524:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f526:	2300      	movs	r3, #0
 800f528:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f52a:	2300      	movs	r3, #0
 800f52c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f52e:	4b19      	ldr	r3, [pc, #100]	; (800f594 <tcp_kill_prio+0x94>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	617b      	str	r3, [r7, #20]
 800f534:	e01f      	b.n	800f576 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	7d5b      	ldrb	r3, [r3, #21]
 800f53a:	7afa      	ldrb	r2, [r7, #11]
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d80c      	bhi.n	800f55a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f544:	7afa      	ldrb	r2, [r7, #11]
 800f546:	429a      	cmp	r2, r3
 800f548:	d112      	bne.n	800f570 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f54a:	4b13      	ldr	r3, [pc, #76]	; (800f598 <tcp_kill_prio+0x98>)
 800f54c:	681a      	ldr	r2, [r3, #0]
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	6a1b      	ldr	r3, [r3, #32]
 800f552:	1ad3      	subs	r3, r2, r3
 800f554:	68fa      	ldr	r2, [r7, #12]
 800f556:	429a      	cmp	r2, r3
 800f558:	d80a      	bhi.n	800f570 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f55a:	4b0f      	ldr	r3, [pc, #60]	; (800f598 <tcp_kill_prio+0x98>)
 800f55c:	681a      	ldr	r2, [r3, #0]
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	6a1b      	ldr	r3, [r3, #32]
 800f562:	1ad3      	subs	r3, r2, r3
 800f564:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	7d5b      	ldrb	r3, [r3, #21]
 800f56e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	617b      	str	r3, [r7, #20]
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d1dc      	bne.n	800f536 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d004      	beq.n	800f58c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f582:	6938      	ldr	r0, [r7, #16]
 800f584:	f7ff f8c0 	bl	800e708 <tcp_abort>
 800f588:	e000      	b.n	800f58c <tcp_kill_prio+0x8c>
    return;
 800f58a:	bf00      	nop
  }
}
 800f58c:	3718      	adds	r7, #24
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop
 800f594:	2000cfc4 	.word	0x2000cfc4
 800f598:	2000cfc8 	.word	0x2000cfc8

0800f59c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b086      	sub	sp, #24
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f5a6:	79fb      	ldrb	r3, [r7, #7]
 800f5a8:	2b08      	cmp	r3, #8
 800f5aa:	d009      	beq.n	800f5c0 <tcp_kill_state+0x24>
 800f5ac:	79fb      	ldrb	r3, [r7, #7]
 800f5ae:	2b09      	cmp	r3, #9
 800f5b0:	d006      	beq.n	800f5c0 <tcp_kill_state+0x24>
 800f5b2:	4b1a      	ldr	r3, [pc, #104]	; (800f61c <tcp_kill_state+0x80>)
 800f5b4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f5b8:	4919      	ldr	r1, [pc, #100]	; (800f620 <tcp_kill_state+0x84>)
 800f5ba:	481a      	ldr	r0, [pc, #104]	; (800f624 <tcp_kill_state+0x88>)
 800f5bc:	f005 ff8a 	bl	80154d4 <iprintf>

  inactivity = 0;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5c8:	4b17      	ldr	r3, [pc, #92]	; (800f628 <tcp_kill_state+0x8c>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	617b      	str	r3, [r7, #20]
 800f5ce:	e017      	b.n	800f600 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	7d1b      	ldrb	r3, [r3, #20]
 800f5d4:	79fa      	ldrb	r2, [r7, #7]
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d10f      	bne.n	800f5fa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f5da:	4b14      	ldr	r3, [pc, #80]	; (800f62c <tcp_kill_state+0x90>)
 800f5dc:	681a      	ldr	r2, [r3, #0]
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	6a1b      	ldr	r3, [r3, #32]
 800f5e2:	1ad3      	subs	r3, r2, r3
 800f5e4:	68fa      	ldr	r2, [r7, #12]
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d807      	bhi.n	800f5fa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f5ea:	4b10      	ldr	r3, [pc, #64]	; (800f62c <tcp_kill_state+0x90>)
 800f5ec:	681a      	ldr	r2, [r3, #0]
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	6a1b      	ldr	r3, [r3, #32]
 800f5f2:	1ad3      	subs	r3, r2, r3
 800f5f4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	68db      	ldr	r3, [r3, #12]
 800f5fe:	617b      	str	r3, [r7, #20]
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d1e4      	bne.n	800f5d0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d003      	beq.n	800f614 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f60c:	2100      	movs	r1, #0
 800f60e:	6938      	ldr	r0, [r7, #16]
 800f610:	f7fe ffc6 	bl	800e5a0 <tcp_abandon>
  }
}
 800f614:	bf00      	nop
 800f616:	3718      	adds	r7, #24
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	0801a540 	.word	0x0801a540
 800f620:	0801aaec 	.word	0x0801aaec
 800f624:	0801a5c0 	.word	0x0801a5c0
 800f628:	2000cfc4 	.word	0x2000cfc4
 800f62c:	2000cfc8 	.word	0x2000cfc8

0800f630 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b084      	sub	sp, #16
 800f634:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f636:	2300      	movs	r3, #0
 800f638:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f63a:	2300      	movs	r3, #0
 800f63c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f63e:	4b12      	ldr	r3, [pc, #72]	; (800f688 <tcp_kill_timewait+0x58>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	60fb      	str	r3, [r7, #12]
 800f644:	e012      	b.n	800f66c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f646:	4b11      	ldr	r3, [pc, #68]	; (800f68c <tcp_kill_timewait+0x5c>)
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	6a1b      	ldr	r3, [r3, #32]
 800f64e:	1ad3      	subs	r3, r2, r3
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	429a      	cmp	r2, r3
 800f654:	d807      	bhi.n	800f666 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f656:	4b0d      	ldr	r3, [pc, #52]	; (800f68c <tcp_kill_timewait+0x5c>)
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	6a1b      	ldr	r3, [r3, #32]
 800f65e:	1ad3      	subs	r3, r2, r3
 800f660:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	68db      	ldr	r3, [r3, #12]
 800f66a:	60fb      	str	r3, [r7, #12]
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d1e9      	bne.n	800f646 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d002      	beq.n	800f67e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f678:	68b8      	ldr	r0, [r7, #8]
 800f67a:	f7ff f845 	bl	800e708 <tcp_abort>
  }
}
 800f67e:	bf00      	nop
 800f680:	3710      	adds	r7, #16
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	2000cfd4 	.word	0x2000cfd4
 800f68c:	2000cfc8 	.word	0x2000cfc8

0800f690 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f696:	4b10      	ldr	r3, [pc, #64]	; (800f6d8 <tcp_handle_closepend+0x48>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f69c:	e014      	b.n	800f6c8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	8b5b      	ldrh	r3, [r3, #26]
 800f6a8:	f003 0308 	and.w	r3, r3, #8
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d009      	beq.n	800f6c4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	8b5b      	ldrh	r3, [r3, #26]
 800f6b4:	f023 0308 	bic.w	r3, r3, #8
 800f6b8:	b29a      	uxth	r2, r3
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f7fe fedc 	bl	800e47c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d1e7      	bne.n	800f69e <tcp_handle_closepend+0xe>
  }
}
 800f6ce:	bf00      	nop
 800f6d0:	3708      	adds	r7, #8
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
 800f6d6:	bf00      	nop
 800f6d8:	2000cfc4 	.word	0x2000cfc4

0800f6dc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b084      	sub	sp, #16
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f6e6:	2001      	movs	r0, #1
 800f6e8:	f7fd fc50 	bl	800cf8c <memp_malloc>
 800f6ec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d126      	bne.n	800f742 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f6f4:	f7ff ffcc 	bl	800f690 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f6f8:	f7ff ff9a 	bl	800f630 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f6fc:	2001      	movs	r0, #1
 800f6fe:	f7fd fc45 	bl	800cf8c <memp_malloc>
 800f702:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d11b      	bne.n	800f742 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f70a:	2009      	movs	r0, #9
 800f70c:	f7ff ff46 	bl	800f59c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f710:	2001      	movs	r0, #1
 800f712:	f7fd fc3b 	bl	800cf8c <memp_malloc>
 800f716:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d111      	bne.n	800f742 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f71e:	2008      	movs	r0, #8
 800f720:	f7ff ff3c 	bl	800f59c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f724:	2001      	movs	r0, #1
 800f726:	f7fd fc31 	bl	800cf8c <memp_malloc>
 800f72a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d107      	bne.n	800f742 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f732:	79fb      	ldrb	r3, [r7, #7]
 800f734:	4618      	mov	r0, r3
 800f736:	f7ff fee3 	bl	800f500 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f73a:	2001      	movs	r0, #1
 800f73c:	f7fd fc26 	bl	800cf8c <memp_malloc>
 800f740:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d03f      	beq.n	800f7c8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f748:	2298      	movs	r2, #152	; 0x98
 800f74a:	2100      	movs	r1, #0
 800f74c:	68f8      	ldr	r0, [r7, #12]
 800f74e:	f005 f9b4 	bl	8014aba <memset>
    pcb->prio = prio;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	79fa      	ldrb	r2, [r7, #7]
 800f756:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800f75e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f640 3268 	movw	r2, #2920	; 0xb68
 800f768:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	22ff      	movs	r2, #255	; 0xff
 800f776:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f77e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2206      	movs	r2, #6
 800f784:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2206      	movs	r2, #6
 800f78c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f794:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	2201      	movs	r2, #1
 800f79a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f79e:	4b0d      	ldr	r3, [pc, #52]	; (800f7d4 <tcp_alloc+0xf8>)
 800f7a0:	681a      	ldr	r2, [r3, #0]
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f7a6:	4b0c      	ldr	r3, [pc, #48]	; (800f7d8 <tcp_alloc+0xfc>)
 800f7a8:	781a      	ldrb	r2, [r3, #0]
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800f7b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	4a08      	ldr	r2, [pc, #32]	; (800f7dc <tcp_alloc+0x100>)
 800f7bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	4a07      	ldr	r2, [pc, #28]	; (800f7e0 <tcp_alloc+0x104>)
 800f7c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3710      	adds	r7, #16
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	2000cfc8 	.word	0x2000cfc8
 800f7d8:	200068ca 	.word	0x200068ca
 800f7dc:	0800f495 	.word	0x0800f495
 800f7e0:	006ddd00 	.word	0x006ddd00

0800f7e4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800f7e8:	2040      	movs	r0, #64	; 0x40
 800f7ea:	f7ff ff77 	bl	800f6dc <tcp_alloc>
 800f7ee:	4603      	mov	r3, r0
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d002      	beq.n	800f80a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	683a      	ldr	r2, [r7, #0]
 800f808:	611a      	str	r2, [r3, #16]
  }
}
 800f80a:	bf00      	nop
 800f80c:	370c      	adds	r7, #12
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr
	...

0800f818 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d00e      	beq.n	800f846 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	7d1b      	ldrb	r3, [r3, #20]
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d106      	bne.n	800f83e <tcp_recv+0x26>
 800f830:	4b07      	ldr	r3, [pc, #28]	; (800f850 <tcp_recv+0x38>)
 800f832:	f240 72df 	movw	r2, #2015	; 0x7df
 800f836:	4907      	ldr	r1, [pc, #28]	; (800f854 <tcp_recv+0x3c>)
 800f838:	4807      	ldr	r0, [pc, #28]	; (800f858 <tcp_recv+0x40>)
 800f83a:	f005 fe4b 	bl	80154d4 <iprintf>
    pcb->recv = recv;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	683a      	ldr	r2, [r7, #0]
 800f842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f846:	bf00      	nop
 800f848:	3708      	adds	r7, #8
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop
 800f850:	0801a540 	.word	0x0801a540
 800f854:	0801aafc 	.word	0x0801aafc
 800f858:	0801a5c0 	.word	0x0801a5c0

0800f85c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d00d      	beq.n	800f888 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	7d1b      	ldrb	r3, [r3, #20]
 800f870:	2b01      	cmp	r3, #1
 800f872:	d106      	bne.n	800f882 <tcp_sent+0x26>
 800f874:	4b06      	ldr	r3, [pc, #24]	; (800f890 <tcp_sent+0x34>)
 800f876:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f87a:	4906      	ldr	r1, [pc, #24]	; (800f894 <tcp_sent+0x38>)
 800f87c:	4806      	ldr	r0, [pc, #24]	; (800f898 <tcp_sent+0x3c>)
 800f87e:	f005 fe29 	bl	80154d4 <iprintf>
    pcb->sent = sent;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	683a      	ldr	r2, [r7, #0]
 800f886:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800f888:	bf00      	nop
 800f88a:	3708      	adds	r7, #8
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}
 800f890:	0801a540 	.word	0x0801a540
 800f894:	0801ab24 	.word	0x0801ab24
 800f898:	0801a5c0 	.word	0x0801a5c0

0800f89c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d00e      	beq.n	800f8ca <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	7d1b      	ldrb	r3, [r3, #20]
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d106      	bne.n	800f8c2 <tcp_err+0x26>
 800f8b4:	4b07      	ldr	r3, [pc, #28]	; (800f8d4 <tcp_err+0x38>)
 800f8b6:	f640 020d 	movw	r2, #2061	; 0x80d
 800f8ba:	4907      	ldr	r1, [pc, #28]	; (800f8d8 <tcp_err+0x3c>)
 800f8bc:	4807      	ldr	r0, [pc, #28]	; (800f8dc <tcp_err+0x40>)
 800f8be:	f005 fe09 	bl	80154d4 <iprintf>
    pcb->errf = err;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	683a      	ldr	r2, [r7, #0]
 800f8c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800f8ca:	bf00      	nop
 800f8cc:	3708      	adds	r7, #8
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	0801a540 	.word	0x0801a540
 800f8d8:	0801ab4c 	.word	0x0801ab4c
 800f8dc:	0801a5c0 	.word	0x0801a5c0

0800f8e0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b085      	sub	sp, #20
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d008      	beq.n	800f902 <tcp_accept+0x22>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	7d1b      	ldrb	r3, [r3, #20]
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	d104      	bne.n	800f902 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	683a      	ldr	r2, [r7, #0]
 800f900:	619a      	str	r2, [r3, #24]
  }
}
 800f902:	bf00      	nop
 800f904:	3714      	adds	r7, #20
 800f906:	46bd      	mov	sp, r7
 800f908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90c:	4770      	bx	lr
	...

0800f910 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	4613      	mov	r3, r2
 800f91c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d107      	bne.n	800f934 <tcp_poll+0x24>
 800f924:	4b0e      	ldr	r3, [pc, #56]	; (800f960 <tcp_poll+0x50>)
 800f926:	f640 023d 	movw	r2, #2109	; 0x83d
 800f92a:	490e      	ldr	r1, [pc, #56]	; (800f964 <tcp_poll+0x54>)
 800f92c:	480e      	ldr	r0, [pc, #56]	; (800f968 <tcp_poll+0x58>)
 800f92e:	f005 fdd1 	bl	80154d4 <iprintf>
 800f932:	e011      	b.n	800f958 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	7d1b      	ldrb	r3, [r3, #20]
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d106      	bne.n	800f94a <tcp_poll+0x3a>
 800f93c:	4b08      	ldr	r3, [pc, #32]	; (800f960 <tcp_poll+0x50>)
 800f93e:	f640 023e 	movw	r2, #2110	; 0x83e
 800f942:	490a      	ldr	r1, [pc, #40]	; (800f96c <tcp_poll+0x5c>)
 800f944:	4808      	ldr	r0, [pc, #32]	; (800f968 <tcp_poll+0x58>)
 800f946:	f005 fdc5 	bl	80154d4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	68ba      	ldr	r2, [r7, #8]
 800f94e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	79fa      	ldrb	r2, [r7, #7]
 800f956:	775a      	strb	r2, [r3, #29]
}
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop
 800f960:	0801a540 	.word	0x0801a540
 800f964:	0801ab74 	.word	0x0801ab74
 800f968:	0801a5c0 	.word	0x0801a5c0
 800f96c:	0801ab8c 	.word	0x0801ab8c

0800f970 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d107      	bne.n	800f98e <tcp_pcb_purge+0x1e>
 800f97e:	4b1e      	ldr	r3, [pc, #120]	; (800f9f8 <tcp_pcb_purge+0x88>)
 800f980:	f640 0251 	movw	r2, #2129	; 0x851
 800f984:	491d      	ldr	r1, [pc, #116]	; (800f9fc <tcp_pcb_purge+0x8c>)
 800f986:	481e      	ldr	r0, [pc, #120]	; (800fa00 <tcp_pcb_purge+0x90>)
 800f988:	f005 fda4 	bl	80154d4 <iprintf>
 800f98c:	e030      	b.n	800f9f0 <tcp_pcb_purge+0x80>

  if (pcb->state != CLOSED &&
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	7d1b      	ldrb	r3, [r3, #20]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d02c      	beq.n	800f9f0 <tcp_pcb_purge+0x80>
      pcb->state != TIME_WAIT &&
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f99a:	2b0a      	cmp	r3, #10
 800f99c:	d028      	beq.n	800f9f0 <tcp_pcb_purge+0x80>
      pcb->state != LISTEN) {
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d024      	beq.n	800f9f0 <tcp_pcb_purge+0x80>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d007      	beq.n	800f9be <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7fe f914 	bl	800dbe0 <pbuf_free>
      pcb->refused_data = NULL;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9c4:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7ff fd18 	bl	800f400 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f7ff fd13 	bl	800f400 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	66da      	str	r2, [r3, #108]	; 0x6c
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f9f0:	3708      	adds	r7, #8
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}
 800f9f6:	bf00      	nop
 800f9f8:	0801a540 	.word	0x0801a540
 800f9fc:	0801abac 	.word	0x0801abac
 800fa00:	0801a5c0 	.word	0x0801a5c0

0800fa04 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d106      	bne.n	800fa22 <tcp_pcb_remove+0x1e>
 800fa14:	4b38      	ldr	r3, [pc, #224]	; (800faf8 <tcp_pcb_remove+0xf4>)
 800fa16:	f640 0283 	movw	r2, #2179	; 0x883
 800fa1a:	4938      	ldr	r1, [pc, #224]	; (800fafc <tcp_pcb_remove+0xf8>)
 800fa1c:	4838      	ldr	r0, [pc, #224]	; (800fb00 <tcp_pcb_remove+0xfc>)
 800fa1e:	f005 fd59 	bl	80154d4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d106      	bne.n	800fa36 <tcp_pcb_remove+0x32>
 800fa28:	4b33      	ldr	r3, [pc, #204]	; (800faf8 <tcp_pcb_remove+0xf4>)
 800fa2a:	f640 0284 	movw	r2, #2180	; 0x884
 800fa2e:	4935      	ldr	r1, [pc, #212]	; (800fb04 <tcp_pcb_remove+0x100>)
 800fa30:	4833      	ldr	r0, [pc, #204]	; (800fb00 <tcp_pcb_remove+0xfc>)
 800fa32:	f005 fd4f 	bl	80154d4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	683a      	ldr	r2, [r7, #0]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d105      	bne.n	800fa4c <tcp_pcb_remove+0x48>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	68da      	ldr	r2, [r3, #12]
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	601a      	str	r2, [r3, #0]
 800fa4a:	e013      	b.n	800fa74 <tcp_pcb_remove+0x70>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	60fb      	str	r3, [r7, #12]
 800fa52:	e00c      	b.n	800fa6e <tcp_pcb_remove+0x6a>
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	68db      	ldr	r3, [r3, #12]
 800fa58:	683a      	ldr	r2, [r7, #0]
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d104      	bne.n	800fa68 <tcp_pcb_remove+0x64>
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	68da      	ldr	r2, [r3, #12]
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	60da      	str	r2, [r3, #12]
 800fa66:	e005      	b.n	800fa74 <tcp_pcb_remove+0x70>
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	60fb      	str	r3, [r7, #12]
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d1ef      	bne.n	800fa54 <tcp_pcb_remove+0x50>
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	2200      	movs	r2, #0
 800fa78:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fa7a:	6838      	ldr	r0, [r7, #0]
 800fa7c:	f7ff ff78 	bl	800f970 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	7d1b      	ldrb	r3, [r3, #20]
 800fa84:	2b0a      	cmp	r3, #10
 800fa86:	d013      	beq.n	800fab0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d00f      	beq.n	800fab0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	8b5b      	ldrh	r3, [r3, #26]
 800fa94:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d009      	beq.n	800fab0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	8b5b      	ldrh	r3, [r3, #26]
 800faa0:	f043 0302 	orr.w	r3, r3, #2
 800faa4:	b29a      	uxth	r2, r3
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800faaa:	6838      	ldr	r0, [r7, #0]
 800faac:	f002 ffe8 	bl	8012a80 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	7d1b      	ldrb	r3, [r3, #20]
 800fab4:	2b01      	cmp	r3, #1
 800fab6:	d015      	beq.n	800fae4 <tcp_pcb_remove+0xe0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d006      	beq.n	800face <tcp_pcb_remove+0xca>
 800fac0:	4b0d      	ldr	r3, [pc, #52]	; (800faf8 <tcp_pcb_remove+0xf4>)
 800fac2:	f640 0293 	movw	r2, #2195	; 0x893
 800fac6:	4910      	ldr	r1, [pc, #64]	; (800fb08 <tcp_pcb_remove+0x104>)
 800fac8:	480d      	ldr	r0, [pc, #52]	; (800fb00 <tcp_pcb_remove+0xfc>)
 800faca:	f005 fd03 	bl	80154d4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d006      	beq.n	800fae4 <tcp_pcb_remove+0xe0>
 800fad6:	4b08      	ldr	r3, [pc, #32]	; (800faf8 <tcp_pcb_remove+0xf4>)
 800fad8:	f640 0294 	movw	r2, #2196	; 0x894
 800fadc:	490b      	ldr	r1, [pc, #44]	; (800fb0c <tcp_pcb_remove+0x108>)
 800fade:	4808      	ldr	r0, [pc, #32]	; (800fb00 <tcp_pcb_remove+0xfc>)
 800fae0:	f005 fcf8 	bl	80154d4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	2200      	movs	r2, #0
 800fae8:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	2200      	movs	r2, #0
 800faee:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800faf0:	bf00      	nop
 800faf2:	3710      	adds	r7, #16
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	0801a540 	.word	0x0801a540
 800fafc:	0801abc8 	.word	0x0801abc8
 800fb00:	0801a5c0 	.word	0x0801a5c0
 800fb04:	0801abe4 	.word	0x0801abe4
 800fb08:	0801ac04 	.word	0x0801ac04
 800fb0c:	0801ac1c 	.word	0x0801ac1c

0800fb10 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d106      	bne.n	800fb2c <tcp_next_iss+0x1c>
 800fb1e:	4b0a      	ldr	r3, [pc, #40]	; (800fb48 <tcp_next_iss+0x38>)
 800fb20:	f640 02af 	movw	r2, #2223	; 0x8af
 800fb24:	4909      	ldr	r1, [pc, #36]	; (800fb4c <tcp_next_iss+0x3c>)
 800fb26:	480a      	ldr	r0, [pc, #40]	; (800fb50 <tcp_next_iss+0x40>)
 800fb28:	f005 fcd4 	bl	80154d4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fb2c:	4b09      	ldr	r3, [pc, #36]	; (800fb54 <tcp_next_iss+0x44>)
 800fb2e:	681a      	ldr	r2, [r3, #0]
 800fb30:	4b09      	ldr	r3, [pc, #36]	; (800fb58 <tcp_next_iss+0x48>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4413      	add	r3, r2
 800fb36:	4a07      	ldr	r2, [pc, #28]	; (800fb54 <tcp_next_iss+0x44>)
 800fb38:	6013      	str	r3, [r2, #0]
  return iss;
 800fb3a:	4b06      	ldr	r3, [pc, #24]	; (800fb54 <tcp_next_iss+0x44>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3708      	adds	r7, #8
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	0801a540 	.word	0x0801a540
 800fb4c:	0801ac38 	.word	0x0801ac38
 800fb50:	0801a5c0 	.word	0x0801a5c0
 800fb54:	20000034 	.word	0x20000034
 800fb58:	2000cfc8 	.word	0x2000cfc8

0800fb5c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b086      	sub	sp, #24
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	4603      	mov	r3, r0
 800fb64:	60b9      	str	r1, [r7, #8]
 800fb66:	607a      	str	r2, [r7, #4]
 800fb68:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d106      	bne.n	800fb7e <tcp_eff_send_mss_netif+0x22>
 800fb70:	4b14      	ldr	r3, [pc, #80]	; (800fbc4 <tcp_eff_send_mss_netif+0x68>)
 800fb72:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fb76:	4914      	ldr	r1, [pc, #80]	; (800fbc8 <tcp_eff_send_mss_netif+0x6c>)
 800fb78:	4814      	ldr	r0, [pc, #80]	; (800fbcc <tcp_eff_send_mss_netif+0x70>)
 800fb7a:	f005 fcab 	bl	80154d4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d101      	bne.n	800fb88 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fb84:	89fb      	ldrh	r3, [r7, #14]
 800fb86:	e019      	b.n	800fbbc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb8c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fb8e:	8afb      	ldrh	r3, [r7, #22]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d012      	beq.n	800fbba <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fb94:	2328      	movs	r3, #40	; 0x28
 800fb96:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fb98:	8afa      	ldrh	r2, [r7, #22]
 800fb9a:	8abb      	ldrh	r3, [r7, #20]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d904      	bls.n	800fbaa <tcp_eff_send_mss_netif+0x4e>
 800fba0:	8afa      	ldrh	r2, [r7, #22]
 800fba2:	8abb      	ldrh	r3, [r7, #20]
 800fba4:	1ad3      	subs	r3, r2, r3
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	e000      	b.n	800fbac <tcp_eff_send_mss_netif+0x50>
 800fbaa:	2300      	movs	r3, #0
 800fbac:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fbae:	8a7a      	ldrh	r2, [r7, #18]
 800fbb0:	89fb      	ldrh	r3, [r7, #14]
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	bf28      	it	cs
 800fbb6:	4613      	movcs	r3, r2
 800fbb8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fbba:	89fb      	ldrh	r3, [r7, #14]
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3718      	adds	r7, #24
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	0801a540 	.word	0x0801a540
 800fbc8:	0801ac54 	.word	0x0801ac54
 800fbcc:	0801a5c0 	.word	0x0801a5c0

0800fbd0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d119      	bne.n	800fc18 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fbe4:	4b10      	ldr	r3, [pc, #64]	; (800fc28 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fbe6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800fbea:	4910      	ldr	r1, [pc, #64]	; (800fc2c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fbec:	4810      	ldr	r0, [pc, #64]	; (800fc30 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fbee:	f005 fc71 	bl	80154d4 <iprintf>

  while (pcb != NULL) {
 800fbf2:	e011      	b.n	800fc18 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	681a      	ldr	r2, [r3, #0]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d108      	bne.n	800fc12 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fc06:	68f8      	ldr	r0, [r7, #12]
 800fc08:	f7fe fd7e 	bl	800e708 <tcp_abort>
      pcb = next;
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	60fb      	str	r3, [r7, #12]
 800fc10:	e002      	b.n	800fc18 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	68db      	ldr	r3, [r3, #12]
 800fc16:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d1ea      	bne.n	800fbf4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fc1e:	bf00      	nop
 800fc20:	3710      	adds	r7, #16
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	0801a540 	.word	0x0801a540
 800fc2c:	0801ac7c 	.word	0x0801ac7c
 800fc30:	0801a5c0 	.word	0x0801a5c0

0800fc34 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b084      	sub	sp, #16
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d02a      	beq.n	800fc9a <tcp_netif_ip_addr_changed+0x66>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d026      	beq.n	800fc9a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fc4c:	4b15      	ldr	r3, [pc, #84]	; (800fca4 <tcp_netif_ip_addr_changed+0x70>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	4619      	mov	r1, r3
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f7ff ffbc 	bl	800fbd0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fc58:	4b13      	ldr	r3, [pc, #76]	; (800fca8 <tcp_netif_ip_addr_changed+0x74>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f7ff ffb6 	bl	800fbd0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d017      	beq.n	800fc9a <tcp_netif_ip_addr_changed+0x66>
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d013      	beq.n	800fc9a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fc72:	4b0e      	ldr	r3, [pc, #56]	; (800fcac <tcp_netif_ip_addr_changed+0x78>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	60fb      	str	r3, [r7, #12]
 800fc78:	e00c      	b.n	800fc94 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681a      	ldr	r2, [r3, #0]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d103      	bne.n	800fc8e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	681a      	ldr	r2, [r3, #0]
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	68db      	ldr	r3, [r3, #12]
 800fc92:	60fb      	str	r3, [r7, #12]
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d1ef      	bne.n	800fc7a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fc9a:	bf00      	nop
 800fc9c:	3710      	adds	r7, #16
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	2000cfc4 	.word	0x2000cfc4
 800fca8:	2000cfd0 	.word	0x2000cfd0
 800fcac:	2000cfcc 	.word	0x2000cfcc

0800fcb0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fcb0:	b590      	push	{r4, r7, lr}
 800fcb2:	b08d      	sub	sp, #52	; 0x34
 800fcb4:	af04      	add	r7, sp, #16
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d105      	bne.n	800fccc <tcp_input+0x1c>
 800fcc0:	4b9b      	ldr	r3, [pc, #620]	; (800ff30 <tcp_input+0x280>)
 800fcc2:	2283      	movs	r2, #131	; 0x83
 800fcc4:	499b      	ldr	r1, [pc, #620]	; (800ff34 <tcp_input+0x284>)
 800fcc6:	489c      	ldr	r0, [pc, #624]	; (800ff38 <tcp_input+0x288>)
 800fcc8:	f005 fc04 	bl	80154d4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	4a9a      	ldr	r2, [pc, #616]	; (800ff3c <tcp_input+0x28c>)
 800fcd2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	895b      	ldrh	r3, [r3, #10]
 800fcd8:	2b13      	cmp	r3, #19
 800fcda:	f240 83c3 	bls.w	8010464 <tcp_input+0x7b4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fcde:	4b98      	ldr	r3, [pc, #608]	; (800ff40 <tcp_input+0x290>)
 800fce0:	695a      	ldr	r2, [r3, #20]
 800fce2:	4b97      	ldr	r3, [pc, #604]	; (800ff40 <tcp_input+0x290>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	4619      	mov	r1, r3
 800fce8:	4610      	mov	r0, r2
 800fcea:	f7fb fd79 	bl	800b7e0 <ip4_addr_isbroadcast_u32>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	f040 83b9 	bne.w	8010468 <tcp_input+0x7b8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fcf6:	4b92      	ldr	r3, [pc, #584]	; (800ff40 <tcp_input+0x290>)
 800fcf8:	695b      	ldr	r3, [r3, #20]
 800fcfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fcfe:	2be0      	cmp	r3, #224	; 0xe0
 800fd00:	f000 83b2 	beq.w	8010468 <tcp_input+0x7b8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fd04:	4b8d      	ldr	r3, [pc, #564]	; (800ff3c <tcp_input+0x28c>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	899b      	ldrh	r3, [r3, #12]
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f7fc fbdd 	bl	800c4cc <lwip_htons>
 800fd12:	4603      	mov	r3, r0
 800fd14:	0b1b      	lsrs	r3, r3, #12
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	b2db      	uxtb	r3, r3
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fd1e:	7cbb      	ldrb	r3, [r7, #18]
 800fd20:	2b13      	cmp	r3, #19
 800fd22:	f240 83a1 	bls.w	8010468 <tcp_input+0x7b8>
 800fd26:	7cbb      	ldrb	r3, [r7, #18]
 800fd28:	b29a      	uxth	r2, r3
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	891b      	ldrh	r3, [r3, #8]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	f200 839a 	bhi.w	8010468 <tcp_input+0x7b8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fd34:	7cbb      	ldrb	r3, [r7, #18]
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	3b14      	subs	r3, #20
 800fd3a:	b29a      	uxth	r2, r3
 800fd3c:	4b81      	ldr	r3, [pc, #516]	; (800ff44 <tcp_input+0x294>)
 800fd3e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fd40:	4b81      	ldr	r3, [pc, #516]	; (800ff48 <tcp_input+0x298>)
 800fd42:	2200      	movs	r2, #0
 800fd44:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	895a      	ldrh	r2, [r3, #10]
 800fd4a:	7cbb      	ldrb	r3, [r7, #18]
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d309      	bcc.n	800fd66 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fd52:	4b7c      	ldr	r3, [pc, #496]	; (800ff44 <tcp_input+0x294>)
 800fd54:	881a      	ldrh	r2, [r3, #0]
 800fd56:	4b7d      	ldr	r3, [pc, #500]	; (800ff4c <tcp_input+0x29c>)
 800fd58:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fd5a:	7cbb      	ldrb	r3, [r7, #18]
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f7fd feb8 	bl	800dad4 <pbuf_remove_header>
 800fd64:	e04e      	b.n	800fe04 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d105      	bne.n	800fd7a <tcp_input+0xca>
 800fd6e:	4b70      	ldr	r3, [pc, #448]	; (800ff30 <tcp_input+0x280>)
 800fd70:	22c2      	movs	r2, #194	; 0xc2
 800fd72:	4977      	ldr	r1, [pc, #476]	; (800ff50 <tcp_input+0x2a0>)
 800fd74:	4870      	ldr	r0, [pc, #448]	; (800ff38 <tcp_input+0x288>)
 800fd76:	f005 fbad 	bl	80154d4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fd7a:	2114      	movs	r1, #20
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f7fd fea9 	bl	800dad4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	895a      	ldrh	r2, [r3, #10]
 800fd86:	4b71      	ldr	r3, [pc, #452]	; (800ff4c <tcp_input+0x29c>)
 800fd88:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fd8a:	4b6e      	ldr	r3, [pc, #440]	; (800ff44 <tcp_input+0x294>)
 800fd8c:	881a      	ldrh	r2, [r3, #0]
 800fd8e:	4b6f      	ldr	r3, [pc, #444]	; (800ff4c <tcp_input+0x29c>)
 800fd90:	881b      	ldrh	r3, [r3, #0]
 800fd92:	1ad3      	subs	r3, r2, r3
 800fd94:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fd96:	4b6d      	ldr	r3, [pc, #436]	; (800ff4c <tcp_input+0x29c>)
 800fd98:	881b      	ldrh	r3, [r3, #0]
 800fd9a:	4619      	mov	r1, r3
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f7fd fe99 	bl	800dad4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	895b      	ldrh	r3, [r3, #10]
 800fda8:	8a3a      	ldrh	r2, [r7, #16]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	f200 835e 	bhi.w	801046c <tcp_input+0x7bc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	4a64      	ldr	r2, [pc, #400]	; (800ff48 <tcp_input+0x298>)
 800fdb8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	8a3a      	ldrh	r2, [r7, #16]
 800fdc0:	4611      	mov	r1, r2
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7fd fe86 	bl	800dad4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	891a      	ldrh	r2, [r3, #8]
 800fdcc:	8a3b      	ldrh	r3, [r7, #16]
 800fdce:	1ad3      	subs	r3, r2, r3
 800fdd0:	b29a      	uxth	r2, r3
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	895b      	ldrh	r3, [r3, #10]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d005      	beq.n	800fdea <tcp_input+0x13a>
 800fdde:	4b54      	ldr	r3, [pc, #336]	; (800ff30 <tcp_input+0x280>)
 800fde0:	22df      	movs	r2, #223	; 0xdf
 800fde2:	495c      	ldr	r1, [pc, #368]	; (800ff54 <tcp_input+0x2a4>)
 800fde4:	4854      	ldr	r0, [pc, #336]	; (800ff38 <tcp_input+0x288>)
 800fde6:	f005 fb75 	bl	80154d4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	891a      	ldrh	r2, [r3, #8]
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	891b      	ldrh	r3, [r3, #8]
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d005      	beq.n	800fe04 <tcp_input+0x154>
 800fdf8:	4b4d      	ldr	r3, [pc, #308]	; (800ff30 <tcp_input+0x280>)
 800fdfa:	22e0      	movs	r2, #224	; 0xe0
 800fdfc:	4956      	ldr	r1, [pc, #344]	; (800ff58 <tcp_input+0x2a8>)
 800fdfe:	484e      	ldr	r0, [pc, #312]	; (800ff38 <tcp_input+0x288>)
 800fe00:	f005 fb68 	bl	80154d4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fe04:	4b4d      	ldr	r3, [pc, #308]	; (800ff3c <tcp_input+0x28c>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	881b      	ldrh	r3, [r3, #0]
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	4b4b      	ldr	r3, [pc, #300]	; (800ff3c <tcp_input+0x28c>)
 800fe0e:	681c      	ldr	r4, [r3, #0]
 800fe10:	4610      	mov	r0, r2
 800fe12:	f7fc fb5b 	bl	800c4cc <lwip_htons>
 800fe16:	4603      	mov	r3, r0
 800fe18:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fe1a:	4b48      	ldr	r3, [pc, #288]	; (800ff3c <tcp_input+0x28c>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	885b      	ldrh	r3, [r3, #2]
 800fe20:	b29a      	uxth	r2, r3
 800fe22:	4b46      	ldr	r3, [pc, #280]	; (800ff3c <tcp_input+0x28c>)
 800fe24:	681c      	ldr	r4, [r3, #0]
 800fe26:	4610      	mov	r0, r2
 800fe28:	f7fc fb50 	bl	800c4cc <lwip_htons>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fe30:	4b42      	ldr	r3, [pc, #264]	; (800ff3c <tcp_input+0x28c>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	685a      	ldr	r2, [r3, #4]
 800fe36:	4b41      	ldr	r3, [pc, #260]	; (800ff3c <tcp_input+0x28c>)
 800fe38:	681c      	ldr	r4, [r3, #0]
 800fe3a:	4610      	mov	r0, r2
 800fe3c:	f7fc fb5b 	bl	800c4f6 <lwip_htonl>
 800fe40:	4603      	mov	r3, r0
 800fe42:	6063      	str	r3, [r4, #4]
 800fe44:	6863      	ldr	r3, [r4, #4]
 800fe46:	4a45      	ldr	r2, [pc, #276]	; (800ff5c <tcp_input+0x2ac>)
 800fe48:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fe4a:	4b3c      	ldr	r3, [pc, #240]	; (800ff3c <tcp_input+0x28c>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	689a      	ldr	r2, [r3, #8]
 800fe50:	4b3a      	ldr	r3, [pc, #232]	; (800ff3c <tcp_input+0x28c>)
 800fe52:	681c      	ldr	r4, [r3, #0]
 800fe54:	4610      	mov	r0, r2
 800fe56:	f7fc fb4e 	bl	800c4f6 <lwip_htonl>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	60a3      	str	r3, [r4, #8]
 800fe5e:	68a3      	ldr	r3, [r4, #8]
 800fe60:	4a3f      	ldr	r2, [pc, #252]	; (800ff60 <tcp_input+0x2b0>)
 800fe62:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fe64:	4b35      	ldr	r3, [pc, #212]	; (800ff3c <tcp_input+0x28c>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	89db      	ldrh	r3, [r3, #14]
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	4b33      	ldr	r3, [pc, #204]	; (800ff3c <tcp_input+0x28c>)
 800fe6e:	681c      	ldr	r4, [r3, #0]
 800fe70:	4610      	mov	r0, r2
 800fe72:	f7fc fb2b 	bl	800c4cc <lwip_htons>
 800fe76:	4603      	mov	r3, r0
 800fe78:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fe7a:	4b30      	ldr	r3, [pc, #192]	; (800ff3c <tcp_input+0x28c>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	899b      	ldrh	r3, [r3, #12]
 800fe80:	b29b      	uxth	r3, r3
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7fc fb22 	bl	800c4cc <lwip_htons>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	b2db      	uxtb	r3, r3
 800fe8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe90:	b2da      	uxtb	r2, r3
 800fe92:	4b34      	ldr	r3, [pc, #208]	; (800ff64 <tcp_input+0x2b4>)
 800fe94:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	891a      	ldrh	r2, [r3, #8]
 800fe9a:	4b33      	ldr	r3, [pc, #204]	; (800ff68 <tcp_input+0x2b8>)
 800fe9c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fe9e:	4b31      	ldr	r3, [pc, #196]	; (800ff64 <tcp_input+0x2b4>)
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	f003 0303 	and.w	r3, r3, #3
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d00c      	beq.n	800fec4 <tcp_input+0x214>
    tcplen++;
 800feaa:	4b2f      	ldr	r3, [pc, #188]	; (800ff68 <tcp_input+0x2b8>)
 800feac:	881b      	ldrh	r3, [r3, #0]
 800feae:	3301      	adds	r3, #1
 800feb0:	b29a      	uxth	r2, r3
 800feb2:	4b2d      	ldr	r3, [pc, #180]	; (800ff68 <tcp_input+0x2b8>)
 800feb4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	891a      	ldrh	r2, [r3, #8]
 800feba:	4b2b      	ldr	r3, [pc, #172]	; (800ff68 <tcp_input+0x2b8>)
 800febc:	881b      	ldrh	r3, [r3, #0]
 800febe:	429a      	cmp	r2, r3
 800fec0:	f200 82d6 	bhi.w	8010470 <tcp_input+0x7c0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fec4:	2300      	movs	r3, #0
 800fec6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fec8:	4b28      	ldr	r3, [pc, #160]	; (800ff6c <tcp_input+0x2bc>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	61fb      	str	r3, [r7, #28]
 800fece:	e09d      	b.n	801000c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fed0:	69fb      	ldr	r3, [r7, #28]
 800fed2:	7d1b      	ldrb	r3, [r3, #20]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d105      	bne.n	800fee4 <tcp_input+0x234>
 800fed8:	4b15      	ldr	r3, [pc, #84]	; (800ff30 <tcp_input+0x280>)
 800feda:	22fb      	movs	r2, #251	; 0xfb
 800fedc:	4924      	ldr	r1, [pc, #144]	; (800ff70 <tcp_input+0x2c0>)
 800fede:	4816      	ldr	r0, [pc, #88]	; (800ff38 <tcp_input+0x288>)
 800fee0:	f005 faf8 	bl	80154d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fee4:	69fb      	ldr	r3, [r7, #28]
 800fee6:	7d1b      	ldrb	r3, [r3, #20]
 800fee8:	2b0a      	cmp	r3, #10
 800feea:	d105      	bne.n	800fef8 <tcp_input+0x248>
 800feec:	4b10      	ldr	r3, [pc, #64]	; (800ff30 <tcp_input+0x280>)
 800feee:	22fc      	movs	r2, #252	; 0xfc
 800fef0:	4920      	ldr	r1, [pc, #128]	; (800ff74 <tcp_input+0x2c4>)
 800fef2:	4811      	ldr	r0, [pc, #68]	; (800ff38 <tcp_input+0x288>)
 800fef4:	f005 faee 	bl	80154d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	7d1b      	ldrb	r3, [r3, #20]
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d105      	bne.n	800ff0c <tcp_input+0x25c>
 800ff00:	4b0b      	ldr	r3, [pc, #44]	; (800ff30 <tcp_input+0x280>)
 800ff02:	22fd      	movs	r2, #253	; 0xfd
 800ff04:	491c      	ldr	r1, [pc, #112]	; (800ff78 <tcp_input+0x2c8>)
 800ff06:	480c      	ldr	r0, [pc, #48]	; (800ff38 <tcp_input+0x288>)
 800ff08:	f005 fae4 	bl	80154d4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff0c:	69fb      	ldr	r3, [r7, #28]
 800ff0e:	7a1b      	ldrb	r3, [r3, #8]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d033      	beq.n	800ff7c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ff14:	69fb      	ldr	r3, [r7, #28]
 800ff16:	7a1a      	ldrb	r2, [r3, #8]
 800ff18:	4b09      	ldr	r3, [pc, #36]	; (800ff40 <tcp_input+0x290>)
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ff20:	3301      	adds	r3, #1
 800ff22:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d029      	beq.n	800ff7c <tcp_input+0x2cc>
      prev = pcb;
 800ff28:	69fb      	ldr	r3, [r7, #28]
 800ff2a:	61bb      	str	r3, [r7, #24]
      continue;
 800ff2c:	e06b      	b.n	8010006 <tcp_input+0x356>
 800ff2e:	bf00      	nop
 800ff30:	0801acb0 	.word	0x0801acb0
 800ff34:	0801ad20 	.word	0x0801ad20
 800ff38:	0801ad38 	.word	0x0801ad38
 800ff3c:	200068dc 	.word	0x200068dc
 800ff40:	20006a84 	.word	0x20006a84
 800ff44:	200068e0 	.word	0x200068e0
 800ff48:	200068e4 	.word	0x200068e4
 800ff4c:	200068e2 	.word	0x200068e2
 800ff50:	0801ad60 	.word	0x0801ad60
 800ff54:	0801ad70 	.word	0x0801ad70
 800ff58:	0801ad7c 	.word	0x0801ad7c
 800ff5c:	200068ec 	.word	0x200068ec
 800ff60:	200068f0 	.word	0x200068f0
 800ff64:	200068f8 	.word	0x200068f8
 800ff68:	200068f6 	.word	0x200068f6
 800ff6c:	2000cfc4 	.word	0x2000cfc4
 800ff70:	0801ad9c 	.word	0x0801ad9c
 800ff74:	0801adc4 	.word	0x0801adc4
 800ff78:	0801adf0 	.word	0x0801adf0
    }

    if (pcb->remote_port == tcphdr->src &&
 800ff7c:	69fb      	ldr	r3, [r7, #28]
 800ff7e:	8b1a      	ldrh	r2, [r3, #24]
 800ff80:	4b94      	ldr	r3, [pc, #592]	; (80101d4 <tcp_input+0x524>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	881b      	ldrh	r3, [r3, #0]
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d13a      	bne.n	8010002 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ff8c:	69fb      	ldr	r3, [r7, #28]
 800ff8e:	8ada      	ldrh	r2, [r3, #22]
 800ff90:	4b90      	ldr	r3, [pc, #576]	; (80101d4 <tcp_input+0x524>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	885b      	ldrh	r3, [r3, #2]
 800ff96:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d132      	bne.n	8010002 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	685a      	ldr	r2, [r3, #4]
 800ffa0:	4b8d      	ldr	r3, [pc, #564]	; (80101d8 <tcp_input+0x528>)
 800ffa2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d12c      	bne.n	8010002 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	4b8a      	ldr	r3, [pc, #552]	; (80101d8 <tcp_input+0x528>)
 800ffae:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d126      	bne.n	8010002 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ffb4:	69fb      	ldr	r3, [r7, #28]
 800ffb6:	68db      	ldr	r3, [r3, #12]
 800ffb8:	69fa      	ldr	r2, [r7, #28]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d106      	bne.n	800ffcc <tcp_input+0x31c>
 800ffbe:	4b87      	ldr	r3, [pc, #540]	; (80101dc <tcp_input+0x52c>)
 800ffc0:	f240 120d 	movw	r2, #269	; 0x10d
 800ffc4:	4986      	ldr	r1, [pc, #536]	; (80101e0 <tcp_input+0x530>)
 800ffc6:	4887      	ldr	r0, [pc, #540]	; (80101e4 <tcp_input+0x534>)
 800ffc8:	f005 fa84 	bl	80154d4 <iprintf>
      if (prev != NULL) {
 800ffcc:	69bb      	ldr	r3, [r7, #24]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d00a      	beq.n	800ffe8 <tcp_input+0x338>
        prev->next = pcb->next;
 800ffd2:	69fb      	ldr	r3, [r7, #28]
 800ffd4:	68da      	ldr	r2, [r3, #12]
 800ffd6:	69bb      	ldr	r3, [r7, #24]
 800ffd8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ffda:	4b83      	ldr	r3, [pc, #524]	; (80101e8 <tcp_input+0x538>)
 800ffdc:	681a      	ldr	r2, [r3, #0]
 800ffde:	69fb      	ldr	r3, [r7, #28]
 800ffe0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ffe2:	4a81      	ldr	r2, [pc, #516]	; (80101e8 <tcp_input+0x538>)
 800ffe4:	69fb      	ldr	r3, [r7, #28]
 800ffe6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	69fa      	ldr	r2, [r7, #28]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d111      	bne.n	8010016 <tcp_input+0x366>
 800fff2:	4b7a      	ldr	r3, [pc, #488]	; (80101dc <tcp_input+0x52c>)
 800fff4:	f240 1215 	movw	r2, #277	; 0x115
 800fff8:	497c      	ldr	r1, [pc, #496]	; (80101ec <tcp_input+0x53c>)
 800fffa:	487a      	ldr	r0, [pc, #488]	; (80101e4 <tcp_input+0x534>)
 800fffc:	f005 fa6a 	bl	80154d4 <iprintf>
      break;
 8010000:	e009      	b.n	8010016 <tcp_input+0x366>
    }
    prev = pcb;
 8010002:	69fb      	ldr	r3, [r7, #28]
 8010004:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010006:	69fb      	ldr	r3, [r7, #28]
 8010008:	68db      	ldr	r3, [r3, #12]
 801000a:	61fb      	str	r3, [r7, #28]
 801000c:	69fb      	ldr	r3, [r7, #28]
 801000e:	2b00      	cmp	r3, #0
 8010010:	f47f af5e 	bne.w	800fed0 <tcp_input+0x220>
 8010014:	e000      	b.n	8010018 <tcp_input+0x368>
      break;
 8010016:	bf00      	nop
  }

  if (pcb == NULL) {
 8010018:	69fb      	ldr	r3, [r7, #28]
 801001a:	2b00      	cmp	r3, #0
 801001c:	f040 8095 	bne.w	801014a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010020:	4b73      	ldr	r3, [pc, #460]	; (80101f0 <tcp_input+0x540>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	61fb      	str	r3, [r7, #28]
 8010026:	e03f      	b.n	80100a8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	7d1b      	ldrb	r3, [r3, #20]
 801002c:	2b0a      	cmp	r3, #10
 801002e:	d006      	beq.n	801003e <tcp_input+0x38e>
 8010030:	4b6a      	ldr	r3, [pc, #424]	; (80101dc <tcp_input+0x52c>)
 8010032:	f240 121f 	movw	r2, #287	; 0x11f
 8010036:	496f      	ldr	r1, [pc, #444]	; (80101f4 <tcp_input+0x544>)
 8010038:	486a      	ldr	r0, [pc, #424]	; (80101e4 <tcp_input+0x534>)
 801003a:	f005 fa4b 	bl	80154d4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801003e:	69fb      	ldr	r3, [r7, #28]
 8010040:	7a1b      	ldrb	r3, [r3, #8]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d009      	beq.n	801005a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010046:	69fb      	ldr	r3, [r7, #28]
 8010048:	7a1a      	ldrb	r2, [r3, #8]
 801004a:	4b63      	ldr	r3, [pc, #396]	; (80101d8 <tcp_input+0x528>)
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010052:	3301      	adds	r3, #1
 8010054:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010056:	429a      	cmp	r2, r3
 8010058:	d122      	bne.n	80100a0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801005a:	69fb      	ldr	r3, [r7, #28]
 801005c:	8b1a      	ldrh	r2, [r3, #24]
 801005e:	4b5d      	ldr	r3, [pc, #372]	; (80101d4 <tcp_input+0x524>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	881b      	ldrh	r3, [r3, #0]
 8010064:	b29b      	uxth	r3, r3
 8010066:	429a      	cmp	r2, r3
 8010068:	d11b      	bne.n	80100a2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801006a:	69fb      	ldr	r3, [r7, #28]
 801006c:	8ada      	ldrh	r2, [r3, #22]
 801006e:	4b59      	ldr	r3, [pc, #356]	; (80101d4 <tcp_input+0x524>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	885b      	ldrh	r3, [r3, #2]
 8010074:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010076:	429a      	cmp	r2, r3
 8010078:	d113      	bne.n	80100a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801007a:	69fb      	ldr	r3, [r7, #28]
 801007c:	685a      	ldr	r2, [r3, #4]
 801007e:	4b56      	ldr	r3, [pc, #344]	; (80101d8 <tcp_input+0x528>)
 8010080:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010082:	429a      	cmp	r2, r3
 8010084:	d10d      	bne.n	80100a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010086:	69fb      	ldr	r3, [r7, #28]
 8010088:	681a      	ldr	r2, [r3, #0]
 801008a:	4b53      	ldr	r3, [pc, #332]	; (80101d8 <tcp_input+0x528>)
 801008c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801008e:	429a      	cmp	r2, r3
 8010090:	d107      	bne.n	80100a2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010092:	69f8      	ldr	r0, [r7, #28]
 8010094:	f000 fb52 	bl	801073c <tcp_timewait_input>
        }
        pbuf_free(p);
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f7fd fda1 	bl	800dbe0 <pbuf_free>
        return;
 801009e:	e1ed      	b.n	801047c <tcp_input+0x7cc>
        continue;
 80100a0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100a2:	69fb      	ldr	r3, [r7, #28]
 80100a4:	68db      	ldr	r3, [r3, #12]
 80100a6:	61fb      	str	r3, [r7, #28]
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d1bc      	bne.n	8010028 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80100ae:	2300      	movs	r3, #0
 80100b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80100b2:	4b51      	ldr	r3, [pc, #324]	; (80101f8 <tcp_input+0x548>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	617b      	str	r3, [r7, #20]
 80100b8:	e02a      	b.n	8010110 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	7a1b      	ldrb	r3, [r3, #8]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d00c      	beq.n	80100dc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	7a1a      	ldrb	r2, [r3, #8]
 80100c6:	4b44      	ldr	r3, [pc, #272]	; (80101d8 <tcp_input+0x528>)
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80100ce:	3301      	adds	r3, #1
 80100d0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d002      	beq.n	80100dc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	61bb      	str	r3, [r7, #24]
        continue;
 80100da:	e016      	b.n	801010a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	8ada      	ldrh	r2, [r3, #22]
 80100e0:	4b3c      	ldr	r3, [pc, #240]	; (80101d4 <tcp_input+0x524>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	885b      	ldrh	r3, [r3, #2]
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d10c      	bne.n	8010106 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	681a      	ldr	r2, [r3, #0]
 80100f0:	4b39      	ldr	r3, [pc, #228]	; (80101d8 <tcp_input+0x528>)
 80100f2:	695b      	ldr	r3, [r3, #20]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d00f      	beq.n	8010118 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d00d      	beq.n	801011a <tcp_input+0x46a>
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d009      	beq.n	801011a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	68db      	ldr	r3, [r3, #12]
 801010e:	617b      	str	r3, [r7, #20]
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d1d1      	bne.n	80100ba <tcp_input+0x40a>
 8010116:	e000      	b.n	801011a <tcp_input+0x46a>
            break;
 8010118:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d014      	beq.n	801014a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010120:	69bb      	ldr	r3, [r7, #24]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d00a      	beq.n	801013c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	68da      	ldr	r2, [r3, #12]
 801012a:	69bb      	ldr	r3, [r7, #24]
 801012c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801012e:	4b32      	ldr	r3, [pc, #200]	; (80101f8 <tcp_input+0x548>)
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010136:	4a30      	ldr	r2, [pc, #192]	; (80101f8 <tcp_input+0x548>)
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801013c:	6978      	ldr	r0, [r7, #20]
 801013e:	f000 f9ff 	bl	8010540 <tcp_listen_input>
      }
      pbuf_free(p);
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f7fd fd4c 	bl	800dbe0 <pbuf_free>
      return;
 8010148:	e198      	b.n	801047c <tcp_input+0x7cc>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801014a:	69fb      	ldr	r3, [r7, #28]
 801014c:	2b00      	cmp	r3, #0
 801014e:	f000 815f 	beq.w	8010410 <tcp_input+0x760>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010152:	4b2a      	ldr	r3, [pc, #168]	; (80101fc <tcp_input+0x54c>)
 8010154:	2200      	movs	r2, #0
 8010156:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	891a      	ldrh	r2, [r3, #8]
 801015c:	4b27      	ldr	r3, [pc, #156]	; (80101fc <tcp_input+0x54c>)
 801015e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010160:	4a26      	ldr	r2, [pc, #152]	; (80101fc <tcp_input+0x54c>)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010166:	4b1b      	ldr	r3, [pc, #108]	; (80101d4 <tcp_input+0x524>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	4a24      	ldr	r2, [pc, #144]	; (80101fc <tcp_input+0x54c>)
 801016c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801016e:	4b24      	ldr	r3, [pc, #144]	; (8010200 <tcp_input+0x550>)
 8010170:	2200      	movs	r2, #0
 8010172:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010174:	4b23      	ldr	r3, [pc, #140]	; (8010204 <tcp_input+0x554>)
 8010176:	2200      	movs	r2, #0
 8010178:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801017a:	4b23      	ldr	r3, [pc, #140]	; (8010208 <tcp_input+0x558>)
 801017c:	2200      	movs	r2, #0
 801017e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010180:	4b22      	ldr	r3, [pc, #136]	; (801020c <tcp_input+0x55c>)
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	f003 0308 	and.w	r3, r3, #8
 8010188:	2b00      	cmp	r3, #0
 801018a:	d006      	beq.n	801019a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	7b5b      	ldrb	r3, [r3, #13]
 8010190:	f043 0301 	orr.w	r3, r3, #1
 8010194:	b2da      	uxtb	r2, r3
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801019a:	69fb      	ldr	r3, [r7, #28]
 801019c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d038      	beq.n	8010214 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80101a2:	69f8      	ldr	r0, [r7, #28]
 80101a4:	f7ff f8ae 	bl	800f304 <tcp_process_refused_data>
 80101a8:	4603      	mov	r3, r0
 80101aa:	f113 0f0d 	cmn.w	r3, #13
 80101ae:	d007      	beq.n	80101c0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d02d      	beq.n	8010214 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80101b8:	4b15      	ldr	r3, [pc, #84]	; (8010210 <tcp_input+0x560>)
 80101ba:	881b      	ldrh	r3, [r3, #0]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d029      	beq.n	8010214 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80101c0:	69fb      	ldr	r3, [r7, #28]
 80101c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f040 8103 	bne.w	80103d0 <tcp_input+0x720>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80101ca:	69f8      	ldr	r0, [r7, #28]
 80101cc:	f003 fa70 	bl	80136b0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80101d0:	e0fe      	b.n	80103d0 <tcp_input+0x720>
 80101d2:	bf00      	nop
 80101d4:	200068dc 	.word	0x200068dc
 80101d8:	20006a84 	.word	0x20006a84
 80101dc:	0801acb0 	.word	0x0801acb0
 80101e0:	0801ae18 	.word	0x0801ae18
 80101e4:	0801ad38 	.word	0x0801ad38
 80101e8:	2000cfc4 	.word	0x2000cfc4
 80101ec:	0801ae44 	.word	0x0801ae44
 80101f0:	2000cfd4 	.word	0x2000cfd4
 80101f4:	0801ae70 	.word	0x0801ae70
 80101f8:	2000cfcc 	.word	0x2000cfcc
 80101fc:	200068cc 	.word	0x200068cc
 8010200:	200068fc 	.word	0x200068fc
 8010204:	200068f9 	.word	0x200068f9
 8010208:	200068f4 	.word	0x200068f4
 801020c:	200068f8 	.word	0x200068f8
 8010210:	200068f6 	.word	0x200068f6
      }
    }
    tcp_input_pcb = pcb;
 8010214:	4a9b      	ldr	r2, [pc, #620]	; (8010484 <tcp_input+0x7d4>)
 8010216:	69fb      	ldr	r3, [r7, #28]
 8010218:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801021a:	69f8      	ldr	r0, [r7, #28]
 801021c:	f000 fb0a 	bl	8010834 <tcp_process>
 8010220:	4603      	mov	r3, r0
 8010222:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010224:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010228:	f113 0f0d 	cmn.w	r3, #13
 801022c:	f000 80d2 	beq.w	80103d4 <tcp_input+0x724>
      if (recv_flags & TF_RESET) {
 8010230:	4b95      	ldr	r3, [pc, #596]	; (8010488 <tcp_input+0x7d8>)
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	f003 0308 	and.w	r3, r3, #8
 8010238:	2b00      	cmp	r3, #0
 801023a:	d015      	beq.n	8010268 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010242:	2b00      	cmp	r3, #0
 8010244:	d008      	beq.n	8010258 <tcp_input+0x5a8>
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801024c:	69fa      	ldr	r2, [r7, #28]
 801024e:	6912      	ldr	r2, [r2, #16]
 8010250:	f06f 010d 	mvn.w	r1, #13
 8010254:	4610      	mov	r0, r2
 8010256:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010258:	69f9      	ldr	r1, [r7, #28]
 801025a:	488c      	ldr	r0, [pc, #560]	; (801048c <tcp_input+0x7dc>)
 801025c:	f7ff fbd2 	bl	800fa04 <tcp_pcb_remove>
        tcp_free(pcb);
 8010260:	69f8      	ldr	r0, [r7, #28]
 8010262:	f7fd ff79 	bl	800e158 <tcp_free>
 8010266:	e0c0      	b.n	80103ea <tcp_input+0x73a>
      } else {
        err = ERR_OK;
 8010268:	2300      	movs	r3, #0
 801026a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801026c:	4b88      	ldr	r3, [pc, #544]	; (8010490 <tcp_input+0x7e0>)
 801026e:	881b      	ldrh	r3, [r3, #0]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d01b      	beq.n	80102ac <tcp_input+0x5fc>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010274:	4b86      	ldr	r3, [pc, #536]	; (8010490 <tcp_input+0x7e0>)
 8010276:	881b      	ldrh	r3, [r3, #0]
 8010278:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801027e:	2b00      	cmp	r3, #0
 8010280:	d009      	beq.n	8010296 <tcp_input+0x5e6>
 8010282:	69fb      	ldr	r3, [r7, #28]
 8010284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010286:	69fa      	ldr	r2, [r7, #28]
 8010288:	6910      	ldr	r0, [r2, #16]
 801028a:	89fa      	ldrh	r2, [r7, #14]
 801028c:	69f9      	ldr	r1, [r7, #28]
 801028e:	4798      	blx	r3
 8010290:	4603      	mov	r3, r0
 8010292:	74fb      	strb	r3, [r7, #19]
 8010294:	e001      	b.n	801029a <tcp_input+0x5ea>
 8010296:	2300      	movs	r3, #0
 8010298:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801029a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801029e:	f113 0f0d 	cmn.w	r3, #13
 80102a2:	f000 8099 	beq.w	80103d8 <tcp_input+0x728>
              goto aborted;
            }
          }
          recv_acked = 0;
 80102a6:	4b7a      	ldr	r3, [pc, #488]	; (8010490 <tcp_input+0x7e0>)
 80102a8:	2200      	movs	r2, #0
 80102aa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80102ac:	69f8      	ldr	r0, [r7, #28]
 80102ae:	f000 f907 	bl	80104c0 <tcp_input_delayed_close>
 80102b2:	4603      	mov	r3, r0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	f040 8091 	bne.w	80103dc <tcp_input+0x72c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80102ba:	4b76      	ldr	r3, [pc, #472]	; (8010494 <tcp_input+0x7e4>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d041      	beq.n	8010346 <tcp_input+0x696>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80102c2:	69fb      	ldr	r3, [r7, #28]
 80102c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d006      	beq.n	80102d8 <tcp_input+0x628>
 80102ca:	4b73      	ldr	r3, [pc, #460]	; (8010498 <tcp_input+0x7e8>)
 80102cc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80102d0:	4972      	ldr	r1, [pc, #456]	; (801049c <tcp_input+0x7ec>)
 80102d2:	4873      	ldr	r0, [pc, #460]	; (80104a0 <tcp_input+0x7f0>)
 80102d4:	f005 f8fe 	bl	80154d4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80102d8:	69fb      	ldr	r3, [r7, #28]
 80102da:	8b5b      	ldrh	r3, [r3, #26]
 80102dc:	f003 0310 	and.w	r3, r3, #16
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d008      	beq.n	80102f6 <tcp_input+0x646>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80102e4:	4b6b      	ldr	r3, [pc, #428]	; (8010494 <tcp_input+0x7e4>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7fd fc79 	bl	800dbe0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80102ee:	69f8      	ldr	r0, [r7, #28]
 80102f0:	f7fe fa0a 	bl	800e708 <tcp_abort>
            goto aborted;
 80102f4:	e079      	b.n	80103ea <tcp_input+0x73a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d00c      	beq.n	801031a <tcp_input+0x66a>
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	6918      	ldr	r0, [r3, #16]
 801030a:	4b62      	ldr	r3, [pc, #392]	; (8010494 <tcp_input+0x7e4>)
 801030c:	681a      	ldr	r2, [r3, #0]
 801030e:	2300      	movs	r3, #0
 8010310:	69f9      	ldr	r1, [r7, #28]
 8010312:	47a0      	blx	r4
 8010314:	4603      	mov	r3, r0
 8010316:	74fb      	strb	r3, [r7, #19]
 8010318:	e008      	b.n	801032c <tcp_input+0x67c>
 801031a:	4b5e      	ldr	r3, [pc, #376]	; (8010494 <tcp_input+0x7e4>)
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	2300      	movs	r3, #0
 8010320:	69f9      	ldr	r1, [r7, #28]
 8010322:	2000      	movs	r0, #0
 8010324:	f7ff f8b6 	bl	800f494 <tcp_recv_null>
 8010328:	4603      	mov	r3, r0
 801032a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801032c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010330:	f113 0f0d 	cmn.w	r3, #13
 8010334:	d054      	beq.n	80103e0 <tcp_input+0x730>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010336:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d003      	beq.n	8010346 <tcp_input+0x696>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801033e:	4b55      	ldr	r3, [pc, #340]	; (8010494 <tcp_input+0x7e4>)
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	69fb      	ldr	r3, [r7, #28]
 8010344:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010346:	4b50      	ldr	r3, [pc, #320]	; (8010488 <tcp_input+0x7d8>)
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	f003 0320 	and.w	r3, r3, #32
 801034e:	2b00      	cmp	r3, #0
 8010350:	d031      	beq.n	80103b6 <tcp_input+0x706>
          if (pcb->refused_data != NULL) {
 8010352:	69fb      	ldr	r3, [r7, #28]
 8010354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010356:	2b00      	cmp	r3, #0
 8010358:	d009      	beq.n	801036e <tcp_input+0x6be>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801035a:	69fb      	ldr	r3, [r7, #28]
 801035c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801035e:	7b5a      	ldrb	r2, [r3, #13]
 8010360:	69fb      	ldr	r3, [r7, #28]
 8010362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010364:	f042 0220 	orr.w	r2, r2, #32
 8010368:	b2d2      	uxtb	r2, r2
 801036a:	735a      	strb	r2, [r3, #13]
 801036c:	e023      	b.n	80103b6 <tcp_input+0x706>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801036e:	69fb      	ldr	r3, [r7, #28]
 8010370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010372:	f640 3268 	movw	r2, #2920	; 0xb68
 8010376:	4293      	cmp	r3, r2
 8010378:	d005      	beq.n	8010386 <tcp_input+0x6d6>
              pcb->rcv_wnd++;
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801037e:	3301      	adds	r3, #1
 8010380:	b29a      	uxth	r2, r3
 8010382:	69fb      	ldr	r3, [r7, #28]
 8010384:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00b      	beq.n	80103a8 <tcp_input+0x6f8>
 8010390:	69fb      	ldr	r3, [r7, #28]
 8010392:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8010396:	69fb      	ldr	r3, [r7, #28]
 8010398:	6918      	ldr	r0, [r3, #16]
 801039a:	2300      	movs	r3, #0
 801039c:	2200      	movs	r2, #0
 801039e:	69f9      	ldr	r1, [r7, #28]
 80103a0:	47a0      	blx	r4
 80103a2:	4603      	mov	r3, r0
 80103a4:	74fb      	strb	r3, [r7, #19]
 80103a6:	e001      	b.n	80103ac <tcp_input+0x6fc>
 80103a8:	2300      	movs	r3, #0
 80103aa:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80103ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80103b0:	f113 0f0d 	cmn.w	r3, #13
 80103b4:	d016      	beq.n	80103e4 <tcp_input+0x734>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80103b6:	4b33      	ldr	r3, [pc, #204]	; (8010484 <tcp_input+0x7d4>)
 80103b8:	2200      	movs	r2, #0
 80103ba:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80103bc:	69f8      	ldr	r0, [r7, #28]
 80103be:	f000 f87f 	bl	80104c0 <tcp_input_delayed_close>
 80103c2:	4603      	mov	r3, r0
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d10f      	bne.n	80103e8 <tcp_input+0x738>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80103c8:	69f8      	ldr	r0, [r7, #28]
 80103ca:	f002 fb59 	bl	8012a80 <tcp_output>
 80103ce:	e00c      	b.n	80103ea <tcp_input+0x73a>
        goto aborted;
 80103d0:	bf00      	nop
 80103d2:	e00a      	b.n	80103ea <tcp_input+0x73a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80103d4:	bf00      	nop
 80103d6:	e008      	b.n	80103ea <tcp_input+0x73a>
              goto aborted;
 80103d8:	bf00      	nop
 80103da:	e006      	b.n	80103ea <tcp_input+0x73a>
          goto aborted;
 80103dc:	bf00      	nop
 80103de:	e004      	b.n	80103ea <tcp_input+0x73a>
            goto aborted;
 80103e0:	bf00      	nop
 80103e2:	e002      	b.n	80103ea <tcp_input+0x73a>
              goto aborted;
 80103e4:	bf00      	nop
 80103e6:	e000      	b.n	80103ea <tcp_input+0x73a>
          goto aborted;
 80103e8:	bf00      	nop
    tcp_input_pcb = NULL;
 80103ea:	4b26      	ldr	r3, [pc, #152]	; (8010484 <tcp_input+0x7d4>)
 80103ec:	2200      	movs	r2, #0
 80103ee:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80103f0:	4b28      	ldr	r3, [pc, #160]	; (8010494 <tcp_input+0x7e4>)
 80103f2:	2200      	movs	r2, #0
 80103f4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80103f6:	4b2b      	ldr	r3, [pc, #172]	; (80104a4 <tcp_input+0x7f4>)
 80103f8:	685b      	ldr	r3, [r3, #4]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d03d      	beq.n	801047a <tcp_input+0x7ca>
      pbuf_free(inseg.p);
 80103fe:	4b29      	ldr	r3, [pc, #164]	; (80104a4 <tcp_input+0x7f4>)
 8010400:	685b      	ldr	r3, [r3, #4]
 8010402:	4618      	mov	r0, r3
 8010404:	f7fd fbec 	bl	800dbe0 <pbuf_free>
      inseg.p = NULL;
 8010408:	4b26      	ldr	r3, [pc, #152]	; (80104a4 <tcp_input+0x7f4>)
 801040a:	2200      	movs	r2, #0
 801040c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801040e:	e034      	b.n	801047a <tcp_input+0x7ca>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010410:	4b25      	ldr	r3, [pc, #148]	; (80104a8 <tcp_input+0x7f8>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	899b      	ldrh	r3, [r3, #12]
 8010416:	b29b      	uxth	r3, r3
 8010418:	4618      	mov	r0, r3
 801041a:	f7fc f857 	bl	800c4cc <lwip_htons>
 801041e:	4603      	mov	r3, r0
 8010420:	b2db      	uxtb	r3, r3
 8010422:	f003 0304 	and.w	r3, r3, #4
 8010426:	2b00      	cmp	r3, #0
 8010428:	d118      	bne.n	801045c <tcp_input+0x7ac>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801042a:	4b20      	ldr	r3, [pc, #128]	; (80104ac <tcp_input+0x7fc>)
 801042c:	6819      	ldr	r1, [r3, #0]
 801042e:	4b20      	ldr	r3, [pc, #128]	; (80104b0 <tcp_input+0x800>)
 8010430:	881b      	ldrh	r3, [r3, #0]
 8010432:	461a      	mov	r2, r3
 8010434:	4b1f      	ldr	r3, [pc, #124]	; (80104b4 <tcp_input+0x804>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801043a:	4b1b      	ldr	r3, [pc, #108]	; (80104a8 <tcp_input+0x7f8>)
 801043c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801043e:	885b      	ldrh	r3, [r3, #2]
 8010440:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010442:	4a19      	ldr	r2, [pc, #100]	; (80104a8 <tcp_input+0x7f8>)
 8010444:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010446:	8812      	ldrh	r2, [r2, #0]
 8010448:	b292      	uxth	r2, r2
 801044a:	9202      	str	r2, [sp, #8]
 801044c:	9301      	str	r3, [sp, #4]
 801044e:	4b1a      	ldr	r3, [pc, #104]	; (80104b8 <tcp_input+0x808>)
 8010450:	9300      	str	r3, [sp, #0]
 8010452:	4b1a      	ldr	r3, [pc, #104]	; (80104bc <tcp_input+0x80c>)
 8010454:	4602      	mov	r2, r0
 8010456:	2000      	movs	r0, #0
 8010458:	f003 f8d8 	bl	801360c <tcp_rst>
    pbuf_free(p);
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f7fd fbbf 	bl	800dbe0 <pbuf_free>
  return;
 8010462:	e00a      	b.n	801047a <tcp_input+0x7ca>
    goto dropped;
 8010464:	bf00      	nop
 8010466:	e004      	b.n	8010472 <tcp_input+0x7c2>
dropped:
 8010468:	bf00      	nop
 801046a:	e002      	b.n	8010472 <tcp_input+0x7c2>
      goto dropped;
 801046c:	bf00      	nop
 801046e:	e000      	b.n	8010472 <tcp_input+0x7c2>
      goto dropped;
 8010470:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f7fd fbb4 	bl	800dbe0 <pbuf_free>
 8010478:	e000      	b.n	801047c <tcp_input+0x7cc>
  return;
 801047a:	bf00      	nop
}
 801047c:	3724      	adds	r7, #36	; 0x24
 801047e:	46bd      	mov	sp, r7
 8010480:	bd90      	pop	{r4, r7, pc}
 8010482:	bf00      	nop
 8010484:	2000cfd8 	.word	0x2000cfd8
 8010488:	200068f9 	.word	0x200068f9
 801048c:	2000cfc4 	.word	0x2000cfc4
 8010490:	200068f4 	.word	0x200068f4
 8010494:	200068fc 	.word	0x200068fc
 8010498:	0801acb0 	.word	0x0801acb0
 801049c:	0801aea0 	.word	0x0801aea0
 80104a0:	0801ad38 	.word	0x0801ad38
 80104a4:	200068cc 	.word	0x200068cc
 80104a8:	200068dc 	.word	0x200068dc
 80104ac:	200068f0 	.word	0x200068f0
 80104b0:	200068f6 	.word	0x200068f6
 80104b4:	200068ec 	.word	0x200068ec
 80104b8:	20006a94 	.word	0x20006a94
 80104bc:	20006a98 	.word	0x20006a98

080104c0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d106      	bne.n	80104dc <tcp_input_delayed_close+0x1c>
 80104ce:	4b17      	ldr	r3, [pc, #92]	; (801052c <tcp_input_delayed_close+0x6c>)
 80104d0:	f240 225a 	movw	r2, #602	; 0x25a
 80104d4:	4916      	ldr	r1, [pc, #88]	; (8010530 <tcp_input_delayed_close+0x70>)
 80104d6:	4817      	ldr	r0, [pc, #92]	; (8010534 <tcp_input_delayed_close+0x74>)
 80104d8:	f004 fffc 	bl	80154d4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80104dc:	4b16      	ldr	r3, [pc, #88]	; (8010538 <tcp_input_delayed_close+0x78>)
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	f003 0310 	and.w	r3, r3, #16
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d01c      	beq.n	8010522 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	8b5b      	ldrh	r3, [r3, #26]
 80104ec:	f003 0310 	and.w	r3, r3, #16
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d10d      	bne.n	8010510 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d008      	beq.n	8010510 <tcp_input_delayed_close+0x50>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	6912      	ldr	r2, [r2, #16]
 8010508:	f06f 010e 	mvn.w	r1, #14
 801050c:	4610      	mov	r0, r2
 801050e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010510:	6879      	ldr	r1, [r7, #4]
 8010512:	480a      	ldr	r0, [pc, #40]	; (801053c <tcp_input_delayed_close+0x7c>)
 8010514:	f7ff fa76 	bl	800fa04 <tcp_pcb_remove>
    tcp_free(pcb);
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f7fd fe1d 	bl	800e158 <tcp_free>
    return 1;
 801051e:	2301      	movs	r3, #1
 8010520:	e000      	b.n	8010524 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010522:	2300      	movs	r3, #0
}
 8010524:	4618      	mov	r0, r3
 8010526:	3708      	adds	r7, #8
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	0801acb0 	.word	0x0801acb0
 8010530:	0801aebc 	.word	0x0801aebc
 8010534:	0801ad38 	.word	0x0801ad38
 8010538:	200068f9 	.word	0x200068f9
 801053c:	2000cfc4 	.word	0x2000cfc4

08010540 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010540:	b590      	push	{r4, r7, lr}
 8010542:	b08b      	sub	sp, #44	; 0x2c
 8010544:	af04      	add	r7, sp, #16
 8010546:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010548:	4b6f      	ldr	r3, [pc, #444]	; (8010708 <tcp_listen_input+0x1c8>)
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	f003 0304 	and.w	r3, r3, #4
 8010550:	2b00      	cmp	r3, #0
 8010552:	f040 80d3 	bne.w	80106fc <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d106      	bne.n	801056a <tcp_listen_input+0x2a>
 801055c:	4b6b      	ldr	r3, [pc, #428]	; (801070c <tcp_listen_input+0x1cc>)
 801055e:	f240 2281 	movw	r2, #641	; 0x281
 8010562:	496b      	ldr	r1, [pc, #428]	; (8010710 <tcp_listen_input+0x1d0>)
 8010564:	486b      	ldr	r0, [pc, #428]	; (8010714 <tcp_listen_input+0x1d4>)
 8010566:	f004 ffb5 	bl	80154d4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801056a:	4b67      	ldr	r3, [pc, #412]	; (8010708 <tcp_listen_input+0x1c8>)
 801056c:	781b      	ldrb	r3, [r3, #0]
 801056e:	f003 0310 	and.w	r3, r3, #16
 8010572:	2b00      	cmp	r3, #0
 8010574:	d019      	beq.n	80105aa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010576:	4b68      	ldr	r3, [pc, #416]	; (8010718 <tcp_listen_input+0x1d8>)
 8010578:	6819      	ldr	r1, [r3, #0]
 801057a:	4b68      	ldr	r3, [pc, #416]	; (801071c <tcp_listen_input+0x1dc>)
 801057c:	881b      	ldrh	r3, [r3, #0]
 801057e:	461a      	mov	r2, r3
 8010580:	4b67      	ldr	r3, [pc, #412]	; (8010720 <tcp_listen_input+0x1e0>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010586:	4b67      	ldr	r3, [pc, #412]	; (8010724 <tcp_listen_input+0x1e4>)
 8010588:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801058a:	885b      	ldrh	r3, [r3, #2]
 801058c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801058e:	4a65      	ldr	r2, [pc, #404]	; (8010724 <tcp_listen_input+0x1e4>)
 8010590:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010592:	8812      	ldrh	r2, [r2, #0]
 8010594:	b292      	uxth	r2, r2
 8010596:	9202      	str	r2, [sp, #8]
 8010598:	9301      	str	r3, [sp, #4]
 801059a:	4b63      	ldr	r3, [pc, #396]	; (8010728 <tcp_listen_input+0x1e8>)
 801059c:	9300      	str	r3, [sp, #0]
 801059e:	4b63      	ldr	r3, [pc, #396]	; (801072c <tcp_listen_input+0x1ec>)
 80105a0:	4602      	mov	r2, r0
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f003 f832 	bl	801360c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80105a8:	e0aa      	b.n	8010700 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 80105aa:	4b57      	ldr	r3, [pc, #348]	; (8010708 <tcp_listen_input+0x1c8>)
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	f003 0302 	and.w	r3, r3, #2
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	f000 80a4 	beq.w	8010700 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	7d5b      	ldrb	r3, [r3, #21]
 80105bc:	4618      	mov	r0, r3
 80105be:	f7ff f88d 	bl	800f6dc <tcp_alloc>
 80105c2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d111      	bne.n	80105ee <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	699b      	ldr	r3, [r3, #24]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d00a      	beq.n	80105e8 <tcp_listen_input+0xa8>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	699b      	ldr	r3, [r3, #24]
 80105d6:	687a      	ldr	r2, [r7, #4]
 80105d8:	6910      	ldr	r0, [r2, #16]
 80105da:	f04f 32ff 	mov.w	r2, #4294967295
 80105de:	2100      	movs	r1, #0
 80105e0:	4798      	blx	r3
 80105e2:	4603      	mov	r3, r0
 80105e4:	73bb      	strb	r3, [r7, #14]
      return;
 80105e6:	e08c      	b.n	8010702 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80105e8:	23f0      	movs	r3, #240	; 0xf0
 80105ea:	73bb      	strb	r3, [r7, #14]
      return;
 80105ec:	e089      	b.n	8010702 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80105ee:	4b50      	ldr	r3, [pc, #320]	; (8010730 <tcp_listen_input+0x1f0>)
 80105f0:	695a      	ldr	r2, [r3, #20]
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80105f6:	4b4e      	ldr	r3, [pc, #312]	; (8010730 <tcp_listen_input+0x1f0>)
 80105f8:	691a      	ldr	r2, [r3, #16]
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	8ada      	ldrh	r2, [r3, #22]
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010606:	4b47      	ldr	r3, [pc, #284]	; (8010724 <tcp_listen_input+0x1e4>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	881b      	ldrh	r3, [r3, #0]
 801060c:	b29a      	uxth	r2, r3
 801060e:	697b      	ldr	r3, [r7, #20]
 8010610:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010612:	697b      	ldr	r3, [r7, #20]
 8010614:	2203      	movs	r2, #3
 8010616:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010618:	4b41      	ldr	r3, [pc, #260]	; (8010720 <tcp_listen_input+0x1e0>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	1c5a      	adds	r2, r3, #1
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801062a:	6978      	ldr	r0, [r7, #20]
 801062c:	f7ff fa70 	bl	800fb10 <tcp_next_iss>
 8010630:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	693a      	ldr	r2, [r7, #16]
 8010636:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	693a      	ldr	r2, [r7, #16]
 801063c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	693a      	ldr	r2, [r7, #16]
 8010642:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	693a      	ldr	r2, [r7, #16]
 8010648:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801064a:	4b35      	ldr	r3, [pc, #212]	; (8010720 <tcp_listen_input+0x1e0>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	1e5a      	subs	r2, r3, #1
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	691a      	ldr	r2, [r3, #16]
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801065c:	697b      	ldr	r3, [r7, #20]
 801065e:	687a      	ldr	r2, [r7, #4]
 8010660:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	7a5b      	ldrb	r3, [r3, #9]
 8010666:	f003 030c 	and.w	r3, r3, #12
 801066a:	b2da      	uxtb	r2, r3
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	7a1a      	ldrb	r2, [r3, #8]
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010678:	4b2e      	ldr	r3, [pc, #184]	; (8010734 <tcp_listen_input+0x1f4>)
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	60da      	str	r2, [r3, #12]
 8010680:	4a2c      	ldr	r2, [pc, #176]	; (8010734 <tcp_listen_input+0x1f4>)
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	6013      	str	r3, [r2, #0]
 8010686:	f003 f983 	bl	8013990 <tcp_timer_needed>
 801068a:	4b2b      	ldr	r3, [pc, #172]	; (8010738 <tcp_listen_input+0x1f8>)
 801068c:	2201      	movs	r2, #1
 801068e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010690:	6978      	ldr	r0, [r7, #20]
 8010692:	f001 f9d7 	bl	8011a44 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010696:	4b23      	ldr	r3, [pc, #140]	; (8010724 <tcp_listen_input+0x1e4>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	89db      	ldrh	r3, [r3, #14]
 801069c:	b29a      	uxth	r2, r3
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	3304      	adds	r3, #4
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7fa fddf 	bl	800b27c <ip4_route>
 80106be:	4601      	mov	r1, r0
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	3304      	adds	r3, #4
 80106c4:	461a      	mov	r2, r3
 80106c6:	4620      	mov	r0, r4
 80106c8:	f7ff fa48 	bl	800fb5c <tcp_eff_send_mss_netif>
 80106cc:	4603      	mov	r3, r0
 80106ce:	461a      	mov	r2, r3
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80106d4:	2112      	movs	r1, #18
 80106d6:	6978      	ldr	r0, [r7, #20]
 80106d8:	f002 f8e4 	bl	80128a4 <tcp_enqueue_flags>
 80106dc:	4603      	mov	r3, r0
 80106de:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80106e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d004      	beq.n	80106f2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80106e8:	2100      	movs	r1, #0
 80106ea:	6978      	ldr	r0, [r7, #20]
 80106ec:	f7fd ff58 	bl	800e5a0 <tcp_abandon>
      return;
 80106f0:	e007      	b.n	8010702 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80106f2:	6978      	ldr	r0, [r7, #20]
 80106f4:	f002 f9c4 	bl	8012a80 <tcp_output>
  return;
 80106f8:	bf00      	nop
 80106fa:	e001      	b.n	8010700 <tcp_listen_input+0x1c0>
    return;
 80106fc:	bf00      	nop
 80106fe:	e000      	b.n	8010702 <tcp_listen_input+0x1c2>
  return;
 8010700:	bf00      	nop
}
 8010702:	371c      	adds	r7, #28
 8010704:	46bd      	mov	sp, r7
 8010706:	bd90      	pop	{r4, r7, pc}
 8010708:	200068f8 	.word	0x200068f8
 801070c:	0801acb0 	.word	0x0801acb0
 8010710:	0801aee4 	.word	0x0801aee4
 8010714:	0801ad38 	.word	0x0801ad38
 8010718:	200068f0 	.word	0x200068f0
 801071c:	200068f6 	.word	0x200068f6
 8010720:	200068ec 	.word	0x200068ec
 8010724:	200068dc 	.word	0x200068dc
 8010728:	20006a94 	.word	0x20006a94
 801072c:	20006a98 	.word	0x20006a98
 8010730:	20006a84 	.word	0x20006a84
 8010734:	2000cfc4 	.word	0x2000cfc4
 8010738:	2000cfc0 	.word	0x2000cfc0

0801073c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b086      	sub	sp, #24
 8010740:	af04      	add	r7, sp, #16
 8010742:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010744:	4b30      	ldr	r3, [pc, #192]	; (8010808 <tcp_timewait_input+0xcc>)
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	f003 0304 	and.w	r3, r3, #4
 801074c:	2b00      	cmp	r3, #0
 801074e:	d154      	bne.n	80107fa <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d106      	bne.n	8010764 <tcp_timewait_input+0x28>
 8010756:	4b2d      	ldr	r3, [pc, #180]	; (801080c <tcp_timewait_input+0xd0>)
 8010758:	f240 22ee 	movw	r2, #750	; 0x2ee
 801075c:	492c      	ldr	r1, [pc, #176]	; (8010810 <tcp_timewait_input+0xd4>)
 801075e:	482d      	ldr	r0, [pc, #180]	; (8010814 <tcp_timewait_input+0xd8>)
 8010760:	f004 feb8 	bl	80154d4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010764:	4b28      	ldr	r3, [pc, #160]	; (8010808 <tcp_timewait_input+0xcc>)
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	f003 0302 	and.w	r3, r3, #2
 801076c:	2b00      	cmp	r3, #0
 801076e:	d02a      	beq.n	80107c6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010770:	4b29      	ldr	r3, [pc, #164]	; (8010818 <tcp_timewait_input+0xdc>)
 8010772:	681a      	ldr	r2, [r3, #0]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010778:	1ad3      	subs	r3, r2, r3
 801077a:	2b00      	cmp	r3, #0
 801077c:	db2d      	blt.n	80107da <tcp_timewait_input+0x9e>
 801077e:	4b26      	ldr	r3, [pc, #152]	; (8010818 <tcp_timewait_input+0xdc>)
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010786:	6879      	ldr	r1, [r7, #4]
 8010788:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801078a:	440b      	add	r3, r1
 801078c:	1ad3      	subs	r3, r2, r3
 801078e:	2b00      	cmp	r3, #0
 8010790:	dc23      	bgt.n	80107da <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010792:	4b22      	ldr	r3, [pc, #136]	; (801081c <tcp_timewait_input+0xe0>)
 8010794:	6819      	ldr	r1, [r3, #0]
 8010796:	4b22      	ldr	r3, [pc, #136]	; (8010820 <tcp_timewait_input+0xe4>)
 8010798:	881b      	ldrh	r3, [r3, #0]
 801079a:	461a      	mov	r2, r3
 801079c:	4b1e      	ldr	r3, [pc, #120]	; (8010818 <tcp_timewait_input+0xdc>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80107a2:	4b20      	ldr	r3, [pc, #128]	; (8010824 <tcp_timewait_input+0xe8>)
 80107a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107a6:	885b      	ldrh	r3, [r3, #2]
 80107a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80107aa:	4a1e      	ldr	r2, [pc, #120]	; (8010824 <tcp_timewait_input+0xe8>)
 80107ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107ae:	8812      	ldrh	r2, [r2, #0]
 80107b0:	b292      	uxth	r2, r2
 80107b2:	9202      	str	r2, [sp, #8]
 80107b4:	9301      	str	r3, [sp, #4]
 80107b6:	4b1c      	ldr	r3, [pc, #112]	; (8010828 <tcp_timewait_input+0xec>)
 80107b8:	9300      	str	r3, [sp, #0]
 80107ba:	4b1c      	ldr	r3, [pc, #112]	; (801082c <tcp_timewait_input+0xf0>)
 80107bc:	4602      	mov	r2, r0
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f002 ff24 	bl	801360c <tcp_rst>
      return;
 80107c4:	e01c      	b.n	8010800 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 80107c6:	4b10      	ldr	r3, [pc, #64]	; (8010808 <tcp_timewait_input+0xcc>)
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	f003 0301 	and.w	r3, r3, #1
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d003      	beq.n	80107da <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80107d2:	4b17      	ldr	r3, [pc, #92]	; (8010830 <tcp_timewait_input+0xf4>)
 80107d4:	681a      	ldr	r2, [r3, #0]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80107da:	4b11      	ldr	r3, [pc, #68]	; (8010820 <tcp_timewait_input+0xe4>)
 80107dc:	881b      	ldrh	r3, [r3, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d00d      	beq.n	80107fe <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	8b5b      	ldrh	r3, [r3, #26]
 80107e6:	f043 0302 	orr.w	r3, r3, #2
 80107ea:	b29a      	uxth	r2, r3
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f002 f945 	bl	8012a80 <tcp_output>
  }
  return;
 80107f6:	bf00      	nop
 80107f8:	e001      	b.n	80107fe <tcp_timewait_input+0xc2>
    return;
 80107fa:	bf00      	nop
 80107fc:	e000      	b.n	8010800 <tcp_timewait_input+0xc4>
  return;
 80107fe:	bf00      	nop
}
 8010800:	3708      	adds	r7, #8
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	200068f8 	.word	0x200068f8
 801080c:	0801acb0 	.word	0x0801acb0
 8010810:	0801af04 	.word	0x0801af04
 8010814:	0801ad38 	.word	0x0801ad38
 8010818:	200068ec 	.word	0x200068ec
 801081c:	200068f0 	.word	0x200068f0
 8010820:	200068f6 	.word	0x200068f6
 8010824:	200068dc 	.word	0x200068dc
 8010828:	20006a94 	.word	0x20006a94
 801082c:	20006a98 	.word	0x20006a98
 8010830:	2000cfc8 	.word	0x2000cfc8

08010834 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010834:	b590      	push	{r4, r7, lr}
 8010836:	b08d      	sub	sp, #52	; 0x34
 8010838:	af04      	add	r7, sp, #16
 801083a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801083c:	2300      	movs	r3, #0
 801083e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010840:	2300      	movs	r3, #0
 8010842:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d106      	bne.n	8010858 <tcp_process+0x24>
 801084a:	4ba5      	ldr	r3, [pc, #660]	; (8010ae0 <tcp_process+0x2ac>)
 801084c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010850:	49a4      	ldr	r1, [pc, #656]	; (8010ae4 <tcp_process+0x2b0>)
 8010852:	48a5      	ldr	r0, [pc, #660]	; (8010ae8 <tcp_process+0x2b4>)
 8010854:	f004 fe3e 	bl	80154d4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010858:	4ba4      	ldr	r3, [pc, #656]	; (8010aec <tcp_process+0x2b8>)
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	f003 0304 	and.w	r3, r3, #4
 8010860:	2b00      	cmp	r3, #0
 8010862:	d04e      	beq.n	8010902 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	7d1b      	ldrb	r3, [r3, #20]
 8010868:	2b02      	cmp	r3, #2
 801086a:	d108      	bne.n	801087e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010870:	4b9f      	ldr	r3, [pc, #636]	; (8010af0 <tcp_process+0x2bc>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	429a      	cmp	r2, r3
 8010876:	d123      	bne.n	80108c0 <tcp_process+0x8c>
        acceptable = 1;
 8010878:	2301      	movs	r3, #1
 801087a:	76fb      	strb	r3, [r7, #27]
 801087c:	e020      	b.n	80108c0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010882:	4b9c      	ldr	r3, [pc, #624]	; (8010af4 <tcp_process+0x2c0>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	429a      	cmp	r2, r3
 8010888:	d102      	bne.n	8010890 <tcp_process+0x5c>
        acceptable = 1;
 801088a:	2301      	movs	r3, #1
 801088c:	76fb      	strb	r3, [r7, #27]
 801088e:	e017      	b.n	80108c0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010890:	4b98      	ldr	r3, [pc, #608]	; (8010af4 <tcp_process+0x2c0>)
 8010892:	681a      	ldr	r2, [r3, #0]
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010898:	1ad3      	subs	r3, r2, r3
 801089a:	2b00      	cmp	r3, #0
 801089c:	db10      	blt.n	80108c0 <tcp_process+0x8c>
 801089e:	4b95      	ldr	r3, [pc, #596]	; (8010af4 <tcp_process+0x2c0>)
 80108a0:	681a      	ldr	r2, [r3, #0]
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108a6:	6879      	ldr	r1, [r7, #4]
 80108a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80108aa:	440b      	add	r3, r1
 80108ac:	1ad3      	subs	r3, r2, r3
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	dc06      	bgt.n	80108c0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	8b5b      	ldrh	r3, [r3, #26]
 80108b6:	f043 0302 	orr.w	r3, r3, #2
 80108ba:	b29a      	uxth	r2, r3
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80108c0:	7efb      	ldrb	r3, [r7, #27]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d01b      	beq.n	80108fe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	7d1b      	ldrb	r3, [r3, #20]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d106      	bne.n	80108dc <tcp_process+0xa8>
 80108ce:	4b84      	ldr	r3, [pc, #528]	; (8010ae0 <tcp_process+0x2ac>)
 80108d0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80108d4:	4988      	ldr	r1, [pc, #544]	; (8010af8 <tcp_process+0x2c4>)
 80108d6:	4884      	ldr	r0, [pc, #528]	; (8010ae8 <tcp_process+0x2b4>)
 80108d8:	f004 fdfc 	bl	80154d4 <iprintf>
      recv_flags |= TF_RESET;
 80108dc:	4b87      	ldr	r3, [pc, #540]	; (8010afc <tcp_process+0x2c8>)
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	f043 0308 	orr.w	r3, r3, #8
 80108e4:	b2da      	uxtb	r2, r3
 80108e6:	4b85      	ldr	r3, [pc, #532]	; (8010afc <tcp_process+0x2c8>)
 80108e8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	8b5b      	ldrh	r3, [r3, #26]
 80108ee:	f023 0301 	bic.w	r3, r3, #1
 80108f2:	b29a      	uxth	r2, r3
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80108f8:	f06f 030d 	mvn.w	r3, #13
 80108fc:	e37a      	b.n	8010ff4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80108fe:	2300      	movs	r3, #0
 8010900:	e378      	b.n	8010ff4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010902:	4b7a      	ldr	r3, [pc, #488]	; (8010aec <tcp_process+0x2b8>)
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	f003 0302 	and.w	r3, r3, #2
 801090a:	2b00      	cmp	r3, #0
 801090c:	d010      	beq.n	8010930 <tcp_process+0xfc>
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	7d1b      	ldrb	r3, [r3, #20]
 8010912:	2b02      	cmp	r3, #2
 8010914:	d00c      	beq.n	8010930 <tcp_process+0xfc>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	7d1b      	ldrb	r3, [r3, #20]
 801091a:	2b03      	cmp	r3, #3
 801091c:	d008      	beq.n	8010930 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	8b5b      	ldrh	r3, [r3, #26]
 8010922:	f043 0302 	orr.w	r3, r3, #2
 8010926:	b29a      	uxth	r2, r3
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801092c:	2300      	movs	r3, #0
 801092e:	e361      	b.n	8010ff4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	8b5b      	ldrh	r3, [r3, #26]
 8010934:	f003 0310 	and.w	r3, r3, #16
 8010938:	2b00      	cmp	r3, #0
 801093a:	d103      	bne.n	8010944 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801093c:	4b70      	ldr	r3, [pc, #448]	; (8010b00 <tcp_process+0x2cc>)
 801093e:	681a      	ldr	r2, [r3, #0]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2200      	movs	r2, #0
 8010948:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
  pcb->persist_probe = 0;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2200      	movs	r2, #0
 8010950:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f001 f875 	bl	8011a44 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	7d1b      	ldrb	r3, [r3, #20]
 801095e:	3b02      	subs	r3, #2
 8010960:	2b07      	cmp	r3, #7
 8010962:	f200 8337 	bhi.w	8010fd4 <tcp_process+0x7a0>
 8010966:	a201      	add	r2, pc, #4	; (adr r2, 801096c <tcp_process+0x138>)
 8010968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801096c:	0801098d 	.word	0x0801098d
 8010970:	08010bbd 	.word	0x08010bbd
 8010974:	08010d35 	.word	0x08010d35
 8010978:	08010d5f 	.word	0x08010d5f
 801097c:	08010e83 	.word	0x08010e83
 8010980:	08010d35 	.word	0x08010d35
 8010984:	08010f0f 	.word	0x08010f0f
 8010988:	08010f9f 	.word	0x08010f9f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801098c:	4b57      	ldr	r3, [pc, #348]	; (8010aec <tcp_process+0x2b8>)
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	f003 0310 	and.w	r3, r3, #16
 8010994:	2b00      	cmp	r3, #0
 8010996:	f000 80e4 	beq.w	8010b62 <tcp_process+0x32e>
 801099a:	4b54      	ldr	r3, [pc, #336]	; (8010aec <tcp_process+0x2b8>)
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	f003 0302 	and.w	r3, r3, #2
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f000 80dd 	beq.w	8010b62 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109ac:	1c5a      	adds	r2, r3, #1
 80109ae:	4b50      	ldr	r3, [pc, #320]	; (8010af0 <tcp_process+0x2bc>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	429a      	cmp	r2, r3
 80109b4:	f040 80d5 	bne.w	8010b62 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80109b8:	4b4e      	ldr	r3, [pc, #312]	; (8010af4 <tcp_process+0x2c0>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	1c5a      	adds	r2, r3, #1
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80109ca:	4b49      	ldr	r3, [pc, #292]	; (8010af0 <tcp_process+0x2bc>)
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80109d2:	4b4c      	ldr	r3, [pc, #304]	; (8010b04 <tcp_process+0x2d0>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	89db      	ldrh	r3, [r3, #14]
 80109d8:	b29a      	uxth	r2, r3
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80109ec:	4b41      	ldr	r3, [pc, #260]	; (8010af4 <tcp_process+0x2c0>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	1e5a      	subs	r2, r3, #1
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2204      	movs	r2, #4
 80109fa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	3304      	adds	r3, #4
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7fa fc39 	bl	800b27c <ip4_route>
 8010a0a:	4601      	mov	r1, r0
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	3304      	adds	r3, #4
 8010a10:	461a      	mov	r2, r3
 8010a12:	4620      	mov	r0, r4
 8010a14:	f7ff f8a2 	bl	800fb5c <tcp_eff_send_mss_netif>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	461a      	mov	r2, r3
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a24:	009a      	lsls	r2, r3, #2
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a2a:	005b      	lsls	r3, r3, #1
 8010a2c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010a30:	428b      	cmp	r3, r1
 8010a32:	bf38      	it	cc
 8010a34:	460b      	movcc	r3, r1
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d204      	bcs.n	8010a44 <tcp_process+0x210>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	e00d      	b.n	8010a60 <tcp_process+0x22c>
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a48:	005b      	lsls	r3, r3, #1
 8010a4a:	f241 121c 	movw	r2, #4380	; 0x111c
 8010a4e:	4293      	cmp	r3, r2
 8010a50:	d904      	bls.n	8010a5c <tcp_process+0x228>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a56:	005b      	lsls	r3, r3, #1
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	e001      	b.n	8010a60 <tcp_process+0x22c>
 8010a5c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010a60:	687a      	ldr	r2, [r7, #4]
 8010a62:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d106      	bne.n	8010a7e <tcp_process+0x24a>
 8010a70:	4b1b      	ldr	r3, [pc, #108]	; (8010ae0 <tcp_process+0x2ac>)
 8010a72:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010a76:	4924      	ldr	r1, [pc, #144]	; (8010b08 <tcp_process+0x2d4>)
 8010a78:	481b      	ldr	r0, [pc, #108]	; (8010ae8 <tcp_process+0x2b4>)
 8010a7a:	f004 fd2b 	bl	80154d4 <iprintf>
        --pcb->snd_queuelen;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a84:	3b01      	subs	r3, #1
 8010a86:	b29a      	uxth	r2, r3
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a92:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d111      	bne.n	8010abe <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a9e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010aa0:	69fb      	ldr	r3, [r7, #28]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d106      	bne.n	8010ab4 <tcp_process+0x280>
 8010aa6:	4b0e      	ldr	r3, [pc, #56]	; (8010ae0 <tcp_process+0x2ac>)
 8010aa8:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010aac:	4917      	ldr	r1, [pc, #92]	; (8010b0c <tcp_process+0x2d8>)
 8010aae:	480e      	ldr	r0, [pc, #56]	; (8010ae8 <tcp_process+0x2b4>)
 8010ab0:	f004 fd10 	bl	80154d4 <iprintf>
          pcb->unsent = rseg->next;
 8010ab4:	69fb      	ldr	r3, [r7, #28]
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	66da      	str	r2, [r3, #108]	; 0x6c
 8010abc:	e003      	b.n	8010ac6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010abe:	69fb      	ldr	r3, [r7, #28]
 8010ac0:	681a      	ldr	r2, [r3, #0]
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010ac6:	69f8      	ldr	r0, [r7, #28]
 8010ac8:	f7fe fcae 	bl	800f428 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d11d      	bne.n	8010b10 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ada:	861a      	strh	r2, [r3, #48]	; 0x30
 8010adc:	e01f      	b.n	8010b1e <tcp_process+0x2ea>
 8010ade:	bf00      	nop
 8010ae0:	0801acb0 	.word	0x0801acb0
 8010ae4:	0801af24 	.word	0x0801af24
 8010ae8:	0801ad38 	.word	0x0801ad38
 8010aec:	200068f8 	.word	0x200068f8
 8010af0:	200068f0 	.word	0x200068f0
 8010af4:	200068ec 	.word	0x200068ec
 8010af8:	0801af40 	.word	0x0801af40
 8010afc:	200068f9 	.word	0x200068f9
 8010b00:	2000cfc8 	.word	0x2000cfc8
 8010b04:	200068dc 	.word	0x200068dc
 8010b08:	0801af60 	.word	0x0801af60
 8010b0c:	0801af78 	.word	0x0801af78
        } else {
          pcb->rtime = 0;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2200      	movs	r2, #0
 8010b14:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d00a      	beq.n	8010b3e <tcp_process+0x30a>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b2e:	687a      	ldr	r2, [r7, #4]
 8010b30:	6910      	ldr	r0, [r2, #16]
 8010b32:	2200      	movs	r2, #0
 8010b34:	6879      	ldr	r1, [r7, #4]
 8010b36:	4798      	blx	r3
 8010b38:	4603      	mov	r3, r0
 8010b3a:	76bb      	strb	r3, [r7, #26]
 8010b3c:	e001      	b.n	8010b42 <tcp_process+0x30e>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010b42:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010b46:	f113 0f0d 	cmn.w	r3, #13
 8010b4a:	d102      	bne.n	8010b52 <tcp_process+0x31e>
          return ERR_ABRT;
 8010b4c:	f06f 030c 	mvn.w	r3, #12
 8010b50:	e250      	b.n	8010ff4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	8b5b      	ldrh	r3, [r3, #26]
 8010b56:	f043 0302 	orr.w	r3, r3, #2
 8010b5a:	b29a      	uxth	r2, r3
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010b60:	e23a      	b.n	8010fd8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010b62:	4b9d      	ldr	r3, [pc, #628]	; (8010dd8 <tcp_process+0x5a4>)
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	f003 0310 	and.w	r3, r3, #16
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	f000 8234 	beq.w	8010fd8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b70:	4b9a      	ldr	r3, [pc, #616]	; (8010ddc <tcp_process+0x5a8>)
 8010b72:	6819      	ldr	r1, [r3, #0]
 8010b74:	4b9a      	ldr	r3, [pc, #616]	; (8010de0 <tcp_process+0x5ac>)
 8010b76:	881b      	ldrh	r3, [r3, #0]
 8010b78:	461a      	mov	r2, r3
 8010b7a:	4b9a      	ldr	r3, [pc, #616]	; (8010de4 <tcp_process+0x5b0>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b80:	4b99      	ldr	r3, [pc, #612]	; (8010de8 <tcp_process+0x5b4>)
 8010b82:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b84:	885b      	ldrh	r3, [r3, #2]
 8010b86:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b88:	4a97      	ldr	r2, [pc, #604]	; (8010de8 <tcp_process+0x5b4>)
 8010b8a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b8c:	8812      	ldrh	r2, [r2, #0]
 8010b8e:	b292      	uxth	r2, r2
 8010b90:	9202      	str	r2, [sp, #8]
 8010b92:	9301      	str	r3, [sp, #4]
 8010b94:	4b95      	ldr	r3, [pc, #596]	; (8010dec <tcp_process+0x5b8>)
 8010b96:	9300      	str	r3, [sp, #0]
 8010b98:	4b95      	ldr	r3, [pc, #596]	; (8010df0 <tcp_process+0x5bc>)
 8010b9a:	4602      	mov	r2, r0
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f002 fd35 	bl	801360c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010ba8:	2b05      	cmp	r3, #5
 8010baa:	f200 8215 	bhi.w	8010fd8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f002 faf3 	bl	80131a0 <tcp_rexmit_rto>
      break;
 8010bba:	e20d      	b.n	8010fd8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010bbc:	4b86      	ldr	r3, [pc, #536]	; (8010dd8 <tcp_process+0x5a4>)
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	f003 0310 	and.w	r3, r3, #16
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	f000 80a1 	beq.w	8010d0c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010bca:	4b84      	ldr	r3, [pc, #528]	; (8010ddc <tcp_process+0x5a8>)
 8010bcc:	681a      	ldr	r2, [r3, #0]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bd2:	1ad3      	subs	r3, r2, r3
 8010bd4:	3b01      	subs	r3, #1
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	db7e      	blt.n	8010cd8 <tcp_process+0x4a4>
 8010bda:	4b80      	ldr	r3, [pc, #512]	; (8010ddc <tcp_process+0x5a8>)
 8010bdc:	681a      	ldr	r2, [r3, #0]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010be2:	1ad3      	subs	r3, r2, r3
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	dc77      	bgt.n	8010cd8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2204      	movs	r2, #4
 8010bec:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d102      	bne.n	8010bfc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010bf6:	23fa      	movs	r3, #250	; 0xfa
 8010bf8:	76bb      	strb	r3, [r7, #26]
 8010bfa:	e01d      	b.n	8010c38 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c00:	699b      	ldr	r3, [r3, #24]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d106      	bne.n	8010c14 <tcp_process+0x3e0>
 8010c06:	4b7b      	ldr	r3, [pc, #492]	; (8010df4 <tcp_process+0x5c0>)
 8010c08:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010c0c:	497a      	ldr	r1, [pc, #488]	; (8010df8 <tcp_process+0x5c4>)
 8010c0e:	487b      	ldr	r0, [pc, #492]	; (8010dfc <tcp_process+0x5c8>)
 8010c10:	f004 fc60 	bl	80154d4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c18:	699b      	ldr	r3, [r3, #24]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d00a      	beq.n	8010c34 <tcp_process+0x400>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c22:	699b      	ldr	r3, [r3, #24]
 8010c24:	687a      	ldr	r2, [r7, #4]
 8010c26:	6910      	ldr	r0, [r2, #16]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	6879      	ldr	r1, [r7, #4]
 8010c2c:	4798      	blx	r3
 8010c2e:	4603      	mov	r3, r0
 8010c30:	76bb      	strb	r3, [r7, #26]
 8010c32:	e001      	b.n	8010c38 <tcp_process+0x404>
 8010c34:	23f0      	movs	r3, #240	; 0xf0
 8010c36:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010c38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d00a      	beq.n	8010c56 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010c40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010c44:	f113 0f0d 	cmn.w	r3, #13
 8010c48:	d002      	beq.n	8010c50 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f7fd fd5c 	bl	800e708 <tcp_abort>
            }
            return ERR_ABRT;
 8010c50:	f06f 030c 	mvn.w	r3, #12
 8010c54:	e1ce      	b.n	8010ff4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 fa58 	bl	801110c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010c5c:	4b68      	ldr	r3, [pc, #416]	; (8010e00 <tcp_process+0x5cc>)
 8010c5e:	881b      	ldrh	r3, [r3, #0]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d005      	beq.n	8010c70 <tcp_process+0x43c>
            recv_acked--;
 8010c64:	4b66      	ldr	r3, [pc, #408]	; (8010e00 <tcp_process+0x5cc>)
 8010c66:	881b      	ldrh	r3, [r3, #0]
 8010c68:	3b01      	subs	r3, #1
 8010c6a:	b29a      	uxth	r2, r3
 8010c6c:	4b64      	ldr	r3, [pc, #400]	; (8010e00 <tcp_process+0x5cc>)
 8010c6e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c74:	009a      	lsls	r2, r3, #2
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c7a:	005b      	lsls	r3, r3, #1
 8010c7c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010c80:	428b      	cmp	r3, r1
 8010c82:	bf38      	it	cc
 8010c84:	460b      	movcc	r3, r1
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d204      	bcs.n	8010c94 <tcp_process+0x460>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c8e:	009b      	lsls	r3, r3, #2
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	e00d      	b.n	8010cb0 <tcp_process+0x47c>
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c98:	005b      	lsls	r3, r3, #1
 8010c9a:	f241 121c 	movw	r2, #4380	; 0x111c
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d904      	bls.n	8010cac <tcp_process+0x478>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ca6:	005b      	lsls	r3, r3, #1
 8010ca8:	b29b      	uxth	r3, r3
 8010caa:	e001      	b.n	8010cb0 <tcp_process+0x47c>
 8010cac:	f241 131c 	movw	r3, #4380	; 0x111c
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010cb6:	4b53      	ldr	r3, [pc, #332]	; (8010e04 <tcp_process+0x5d0>)
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	f003 0320 	and.w	r3, r3, #32
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d037      	beq.n	8010d32 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	8b5b      	ldrh	r3, [r3, #26]
 8010cc6:	f043 0302 	orr.w	r3, r3, #2
 8010cca:	b29a      	uxth	r2, r3
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2207      	movs	r2, #7
 8010cd4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010cd6:	e02c      	b.n	8010d32 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cd8:	4b40      	ldr	r3, [pc, #256]	; (8010ddc <tcp_process+0x5a8>)
 8010cda:	6819      	ldr	r1, [r3, #0]
 8010cdc:	4b40      	ldr	r3, [pc, #256]	; (8010de0 <tcp_process+0x5ac>)
 8010cde:	881b      	ldrh	r3, [r3, #0]
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	4b40      	ldr	r3, [pc, #256]	; (8010de4 <tcp_process+0x5b0>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ce8:	4b3f      	ldr	r3, [pc, #252]	; (8010de8 <tcp_process+0x5b4>)
 8010cea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cec:	885b      	ldrh	r3, [r3, #2]
 8010cee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010cf0:	4a3d      	ldr	r2, [pc, #244]	; (8010de8 <tcp_process+0x5b4>)
 8010cf2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cf4:	8812      	ldrh	r2, [r2, #0]
 8010cf6:	b292      	uxth	r2, r2
 8010cf8:	9202      	str	r2, [sp, #8]
 8010cfa:	9301      	str	r3, [sp, #4]
 8010cfc:	4b3b      	ldr	r3, [pc, #236]	; (8010dec <tcp_process+0x5b8>)
 8010cfe:	9300      	str	r3, [sp, #0]
 8010d00:	4b3b      	ldr	r3, [pc, #236]	; (8010df0 <tcp_process+0x5bc>)
 8010d02:	4602      	mov	r2, r0
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f002 fc81 	bl	801360c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010d0a:	e167      	b.n	8010fdc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010d0c:	4b32      	ldr	r3, [pc, #200]	; (8010dd8 <tcp_process+0x5a4>)
 8010d0e:	781b      	ldrb	r3, [r3, #0]
 8010d10:	f003 0302 	and.w	r3, r3, #2
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	f000 8161 	beq.w	8010fdc <tcp_process+0x7a8>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d1e:	1e5a      	subs	r2, r3, #1
 8010d20:	4b30      	ldr	r3, [pc, #192]	; (8010de4 <tcp_process+0x5b0>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	429a      	cmp	r2, r3
 8010d26:	f040 8159 	bne.w	8010fdc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f002 fa5a 	bl	80131e4 <tcp_rexmit>
      break;
 8010d30:	e154      	b.n	8010fdc <tcp_process+0x7a8>
 8010d32:	e153      	b.n	8010fdc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f000 f9e9 	bl	801110c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010d3a:	4b32      	ldr	r3, [pc, #200]	; (8010e04 <tcp_process+0x5d0>)
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	f003 0320 	and.w	r3, r3, #32
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	f000 814c 	beq.w	8010fe0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	8b5b      	ldrh	r3, [r3, #26]
 8010d4c:	f043 0302 	orr.w	r3, r3, #2
 8010d50:	b29a      	uxth	r2, r3
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2207      	movs	r2, #7
 8010d5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010d5c:	e140      	b.n	8010fe0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f000 f9d4 	bl	801110c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010d64:	4b27      	ldr	r3, [pc, #156]	; (8010e04 <tcp_process+0x5d0>)
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	f003 0320 	and.w	r3, r3, #32
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d071      	beq.n	8010e54 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010d70:	4b19      	ldr	r3, [pc, #100]	; (8010dd8 <tcp_process+0x5a4>)
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	f003 0310 	and.w	r3, r3, #16
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d060      	beq.n	8010e3e <tcp_process+0x60a>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d80:	4b16      	ldr	r3, [pc, #88]	; (8010ddc <tcp_process+0x5a8>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d15a      	bne.n	8010e3e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d156      	bne.n	8010e3e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	8b5b      	ldrh	r3, [r3, #26]
 8010d94:	f043 0302 	orr.w	r3, r3, #2
 8010d98:	b29a      	uxth	r2, r3
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f7fe fde6 	bl	800f970 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010da4:	4b18      	ldr	r3, [pc, #96]	; (8010e08 <tcp_process+0x5d4>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d105      	bne.n	8010dba <tcp_process+0x586>
 8010dae:	4b16      	ldr	r3, [pc, #88]	; (8010e08 <tcp_process+0x5d4>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	68db      	ldr	r3, [r3, #12]
 8010db4:	4a14      	ldr	r2, [pc, #80]	; (8010e08 <tcp_process+0x5d4>)
 8010db6:	6013      	str	r3, [r2, #0]
 8010db8:	e02e      	b.n	8010e18 <tcp_process+0x5e4>
 8010dba:	4b13      	ldr	r3, [pc, #76]	; (8010e08 <tcp_process+0x5d4>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	617b      	str	r3, [r7, #20]
 8010dc0:	e027      	b.n	8010e12 <tcp_process+0x5de>
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	68db      	ldr	r3, [r3, #12]
 8010dc6:	687a      	ldr	r2, [r7, #4]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d11f      	bne.n	8010e0c <tcp_process+0x5d8>
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	68da      	ldr	r2, [r3, #12]
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	60da      	str	r2, [r3, #12]
 8010dd4:	e020      	b.n	8010e18 <tcp_process+0x5e4>
 8010dd6:	bf00      	nop
 8010dd8:	200068f8 	.word	0x200068f8
 8010ddc:	200068f0 	.word	0x200068f0
 8010de0:	200068f6 	.word	0x200068f6
 8010de4:	200068ec 	.word	0x200068ec
 8010de8:	200068dc 	.word	0x200068dc
 8010dec:	20006a94 	.word	0x20006a94
 8010df0:	20006a98 	.word	0x20006a98
 8010df4:	0801acb0 	.word	0x0801acb0
 8010df8:	0801af8c 	.word	0x0801af8c
 8010dfc:	0801ad38 	.word	0x0801ad38
 8010e00:	200068f4 	.word	0x200068f4
 8010e04:	200068f9 	.word	0x200068f9
 8010e08:	2000cfc4 	.word	0x2000cfc4
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	68db      	ldr	r3, [r3, #12]
 8010e10:	617b      	str	r3, [r7, #20]
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d1d4      	bne.n	8010dc2 <tcp_process+0x58e>
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	60da      	str	r2, [r3, #12]
 8010e1e:	4b77      	ldr	r3, [pc, #476]	; (8010ffc <tcp_process+0x7c8>)
 8010e20:	2201      	movs	r2, #1
 8010e22:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	220a      	movs	r2, #10
 8010e28:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010e2a:	4b75      	ldr	r3, [pc, #468]	; (8011000 <tcp_process+0x7cc>)
 8010e2c:	681a      	ldr	r2, [r3, #0]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	60da      	str	r2, [r3, #12]
 8010e32:	4a73      	ldr	r2, [pc, #460]	; (8011000 <tcp_process+0x7cc>)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6013      	str	r3, [r2, #0]
 8010e38:	f002 fdaa 	bl	8013990 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010e3c:	e0d2      	b.n	8010fe4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	8b5b      	ldrh	r3, [r3, #26]
 8010e42:	f043 0302 	orr.w	r3, r3, #2
 8010e46:	b29a      	uxth	r2, r3
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2208      	movs	r2, #8
 8010e50:	751a      	strb	r2, [r3, #20]
      break;
 8010e52:	e0c7      	b.n	8010fe4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010e54:	4b6b      	ldr	r3, [pc, #428]	; (8011004 <tcp_process+0x7d0>)
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	f003 0310 	and.w	r3, r3, #16
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	f000 80c1 	beq.w	8010fe4 <tcp_process+0x7b0>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e66:	4b68      	ldr	r3, [pc, #416]	; (8011008 <tcp_process+0x7d4>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	f040 80ba 	bne.w	8010fe4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	f040 80b5 	bne.w	8010fe4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2206      	movs	r2, #6
 8010e7e:	751a      	strb	r2, [r3, #20]
      break;
 8010e80:	e0b0      	b.n	8010fe4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f000 f942 	bl	801110c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010e88:	4b60      	ldr	r3, [pc, #384]	; (801100c <tcp_process+0x7d8>)
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	f003 0320 	and.w	r3, r3, #32
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	f000 80a9 	beq.w	8010fe8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	8b5b      	ldrh	r3, [r3, #26]
 8010e9a:	f043 0302 	orr.w	r3, r3, #2
 8010e9e:	b29a      	uxth	r2, r3
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f7fe fd63 	bl	800f970 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010eaa:	4b59      	ldr	r3, [pc, #356]	; (8011010 <tcp_process+0x7dc>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	687a      	ldr	r2, [r7, #4]
 8010eb0:	429a      	cmp	r2, r3
 8010eb2:	d105      	bne.n	8010ec0 <tcp_process+0x68c>
 8010eb4:	4b56      	ldr	r3, [pc, #344]	; (8011010 <tcp_process+0x7dc>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	68db      	ldr	r3, [r3, #12]
 8010eba:	4a55      	ldr	r2, [pc, #340]	; (8011010 <tcp_process+0x7dc>)
 8010ebc:	6013      	str	r3, [r2, #0]
 8010ebe:	e013      	b.n	8010ee8 <tcp_process+0x6b4>
 8010ec0:	4b53      	ldr	r3, [pc, #332]	; (8011010 <tcp_process+0x7dc>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	613b      	str	r3, [r7, #16]
 8010ec6:	e00c      	b.n	8010ee2 <tcp_process+0x6ae>
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	68db      	ldr	r3, [r3, #12]
 8010ecc:	687a      	ldr	r2, [r7, #4]
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d104      	bne.n	8010edc <tcp_process+0x6a8>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	68da      	ldr	r2, [r3, #12]
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	60da      	str	r2, [r3, #12]
 8010eda:	e005      	b.n	8010ee8 <tcp_process+0x6b4>
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	68db      	ldr	r3, [r3, #12]
 8010ee0:	613b      	str	r3, [r7, #16]
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d1ef      	bne.n	8010ec8 <tcp_process+0x694>
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2200      	movs	r2, #0
 8010eec:	60da      	str	r2, [r3, #12]
 8010eee:	4b43      	ldr	r3, [pc, #268]	; (8010ffc <tcp_process+0x7c8>)
 8010ef0:	2201      	movs	r2, #1
 8010ef2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	220a      	movs	r2, #10
 8010ef8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010efa:	4b41      	ldr	r3, [pc, #260]	; (8011000 <tcp_process+0x7cc>)
 8010efc:	681a      	ldr	r2, [r3, #0]
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	60da      	str	r2, [r3, #12]
 8010f02:	4a3f      	ldr	r2, [pc, #252]	; (8011000 <tcp_process+0x7cc>)
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6013      	str	r3, [r2, #0]
 8010f08:	f002 fd42 	bl	8013990 <tcp_timer_needed>
      }
      break;
 8010f0c:	e06c      	b.n	8010fe8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f000 f8fc 	bl	801110c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010f14:	4b3b      	ldr	r3, [pc, #236]	; (8011004 <tcp_process+0x7d0>)
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	f003 0310 	and.w	r3, r3, #16
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d065      	beq.n	8010fec <tcp_process+0x7b8>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f24:	4b38      	ldr	r3, [pc, #224]	; (8011008 <tcp_process+0x7d4>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d15f      	bne.n	8010fec <tcp_process+0x7b8>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d15b      	bne.n	8010fec <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f7fe fd1b 	bl	800f970 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010f3a:	4b35      	ldr	r3, [pc, #212]	; (8011010 <tcp_process+0x7dc>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	687a      	ldr	r2, [r7, #4]
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d105      	bne.n	8010f50 <tcp_process+0x71c>
 8010f44:	4b32      	ldr	r3, [pc, #200]	; (8011010 <tcp_process+0x7dc>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	4a31      	ldr	r2, [pc, #196]	; (8011010 <tcp_process+0x7dc>)
 8010f4c:	6013      	str	r3, [r2, #0]
 8010f4e:	e013      	b.n	8010f78 <tcp_process+0x744>
 8010f50:	4b2f      	ldr	r3, [pc, #188]	; (8011010 <tcp_process+0x7dc>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	60fb      	str	r3, [r7, #12]
 8010f56:	e00c      	b.n	8010f72 <tcp_process+0x73e>
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	68db      	ldr	r3, [r3, #12]
 8010f5c:	687a      	ldr	r2, [r7, #4]
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d104      	bne.n	8010f6c <tcp_process+0x738>
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	68da      	ldr	r2, [r3, #12]
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	60da      	str	r2, [r3, #12]
 8010f6a:	e005      	b.n	8010f78 <tcp_process+0x744>
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	68db      	ldr	r3, [r3, #12]
 8010f70:	60fb      	str	r3, [r7, #12]
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d1ef      	bne.n	8010f58 <tcp_process+0x724>
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	60da      	str	r2, [r3, #12]
 8010f7e:	4b1f      	ldr	r3, [pc, #124]	; (8010ffc <tcp_process+0x7c8>)
 8010f80:	2201      	movs	r2, #1
 8010f82:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	220a      	movs	r2, #10
 8010f88:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010f8a:	4b1d      	ldr	r3, [pc, #116]	; (8011000 <tcp_process+0x7cc>)
 8010f8c:	681a      	ldr	r2, [r3, #0]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	60da      	str	r2, [r3, #12]
 8010f92:	4a1b      	ldr	r2, [pc, #108]	; (8011000 <tcp_process+0x7cc>)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6013      	str	r3, [r2, #0]
 8010f98:	f002 fcfa 	bl	8013990 <tcp_timer_needed>
      }
      break;
 8010f9c:	e026      	b.n	8010fec <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	f000 f8b4 	bl	801110c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010fa4:	4b17      	ldr	r3, [pc, #92]	; (8011004 <tcp_process+0x7d0>)
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	f003 0310 	and.w	r3, r3, #16
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d01f      	beq.n	8010ff0 <tcp_process+0x7bc>
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010fb4:	4b14      	ldr	r3, [pc, #80]	; (8011008 <tcp_process+0x7d4>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d119      	bne.n	8010ff0 <tcp_process+0x7bc>
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d115      	bne.n	8010ff0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010fc4:	4b11      	ldr	r3, [pc, #68]	; (801100c <tcp_process+0x7d8>)
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	f043 0310 	orr.w	r3, r3, #16
 8010fcc:	b2da      	uxtb	r2, r3
 8010fce:	4b0f      	ldr	r3, [pc, #60]	; (801100c <tcp_process+0x7d8>)
 8010fd0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010fd2:	e00d      	b.n	8010ff0 <tcp_process+0x7bc>
    default:
      break;
 8010fd4:	bf00      	nop
 8010fd6:	e00c      	b.n	8010ff2 <tcp_process+0x7be>
      break;
 8010fd8:	bf00      	nop
 8010fda:	e00a      	b.n	8010ff2 <tcp_process+0x7be>
      break;
 8010fdc:	bf00      	nop
 8010fde:	e008      	b.n	8010ff2 <tcp_process+0x7be>
      break;
 8010fe0:	bf00      	nop
 8010fe2:	e006      	b.n	8010ff2 <tcp_process+0x7be>
      break;
 8010fe4:	bf00      	nop
 8010fe6:	e004      	b.n	8010ff2 <tcp_process+0x7be>
      break;
 8010fe8:	bf00      	nop
 8010fea:	e002      	b.n	8010ff2 <tcp_process+0x7be>
      break;
 8010fec:	bf00      	nop
 8010fee:	e000      	b.n	8010ff2 <tcp_process+0x7be>
      break;
 8010ff0:	bf00      	nop
  }
  return ERR_OK;
 8010ff2:	2300      	movs	r3, #0
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3724      	adds	r7, #36	; 0x24
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd90      	pop	{r4, r7, pc}
 8010ffc:	2000cfc0 	.word	0x2000cfc0
 8011000:	2000cfd4 	.word	0x2000cfd4
 8011004:	200068f8 	.word	0x200068f8
 8011008:	200068f0 	.word	0x200068f0
 801100c:	200068f9 	.word	0x200068f9
 8011010:	2000cfc4 	.word	0x2000cfc4

08011014 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011014:	b5b0      	push	{r4, r5, r7, lr}
 8011016:	b086      	sub	sp, #24
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	607a      	str	r2, [r7, #4]
 8011020:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011022:	e03e      	b.n	80110a2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	4618      	mov	r0, r3
 8011034:	f7fc fe62 	bl	800dcfc <pbuf_clen>
 8011038:	4603      	mov	r3, r0
 801103a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011042:	8a7a      	ldrh	r2, [r7, #18]
 8011044:	429a      	cmp	r2, r3
 8011046:	d906      	bls.n	8011056 <tcp_free_acked_segments+0x42>
 8011048:	4b2a      	ldr	r3, [pc, #168]	; (80110f4 <tcp_free_acked_segments+0xe0>)
 801104a:	f240 4257 	movw	r2, #1111	; 0x457
 801104e:	492a      	ldr	r1, [pc, #168]	; (80110f8 <tcp_free_acked_segments+0xe4>)
 8011050:	482a      	ldr	r0, [pc, #168]	; (80110fc <tcp_free_acked_segments+0xe8>)
 8011052:	f004 fa3f 	bl	80154d4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801105c:	8a7b      	ldrh	r3, [r7, #18]
 801105e:	1ad3      	subs	r3, r2, r3
 8011060:	b29a      	uxth	r2, r3
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	891a      	ldrh	r2, [r3, #8]
 801106c:	4b24      	ldr	r3, [pc, #144]	; (8011100 <tcp_free_acked_segments+0xec>)
 801106e:	881b      	ldrh	r3, [r3, #0]
 8011070:	4413      	add	r3, r2
 8011072:	b29a      	uxth	r2, r3
 8011074:	4b22      	ldr	r3, [pc, #136]	; (8011100 <tcp_free_acked_segments+0xec>)
 8011076:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011078:	6978      	ldr	r0, [r7, #20]
 801107a:	f7fe f9d5 	bl	800f428 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011084:	2b00      	cmp	r3, #0
 8011086:	d00c      	beq.n	80110a2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d109      	bne.n	80110a2 <tcp_free_acked_segments+0x8e>
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d106      	bne.n	80110a2 <tcp_free_acked_segments+0x8e>
 8011094:	4b17      	ldr	r3, [pc, #92]	; (80110f4 <tcp_free_acked_segments+0xe0>)
 8011096:	f240 4262 	movw	r2, #1122	; 0x462
 801109a:	491a      	ldr	r1, [pc, #104]	; (8011104 <tcp_free_acked_segments+0xf0>)
 801109c:	4817      	ldr	r0, [pc, #92]	; (80110fc <tcp_free_acked_segments+0xe8>)
 801109e:	f004 fa19 	bl	80154d4 <iprintf>
  while (seg_list != NULL &&
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d020      	beq.n	80110ea <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	4618      	mov	r0, r3
 80110b0:	f7fb fa21 	bl	800c4f6 <lwip_htonl>
 80110b4:	4604      	mov	r4, r0
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	891b      	ldrh	r3, [r3, #8]
 80110ba:	461d      	mov	r5, r3
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	899b      	ldrh	r3, [r3, #12]
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7fb fa01 	bl	800c4cc <lwip_htons>
 80110ca:	4603      	mov	r3, r0
 80110cc:	b2db      	uxtb	r3, r3
 80110ce:	f003 0303 	and.w	r3, r3, #3
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d001      	beq.n	80110da <tcp_free_acked_segments+0xc6>
 80110d6:	2301      	movs	r3, #1
 80110d8:	e000      	b.n	80110dc <tcp_free_acked_segments+0xc8>
 80110da:	2300      	movs	r3, #0
 80110dc:	442b      	add	r3, r5
 80110de:	18e2      	adds	r2, r4, r3
 80110e0:	4b09      	ldr	r3, [pc, #36]	; (8011108 <tcp_free_acked_segments+0xf4>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	dd9c      	ble.n	8011024 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80110ea:	68bb      	ldr	r3, [r7, #8]
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	3718      	adds	r7, #24
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bdb0      	pop	{r4, r5, r7, pc}
 80110f4:	0801acb0 	.word	0x0801acb0
 80110f8:	0801afac 	.word	0x0801afac
 80110fc:	0801ad38 	.word	0x0801ad38
 8011100:	200068f4 	.word	0x200068f4
 8011104:	0801afd4 	.word	0x0801afd4
 8011108:	200068f0 	.word	0x200068f0

0801110c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801110c:	b590      	push	{r4, r7, lr}
 801110e:	b08d      	sub	sp, #52	; 0x34
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011114:	2300      	movs	r3, #0
 8011116:	62bb      	str	r3, [r7, #40]	; 0x28

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d106      	bne.n	801112c <tcp_receive+0x20>
 801111e:	4ba5      	ldr	r3, [pc, #660]	; (80113b4 <tcp_receive+0x2a8>)
 8011120:	f240 427b 	movw	r2, #1147	; 0x47b
 8011124:	49a4      	ldr	r1, [pc, #656]	; (80113b8 <tcp_receive+0x2ac>)
 8011126:	48a5      	ldr	r0, [pc, #660]	; (80113bc <tcp_receive+0x2b0>)
 8011128:	f004 f9d4 	bl	80154d4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	7d1b      	ldrb	r3, [r3, #20]
 8011130:	2b03      	cmp	r3, #3
 8011132:	d806      	bhi.n	8011142 <tcp_receive+0x36>
 8011134:	4b9f      	ldr	r3, [pc, #636]	; (80113b4 <tcp_receive+0x2a8>)
 8011136:	f240 427c 	movw	r2, #1148	; 0x47c
 801113a:	49a1      	ldr	r1, [pc, #644]	; (80113c0 <tcp_receive+0x2b4>)
 801113c:	489f      	ldr	r0, [pc, #636]	; (80113bc <tcp_receive+0x2b0>)
 801113e:	f004 f9c9 	bl	80154d4 <iprintf>

  if (flags & TCP_ACK) {
 8011142:	4ba0      	ldr	r3, [pc, #640]	; (80113c4 <tcp_receive+0x2b8>)
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	f003 0310 	and.w	r3, r3, #16
 801114a:	2b00      	cmp	r3, #0
 801114c:	f000 8258 	beq.w	8011600 <tcp_receive+0x4f4>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011156:	461a      	mov	r2, r3
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801115c:	4413      	add	r3, r2
 801115e:	61fb      	str	r3, [r7, #28]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011164:	4b98      	ldr	r3, [pc, #608]	; (80113c8 <tcp_receive+0x2bc>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	1ad3      	subs	r3, r2, r3
 801116a:	2b00      	cmp	r3, #0
 801116c:	db1b      	blt.n	80111a6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011172:	4b95      	ldr	r3, [pc, #596]	; (80113c8 <tcp_receive+0x2bc>)
 8011174:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011176:	429a      	cmp	r2, r3
 8011178:	d106      	bne.n	8011188 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801117e:	4b93      	ldr	r3, [pc, #588]	; (80113cc <tcp_receive+0x2c0>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	1ad3      	subs	r3, r2, r3
 8011184:	2b00      	cmp	r3, #0
 8011186:	db0e      	blt.n	80111a6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801118c:	4b8f      	ldr	r3, [pc, #572]	; (80113cc <tcp_receive+0x2c0>)
 801118e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011190:	429a      	cmp	r2, r3
 8011192:	d125      	bne.n	80111e0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011194:	4b8e      	ldr	r3, [pc, #568]	; (80113d0 <tcp_receive+0x2c4>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	89db      	ldrh	r3, [r3, #14]
 801119a:	b29a      	uxth	r2, r3
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d91c      	bls.n	80111e0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80111a6:	4b8a      	ldr	r3, [pc, #552]	; (80113d0 <tcp_receive+0x2c4>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	89db      	ldrh	r3, [r3, #14]
 80111ac:	b29a      	uxth	r2, r3
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d205      	bcs.n	80111d0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80111d0:	4b7d      	ldr	r3, [pc, #500]	; (80113c8 <tcp_receive+0x2bc>)
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80111d8:	4b7c      	ldr	r3, [pc, #496]	; (80113cc <tcp_receive+0x2c0>)
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80111e0:	4b7a      	ldr	r3, [pc, #488]	; (80113cc <tcp_receive+0x2c0>)
 80111e2:	681a      	ldr	r2, [r3, #0]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111e8:	1ad3      	subs	r3, r2, r3
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	dc58      	bgt.n	80112a0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80111ee:	4b79      	ldr	r3, [pc, #484]	; (80113d4 <tcp_receive+0x2c8>)
 80111f0:	881b      	ldrh	r3, [r3, #0]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d14b      	bne.n	801128e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80111fa:	687a      	ldr	r2, [r7, #4]
 80111fc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011200:	4413      	add	r3, r2
 8011202:	69fa      	ldr	r2, [r7, #28]
 8011204:	429a      	cmp	r2, r3
 8011206:	d142      	bne.n	801128e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801120e:	2b00      	cmp	r3, #0
 8011210:	db3d      	blt.n	801128e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011216:	4b6d      	ldr	r3, [pc, #436]	; (80113cc <tcp_receive+0x2c0>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	429a      	cmp	r2, r3
 801121c:	d137      	bne.n	801128e <tcp_receive+0x182>
              found_dupack = 1;
 801121e:	2301      	movs	r3, #1
 8011220:	62bb      	str	r3, [r7, #40]	; 0x28
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011228:	2bff      	cmp	r3, #255	; 0xff
 801122a:	d007      	beq.n	801123c <tcp_receive+0x130>
                ++pcb->dupacks;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011232:	3301      	adds	r3, #1
 8011234:	b2da      	uxtb	r2, r3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011242:	2b03      	cmp	r3, #3
 8011244:	d91b      	bls.n	801127e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011250:	4413      	add	r3, r2
 8011252:	b29a      	uxth	r2, r3
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801125a:	429a      	cmp	r2, r3
 801125c:	d30a      	bcc.n	8011274 <tcp_receive+0x168>
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011268:	4413      	add	r3, r2
 801126a:	b29a      	uxth	r2, r3
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011272:	e004      	b.n	801127e <tcp_receive+0x172>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801127a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011284:	2b02      	cmp	r3, #2
 8011286:	d902      	bls.n	801128e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f002 f817 	bl	80132bc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011290:	2b00      	cmp	r3, #0
 8011292:	f040 815e 	bne.w	8011552 <tcp_receive+0x446>
        pcb->dupacks = 0;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2200      	movs	r2, #0
 801129a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801129e:	e158      	b.n	8011552 <tcp_receive+0x446>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80112a0:	4b4a      	ldr	r3, [pc, #296]	; (80113cc <tcp_receive+0x2c0>)
 80112a2:	681a      	ldr	r2, [r3, #0]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112a8:	1ad3      	subs	r3, r2, r3
 80112aa:	3b01      	subs	r3, #1
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	f2c0 814b 	blt.w	8011548 <tcp_receive+0x43c>
 80112b2:	4b46      	ldr	r3, [pc, #280]	; (80113cc <tcp_receive+0x2c0>)
 80112b4:	681a      	ldr	r2, [r3, #0]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112ba:	1ad3      	subs	r3, r2, r3
 80112bc:	2b00      	cmp	r3, #0
 80112be:	f300 8143 	bgt.w	8011548 <tcp_receive+0x43c>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	8b5b      	ldrh	r3, [r3, #26]
 80112c6:	f003 0304 	and.w	r3, r3, #4
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d010      	beq.n	80112f0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	8b5b      	ldrh	r3, [r3, #26]
 80112d2:	f023 0304 	bic.w	r3, r3, #4
 80112d6:	b29a      	uxth	r2, r3
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2200      	movs	r2, #0
 80112ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2200      	movs	r2, #0
 80112f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80112fe:	10db      	asrs	r3, r3, #3
 8011300:	b21b      	sxth	r3, r3
 8011302:	b29a      	uxth	r2, r3
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801130a:	b29b      	uxth	r3, r3
 801130c:	4413      	add	r3, r2
 801130e:	b29b      	uxth	r3, r3
 8011310:	b21a      	sxth	r2, r3
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011318:	4b2c      	ldr	r3, [pc, #176]	; (80113cc <tcp_receive+0x2c0>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	b29a      	uxth	r2, r3
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011322:	b29b      	uxth	r3, r3
 8011324:	1ad3      	subs	r3, r2, r3
 8011326:	837b      	strh	r3, [r7, #26]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011330:	4b26      	ldr	r3, [pc, #152]	; (80113cc <tcp_receive+0x2c0>)
 8011332:	681a      	ldr	r2, [r3, #0]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	7d1b      	ldrb	r3, [r3, #20]
 801133c:	2b03      	cmp	r3, #3
 801133e:	f240 8094 	bls.w	801146a <tcp_receive+0x35e>
        if (pcb->cwnd < pcb->ssthresh) {
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801134e:	429a      	cmp	r2, r3
 8011350:	d242      	bcs.n	80113d8 <tcp_receive+0x2cc>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	8b5b      	ldrh	r3, [r3, #26]
 8011356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801135a:	2b00      	cmp	r3, #0
 801135c:	d001      	beq.n	8011362 <tcp_receive+0x256>
 801135e:	2301      	movs	r3, #1
 8011360:	e000      	b.n	8011364 <tcp_receive+0x258>
 8011362:	2302      	movs	r3, #2
 8011364:	767b      	strb	r3, [r7, #25]
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011366:	7e7b      	ldrb	r3, [r7, #25]
 8011368:	b29a      	uxth	r2, r3
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801136e:	fb12 f303 	smulbb	r3, r2, r3
 8011372:	b29b      	uxth	r3, r3
 8011374:	8b7a      	ldrh	r2, [r7, #26]
 8011376:	4293      	cmp	r3, r2
 8011378:	bf28      	it	cs
 801137a:	4613      	movcs	r3, r2
 801137c:	82fb      	strh	r3, [r7, #22]
          TCP_WND_INC(pcb->cwnd, increase);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011384:	8afb      	ldrh	r3, [r7, #22]
 8011386:	4413      	add	r3, r2
 8011388:	b29a      	uxth	r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011390:	429a      	cmp	r2, r3
 8011392:	d309      	bcc.n	80113a8 <tcp_receive+0x29c>
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801139a:	8afb      	ldrh	r3, [r7, #22]
 801139c:	4413      	add	r3, r2
 801139e:	b29a      	uxth	r2, r3
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80113a6:	e060      	b.n	801146a <tcp_receive+0x35e>
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80113ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80113b2:	e05a      	b.n	801146a <tcp_receive+0x35e>
 80113b4:	0801acb0 	.word	0x0801acb0
 80113b8:	0801aff4 	.word	0x0801aff4
 80113bc:	0801ad38 	.word	0x0801ad38
 80113c0:	0801b010 	.word	0x0801b010
 80113c4:	200068f8 	.word	0x200068f8
 80113c8:	200068ec 	.word	0x200068ec
 80113cc:	200068f0 	.word	0x200068f0
 80113d0:	200068dc 	.word	0x200068dc
 80113d4:	200068f6 	.word	0x200068f6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80113de:	8b7b      	ldrh	r3, [r7, #26]
 80113e0:	4413      	add	r3, r2
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d309      	bcc.n	8011402 <tcp_receive+0x2f6>
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80113f4:	8b7b      	ldrh	r3, [r7, #26]
 80113f6:	4413      	add	r3, r2
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011400:	e004      	b.n	801140c <tcp_receive+0x300>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011418:	429a      	cmp	r2, r3
 801141a:	d326      	bcc.n	801146a <tcp_receive+0x35e>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011428:	1ad3      	subs	r3, r2, r3
 801142a:	b29a      	uxth	r2, r3
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801143c:	4413      	add	r3, r2
 801143e:	b29a      	uxth	r2, r3
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011446:	429a      	cmp	r2, r3
 8011448:	d30a      	bcc.n	8011460 <tcp_receive+0x354>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011454:	4413      	add	r3, r2
 8011456:	b29a      	uxth	r2, r3
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801145e:	e004      	b.n	801146a <tcp_receive+0x35e>
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011466:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011472:	4a91      	ldr	r2, [pc, #580]	; (80116b8 <tcp_receive+0x5ac>)
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f7ff fdcd 	bl	8011014 <tcp_free_acked_segments>
 801147a:	4602      	mov	r2, r0
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011488:	4a8c      	ldr	r2, [pc, #560]	; (80116bc <tcp_receive+0x5b0>)
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f7ff fdc2 	bl	8011014 <tcp_free_acked_segments>
 8011490:	4602      	mov	r2, r0
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801149a:	2b00      	cmp	r3, #0
 801149c:	d104      	bne.n	80114a8 <tcp_receive+0x39c>
        pcb->rtime = -1;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80114a4:	861a      	strh	r2, [r3, #48]	; 0x30
 80114a6:	e002      	b.n	80114ae <tcp_receive+0x3a2>
      } else {
        pcb->rtime = 0;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2200      	movs	r2, #0
 80114ac:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2200      	movs	r2, #0
 80114b2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d103      	bne.n	80114c4 <tcp_receive+0x3b8>
        pcb->unsent_oversize = 0;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2200      	movs	r2, #0
 80114c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80114ca:	4b7d      	ldr	r3, [pc, #500]	; (80116c0 <tcp_receive+0x5b4>)
 80114cc:	881b      	ldrh	r3, [r3, #0]
 80114ce:	4413      	add	r3, r2
 80114d0:	b29a      	uxth	r2, r3
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	8b5b      	ldrh	r3, [r3, #26]
 80114dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d035      	beq.n	8011550 <tcp_receive+0x444>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d118      	bne.n	801151e <tcp_receive+0x412>
          if ((pcb->unsent == NULL) ||
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d00c      	beq.n	801150e <tcp_receive+0x402>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	685b      	ldr	r3, [r3, #4]
 8011500:	4618      	mov	r0, r3
 8011502:	f7fa fff8 	bl	800c4f6 <lwip_htonl>
 8011506:	4603      	mov	r3, r0
 8011508:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801150a:	2b00      	cmp	r3, #0
 801150c:	dc20      	bgt.n	8011550 <tcp_receive+0x444>
            tcp_clear_flags(pcb, TF_RTO);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	8b5b      	ldrh	r3, [r3, #26]
 8011512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011516:	b29a      	uxth	r2, r3
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801151c:	e018      	b.n	8011550 <tcp_receive+0x444>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011526:	68db      	ldr	r3, [r3, #12]
 8011528:	685b      	ldr	r3, [r3, #4]
 801152a:	4618      	mov	r0, r3
 801152c:	f7fa ffe3 	bl	800c4f6 <lwip_htonl>
 8011530:	4603      	mov	r3, r0
 8011532:	1ae3      	subs	r3, r4, r3
 8011534:	2b00      	cmp	r3, #0
 8011536:	dc0b      	bgt.n	8011550 <tcp_receive+0x444>
          tcp_clear_flags(pcb, TF_RTO);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	8b5b      	ldrh	r3, [r3, #26]
 801153c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011540:	b29a      	uxth	r2, r3
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011546:	e003      	b.n	8011550 <tcp_receive+0x444>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f002 f8b1 	bl	80136b0 <tcp_send_empty_ack>
 801154e:	e000      	b.n	8011552 <tcp_receive+0x446>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011550:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011556:	2b00      	cmp	r3, #0
 8011558:	d052      	beq.n	8011600 <tcp_receive+0x4f4>
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801155e:	4b59      	ldr	r3, [pc, #356]	; (80116c4 <tcp_receive+0x5b8>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	1ad3      	subs	r3, r2, r3
 8011564:	2b00      	cmp	r3, #0
 8011566:	da4b      	bge.n	8011600 <tcp_receive+0x4f4>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011568:	4b57      	ldr	r3, [pc, #348]	; (80116c8 <tcp_receive+0x5bc>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	b29a      	uxth	r2, r3
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011572:	b29b      	uxth	r3, r3
 8011574:	1ad3      	subs	r3, r2, r3
 8011576:	b29b      	uxth	r3, r3
 8011578:	85fb      	strh	r3, [r7, #46]	; 0x2e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801157a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011582:	10db      	asrs	r3, r3, #3
 8011584:	b21b      	sxth	r3, r3
 8011586:	b29b      	uxth	r3, r3
 8011588:	1ad3      	subs	r3, r2, r3
 801158a:	b29b      	uxth	r3, r3
 801158c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pcb->sa = (s16_t)(pcb->sa + m);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011594:	b29a      	uxth	r2, r3
 8011596:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011598:	4413      	add	r3, r2
 801159a:	b29b      	uxth	r3, r3
 801159c:	b21a      	sxth	r2, r3
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80115a2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	da03      	bge.n	80115b2 <tcp_receive+0x4a6>
        m = (s16_t) - m;
 80115aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80115ac:	425b      	negs	r3, r3
 80115ae:	b29b      	uxth	r3, r3
 80115b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80115b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80115ba:	109b      	asrs	r3, r3, #2
 80115bc:	b21b      	sxth	r3, r3
 80115be:	b29b      	uxth	r3, r3
 80115c0:	1ad3      	subs	r3, r2, r3
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pcb->sv = (s16_t)(pcb->sv + m);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80115cc:	b29a      	uxth	r2, r3
 80115ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80115d0:	4413      	add	r3, r2
 80115d2:	b29b      	uxth	r3, r3
 80115d4:	b21a      	sxth	r2, r3
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80115e0:	10db      	asrs	r3, r3, #3
 80115e2:	b21b      	sxth	r3, r3
 80115e4:	b29a      	uxth	r2, r3
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	4413      	add	r3, r2
 80115f0:	b29b      	uxth	r3, r3
 80115f2:	b21a      	sxth	r2, r3
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2200      	movs	r2, #0
 80115fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011600:	4b32      	ldr	r3, [pc, #200]	; (80116cc <tcp_receive+0x5c0>)
 8011602:	881b      	ldrh	r3, [r3, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	f000 81c7 	beq.w	8011998 <tcp_receive+0x88c>
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	7d1b      	ldrb	r3, [r3, #20]
 801160e:	2b06      	cmp	r3, #6
 8011610:	f200 81c2 	bhi.w	8011998 <tcp_receive+0x88c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011618:	4b2d      	ldr	r3, [pc, #180]	; (80116d0 <tcp_receive+0x5c4>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	1ad3      	subs	r3, r2, r3
 801161e:	3b01      	subs	r3, #1
 8011620:	2b00      	cmp	r3, #0
 8011622:	f2c0 8085 	blt.w	8011730 <tcp_receive+0x624>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801162a:	4b28      	ldr	r3, [pc, #160]	; (80116cc <tcp_receive+0x5c0>)
 801162c:	881b      	ldrh	r3, [r3, #0]
 801162e:	4619      	mov	r1, r3
 8011630:	4b27      	ldr	r3, [pc, #156]	; (80116d0 <tcp_receive+0x5c4>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	440b      	add	r3, r1
 8011636:	1ad3      	subs	r3, r2, r3
 8011638:	3301      	adds	r3, #1
 801163a:	2b00      	cmp	r3, #0
 801163c:	dc78      	bgt.n	8011730 <tcp_receive+0x624>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801163e:	4b25      	ldr	r3, [pc, #148]	; (80116d4 <tcp_receive+0x5c8>)
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	627b      	str	r3, [r7, #36]	; 0x24
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011648:	4b21      	ldr	r3, [pc, #132]	; (80116d0 <tcp_receive+0x5c4>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	1ad3      	subs	r3, r2, r3
 801164e:	613b      	str	r3, [r7, #16]
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011650:	4b20      	ldr	r3, [pc, #128]	; (80116d4 <tcp_receive+0x5c8>)
 8011652:	685b      	ldr	r3, [r3, #4]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d106      	bne.n	8011666 <tcp_receive+0x55a>
 8011658:	4b1f      	ldr	r3, [pc, #124]	; (80116d8 <tcp_receive+0x5cc>)
 801165a:	f240 5294 	movw	r2, #1428	; 0x594
 801165e:	491f      	ldr	r1, [pc, #124]	; (80116dc <tcp_receive+0x5d0>)
 8011660:	481f      	ldr	r0, [pc, #124]	; (80116e0 <tcp_receive+0x5d4>)
 8011662:	f003 ff37 	bl	80154d4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801166c:	4293      	cmp	r3, r2
 801166e:	d906      	bls.n	801167e <tcp_receive+0x572>
 8011670:	4b19      	ldr	r3, [pc, #100]	; (80116d8 <tcp_receive+0x5cc>)
 8011672:	f240 5295 	movw	r2, #1429	; 0x595
 8011676:	491b      	ldr	r1, [pc, #108]	; (80116e4 <tcp_receive+0x5d8>)
 8011678:	4819      	ldr	r0, [pc, #100]	; (80116e0 <tcp_receive+0x5d4>)
 801167a:	f003 ff2b 	bl	80154d4 <iprintf>
      off = (u16_t)off32;
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	847b      	strh	r3, [r7, #34]	; 0x22
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011682:	4b14      	ldr	r3, [pc, #80]	; (80116d4 <tcp_receive+0x5c8>)
 8011684:	685b      	ldr	r3, [r3, #4]
 8011686:	891b      	ldrh	r3, [r3, #8]
 8011688:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801168a:	429a      	cmp	r2, r3
 801168c:	d906      	bls.n	801169c <tcp_receive+0x590>
 801168e:	4b12      	ldr	r3, [pc, #72]	; (80116d8 <tcp_receive+0x5cc>)
 8011690:	f240 5297 	movw	r2, #1431	; 0x597
 8011694:	4914      	ldr	r1, [pc, #80]	; (80116e8 <tcp_receive+0x5dc>)
 8011696:	4812      	ldr	r0, [pc, #72]	; (80116e0 <tcp_receive+0x5d4>)
 8011698:	f003 ff1c 	bl	80154d4 <iprintf>
      inseg.len -= off;
 801169c:	4b0d      	ldr	r3, [pc, #52]	; (80116d4 <tcp_receive+0x5c8>)
 801169e:	891a      	ldrh	r2, [r3, #8]
 80116a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80116a2:	1ad3      	subs	r3, r2, r3
 80116a4:	b29a      	uxth	r2, r3
 80116a6:	4b0b      	ldr	r3, [pc, #44]	; (80116d4 <tcp_receive+0x5c8>)
 80116a8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80116aa:	4b0a      	ldr	r3, [pc, #40]	; (80116d4 <tcp_receive+0x5c8>)
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	891a      	ldrh	r2, [r3, #8]
 80116b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80116b2:	1ad3      	subs	r3, r2, r3
 80116b4:	81fb      	strh	r3, [r7, #14]
      while (p->len < off) {
 80116b6:	e027      	b.n	8011708 <tcp_receive+0x5fc>
 80116b8:	0801b02c 	.word	0x0801b02c
 80116bc:	0801b034 	.word	0x0801b034
 80116c0:	200068f4 	.word	0x200068f4
 80116c4:	200068f0 	.word	0x200068f0
 80116c8:	2000cfc8 	.word	0x2000cfc8
 80116cc:	200068f6 	.word	0x200068f6
 80116d0:	200068ec 	.word	0x200068ec
 80116d4:	200068cc 	.word	0x200068cc
 80116d8:	0801acb0 	.word	0x0801acb0
 80116dc:	0801b03c 	.word	0x0801b03c
 80116e0:	0801ad38 	.word	0x0801ad38
 80116e4:	0801b04c 	.word	0x0801b04c
 80116e8:	0801b05c 	.word	0x0801b05c
        off -= p->len;
 80116ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ee:	895b      	ldrh	r3, [r3, #10]
 80116f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80116f2:	1ad3      	subs	r3, r2, r3
 80116f4:	847b      	strh	r3, [r7, #34]	; 0x22
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80116f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f8:	89fa      	ldrh	r2, [r7, #14]
 80116fa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80116fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fe:	2200      	movs	r2, #0
 8011700:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	627b      	str	r3, [r7, #36]	; 0x24
      while (p->len < off) {
 8011708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801170a:	895b      	ldrh	r3, [r3, #10]
 801170c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801170e:	429a      	cmp	r2, r3
 8011710:	d8ec      	bhi.n	80116ec <tcp_receive+0x5e0>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011712:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011714:	4619      	mov	r1, r3
 8011716:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011718:	f7fc f9dc 	bl	800dad4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011720:	4a94      	ldr	r2, [pc, #592]	; (8011974 <tcp_receive+0x868>)
 8011722:	6013      	str	r3, [r2, #0]
 8011724:	4b94      	ldr	r3, [pc, #592]	; (8011978 <tcp_receive+0x86c>)
 8011726:	68db      	ldr	r3, [r3, #12]
 8011728:	4a92      	ldr	r2, [pc, #584]	; (8011974 <tcp_receive+0x868>)
 801172a:	6812      	ldr	r2, [r2, #0]
 801172c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801172e:	e00d      	b.n	801174c <tcp_receive+0x640>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011730:	4b90      	ldr	r3, [pc, #576]	; (8011974 <tcp_receive+0x868>)
 8011732:	681a      	ldr	r2, [r3, #0]
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011738:	1ad3      	subs	r3, r2, r3
 801173a:	2b00      	cmp	r3, #0
 801173c:	da06      	bge.n	801174c <tcp_receive+0x640>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	8b5b      	ldrh	r3, [r3, #26]
 8011742:	f043 0302 	orr.w	r3, r3, #2
 8011746:	b29a      	uxth	r2, r3
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801174c:	4b89      	ldr	r3, [pc, #548]	; (8011974 <tcp_receive+0x868>)
 801174e:	681a      	ldr	r2, [r3, #0]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011754:	1ad3      	subs	r3, r2, r3
 8011756:	2b00      	cmp	r3, #0
 8011758:	f2c0 8106 	blt.w	8011968 <tcp_receive+0x85c>
 801175c:	4b85      	ldr	r3, [pc, #532]	; (8011974 <tcp_receive+0x868>)
 801175e:	681a      	ldr	r2, [r3, #0]
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011764:	6879      	ldr	r1, [r7, #4]
 8011766:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011768:	440b      	add	r3, r1
 801176a:	1ad3      	subs	r3, r2, r3
 801176c:	3301      	adds	r3, #1
 801176e:	2b00      	cmp	r3, #0
 8011770:	f300 80fa 	bgt.w	8011968 <tcp_receive+0x85c>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011778:	4b7e      	ldr	r3, [pc, #504]	; (8011974 <tcp_receive+0x868>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	429a      	cmp	r2, r3
 801177e:	f040 80ef 	bne.w	8011960 <tcp_receive+0x854>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011782:	4b7d      	ldr	r3, [pc, #500]	; (8011978 <tcp_receive+0x86c>)
 8011784:	891c      	ldrh	r4, [r3, #8]
 8011786:	4b7c      	ldr	r3, [pc, #496]	; (8011978 <tcp_receive+0x86c>)
 8011788:	68db      	ldr	r3, [r3, #12]
 801178a:	899b      	ldrh	r3, [r3, #12]
 801178c:	b29b      	uxth	r3, r3
 801178e:	4618      	mov	r0, r3
 8011790:	f7fa fe9c 	bl	800c4cc <lwip_htons>
 8011794:	4603      	mov	r3, r0
 8011796:	b2db      	uxtb	r3, r3
 8011798:	f003 0303 	and.w	r3, r3, #3
 801179c:	2b00      	cmp	r3, #0
 801179e:	d001      	beq.n	80117a4 <tcp_receive+0x698>
 80117a0:	2301      	movs	r3, #1
 80117a2:	e000      	b.n	80117a6 <tcp_receive+0x69a>
 80117a4:	2300      	movs	r3, #0
 80117a6:	4423      	add	r3, r4
 80117a8:	b29a      	uxth	r2, r3
 80117aa:	4b74      	ldr	r3, [pc, #464]	; (801197c <tcp_receive+0x870>)
 80117ac:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80117b2:	4b72      	ldr	r3, [pc, #456]	; (801197c <tcp_receive+0x870>)
 80117b4:	881b      	ldrh	r3, [r3, #0]
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d275      	bcs.n	80118a6 <tcp_receive+0x79a>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80117ba:	4b6f      	ldr	r3, [pc, #444]	; (8011978 <tcp_receive+0x86c>)
 80117bc:	68db      	ldr	r3, [r3, #12]
 80117be:	899b      	ldrh	r3, [r3, #12]
 80117c0:	b29b      	uxth	r3, r3
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7fa fe82 	bl	800c4cc <lwip_htons>
 80117c8:	4603      	mov	r3, r0
 80117ca:	b2db      	uxtb	r3, r3
 80117cc:	f003 0301 	and.w	r3, r3, #1
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d01f      	beq.n	8011814 <tcp_receive+0x708>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80117d4:	4b68      	ldr	r3, [pc, #416]	; (8011978 <tcp_receive+0x86c>)
 80117d6:	68db      	ldr	r3, [r3, #12]
 80117d8:	899b      	ldrh	r3, [r3, #12]
 80117da:	b29b      	uxth	r3, r3
 80117dc:	b21b      	sxth	r3, r3
 80117de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80117e2:	b21c      	sxth	r4, r3
 80117e4:	4b64      	ldr	r3, [pc, #400]	; (8011978 <tcp_receive+0x86c>)
 80117e6:	68db      	ldr	r3, [r3, #12]
 80117e8:	899b      	ldrh	r3, [r3, #12]
 80117ea:	b29b      	uxth	r3, r3
 80117ec:	4618      	mov	r0, r3
 80117ee:	f7fa fe6d 	bl	800c4cc <lwip_htons>
 80117f2:	4603      	mov	r3, r0
 80117f4:	b2db      	uxtb	r3, r3
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	4618      	mov	r0, r3
 8011800:	f7fa fe64 	bl	800c4cc <lwip_htons>
 8011804:	4603      	mov	r3, r0
 8011806:	b21b      	sxth	r3, r3
 8011808:	4323      	orrs	r3, r4
 801180a:	b21a      	sxth	r2, r3
 801180c:	4b5a      	ldr	r3, [pc, #360]	; (8011978 <tcp_receive+0x86c>)
 801180e:	68db      	ldr	r3, [r3, #12]
 8011810:	b292      	uxth	r2, r2
 8011812:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011818:	4b57      	ldr	r3, [pc, #348]	; (8011978 <tcp_receive+0x86c>)
 801181a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801181c:	4b56      	ldr	r3, [pc, #344]	; (8011978 <tcp_receive+0x86c>)
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	899b      	ldrh	r3, [r3, #12]
 8011822:	b29b      	uxth	r3, r3
 8011824:	4618      	mov	r0, r3
 8011826:	f7fa fe51 	bl	800c4cc <lwip_htons>
 801182a:	4603      	mov	r3, r0
 801182c:	b2db      	uxtb	r3, r3
 801182e:	f003 0302 	and.w	r3, r3, #2
 8011832:	2b00      	cmp	r3, #0
 8011834:	d005      	beq.n	8011842 <tcp_receive+0x736>
            inseg.len -= 1;
 8011836:	4b50      	ldr	r3, [pc, #320]	; (8011978 <tcp_receive+0x86c>)
 8011838:	891b      	ldrh	r3, [r3, #8]
 801183a:	3b01      	subs	r3, #1
 801183c:	b29a      	uxth	r2, r3
 801183e:	4b4e      	ldr	r3, [pc, #312]	; (8011978 <tcp_receive+0x86c>)
 8011840:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011842:	4b4d      	ldr	r3, [pc, #308]	; (8011978 <tcp_receive+0x86c>)
 8011844:	685a      	ldr	r2, [r3, #4]
 8011846:	4b4c      	ldr	r3, [pc, #304]	; (8011978 <tcp_receive+0x86c>)
 8011848:	891b      	ldrh	r3, [r3, #8]
 801184a:	4619      	mov	r1, r3
 801184c:	4610      	mov	r0, r2
 801184e:	f7fc f841 	bl	800d8d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011852:	4b49      	ldr	r3, [pc, #292]	; (8011978 <tcp_receive+0x86c>)
 8011854:	891c      	ldrh	r4, [r3, #8]
 8011856:	4b48      	ldr	r3, [pc, #288]	; (8011978 <tcp_receive+0x86c>)
 8011858:	68db      	ldr	r3, [r3, #12]
 801185a:	899b      	ldrh	r3, [r3, #12]
 801185c:	b29b      	uxth	r3, r3
 801185e:	4618      	mov	r0, r3
 8011860:	f7fa fe34 	bl	800c4cc <lwip_htons>
 8011864:	4603      	mov	r3, r0
 8011866:	b2db      	uxtb	r3, r3
 8011868:	f003 0303 	and.w	r3, r3, #3
 801186c:	2b00      	cmp	r3, #0
 801186e:	d001      	beq.n	8011874 <tcp_receive+0x768>
 8011870:	2301      	movs	r3, #1
 8011872:	e000      	b.n	8011876 <tcp_receive+0x76a>
 8011874:	2300      	movs	r3, #0
 8011876:	4423      	add	r3, r4
 8011878:	b29a      	uxth	r2, r3
 801187a:	4b40      	ldr	r3, [pc, #256]	; (801197c <tcp_receive+0x870>)
 801187c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801187e:	4b3f      	ldr	r3, [pc, #252]	; (801197c <tcp_receive+0x870>)
 8011880:	881b      	ldrh	r3, [r3, #0]
 8011882:	461a      	mov	r2, r3
 8011884:	4b3b      	ldr	r3, [pc, #236]	; (8011974 <tcp_receive+0x868>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	441a      	add	r2, r3
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801188e:	6879      	ldr	r1, [r7, #4]
 8011890:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011892:	440b      	add	r3, r1
 8011894:	429a      	cmp	r2, r3
 8011896:	d006      	beq.n	80118a6 <tcp_receive+0x79a>
 8011898:	4b39      	ldr	r3, [pc, #228]	; (8011980 <tcp_receive+0x874>)
 801189a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801189e:	4939      	ldr	r1, [pc, #228]	; (8011984 <tcp_receive+0x878>)
 80118a0:	4839      	ldr	r0, [pc, #228]	; (8011988 <tcp_receive+0x87c>)
 80118a2:	f003 fe17 	bl	80154d4 <iprintf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80118a6:	4b35      	ldr	r3, [pc, #212]	; (801197c <tcp_receive+0x870>)
 80118a8:	881b      	ldrh	r3, [r3, #0]
 80118aa:	461a      	mov	r2, r3
 80118ac:	4b31      	ldr	r3, [pc, #196]	; (8011974 <tcp_receive+0x868>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	441a      	add	r2, r3
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80118ba:	4b30      	ldr	r3, [pc, #192]	; (801197c <tcp_receive+0x870>)
 80118bc:	881b      	ldrh	r3, [r3, #0]
 80118be:	429a      	cmp	r2, r3
 80118c0:	d206      	bcs.n	80118d0 <tcp_receive+0x7c4>
 80118c2:	4b2f      	ldr	r3, [pc, #188]	; (8011980 <tcp_receive+0x874>)
 80118c4:	f240 6207 	movw	r2, #1543	; 0x607
 80118c8:	4930      	ldr	r1, [pc, #192]	; (801198c <tcp_receive+0x880>)
 80118ca:	482f      	ldr	r0, [pc, #188]	; (8011988 <tcp_receive+0x87c>)
 80118cc:	f003 fe02 	bl	80154d4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80118d4:	4b29      	ldr	r3, [pc, #164]	; (801197c <tcp_receive+0x870>)
 80118d6:	881b      	ldrh	r3, [r3, #0]
 80118d8:	1ad3      	subs	r3, r2, r3
 80118da:	b29a      	uxth	r2, r3
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f7fd f891 	bl	800ea08 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80118e6:	4b24      	ldr	r3, [pc, #144]	; (8011978 <tcp_receive+0x86c>)
 80118e8:	685b      	ldr	r3, [r3, #4]
 80118ea:	891b      	ldrh	r3, [r3, #8]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d006      	beq.n	80118fe <tcp_receive+0x7f2>
          recv_data = inseg.p;
 80118f0:	4b21      	ldr	r3, [pc, #132]	; (8011978 <tcp_receive+0x86c>)
 80118f2:	685b      	ldr	r3, [r3, #4]
 80118f4:	4a26      	ldr	r2, [pc, #152]	; (8011990 <tcp_receive+0x884>)
 80118f6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80118f8:	4b1f      	ldr	r3, [pc, #124]	; (8011978 <tcp_receive+0x86c>)
 80118fa:	2200      	movs	r2, #0
 80118fc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80118fe:	4b1e      	ldr	r3, [pc, #120]	; (8011978 <tcp_receive+0x86c>)
 8011900:	68db      	ldr	r3, [r3, #12]
 8011902:	899b      	ldrh	r3, [r3, #12]
 8011904:	b29b      	uxth	r3, r3
 8011906:	4618      	mov	r0, r3
 8011908:	f7fa fde0 	bl	800c4cc <lwip_htons>
 801190c:	4603      	mov	r3, r0
 801190e:	b2db      	uxtb	r3, r3
 8011910:	f003 0301 	and.w	r3, r3, #1
 8011914:	2b00      	cmp	r3, #0
 8011916:	d006      	beq.n	8011926 <tcp_receive+0x81a>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011918:	4b1e      	ldr	r3, [pc, #120]	; (8011994 <tcp_receive+0x888>)
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	f043 0320 	orr.w	r3, r3, #32
 8011920:	b2da      	uxtb	r2, r3
 8011922:	4b1c      	ldr	r3, [pc, #112]	; (8011994 <tcp_receive+0x888>)
 8011924:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	8b5b      	ldrh	r3, [r3, #26]
 801192a:	f003 0301 	and.w	r3, r3, #1
 801192e:	2b00      	cmp	r3, #0
 8011930:	d00e      	beq.n	8011950 <tcp_receive+0x844>
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	8b5b      	ldrh	r3, [r3, #26]
 8011936:	f023 0301 	bic.w	r3, r3, #1
 801193a:	b29a      	uxth	r2, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	835a      	strh	r2, [r3, #26]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	8b5b      	ldrh	r3, [r3, #26]
 8011944:	f043 0302 	orr.w	r3, r3, #2
 8011948:	b29a      	uxth	r2, r3
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801194e:	e00f      	b.n	8011970 <tcp_receive+0x864>
        tcp_ack(pcb);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	8b5b      	ldrh	r3, [r3, #26]
 8011954:	f043 0301 	orr.w	r3, r3, #1
 8011958:	b29a      	uxth	r2, r3
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801195e:	e007      	b.n	8011970 <tcp_receive+0x864>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f001 fea5 	bl	80136b0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011966:	e003      	b.n	8011970 <tcp_receive+0x864>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f001 fea1 	bl	80136b0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801196e:	e02d      	b.n	80119cc <tcp_receive+0x8c0>
 8011970:	e02c      	b.n	80119cc <tcp_receive+0x8c0>
 8011972:	bf00      	nop
 8011974:	200068ec 	.word	0x200068ec
 8011978:	200068cc 	.word	0x200068cc
 801197c:	200068f6 	.word	0x200068f6
 8011980:	0801acb0 	.word	0x0801acb0
 8011984:	0801b06c 	.word	0x0801b06c
 8011988:	0801ad38 	.word	0x0801ad38
 801198c:	0801b0a4 	.word	0x0801b0a4
 8011990:	200068fc 	.word	0x200068fc
 8011994:	200068f9 	.word	0x200068f9
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011998:	4b0e      	ldr	r3, [pc, #56]	; (80119d4 <tcp_receive+0x8c8>)
 801199a:	681a      	ldr	r2, [r3, #0]
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119a0:	1ad3      	subs	r3, r2, r3
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	db0a      	blt.n	80119bc <tcp_receive+0x8b0>
 80119a6:	4b0b      	ldr	r3, [pc, #44]	; (80119d4 <tcp_receive+0x8c8>)
 80119a8:	681a      	ldr	r2, [r3, #0]
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ae:	6879      	ldr	r1, [r7, #4]
 80119b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80119b2:	440b      	add	r3, r1
 80119b4:	1ad3      	subs	r3, r2, r3
 80119b6:	3301      	adds	r3, #1
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	dd07      	ble.n	80119cc <tcp_receive+0x8c0>
      tcp_ack_now(pcb);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	8b5b      	ldrh	r3, [r3, #26]
 80119c0:	f043 0302 	orr.w	r3, r3, #2
 80119c4:	b29a      	uxth	r2, r3
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80119ca:	e7ff      	b.n	80119cc <tcp_receive+0x8c0>
 80119cc:	bf00      	nop
 80119ce:	3734      	adds	r7, #52	; 0x34
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd90      	pop	{r4, r7, pc}
 80119d4:	200068ec 	.word	0x200068ec

080119d8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80119d8:	b480      	push	{r7}
 80119da:	b083      	sub	sp, #12
 80119dc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80119de:	4b15      	ldr	r3, [pc, #84]	; (8011a34 <tcp_get_next_optbyte+0x5c>)
 80119e0:	881b      	ldrh	r3, [r3, #0]
 80119e2:	1c5a      	adds	r2, r3, #1
 80119e4:	b291      	uxth	r1, r2
 80119e6:	4a13      	ldr	r2, [pc, #76]	; (8011a34 <tcp_get_next_optbyte+0x5c>)
 80119e8:	8011      	strh	r1, [r2, #0]
 80119ea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80119ec:	4b12      	ldr	r3, [pc, #72]	; (8011a38 <tcp_get_next_optbyte+0x60>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d004      	beq.n	80119fe <tcp_get_next_optbyte+0x26>
 80119f4:	4b11      	ldr	r3, [pc, #68]	; (8011a3c <tcp_get_next_optbyte+0x64>)
 80119f6:	881b      	ldrh	r3, [r3, #0]
 80119f8:	88fa      	ldrh	r2, [r7, #6]
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d208      	bcs.n	8011a10 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80119fe:	4b10      	ldr	r3, [pc, #64]	; (8011a40 <tcp_get_next_optbyte+0x68>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	3314      	adds	r3, #20
 8011a04:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011a06:	88fb      	ldrh	r3, [r7, #6]
 8011a08:	683a      	ldr	r2, [r7, #0]
 8011a0a:	4413      	add	r3, r2
 8011a0c:	781b      	ldrb	r3, [r3, #0]
 8011a0e:	e00b      	b.n	8011a28 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011a10:	88fb      	ldrh	r3, [r7, #6]
 8011a12:	b2da      	uxtb	r2, r3
 8011a14:	4b09      	ldr	r3, [pc, #36]	; (8011a3c <tcp_get_next_optbyte+0x64>)
 8011a16:	881b      	ldrh	r3, [r3, #0]
 8011a18:	b2db      	uxtb	r3, r3
 8011a1a:	1ad3      	subs	r3, r2, r3
 8011a1c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011a1e:	4b06      	ldr	r3, [pc, #24]	; (8011a38 <tcp_get_next_optbyte+0x60>)
 8011a20:	681a      	ldr	r2, [r3, #0]
 8011a22:	797b      	ldrb	r3, [r7, #5]
 8011a24:	4413      	add	r3, r2
 8011a26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	370c      	adds	r7, #12
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr
 8011a34:	200068e8 	.word	0x200068e8
 8011a38:	200068e4 	.word	0x200068e4
 8011a3c:	200068e2 	.word	0x200068e2
 8011a40:	200068dc 	.word	0x200068dc

08011a44 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b084      	sub	sp, #16
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d106      	bne.n	8011a60 <tcp_parseopt+0x1c>
 8011a52:	4b31      	ldr	r3, [pc, #196]	; (8011b18 <tcp_parseopt+0xd4>)
 8011a54:	f240 727d 	movw	r2, #1917	; 0x77d
 8011a58:	4930      	ldr	r1, [pc, #192]	; (8011b1c <tcp_parseopt+0xd8>)
 8011a5a:	4831      	ldr	r0, [pc, #196]	; (8011b20 <tcp_parseopt+0xdc>)
 8011a5c:	f003 fd3a 	bl	80154d4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011a60:	4b30      	ldr	r3, [pc, #192]	; (8011b24 <tcp_parseopt+0xe0>)
 8011a62:	881b      	ldrh	r3, [r3, #0]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d054      	beq.n	8011b12 <tcp_parseopt+0xce>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011a68:	4b2f      	ldr	r3, [pc, #188]	; (8011b28 <tcp_parseopt+0xe4>)
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	801a      	strh	r2, [r3, #0]
 8011a6e:	e044      	b.n	8011afa <tcp_parseopt+0xb6>
      u8_t opt = tcp_get_next_optbyte();
 8011a70:	f7ff ffb2 	bl	80119d8 <tcp_get_next_optbyte>
 8011a74:	4603      	mov	r3, r0
 8011a76:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011a78:	7bfb      	ldrb	r3, [r7, #15]
 8011a7a:	2b01      	cmp	r3, #1
 8011a7c:	d03d      	beq.n	8011afa <tcp_parseopt+0xb6>
 8011a7e:	2b02      	cmp	r3, #2
 8011a80:	d002      	beq.n	8011a88 <tcp_parseopt+0x44>
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d040      	beq.n	8011b08 <tcp_parseopt+0xc4>
 8011a86:	e027      	b.n	8011ad8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011a88:	f7ff ffa6 	bl	80119d8 <tcp_get_next_optbyte>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	2b04      	cmp	r3, #4
 8011a90:	d13c      	bne.n	8011b0c <tcp_parseopt+0xc8>
 8011a92:	4b25      	ldr	r3, [pc, #148]	; (8011b28 <tcp_parseopt+0xe4>)
 8011a94:	881b      	ldrh	r3, [r3, #0]
 8011a96:	3302      	adds	r3, #2
 8011a98:	4a22      	ldr	r2, [pc, #136]	; (8011b24 <tcp_parseopt+0xe0>)
 8011a9a:	8812      	ldrh	r2, [r2, #0]
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	dc35      	bgt.n	8011b0c <tcp_parseopt+0xc8>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011aa0:	f7ff ff9a 	bl	80119d8 <tcp_get_next_optbyte>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	021b      	lsls	r3, r3, #8
 8011aaa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011aac:	f7ff ff94 	bl	80119d8 <tcp_get_next_optbyte>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	89bb      	ldrh	r3, [r7, #12]
 8011ab6:	4313      	orrs	r3, r2
 8011ab8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011aba:	89bb      	ldrh	r3, [r7, #12]
 8011abc:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8011ac0:	4293      	cmp	r3, r2
 8011ac2:	d804      	bhi.n	8011ace <tcp_parseopt+0x8a>
 8011ac4:	89bb      	ldrh	r3, [r7, #12]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d001      	beq.n	8011ace <tcp_parseopt+0x8a>
 8011aca:	89ba      	ldrh	r2, [r7, #12]
 8011acc:	e001      	b.n	8011ad2 <tcp_parseopt+0x8e>
 8011ace:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011ad6:	e010      	b.n	8011afa <tcp_parseopt+0xb6>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011ad8:	f7ff ff7e 	bl	80119d8 <tcp_get_next_optbyte>
 8011adc:	4603      	mov	r3, r0
 8011ade:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011ae0:	7afb      	ldrb	r3, [r7, #11]
 8011ae2:	2b01      	cmp	r3, #1
 8011ae4:	d914      	bls.n	8011b10 <tcp_parseopt+0xcc>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011ae6:	7afb      	ldrb	r3, [r7, #11]
 8011ae8:	b29a      	uxth	r2, r3
 8011aea:	4b0f      	ldr	r3, [pc, #60]	; (8011b28 <tcp_parseopt+0xe4>)
 8011aec:	881b      	ldrh	r3, [r3, #0]
 8011aee:	4413      	add	r3, r2
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	3b02      	subs	r3, #2
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	4b0c      	ldr	r3, [pc, #48]	; (8011b28 <tcp_parseopt+0xe4>)
 8011af8:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011afa:	4b0b      	ldr	r3, [pc, #44]	; (8011b28 <tcp_parseopt+0xe4>)
 8011afc:	881a      	ldrh	r2, [r3, #0]
 8011afe:	4b09      	ldr	r3, [pc, #36]	; (8011b24 <tcp_parseopt+0xe0>)
 8011b00:	881b      	ldrh	r3, [r3, #0]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d3b4      	bcc.n	8011a70 <tcp_parseopt+0x2c>
 8011b06:	e004      	b.n	8011b12 <tcp_parseopt+0xce>
          return;
 8011b08:	bf00      	nop
 8011b0a:	e002      	b.n	8011b12 <tcp_parseopt+0xce>
            return;
 8011b0c:	bf00      	nop
 8011b0e:	e000      	b.n	8011b12 <tcp_parseopt+0xce>
            return;
 8011b10:	bf00      	nop
      }
    }
  }
}
 8011b12:	3710      	adds	r7, #16
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}
 8011b18:	0801acb0 	.word	0x0801acb0
 8011b1c:	0801b0c4 	.word	0x0801b0c4
 8011b20:	0801ad38 	.word	0x0801ad38
 8011b24:	200068e0 	.word	0x200068e0
 8011b28:	200068e8 	.word	0x200068e8

08011b2c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011b2c:	b480      	push	{r7}
 8011b2e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011b30:	4b05      	ldr	r3, [pc, #20]	; (8011b48 <tcp_trigger_input_pcb_close+0x1c>)
 8011b32:	781b      	ldrb	r3, [r3, #0]
 8011b34:	f043 0310 	orr.w	r3, r3, #16
 8011b38:	b2da      	uxtb	r2, r3
 8011b3a:	4b03      	ldr	r3, [pc, #12]	; (8011b48 <tcp_trigger_input_pcb_close+0x1c>)
 8011b3c:	701a      	strb	r2, [r3, #0]
}
 8011b3e:	bf00      	nop
 8011b40:	46bd      	mov	sp, r7
 8011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b46:	4770      	bx	lr
 8011b48:	200068f9 	.word	0x200068f9

08011b4c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b084      	sub	sp, #16
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	60f8      	str	r0, [r7, #12]
 8011b54:	60b9      	str	r1, [r7, #8]
 8011b56:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d00a      	beq.n	8011b74 <tcp_route+0x28>
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	7a1b      	ldrb	r3, [r3, #8]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d006      	beq.n	8011b74 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	7a1b      	ldrb	r3, [r3, #8]
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7fb fd08 	bl	800d580 <netif_get_by_index>
 8011b70:	4603      	mov	r3, r0
 8011b72:	e003      	b.n	8011b7c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f7f9 fb81 	bl	800b27c <ip4_route>
 8011b7a:	4603      	mov	r3, r0
  }
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	3710      	adds	r7, #16
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}

08011b84 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011b84:	b590      	push	{r4, r7, lr}
 8011b86:	b087      	sub	sp, #28
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	60f8      	str	r0, [r7, #12]
 8011b8c:	60b9      	str	r1, [r7, #8]
 8011b8e:	603b      	str	r3, [r7, #0]
 8011b90:	4613      	mov	r3, r2
 8011b92:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d105      	bne.n	8011ba6 <tcp_create_segment+0x22>
 8011b9a:	4b44      	ldr	r3, [pc, #272]	; (8011cac <tcp_create_segment+0x128>)
 8011b9c:	22a3      	movs	r2, #163	; 0xa3
 8011b9e:	4944      	ldr	r1, [pc, #272]	; (8011cb0 <tcp_create_segment+0x12c>)
 8011ba0:	4844      	ldr	r0, [pc, #272]	; (8011cb4 <tcp_create_segment+0x130>)
 8011ba2:	f003 fc97 	bl	80154d4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d105      	bne.n	8011bb8 <tcp_create_segment+0x34>
 8011bac:	4b3f      	ldr	r3, [pc, #252]	; (8011cac <tcp_create_segment+0x128>)
 8011bae:	22a4      	movs	r2, #164	; 0xa4
 8011bb0:	4941      	ldr	r1, [pc, #260]	; (8011cb8 <tcp_create_segment+0x134>)
 8011bb2:	4840      	ldr	r0, [pc, #256]	; (8011cb4 <tcp_create_segment+0x130>)
 8011bb4:	f003 fc8e 	bl	80154d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011bb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011bbc:	009b      	lsls	r3, r3, #2
 8011bbe:	b2db      	uxtb	r3, r3
 8011bc0:	f003 0304 	and.w	r3, r3, #4
 8011bc4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011bc6:	2003      	movs	r0, #3
 8011bc8:	f7fb f9e0 	bl	800cf8c <memp_malloc>
 8011bcc:	6138      	str	r0, [r7, #16]
 8011bce:	693b      	ldr	r3, [r7, #16]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d104      	bne.n	8011bde <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011bd4:	68b8      	ldr	r0, [r7, #8]
 8011bd6:	f7fc f803 	bl	800dbe0 <pbuf_free>
    return NULL;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	e061      	b.n	8011ca2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011bde:	693b      	ldr	r3, [r7, #16]
 8011be0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011be4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	2200      	movs	r2, #0
 8011bea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	68ba      	ldr	r2, [r7, #8]
 8011bf0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	891a      	ldrh	r2, [r3, #8]
 8011bf6:	7dfb      	ldrb	r3, [r7, #23]
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d205      	bcs.n	8011c0a <tcp_create_segment+0x86>
 8011bfe:	4b2b      	ldr	r3, [pc, #172]	; (8011cac <tcp_create_segment+0x128>)
 8011c00:	22b0      	movs	r2, #176	; 0xb0
 8011c02:	492e      	ldr	r1, [pc, #184]	; (8011cbc <tcp_create_segment+0x138>)
 8011c04:	482b      	ldr	r0, [pc, #172]	; (8011cb4 <tcp_create_segment+0x130>)
 8011c06:	f003 fc65 	bl	80154d4 <iprintf>
  seg->len = p->tot_len - optlen;
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	891a      	ldrh	r2, [r3, #8]
 8011c0e:	7dfb      	ldrb	r3, [r7, #23]
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	1ad3      	subs	r3, r2, r3
 8011c14:	b29a      	uxth	r2, r3
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011c1a:	2114      	movs	r1, #20
 8011c1c:	68b8      	ldr	r0, [r7, #8]
 8011c1e:	f7fb ff49 	bl	800dab4 <pbuf_add_header>
 8011c22:	4603      	mov	r3, r0
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d004      	beq.n	8011c32 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011c28:	6938      	ldr	r0, [r7, #16]
 8011c2a:	f7fd fbfd 	bl	800f428 <tcp_seg_free>
    return NULL;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	e037      	b.n	8011ca2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011c32:	693b      	ldr	r3, [r7, #16]
 8011c34:	685b      	ldr	r3, [r3, #4]
 8011c36:	685a      	ldr	r2, [r3, #4]
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	8ada      	ldrh	r2, [r3, #22]
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	68dc      	ldr	r4, [r3, #12]
 8011c44:	4610      	mov	r0, r2
 8011c46:	f7fa fc41 	bl	800c4cc <lwip_htons>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	8b1a      	ldrh	r2, [r3, #24]
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	68dc      	ldr	r4, [r3, #12]
 8011c56:	4610      	mov	r0, r2
 8011c58:	f7fa fc38 	bl	800c4cc <lwip_htons>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	68dc      	ldr	r4, [r3, #12]
 8011c64:	6838      	ldr	r0, [r7, #0]
 8011c66:	f7fa fc46 	bl	800c4f6 <lwip_htonl>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011c6e:	7dfb      	ldrb	r3, [r7, #23]
 8011c70:	089b      	lsrs	r3, r3, #2
 8011c72:	b2db      	uxtb	r3, r3
 8011c74:	b29b      	uxth	r3, r3
 8011c76:	3305      	adds	r3, #5
 8011c78:	b29b      	uxth	r3, r3
 8011c7a:	031b      	lsls	r3, r3, #12
 8011c7c:	b29a      	uxth	r2, r3
 8011c7e:	79fb      	ldrb	r3, [r7, #7]
 8011c80:	b29b      	uxth	r3, r3
 8011c82:	4313      	orrs	r3, r2
 8011c84:	b29a      	uxth	r2, r3
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	68dc      	ldr	r4, [r3, #12]
 8011c8a:	4610      	mov	r0, r2
 8011c8c:	f7fa fc1e 	bl	800c4cc <lwip_htons>
 8011c90:	4603      	mov	r3, r0
 8011c92:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	68db      	ldr	r3, [r3, #12]
 8011c98:	2200      	movs	r2, #0
 8011c9a:	749a      	strb	r2, [r3, #18]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011ca0:	693b      	ldr	r3, [r7, #16]
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	371c      	adds	r7, #28
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd90      	pop	{r4, r7, pc}
 8011caa:	bf00      	nop
 8011cac:	0801b0e0 	.word	0x0801b0e0
 8011cb0:	0801b150 	.word	0x0801b150
 8011cb4:	0801b170 	.word	0x0801b170
 8011cb8:	0801b198 	.word	0x0801b198
 8011cbc:	0801b1bc 	.word	0x0801b1bc

08011cc0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b086      	sub	sp, #24
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	607b      	str	r3, [r7, #4]
 8011cc8:	4603      	mov	r3, r0
 8011cca:	73fb      	strb	r3, [r7, #15]
 8011ccc:	460b      	mov	r3, r1
 8011cce:	81bb      	strh	r3, [r7, #12]
 8011cd0:	4613      	mov	r3, r2
 8011cd2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011cd4:	89bb      	ldrh	r3, [r7, #12]
 8011cd6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d105      	bne.n	8011cea <tcp_pbuf_prealloc+0x2a>
 8011cde:	4b30      	ldr	r3, [pc, #192]	; (8011da0 <tcp_pbuf_prealloc+0xe0>)
 8011ce0:	22e8      	movs	r2, #232	; 0xe8
 8011ce2:	4930      	ldr	r1, [pc, #192]	; (8011da4 <tcp_pbuf_prealloc+0xe4>)
 8011ce4:	4830      	ldr	r0, [pc, #192]	; (8011da8 <tcp_pbuf_prealloc+0xe8>)
 8011ce6:	f003 fbf5 	bl	80154d4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011cea:	6a3b      	ldr	r3, [r7, #32]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d105      	bne.n	8011cfc <tcp_pbuf_prealloc+0x3c>
 8011cf0:	4b2b      	ldr	r3, [pc, #172]	; (8011da0 <tcp_pbuf_prealloc+0xe0>)
 8011cf2:	22e9      	movs	r2, #233	; 0xe9
 8011cf4:	492d      	ldr	r1, [pc, #180]	; (8011dac <tcp_pbuf_prealloc+0xec>)
 8011cf6:	482c      	ldr	r0, [pc, #176]	; (8011da8 <tcp_pbuf_prealloc+0xe8>)
 8011cf8:	f003 fbec 	bl	80154d4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011cfc:	89ba      	ldrh	r2, [r7, #12]
 8011cfe:	897b      	ldrh	r3, [r7, #10]
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d221      	bcs.n	8011d48 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011d04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011d08:	f003 0302 	and.w	r3, r3, #2
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d111      	bne.n	8011d34 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011d10:	6a3b      	ldr	r3, [r7, #32]
 8011d12:	8b5b      	ldrh	r3, [r3, #26]
 8011d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d115      	bne.n	8011d48 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011d1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d007      	beq.n	8011d34 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011d24:	6a3b      	ldr	r3, [r7, #32]
 8011d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d103      	bne.n	8011d34 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011d2c:	6a3b      	ldr	r3, [r7, #32]
 8011d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d009      	beq.n	8011d48 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011d34:	89bb      	ldrh	r3, [r7, #12]
 8011d36:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8011d3a:	f023 0203 	bic.w	r2, r3, #3
 8011d3e:	897b      	ldrh	r3, [r7, #10]
 8011d40:	4293      	cmp	r3, r2
 8011d42:	bf28      	it	cs
 8011d44:	4613      	movcs	r3, r2
 8011d46:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011d48:	8af9      	ldrh	r1, [r7, #22]
 8011d4a:	7bfb      	ldrb	r3, [r7, #15]
 8011d4c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d50:	4618      	mov	r0, r3
 8011d52:	f7fb fc65 	bl	800d620 <pbuf_alloc>
 8011d56:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d58:	693b      	ldr	r3, [r7, #16]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d101      	bne.n	8011d62 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	e019      	b.n	8011d96 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011d62:	693b      	ldr	r3, [r7, #16]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d006      	beq.n	8011d78 <tcp_pbuf_prealloc+0xb8>
 8011d6a:	4b0d      	ldr	r3, [pc, #52]	; (8011da0 <tcp_pbuf_prealloc+0xe0>)
 8011d6c:	f240 120b 	movw	r2, #267	; 0x10b
 8011d70:	490f      	ldr	r1, [pc, #60]	; (8011db0 <tcp_pbuf_prealloc+0xf0>)
 8011d72:	480d      	ldr	r0, [pc, #52]	; (8011da8 <tcp_pbuf_prealloc+0xe8>)
 8011d74:	f003 fbae 	bl	80154d4 <iprintf>
  *oversize = p->len - length;
 8011d78:	693b      	ldr	r3, [r7, #16]
 8011d7a:	895a      	ldrh	r2, [r3, #10]
 8011d7c:	89bb      	ldrh	r3, [r7, #12]
 8011d7e:	1ad3      	subs	r3, r2, r3
 8011d80:	b29a      	uxth	r2, r3
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011d86:	693b      	ldr	r3, [r7, #16]
 8011d88:	89ba      	ldrh	r2, [r7, #12]
 8011d8a:	811a      	strh	r2, [r3, #8]
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	891a      	ldrh	r2, [r3, #8]
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	815a      	strh	r2, [r3, #10]
  return p;
 8011d94:	693b      	ldr	r3, [r7, #16]
}
 8011d96:	4618      	mov	r0, r3
 8011d98:	3718      	adds	r7, #24
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}
 8011d9e:	bf00      	nop
 8011da0:	0801b0e0 	.word	0x0801b0e0
 8011da4:	0801b1d4 	.word	0x0801b1d4
 8011da8:	0801b170 	.word	0x0801b170
 8011dac:	0801b1f8 	.word	0x0801b1f8
 8011db0:	0801b218 	.word	0x0801b218

08011db4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b082      	sub	sp, #8
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	460b      	mov	r3, r1
 8011dbe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d106      	bne.n	8011dd4 <tcp_write_checks+0x20>
 8011dc6:	4b33      	ldr	r3, [pc, #204]	; (8011e94 <tcp_write_checks+0xe0>)
 8011dc8:	f240 1233 	movw	r2, #307	; 0x133
 8011dcc:	4932      	ldr	r1, [pc, #200]	; (8011e98 <tcp_write_checks+0xe4>)
 8011dce:	4833      	ldr	r0, [pc, #204]	; (8011e9c <tcp_write_checks+0xe8>)
 8011dd0:	f003 fb80 	bl	80154d4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	7d1b      	ldrb	r3, [r3, #20]
 8011dd8:	2b04      	cmp	r3, #4
 8011dda:	d00e      	beq.n	8011dfa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011de0:	2b07      	cmp	r3, #7
 8011de2:	d00a      	beq.n	8011dfa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011de8:	2b02      	cmp	r3, #2
 8011dea:	d006      	beq.n	8011dfa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011df0:	2b03      	cmp	r3, #3
 8011df2:	d002      	beq.n	8011dfa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011df4:	f06f 030a 	mvn.w	r3, #10
 8011df8:	e048      	b.n	8011e8c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011dfa:	887b      	ldrh	r3, [r7, #2]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d101      	bne.n	8011e04 <tcp_write_checks+0x50>
    return ERR_OK;
 8011e00:	2300      	movs	r3, #0
 8011e02:	e043      	b.n	8011e8c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011e0a:	887a      	ldrh	r2, [r7, #2]
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d909      	bls.n	8011e24 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	8b5b      	ldrh	r3, [r3, #26]
 8011e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e18:	b29a      	uxth	r2, r3
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8011e22:	e033      	b.n	8011e8c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e2a:	2b07      	cmp	r3, #7
 8011e2c:	d909      	bls.n	8011e42 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	8b5b      	ldrh	r3, [r3, #26]
 8011e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e36:	b29a      	uxth	r2, r3
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e40:	e024      	b.n	8011e8c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d00f      	beq.n	8011e6c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d11a      	bne.n	8011e8a <tcp_write_checks+0xd6>
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d116      	bne.n	8011e8a <tcp_write_checks+0xd6>
 8011e5c:	4b0d      	ldr	r3, [pc, #52]	; (8011e94 <tcp_write_checks+0xe0>)
 8011e5e:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8011e62:	490f      	ldr	r1, [pc, #60]	; (8011ea0 <tcp_write_checks+0xec>)
 8011e64:	480d      	ldr	r0, [pc, #52]	; (8011e9c <tcp_write_checks+0xe8>)
 8011e66:	f003 fb35 	bl	80154d4 <iprintf>
 8011e6a:	e00e      	b.n	8011e8a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d103      	bne.n	8011e7c <tcp_write_checks+0xc8>
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d006      	beq.n	8011e8a <tcp_write_checks+0xd6>
 8011e7c:	4b05      	ldr	r3, [pc, #20]	; (8011e94 <tcp_write_checks+0xe0>)
 8011e7e:	f240 1259 	movw	r2, #345	; 0x159
 8011e82:	4908      	ldr	r1, [pc, #32]	; (8011ea4 <tcp_write_checks+0xf0>)
 8011e84:	4805      	ldr	r0, [pc, #20]	; (8011e9c <tcp_write_checks+0xe8>)
 8011e86:	f003 fb25 	bl	80154d4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011e8a:	2300      	movs	r3, #0
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3708      	adds	r7, #8
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}
 8011e94:	0801b0e0 	.word	0x0801b0e0
 8011e98:	0801b22c 	.word	0x0801b22c
 8011e9c:	0801b170 	.word	0x0801b170
 8011ea0:	0801b24c 	.word	0x0801b24c
 8011ea4:	0801b288 	.word	0x0801b288

08011ea8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011ea8:	b590      	push	{r4, r7, lr}
 8011eaa:	b09b      	sub	sp, #108	; 0x6c
 8011eac:	af04      	add	r7, sp, #16
 8011eae:	60f8      	str	r0, [r7, #12]
 8011eb0:	60b9      	str	r1, [r7, #8]
 8011eb2:	4611      	mov	r1, r2
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	460b      	mov	r3, r1
 8011eb8:	80fb      	strh	r3, [r7, #6]
 8011eba:	4613      	mov	r3, r2
 8011ebc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	653b      	str	r3, [r7, #80]	; 0x50
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011eca:	2300      	movs	r3, #0
 8011ecc:	64bb      	str	r3, [r7, #72]	; 0x48
 8011ece:	2300      	movs	r3, #0
 8011ed0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d109      	bne.n	8011f04 <tcp_write+0x5c>
 8011ef0:	4ba5      	ldr	r3, [pc, #660]	; (8012188 <tcp_write+0x2e0>)
 8011ef2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011ef6:	49a5      	ldr	r1, [pc, #660]	; (801218c <tcp_write+0x2e4>)
 8011ef8:	48a5      	ldr	r0, [pc, #660]	; (8012190 <tcp_write+0x2e8>)
 8011efa:	f003 faeb 	bl	80154d4 <iprintf>
 8011efe:	f06f 030f 	mvn.w	r3, #15
 8011f02:	e32c      	b.n	801255e <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011f0a:	085b      	lsrs	r3, r3, #1
 8011f0c:	b29a      	uxth	r2, r3
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f12:	4293      	cmp	r3, r2
 8011f14:	bf28      	it	cs
 8011f16:	4613      	movcs	r3, r2
 8011f18:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011f1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d102      	bne.n	8011f26 <tcp_write+0x7e>
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f24:	e000      	b.n	8011f28 <tcp_write+0x80>
 8011f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f28:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d109      	bne.n	8011f44 <tcp_write+0x9c>
 8011f30:	4b95      	ldr	r3, [pc, #596]	; (8012188 <tcp_write+0x2e0>)
 8011f32:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8011f36:	4997      	ldr	r1, [pc, #604]	; (8012194 <tcp_write+0x2ec>)
 8011f38:	4895      	ldr	r0, [pc, #596]	; (8012190 <tcp_write+0x2e8>)
 8011f3a:	f003 facb 	bl	80154d4 <iprintf>
 8011f3e:	f06f 030f 	mvn.w	r3, #15
 8011f42:	e30c      	b.n	801255e <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011f44:	88fb      	ldrh	r3, [r7, #6]
 8011f46:	4619      	mov	r1, r3
 8011f48:	68f8      	ldr	r0, [r7, #12]
 8011f4a:	f7ff ff33 	bl	8011db4 <tcp_write_checks>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011f54:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d002      	beq.n	8011f62 <tcp_write+0xba>
    return err;
 8011f5c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011f60:	e2fd      	b.n	801255e <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f68:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	f000 80f7 	beq.w	801216a <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f80:	653b      	str	r3, [r7, #80]	; 0x50
 8011f82:	e002      	b.n	8011f8a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d1f8      	bne.n	8011f84 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f94:	7a9b      	ldrb	r3, [r3, #10]
 8011f96:	009b      	lsls	r3, r3, #2
 8011f98:	b29b      	uxth	r3, r3
 8011f9a:	f003 0304 	and.w	r3, r3, #4
 8011f9e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011fa0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fa4:	891b      	ldrh	r3, [r3, #8]
 8011fa6:	4619      	mov	r1, r3
 8011fa8:	8c3b      	ldrh	r3, [r7, #32]
 8011faa:	440b      	add	r3, r1
 8011fac:	429a      	cmp	r2, r3
 8011fae:	da06      	bge.n	8011fbe <tcp_write+0x116>
 8011fb0:	4b75      	ldr	r3, [pc, #468]	; (8012188 <tcp_write+0x2e0>)
 8011fb2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011fb6:	4978      	ldr	r1, [pc, #480]	; (8012198 <tcp_write+0x2f0>)
 8011fb8:	4875      	ldr	r0, [pc, #468]	; (8012190 <tcp_write+0x2e8>)
 8011fba:	f003 fa8b 	bl	80154d4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fc0:	891a      	ldrh	r2, [r3, #8]
 8011fc2:	8c3b      	ldrh	r3, [r7, #32]
 8011fc4:	4413      	add	r3, r2
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011fca:	1ad3      	subs	r3, r2, r3
 8011fcc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011fd4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011fd6:	8a7b      	ldrh	r3, [r7, #18]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d027      	beq.n	801202c <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011fdc:	8a7b      	ldrh	r3, [r7, #18]
 8011fde:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011fe0:	429a      	cmp	r2, r3
 8011fe2:	d206      	bcs.n	8011ff2 <tcp_write+0x14a>
 8011fe4:	4b68      	ldr	r3, [pc, #416]	; (8012188 <tcp_write+0x2e0>)
 8011fe6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011fea:	496c      	ldr	r1, [pc, #432]	; (801219c <tcp_write+0x2f4>)
 8011fec:	4868      	ldr	r0, [pc, #416]	; (8012190 <tcp_write+0x2e8>)
 8011fee:	f003 fa71 	bl	80154d4 <iprintf>
      seg = last_unsent;
 8011ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011ff6:	8a7b      	ldrh	r3, [r7, #18]
 8011ff8:	88fa      	ldrh	r2, [r7, #6]
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d901      	bls.n	8012002 <tcp_write+0x15a>
 8011ffe:	8a7b      	ldrh	r3, [r7, #18]
 8012000:	e000      	b.n	8012004 <tcp_write+0x15c>
 8012002:	88fb      	ldrh	r3, [r7, #6]
 8012004:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012006:	4293      	cmp	r3, r2
 8012008:	bfa8      	it	ge
 801200a:	4613      	movge	r3, r2
 801200c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801200e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012012:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012014:	4413      	add	r3, r2
 8012016:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801201a:	8a7a      	ldrh	r2, [r7, #18]
 801201c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801201e:	1ad3      	subs	r3, r2, r3
 8012020:	b29b      	uxth	r3, r3
 8012022:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012024:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012026:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012028:	1ad3      	subs	r3, r2, r3
 801202a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801202c:	8a7b      	ldrh	r3, [r7, #18]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d00b      	beq.n	801204a <tcp_write+0x1a2>
 8012032:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012036:	88fb      	ldrh	r3, [r7, #6]
 8012038:	429a      	cmp	r2, r3
 801203a:	d006      	beq.n	801204a <tcp_write+0x1a2>
 801203c:	4b52      	ldr	r3, [pc, #328]	; (8012188 <tcp_write+0x2e0>)
 801203e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012042:	4957      	ldr	r1, [pc, #348]	; (80121a0 <tcp_write+0x2f8>)
 8012044:	4852      	ldr	r0, [pc, #328]	; (8012190 <tcp_write+0x2e8>)
 8012046:	f003 fa45 	bl	80154d4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801204a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801204e:	88fb      	ldrh	r3, [r7, #6]
 8012050:	429a      	cmp	r2, r3
 8012052:	f080 8168 	bcs.w	8012326 <tcp_write+0x47e>
 8012056:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012058:	2b00      	cmp	r3, #0
 801205a:	f000 8164 	beq.w	8012326 <tcp_write+0x47e>
 801205e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012060:	891b      	ldrh	r3, [r3, #8]
 8012062:	2b00      	cmp	r3, #0
 8012064:	f000 815f 	beq.w	8012326 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012068:	88fa      	ldrh	r2, [r7, #6]
 801206a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801206e:	1ad2      	subs	r2, r2, r3
 8012070:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012072:	4293      	cmp	r3, r2
 8012074:	bfa8      	it	ge
 8012076:	4613      	movge	r3, r2
 8012078:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801207a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801207c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801207e:	797b      	ldrb	r3, [r7, #5]
 8012080:	f003 0301 	and.w	r3, r3, #1
 8012084:	2b00      	cmp	r3, #0
 8012086:	d027      	beq.n	80120d8 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012088:	f107 0012 	add.w	r0, r7, #18
 801208c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801208e:	8bf9      	ldrh	r1, [r7, #30]
 8012090:	2301      	movs	r3, #1
 8012092:	9302      	str	r3, [sp, #8]
 8012094:	797b      	ldrb	r3, [r7, #5]
 8012096:	9301      	str	r3, [sp, #4]
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	9300      	str	r3, [sp, #0]
 801209c:	4603      	mov	r3, r0
 801209e:	2000      	movs	r0, #0
 80120a0:	f7ff fe0e 	bl	8011cc0 <tcp_pbuf_prealloc>
 80120a4:	6578      	str	r0, [r7, #84]	; 0x54
 80120a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	f000 8226 	beq.w	80124fa <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80120ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120b0:	6858      	ldr	r0, [r3, #4]
 80120b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120b6:	68ba      	ldr	r2, [r7, #8]
 80120b8:	4413      	add	r3, r2
 80120ba:	8bfa      	ldrh	r2, [r7, #30]
 80120bc:	4619      	mov	r1, r3
 80120be:	f002 fcd8 	bl	8014a72 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80120c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80120c4:	f7fb fe1a 	bl	800dcfc <pbuf_clen>
 80120c8:	4603      	mov	r3, r0
 80120ca:	461a      	mov	r2, r3
 80120cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80120d0:	4413      	add	r3, r2
 80120d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80120d6:	e041      	b.n	801215c <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80120d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120da:	685b      	ldr	r3, [r3, #4]
 80120dc:	637b      	str	r3, [r7, #52]	; 0x34
 80120de:	e002      	b.n	80120e6 <tcp_write+0x23e>
 80120e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	637b      	str	r3, [r7, #52]	; 0x34
 80120e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d1f8      	bne.n	80120e0 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80120ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120f0:	7b1b      	ldrb	r3, [r3, #12]
 80120f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d115      	bne.n	8012126 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80120fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120fc:	685b      	ldr	r3, [r3, #4]
 80120fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012100:	8952      	ldrh	r2, [r2, #10]
 8012102:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012104:	68ba      	ldr	r2, [r7, #8]
 8012106:	429a      	cmp	r2, r3
 8012108:	d10d      	bne.n	8012126 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801210a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801210e:	2b00      	cmp	r3, #0
 8012110:	d006      	beq.n	8012120 <tcp_write+0x278>
 8012112:	4b1d      	ldr	r3, [pc, #116]	; (8012188 <tcp_write+0x2e0>)
 8012114:	f240 2231 	movw	r2, #561	; 0x231
 8012118:	4922      	ldr	r1, [pc, #136]	; (80121a4 <tcp_write+0x2fc>)
 801211a:	481d      	ldr	r0, [pc, #116]	; (8012190 <tcp_write+0x2e8>)
 801211c:	f003 f9da 	bl	80154d4 <iprintf>
          extendlen = seglen;
 8012120:	8bfb      	ldrh	r3, [r7, #30]
 8012122:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012124:	e01a      	b.n	801215c <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012126:	8bfb      	ldrh	r3, [r7, #30]
 8012128:	2201      	movs	r2, #1
 801212a:	4619      	mov	r1, r3
 801212c:	2000      	movs	r0, #0
 801212e:	f7fb fa77 	bl	800d620 <pbuf_alloc>
 8012132:	6578      	str	r0, [r7, #84]	; 0x54
 8012134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012136:	2b00      	cmp	r3, #0
 8012138:	f000 81e1 	beq.w	80124fe <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801213c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012140:	68ba      	ldr	r2, [r7, #8]
 8012142:	441a      	add	r2, r3
 8012144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012146:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012148:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801214a:	f7fb fdd7 	bl	800dcfc <pbuf_clen>
 801214e:	4603      	mov	r3, r0
 8012150:	461a      	mov	r2, r3
 8012152:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012156:	4413      	add	r3, r2
 8012158:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801215c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012160:	8bfb      	ldrh	r3, [r7, #30]
 8012162:	4413      	add	r3, r2
 8012164:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012168:	e0dd      	b.n	8012326 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012170:	2b00      	cmp	r3, #0
 8012172:	f000 80d8 	beq.w	8012326 <tcp_write+0x47e>
 8012176:	4b04      	ldr	r3, [pc, #16]	; (8012188 <tcp_write+0x2e0>)
 8012178:	f240 224b 	movw	r2, #587	; 0x24b
 801217c:	490a      	ldr	r1, [pc, #40]	; (80121a8 <tcp_write+0x300>)
 801217e:	4804      	ldr	r0, [pc, #16]	; (8012190 <tcp_write+0x2e8>)
 8012180:	f003 f9a8 	bl	80154d4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012184:	e0cf      	b.n	8012326 <tcp_write+0x47e>
 8012186:	bf00      	nop
 8012188:	0801b0e0 	.word	0x0801b0e0
 801218c:	0801b2bc 	.word	0x0801b2bc
 8012190:	0801b170 	.word	0x0801b170
 8012194:	0801b2d4 	.word	0x0801b2d4
 8012198:	0801b308 	.word	0x0801b308
 801219c:	0801b320 	.word	0x0801b320
 80121a0:	0801b340 	.word	0x0801b340
 80121a4:	0801b360 	.word	0x0801b360
 80121a8:	0801b38c 	.word	0x0801b38c
    struct pbuf *p;
    u16_t left = len - pos;
 80121ac:	88fa      	ldrh	r2, [r7, #6]
 80121ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121b2:	1ad3      	subs	r3, r2, r3
 80121b4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80121b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80121ba:	b29b      	uxth	r3, r3
 80121bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121be:	1ad3      	subs	r3, r2, r3
 80121c0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80121c2:	8b7a      	ldrh	r2, [r7, #26]
 80121c4:	8bbb      	ldrh	r3, [r7, #28]
 80121c6:	4293      	cmp	r3, r2
 80121c8:	bf28      	it	cs
 80121ca:	4613      	movcs	r3, r2
 80121cc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80121ce:	797b      	ldrb	r3, [r7, #5]
 80121d0:	f003 0301 	and.w	r3, r3, #1
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d036      	beq.n	8012246 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80121d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80121dc:	b29a      	uxth	r2, r3
 80121de:	8b3b      	ldrh	r3, [r7, #24]
 80121e0:	4413      	add	r3, r2
 80121e2:	b299      	uxth	r1, r3
 80121e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	bf0c      	ite	eq
 80121ea:	2301      	moveq	r3, #1
 80121ec:	2300      	movne	r3, #0
 80121ee:	b2db      	uxtb	r3, r3
 80121f0:	f107 0012 	add.w	r0, r7, #18
 80121f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121f6:	9302      	str	r3, [sp, #8]
 80121f8:	797b      	ldrb	r3, [r7, #5]
 80121fa:	9301      	str	r3, [sp, #4]
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	9300      	str	r3, [sp, #0]
 8012200:	4603      	mov	r3, r0
 8012202:	2036      	movs	r0, #54	; 0x36
 8012204:	f7ff fd5c 	bl	8011cc0 <tcp_pbuf_prealloc>
 8012208:	6338      	str	r0, [r7, #48]	; 0x30
 801220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801220c:	2b00      	cmp	r3, #0
 801220e:	f000 8178 	beq.w	8012502 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012214:	895b      	ldrh	r3, [r3, #10]
 8012216:	8b3a      	ldrh	r2, [r7, #24]
 8012218:	429a      	cmp	r2, r3
 801221a:	d906      	bls.n	801222a <tcp_write+0x382>
 801221c:	4b8c      	ldr	r3, [pc, #560]	; (8012450 <tcp_write+0x5a8>)
 801221e:	f240 2267 	movw	r2, #615	; 0x267
 8012222:	498c      	ldr	r1, [pc, #560]	; (8012454 <tcp_write+0x5ac>)
 8012224:	488c      	ldr	r0, [pc, #560]	; (8012458 <tcp_write+0x5b0>)
 8012226:	f003 f955 	bl	80154d4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801222c:	685a      	ldr	r2, [r3, #4]
 801222e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012232:	18d0      	adds	r0, r2, r3
 8012234:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012238:	68ba      	ldr	r2, [r7, #8]
 801223a:	4413      	add	r3, r2
 801223c:	8b3a      	ldrh	r2, [r7, #24]
 801223e:	4619      	mov	r1, r3
 8012240:	f002 fc17 	bl	8014a72 <memcpy>
 8012244:	e02f      	b.n	80122a6 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012246:	8a7b      	ldrh	r3, [r7, #18]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d006      	beq.n	801225a <tcp_write+0x3b2>
 801224c:	4b80      	ldr	r3, [pc, #512]	; (8012450 <tcp_write+0x5a8>)
 801224e:	f240 2271 	movw	r2, #625	; 0x271
 8012252:	4982      	ldr	r1, [pc, #520]	; (801245c <tcp_write+0x5b4>)
 8012254:	4880      	ldr	r0, [pc, #512]	; (8012458 <tcp_write+0x5b0>)
 8012256:	f003 f93d 	bl	80154d4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801225a:	8b3b      	ldrh	r3, [r7, #24]
 801225c:	2201      	movs	r2, #1
 801225e:	4619      	mov	r1, r3
 8012260:	2036      	movs	r0, #54	; 0x36
 8012262:	f7fb f9dd 	bl	800d620 <pbuf_alloc>
 8012266:	6178      	str	r0, [r7, #20]
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	2b00      	cmp	r3, #0
 801226c:	f000 814b 	beq.w	8012506 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012270:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012274:	68ba      	ldr	r2, [r7, #8]
 8012276:	441a      	add	r2, r3
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801227c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012280:	b29b      	uxth	r3, r3
 8012282:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012286:	4619      	mov	r1, r3
 8012288:	2036      	movs	r0, #54	; 0x36
 801228a:	f7fb f9c9 	bl	800d620 <pbuf_alloc>
 801228e:	6338      	str	r0, [r7, #48]	; 0x30
 8012290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012292:	2b00      	cmp	r3, #0
 8012294:	d103      	bne.n	801229e <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012296:	6978      	ldr	r0, [r7, #20]
 8012298:	f7fb fca2 	bl	800dbe0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801229c:	e136      	b.n	801250c <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801229e:	6979      	ldr	r1, [r7, #20]
 80122a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122a2:	f7fb fd6b 	bl	800dd7c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80122a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122a8:	f7fb fd28 	bl	800dcfc <pbuf_clen>
 80122ac:	4603      	mov	r3, r0
 80122ae:	461a      	mov	r2, r3
 80122b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80122b4:	4413      	add	r3, r2
 80122b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80122ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80122be:	2b08      	cmp	r3, #8
 80122c0:	d903      	bls.n	80122ca <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80122c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122c4:	f7fb fc8c 	bl	800dbe0 <pbuf_free>
      goto memerr;
 80122c8:	e120      	b.n	801250c <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80122ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122d2:	441a      	add	r2, r3
 80122d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122d8:	9300      	str	r3, [sp, #0]
 80122da:	4613      	mov	r3, r2
 80122dc:	2200      	movs	r2, #0
 80122de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80122e0:	68f8      	ldr	r0, [r7, #12]
 80122e2:	f7ff fc4f 	bl	8011b84 <tcp_create_segment>
 80122e6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80122e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	f000 810d 	beq.w	801250a <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80122f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d102      	bne.n	80122fc <tcp_write+0x454>
      queue = seg;
 80122f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122f8:	647b      	str	r3, [r7, #68]	; 0x44
 80122fa:	e00c      	b.n	8012316 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80122fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d106      	bne.n	8012310 <tcp_write+0x468>
 8012302:	4b53      	ldr	r3, [pc, #332]	; (8012450 <tcp_write+0x5a8>)
 8012304:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012308:	4955      	ldr	r1, [pc, #340]	; (8012460 <tcp_write+0x5b8>)
 801230a:	4853      	ldr	r0, [pc, #332]	; (8012458 <tcp_write+0x5b0>)
 801230c:	f003 f8e2 	bl	80154d4 <iprintf>
      prev_seg->next = seg;
 8012310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012312:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012314:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012318:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801231a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801231e:	8b3b      	ldrh	r3, [r7, #24]
 8012320:	4413      	add	r3, r2
 8012322:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012326:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801232a:	88fb      	ldrh	r3, [r7, #6]
 801232c:	429a      	cmp	r2, r3
 801232e:	f4ff af3d 	bcc.w	80121ac <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012332:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012334:	2b00      	cmp	r3, #0
 8012336:	d02c      	beq.n	8012392 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801233a:	685b      	ldr	r3, [r3, #4]
 801233c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801233e:	e01e      	b.n	801237e <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8012340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012342:	891a      	ldrh	r2, [r3, #8]
 8012344:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012346:	4413      	add	r3, r2
 8012348:	b29a      	uxth	r2, r3
 801234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801234c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d110      	bne.n	8012378 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012358:	685b      	ldr	r3, [r3, #4]
 801235a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801235c:	8952      	ldrh	r2, [r2, #10]
 801235e:	4413      	add	r3, r2
 8012360:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012362:	68b9      	ldr	r1, [r7, #8]
 8012364:	4618      	mov	r0, r3
 8012366:	f002 fb84 	bl	8014a72 <memcpy>
        p->len += oversize_used;
 801236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801236c:	895a      	ldrh	r2, [r3, #10]
 801236e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012370:	4413      	add	r3, r2
 8012372:	b29a      	uxth	r2, r3
 8012374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012376:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012380:	2b00      	cmp	r3, #0
 8012382:	d1dd      	bne.n	8012340 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8012384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012386:	891a      	ldrh	r2, [r3, #8]
 8012388:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801238a:	4413      	add	r3, r2
 801238c:	b29a      	uxth	r2, r3
 801238e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012390:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012392:	8a7a      	ldrh	r2, [r7, #18]
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801239a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801239c:	2b00      	cmp	r3, #0
 801239e:	d018      	beq.n	80123d2 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80123a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d106      	bne.n	80123b4 <tcp_write+0x50c>
 80123a6:	4b2a      	ldr	r3, [pc, #168]	; (8012450 <tcp_write+0x5a8>)
 80123a8:	f240 22e1 	movw	r2, #737	; 0x2e1
 80123ac:	492d      	ldr	r1, [pc, #180]	; (8012464 <tcp_write+0x5bc>)
 80123ae:	482a      	ldr	r0, [pc, #168]	; (8012458 <tcp_write+0x5b0>)
 80123b0:	f003 f890 	bl	80154d4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80123b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123b6:	685b      	ldr	r3, [r3, #4]
 80123b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80123ba:	4618      	mov	r0, r3
 80123bc:	f7fb fcde 	bl	800dd7c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80123c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123c2:	891a      	ldrh	r2, [r3, #8]
 80123c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123c6:	891b      	ldrh	r3, [r3, #8]
 80123c8:	4413      	add	r3, r2
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ce:	811a      	strh	r2, [r3, #8]
 80123d0:	e037      	b.n	8012442 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 80123d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d034      	beq.n	8012442 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80123d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d003      	beq.n	80123e6 <tcp_write+0x53e>
 80123de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123e0:	685b      	ldr	r3, [r3, #4]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d106      	bne.n	80123f4 <tcp_write+0x54c>
 80123e6:	4b1a      	ldr	r3, [pc, #104]	; (8012450 <tcp_write+0x5a8>)
 80123e8:	f240 22e7 	movw	r2, #743	; 0x2e7
 80123ec:	491e      	ldr	r1, [pc, #120]	; (8012468 <tcp_write+0x5c0>)
 80123ee:	481a      	ldr	r0, [pc, #104]	; (8012458 <tcp_write+0x5b0>)
 80123f0:	f003 f870 	bl	80154d4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80123f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123f6:	685b      	ldr	r3, [r3, #4]
 80123f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80123fa:	e009      	b.n	8012410 <tcp_write+0x568>
      p->tot_len += extendlen;
 80123fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123fe:	891a      	ldrh	r2, [r3, #8]
 8012400:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012402:	4413      	add	r3, r2
 8012404:	b29a      	uxth	r2, r3
 8012406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012408:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d1f1      	bne.n	80123fc <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8012418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801241a:	891a      	ldrh	r2, [r3, #8]
 801241c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801241e:	4413      	add	r3, r2
 8012420:	b29a      	uxth	r2, r3
 8012422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012424:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012428:	895a      	ldrh	r2, [r3, #10]
 801242a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801242c:	4413      	add	r3, r2
 801242e:	b29a      	uxth	r2, r3
 8012430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012432:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012436:	891a      	ldrh	r2, [r3, #8]
 8012438:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801243a:	4413      	add	r3, r2
 801243c:	b29a      	uxth	r2, r3
 801243e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012440:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012444:	2b00      	cmp	r3, #0
 8012446:	d111      	bne.n	801246c <tcp_write+0x5c4>
    pcb->unsent = queue;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801244c:	66da      	str	r2, [r3, #108]	; 0x6c
 801244e:	e010      	b.n	8012472 <tcp_write+0x5ca>
 8012450:	0801b0e0 	.word	0x0801b0e0
 8012454:	0801b3bc 	.word	0x0801b3bc
 8012458:	0801b170 	.word	0x0801b170
 801245c:	0801b3fc 	.word	0x0801b3fc
 8012460:	0801b40c 	.word	0x0801b40c
 8012464:	0801b420 	.word	0x0801b420
 8012468:	0801b458 	.word	0x0801b458
  } else {
    last_unsent->next = queue;
 801246c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801246e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012470:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012476:	88fb      	ldrh	r3, [r7, #6]
 8012478:	441a      	add	r2, r3
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012484:	88fb      	ldrh	r3, [r7, #6]
 8012486:	1ad3      	subs	r3, r2, r3
 8012488:	b29a      	uxth	r2, r3
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012496:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d00e      	beq.n	80124c2 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d10a      	bne.n	80124c2 <tcp_write+0x61a>
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d106      	bne.n	80124c2 <tcp_write+0x61a>
 80124b4:	4b2c      	ldr	r3, [pc, #176]	; (8012568 <tcp_write+0x6c0>)
 80124b6:	f240 3213 	movw	r2, #787	; 0x313
 80124ba:	492c      	ldr	r1, [pc, #176]	; (801256c <tcp_write+0x6c4>)
 80124bc:	482c      	ldr	r0, [pc, #176]	; (8012570 <tcp_write+0x6c8>)
 80124be:	f003 f809 	bl	80154d4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80124c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d016      	beq.n	80124f6 <tcp_write+0x64e>
 80124c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124ca:	68db      	ldr	r3, [r3, #12]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d012      	beq.n	80124f6 <tcp_write+0x64e>
 80124d0:	797b      	ldrb	r3, [r7, #5]
 80124d2:	f003 0302 	and.w	r3, r3, #2
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d10d      	bne.n	80124f6 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80124da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124dc:	68db      	ldr	r3, [r3, #12]
 80124de:	899b      	ldrh	r3, [r3, #12]
 80124e0:	b29c      	uxth	r4, r3
 80124e2:	2008      	movs	r0, #8
 80124e4:	f7f9 fff2 	bl	800c4cc <lwip_htons>
 80124e8:	4603      	mov	r3, r0
 80124ea:	461a      	mov	r2, r3
 80124ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124ee:	68db      	ldr	r3, [r3, #12]
 80124f0:	4322      	orrs	r2, r4
 80124f2:	b292      	uxth	r2, r2
 80124f4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80124f6:	2300      	movs	r3, #0
 80124f8:	e031      	b.n	801255e <tcp_write+0x6b6>
          goto memerr;
 80124fa:	bf00      	nop
 80124fc:	e006      	b.n	801250c <tcp_write+0x664>
            goto memerr;
 80124fe:	bf00      	nop
 8012500:	e004      	b.n	801250c <tcp_write+0x664>
        goto memerr;
 8012502:	bf00      	nop
 8012504:	e002      	b.n	801250c <tcp_write+0x664>
        goto memerr;
 8012506:	bf00      	nop
 8012508:	e000      	b.n	801250c <tcp_write+0x664>
      goto memerr;
 801250a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	8b5b      	ldrh	r3, [r3, #26]
 8012510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012514:	b29a      	uxth	r2, r3
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801251a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801251c:	2b00      	cmp	r3, #0
 801251e:	d002      	beq.n	8012526 <tcp_write+0x67e>
    pbuf_free(concat_p);
 8012520:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012522:	f7fb fb5d 	bl	800dbe0 <pbuf_free>
  }
  if (queue != NULL) {
 8012526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012528:	2b00      	cmp	r3, #0
 801252a:	d002      	beq.n	8012532 <tcp_write+0x68a>
    tcp_segs_free(queue);
 801252c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801252e:	f7fc ff67 	bl	800f400 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012538:	2b00      	cmp	r3, #0
 801253a:	d00e      	beq.n	801255a <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012540:	2b00      	cmp	r3, #0
 8012542:	d10a      	bne.n	801255a <tcp_write+0x6b2>
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012548:	2b00      	cmp	r3, #0
 801254a:	d106      	bne.n	801255a <tcp_write+0x6b2>
 801254c:	4b06      	ldr	r3, [pc, #24]	; (8012568 <tcp_write+0x6c0>)
 801254e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8012552:	4906      	ldr	r1, [pc, #24]	; (801256c <tcp_write+0x6c4>)
 8012554:	4806      	ldr	r0, [pc, #24]	; (8012570 <tcp_write+0x6c8>)
 8012556:	f002 ffbd 	bl	80154d4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801255a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801255e:	4618      	mov	r0, r3
 8012560:	375c      	adds	r7, #92	; 0x5c
 8012562:	46bd      	mov	sp, r7
 8012564:	bd90      	pop	{r4, r7, pc}
 8012566:	bf00      	nop
 8012568:	0801b0e0 	.word	0x0801b0e0
 801256c:	0801b490 	.word	0x0801b490
 8012570:	0801b170 	.word	0x0801b170

08012574 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012574:	b590      	push	{r4, r7, lr}
 8012576:	b08b      	sub	sp, #44	; 0x2c
 8012578:	af02      	add	r7, sp, #8
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	460b      	mov	r3, r1
 801257e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012580:	2300      	movs	r3, #0
 8012582:	61fb      	str	r3, [r7, #28]
 8012584:	2300      	movs	r3, #0
 8012586:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012588:	2300      	movs	r3, #0
 801258a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d106      	bne.n	80125a0 <tcp_split_unsent_seg+0x2c>
 8012592:	4b95      	ldr	r3, [pc, #596]	; (80127e8 <tcp_split_unsent_seg+0x274>)
 8012594:	f240 324b 	movw	r2, #843	; 0x34b
 8012598:	4994      	ldr	r1, [pc, #592]	; (80127ec <tcp_split_unsent_seg+0x278>)
 801259a:	4895      	ldr	r0, [pc, #596]	; (80127f0 <tcp_split_unsent_seg+0x27c>)
 801259c:	f002 ff9a 	bl	80154d4 <iprintf>

  useg = pcb->unsent;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125a4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80125a6:	697b      	ldr	r3, [r7, #20]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d102      	bne.n	80125b2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80125ac:	f04f 33ff 	mov.w	r3, #4294967295
 80125b0:	e116      	b.n	80127e0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80125b2:	887b      	ldrh	r3, [r7, #2]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d109      	bne.n	80125cc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80125b8:	4b8b      	ldr	r3, [pc, #556]	; (80127e8 <tcp_split_unsent_seg+0x274>)
 80125ba:	f240 3253 	movw	r2, #851	; 0x353
 80125be:	498d      	ldr	r1, [pc, #564]	; (80127f4 <tcp_split_unsent_seg+0x280>)
 80125c0:	488b      	ldr	r0, [pc, #556]	; (80127f0 <tcp_split_unsent_seg+0x27c>)
 80125c2:	f002 ff87 	bl	80154d4 <iprintf>
    return ERR_VAL;
 80125c6:	f06f 0305 	mvn.w	r3, #5
 80125ca:	e109      	b.n	80127e0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	891b      	ldrh	r3, [r3, #8]
 80125d0:	887a      	ldrh	r2, [r7, #2]
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d301      	bcc.n	80125da <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80125d6:	2300      	movs	r3, #0
 80125d8:	e102      	b.n	80127e0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125de:	887a      	ldrh	r2, [r7, #2]
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d906      	bls.n	80125f2 <tcp_split_unsent_seg+0x7e>
 80125e4:	4b80      	ldr	r3, [pc, #512]	; (80127e8 <tcp_split_unsent_seg+0x274>)
 80125e6:	f240 325b 	movw	r2, #859	; 0x35b
 80125ea:	4983      	ldr	r1, [pc, #524]	; (80127f8 <tcp_split_unsent_seg+0x284>)
 80125ec:	4880      	ldr	r0, [pc, #512]	; (80127f0 <tcp_split_unsent_seg+0x27c>)
 80125ee:	f002 ff71 	bl	80154d4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	891b      	ldrh	r3, [r3, #8]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d106      	bne.n	8012608 <tcp_split_unsent_seg+0x94>
 80125fa:	4b7b      	ldr	r3, [pc, #492]	; (80127e8 <tcp_split_unsent_seg+0x274>)
 80125fc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012600:	497e      	ldr	r1, [pc, #504]	; (80127fc <tcp_split_unsent_seg+0x288>)
 8012602:	487b      	ldr	r0, [pc, #492]	; (80127f0 <tcp_split_unsent_seg+0x27c>)
 8012604:	f002 ff66 	bl	80154d4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	7a9b      	ldrb	r3, [r3, #10]
 801260c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801260e:	7bfb      	ldrb	r3, [r7, #15]
 8012610:	009b      	lsls	r3, r3, #2
 8012612:	b2db      	uxtb	r3, r3
 8012614:	f003 0304 	and.w	r3, r3, #4
 8012618:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	891a      	ldrh	r2, [r3, #8]
 801261e:	887b      	ldrh	r3, [r7, #2]
 8012620:	1ad3      	subs	r3, r2, r3
 8012622:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012624:	7bbb      	ldrb	r3, [r7, #14]
 8012626:	b29a      	uxth	r2, r3
 8012628:	89bb      	ldrh	r3, [r7, #12]
 801262a:	4413      	add	r3, r2
 801262c:	b29b      	uxth	r3, r3
 801262e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012632:	4619      	mov	r1, r3
 8012634:	2036      	movs	r0, #54	; 0x36
 8012636:	f7fa fff3 	bl	800d620 <pbuf_alloc>
 801263a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801263c:	693b      	ldr	r3, [r7, #16]
 801263e:	2b00      	cmp	r3, #0
 8012640:	f000 80b7 	beq.w	80127b2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012644:	697b      	ldr	r3, [r7, #20]
 8012646:	685b      	ldr	r3, [r3, #4]
 8012648:	891a      	ldrh	r2, [r3, #8]
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	891b      	ldrh	r3, [r3, #8]
 801264e:	1ad3      	subs	r3, r2, r3
 8012650:	b29a      	uxth	r2, r3
 8012652:	887b      	ldrh	r3, [r7, #2]
 8012654:	4413      	add	r3, r2
 8012656:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012658:	697b      	ldr	r3, [r7, #20]
 801265a:	6858      	ldr	r0, [r3, #4]
 801265c:	693b      	ldr	r3, [r7, #16]
 801265e:	685a      	ldr	r2, [r3, #4]
 8012660:	7bbb      	ldrb	r3, [r7, #14]
 8012662:	18d1      	adds	r1, r2, r3
 8012664:	897b      	ldrh	r3, [r7, #10]
 8012666:	89ba      	ldrh	r2, [r7, #12]
 8012668:	f7fb fcc0 	bl	800dfec <pbuf_copy_partial>
 801266c:	4603      	mov	r3, r0
 801266e:	461a      	mov	r2, r3
 8012670:	89bb      	ldrh	r3, [r7, #12]
 8012672:	4293      	cmp	r3, r2
 8012674:	f040 809f 	bne.w	80127b6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	68db      	ldr	r3, [r3, #12]
 801267c:	899b      	ldrh	r3, [r3, #12]
 801267e:	b29b      	uxth	r3, r3
 8012680:	4618      	mov	r0, r3
 8012682:	f7f9 ff23 	bl	800c4cc <lwip_htons>
 8012686:	4603      	mov	r3, r0
 8012688:	b2db      	uxtb	r3, r3
 801268a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801268e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012690:	2300      	movs	r3, #0
 8012692:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012694:	7efb      	ldrb	r3, [r7, #27]
 8012696:	f003 0308 	and.w	r3, r3, #8
 801269a:	2b00      	cmp	r3, #0
 801269c:	d007      	beq.n	80126ae <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801269e:	7efb      	ldrb	r3, [r7, #27]
 80126a0:	f023 0308 	bic.w	r3, r3, #8
 80126a4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80126a6:	7ebb      	ldrb	r3, [r7, #26]
 80126a8:	f043 0308 	orr.w	r3, r3, #8
 80126ac:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80126ae:	7efb      	ldrb	r3, [r7, #27]
 80126b0:	f003 0301 	and.w	r3, r3, #1
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d007      	beq.n	80126c8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80126b8:	7efb      	ldrb	r3, [r7, #27]
 80126ba:	f023 0301 	bic.w	r3, r3, #1
 80126be:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80126c0:	7ebb      	ldrb	r3, [r7, #26]
 80126c2:	f043 0301 	orr.w	r3, r3, #1
 80126c6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80126c8:	697b      	ldr	r3, [r7, #20]
 80126ca:	68db      	ldr	r3, [r3, #12]
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7f9 ff11 	bl	800c4f6 <lwip_htonl>
 80126d4:	4602      	mov	r2, r0
 80126d6:	887b      	ldrh	r3, [r7, #2]
 80126d8:	18d1      	adds	r1, r2, r3
 80126da:	7eba      	ldrb	r2, [r7, #26]
 80126dc:	7bfb      	ldrb	r3, [r7, #15]
 80126de:	9300      	str	r3, [sp, #0]
 80126e0:	460b      	mov	r3, r1
 80126e2:	6939      	ldr	r1, [r7, #16]
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f7ff fa4d 	bl	8011b84 <tcp_create_segment>
 80126ea:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80126ec:	69fb      	ldr	r3, [r7, #28]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d063      	beq.n	80127ba <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80126f2:	697b      	ldr	r3, [r7, #20]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7fb fb00 	bl	800dcfc <pbuf_clen>
 80126fc:	4603      	mov	r3, r0
 80126fe:	461a      	mov	r2, r3
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012706:	1a9b      	subs	r3, r3, r2
 8012708:	b29a      	uxth	r2, r3
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012710:	697b      	ldr	r3, [r7, #20]
 8012712:	6858      	ldr	r0, [r3, #4]
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	685b      	ldr	r3, [r3, #4]
 8012718:	891a      	ldrh	r2, [r3, #8]
 801271a:	89bb      	ldrh	r3, [r7, #12]
 801271c:	1ad3      	subs	r3, r2, r3
 801271e:	b29b      	uxth	r3, r3
 8012720:	4619      	mov	r1, r3
 8012722:	f7fb f8d7 	bl	800d8d4 <pbuf_realloc>
  useg->len -= remainder;
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	891a      	ldrh	r2, [r3, #8]
 801272a:	89bb      	ldrh	r3, [r7, #12]
 801272c:	1ad3      	subs	r3, r2, r3
 801272e:	b29a      	uxth	r2, r3
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	68db      	ldr	r3, [r3, #12]
 8012738:	899b      	ldrh	r3, [r3, #12]
 801273a:	b29c      	uxth	r4, r3
 801273c:	7efb      	ldrb	r3, [r7, #27]
 801273e:	b29b      	uxth	r3, r3
 8012740:	4618      	mov	r0, r3
 8012742:	f7f9 fec3 	bl	800c4cc <lwip_htons>
 8012746:	4603      	mov	r3, r0
 8012748:	461a      	mov	r2, r3
 801274a:	697b      	ldr	r3, [r7, #20]
 801274c:	68db      	ldr	r3, [r3, #12]
 801274e:	4322      	orrs	r2, r4
 8012750:	b292      	uxth	r2, r2
 8012752:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012754:	697b      	ldr	r3, [r7, #20]
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	4618      	mov	r0, r3
 801275a:	f7fb facf 	bl	800dcfc <pbuf_clen>
 801275e:	4603      	mov	r3, r0
 8012760:	461a      	mov	r2, r3
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012768:	4413      	add	r3, r2
 801276a:	b29a      	uxth	r2, r3
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012772:	69fb      	ldr	r3, [r7, #28]
 8012774:	685b      	ldr	r3, [r3, #4]
 8012776:	4618      	mov	r0, r3
 8012778:	f7fb fac0 	bl	800dcfc <pbuf_clen>
 801277c:	4603      	mov	r3, r0
 801277e:	461a      	mov	r2, r3
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012786:	4413      	add	r3, r2
 8012788:	b29a      	uxth	r2, r3
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	681a      	ldr	r2, [r3, #0]
 8012794:	69fb      	ldr	r3, [r7, #28]
 8012796:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	69fa      	ldr	r2, [r7, #28]
 801279c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801279e:	69fb      	ldr	r3, [r7, #28]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d103      	bne.n	80127ae <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2200      	movs	r2, #0
 80127aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80127ae:	2300      	movs	r3, #0
 80127b0:	e016      	b.n	80127e0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80127b2:	bf00      	nop
 80127b4:	e002      	b.n	80127bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80127b6:	bf00      	nop
 80127b8:	e000      	b.n	80127bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80127ba:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80127bc:	69fb      	ldr	r3, [r7, #28]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d006      	beq.n	80127d0 <tcp_split_unsent_seg+0x25c>
 80127c2:	4b09      	ldr	r3, [pc, #36]	; (80127e8 <tcp_split_unsent_seg+0x274>)
 80127c4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80127c8:	490d      	ldr	r1, [pc, #52]	; (8012800 <tcp_split_unsent_seg+0x28c>)
 80127ca:	4809      	ldr	r0, [pc, #36]	; (80127f0 <tcp_split_unsent_seg+0x27c>)
 80127cc:	f002 fe82 	bl	80154d4 <iprintf>
  if (p != NULL) {
 80127d0:	693b      	ldr	r3, [r7, #16]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d002      	beq.n	80127dc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80127d6:	6938      	ldr	r0, [r7, #16]
 80127d8:	f7fb fa02 	bl	800dbe0 <pbuf_free>
  }

  return ERR_MEM;
 80127dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	3724      	adds	r7, #36	; 0x24
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd90      	pop	{r4, r7, pc}
 80127e8:	0801b0e0 	.word	0x0801b0e0
 80127ec:	0801b4b0 	.word	0x0801b4b0
 80127f0:	0801b170 	.word	0x0801b170
 80127f4:	0801b4d4 	.word	0x0801b4d4
 80127f8:	0801b4f8 	.word	0x0801b4f8
 80127fc:	0801b508 	.word	0x0801b508
 8012800:	0801b518 	.word	0x0801b518

08012804 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012804:	b590      	push	{r4, r7, lr}
 8012806:	b085      	sub	sp, #20
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d106      	bne.n	8012820 <tcp_send_fin+0x1c>
 8012812:	4b21      	ldr	r3, [pc, #132]	; (8012898 <tcp_send_fin+0x94>)
 8012814:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012818:	4920      	ldr	r1, [pc, #128]	; (801289c <tcp_send_fin+0x98>)
 801281a:	4821      	ldr	r0, [pc, #132]	; (80128a0 <tcp_send_fin+0x9c>)
 801281c:	f002 fe5a 	bl	80154d4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012824:	2b00      	cmp	r3, #0
 8012826:	d02e      	beq.n	8012886 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801282c:	60fb      	str	r3, [r7, #12]
 801282e:	e002      	b.n	8012836 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d1f8      	bne.n	8012830 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	68db      	ldr	r3, [r3, #12]
 8012842:	899b      	ldrh	r3, [r3, #12]
 8012844:	b29b      	uxth	r3, r3
 8012846:	4618      	mov	r0, r3
 8012848:	f7f9 fe40 	bl	800c4cc <lwip_htons>
 801284c:	4603      	mov	r3, r0
 801284e:	b2db      	uxtb	r3, r3
 8012850:	f003 0307 	and.w	r3, r3, #7
 8012854:	2b00      	cmp	r3, #0
 8012856:	d116      	bne.n	8012886 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	68db      	ldr	r3, [r3, #12]
 801285c:	899b      	ldrh	r3, [r3, #12]
 801285e:	b29c      	uxth	r4, r3
 8012860:	2001      	movs	r0, #1
 8012862:	f7f9 fe33 	bl	800c4cc <lwip_htons>
 8012866:	4603      	mov	r3, r0
 8012868:	461a      	mov	r2, r3
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	68db      	ldr	r3, [r3, #12]
 801286e:	4322      	orrs	r2, r4
 8012870:	b292      	uxth	r2, r2
 8012872:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	8b5b      	ldrh	r3, [r3, #26]
 8012878:	f043 0320 	orr.w	r3, r3, #32
 801287c:	b29a      	uxth	r2, r3
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012882:	2300      	movs	r3, #0
 8012884:	e004      	b.n	8012890 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012886:	2101      	movs	r1, #1
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f000 f80b 	bl	80128a4 <tcp_enqueue_flags>
 801288e:	4603      	mov	r3, r0
}
 8012890:	4618      	mov	r0, r3
 8012892:	3714      	adds	r7, #20
 8012894:	46bd      	mov	sp, r7
 8012896:	bd90      	pop	{r4, r7, pc}
 8012898:	0801b0e0 	.word	0x0801b0e0
 801289c:	0801b524 	.word	0x0801b524
 80128a0:	0801b170 	.word	0x0801b170

080128a4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b08a      	sub	sp, #40	; 0x28
 80128a8:	af02      	add	r7, sp, #8
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	460b      	mov	r3, r1
 80128ae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80128b0:	2300      	movs	r3, #0
 80128b2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80128b4:	2300      	movs	r3, #0
 80128b6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80128b8:	78fb      	ldrb	r3, [r7, #3]
 80128ba:	f003 0303 	and.w	r3, r3, #3
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d106      	bne.n	80128d0 <tcp_enqueue_flags+0x2c>
 80128c2:	4b67      	ldr	r3, [pc, #412]	; (8012a60 <tcp_enqueue_flags+0x1bc>)
 80128c4:	f240 4212 	movw	r2, #1042	; 0x412
 80128c8:	4966      	ldr	r1, [pc, #408]	; (8012a64 <tcp_enqueue_flags+0x1c0>)
 80128ca:	4867      	ldr	r0, [pc, #412]	; (8012a68 <tcp_enqueue_flags+0x1c4>)
 80128cc:	f002 fe02 	bl	80154d4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d106      	bne.n	80128e4 <tcp_enqueue_flags+0x40>
 80128d6:	4b62      	ldr	r3, [pc, #392]	; (8012a60 <tcp_enqueue_flags+0x1bc>)
 80128d8:	f240 4213 	movw	r2, #1043	; 0x413
 80128dc:	4963      	ldr	r1, [pc, #396]	; (8012a6c <tcp_enqueue_flags+0x1c8>)
 80128de:	4862      	ldr	r0, [pc, #392]	; (8012a68 <tcp_enqueue_flags+0x1c4>)
 80128e0:	f002 fdf8 	bl	80154d4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80128e4:	78fb      	ldrb	r3, [r7, #3]
 80128e6:	f003 0302 	and.w	r3, r3, #2
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d001      	beq.n	80128f2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80128ee:	2301      	movs	r3, #1
 80128f0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80128f2:	7ffb      	ldrb	r3, [r7, #31]
 80128f4:	009b      	lsls	r3, r3, #2
 80128f6:	b2db      	uxtb	r3, r3
 80128f8:	f003 0304 	and.w	r3, r3, #4
 80128fc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80128fe:	7dfb      	ldrb	r3, [r7, #23]
 8012900:	b29b      	uxth	r3, r3
 8012902:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012906:	4619      	mov	r1, r3
 8012908:	2036      	movs	r0, #54	; 0x36
 801290a:	f7fa fe89 	bl	800d620 <pbuf_alloc>
 801290e:	6138      	str	r0, [r7, #16]
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d109      	bne.n	801292a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	8b5b      	ldrh	r3, [r3, #26]
 801291a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801291e:	b29a      	uxth	r2, r3
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012924:	f04f 33ff 	mov.w	r3, #4294967295
 8012928:	e095      	b.n	8012a56 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801292a:	693b      	ldr	r3, [r7, #16]
 801292c:	895a      	ldrh	r2, [r3, #10]
 801292e:	7dfb      	ldrb	r3, [r7, #23]
 8012930:	b29b      	uxth	r3, r3
 8012932:	429a      	cmp	r2, r3
 8012934:	d206      	bcs.n	8012944 <tcp_enqueue_flags+0xa0>
 8012936:	4b4a      	ldr	r3, [pc, #296]	; (8012a60 <tcp_enqueue_flags+0x1bc>)
 8012938:	f240 423a 	movw	r2, #1082	; 0x43a
 801293c:	494c      	ldr	r1, [pc, #304]	; (8012a70 <tcp_enqueue_flags+0x1cc>)
 801293e:	484a      	ldr	r0, [pc, #296]	; (8012a68 <tcp_enqueue_flags+0x1c4>)
 8012940:	f002 fdc8 	bl	80154d4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012948:	78fa      	ldrb	r2, [r7, #3]
 801294a:	7ffb      	ldrb	r3, [r7, #31]
 801294c:	9300      	str	r3, [sp, #0]
 801294e:	460b      	mov	r3, r1
 8012950:	6939      	ldr	r1, [r7, #16]
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f7ff f916 	bl	8011b84 <tcp_create_segment>
 8012958:	60f8      	str	r0, [r7, #12]
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d109      	bne.n	8012974 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	8b5b      	ldrh	r3, [r3, #26]
 8012964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012968:	b29a      	uxth	r2, r3
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801296e:	f04f 33ff 	mov.w	r3, #4294967295
 8012972:	e070      	b.n	8012a56 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	68db      	ldr	r3, [r3, #12]
 8012978:	f003 0303 	and.w	r3, r3, #3
 801297c:	2b00      	cmp	r3, #0
 801297e:	d006      	beq.n	801298e <tcp_enqueue_flags+0xea>
 8012980:	4b37      	ldr	r3, [pc, #220]	; (8012a60 <tcp_enqueue_flags+0x1bc>)
 8012982:	f240 4242 	movw	r2, #1090	; 0x442
 8012986:	493b      	ldr	r1, [pc, #236]	; (8012a74 <tcp_enqueue_flags+0x1d0>)
 8012988:	4837      	ldr	r0, [pc, #220]	; (8012a68 <tcp_enqueue_flags+0x1c4>)
 801298a:	f002 fda3 	bl	80154d4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	891b      	ldrh	r3, [r3, #8]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d006      	beq.n	80129a4 <tcp_enqueue_flags+0x100>
 8012996:	4b32      	ldr	r3, [pc, #200]	; (8012a60 <tcp_enqueue_flags+0x1bc>)
 8012998:	f240 4243 	movw	r2, #1091	; 0x443
 801299c:	4936      	ldr	r1, [pc, #216]	; (8012a78 <tcp_enqueue_flags+0x1d4>)
 801299e:	4832      	ldr	r0, [pc, #200]	; (8012a68 <tcp_enqueue_flags+0x1c4>)
 80129a0:	f002 fd98 	bl	80154d4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d103      	bne.n	80129b4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	68fa      	ldr	r2, [r7, #12]
 80129b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80129b2:	e00d      	b.n	80129d0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129b8:	61bb      	str	r3, [r7, #24]
 80129ba:	e002      	b.n	80129c2 <tcp_enqueue_flags+0x11e>
 80129bc:	69bb      	ldr	r3, [r7, #24]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	61bb      	str	r3, [r7, #24]
 80129c2:	69bb      	ldr	r3, [r7, #24]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d1f8      	bne.n	80129bc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80129ca:	69bb      	ldr	r3, [r7, #24]
 80129cc:	68fa      	ldr	r2, [r7, #12]
 80129ce:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2200      	movs	r2, #0
 80129d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80129d8:	78fb      	ldrb	r3, [r7, #3]
 80129da:	f003 0302 	and.w	r3, r3, #2
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d104      	bne.n	80129ec <tcp_enqueue_flags+0x148>
 80129e2:	78fb      	ldrb	r3, [r7, #3]
 80129e4:	f003 0301 	and.w	r3, r3, #1
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d004      	beq.n	80129f6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129f0:	1c5a      	adds	r2, r3, #1
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80129f6:	78fb      	ldrb	r3, [r7, #3]
 80129f8:	f003 0301 	and.w	r3, r3, #1
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d006      	beq.n	8012a0e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	8b5b      	ldrh	r3, [r3, #26]
 8012a04:	f043 0320 	orr.w	r3, r3, #32
 8012a08:	b29a      	uxth	r2, r3
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	685b      	ldr	r3, [r3, #4]
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7fb f972 	bl	800dcfc <pbuf_clen>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a22:	4413      	add	r3, r2
 8012a24:	b29a      	uxth	r2, r3
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d00e      	beq.n	8012a54 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d10a      	bne.n	8012a54 <tcp_enqueue_flags+0x1b0>
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d106      	bne.n	8012a54 <tcp_enqueue_flags+0x1b0>
 8012a46:	4b06      	ldr	r3, [pc, #24]	; (8012a60 <tcp_enqueue_flags+0x1bc>)
 8012a48:	f240 4266 	movw	r2, #1126	; 0x466
 8012a4c:	490b      	ldr	r1, [pc, #44]	; (8012a7c <tcp_enqueue_flags+0x1d8>)
 8012a4e:	4806      	ldr	r0, [pc, #24]	; (8012a68 <tcp_enqueue_flags+0x1c4>)
 8012a50:	f002 fd40 	bl	80154d4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012a54:	2300      	movs	r3, #0
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3720      	adds	r7, #32
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	0801b0e0 	.word	0x0801b0e0
 8012a64:	0801b540 	.word	0x0801b540
 8012a68:	0801b170 	.word	0x0801b170
 8012a6c:	0801b598 	.word	0x0801b598
 8012a70:	0801b5b8 	.word	0x0801b5b8
 8012a74:	0801b5f4 	.word	0x0801b5f4
 8012a78:	0801b60c 	.word	0x0801b60c
 8012a7c:	0801b638 	.word	0x0801b638

08012a80 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012a80:	b5b0      	push	{r4, r5, r7, lr}
 8012a82:	b08a      	sub	sp, #40	; 0x28
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d106      	bne.n	8012a9c <tcp_output+0x1c>
 8012a8e:	4ba0      	ldr	r3, [pc, #640]	; (8012d10 <tcp_output+0x290>)
 8012a90:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012a94:	499f      	ldr	r1, [pc, #636]	; (8012d14 <tcp_output+0x294>)
 8012a96:	48a0      	ldr	r0, [pc, #640]	; (8012d18 <tcp_output+0x298>)
 8012a98:	f002 fd1c 	bl	80154d4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	7d1b      	ldrb	r3, [r3, #20]
 8012aa0:	2b01      	cmp	r3, #1
 8012aa2:	d106      	bne.n	8012ab2 <tcp_output+0x32>
 8012aa4:	4b9a      	ldr	r3, [pc, #616]	; (8012d10 <tcp_output+0x290>)
 8012aa6:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8012aaa:	499c      	ldr	r1, [pc, #624]	; (8012d1c <tcp_output+0x29c>)
 8012aac:	489a      	ldr	r0, [pc, #616]	; (8012d18 <tcp_output+0x298>)
 8012aae:	f002 fd11 	bl	80154d4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012ab2:	4b9b      	ldr	r3, [pc, #620]	; (8012d20 <tcp_output+0x2a0>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	687a      	ldr	r2, [r7, #4]
 8012ab8:	429a      	cmp	r2, r3
 8012aba:	d101      	bne.n	8012ac0 <tcp_output+0x40>
    return ERR_OK;
 8012abc:	2300      	movs	r3, #0
 8012abe:	e1d2      	b.n	8012e66 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012acc:	429a      	cmp	r2, r3
 8012ace:	d203      	bcs.n	8012ad8 <tcp_output+0x58>
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ad6:	e002      	b.n	8012ade <tcp_output+0x5e>
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ade:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ae4:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d10b      	bne.n	8012b04 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	8b5b      	ldrh	r3, [r3, #26]
 8012af0:	f003 0302 	and.w	r3, r3, #2
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	f000 81a9 	beq.w	8012e4c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f000 fdd8 	bl	80136b0 <tcp_send_empty_ack>
 8012b00:	4603      	mov	r3, r0
 8012b02:	e1b0      	b.n	8012e66 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012b04:	6879      	ldr	r1, [r7, #4]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	3304      	adds	r3, #4
 8012b0a:	461a      	mov	r2, r3
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f7ff f81d 	bl	8011b4c <tcp_route>
 8012b12:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012b14:	697b      	ldr	r3, [r7, #20]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d102      	bne.n	8012b20 <tcp_output+0xa0>
    return ERR_RTE;
 8012b1a:	f06f 0303 	mvn.w	r3, #3
 8012b1e:	e1a2      	b.n	8012e66 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d003      	beq.n	8012b2e <tcp_output+0xae>
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d111      	bne.n	8012b52 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d002      	beq.n	8012b3a <tcp_output+0xba>
 8012b34:	697b      	ldr	r3, [r7, #20]
 8012b36:	3304      	adds	r3, #4
 8012b38:	e000      	b.n	8012b3c <tcp_output+0xbc>
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012b3e:	693b      	ldr	r3, [r7, #16]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d102      	bne.n	8012b4a <tcp_output+0xca>
      return ERR_RTE;
 8012b44:	f06f 0303 	mvn.w	r3, #3
 8012b48:	e18d      	b.n	8012e66 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	681a      	ldr	r2, [r3, #0]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b54:	68db      	ldr	r3, [r3, #12]
 8012b56:	685b      	ldr	r3, [r3, #4]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f7f9 fccc 	bl	800c4f6 <lwip_htonl>
 8012b5e:	4602      	mov	r2, r0
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b64:	1ad3      	subs	r3, r2, r3
 8012b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b68:	8912      	ldrh	r2, [r2, #8]
 8012b6a:	4413      	add	r3, r2
 8012b6c:	69ba      	ldr	r2, [r7, #24]
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d227      	bcs.n	8012bc2 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b78:	461a      	mov	r2, r3
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	4293      	cmp	r3, r2
 8012b7e:	d114      	bne.n	8012baa <tcp_output+0x12a>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d110      	bne.n	8012baa <tcp_output+0x12a>
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d10b      	bne.n	8012baa <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2200      	movs	r2, #0
 8012b96:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2201      	movs	r2, #1
 8012b9e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
      pcb->persist_probe = 0;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	8b5b      	ldrh	r3, [r3, #26]
 8012bae:	f003 0302 	and.w	r3, r3, #2
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	f000 814c 	beq.w	8012e50 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8012bb8:	6878      	ldr	r0, [r7, #4]
 8012bba:	f000 fd79 	bl	80136b0 <tcp_send_empty_ack>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	e151      	b.n	8012e66 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bce:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012bd0:	6a3b      	ldr	r3, [r7, #32]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	f000 811b 	beq.w	8012e0e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8012bd8:	e002      	b.n	8012be0 <tcp_output+0x160>
 8012bda:	6a3b      	ldr	r3, [r7, #32]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	623b      	str	r3, [r7, #32]
 8012be0:	6a3b      	ldr	r3, [r7, #32]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d1f8      	bne.n	8012bda <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012be8:	e111      	b.n	8012e0e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bec:	68db      	ldr	r3, [r3, #12]
 8012bee:	899b      	ldrh	r3, [r3, #12]
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f7f9 fc6a 	bl	800c4cc <lwip_htons>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	f003 0304 	and.w	r3, r3, #4
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d006      	beq.n	8012c12 <tcp_output+0x192>
 8012c04:	4b42      	ldr	r3, [pc, #264]	; (8012d10 <tcp_output+0x290>)
 8012c06:	f240 5237 	movw	r2, #1335	; 0x537
 8012c0a:	4946      	ldr	r1, [pc, #280]	; (8012d24 <tcp_output+0x2a4>)
 8012c0c:	4842      	ldr	r0, [pc, #264]	; (8012d18 <tcp_output+0x298>)
 8012c0e:	f002 fc61 	bl	80154d4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d01f      	beq.n	8012c5a <tcp_output+0x1da>
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	8b5b      	ldrh	r3, [r3, #26]
 8012c1e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d119      	bne.n	8012c5a <tcp_output+0x1da>
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d00b      	beq.n	8012c46 <tcp_output+0x1c6>
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d110      	bne.n	8012c5a <tcp_output+0x1da>
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c3c:	891a      	ldrh	r2, [r3, #8]
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d209      	bcs.n	8012c5a <tcp_output+0x1da>
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d004      	beq.n	8012c5a <tcp_output+0x1da>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c56:	2b07      	cmp	r3, #7
 8012c58:	d901      	bls.n	8012c5e <tcp_output+0x1de>
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	e000      	b.n	8012c60 <tcp_output+0x1e0>
 8012c5e:	2300      	movs	r3, #0
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d106      	bne.n	8012c72 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	8b5b      	ldrh	r3, [r3, #26]
 8012c68:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	f000 80e3 	beq.w	8012e38 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	7d1b      	ldrb	r3, [r3, #20]
 8012c76:	2b02      	cmp	r3, #2
 8012c78:	d00d      	beq.n	8012c96 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7c:	68db      	ldr	r3, [r3, #12]
 8012c7e:	899b      	ldrh	r3, [r3, #12]
 8012c80:	b29c      	uxth	r4, r3
 8012c82:	2010      	movs	r0, #16
 8012c84:	f7f9 fc22 	bl	800c4cc <lwip_htons>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	461a      	mov	r2, r3
 8012c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8e:	68db      	ldr	r3, [r3, #12]
 8012c90:	4322      	orrs	r2, r4
 8012c92:	b292      	uxth	r2, r2
 8012c94:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012c96:	697a      	ldr	r2, [r7, #20]
 8012c98:	6879      	ldr	r1, [r7, #4]
 8012c9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c9c:	f000 f908 	bl	8012eb0 <tcp_output_segment>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d009      	beq.n	8012cc0 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	8b5b      	ldrh	r3, [r3, #26]
 8012cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cb4:	b29a      	uxth	r2, r3
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	835a      	strh	r2, [r3, #26]
      return err;
 8012cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cbe:	e0d2      	b.n	8012e66 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc2:	681a      	ldr	r2, [r3, #0]
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	7d1b      	ldrb	r3, [r3, #20]
 8012ccc:	2b02      	cmp	r3, #2
 8012cce:	d006      	beq.n	8012cde <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	8b5b      	ldrh	r3, [r3, #26]
 8012cd4:	f023 0303 	bic.w	r3, r3, #3
 8012cd8:	b29a      	uxth	r2, r3
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce0:	68db      	ldr	r3, [r3, #12]
 8012ce2:	685b      	ldr	r3, [r3, #4]
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f7f9 fc06 	bl	800c4f6 <lwip_htonl>
 8012cea:	4604      	mov	r4, r0
 8012cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cee:	891b      	ldrh	r3, [r3, #8]
 8012cf0:	461d      	mov	r5, r3
 8012cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf4:	68db      	ldr	r3, [r3, #12]
 8012cf6:	899b      	ldrh	r3, [r3, #12]
 8012cf8:	b29b      	uxth	r3, r3
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7f9 fbe6 	bl	800c4cc <lwip_htons>
 8012d00:	4603      	mov	r3, r0
 8012d02:	b2db      	uxtb	r3, r3
 8012d04:	f003 0303 	and.w	r3, r3, #3
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d00d      	beq.n	8012d28 <tcp_output+0x2a8>
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	e00c      	b.n	8012d2a <tcp_output+0x2aa>
 8012d10:	0801b0e0 	.word	0x0801b0e0
 8012d14:	0801b660 	.word	0x0801b660
 8012d18:	0801b170 	.word	0x0801b170
 8012d1c:	0801b678 	.word	0x0801b678
 8012d20:	2000cfd8 	.word	0x2000cfd8
 8012d24:	0801b6a0 	.word	0x0801b6a0
 8012d28:	2300      	movs	r3, #0
 8012d2a:	442b      	add	r3, r5
 8012d2c:	4423      	add	r3, r4
 8012d2e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d34:	68bb      	ldr	r3, [r7, #8]
 8012d36:	1ad3      	subs	r3, r2, r3
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	da02      	bge.n	8012d42 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	68ba      	ldr	r2, [r7, #8]
 8012d40:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d44:	891b      	ldrh	r3, [r3, #8]
 8012d46:	461c      	mov	r4, r3
 8012d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4a:	68db      	ldr	r3, [r3, #12]
 8012d4c:	899b      	ldrh	r3, [r3, #12]
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7f9 fbbb 	bl	800c4cc <lwip_htons>
 8012d56:	4603      	mov	r3, r0
 8012d58:	b2db      	uxtb	r3, r3
 8012d5a:	f003 0303 	and.w	r3, r3, #3
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d001      	beq.n	8012d66 <tcp_output+0x2e6>
 8012d62:	2301      	movs	r3, #1
 8012d64:	e000      	b.n	8012d68 <tcp_output+0x2e8>
 8012d66:	2300      	movs	r3, #0
 8012d68:	4423      	add	r3, r4
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d049      	beq.n	8012e02 <tcp_output+0x382>
      seg->next = NULL;
 8012d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d70:	2200      	movs	r2, #0
 8012d72:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d105      	bne.n	8012d88 <tcp_output+0x308>
        pcb->unacked = seg;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d80:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d84:	623b      	str	r3, [r7, #32]
 8012d86:	e03f      	b.n	8012e08 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d8a:	68db      	ldr	r3, [r3, #12]
 8012d8c:	685b      	ldr	r3, [r3, #4]
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f7f9 fbb1 	bl	800c4f6 <lwip_htonl>
 8012d94:	4604      	mov	r4, r0
 8012d96:	6a3b      	ldr	r3, [r7, #32]
 8012d98:	68db      	ldr	r3, [r3, #12]
 8012d9a:	685b      	ldr	r3, [r3, #4]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7f9 fbaa 	bl	800c4f6 <lwip_htonl>
 8012da2:	4603      	mov	r3, r0
 8012da4:	1ae3      	subs	r3, r4, r3
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	da24      	bge.n	8012df4 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	3370      	adds	r3, #112	; 0x70
 8012dae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012db0:	e002      	b.n	8012db8 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012db2:	69fb      	ldr	r3, [r7, #28]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012db8:	69fb      	ldr	r3, [r7, #28]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d011      	beq.n	8012de4 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012dc0:	69fb      	ldr	r3, [r7, #28]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	68db      	ldr	r3, [r3, #12]
 8012dc6:	685b      	ldr	r3, [r3, #4]
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f7f9 fb94 	bl	800c4f6 <lwip_htonl>
 8012dce:	4604      	mov	r4, r0
 8012dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd2:	68db      	ldr	r3, [r3, #12]
 8012dd4:	685b      	ldr	r3, [r3, #4]
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f7f9 fb8d 	bl	800c4f6 <lwip_htonl>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	dbe6      	blt.n	8012db2 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8012de4:	69fb      	ldr	r3, [r7, #28]
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dea:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012df0:	601a      	str	r2, [r3, #0]
 8012df2:	e009      	b.n	8012e08 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012df4:	6a3b      	ldr	r3, [r7, #32]
 8012df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012df8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012dfa:	6a3b      	ldr	r3, [r7, #32]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	623b      	str	r3, [r7, #32]
 8012e00:	e002      	b.n	8012e08 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012e02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e04:	f7fc fb10 	bl	800f428 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d012      	beq.n	8012e3a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e16:	68db      	ldr	r3, [r3, #12]
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7f9 fb6b 	bl	800c4f6 <lwip_htonl>
 8012e20:	4602      	mov	r2, r0
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e26:	1ad3      	subs	r3, r2, r3
 8012e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e2a:	8912      	ldrh	r2, [r2, #8]
 8012e2c:	4413      	add	r3, r2
  while (seg != NULL &&
 8012e2e:	69ba      	ldr	r2, [r7, #24]
 8012e30:	429a      	cmp	r2, r3
 8012e32:	f4bf aeda 	bcs.w	8012bea <tcp_output+0x16a>
 8012e36:	e000      	b.n	8012e3a <tcp_output+0x3ba>
      break;
 8012e38:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d108      	bne.n	8012e54 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	2200      	movs	r2, #0
 8012e46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012e4a:	e004      	b.n	8012e56 <tcp_output+0x3d6>
    goto output_done;
 8012e4c:	bf00      	nop
 8012e4e:	e002      	b.n	8012e56 <tcp_output+0x3d6>
    goto output_done;
 8012e50:	bf00      	nop
 8012e52:	e000      	b.n	8012e56 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012e54:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	8b5b      	ldrh	r3, [r3, #26]
 8012e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012e5e:	b29a      	uxth	r2, r3
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012e64:	2300      	movs	r3, #0
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	3728      	adds	r7, #40	; 0x28
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8012e6e:	bf00      	nop

08012e70 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b082      	sub	sp, #8
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d106      	bne.n	8012e8c <tcp_output_segment_busy+0x1c>
 8012e7e:	4b09      	ldr	r3, [pc, #36]	; (8012ea4 <tcp_output_segment_busy+0x34>)
 8012e80:	f240 529a 	movw	r2, #1434	; 0x59a
 8012e84:	4908      	ldr	r1, [pc, #32]	; (8012ea8 <tcp_output_segment_busy+0x38>)
 8012e86:	4809      	ldr	r0, [pc, #36]	; (8012eac <tcp_output_segment_busy+0x3c>)
 8012e88:	f002 fb24 	bl	80154d4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	685b      	ldr	r3, [r3, #4]
 8012e90:	7b9b      	ldrb	r3, [r3, #14]
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	d001      	beq.n	8012e9a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012e96:	2301      	movs	r3, #1
 8012e98:	e000      	b.n	8012e9c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012e9a:	2300      	movs	r3, #0
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3708      	adds	r7, #8
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}
 8012ea4:	0801b0e0 	.word	0x0801b0e0
 8012ea8:	0801b6b8 	.word	0x0801b6b8
 8012eac:	0801b170 	.word	0x0801b170

08012eb0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012eb0:	b5b0      	push	{r4, r5, r7, lr}
 8012eb2:	b08c      	sub	sp, #48	; 0x30
 8012eb4:	af04      	add	r7, sp, #16
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d106      	bne.n	8012ed0 <tcp_output_segment+0x20>
 8012ec2:	4b64      	ldr	r3, [pc, #400]	; (8013054 <tcp_output_segment+0x1a4>)
 8012ec4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012ec8:	4963      	ldr	r1, [pc, #396]	; (8013058 <tcp_output_segment+0x1a8>)
 8012eca:	4864      	ldr	r0, [pc, #400]	; (801305c <tcp_output_segment+0x1ac>)
 8012ecc:	f002 fb02 	bl	80154d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d106      	bne.n	8012ee4 <tcp_output_segment+0x34>
 8012ed6:	4b5f      	ldr	r3, [pc, #380]	; (8013054 <tcp_output_segment+0x1a4>)
 8012ed8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012edc:	4960      	ldr	r1, [pc, #384]	; (8013060 <tcp_output_segment+0x1b0>)
 8012ede:	485f      	ldr	r0, [pc, #380]	; (801305c <tcp_output_segment+0x1ac>)
 8012ee0:	f002 faf8 	bl	80154d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d106      	bne.n	8012ef8 <tcp_output_segment+0x48>
 8012eea:	4b5a      	ldr	r3, [pc, #360]	; (8013054 <tcp_output_segment+0x1a4>)
 8012eec:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012ef0:	495c      	ldr	r1, [pc, #368]	; (8013064 <tcp_output_segment+0x1b4>)
 8012ef2:	485a      	ldr	r0, [pc, #360]	; (801305c <tcp_output_segment+0x1ac>)
 8012ef4:	f002 faee 	bl	80154d4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012ef8:	68f8      	ldr	r0, [r7, #12]
 8012efa:	f7ff ffb9 	bl	8012e70 <tcp_output_segment_busy>
 8012efe:	4603      	mov	r3, r0
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d001      	beq.n	8012f08 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012f04:	2300      	movs	r3, #0
 8012f06:	e0a0      	b.n	801304a <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	68dc      	ldr	r4, [r3, #12]
 8012f10:	4610      	mov	r0, r2
 8012f12:	f7f9 faf0 	bl	800c4f6 <lwip_htonl>
 8012f16:	4603      	mov	r3, r0
 8012f18:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012f1a:	68bb      	ldr	r3, [r7, #8]
 8012f1c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	68dc      	ldr	r4, [r3, #12]
 8012f22:	4610      	mov	r0, r2
 8012f24:	f7f9 fad2 	bl	800c4cc <lwip_htons>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f30:	68ba      	ldr	r2, [r7, #8]
 8012f32:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012f34:	441a      	add	r2, r3
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	68db      	ldr	r3, [r3, #12]
 8012f3e:	3314      	adds	r3, #20
 8012f40:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	7a9b      	ldrb	r3, [r3, #10]
 8012f46:	f003 0301 	and.w	r3, r3, #1
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d015      	beq.n	8012f7a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	3304      	adds	r3, #4
 8012f52:	461a      	mov	r2, r3
 8012f54:	6879      	ldr	r1, [r7, #4]
 8012f56:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8012f5a:	f7fc fdff 	bl	800fb5c <tcp_eff_send_mss_netif>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012f62:	8b7b      	ldrh	r3, [r7, #26]
 8012f64:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f7f9 fac4 	bl	800c4f6 <lwip_htonl>
 8012f6e:	4602      	mov	r2, r0
 8012f70:	69fb      	ldr	r3, [r7, #28]
 8012f72:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012f74:	69fb      	ldr	r3, [r7, #28]
 8012f76:	3304      	adds	r3, #4
 8012f78:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	da02      	bge.n	8012f8a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	2200      	movs	r2, #0
 8012f88:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012f8a:	68bb      	ldr	r3, [r7, #8]
 8012f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d10c      	bne.n	8012fac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012f92:	4b35      	ldr	r3, [pc, #212]	; (8013068 <tcp_output_segment+0x1b8>)
 8012f94:	681a      	ldr	r2, [r3, #0]
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	68db      	ldr	r3, [r3, #12]
 8012f9e:	685b      	ldr	r3, [r3, #4]
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7f9 faa8 	bl	800c4f6 <lwip_htonl>
 8012fa6:	4602      	mov	r2, r0
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	68db      	ldr	r3, [r3, #12]
 8012fb0:	461a      	mov	r2, r3
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	1ad3      	subs	r3, r2, r3
 8012fba:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	8959      	ldrh	r1, [r3, #10]
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	685b      	ldr	r3, [r3, #4]
 8012fc6:	8b3a      	ldrh	r2, [r7, #24]
 8012fc8:	1a8a      	subs	r2, r1, r2
 8012fca:	b292      	uxth	r2, r2
 8012fcc:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	8919      	ldrh	r1, [r3, #8]
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	685b      	ldr	r3, [r3, #4]
 8012fd8:	8b3a      	ldrh	r2, [r7, #24]
 8012fda:	1a8a      	subs	r2, r1, r2
 8012fdc:	b292      	uxth	r2, r2
 8012fde:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	685b      	ldr	r3, [r3, #4]
 8012fe4:	68fa      	ldr	r2, [r7, #12]
 8012fe6:	68d2      	ldr	r2, [r2, #12]
 8012fe8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	68db      	ldr	r3, [r3, #12]
 8012fee:	2200      	movs	r2, #0
 8012ff0:	741a      	strb	r2, [r3, #16]
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	68db      	ldr	r3, [r3, #12]
 8012ffa:	f103 0214 	add.w	r2, r3, #20
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	7a9b      	ldrb	r3, [r3, #10]
 8013002:	009b      	lsls	r3, r3, #2
 8013004:	f003 0304 	and.w	r3, r3, #4
 8013008:	4413      	add	r3, r2
 801300a:	69fa      	ldr	r2, [r7, #28]
 801300c:	429a      	cmp	r2, r3
 801300e:	d006      	beq.n	801301e <tcp_output_segment+0x16e>
 8013010:	4b10      	ldr	r3, [pc, #64]	; (8013054 <tcp_output_segment+0x1a4>)
 8013012:	f240 621c 	movw	r2, #1564	; 0x61c
 8013016:	4915      	ldr	r1, [pc, #84]	; (801306c <tcp_output_segment+0x1bc>)
 8013018:	4810      	ldr	r0, [pc, #64]	; (801305c <tcp_output_segment+0x1ac>)
 801301a:	f002 fa5b 	bl	80154d4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	6858      	ldr	r0, [r3, #4]
 8013022:	68b9      	ldr	r1, [r7, #8]
 8013024:	68bb      	ldr	r3, [r7, #8]
 8013026:	1d1c      	adds	r4, r3, #4
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	7add      	ldrb	r5, [r3, #11]
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	7a9b      	ldrb	r3, [r3, #10]
 8013030:	687a      	ldr	r2, [r7, #4]
 8013032:	9202      	str	r2, [sp, #8]
 8013034:	2206      	movs	r2, #6
 8013036:	9201      	str	r2, [sp, #4]
 8013038:	9300      	str	r3, [sp, #0]
 801303a:	462b      	mov	r3, r5
 801303c:	4622      	mov	r2, r4
 801303e:	f7f8 faf7 	bl	800b630 <ip4_output_if>
 8013042:	4603      	mov	r3, r0
 8013044:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013046:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801304a:	4618      	mov	r0, r3
 801304c:	3720      	adds	r7, #32
 801304e:	46bd      	mov	sp, r7
 8013050:	bdb0      	pop	{r4, r5, r7, pc}
 8013052:	bf00      	nop
 8013054:	0801b0e0 	.word	0x0801b0e0
 8013058:	0801b6e0 	.word	0x0801b6e0
 801305c:	0801b170 	.word	0x0801b170
 8013060:	0801b700 	.word	0x0801b700
 8013064:	0801b720 	.word	0x0801b720
 8013068:	2000cfc8 	.word	0x2000cfc8
 801306c:	0801b744 	.word	0x0801b744

08013070 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013070:	b5b0      	push	{r4, r5, r7, lr}
 8013072:	b084      	sub	sp, #16
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d106      	bne.n	801308c <tcp_rexmit_rto_prepare+0x1c>
 801307e:	4b31      	ldr	r3, [pc, #196]	; (8013144 <tcp_rexmit_rto_prepare+0xd4>)
 8013080:	f240 6263 	movw	r2, #1635	; 0x663
 8013084:	4930      	ldr	r1, [pc, #192]	; (8013148 <tcp_rexmit_rto_prepare+0xd8>)
 8013086:	4831      	ldr	r0, [pc, #196]	; (801314c <tcp_rexmit_rto_prepare+0xdc>)
 8013088:	f002 fa24 	bl	80154d4 <iprintf>

  if (pcb->unacked == NULL) {
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013090:	2b00      	cmp	r3, #0
 8013092:	d102      	bne.n	801309a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013094:	f06f 0305 	mvn.w	r3, #5
 8013098:	e050      	b.n	801313c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801309e:	60fb      	str	r3, [r7, #12]
 80130a0:	e00b      	b.n	80130ba <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80130a2:	68f8      	ldr	r0, [r7, #12]
 80130a4:	f7ff fee4 	bl	8012e70 <tcp_output_segment_busy>
 80130a8:	4603      	mov	r3, r0
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d002      	beq.n	80130b4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80130ae:	f06f 0305 	mvn.w	r3, #5
 80130b2:	e043      	b.n	801313c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	60fb      	str	r3, [r7, #12]
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d1ef      	bne.n	80130a2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80130c2:	68f8      	ldr	r0, [r7, #12]
 80130c4:	f7ff fed4 	bl	8012e70 <tcp_output_segment_busy>
 80130c8:	4603      	mov	r3, r0
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d002      	beq.n	80130d4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80130ce:	f06f 0305 	mvn.w	r3, #5
 80130d2:	e033      	b.n	801313c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2200      	movs	r2, #0
 80130e8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	8b5b      	ldrh	r3, [r3, #26]
 80130ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80130f2:	b29a      	uxth	r2, r3
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	68db      	ldr	r3, [r3, #12]
 80130fc:	685b      	ldr	r3, [r3, #4]
 80130fe:	4618      	mov	r0, r3
 8013100:	f7f9 f9f9 	bl	800c4f6 <lwip_htonl>
 8013104:	4604      	mov	r4, r0
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	891b      	ldrh	r3, [r3, #8]
 801310a:	461d      	mov	r5, r3
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	68db      	ldr	r3, [r3, #12]
 8013110:	899b      	ldrh	r3, [r3, #12]
 8013112:	b29b      	uxth	r3, r3
 8013114:	4618      	mov	r0, r3
 8013116:	f7f9 f9d9 	bl	800c4cc <lwip_htons>
 801311a:	4603      	mov	r3, r0
 801311c:	b2db      	uxtb	r3, r3
 801311e:	f003 0303 	and.w	r3, r3, #3
 8013122:	2b00      	cmp	r3, #0
 8013124:	d001      	beq.n	801312a <tcp_rexmit_rto_prepare+0xba>
 8013126:	2301      	movs	r3, #1
 8013128:	e000      	b.n	801312c <tcp_rexmit_rto_prepare+0xbc>
 801312a:	2300      	movs	r3, #0
 801312c:	442b      	add	r3, r5
 801312e:	18e2      	adds	r2, r4, r3
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2200      	movs	r2, #0
 8013138:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801313a:	2300      	movs	r3, #0
}
 801313c:	4618      	mov	r0, r3
 801313e:	3710      	adds	r7, #16
 8013140:	46bd      	mov	sp, r7
 8013142:	bdb0      	pop	{r4, r5, r7, pc}
 8013144:	0801b0e0 	.word	0x0801b0e0
 8013148:	0801b758 	.word	0x0801b758
 801314c:	0801b170 	.word	0x0801b170

08013150 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d106      	bne.n	801316c <tcp_rexmit_rto_commit+0x1c>
 801315e:	4b0d      	ldr	r3, [pc, #52]	; (8013194 <tcp_rexmit_rto_commit+0x44>)
 8013160:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013164:	490c      	ldr	r1, [pc, #48]	; (8013198 <tcp_rexmit_rto_commit+0x48>)
 8013166:	480d      	ldr	r0, [pc, #52]	; (801319c <tcp_rexmit_rto_commit+0x4c>)
 8013168:	f002 f9b4 	bl	80154d4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013172:	2bff      	cmp	r3, #255	; 0xff
 8013174:	d007      	beq.n	8013186 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801317c:	3301      	adds	r3, #1
 801317e:	b2da      	uxtb	r2, r3
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f7ff fc7a 	bl	8012a80 <tcp_output>
}
 801318c:	bf00      	nop
 801318e:	3708      	adds	r7, #8
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}
 8013194:	0801b0e0 	.word	0x0801b0e0
 8013198:	0801b77c 	.word	0x0801b77c
 801319c:	0801b170 	.word	0x0801b170

080131a0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b082      	sub	sp, #8
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d106      	bne.n	80131bc <tcp_rexmit_rto+0x1c>
 80131ae:	4b0a      	ldr	r3, [pc, #40]	; (80131d8 <tcp_rexmit_rto+0x38>)
 80131b0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80131b4:	4909      	ldr	r1, [pc, #36]	; (80131dc <tcp_rexmit_rto+0x3c>)
 80131b6:	480a      	ldr	r0, [pc, #40]	; (80131e0 <tcp_rexmit_rto+0x40>)
 80131b8:	f002 f98c 	bl	80154d4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f7ff ff57 	bl	8013070 <tcp_rexmit_rto_prepare>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d102      	bne.n	80131ce <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f7ff ffc1 	bl	8013150 <tcp_rexmit_rto_commit>
  }
}
 80131ce:	bf00      	nop
 80131d0:	3708      	adds	r7, #8
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}
 80131d6:	bf00      	nop
 80131d8:	0801b0e0 	.word	0x0801b0e0
 80131dc:	0801b7a0 	.word	0x0801b7a0
 80131e0:	0801b170 	.word	0x0801b170

080131e4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80131e4:	b590      	push	{r4, r7, lr}
 80131e6:	b085      	sub	sp, #20
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d106      	bne.n	8013200 <tcp_rexmit+0x1c>
 80131f2:	4b2f      	ldr	r3, [pc, #188]	; (80132b0 <tcp_rexmit+0xcc>)
 80131f4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80131f8:	492e      	ldr	r1, [pc, #184]	; (80132b4 <tcp_rexmit+0xd0>)
 80131fa:	482f      	ldr	r0, [pc, #188]	; (80132b8 <tcp_rexmit+0xd4>)
 80131fc:	f002 f96a 	bl	80154d4 <iprintf>

  if (pcb->unacked == NULL) {
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013204:	2b00      	cmp	r3, #0
 8013206:	d102      	bne.n	801320e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013208:	f06f 0305 	mvn.w	r3, #5
 801320c:	e04c      	b.n	80132a8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013212:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013214:	68b8      	ldr	r0, [r7, #8]
 8013216:	f7ff fe2b 	bl	8012e70 <tcp_output_segment_busy>
 801321a:	4603      	mov	r3, r0
 801321c:	2b00      	cmp	r3, #0
 801321e:	d002      	beq.n	8013226 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013220:	f06f 0305 	mvn.w	r3, #5
 8013224:	e040      	b.n	80132a8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	336c      	adds	r3, #108	; 0x6c
 8013232:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013234:	e002      	b.n	801323c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d011      	beq.n	8013268 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	68db      	ldr	r3, [r3, #12]
 801324a:	685b      	ldr	r3, [r3, #4]
 801324c:	4618      	mov	r0, r3
 801324e:	f7f9 f952 	bl	800c4f6 <lwip_htonl>
 8013252:	4604      	mov	r4, r0
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	68db      	ldr	r3, [r3, #12]
 8013258:	685b      	ldr	r3, [r3, #4]
 801325a:	4618      	mov	r0, r3
 801325c:	f7f9 f94b 	bl	800c4f6 <lwip_htonl>
 8013260:	4603      	mov	r3, r0
 8013262:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013264:	2b00      	cmp	r3, #0
 8013266:	dbe6      	blt.n	8013236 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	68ba      	ldr	r2, [r7, #8]
 8013274:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d103      	bne.n	8013286 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2200      	movs	r2, #0
 8013282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801328c:	2bff      	cmp	r3, #255	; 0xff
 801328e:	d007      	beq.n	80132a0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013296:	3301      	adds	r3, #1
 8013298:	b2da      	uxtb	r2, r3
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2200      	movs	r2, #0
 80132a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80132a6:	2300      	movs	r3, #0
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	3714      	adds	r7, #20
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd90      	pop	{r4, r7, pc}
 80132b0:	0801b0e0 	.word	0x0801b0e0
 80132b4:	0801b7bc 	.word	0x0801b7bc
 80132b8:	0801b170 	.word	0x0801b170

080132bc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b082      	sub	sp, #8
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d106      	bne.n	80132d8 <tcp_rexmit_fast+0x1c>
 80132ca:	4b2f      	ldr	r3, [pc, #188]	; (8013388 <tcp_rexmit_fast+0xcc>)
 80132cc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80132d0:	492e      	ldr	r1, [pc, #184]	; (801338c <tcp_rexmit_fast+0xd0>)
 80132d2:	482f      	ldr	r0, [pc, #188]	; (8013390 <tcp_rexmit_fast+0xd4>)
 80132d4:	f002 f8fe 	bl	80154d4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d04f      	beq.n	8013380 <tcp_rexmit_fast+0xc4>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	8b5b      	ldrh	r3, [r3, #26]
 80132e4:	f003 0304 	and.w	r3, r3, #4
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d149      	bne.n	8013380 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f7ff ff79 	bl	80131e4 <tcp_rexmit>
 80132f2:	4603      	mov	r3, r0
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d143      	bne.n	8013380 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013304:	429a      	cmp	r2, r3
 8013306:	d208      	bcs.n	801331a <tcp_rexmit_fast+0x5e>
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801330e:	2b00      	cmp	r3, #0
 8013310:	da00      	bge.n	8013314 <tcp_rexmit_fast+0x58>
 8013312:	3301      	adds	r3, #1
 8013314:	105b      	asrs	r3, r3, #1
 8013316:	b29b      	uxth	r3, r3
 8013318:	e007      	b.n	801332a <tcp_rexmit_fast+0x6e>
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013320:	2b00      	cmp	r3, #0
 8013322:	da00      	bge.n	8013326 <tcp_rexmit_fast+0x6a>
 8013324:	3301      	adds	r3, #1
 8013326:	105b      	asrs	r3, r3, #1
 8013328:	b29b      	uxth	r3, r3
 801332a:	687a      	ldr	r2, [r7, #4]
 801332c:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013336:	461a      	mov	r2, r3
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801333c:	005b      	lsls	r3, r3, #1
 801333e:	429a      	cmp	r2, r3
 8013340:	d206      	bcs.n	8013350 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013346:	005b      	lsls	r3, r3, #1
 8013348:	b29a      	uxth	r2, r3
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801335a:	4619      	mov	r1, r3
 801335c:	0049      	lsls	r1, r1, #1
 801335e:	440b      	add	r3, r1
 8013360:	b29b      	uxth	r3, r3
 8013362:	4413      	add	r3, r2
 8013364:	b29a      	uxth	r2, r3
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	8b5b      	ldrh	r3, [r3, #26]
 8013370:	f043 0304 	orr.w	r3, r3, #4
 8013374:	b29a      	uxth	r2, r3
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	2200      	movs	r2, #0
 801337e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013380:	bf00      	nop
 8013382:	3708      	adds	r7, #8
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}
 8013388:	0801b0e0 	.word	0x0801b0e0
 801338c:	0801b7d4 	.word	0x0801b7d4
 8013390:	0801b170 	.word	0x0801b170

08013394 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b086      	sub	sp, #24
 8013398:	af00      	add	r7, sp, #0
 801339a:	60f8      	str	r0, [r7, #12]
 801339c:	607b      	str	r3, [r7, #4]
 801339e:	460b      	mov	r3, r1
 80133a0:	817b      	strh	r3, [r7, #10]
 80133a2:	4613      	mov	r3, r2
 80133a4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80133a6:	897a      	ldrh	r2, [r7, #10]
 80133a8:	893b      	ldrh	r3, [r7, #8]
 80133aa:	4413      	add	r3, r2
 80133ac:	b29b      	uxth	r3, r3
 80133ae:	3314      	adds	r3, #20
 80133b0:	b29b      	uxth	r3, r3
 80133b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80133b6:	4619      	mov	r1, r3
 80133b8:	2022      	movs	r0, #34	; 0x22
 80133ba:	f7fa f931 	bl	800d620 <pbuf_alloc>
 80133be:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d04e      	beq.n	8013464 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	895b      	ldrh	r3, [r3, #10]
 80133ca:	461a      	mov	r2, r3
 80133cc:	897b      	ldrh	r3, [r7, #10]
 80133ce:	3314      	adds	r3, #20
 80133d0:	429a      	cmp	r2, r3
 80133d2:	da06      	bge.n	80133e2 <tcp_output_alloc_header_common+0x4e>
 80133d4:	4b26      	ldr	r3, [pc, #152]	; (8013470 <tcp_output_alloc_header_common+0xdc>)
 80133d6:	f240 7224 	movw	r2, #1828	; 0x724
 80133da:	4926      	ldr	r1, [pc, #152]	; (8013474 <tcp_output_alloc_header_common+0xe0>)
 80133dc:	4826      	ldr	r0, [pc, #152]	; (8013478 <tcp_output_alloc_header_common+0xe4>)
 80133de:	f002 f879 	bl	80154d4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	685b      	ldr	r3, [r3, #4]
 80133e6:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80133e8:	8c3b      	ldrh	r3, [r7, #32]
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7f9 f86e 	bl	800c4cc <lwip_htons>
 80133f0:	4603      	mov	r3, r0
 80133f2:	461a      	mov	r2, r3
 80133f4:	693b      	ldr	r3, [r7, #16]
 80133f6:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80133f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7f9 f866 	bl	800c4cc <lwip_htons>
 8013400:	4603      	mov	r3, r0
 8013402:	461a      	mov	r2, r3
 8013404:	693b      	ldr	r3, [r7, #16]
 8013406:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013408:	693b      	ldr	r3, [r7, #16]
 801340a:	687a      	ldr	r2, [r7, #4]
 801340c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801340e:	68f8      	ldr	r0, [r7, #12]
 8013410:	f7f9 f871 	bl	800c4f6 <lwip_htonl>
 8013414:	4602      	mov	r2, r0
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801341a:	897b      	ldrh	r3, [r7, #10]
 801341c:	089b      	lsrs	r3, r3, #2
 801341e:	b29b      	uxth	r3, r3
 8013420:	3305      	adds	r3, #5
 8013422:	b29b      	uxth	r3, r3
 8013424:	031b      	lsls	r3, r3, #12
 8013426:	b29a      	uxth	r2, r3
 8013428:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801342c:	b29b      	uxth	r3, r3
 801342e:	4313      	orrs	r3, r2
 8013430:	b29b      	uxth	r3, r3
 8013432:	4618      	mov	r0, r3
 8013434:	f7f9 f84a 	bl	800c4cc <lwip_htons>
 8013438:	4603      	mov	r3, r0
 801343a:	461a      	mov	r2, r3
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013440:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013442:	4618      	mov	r0, r3
 8013444:	f7f9 f842 	bl	800c4cc <lwip_htons>
 8013448:	4603      	mov	r3, r0
 801344a:	461a      	mov	r2, r3
 801344c:	693b      	ldr	r3, [r7, #16]
 801344e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	2200      	movs	r2, #0
 8013454:	741a      	strb	r2, [r3, #16]
 8013456:	2200      	movs	r2, #0
 8013458:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801345a:	693b      	ldr	r3, [r7, #16]
 801345c:	2200      	movs	r2, #0
 801345e:	749a      	strb	r2, [r3, #18]
 8013460:	2200      	movs	r2, #0
 8013462:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013464:	697b      	ldr	r3, [r7, #20]
}
 8013466:	4618      	mov	r0, r3
 8013468:	3718      	adds	r7, #24
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}
 801346e:	bf00      	nop
 8013470:	0801b0e0 	.word	0x0801b0e0
 8013474:	0801b7f4 	.word	0x0801b7f4
 8013478:	0801b170 	.word	0x0801b170

0801347c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801347c:	b5b0      	push	{r4, r5, r7, lr}
 801347e:	b08a      	sub	sp, #40	; 0x28
 8013480:	af04      	add	r7, sp, #16
 8013482:	60f8      	str	r0, [r7, #12]
 8013484:	607b      	str	r3, [r7, #4]
 8013486:	460b      	mov	r3, r1
 8013488:	817b      	strh	r3, [r7, #10]
 801348a:	4613      	mov	r3, r2
 801348c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d106      	bne.n	80134a2 <tcp_output_alloc_header+0x26>
 8013494:	4b15      	ldr	r3, [pc, #84]	; (80134ec <tcp_output_alloc_header+0x70>)
 8013496:	f240 7242 	movw	r2, #1858	; 0x742
 801349a:	4915      	ldr	r1, [pc, #84]	; (80134f0 <tcp_output_alloc_header+0x74>)
 801349c:	4815      	ldr	r0, [pc, #84]	; (80134f4 <tcp_output_alloc_header+0x78>)
 801349e:	f002 f819 	bl	80154d4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	8adb      	ldrh	r3, [r3, #22]
 80134aa:	68fa      	ldr	r2, [r7, #12]
 80134ac:	8b12      	ldrh	r2, [r2, #24]
 80134ae:	68f9      	ldr	r1, [r7, #12]
 80134b0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80134b2:	893d      	ldrh	r5, [r7, #8]
 80134b4:	897c      	ldrh	r4, [r7, #10]
 80134b6:	9103      	str	r1, [sp, #12]
 80134b8:	2110      	movs	r1, #16
 80134ba:	9102      	str	r1, [sp, #8]
 80134bc:	9201      	str	r2, [sp, #4]
 80134be:	9300      	str	r3, [sp, #0]
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	462a      	mov	r2, r5
 80134c4:	4621      	mov	r1, r4
 80134c6:	f7ff ff65 	bl	8013394 <tcp_output_alloc_header_common>
 80134ca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d006      	beq.n	80134e0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134d6:	68fa      	ldr	r2, [r7, #12]
 80134d8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80134da:	441a      	add	r2, r3
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80134e0:	697b      	ldr	r3, [r7, #20]
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3718      	adds	r7, #24
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bdb0      	pop	{r4, r5, r7, pc}
 80134ea:	bf00      	nop
 80134ec:	0801b0e0 	.word	0x0801b0e0
 80134f0:	0801b824 	.word	0x0801b824
 80134f4:	0801b170 	.word	0x0801b170

080134f8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b088      	sub	sp, #32
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	60f8      	str	r0, [r7, #12]
 8013500:	60b9      	str	r1, [r7, #8]
 8013502:	4611      	mov	r1, r2
 8013504:	461a      	mov	r2, r3
 8013506:	460b      	mov	r3, r1
 8013508:	71fb      	strb	r3, [r7, #7]
 801350a:	4613      	mov	r3, r2
 801350c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801350e:	2300      	movs	r3, #0
 8013510:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d106      	bne.n	8013526 <tcp_output_fill_options+0x2e>
 8013518:	4b13      	ldr	r3, [pc, #76]	; (8013568 <tcp_output_fill_options+0x70>)
 801351a:	f240 7256 	movw	r2, #1878	; 0x756
 801351e:	4913      	ldr	r1, [pc, #76]	; (801356c <tcp_output_fill_options+0x74>)
 8013520:	4813      	ldr	r0, [pc, #76]	; (8013570 <tcp_output_fill_options+0x78>)
 8013522:	f001 ffd7 	bl	80154d4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	685b      	ldr	r3, [r3, #4]
 801352a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801352c:	69bb      	ldr	r3, [r7, #24]
 801352e:	3314      	adds	r3, #20
 8013530:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013532:	69bb      	ldr	r3, [r7, #24]
 8013534:	f103 0214 	add.w	r2, r3, #20
 8013538:	8bfb      	ldrh	r3, [r7, #30]
 801353a:	009b      	lsls	r3, r3, #2
 801353c:	4619      	mov	r1, r3
 801353e:	79fb      	ldrb	r3, [r7, #7]
 8013540:	009b      	lsls	r3, r3, #2
 8013542:	f003 0304 	and.w	r3, r3, #4
 8013546:	440b      	add	r3, r1
 8013548:	4413      	add	r3, r2
 801354a:	697a      	ldr	r2, [r7, #20]
 801354c:	429a      	cmp	r2, r3
 801354e:	d006      	beq.n	801355e <tcp_output_fill_options+0x66>
 8013550:	4b05      	ldr	r3, [pc, #20]	; (8013568 <tcp_output_fill_options+0x70>)
 8013552:	f240 7275 	movw	r2, #1909	; 0x775
 8013556:	4907      	ldr	r1, [pc, #28]	; (8013574 <tcp_output_fill_options+0x7c>)
 8013558:	4805      	ldr	r0, [pc, #20]	; (8013570 <tcp_output_fill_options+0x78>)
 801355a:	f001 ffbb 	bl	80154d4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801355e:	bf00      	nop
 8013560:	3720      	adds	r7, #32
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}
 8013566:	bf00      	nop
 8013568:	0801b0e0 	.word	0x0801b0e0
 801356c:	0801b84c 	.word	0x0801b84c
 8013570:	0801b170 	.word	0x0801b170
 8013574:	0801b744 	.word	0x0801b744

08013578 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b08a      	sub	sp, #40	; 0x28
 801357c:	af04      	add	r7, sp, #16
 801357e:	60f8      	str	r0, [r7, #12]
 8013580:	60b9      	str	r1, [r7, #8]
 8013582:	607a      	str	r2, [r7, #4]
 8013584:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d106      	bne.n	801359a <tcp_output_control_segment+0x22>
 801358c:	4b1c      	ldr	r3, [pc, #112]	; (8013600 <tcp_output_control_segment+0x88>)
 801358e:	f240 7287 	movw	r2, #1927	; 0x787
 8013592:	491c      	ldr	r1, [pc, #112]	; (8013604 <tcp_output_control_segment+0x8c>)
 8013594:	481c      	ldr	r0, [pc, #112]	; (8013608 <tcp_output_control_segment+0x90>)
 8013596:	f001 ff9d 	bl	80154d4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801359a:	683a      	ldr	r2, [r7, #0]
 801359c:	6879      	ldr	r1, [r7, #4]
 801359e:	68f8      	ldr	r0, [r7, #12]
 80135a0:	f7fe fad4 	bl	8011b4c <tcp_route>
 80135a4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d102      	bne.n	80135b2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80135ac:	23fc      	movs	r3, #252	; 0xfc
 80135ae:	75fb      	strb	r3, [r7, #23]
 80135b0:	e01c      	b.n	80135ec <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d006      	beq.n	80135c6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	7adb      	ldrb	r3, [r3, #11]
 80135bc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	7a9b      	ldrb	r3, [r3, #10]
 80135c2:	757b      	strb	r3, [r7, #21]
 80135c4:	e003      	b.n	80135ce <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80135c6:	23ff      	movs	r3, #255	; 0xff
 80135c8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80135ca:	2300      	movs	r3, #0
 80135cc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80135ce:	7dba      	ldrb	r2, [r7, #22]
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	9302      	str	r3, [sp, #8]
 80135d4:	2306      	movs	r3, #6
 80135d6:	9301      	str	r3, [sp, #4]
 80135d8:	7d7b      	ldrb	r3, [r7, #21]
 80135da:	9300      	str	r3, [sp, #0]
 80135dc:	4613      	mov	r3, r2
 80135de:	683a      	ldr	r2, [r7, #0]
 80135e0:	6879      	ldr	r1, [r7, #4]
 80135e2:	68b8      	ldr	r0, [r7, #8]
 80135e4:	f7f8 f824 	bl	800b630 <ip4_output_if>
 80135e8:	4603      	mov	r3, r0
 80135ea:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80135ec:	68b8      	ldr	r0, [r7, #8]
 80135ee:	f7fa faf7 	bl	800dbe0 <pbuf_free>
  return err;
 80135f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3718      	adds	r7, #24
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	0801b0e0 	.word	0x0801b0e0
 8013604:	0801b874 	.word	0x0801b874
 8013608:	0801b170 	.word	0x0801b170

0801360c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801360c:	b590      	push	{r4, r7, lr}
 801360e:	b08b      	sub	sp, #44	; 0x2c
 8013610:	af04      	add	r7, sp, #16
 8013612:	60f8      	str	r0, [r7, #12]
 8013614:	60b9      	str	r1, [r7, #8]
 8013616:	607a      	str	r2, [r7, #4]
 8013618:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d106      	bne.n	801362e <tcp_rst+0x22>
 8013620:	4b1f      	ldr	r3, [pc, #124]	; (80136a0 <tcp_rst+0x94>)
 8013622:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013626:	491f      	ldr	r1, [pc, #124]	; (80136a4 <tcp_rst+0x98>)
 8013628:	481f      	ldr	r0, [pc, #124]	; (80136a8 <tcp_rst+0x9c>)
 801362a:	f001 ff53 	bl	80154d4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013630:	2b00      	cmp	r3, #0
 8013632:	d106      	bne.n	8013642 <tcp_rst+0x36>
 8013634:	4b1a      	ldr	r3, [pc, #104]	; (80136a0 <tcp_rst+0x94>)
 8013636:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801363a:	491c      	ldr	r1, [pc, #112]	; (80136ac <tcp_rst+0xa0>)
 801363c:	481a      	ldr	r0, [pc, #104]	; (80136a8 <tcp_rst+0x9c>)
 801363e:	f001 ff49 	bl	80154d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013642:	2300      	movs	r3, #0
 8013644:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013646:	f646 030b 	movw	r3, #26635	; 0x680b
 801364a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801364c:	7dfb      	ldrb	r3, [r7, #23]
 801364e:	b29c      	uxth	r4, r3
 8013650:	68b8      	ldr	r0, [r7, #8]
 8013652:	f7f8 ff50 	bl	800c4f6 <lwip_htonl>
 8013656:	4602      	mov	r2, r0
 8013658:	8abb      	ldrh	r3, [r7, #20]
 801365a:	9303      	str	r3, [sp, #12]
 801365c:	2314      	movs	r3, #20
 801365e:	9302      	str	r3, [sp, #8]
 8013660:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013662:	9301      	str	r3, [sp, #4]
 8013664:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013666:	9300      	str	r3, [sp, #0]
 8013668:	4613      	mov	r3, r2
 801366a:	2200      	movs	r2, #0
 801366c:	4621      	mov	r1, r4
 801366e:	6878      	ldr	r0, [r7, #4]
 8013670:	f7ff fe90 	bl	8013394 <tcp_output_alloc_header_common>
 8013674:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013676:	693b      	ldr	r3, [r7, #16]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d00c      	beq.n	8013696 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801367c:	7dfb      	ldrb	r3, [r7, #23]
 801367e:	2200      	movs	r2, #0
 8013680:	6939      	ldr	r1, [r7, #16]
 8013682:	68f8      	ldr	r0, [r7, #12]
 8013684:	f7ff ff38 	bl	80134f8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801368a:	683a      	ldr	r2, [r7, #0]
 801368c:	6939      	ldr	r1, [r7, #16]
 801368e:	68f8      	ldr	r0, [r7, #12]
 8013690:	f7ff ff72 	bl	8013578 <tcp_output_control_segment>
 8013694:	e000      	b.n	8013698 <tcp_rst+0x8c>
    return;
 8013696:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013698:	371c      	adds	r7, #28
 801369a:	46bd      	mov	sp, r7
 801369c:	bd90      	pop	{r4, r7, pc}
 801369e:	bf00      	nop
 80136a0:	0801b0e0 	.word	0x0801b0e0
 80136a4:	0801b8a0 	.word	0x0801b8a0
 80136a8:	0801b170 	.word	0x0801b170
 80136ac:	0801b8bc 	.word	0x0801b8bc

080136b0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80136b0:	b590      	push	{r4, r7, lr}
 80136b2:	b087      	sub	sp, #28
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80136b8:	2300      	movs	r3, #0
 80136ba:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80136bc:	2300      	movs	r3, #0
 80136be:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d106      	bne.n	80136d4 <tcp_send_empty_ack+0x24>
 80136c6:	4b28      	ldr	r3, [pc, #160]	; (8013768 <tcp_send_empty_ack+0xb8>)
 80136c8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80136cc:	4927      	ldr	r1, [pc, #156]	; (801376c <tcp_send_empty_ack+0xbc>)
 80136ce:	4828      	ldr	r0, [pc, #160]	; (8013770 <tcp_send_empty_ack+0xc0>)
 80136d0:	f001 ff00 	bl	80154d4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80136d4:	7dfb      	ldrb	r3, [r7, #23]
 80136d6:	009b      	lsls	r3, r3, #2
 80136d8:	b2db      	uxtb	r3, r3
 80136da:	f003 0304 	and.w	r3, r3, #4
 80136de:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80136e0:	7d7b      	ldrb	r3, [r7, #21]
 80136e2:	b29c      	uxth	r4, r3
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136e8:	4618      	mov	r0, r3
 80136ea:	f7f8 ff04 	bl	800c4f6 <lwip_htonl>
 80136ee:	4603      	mov	r3, r0
 80136f0:	2200      	movs	r2, #0
 80136f2:	4621      	mov	r1, r4
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f7ff fec1 	bl	801347c <tcp_output_alloc_header>
 80136fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d109      	bne.n	8013716 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	8b5b      	ldrh	r3, [r3, #26]
 8013706:	f043 0303 	orr.w	r3, r3, #3
 801370a:	b29a      	uxth	r2, r3
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013710:	f06f 0301 	mvn.w	r3, #1
 8013714:	e023      	b.n	801375e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013716:	7dbb      	ldrb	r3, [r7, #22]
 8013718:	7dfa      	ldrb	r2, [r7, #23]
 801371a:	6939      	ldr	r1, [r7, #16]
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f7ff feeb 	bl	80134f8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013722:	687a      	ldr	r2, [r7, #4]
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	3304      	adds	r3, #4
 8013728:	6939      	ldr	r1, [r7, #16]
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f7ff ff24 	bl	8013578 <tcp_output_control_segment>
 8013730:	4603      	mov	r3, r0
 8013732:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d007      	beq.n	801374c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	8b5b      	ldrh	r3, [r3, #26]
 8013740:	f043 0303 	orr.w	r3, r3, #3
 8013744:	b29a      	uxth	r2, r3
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	835a      	strh	r2, [r3, #26]
 801374a:	e006      	b.n	801375a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	8b5b      	ldrh	r3, [r3, #26]
 8013750:	f023 0303 	bic.w	r3, r3, #3
 8013754:	b29a      	uxth	r2, r3
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801375a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801375e:	4618      	mov	r0, r3
 8013760:	371c      	adds	r7, #28
 8013762:	46bd      	mov	sp, r7
 8013764:	bd90      	pop	{r4, r7, pc}
 8013766:	bf00      	nop
 8013768:	0801b0e0 	.word	0x0801b0e0
 801376c:	0801b8d8 	.word	0x0801b8d8
 8013770:	0801b170 	.word	0x0801b170

08013774 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013774:	b590      	push	{r4, r7, lr}
 8013776:	b087      	sub	sp, #28
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801377c:	2300      	movs	r3, #0
 801377e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d106      	bne.n	8013794 <tcp_keepalive+0x20>
 8013786:	4b18      	ldr	r3, [pc, #96]	; (80137e8 <tcp_keepalive+0x74>)
 8013788:	f640 0224 	movw	r2, #2084	; 0x824
 801378c:	4917      	ldr	r1, [pc, #92]	; (80137ec <tcp_keepalive+0x78>)
 801378e:	4818      	ldr	r0, [pc, #96]	; (80137f0 <tcp_keepalive+0x7c>)
 8013790:	f001 fea0 	bl	80154d4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013794:	7dfb      	ldrb	r3, [r7, #23]
 8013796:	b29c      	uxth	r4, r3
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801379c:	3b01      	subs	r3, #1
 801379e:	4618      	mov	r0, r3
 80137a0:	f7f8 fea9 	bl	800c4f6 <lwip_htonl>
 80137a4:	4603      	mov	r3, r0
 80137a6:	2200      	movs	r2, #0
 80137a8:	4621      	mov	r1, r4
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f7ff fe66 	bl	801347c <tcp_output_alloc_header>
 80137b0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80137b2:	693b      	ldr	r3, [r7, #16]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d102      	bne.n	80137be <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80137b8:	f04f 33ff 	mov.w	r3, #4294967295
 80137bc:	e010      	b.n	80137e0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80137be:	7dfb      	ldrb	r3, [r7, #23]
 80137c0:	2200      	movs	r2, #0
 80137c2:	6939      	ldr	r1, [r7, #16]
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	f7ff fe97 	bl	80134f8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80137ca:	687a      	ldr	r2, [r7, #4]
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	3304      	adds	r3, #4
 80137d0:	6939      	ldr	r1, [r7, #16]
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f7ff fed0 	bl	8013578 <tcp_output_control_segment>
 80137d8:	4603      	mov	r3, r0
 80137da:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80137dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	371c      	adds	r7, #28
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd90      	pop	{r4, r7, pc}
 80137e8:	0801b0e0 	.word	0x0801b0e0
 80137ec:	0801b8f8 	.word	0x0801b8f8
 80137f0:	0801b170 	.word	0x0801b170

080137f4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80137f4:	b590      	push	{r4, r7, lr}
 80137f6:	b08b      	sub	sp, #44	; 0x2c
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80137fc:	2300      	movs	r3, #0
 80137fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d106      	bne.n	8013816 <tcp_zero_window_probe+0x22>
 8013808:	4b4c      	ldr	r3, [pc, #304]	; (801393c <tcp_zero_window_probe+0x148>)
 801380a:	f640 024f 	movw	r2, #2127	; 0x84f
 801380e:	494c      	ldr	r1, [pc, #304]	; (8013940 <tcp_zero_window_probe+0x14c>)
 8013810:	484c      	ldr	r0, [pc, #304]	; (8013944 <tcp_zero_window_probe+0x150>)
 8013812:	f001 fe5f 	bl	80154d4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801381a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801381c:	6a3b      	ldr	r3, [r7, #32]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d101      	bne.n	8013826 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013822:	2300      	movs	r3, #0
 8013824:	e086      	b.n	8013934 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 801382c:	2bff      	cmp	r3, #255	; 0xff
 801382e:	d007      	beq.n	8013840 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8013836:	3301      	adds	r3, #1
 8013838:	b2da      	uxtb	r2, r3
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013840:	6a3b      	ldr	r3, [r7, #32]
 8013842:	68db      	ldr	r3, [r3, #12]
 8013844:	899b      	ldrh	r3, [r3, #12]
 8013846:	b29b      	uxth	r3, r3
 8013848:	4618      	mov	r0, r3
 801384a:	f7f8 fe3f 	bl	800c4cc <lwip_htons>
 801384e:	4603      	mov	r3, r0
 8013850:	b2db      	uxtb	r3, r3
 8013852:	f003 0301 	and.w	r3, r3, #1
 8013856:	2b00      	cmp	r3, #0
 8013858:	d005      	beq.n	8013866 <tcp_zero_window_probe+0x72>
 801385a:	6a3b      	ldr	r3, [r7, #32]
 801385c:	891b      	ldrh	r3, [r3, #8]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d101      	bne.n	8013866 <tcp_zero_window_probe+0x72>
 8013862:	2301      	movs	r3, #1
 8013864:	e000      	b.n	8013868 <tcp_zero_window_probe+0x74>
 8013866:	2300      	movs	r3, #0
 8013868:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801386a:	7ffb      	ldrb	r3, [r7, #31]
 801386c:	2b00      	cmp	r3, #0
 801386e:	bf0c      	ite	eq
 8013870:	2301      	moveq	r3, #1
 8013872:	2300      	movne	r3, #0
 8013874:	b2db      	uxtb	r3, r3
 8013876:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801387c:	b299      	uxth	r1, r3
 801387e:	6a3b      	ldr	r3, [r7, #32]
 8013880:	68db      	ldr	r3, [r3, #12]
 8013882:	685b      	ldr	r3, [r3, #4]
 8013884:	8bba      	ldrh	r2, [r7, #28]
 8013886:	6878      	ldr	r0, [r7, #4]
 8013888:	f7ff fdf8 	bl	801347c <tcp_output_alloc_header>
 801388c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801388e:	69bb      	ldr	r3, [r7, #24]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d102      	bne.n	801389a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013894:	f04f 33ff 	mov.w	r3, #4294967295
 8013898:	e04c      	b.n	8013934 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	685b      	ldr	r3, [r3, #4]
 801389e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80138a0:	7ffb      	ldrb	r3, [r7, #31]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d011      	beq.n	80138ca <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	899b      	ldrh	r3, [r3, #12]
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	b21b      	sxth	r3, r3
 80138ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80138b2:	b21c      	sxth	r4, r3
 80138b4:	2011      	movs	r0, #17
 80138b6:	f7f8 fe09 	bl	800c4cc <lwip_htons>
 80138ba:	4603      	mov	r3, r0
 80138bc:	b21b      	sxth	r3, r3
 80138be:	4323      	orrs	r3, r4
 80138c0:	b21b      	sxth	r3, r3
 80138c2:	b29a      	uxth	r2, r3
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	819a      	strh	r2, [r3, #12]
 80138c8:	e010      	b.n	80138ec <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80138ca:	69bb      	ldr	r3, [r7, #24]
 80138cc:	685b      	ldr	r3, [r3, #4]
 80138ce:	3314      	adds	r3, #20
 80138d0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80138d2:	6a3b      	ldr	r3, [r7, #32]
 80138d4:	6858      	ldr	r0, [r3, #4]
 80138d6:	6a3b      	ldr	r3, [r7, #32]
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	891a      	ldrh	r2, [r3, #8]
 80138dc:	6a3b      	ldr	r3, [r7, #32]
 80138de:	891b      	ldrh	r3, [r3, #8]
 80138e0:	1ad3      	subs	r3, r2, r3
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	2201      	movs	r2, #1
 80138e6:	6939      	ldr	r1, [r7, #16]
 80138e8:	f7fa fb80 	bl	800dfec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80138ec:	6a3b      	ldr	r3, [r7, #32]
 80138ee:	68db      	ldr	r3, [r3, #12]
 80138f0:	685b      	ldr	r3, [r3, #4]
 80138f2:	4618      	mov	r0, r3
 80138f4:	f7f8 fdff 	bl	800c4f6 <lwip_htonl>
 80138f8:	4603      	mov	r3, r0
 80138fa:	3301      	adds	r3, #1
 80138fc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	1ad3      	subs	r3, r2, r3
 8013906:	2b00      	cmp	r3, #0
 8013908:	da02      	bge.n	8013910 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	68fa      	ldr	r2, [r7, #12]
 801390e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013914:	2200      	movs	r2, #0
 8013916:	69b9      	ldr	r1, [r7, #24]
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f7ff fded 	bl	80134f8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801391e:	687a      	ldr	r2, [r7, #4]
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	3304      	adds	r3, #4
 8013924:	69b9      	ldr	r1, [r7, #24]
 8013926:	6878      	ldr	r0, [r7, #4]
 8013928:	f7ff fe26 	bl	8013578 <tcp_output_control_segment>
 801392c:	4603      	mov	r3, r0
 801392e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013930:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013934:	4618      	mov	r0, r3
 8013936:	372c      	adds	r7, #44	; 0x2c
 8013938:	46bd      	mov	sp, r7
 801393a:	bd90      	pop	{r4, r7, pc}
 801393c:	0801b0e0 	.word	0x0801b0e0
 8013940:	0801b914 	.word	0x0801b914
 8013944:	0801b170 	.word	0x0801b170

08013948 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013950:	f7fa fc3a 	bl	800e1c8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013954:	4b0a      	ldr	r3, [pc, #40]	; (8013980 <tcpip_tcp_timer+0x38>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d103      	bne.n	8013964 <tcpip_tcp_timer+0x1c>
 801395c:	4b09      	ldr	r3, [pc, #36]	; (8013984 <tcpip_tcp_timer+0x3c>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d005      	beq.n	8013970 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013964:	2200      	movs	r2, #0
 8013966:	4908      	ldr	r1, [pc, #32]	; (8013988 <tcpip_tcp_timer+0x40>)
 8013968:	20fa      	movs	r0, #250	; 0xfa
 801396a:	f000 f8f1 	bl	8013b50 <sys_timeout>
 801396e:	e002      	b.n	8013976 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013970:	4b06      	ldr	r3, [pc, #24]	; (801398c <tcpip_tcp_timer+0x44>)
 8013972:	2200      	movs	r2, #0
 8013974:	601a      	str	r2, [r3, #0]
  }
}
 8013976:	bf00      	nop
 8013978:	3708      	adds	r7, #8
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}
 801397e:	bf00      	nop
 8013980:	2000cfc4 	.word	0x2000cfc4
 8013984:	2000cfd4 	.word	0x2000cfd4
 8013988:	08013949 	.word	0x08013949
 801398c:	20006908 	.word	0x20006908

08013990 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013994:	4b0a      	ldr	r3, [pc, #40]	; (80139c0 <tcp_timer_needed+0x30>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d10f      	bne.n	80139bc <tcp_timer_needed+0x2c>
 801399c:	4b09      	ldr	r3, [pc, #36]	; (80139c4 <tcp_timer_needed+0x34>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d103      	bne.n	80139ac <tcp_timer_needed+0x1c>
 80139a4:	4b08      	ldr	r3, [pc, #32]	; (80139c8 <tcp_timer_needed+0x38>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d007      	beq.n	80139bc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80139ac:	4b04      	ldr	r3, [pc, #16]	; (80139c0 <tcp_timer_needed+0x30>)
 80139ae:	2201      	movs	r2, #1
 80139b0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80139b2:	2200      	movs	r2, #0
 80139b4:	4905      	ldr	r1, [pc, #20]	; (80139cc <tcp_timer_needed+0x3c>)
 80139b6:	20fa      	movs	r0, #250	; 0xfa
 80139b8:	f000 f8ca 	bl	8013b50 <sys_timeout>
  }
}
 80139bc:	bf00      	nop
 80139be:	bd80      	pop	{r7, pc}
 80139c0:	20006908 	.word	0x20006908
 80139c4:	2000cfc4 	.word	0x2000cfc4
 80139c8:	2000cfd4 	.word	0x2000cfd4
 80139cc:	08013949 	.word	0x08013949

080139d0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b086      	sub	sp, #24
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80139dc:	200a      	movs	r0, #10
 80139de:	f7f9 fad5 	bl	800cf8c <memp_malloc>
 80139e2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d109      	bne.n	80139fe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80139ea:	693b      	ldr	r3, [r7, #16]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d151      	bne.n	8013a94 <sys_timeout_abs+0xc4>
 80139f0:	4b2a      	ldr	r3, [pc, #168]	; (8013a9c <sys_timeout_abs+0xcc>)
 80139f2:	22be      	movs	r2, #190	; 0xbe
 80139f4:	492a      	ldr	r1, [pc, #168]	; (8013aa0 <sys_timeout_abs+0xd0>)
 80139f6:	482b      	ldr	r0, [pc, #172]	; (8013aa4 <sys_timeout_abs+0xd4>)
 80139f8:	f001 fd6c 	bl	80154d4 <iprintf>
    return;
 80139fc:	e04a      	b.n	8013a94 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80139fe:	693b      	ldr	r3, [r7, #16]
 8013a00:	2200      	movs	r2, #0
 8013a02:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	68ba      	ldr	r2, [r7, #8]
 8013a08:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013a0a:	693b      	ldr	r3, [r7, #16]
 8013a0c:	687a      	ldr	r2, [r7, #4]
 8013a0e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013a10:	693b      	ldr	r3, [r7, #16]
 8013a12:	68fa      	ldr	r2, [r7, #12]
 8013a14:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013a16:	4b24      	ldr	r3, [pc, #144]	; (8013aa8 <sys_timeout_abs+0xd8>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d103      	bne.n	8013a26 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013a1e:	4a22      	ldr	r2, [pc, #136]	; (8013aa8 <sys_timeout_abs+0xd8>)
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	6013      	str	r3, [r2, #0]
    return;
 8013a24:	e037      	b.n	8013a96 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013a26:	693b      	ldr	r3, [r7, #16]
 8013a28:	685a      	ldr	r2, [r3, #4]
 8013a2a:	4b1f      	ldr	r3, [pc, #124]	; (8013aa8 <sys_timeout_abs+0xd8>)
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	685b      	ldr	r3, [r3, #4]
 8013a30:	1ad3      	subs	r3, r2, r3
 8013a32:	0fdb      	lsrs	r3, r3, #31
 8013a34:	f003 0301 	and.w	r3, r3, #1
 8013a38:	b2db      	uxtb	r3, r3
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d007      	beq.n	8013a4e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013a3e:	4b1a      	ldr	r3, [pc, #104]	; (8013aa8 <sys_timeout_abs+0xd8>)
 8013a40:	681a      	ldr	r2, [r3, #0]
 8013a42:	693b      	ldr	r3, [r7, #16]
 8013a44:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013a46:	4a18      	ldr	r2, [pc, #96]	; (8013aa8 <sys_timeout_abs+0xd8>)
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	6013      	str	r3, [r2, #0]
 8013a4c:	e023      	b.n	8013a96 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a4e:	4b16      	ldr	r3, [pc, #88]	; (8013aa8 <sys_timeout_abs+0xd8>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	617b      	str	r3, [r7, #20]
 8013a54:	e01a      	b.n	8013a8c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d00b      	beq.n	8013a76 <sys_timeout_abs+0xa6>
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	685a      	ldr	r2, [r3, #4]
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	685b      	ldr	r3, [r3, #4]
 8013a68:	1ad3      	subs	r3, r2, r3
 8013a6a:	0fdb      	lsrs	r3, r3, #31
 8013a6c:	f003 0301 	and.w	r3, r3, #1
 8013a70:	b2db      	uxtb	r3, r3
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d007      	beq.n	8013a86 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	681a      	ldr	r2, [r3, #0]
 8013a7a:	693b      	ldr	r3, [r7, #16]
 8013a7c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013a7e:	697b      	ldr	r3, [r7, #20]
 8013a80:	693a      	ldr	r2, [r7, #16]
 8013a82:	601a      	str	r2, [r3, #0]
        break;
 8013a84:	e007      	b.n	8013a96 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a86:	697b      	ldr	r3, [r7, #20]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	617b      	str	r3, [r7, #20]
 8013a8c:	697b      	ldr	r3, [r7, #20]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d1e1      	bne.n	8013a56 <sys_timeout_abs+0x86>
 8013a92:	e000      	b.n	8013a96 <sys_timeout_abs+0xc6>
    return;
 8013a94:	bf00      	nop
      }
    }
  }
}
 8013a96:	3718      	adds	r7, #24
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}
 8013a9c:	0801b964 	.word	0x0801b964
 8013aa0:	0801b9d4 	.word	0x0801b9d4
 8013aa4:	0801ba14 	.word	0x0801ba14
 8013aa8:	20006900 	.word	0x20006900

08013aac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b086      	sub	sp, #24
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	685b      	ldr	r3, [r3, #4]
 8013abc:	4798      	blx	r3

  now = sys_now();
 8013abe:	f7ed fed9 	bl	8001874 <sys_now>
 8013ac2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	681a      	ldr	r2, [r3, #0]
 8013ac8:	4b0f      	ldr	r3, [pc, #60]	; (8013b08 <lwip_cyclic_timer+0x5c>)
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	4413      	add	r3, r2
 8013ace:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013ad0:	68fa      	ldr	r2, [r7, #12]
 8013ad2:	693b      	ldr	r3, [r7, #16]
 8013ad4:	1ad3      	subs	r3, r2, r3
 8013ad6:	0fdb      	lsrs	r3, r3, #31
 8013ad8:	f003 0301 	and.w	r3, r3, #1
 8013adc:	b2db      	uxtb	r3, r3
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d009      	beq.n	8013af6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	681a      	ldr	r2, [r3, #0]
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	4413      	add	r3, r2
 8013aea:	687a      	ldr	r2, [r7, #4]
 8013aec:	4907      	ldr	r1, [pc, #28]	; (8013b0c <lwip_cyclic_timer+0x60>)
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7ff ff6e 	bl	80139d0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013af4:	e004      	b.n	8013b00 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013af6:	687a      	ldr	r2, [r7, #4]
 8013af8:	4904      	ldr	r1, [pc, #16]	; (8013b0c <lwip_cyclic_timer+0x60>)
 8013afa:	68f8      	ldr	r0, [r7, #12]
 8013afc:	f7ff ff68 	bl	80139d0 <sys_timeout_abs>
}
 8013b00:	bf00      	nop
 8013b02:	3718      	adds	r7, #24
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}
 8013b08:	20006904 	.word	0x20006904
 8013b0c:	08013aad 	.word	0x08013aad

08013b10 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b082      	sub	sp, #8
 8013b14:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013b16:	2301      	movs	r3, #1
 8013b18:	607b      	str	r3, [r7, #4]
 8013b1a:	e00e      	b.n	8013b3a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013b1c:	4a0a      	ldr	r2, [pc, #40]	; (8013b48 <sys_timeouts_init+0x38>)
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	00db      	lsls	r3, r3, #3
 8013b28:	4a07      	ldr	r2, [pc, #28]	; (8013b48 <sys_timeouts_init+0x38>)
 8013b2a:	4413      	add	r3, r2
 8013b2c:	461a      	mov	r2, r3
 8013b2e:	4907      	ldr	r1, [pc, #28]	; (8013b4c <sys_timeouts_init+0x3c>)
 8013b30:	f000 f80e 	bl	8013b50 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	3301      	adds	r3, #1
 8013b38:	607b      	str	r3, [r7, #4]
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	2b04      	cmp	r3, #4
 8013b3e:	d9ed      	bls.n	8013b1c <sys_timeouts_init+0xc>
  }
}
 8013b40:	bf00      	nop
 8013b42:	3708      	adds	r7, #8
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}
 8013b48:	0801b938 	.word	0x0801b938
 8013b4c:	08013aad 	.word	0x08013aad

08013b50 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b086      	sub	sp, #24
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	60f8      	str	r0, [r7, #12]
 8013b58:	60b9      	str	r1, [r7, #8]
 8013b5a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b62:	d306      	bcc.n	8013b72 <sys_timeout+0x22>
 8013b64:	4b0a      	ldr	r3, [pc, #40]	; (8013b90 <sys_timeout+0x40>)
 8013b66:	f240 1229 	movw	r2, #297	; 0x129
 8013b6a:	490a      	ldr	r1, [pc, #40]	; (8013b94 <sys_timeout+0x44>)
 8013b6c:	480a      	ldr	r0, [pc, #40]	; (8013b98 <sys_timeout+0x48>)
 8013b6e:	f001 fcb1 	bl	80154d4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013b72:	f7ed fe7f 	bl	8001874 <sys_now>
 8013b76:	4602      	mov	r2, r0
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	4413      	add	r3, r2
 8013b7c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013b7e:	687a      	ldr	r2, [r7, #4]
 8013b80:	68b9      	ldr	r1, [r7, #8]
 8013b82:	6978      	ldr	r0, [r7, #20]
 8013b84:	f7ff ff24 	bl	80139d0 <sys_timeout_abs>
#endif
}
 8013b88:	bf00      	nop
 8013b8a:	3718      	adds	r7, #24
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	0801b964 	.word	0x0801b964
 8013b94:	0801ba3c 	.word	0x0801ba3c
 8013b98:	0801ba14 	.word	0x0801ba14

08013b9c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b084      	sub	sp, #16
 8013ba0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013ba2:	f7ed fe67 	bl	8001874 <sys_now>
 8013ba6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013ba8:	4b17      	ldr	r3, [pc, #92]	; (8013c08 <sys_check_timeouts+0x6c>)
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013bae:	68bb      	ldr	r3, [r7, #8]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d022      	beq.n	8013bfa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	685b      	ldr	r3, [r3, #4]
 8013bb8:	68fa      	ldr	r2, [r7, #12]
 8013bba:	1ad3      	subs	r3, r2, r3
 8013bbc:	0fdb      	lsrs	r3, r3, #31
 8013bbe:	f003 0301 	and.w	r3, r3, #1
 8013bc2:	b2db      	uxtb	r3, r3
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d11a      	bne.n	8013bfe <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	4a0e      	ldr	r2, [pc, #56]	; (8013c08 <sys_check_timeouts+0x6c>)
 8013bce:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	689b      	ldr	r3, [r3, #8]
 8013bd4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	68db      	ldr	r3, [r3, #12]
 8013bda:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	685b      	ldr	r3, [r3, #4]
 8013be0:	4a0a      	ldr	r2, [pc, #40]	; (8013c0c <sys_check_timeouts+0x70>)
 8013be2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013be4:	68b9      	ldr	r1, [r7, #8]
 8013be6:	200a      	movs	r0, #10
 8013be8:	f7f9 fa22 	bl	800d030 <memp_free>
    if (handler != NULL) {
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d0da      	beq.n	8013ba8 <sys_check_timeouts+0xc>
      handler(arg);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	6838      	ldr	r0, [r7, #0]
 8013bf6:	4798      	blx	r3
  do {
 8013bf8:	e7d6      	b.n	8013ba8 <sys_check_timeouts+0xc>
      return;
 8013bfa:	bf00      	nop
 8013bfc:	e000      	b.n	8013c00 <sys_check_timeouts+0x64>
      return;
 8013bfe:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013c00:	3710      	adds	r7, #16
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}
 8013c06:	bf00      	nop
 8013c08:	20006900 	.word	0x20006900
 8013c0c:	20006904 	.word	0x20006904

08013c10 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b082      	sub	sp, #8
 8013c14:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013c16:	4b16      	ldr	r3, [pc, #88]	; (8013c70 <sys_timeouts_sleeptime+0x60>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d102      	bne.n	8013c24 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8013c22:	e020      	b.n	8013c66 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013c24:	f7ed fe26 	bl	8001874 <sys_now>
 8013c28:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013c2a:	4b11      	ldr	r3, [pc, #68]	; (8013c70 <sys_timeouts_sleeptime+0x60>)
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	685a      	ldr	r2, [r3, #4]
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	1ad3      	subs	r3, r2, r3
 8013c34:	0fdb      	lsrs	r3, r3, #31
 8013c36:	f003 0301 	and.w	r3, r3, #1
 8013c3a:	b2db      	uxtb	r3, r3
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d001      	beq.n	8013c44 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013c40:	2300      	movs	r3, #0
 8013c42:	e010      	b.n	8013c66 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013c44:	4b0a      	ldr	r3, [pc, #40]	; (8013c70 <sys_timeouts_sleeptime+0x60>)
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	685a      	ldr	r2, [r3, #4]
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	1ad3      	subs	r3, r2, r3
 8013c4e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	da06      	bge.n	8013c64 <sys_timeouts_sleeptime+0x54>
 8013c56:	4b07      	ldr	r3, [pc, #28]	; (8013c74 <sys_timeouts_sleeptime+0x64>)
 8013c58:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013c5c:	4906      	ldr	r1, [pc, #24]	; (8013c78 <sys_timeouts_sleeptime+0x68>)
 8013c5e:	4807      	ldr	r0, [pc, #28]	; (8013c7c <sys_timeouts_sleeptime+0x6c>)
 8013c60:	f001 fc38 	bl	80154d4 <iprintf>
    return ret;
 8013c64:	683b      	ldr	r3, [r7, #0]
  }
}
 8013c66:	4618      	mov	r0, r3
 8013c68:	3708      	adds	r7, #8
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}
 8013c6e:	bf00      	nop
 8013c70:	20006900 	.word	0x20006900
 8013c74:	0801b964 	.word	0x0801b964
 8013c78:	0801ba74 	.word	0x0801ba74
 8013c7c:	0801ba14 	.word	0x0801ba14

08013c80 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013c84:	f001 fc3e 	bl	8015504 <rand>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013c90:	b29b      	uxth	r3, r3
 8013c92:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013c96:	b29a      	uxth	r2, r3
 8013c98:	4b01      	ldr	r3, [pc, #4]	; (8013ca0 <udp_init+0x20>)
 8013c9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013c9c:	bf00      	nop
 8013c9e:	bd80      	pop	{r7, pc}
 8013ca0:	20000038 	.word	0x20000038

08013ca4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013ca4:	b480      	push	{r7}
 8013ca6:	b083      	sub	sp, #12
 8013ca8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013caa:	2300      	movs	r3, #0
 8013cac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013cae:	4b17      	ldr	r3, [pc, #92]	; (8013d0c <udp_new_port+0x68>)
 8013cb0:	881b      	ldrh	r3, [r3, #0]
 8013cb2:	1c5a      	adds	r2, r3, #1
 8013cb4:	b291      	uxth	r1, r2
 8013cb6:	4a15      	ldr	r2, [pc, #84]	; (8013d0c <udp_new_port+0x68>)
 8013cb8:	8011      	strh	r1, [r2, #0]
 8013cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013cbe:	4293      	cmp	r3, r2
 8013cc0:	d103      	bne.n	8013cca <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013cc2:	4b12      	ldr	r3, [pc, #72]	; (8013d0c <udp_new_port+0x68>)
 8013cc4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013cc8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cca:	4b11      	ldr	r3, [pc, #68]	; (8013d10 <udp_new_port+0x6c>)
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	603b      	str	r3, [r7, #0]
 8013cd0:	e011      	b.n	8013cf6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013cd2:	683b      	ldr	r3, [r7, #0]
 8013cd4:	8a5a      	ldrh	r2, [r3, #18]
 8013cd6:	4b0d      	ldr	r3, [pc, #52]	; (8013d0c <udp_new_port+0x68>)
 8013cd8:	881b      	ldrh	r3, [r3, #0]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d108      	bne.n	8013cf0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013cde:	88fb      	ldrh	r3, [r7, #6]
 8013ce0:	3301      	adds	r3, #1
 8013ce2:	80fb      	strh	r3, [r7, #6]
 8013ce4:	88fb      	ldrh	r3, [r7, #6]
 8013ce6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013cea:	d3e0      	bcc.n	8013cae <udp_new_port+0xa>
        return 0;
 8013cec:	2300      	movs	r3, #0
 8013cee:	e007      	b.n	8013d00 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cf0:	683b      	ldr	r3, [r7, #0]
 8013cf2:	68db      	ldr	r3, [r3, #12]
 8013cf4:	603b      	str	r3, [r7, #0]
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d1ea      	bne.n	8013cd2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013cfc:	4b03      	ldr	r3, [pc, #12]	; (8013d0c <udp_new_port+0x68>)
 8013cfe:	881b      	ldrh	r3, [r3, #0]
}
 8013d00:	4618      	mov	r0, r3
 8013d02:	370c      	adds	r7, #12
 8013d04:	46bd      	mov	sp, r7
 8013d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0a:	4770      	bx	lr
 8013d0c:	20000038 	.word	0x20000038
 8013d10:	2000cfdc 	.word	0x2000cfdc

08013d14 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b084      	sub	sp, #16
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	60f8      	str	r0, [r7, #12]
 8013d1c:	60b9      	str	r1, [r7, #8]
 8013d1e:	4613      	mov	r3, r2
 8013d20:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d105      	bne.n	8013d34 <udp_input_local_match+0x20>
 8013d28:	4b27      	ldr	r3, [pc, #156]	; (8013dc8 <udp_input_local_match+0xb4>)
 8013d2a:	2287      	movs	r2, #135	; 0x87
 8013d2c:	4927      	ldr	r1, [pc, #156]	; (8013dcc <udp_input_local_match+0xb8>)
 8013d2e:	4828      	ldr	r0, [pc, #160]	; (8013dd0 <udp_input_local_match+0xbc>)
 8013d30:	f001 fbd0 	bl	80154d4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d105      	bne.n	8013d46 <udp_input_local_match+0x32>
 8013d3a:	4b23      	ldr	r3, [pc, #140]	; (8013dc8 <udp_input_local_match+0xb4>)
 8013d3c:	2288      	movs	r2, #136	; 0x88
 8013d3e:	4925      	ldr	r1, [pc, #148]	; (8013dd4 <udp_input_local_match+0xc0>)
 8013d40:	4823      	ldr	r0, [pc, #140]	; (8013dd0 <udp_input_local_match+0xbc>)
 8013d42:	f001 fbc7 	bl	80154d4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	7a1b      	ldrb	r3, [r3, #8]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d00b      	beq.n	8013d66 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	7a1a      	ldrb	r2, [r3, #8]
 8013d52:	4b21      	ldr	r3, [pc, #132]	; (8013dd8 <udp_input_local_match+0xc4>)
 8013d54:	685b      	ldr	r3, [r3, #4]
 8013d56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013d5a:	3301      	adds	r3, #1
 8013d5c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d5e:	429a      	cmp	r2, r3
 8013d60:	d001      	beq.n	8013d66 <udp_input_local_match+0x52>
    return 0;
 8013d62:	2300      	movs	r3, #0
 8013d64:	e02b      	b.n	8013dbe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013d66:	79fb      	ldrb	r3, [r7, #7]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d018      	beq.n	8013d9e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d013      	beq.n	8013d9a <udp_input_local_match+0x86>
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d00f      	beq.n	8013d9a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d7a:	4b17      	ldr	r3, [pc, #92]	; (8013dd8 <udp_input_local_match+0xc4>)
 8013d7c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d82:	d00a      	beq.n	8013d9a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	681a      	ldr	r2, [r3, #0]
 8013d88:	4b13      	ldr	r3, [pc, #76]	; (8013dd8 <udp_input_local_match+0xc4>)
 8013d8a:	695b      	ldr	r3, [r3, #20]
 8013d8c:	405a      	eors	r2, r3
 8013d8e:	68bb      	ldr	r3, [r7, #8]
 8013d90:	3308      	adds	r3, #8
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d110      	bne.n	8013dbc <udp_input_local_match+0xa8>
          return 1;
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	e00f      	b.n	8013dbe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d009      	beq.n	8013db8 <udp_input_local_match+0xa4>
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d005      	beq.n	8013db8 <udp_input_local_match+0xa4>
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	681a      	ldr	r2, [r3, #0]
 8013db0:	4b09      	ldr	r3, [pc, #36]	; (8013dd8 <udp_input_local_match+0xc4>)
 8013db2:	695b      	ldr	r3, [r3, #20]
 8013db4:	429a      	cmp	r2, r3
 8013db6:	d101      	bne.n	8013dbc <udp_input_local_match+0xa8>
        return 1;
 8013db8:	2301      	movs	r3, #1
 8013dba:	e000      	b.n	8013dbe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013dbc:	2300      	movs	r3, #0
}
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	3710      	adds	r7, #16
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd80      	pop	{r7, pc}
 8013dc6:	bf00      	nop
 8013dc8:	0801ba88 	.word	0x0801ba88
 8013dcc:	0801baf4 	.word	0x0801baf4
 8013dd0:	0801bb18 	.word	0x0801bb18
 8013dd4:	0801bb40 	.word	0x0801bb40
 8013dd8:	20006a84 	.word	0x20006a84

08013ddc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013ddc:	b590      	push	{r4, r7, lr}
 8013dde:	b08d      	sub	sp, #52	; 0x34
 8013de0:	af02      	add	r7, sp, #8
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013de6:	2300      	movs	r3, #0
 8013de8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d105      	bne.n	8013dfc <udp_input+0x20>
 8013df0:	4b7c      	ldr	r3, [pc, #496]	; (8013fe4 <udp_input+0x208>)
 8013df2:	22cf      	movs	r2, #207	; 0xcf
 8013df4:	497c      	ldr	r1, [pc, #496]	; (8013fe8 <udp_input+0x20c>)
 8013df6:	487d      	ldr	r0, [pc, #500]	; (8013fec <udp_input+0x210>)
 8013df8:	f001 fb6c 	bl	80154d4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d105      	bne.n	8013e0e <udp_input+0x32>
 8013e02:	4b78      	ldr	r3, [pc, #480]	; (8013fe4 <udp_input+0x208>)
 8013e04:	22d0      	movs	r2, #208	; 0xd0
 8013e06:	497a      	ldr	r1, [pc, #488]	; (8013ff0 <udp_input+0x214>)
 8013e08:	4878      	ldr	r0, [pc, #480]	; (8013fec <udp_input+0x210>)
 8013e0a:	f001 fb63 	bl	80154d4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	895b      	ldrh	r3, [r3, #10]
 8013e12:	2b07      	cmp	r3, #7
 8013e14:	d803      	bhi.n	8013e1e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013e16:	6878      	ldr	r0, [r7, #4]
 8013e18:	f7f9 fee2 	bl	800dbe0 <pbuf_free>
    goto end;
 8013e1c:	e0de      	b.n	8013fdc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	685b      	ldr	r3, [r3, #4]
 8013e22:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013e24:	4b73      	ldr	r3, [pc, #460]	; (8013ff4 <udp_input+0x218>)
 8013e26:	695a      	ldr	r2, [r3, #20]
 8013e28:	4b72      	ldr	r3, [pc, #456]	; (8013ff4 <udp_input+0x218>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	4619      	mov	r1, r3
 8013e2e:	4610      	mov	r0, r2
 8013e30:	f7f7 fcd6 	bl	800b7e0 <ip4_addr_isbroadcast_u32>
 8013e34:	4603      	mov	r3, r0
 8013e36:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	881b      	ldrh	r3, [r3, #0]
 8013e3c:	b29b      	uxth	r3, r3
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7f8 fb44 	bl	800c4cc <lwip_htons>
 8013e44:	4603      	mov	r3, r0
 8013e46:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013e48:	697b      	ldr	r3, [r7, #20]
 8013e4a:	885b      	ldrh	r3, [r3, #2]
 8013e4c:	b29b      	uxth	r3, r3
 8013e4e:	4618      	mov	r0, r3
 8013e50:	f7f8 fb3c 	bl	800c4cc <lwip_htons>
 8013e54:	4603      	mov	r3, r0
 8013e56:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013e58:	2300      	movs	r3, #0
 8013e5a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013e60:	2300      	movs	r3, #0
 8013e62:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e64:	4b64      	ldr	r3, [pc, #400]	; (8013ff8 <udp_input+0x21c>)
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	627b      	str	r3, [r7, #36]	; 0x24
 8013e6a:	e054      	b.n	8013f16 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e6e:	8a5b      	ldrh	r3, [r3, #18]
 8013e70:	89fa      	ldrh	r2, [r7, #14]
 8013e72:	429a      	cmp	r2, r3
 8013e74:	d14a      	bne.n	8013f0c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013e76:	7cfb      	ldrb	r3, [r7, #19]
 8013e78:	461a      	mov	r2, r3
 8013e7a:	6839      	ldr	r1, [r7, #0]
 8013e7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e7e:	f7ff ff49 	bl	8013d14 <udp_input_local_match>
 8013e82:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d041      	beq.n	8013f0c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e8a:	7c1b      	ldrb	r3, [r3, #16]
 8013e8c:	f003 0304 	and.w	r3, r3, #4
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d11d      	bne.n	8013ed0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013e94:	69fb      	ldr	r3, [r7, #28]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d102      	bne.n	8013ea0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9c:	61fb      	str	r3, [r7, #28]
 8013e9e:	e017      	b.n	8013ed0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013ea0:	7cfb      	ldrb	r3, [r7, #19]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d014      	beq.n	8013ed0 <udp_input+0xf4>
 8013ea6:	4b53      	ldr	r3, [pc, #332]	; (8013ff4 <udp_input+0x218>)
 8013ea8:	695b      	ldr	r3, [r3, #20]
 8013eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013eae:	d10f      	bne.n	8013ed0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013eb0:	69fb      	ldr	r3, [r7, #28]
 8013eb2:	681a      	ldr	r2, [r3, #0]
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	3304      	adds	r3, #4
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d008      	beq.n	8013ed0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec0:	681a      	ldr	r2, [r3, #0]
 8013ec2:	683b      	ldr	r3, [r7, #0]
 8013ec4:	3304      	adds	r3, #4
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	d101      	bne.n	8013ed0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ece:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed2:	8a9b      	ldrh	r3, [r3, #20]
 8013ed4:	8a3a      	ldrh	r2, [r7, #16]
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d118      	bne.n	8013f0c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013edc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d005      	beq.n	8013eee <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee4:	685a      	ldr	r2, [r3, #4]
 8013ee6:	4b43      	ldr	r3, [pc, #268]	; (8013ff4 <udp_input+0x218>)
 8013ee8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013eea:	429a      	cmp	r2, r3
 8013eec:	d10e      	bne.n	8013f0c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013eee:	6a3b      	ldr	r3, [r7, #32]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d014      	beq.n	8013f1e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef6:	68da      	ldr	r2, [r3, #12]
 8013ef8:	6a3b      	ldr	r3, [r7, #32]
 8013efa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013efc:	4b3e      	ldr	r3, [pc, #248]	; (8013ff8 <udp_input+0x21c>)
 8013efe:	681a      	ldr	r2, [r3, #0]
 8013f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f02:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013f04:	4a3c      	ldr	r2, [pc, #240]	; (8013ff8 <udp_input+0x21c>)
 8013f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f08:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013f0a:	e008      	b.n	8013f1e <udp_input+0x142>
      }
    }

    prev = pcb;
 8013f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f0e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f12:	68db      	ldr	r3, [r3, #12]
 8013f14:	627b      	str	r3, [r7, #36]	; 0x24
 8013f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d1a7      	bne.n	8013e6c <udp_input+0x90>
 8013f1c:	e000      	b.n	8013f20 <udp_input+0x144>
        break;
 8013f1e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d101      	bne.n	8013f2a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013f26:	69fb      	ldr	r3, [r7, #28]
 8013f28:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d002      	beq.n	8013f36 <udp_input+0x15a>
    for_us = 1;
 8013f30:	2301      	movs	r3, #1
 8013f32:	76fb      	strb	r3, [r7, #27]
 8013f34:	e00a      	b.n	8013f4c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	3304      	adds	r3, #4
 8013f3a:	681a      	ldr	r2, [r3, #0]
 8013f3c:	4b2d      	ldr	r3, [pc, #180]	; (8013ff4 <udp_input+0x218>)
 8013f3e:	695b      	ldr	r3, [r3, #20]
 8013f40:	429a      	cmp	r2, r3
 8013f42:	bf0c      	ite	eq
 8013f44:	2301      	moveq	r3, #1
 8013f46:	2300      	movne	r3, #0
 8013f48:	b2db      	uxtb	r3, r3
 8013f4a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013f4c:	7efb      	ldrb	r3, [r7, #27]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d041      	beq.n	8013fd6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013f52:	2108      	movs	r1, #8
 8013f54:	6878      	ldr	r0, [r7, #4]
 8013f56:	f7f9 fdbd 	bl	800dad4 <pbuf_remove_header>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d00a      	beq.n	8013f76 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013f60:	4b20      	ldr	r3, [pc, #128]	; (8013fe4 <udp_input+0x208>)
 8013f62:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013f66:	4925      	ldr	r1, [pc, #148]	; (8013ffc <udp_input+0x220>)
 8013f68:	4820      	ldr	r0, [pc, #128]	; (8013fec <udp_input+0x210>)
 8013f6a:	f001 fab3 	bl	80154d4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013f6e:	6878      	ldr	r0, [r7, #4]
 8013f70:	f7f9 fe36 	bl	800dbe0 <pbuf_free>
      goto end;
 8013f74:	e032      	b.n	8013fdc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d012      	beq.n	8013fa2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f7e:	699b      	ldr	r3, [r3, #24]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d00a      	beq.n	8013f9a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f86:	699c      	ldr	r4, [r3, #24]
 8013f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f8a:	69d8      	ldr	r0, [r3, #28]
 8013f8c:	8a3b      	ldrh	r3, [r7, #16]
 8013f8e:	9300      	str	r3, [sp, #0]
 8013f90:	4b1b      	ldr	r3, [pc, #108]	; (8014000 <udp_input+0x224>)
 8013f92:	687a      	ldr	r2, [r7, #4]
 8013f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013f96:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013f98:	e021      	b.n	8013fde <udp_input+0x202>
        pbuf_free(p);
 8013f9a:	6878      	ldr	r0, [r7, #4]
 8013f9c:	f7f9 fe20 	bl	800dbe0 <pbuf_free>
        goto end;
 8013fa0:	e01c      	b.n	8013fdc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013fa2:	7cfb      	ldrb	r3, [r7, #19]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d112      	bne.n	8013fce <udp_input+0x1f2>
 8013fa8:	4b12      	ldr	r3, [pc, #72]	; (8013ff4 <udp_input+0x218>)
 8013faa:	695b      	ldr	r3, [r3, #20]
 8013fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013fb0:	2be0      	cmp	r3, #224	; 0xe0
 8013fb2:	d00c      	beq.n	8013fce <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013fb4:	4b0f      	ldr	r3, [pc, #60]	; (8013ff4 <udp_input+0x218>)
 8013fb6:	899b      	ldrh	r3, [r3, #12]
 8013fb8:	3308      	adds	r3, #8
 8013fba:	b29b      	uxth	r3, r3
 8013fbc:	b21b      	sxth	r3, r3
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	f7f9 fdfa 	bl	800dbba <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013fc6:	2103      	movs	r1, #3
 8013fc8:	6878      	ldr	r0, [r7, #4]
 8013fca:	f7f7 f8cd 	bl	800b168 <icmp_dest_unreach>
      pbuf_free(p);
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f7f9 fe06 	bl	800dbe0 <pbuf_free>
  return;
 8013fd4:	e003      	b.n	8013fde <udp_input+0x202>
    pbuf_free(p);
 8013fd6:	6878      	ldr	r0, [r7, #4]
 8013fd8:	f7f9 fe02 	bl	800dbe0 <pbuf_free>
  return;
 8013fdc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013fde:	372c      	adds	r7, #44	; 0x2c
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd90      	pop	{r4, r7, pc}
 8013fe4:	0801ba88 	.word	0x0801ba88
 8013fe8:	0801bb68 	.word	0x0801bb68
 8013fec:	0801bb18 	.word	0x0801bb18
 8013ff0:	0801bb80 	.word	0x0801bb80
 8013ff4:	20006a84 	.word	0x20006a84
 8013ff8:	2000cfdc 	.word	0x2000cfdc
 8013ffc:	0801bb9c 	.word	0x0801bb9c
 8014000:	20006a94 	.word	0x20006a94

08014004 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b088      	sub	sp, #32
 8014008:	af02      	add	r7, sp, #8
 801400a:	60f8      	str	r0, [r7, #12]
 801400c:	60b9      	str	r1, [r7, #8]
 801400e:	607a      	str	r2, [r7, #4]
 8014010:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d109      	bne.n	801402c <udp_sendto_if+0x28>
 8014018:	4b2e      	ldr	r3, [pc, #184]	; (80140d4 <udp_sendto_if+0xd0>)
 801401a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801401e:	492e      	ldr	r1, [pc, #184]	; (80140d8 <udp_sendto_if+0xd4>)
 8014020:	482e      	ldr	r0, [pc, #184]	; (80140dc <udp_sendto_if+0xd8>)
 8014022:	f001 fa57 	bl	80154d4 <iprintf>
 8014026:	f06f 030f 	mvn.w	r3, #15
 801402a:	e04f      	b.n	80140cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d109      	bne.n	8014046 <udp_sendto_if+0x42>
 8014032:	4b28      	ldr	r3, [pc, #160]	; (80140d4 <udp_sendto_if+0xd0>)
 8014034:	f240 2281 	movw	r2, #641	; 0x281
 8014038:	4929      	ldr	r1, [pc, #164]	; (80140e0 <udp_sendto_if+0xdc>)
 801403a:	4828      	ldr	r0, [pc, #160]	; (80140dc <udp_sendto_if+0xd8>)
 801403c:	f001 fa4a 	bl	80154d4 <iprintf>
 8014040:	f06f 030f 	mvn.w	r3, #15
 8014044:	e042      	b.n	80140cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d109      	bne.n	8014060 <udp_sendto_if+0x5c>
 801404c:	4b21      	ldr	r3, [pc, #132]	; (80140d4 <udp_sendto_if+0xd0>)
 801404e:	f240 2282 	movw	r2, #642	; 0x282
 8014052:	4924      	ldr	r1, [pc, #144]	; (80140e4 <udp_sendto_if+0xe0>)
 8014054:	4821      	ldr	r0, [pc, #132]	; (80140dc <udp_sendto_if+0xd8>)
 8014056:	f001 fa3d 	bl	80154d4 <iprintf>
 801405a:	f06f 030f 	mvn.w	r3, #15
 801405e:	e035      	b.n	80140cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014060:	6a3b      	ldr	r3, [r7, #32]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d109      	bne.n	801407a <udp_sendto_if+0x76>
 8014066:	4b1b      	ldr	r3, [pc, #108]	; (80140d4 <udp_sendto_if+0xd0>)
 8014068:	f240 2283 	movw	r2, #643	; 0x283
 801406c:	491e      	ldr	r1, [pc, #120]	; (80140e8 <udp_sendto_if+0xe4>)
 801406e:	481b      	ldr	r0, [pc, #108]	; (80140dc <udp_sendto_if+0xd8>)
 8014070:	f001 fa30 	bl	80154d4 <iprintf>
 8014074:	f06f 030f 	mvn.w	r3, #15
 8014078:	e028      	b.n	80140cc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d009      	beq.n	8014094 <udp_sendto_if+0x90>
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d005      	beq.n	8014094 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014090:	2be0      	cmp	r3, #224	; 0xe0
 8014092:	d103      	bne.n	801409c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014094:	6a3b      	ldr	r3, [r7, #32]
 8014096:	3304      	adds	r3, #4
 8014098:	617b      	str	r3, [r7, #20]
 801409a:	e00b      	b.n	80140b4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	681a      	ldr	r2, [r3, #0]
 80140a0:	6a3b      	ldr	r3, [r7, #32]
 80140a2:	3304      	adds	r3, #4
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	429a      	cmp	r2, r3
 80140a8:	d002      	beq.n	80140b0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80140aa:	f06f 0303 	mvn.w	r3, #3
 80140ae:	e00d      	b.n	80140cc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80140b4:	887a      	ldrh	r2, [r7, #2]
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	9301      	str	r3, [sp, #4]
 80140ba:	6a3b      	ldr	r3, [r7, #32]
 80140bc:	9300      	str	r3, [sp, #0]
 80140be:	4613      	mov	r3, r2
 80140c0:	687a      	ldr	r2, [r7, #4]
 80140c2:	68b9      	ldr	r1, [r7, #8]
 80140c4:	68f8      	ldr	r0, [r7, #12]
 80140c6:	f000 f811 	bl	80140ec <udp_sendto_if_src>
 80140ca:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80140cc:	4618      	mov	r0, r3
 80140ce:	3718      	adds	r7, #24
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bd80      	pop	{r7, pc}
 80140d4:	0801ba88 	.word	0x0801ba88
 80140d8:	0801bc38 	.word	0x0801bc38
 80140dc:	0801bb18 	.word	0x0801bb18
 80140e0:	0801bc54 	.word	0x0801bc54
 80140e4:	0801bc70 	.word	0x0801bc70
 80140e8:	0801bc90 	.word	0x0801bc90

080140ec <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b08c      	sub	sp, #48	; 0x30
 80140f0:	af04      	add	r7, sp, #16
 80140f2:	60f8      	str	r0, [r7, #12]
 80140f4:	60b9      	str	r1, [r7, #8]
 80140f6:	607a      	str	r2, [r7, #4]
 80140f8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d109      	bne.n	8014114 <udp_sendto_if_src+0x28>
 8014100:	4b65      	ldr	r3, [pc, #404]	; (8014298 <udp_sendto_if_src+0x1ac>)
 8014102:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014106:	4965      	ldr	r1, [pc, #404]	; (801429c <udp_sendto_if_src+0x1b0>)
 8014108:	4865      	ldr	r0, [pc, #404]	; (80142a0 <udp_sendto_if_src+0x1b4>)
 801410a:	f001 f9e3 	bl	80154d4 <iprintf>
 801410e:	f06f 030f 	mvn.w	r3, #15
 8014112:	e0bc      	b.n	801428e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d109      	bne.n	801412e <udp_sendto_if_src+0x42>
 801411a:	4b5f      	ldr	r3, [pc, #380]	; (8014298 <udp_sendto_if_src+0x1ac>)
 801411c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014120:	4960      	ldr	r1, [pc, #384]	; (80142a4 <udp_sendto_if_src+0x1b8>)
 8014122:	485f      	ldr	r0, [pc, #380]	; (80142a0 <udp_sendto_if_src+0x1b4>)
 8014124:	f001 f9d6 	bl	80154d4 <iprintf>
 8014128:	f06f 030f 	mvn.w	r3, #15
 801412c:	e0af      	b.n	801428e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d109      	bne.n	8014148 <udp_sendto_if_src+0x5c>
 8014134:	4b58      	ldr	r3, [pc, #352]	; (8014298 <udp_sendto_if_src+0x1ac>)
 8014136:	f240 22d3 	movw	r2, #723	; 0x2d3
 801413a:	495b      	ldr	r1, [pc, #364]	; (80142a8 <udp_sendto_if_src+0x1bc>)
 801413c:	4858      	ldr	r0, [pc, #352]	; (80142a0 <udp_sendto_if_src+0x1b4>)
 801413e:	f001 f9c9 	bl	80154d4 <iprintf>
 8014142:	f06f 030f 	mvn.w	r3, #15
 8014146:	e0a2      	b.n	801428e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801414a:	2b00      	cmp	r3, #0
 801414c:	d109      	bne.n	8014162 <udp_sendto_if_src+0x76>
 801414e:	4b52      	ldr	r3, [pc, #328]	; (8014298 <udp_sendto_if_src+0x1ac>)
 8014150:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014154:	4955      	ldr	r1, [pc, #340]	; (80142ac <udp_sendto_if_src+0x1c0>)
 8014156:	4852      	ldr	r0, [pc, #328]	; (80142a0 <udp_sendto_if_src+0x1b4>)
 8014158:	f001 f9bc 	bl	80154d4 <iprintf>
 801415c:	f06f 030f 	mvn.w	r3, #15
 8014160:	e095      	b.n	801428e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014164:	2b00      	cmp	r3, #0
 8014166:	d109      	bne.n	801417c <udp_sendto_if_src+0x90>
 8014168:	4b4b      	ldr	r3, [pc, #300]	; (8014298 <udp_sendto_if_src+0x1ac>)
 801416a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801416e:	4950      	ldr	r1, [pc, #320]	; (80142b0 <udp_sendto_if_src+0x1c4>)
 8014170:	484b      	ldr	r0, [pc, #300]	; (80142a0 <udp_sendto_if_src+0x1b4>)
 8014172:	f001 f9af 	bl	80154d4 <iprintf>
 8014176:	f06f 030f 	mvn.w	r3, #15
 801417a:	e088      	b.n	801428e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	8a5b      	ldrh	r3, [r3, #18]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d10f      	bne.n	80141a4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014184:	68f9      	ldr	r1, [r7, #12]
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	8a5b      	ldrh	r3, [r3, #18]
 801418a:	461a      	mov	r2, r3
 801418c:	68f8      	ldr	r0, [r7, #12]
 801418e:	f000 f893 	bl	80142b8 <udp_bind>
 8014192:	4603      	mov	r3, r0
 8014194:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014196:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d002      	beq.n	80141a4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801419e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80141a2:	e074      	b.n	801428e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	891b      	ldrh	r3, [r3, #8]
 80141a8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80141ac:	4293      	cmp	r3, r2
 80141ae:	d902      	bls.n	80141b6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80141b0:	f04f 33ff 	mov.w	r3, #4294967295
 80141b4:	e06b      	b.n	801428e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80141b6:	2108      	movs	r1, #8
 80141b8:	68b8      	ldr	r0, [r7, #8]
 80141ba:	f7f9 fc7b 	bl	800dab4 <pbuf_add_header>
 80141be:	4603      	mov	r3, r0
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d015      	beq.n	80141f0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80141c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80141c8:	2108      	movs	r1, #8
 80141ca:	2022      	movs	r0, #34	; 0x22
 80141cc:	f7f9 fa28 	bl	800d620 <pbuf_alloc>
 80141d0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80141d2:	69fb      	ldr	r3, [r7, #28]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d102      	bne.n	80141de <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80141d8:	f04f 33ff 	mov.w	r3, #4294967295
 80141dc:	e057      	b.n	801428e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	891b      	ldrh	r3, [r3, #8]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d006      	beq.n	80141f4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80141e6:	68b9      	ldr	r1, [r7, #8]
 80141e8:	69f8      	ldr	r0, [r7, #28]
 80141ea:	f7f9 fe1d 	bl	800de28 <pbuf_chain>
 80141ee:	e001      	b.n	80141f4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80141f4:	69fb      	ldr	r3, [r7, #28]
 80141f6:	895b      	ldrh	r3, [r3, #10]
 80141f8:	2b07      	cmp	r3, #7
 80141fa:	d806      	bhi.n	801420a <udp_sendto_if_src+0x11e>
 80141fc:	4b26      	ldr	r3, [pc, #152]	; (8014298 <udp_sendto_if_src+0x1ac>)
 80141fe:	f240 320e 	movw	r2, #782	; 0x30e
 8014202:	492c      	ldr	r1, [pc, #176]	; (80142b4 <udp_sendto_if_src+0x1c8>)
 8014204:	4826      	ldr	r0, [pc, #152]	; (80142a0 <udp_sendto_if_src+0x1b4>)
 8014206:	f001 f965 	bl	80154d4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801420a:	69fb      	ldr	r3, [r7, #28]
 801420c:	685b      	ldr	r3, [r3, #4]
 801420e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	8a5b      	ldrh	r3, [r3, #18]
 8014214:	4618      	mov	r0, r3
 8014216:	f7f8 f959 	bl	800c4cc <lwip_htons>
 801421a:	4603      	mov	r3, r0
 801421c:	461a      	mov	r2, r3
 801421e:	697b      	ldr	r3, [r7, #20]
 8014220:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8014222:	887b      	ldrh	r3, [r7, #2]
 8014224:	4618      	mov	r0, r3
 8014226:	f7f8 f951 	bl	800c4cc <lwip_htons>
 801422a:	4603      	mov	r3, r0
 801422c:	461a      	mov	r2, r3
 801422e:	697b      	ldr	r3, [r7, #20]
 8014230:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	2200      	movs	r2, #0
 8014236:	719a      	strb	r2, [r3, #6]
 8014238:	2200      	movs	r2, #0
 801423a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801423c:	69fb      	ldr	r3, [r7, #28]
 801423e:	891b      	ldrh	r3, [r3, #8]
 8014240:	4618      	mov	r0, r3
 8014242:	f7f8 f943 	bl	800c4cc <lwip_htons>
 8014246:	4603      	mov	r3, r0
 8014248:	461a      	mov	r2, r3
 801424a:	697b      	ldr	r3, [r7, #20]
 801424c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801424e:	2311      	movs	r3, #17
 8014250:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	7adb      	ldrb	r3, [r3, #11]
 8014256:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	7a9b      	ldrb	r3, [r3, #10]
 801425c:	7cb9      	ldrb	r1, [r7, #18]
 801425e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014260:	9202      	str	r2, [sp, #8]
 8014262:	7cfa      	ldrb	r2, [r7, #19]
 8014264:	9201      	str	r2, [sp, #4]
 8014266:	9300      	str	r3, [sp, #0]
 8014268:	460b      	mov	r3, r1
 801426a:	687a      	ldr	r2, [r7, #4]
 801426c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801426e:	69f8      	ldr	r0, [r7, #28]
 8014270:	f7f7 fa08 	bl	800b684 <ip4_output_if_src>
 8014274:	4603      	mov	r3, r0
 8014276:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014278:	69fa      	ldr	r2, [r7, #28]
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	429a      	cmp	r2, r3
 801427e:	d004      	beq.n	801428a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014280:	69f8      	ldr	r0, [r7, #28]
 8014282:	f7f9 fcad 	bl	800dbe0 <pbuf_free>
    q = NULL;
 8014286:	2300      	movs	r3, #0
 8014288:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801428a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801428e:	4618      	mov	r0, r3
 8014290:	3720      	adds	r7, #32
 8014292:	46bd      	mov	sp, r7
 8014294:	bd80      	pop	{r7, pc}
 8014296:	bf00      	nop
 8014298:	0801ba88 	.word	0x0801ba88
 801429c:	0801bcb0 	.word	0x0801bcb0
 80142a0:	0801bb18 	.word	0x0801bb18
 80142a4:	0801bcd0 	.word	0x0801bcd0
 80142a8:	0801bcf0 	.word	0x0801bcf0
 80142ac:	0801bd14 	.word	0x0801bd14
 80142b0:	0801bd38 	.word	0x0801bd38
 80142b4:	0801bd5c 	.word	0x0801bd5c

080142b8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b086      	sub	sp, #24
 80142bc:	af00      	add	r7, sp, #0
 80142be:	60f8      	str	r0, [r7, #12]
 80142c0:	60b9      	str	r1, [r7, #8]
 80142c2:	4613      	mov	r3, r2
 80142c4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80142c6:	68bb      	ldr	r3, [r7, #8]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d101      	bne.n	80142d0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80142cc:	4b39      	ldr	r3, [pc, #228]	; (80143b4 <udp_bind+0xfc>)
 80142ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d109      	bne.n	80142ea <udp_bind+0x32>
 80142d6:	4b38      	ldr	r3, [pc, #224]	; (80143b8 <udp_bind+0x100>)
 80142d8:	f240 32b7 	movw	r2, #951	; 0x3b7
 80142dc:	4937      	ldr	r1, [pc, #220]	; (80143bc <udp_bind+0x104>)
 80142de:	4838      	ldr	r0, [pc, #224]	; (80143c0 <udp_bind+0x108>)
 80142e0:	f001 f8f8 	bl	80154d4 <iprintf>
 80142e4:	f06f 030f 	mvn.w	r3, #15
 80142e8:	e060      	b.n	80143ac <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80142ea:	2300      	movs	r3, #0
 80142ec:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80142ee:	4b35      	ldr	r3, [pc, #212]	; (80143c4 <udp_bind+0x10c>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	617b      	str	r3, [r7, #20]
 80142f4:	e009      	b.n	801430a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80142f6:	68fa      	ldr	r2, [r7, #12]
 80142f8:	697b      	ldr	r3, [r7, #20]
 80142fa:	429a      	cmp	r2, r3
 80142fc:	d102      	bne.n	8014304 <udp_bind+0x4c>
      rebind = 1;
 80142fe:	2301      	movs	r3, #1
 8014300:	74fb      	strb	r3, [r7, #19]
      break;
 8014302:	e005      	b.n	8014310 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	68db      	ldr	r3, [r3, #12]
 8014308:	617b      	str	r3, [r7, #20]
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d1f2      	bne.n	80142f6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014310:	88fb      	ldrh	r3, [r7, #6]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d109      	bne.n	801432a <udp_bind+0x72>
    port = udp_new_port();
 8014316:	f7ff fcc5 	bl	8013ca4 <udp_new_port>
 801431a:	4603      	mov	r3, r0
 801431c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801431e:	88fb      	ldrh	r3, [r7, #6]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d12c      	bne.n	801437e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014324:	f06f 0307 	mvn.w	r3, #7
 8014328:	e040      	b.n	80143ac <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801432a:	4b26      	ldr	r3, [pc, #152]	; (80143c4 <udp_bind+0x10c>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	617b      	str	r3, [r7, #20]
 8014330:	e022      	b.n	8014378 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014332:	68fa      	ldr	r2, [r7, #12]
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	429a      	cmp	r2, r3
 8014338:	d01b      	beq.n	8014372 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801433a:	697b      	ldr	r3, [r7, #20]
 801433c:	8a5b      	ldrh	r3, [r3, #18]
 801433e:	88fa      	ldrh	r2, [r7, #6]
 8014340:	429a      	cmp	r2, r3
 8014342:	d116      	bne.n	8014372 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014344:	697b      	ldr	r3, [r7, #20]
 8014346:	681a      	ldr	r2, [r3, #0]
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801434c:	429a      	cmp	r2, r3
 801434e:	d00d      	beq.n	801436c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014350:	68bb      	ldr	r3, [r7, #8]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d00a      	beq.n	801436c <udp_bind+0xb4>
 8014356:	68bb      	ldr	r3, [r7, #8]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d006      	beq.n	801436c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801435e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014360:	2b00      	cmp	r3, #0
 8014362:	d003      	beq.n	801436c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014364:	697b      	ldr	r3, [r7, #20]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d102      	bne.n	8014372 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801436c:	f06f 0307 	mvn.w	r3, #7
 8014370:	e01c      	b.n	80143ac <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014372:	697b      	ldr	r3, [r7, #20]
 8014374:	68db      	ldr	r3, [r3, #12]
 8014376:	617b      	str	r3, [r7, #20]
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d1d9      	bne.n	8014332 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d002      	beq.n	801438a <udp_bind+0xd2>
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	e000      	b.n	801438c <udp_bind+0xd4>
 801438a:	2300      	movs	r3, #0
 801438c:	68fa      	ldr	r2, [r7, #12]
 801438e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	88fa      	ldrh	r2, [r7, #6]
 8014394:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014396:	7cfb      	ldrb	r3, [r7, #19]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d106      	bne.n	80143aa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801439c:	4b09      	ldr	r3, [pc, #36]	; (80143c4 <udp_bind+0x10c>)
 801439e:	681a      	ldr	r2, [r3, #0]
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80143a4:	4a07      	ldr	r2, [pc, #28]	; (80143c4 <udp_bind+0x10c>)
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80143aa:	2300      	movs	r3, #0
}
 80143ac:	4618      	mov	r0, r3
 80143ae:	3718      	adds	r7, #24
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}
 80143b4:	0801958c 	.word	0x0801958c
 80143b8:	0801ba88 	.word	0x0801ba88
 80143bc:	0801bd8c 	.word	0x0801bd8c
 80143c0:	0801bb18 	.word	0x0801bb18
 80143c4:	2000cfdc 	.word	0x2000cfdc

080143c8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b086      	sub	sp, #24
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	60f8      	str	r0, [r7, #12]
 80143d0:	60b9      	str	r1, [r7, #8]
 80143d2:	4613      	mov	r3, r2
 80143d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d109      	bne.n	80143f0 <udp_connect+0x28>
 80143dc:	4b2c      	ldr	r3, [pc, #176]	; (8014490 <udp_connect+0xc8>)
 80143de:	f240 4235 	movw	r2, #1077	; 0x435
 80143e2:	492c      	ldr	r1, [pc, #176]	; (8014494 <udp_connect+0xcc>)
 80143e4:	482c      	ldr	r0, [pc, #176]	; (8014498 <udp_connect+0xd0>)
 80143e6:	f001 f875 	bl	80154d4 <iprintf>
 80143ea:	f06f 030f 	mvn.w	r3, #15
 80143ee:	e04b      	b.n	8014488 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d109      	bne.n	801440a <udp_connect+0x42>
 80143f6:	4b26      	ldr	r3, [pc, #152]	; (8014490 <udp_connect+0xc8>)
 80143f8:	f240 4236 	movw	r2, #1078	; 0x436
 80143fc:	4927      	ldr	r1, [pc, #156]	; (801449c <udp_connect+0xd4>)
 80143fe:	4826      	ldr	r0, [pc, #152]	; (8014498 <udp_connect+0xd0>)
 8014400:	f001 f868 	bl	80154d4 <iprintf>
 8014404:	f06f 030f 	mvn.w	r3, #15
 8014408:	e03e      	b.n	8014488 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	8a5b      	ldrh	r3, [r3, #18]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d10f      	bne.n	8014432 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014412:	68f9      	ldr	r1, [r7, #12]
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	8a5b      	ldrh	r3, [r3, #18]
 8014418:	461a      	mov	r2, r3
 801441a:	68f8      	ldr	r0, [r7, #12]
 801441c:	f7ff ff4c 	bl	80142b8 <udp_bind>
 8014420:	4603      	mov	r3, r0
 8014422:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014424:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d002      	beq.n	8014432 <udp_connect+0x6a>
      return err;
 801442c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014430:	e02a      	b.n	8014488 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d002      	beq.n	801443e <udp_connect+0x76>
 8014438:	68bb      	ldr	r3, [r7, #8]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	e000      	b.n	8014440 <udp_connect+0x78>
 801443e:	2300      	movs	r3, #0
 8014440:	68fa      	ldr	r2, [r7, #12]
 8014442:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	88fa      	ldrh	r2, [r7, #6]
 8014448:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	7c1b      	ldrb	r3, [r3, #16]
 801444e:	f043 0304 	orr.w	r3, r3, #4
 8014452:	b2da      	uxtb	r2, r3
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014458:	4b11      	ldr	r3, [pc, #68]	; (80144a0 <udp_connect+0xd8>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	617b      	str	r3, [r7, #20]
 801445e:	e008      	b.n	8014472 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014460:	68fa      	ldr	r2, [r7, #12]
 8014462:	697b      	ldr	r3, [r7, #20]
 8014464:	429a      	cmp	r2, r3
 8014466:	d101      	bne.n	801446c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014468:	2300      	movs	r3, #0
 801446a:	e00d      	b.n	8014488 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	68db      	ldr	r3, [r3, #12]
 8014470:	617b      	str	r3, [r7, #20]
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d1f3      	bne.n	8014460 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014478:	4b09      	ldr	r3, [pc, #36]	; (80144a0 <udp_connect+0xd8>)
 801447a:	681a      	ldr	r2, [r3, #0]
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014480:	4a07      	ldr	r2, [pc, #28]	; (80144a0 <udp_connect+0xd8>)
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014486:	2300      	movs	r3, #0
}
 8014488:	4618      	mov	r0, r3
 801448a:	3718      	adds	r7, #24
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}
 8014490:	0801ba88 	.word	0x0801ba88
 8014494:	0801bda4 	.word	0x0801bda4
 8014498:	0801bb18 	.word	0x0801bb18
 801449c:	0801bdc0 	.word	0x0801bdc0
 80144a0:	2000cfdc 	.word	0x2000cfdc

080144a4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b084      	sub	sp, #16
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	60f8      	str	r0, [r7, #12]
 80144ac:	60b9      	str	r1, [r7, #8]
 80144ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d107      	bne.n	80144c6 <udp_recv+0x22>
 80144b6:	4b08      	ldr	r3, [pc, #32]	; (80144d8 <udp_recv+0x34>)
 80144b8:	f240 428a 	movw	r2, #1162	; 0x48a
 80144bc:	4907      	ldr	r1, [pc, #28]	; (80144dc <udp_recv+0x38>)
 80144be:	4808      	ldr	r0, [pc, #32]	; (80144e0 <udp_recv+0x3c>)
 80144c0:	f001 f808 	bl	80154d4 <iprintf>
 80144c4:	e005      	b.n	80144d2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	68ba      	ldr	r2, [r7, #8]
 80144ca:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	687a      	ldr	r2, [r7, #4]
 80144d0:	61da      	str	r2, [r3, #28]
}
 80144d2:	3710      	adds	r7, #16
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}
 80144d8:	0801ba88 	.word	0x0801ba88
 80144dc:	0801bdf8 	.word	0x0801bdf8
 80144e0:	0801bb18 	.word	0x0801bb18

080144e4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b084      	sub	sp, #16
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d107      	bne.n	8014502 <udp_remove+0x1e>
 80144f2:	4b19      	ldr	r3, [pc, #100]	; (8014558 <udp_remove+0x74>)
 80144f4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80144f8:	4918      	ldr	r1, [pc, #96]	; (801455c <udp_remove+0x78>)
 80144fa:	4819      	ldr	r0, [pc, #100]	; (8014560 <udp_remove+0x7c>)
 80144fc:	f000 ffea 	bl	80154d4 <iprintf>
 8014500:	e026      	b.n	8014550 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014502:	4b18      	ldr	r3, [pc, #96]	; (8014564 <udp_remove+0x80>)
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	687a      	ldr	r2, [r7, #4]
 8014508:	429a      	cmp	r2, r3
 801450a:	d105      	bne.n	8014518 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801450c:	4b15      	ldr	r3, [pc, #84]	; (8014564 <udp_remove+0x80>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	68db      	ldr	r3, [r3, #12]
 8014512:	4a14      	ldr	r2, [pc, #80]	; (8014564 <udp_remove+0x80>)
 8014514:	6013      	str	r3, [r2, #0]
 8014516:	e017      	b.n	8014548 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014518:	4b12      	ldr	r3, [pc, #72]	; (8014564 <udp_remove+0x80>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	60fb      	str	r3, [r7, #12]
 801451e:	e010      	b.n	8014542 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	68db      	ldr	r3, [r3, #12]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d009      	beq.n	801453c <udp_remove+0x58>
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	68db      	ldr	r3, [r3, #12]
 801452c:	687a      	ldr	r2, [r7, #4]
 801452e:	429a      	cmp	r2, r3
 8014530:	d104      	bne.n	801453c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	68da      	ldr	r2, [r3, #12]
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	60da      	str	r2, [r3, #12]
        break;
 801453a:	e005      	b.n	8014548 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	68db      	ldr	r3, [r3, #12]
 8014540:	60fb      	str	r3, [r7, #12]
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d1eb      	bne.n	8014520 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014548:	6879      	ldr	r1, [r7, #4]
 801454a:	2000      	movs	r0, #0
 801454c:	f7f8 fd70 	bl	800d030 <memp_free>
}
 8014550:	3710      	adds	r7, #16
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}
 8014556:	bf00      	nop
 8014558:	0801ba88 	.word	0x0801ba88
 801455c:	0801be10 	.word	0x0801be10
 8014560:	0801bb18 	.word	0x0801bb18
 8014564:	2000cfdc 	.word	0x2000cfdc

08014568 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b082      	sub	sp, #8
 801456c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801456e:	2000      	movs	r0, #0
 8014570:	f7f8 fd0c 	bl	800cf8c <memp_malloc>
 8014574:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d007      	beq.n	801458c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801457c:	2220      	movs	r2, #32
 801457e:	2100      	movs	r1, #0
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f000 fa9a 	bl	8014aba <memset>
    pcb->ttl = UDP_TTL;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	22ff      	movs	r2, #255	; 0xff
 801458a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801458c:	687b      	ldr	r3, [r7, #4]
}
 801458e:	4618      	mov	r0, r3
 8014590:	3708      	adds	r7, #8
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}
	...

08014598 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014598:	b480      	push	{r7}
 801459a:	b085      	sub	sp, #20
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
 80145a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d01e      	beq.n	80145e6 <udp_netif_ip_addr_changed+0x4e>
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d01a      	beq.n	80145e6 <udp_netif_ip_addr_changed+0x4e>
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d017      	beq.n	80145e6 <udp_netif_ip_addr_changed+0x4e>
 80145b6:	683b      	ldr	r3, [r7, #0]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d013      	beq.n	80145e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80145be:	4b0d      	ldr	r3, [pc, #52]	; (80145f4 <udp_netif_ip_addr_changed+0x5c>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	60fb      	str	r3, [r7, #12]
 80145c4:	e00c      	b.n	80145e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	681a      	ldr	r2, [r3, #0]
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	429a      	cmp	r2, r3
 80145d0:	d103      	bne.n	80145da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80145d2:	683b      	ldr	r3, [r7, #0]
 80145d4:	681a      	ldr	r2, [r3, #0]
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	68db      	ldr	r3, [r3, #12]
 80145de:	60fb      	str	r3, [r7, #12]
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d1ef      	bne.n	80145c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80145e6:	bf00      	nop
 80145e8:	3714      	adds	r7, #20
 80145ea:	46bd      	mov	sp, r7
 80145ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f0:	4770      	bx	lr
 80145f2:	bf00      	nop
 80145f4:	2000cfdc 	.word	0x2000cfdc

080145f8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b086      	sub	sp, #24
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
 8014600:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014602:	230e      	movs	r3, #14
 8014604:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	895b      	ldrh	r3, [r3, #10]
 801460a:	2b0e      	cmp	r3, #14
 801460c:	d96e      	bls.n	80146ec <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	7bdb      	ldrb	r3, [r3, #15]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d106      	bne.n	8014624 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014616:	683b      	ldr	r3, [r7, #0]
 8014618:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801461c:	3301      	adds	r3, #1
 801461e:	b2da      	uxtb	r2, r3
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	685b      	ldr	r3, [r3, #4]
 8014628:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801462a:	693b      	ldr	r3, [r7, #16]
 801462c:	7b1a      	ldrb	r2, [r3, #12]
 801462e:	7b5b      	ldrb	r3, [r3, #13]
 8014630:	021b      	lsls	r3, r3, #8
 8014632:	4313      	orrs	r3, r2
 8014634:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014636:	693b      	ldr	r3, [r7, #16]
 8014638:	781b      	ldrb	r3, [r3, #0]
 801463a:	f003 0301 	and.w	r3, r3, #1
 801463e:	2b00      	cmp	r3, #0
 8014640:	d023      	beq.n	801468a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014642:	693b      	ldr	r3, [r7, #16]
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	2b01      	cmp	r3, #1
 8014648:	d10f      	bne.n	801466a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801464a:	693b      	ldr	r3, [r7, #16]
 801464c:	785b      	ldrb	r3, [r3, #1]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d11b      	bne.n	801468a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014652:	693b      	ldr	r3, [r7, #16]
 8014654:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014656:	2b5e      	cmp	r3, #94	; 0x5e
 8014658:	d117      	bne.n	801468a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	7b5b      	ldrb	r3, [r3, #13]
 801465e:	f043 0310 	orr.w	r3, r3, #16
 8014662:	b2da      	uxtb	r2, r3
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	735a      	strb	r2, [r3, #13]
 8014668:	e00f      	b.n	801468a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801466a:	693b      	ldr	r3, [r7, #16]
 801466c:	2206      	movs	r2, #6
 801466e:	4928      	ldr	r1, [pc, #160]	; (8014710 <ethernet_input+0x118>)
 8014670:	4618      	mov	r0, r3
 8014672:	f000 f9ef 	bl	8014a54 <memcmp>
 8014676:	4603      	mov	r3, r0
 8014678:	2b00      	cmp	r3, #0
 801467a:	d106      	bne.n	801468a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	7b5b      	ldrb	r3, [r3, #13]
 8014680:	f043 0308 	orr.w	r3, r3, #8
 8014684:	b2da      	uxtb	r2, r3
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801468a:	89fb      	ldrh	r3, [r7, #14]
 801468c:	2b08      	cmp	r3, #8
 801468e:	d003      	beq.n	8014698 <ethernet_input+0xa0>
 8014690:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014694:	d014      	beq.n	80146c0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014696:	e032      	b.n	80146fe <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801469e:	f003 0308 	and.w	r3, r3, #8
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d024      	beq.n	80146f0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80146a6:	8afb      	ldrh	r3, [r7, #22]
 80146a8:	4619      	mov	r1, r3
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f7f9 fa12 	bl	800dad4 <pbuf_remove_header>
 80146b0:	4603      	mov	r3, r0
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d11e      	bne.n	80146f4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80146b6:	6839      	ldr	r1, [r7, #0]
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	f7f6 fe79 	bl	800b3b0 <ip4_input>
      break;
 80146be:	e013      	b.n	80146e8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80146c0:	683b      	ldr	r3, [r7, #0]
 80146c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80146c6:	f003 0308 	and.w	r3, r3, #8
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d014      	beq.n	80146f8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80146ce:	8afb      	ldrh	r3, [r7, #22]
 80146d0:	4619      	mov	r1, r3
 80146d2:	6878      	ldr	r0, [r7, #4]
 80146d4:	f7f9 f9fe 	bl	800dad4 <pbuf_remove_header>
 80146d8:	4603      	mov	r3, r0
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d10e      	bne.n	80146fc <ethernet_input+0x104>
        etharp_input(p, netif);
 80146de:	6839      	ldr	r1, [r7, #0]
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f7f6 f80b 	bl	800a6fc <etharp_input>
      break;
 80146e6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80146e8:	2300      	movs	r3, #0
 80146ea:	e00c      	b.n	8014706 <ethernet_input+0x10e>
    goto free_and_return;
 80146ec:	bf00      	nop
 80146ee:	e006      	b.n	80146fe <ethernet_input+0x106>
        goto free_and_return;
 80146f0:	bf00      	nop
 80146f2:	e004      	b.n	80146fe <ethernet_input+0x106>
        goto free_and_return;
 80146f4:	bf00      	nop
 80146f6:	e002      	b.n	80146fe <ethernet_input+0x106>
        goto free_and_return;
 80146f8:	bf00      	nop
 80146fa:	e000      	b.n	80146fe <ethernet_input+0x106>
        goto free_and_return;
 80146fc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80146fe:	6878      	ldr	r0, [r7, #4]
 8014700:	f7f9 fa6e 	bl	800dbe0 <pbuf_free>
  return ERR_OK;
 8014704:	2300      	movs	r3, #0
}
 8014706:	4618      	mov	r0, r3
 8014708:	3718      	adds	r7, #24
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}
 801470e:	bf00      	nop
 8014710:	0801be28 	.word	0x0801be28

08014714 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014714:	b580      	push	{r7, lr}
 8014716:	b086      	sub	sp, #24
 8014718:	af00      	add	r7, sp, #0
 801471a:	60f8      	str	r0, [r7, #12]
 801471c:	60b9      	str	r1, [r7, #8]
 801471e:	607a      	str	r2, [r7, #4]
 8014720:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014722:	8c3b      	ldrh	r3, [r7, #32]
 8014724:	4618      	mov	r0, r3
 8014726:	f7f7 fed1 	bl	800c4cc <lwip_htons>
 801472a:	4603      	mov	r3, r0
 801472c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801472e:	210e      	movs	r1, #14
 8014730:	68b8      	ldr	r0, [r7, #8]
 8014732:	f7f9 f9bf 	bl	800dab4 <pbuf_add_header>
 8014736:	4603      	mov	r3, r0
 8014738:	2b00      	cmp	r3, #0
 801473a:	d125      	bne.n	8014788 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801473c:	68bb      	ldr	r3, [r7, #8]
 801473e:	685b      	ldr	r3, [r3, #4]
 8014740:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	8afa      	ldrh	r2, [r7, #22]
 8014746:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014748:	693b      	ldr	r3, [r7, #16]
 801474a:	2206      	movs	r2, #6
 801474c:	6839      	ldr	r1, [r7, #0]
 801474e:	4618      	mov	r0, r3
 8014750:	f000 f98f 	bl	8014a72 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	3306      	adds	r3, #6
 8014758:	2206      	movs	r2, #6
 801475a:	6879      	ldr	r1, [r7, #4]
 801475c:	4618      	mov	r0, r3
 801475e:	f000 f988 	bl	8014a72 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014768:	2b06      	cmp	r3, #6
 801476a:	d006      	beq.n	801477a <ethernet_output+0x66>
 801476c:	4b0a      	ldr	r3, [pc, #40]	; (8014798 <ethernet_output+0x84>)
 801476e:	f240 1233 	movw	r2, #307	; 0x133
 8014772:	490a      	ldr	r1, [pc, #40]	; (801479c <ethernet_output+0x88>)
 8014774:	480a      	ldr	r0, [pc, #40]	; (80147a0 <ethernet_output+0x8c>)
 8014776:	f000 fead 	bl	80154d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	699b      	ldr	r3, [r3, #24]
 801477e:	68b9      	ldr	r1, [r7, #8]
 8014780:	68f8      	ldr	r0, [r7, #12]
 8014782:	4798      	blx	r3
 8014784:	4603      	mov	r3, r0
 8014786:	e002      	b.n	801478e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014788:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801478a:	f06f 0301 	mvn.w	r3, #1
}
 801478e:	4618      	mov	r0, r3
 8014790:	3718      	adds	r7, #24
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}
 8014796:	bf00      	nop
 8014798:	0801be38 	.word	0x0801be38
 801479c:	0801bea8 	.word	0x0801bea8
 80147a0:	0801bedc 	.word	0x0801bedc

080147a4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b084      	sub	sp, #16
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
 80147ac:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80147ae:	683b      	ldr	r3, [r7, #0]
 80147b0:	60bb      	str	r3, [r7, #8]
 80147b2:	2304      	movs	r3, #4
 80147b4:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80147b6:	f107 0308 	add.w	r3, r7, #8
 80147ba:	2100      	movs	r1, #0
 80147bc:	4618      	mov	r0, r3
 80147be:	f7f2 ffd9 	bl	8007774 <osMessageCreate>
 80147c2:	4602      	mov	r2, r0
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d102      	bne.n	80147d6 <sys_mbox_new+0x32>
    return ERR_MEM;
 80147d0:	f04f 33ff 	mov.w	r3, #4294967295
 80147d4:	e000      	b.n	80147d8 <sys_mbox_new+0x34>

  return ERR_OK;
 80147d6:	2300      	movs	r3, #0
}
 80147d8:	4618      	mov	r0, r3
 80147da:	3710      	adds	r7, #16
 80147dc:	46bd      	mov	sp, r7
 80147de:	bd80      	pop	{r7, pc}

080147e0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b084      	sub	sp, #16
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
 80147e8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	6839      	ldr	r1, [r7, #0]
 80147f0:	2200      	movs	r2, #0
 80147f2:	4618      	mov	r0, r3
 80147f4:	f7f2 ffd0 	bl	8007798 <osMessagePut>
 80147f8:	4603      	mov	r3, r0
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d102      	bne.n	8014804 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80147fe:	2300      	movs	r3, #0
 8014800:	73fb      	strb	r3, [r7, #15]
 8014802:	e001      	b.n	8014808 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014804:	23ff      	movs	r3, #255	; 0xff
 8014806:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014808:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801480c:	4618      	mov	r0, r3
 801480e:	3710      	adds	r7, #16
 8014810:	46bd      	mov	sp, r7
 8014812:	bd80      	pop	{r7, pc}

08014814 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b08c      	sub	sp, #48	; 0x30
 8014818:	af00      	add	r7, sp, #0
 801481a:	61f8      	str	r0, [r7, #28]
 801481c:	61b9      	str	r1, [r7, #24]
 801481e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014820:	f7f2 fe19 	bl	8007456 <osKernelSysTick>
 8014824:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014826:	697b      	ldr	r3, [r7, #20]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d017      	beq.n	801485c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801482c:	69fb      	ldr	r3, [r7, #28]
 801482e:	6819      	ldr	r1, [r3, #0]
 8014830:	f107 0320 	add.w	r3, r7, #32
 8014834:	697a      	ldr	r2, [r7, #20]
 8014836:	4618      	mov	r0, r3
 8014838:	f7f2 ffee 	bl	8007818 <osMessageGet>

    if(event.status == osEventMessage)
 801483c:	6a3b      	ldr	r3, [r7, #32]
 801483e:	2b10      	cmp	r3, #16
 8014840:	d109      	bne.n	8014856 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8014842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014844:	461a      	mov	r2, r3
 8014846:	69bb      	ldr	r3, [r7, #24]
 8014848:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801484a:	f7f2 fe04 	bl	8007456 <osKernelSysTick>
 801484e:	4602      	mov	r2, r0
 8014850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014852:	1ad3      	subs	r3, r2, r3
 8014854:	e019      	b.n	801488a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014856:	f04f 33ff 	mov.w	r3, #4294967295
 801485a:	e016      	b.n	801488a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801485c:	69fb      	ldr	r3, [r7, #28]
 801485e:	6819      	ldr	r1, [r3, #0]
 8014860:	463b      	mov	r3, r7
 8014862:	f04f 32ff 	mov.w	r2, #4294967295
 8014866:	4618      	mov	r0, r3
 8014868:	f7f2 ffd6 	bl	8007818 <osMessageGet>
 801486c:	f107 0320 	add.w	r3, r7, #32
 8014870:	463a      	mov	r2, r7
 8014872:	ca07      	ldmia	r2, {r0, r1, r2}
 8014874:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801487a:	461a      	mov	r2, r3
 801487c:	69bb      	ldr	r3, [r7, #24]
 801487e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014880:	f7f2 fde9 	bl	8007456 <osKernelSysTick>
 8014884:	4602      	mov	r2, r0
 8014886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014888:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801488a:	4618      	mov	r0, r3
 801488c:	3730      	adds	r7, #48	; 0x30
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}

08014892 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014892:	b480      	push	{r7}
 8014894:	b083      	sub	sp, #12
 8014896:	af00      	add	r7, sp, #0
 8014898:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d101      	bne.n	80148a6 <sys_mbox_valid+0x14>
    return 0;
 80148a2:	2300      	movs	r3, #0
 80148a4:	e000      	b.n	80148a8 <sys_mbox_valid+0x16>
  else
    return 1;
 80148a6:	2301      	movs	r3, #1
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	370c      	adds	r7, #12
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr

080148b4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80148b8:	4803      	ldr	r0, [pc, #12]	; (80148c8 <sys_init+0x14>)
 80148ba:	f7f2 fe23 	bl	8007504 <osMutexCreate>
 80148be:	4602      	mov	r2, r0
 80148c0:	4b02      	ldr	r3, [pc, #8]	; (80148cc <sys_init+0x18>)
 80148c2:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80148c4:	bf00      	nop
 80148c6:	bd80      	pop	{r7, pc}
 80148c8:	0801bf04 	.word	0x0801bf04
 80148cc:	2000cfe4 	.word	0x2000cfe4

080148d0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b084      	sub	sp, #16
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80148d8:	2300      	movs	r3, #0
 80148da:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80148dc:	f107 030c 	add.w	r3, r7, #12
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7f2 fe0f 	bl	8007504 <osMutexCreate>
 80148e6:	4602      	mov	r2, r0
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d102      	bne.n	80148fa <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80148f4:	f04f 33ff 	mov.w	r3, #4294967295
 80148f8:	e000      	b.n	80148fc <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80148fa:	2300      	movs	r3, #0
}
 80148fc:	4618      	mov	r0, r3
 80148fe:	3710      	adds	r7, #16
 8014900:	46bd      	mov	sp, r7
 8014902:	bd80      	pop	{r7, pc}

08014904 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b082      	sub	sp, #8
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	f04f 31ff 	mov.w	r1, #4294967295
 8014914:	4618      	mov	r0, r3
 8014916:	f7f2 fe01 	bl	800751c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801491a:	bf00      	nop
 801491c:	3708      	adds	r7, #8
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}

08014922 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014922:	b580      	push	{r7, lr}
 8014924:	b082      	sub	sp, #8
 8014926:	af00      	add	r7, sp, #0
 8014928:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	4618      	mov	r0, r3
 8014930:	f7f2 fe42 	bl	80075b8 <osMutexRelease>
}
 8014934:	bf00      	nop
 8014936:	3708      	adds	r7, #8
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}

0801493c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b08a      	sub	sp, #40	; 0x28
 8014940:	af00      	add	r7, sp, #0
 8014942:	60f8      	str	r0, [r7, #12]
 8014944:	60b9      	str	r1, [r7, #8]
 8014946:	607a      	str	r2, [r7, #4]
 8014948:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	617b      	str	r3, [r7, #20]
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	61bb      	str	r3, [r7, #24]
 8014952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014954:	b21b      	sxth	r3, r3
 8014956:	83bb      	strh	r3, [r7, #28]
 8014958:	2300      	movs	r3, #0
 801495a:	623b      	str	r3, [r7, #32]
 801495c:	683b      	ldr	r3, [r7, #0]
 801495e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014960:	f107 0314 	add.w	r3, r7, #20
 8014964:	6879      	ldr	r1, [r7, #4]
 8014966:	4618      	mov	r0, r3
 8014968:	f7f2 fd85 	bl	8007476 <osThreadCreate>
 801496c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801496e:	4618      	mov	r0, r3
 8014970:	3728      	adds	r7, #40	; 0x28
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}
	...

08014978 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014978:	b580      	push	{r7, lr}
 801497a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801497c:	4b04      	ldr	r3, [pc, #16]	; (8014990 <sys_arch_protect+0x18>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	f04f 31ff 	mov.w	r1, #4294967295
 8014984:	4618      	mov	r0, r3
 8014986:	f7f2 fdc9 	bl	800751c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801498a:	2301      	movs	r3, #1
}
 801498c:	4618      	mov	r0, r3
 801498e:	bd80      	pop	{r7, pc}
 8014990:	2000cfe4 	.word	0x2000cfe4

08014994 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b082      	sub	sp, #8
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801499c:	4b04      	ldr	r3, [pc, #16]	; (80149b0 <sys_arch_unprotect+0x1c>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	4618      	mov	r0, r3
 80149a2:	f7f2 fe09 	bl	80075b8 <osMutexRelease>
}
 80149a6:	bf00      	nop
 80149a8:	3708      	adds	r7, #8
 80149aa:	46bd      	mov	sp, r7
 80149ac:	bd80      	pop	{r7, pc}
 80149ae:	bf00      	nop
 80149b0:	2000cfe4 	.word	0x2000cfe4

080149b4 <atof>:
 80149b4:	2100      	movs	r1, #0
 80149b6:	f001 bc2b 	b.w	8016210 <strtod>
	...

080149bc <__errno>:
 80149bc:	4b01      	ldr	r3, [pc, #4]	; (80149c4 <__errno+0x8>)
 80149be:	6818      	ldr	r0, [r3, #0]
 80149c0:	4770      	bx	lr
 80149c2:	bf00      	nop
 80149c4:	2000003c 	.word	0x2000003c

080149c8 <__libc_init_array>:
 80149c8:	b570      	push	{r4, r5, r6, lr}
 80149ca:	4e0d      	ldr	r6, [pc, #52]	; (8014a00 <__libc_init_array+0x38>)
 80149cc:	4c0d      	ldr	r4, [pc, #52]	; (8014a04 <__libc_init_array+0x3c>)
 80149ce:	1ba4      	subs	r4, r4, r6
 80149d0:	10a4      	asrs	r4, r4, #2
 80149d2:	2500      	movs	r5, #0
 80149d4:	42a5      	cmp	r5, r4
 80149d6:	d109      	bne.n	80149ec <__libc_init_array+0x24>
 80149d8:	4e0b      	ldr	r6, [pc, #44]	; (8014a08 <__libc_init_array+0x40>)
 80149da:	4c0c      	ldr	r4, [pc, #48]	; (8014a0c <__libc_init_array+0x44>)
 80149dc:	f004 f824 	bl	8018a28 <_init>
 80149e0:	1ba4      	subs	r4, r4, r6
 80149e2:	10a4      	asrs	r4, r4, #2
 80149e4:	2500      	movs	r5, #0
 80149e6:	42a5      	cmp	r5, r4
 80149e8:	d105      	bne.n	80149f6 <__libc_init_array+0x2e>
 80149ea:	bd70      	pop	{r4, r5, r6, pc}
 80149ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80149f0:	4798      	blx	r3
 80149f2:	3501      	adds	r5, #1
 80149f4:	e7ee      	b.n	80149d4 <__libc_init_array+0xc>
 80149f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80149fa:	4798      	blx	r3
 80149fc:	3501      	adds	r5, #1
 80149fe:	e7f2      	b.n	80149e6 <__libc_init_array+0x1e>
 8014a00:	0801c228 	.word	0x0801c228
 8014a04:	0801c228 	.word	0x0801c228
 8014a08:	0801c228 	.word	0x0801c228
 8014a0c:	0801c22c 	.word	0x0801c22c

08014a10 <malloc>:
 8014a10:	4b02      	ldr	r3, [pc, #8]	; (8014a1c <malloc+0xc>)
 8014a12:	4601      	mov	r1, r0
 8014a14:	6818      	ldr	r0, [r3, #0]
 8014a16:	f000 b8a7 	b.w	8014b68 <_malloc_r>
 8014a1a:	bf00      	nop
 8014a1c:	2000003c 	.word	0x2000003c

08014a20 <free>:
 8014a20:	4b02      	ldr	r3, [pc, #8]	; (8014a2c <free+0xc>)
 8014a22:	4601      	mov	r1, r0
 8014a24:	6818      	ldr	r0, [r3, #0]
 8014a26:	f000 b851 	b.w	8014acc <_free_r>
 8014a2a:	bf00      	nop
 8014a2c:	2000003c 	.word	0x2000003c

08014a30 <__ascii_mbtowc>:
 8014a30:	b082      	sub	sp, #8
 8014a32:	b901      	cbnz	r1, 8014a36 <__ascii_mbtowc+0x6>
 8014a34:	a901      	add	r1, sp, #4
 8014a36:	b142      	cbz	r2, 8014a4a <__ascii_mbtowc+0x1a>
 8014a38:	b14b      	cbz	r3, 8014a4e <__ascii_mbtowc+0x1e>
 8014a3a:	7813      	ldrb	r3, [r2, #0]
 8014a3c:	600b      	str	r3, [r1, #0]
 8014a3e:	7812      	ldrb	r2, [r2, #0]
 8014a40:	1c10      	adds	r0, r2, #0
 8014a42:	bf18      	it	ne
 8014a44:	2001      	movne	r0, #1
 8014a46:	b002      	add	sp, #8
 8014a48:	4770      	bx	lr
 8014a4a:	4610      	mov	r0, r2
 8014a4c:	e7fb      	b.n	8014a46 <__ascii_mbtowc+0x16>
 8014a4e:	f06f 0001 	mvn.w	r0, #1
 8014a52:	e7f8      	b.n	8014a46 <__ascii_mbtowc+0x16>

08014a54 <memcmp>:
 8014a54:	b530      	push	{r4, r5, lr}
 8014a56:	2400      	movs	r4, #0
 8014a58:	42a2      	cmp	r2, r4
 8014a5a:	d101      	bne.n	8014a60 <memcmp+0xc>
 8014a5c:	2000      	movs	r0, #0
 8014a5e:	e007      	b.n	8014a70 <memcmp+0x1c>
 8014a60:	5d03      	ldrb	r3, [r0, r4]
 8014a62:	3401      	adds	r4, #1
 8014a64:	190d      	adds	r5, r1, r4
 8014a66:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8014a6a:	42ab      	cmp	r3, r5
 8014a6c:	d0f4      	beq.n	8014a58 <memcmp+0x4>
 8014a6e:	1b58      	subs	r0, r3, r5
 8014a70:	bd30      	pop	{r4, r5, pc}

08014a72 <memcpy>:
 8014a72:	b510      	push	{r4, lr}
 8014a74:	1e43      	subs	r3, r0, #1
 8014a76:	440a      	add	r2, r1
 8014a78:	4291      	cmp	r1, r2
 8014a7a:	d100      	bne.n	8014a7e <memcpy+0xc>
 8014a7c:	bd10      	pop	{r4, pc}
 8014a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a86:	e7f7      	b.n	8014a78 <memcpy+0x6>

08014a88 <memmove>:
 8014a88:	4288      	cmp	r0, r1
 8014a8a:	b510      	push	{r4, lr}
 8014a8c:	eb01 0302 	add.w	r3, r1, r2
 8014a90:	d807      	bhi.n	8014aa2 <memmove+0x1a>
 8014a92:	1e42      	subs	r2, r0, #1
 8014a94:	4299      	cmp	r1, r3
 8014a96:	d00a      	beq.n	8014aae <memmove+0x26>
 8014a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a9c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014aa0:	e7f8      	b.n	8014a94 <memmove+0xc>
 8014aa2:	4283      	cmp	r3, r0
 8014aa4:	d9f5      	bls.n	8014a92 <memmove+0xa>
 8014aa6:	1881      	adds	r1, r0, r2
 8014aa8:	1ad2      	subs	r2, r2, r3
 8014aaa:	42d3      	cmn	r3, r2
 8014aac:	d100      	bne.n	8014ab0 <memmove+0x28>
 8014aae:	bd10      	pop	{r4, pc}
 8014ab0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ab4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014ab8:	e7f7      	b.n	8014aaa <memmove+0x22>

08014aba <memset>:
 8014aba:	4402      	add	r2, r0
 8014abc:	4603      	mov	r3, r0
 8014abe:	4293      	cmp	r3, r2
 8014ac0:	d100      	bne.n	8014ac4 <memset+0xa>
 8014ac2:	4770      	bx	lr
 8014ac4:	f803 1b01 	strb.w	r1, [r3], #1
 8014ac8:	e7f9      	b.n	8014abe <memset+0x4>
	...

08014acc <_free_r>:
 8014acc:	b538      	push	{r3, r4, r5, lr}
 8014ace:	4605      	mov	r5, r0
 8014ad0:	2900      	cmp	r1, #0
 8014ad2:	d045      	beq.n	8014b60 <_free_r+0x94>
 8014ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ad8:	1f0c      	subs	r4, r1, #4
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	bfb8      	it	lt
 8014ade:	18e4      	addlt	r4, r4, r3
 8014ae0:	f002 fe52 	bl	8017788 <__malloc_lock>
 8014ae4:	4a1f      	ldr	r2, [pc, #124]	; (8014b64 <_free_r+0x98>)
 8014ae6:	6813      	ldr	r3, [r2, #0]
 8014ae8:	4610      	mov	r0, r2
 8014aea:	b933      	cbnz	r3, 8014afa <_free_r+0x2e>
 8014aec:	6063      	str	r3, [r4, #4]
 8014aee:	6014      	str	r4, [r2, #0]
 8014af0:	4628      	mov	r0, r5
 8014af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014af6:	f002 be48 	b.w	801778a <__malloc_unlock>
 8014afa:	42a3      	cmp	r3, r4
 8014afc:	d90c      	bls.n	8014b18 <_free_r+0x4c>
 8014afe:	6821      	ldr	r1, [r4, #0]
 8014b00:	1862      	adds	r2, r4, r1
 8014b02:	4293      	cmp	r3, r2
 8014b04:	bf04      	itt	eq
 8014b06:	681a      	ldreq	r2, [r3, #0]
 8014b08:	685b      	ldreq	r3, [r3, #4]
 8014b0a:	6063      	str	r3, [r4, #4]
 8014b0c:	bf04      	itt	eq
 8014b0e:	1852      	addeq	r2, r2, r1
 8014b10:	6022      	streq	r2, [r4, #0]
 8014b12:	6004      	str	r4, [r0, #0]
 8014b14:	e7ec      	b.n	8014af0 <_free_r+0x24>
 8014b16:	4613      	mov	r3, r2
 8014b18:	685a      	ldr	r2, [r3, #4]
 8014b1a:	b10a      	cbz	r2, 8014b20 <_free_r+0x54>
 8014b1c:	42a2      	cmp	r2, r4
 8014b1e:	d9fa      	bls.n	8014b16 <_free_r+0x4a>
 8014b20:	6819      	ldr	r1, [r3, #0]
 8014b22:	1858      	adds	r0, r3, r1
 8014b24:	42a0      	cmp	r0, r4
 8014b26:	d10b      	bne.n	8014b40 <_free_r+0x74>
 8014b28:	6820      	ldr	r0, [r4, #0]
 8014b2a:	4401      	add	r1, r0
 8014b2c:	1858      	adds	r0, r3, r1
 8014b2e:	4282      	cmp	r2, r0
 8014b30:	6019      	str	r1, [r3, #0]
 8014b32:	d1dd      	bne.n	8014af0 <_free_r+0x24>
 8014b34:	6810      	ldr	r0, [r2, #0]
 8014b36:	6852      	ldr	r2, [r2, #4]
 8014b38:	605a      	str	r2, [r3, #4]
 8014b3a:	4401      	add	r1, r0
 8014b3c:	6019      	str	r1, [r3, #0]
 8014b3e:	e7d7      	b.n	8014af0 <_free_r+0x24>
 8014b40:	d902      	bls.n	8014b48 <_free_r+0x7c>
 8014b42:	230c      	movs	r3, #12
 8014b44:	602b      	str	r3, [r5, #0]
 8014b46:	e7d3      	b.n	8014af0 <_free_r+0x24>
 8014b48:	6820      	ldr	r0, [r4, #0]
 8014b4a:	1821      	adds	r1, r4, r0
 8014b4c:	428a      	cmp	r2, r1
 8014b4e:	bf04      	itt	eq
 8014b50:	6811      	ldreq	r1, [r2, #0]
 8014b52:	6852      	ldreq	r2, [r2, #4]
 8014b54:	6062      	str	r2, [r4, #4]
 8014b56:	bf04      	itt	eq
 8014b58:	1809      	addeq	r1, r1, r0
 8014b5a:	6021      	streq	r1, [r4, #0]
 8014b5c:	605c      	str	r4, [r3, #4]
 8014b5e:	e7c7      	b.n	8014af0 <_free_r+0x24>
 8014b60:	bd38      	pop	{r3, r4, r5, pc}
 8014b62:	bf00      	nop
 8014b64:	2000690c 	.word	0x2000690c

08014b68 <_malloc_r>:
 8014b68:	b570      	push	{r4, r5, r6, lr}
 8014b6a:	1ccd      	adds	r5, r1, #3
 8014b6c:	f025 0503 	bic.w	r5, r5, #3
 8014b70:	3508      	adds	r5, #8
 8014b72:	2d0c      	cmp	r5, #12
 8014b74:	bf38      	it	cc
 8014b76:	250c      	movcc	r5, #12
 8014b78:	2d00      	cmp	r5, #0
 8014b7a:	4606      	mov	r6, r0
 8014b7c:	db01      	blt.n	8014b82 <_malloc_r+0x1a>
 8014b7e:	42a9      	cmp	r1, r5
 8014b80:	d903      	bls.n	8014b8a <_malloc_r+0x22>
 8014b82:	230c      	movs	r3, #12
 8014b84:	6033      	str	r3, [r6, #0]
 8014b86:	2000      	movs	r0, #0
 8014b88:	bd70      	pop	{r4, r5, r6, pc}
 8014b8a:	f002 fdfd 	bl	8017788 <__malloc_lock>
 8014b8e:	4a21      	ldr	r2, [pc, #132]	; (8014c14 <_malloc_r+0xac>)
 8014b90:	6814      	ldr	r4, [r2, #0]
 8014b92:	4621      	mov	r1, r4
 8014b94:	b991      	cbnz	r1, 8014bbc <_malloc_r+0x54>
 8014b96:	4c20      	ldr	r4, [pc, #128]	; (8014c18 <_malloc_r+0xb0>)
 8014b98:	6823      	ldr	r3, [r4, #0]
 8014b9a:	b91b      	cbnz	r3, 8014ba4 <_malloc_r+0x3c>
 8014b9c:	4630      	mov	r0, r6
 8014b9e:	f000 fce5 	bl	801556c <_sbrk_r>
 8014ba2:	6020      	str	r0, [r4, #0]
 8014ba4:	4629      	mov	r1, r5
 8014ba6:	4630      	mov	r0, r6
 8014ba8:	f000 fce0 	bl	801556c <_sbrk_r>
 8014bac:	1c43      	adds	r3, r0, #1
 8014bae:	d124      	bne.n	8014bfa <_malloc_r+0x92>
 8014bb0:	230c      	movs	r3, #12
 8014bb2:	6033      	str	r3, [r6, #0]
 8014bb4:	4630      	mov	r0, r6
 8014bb6:	f002 fde8 	bl	801778a <__malloc_unlock>
 8014bba:	e7e4      	b.n	8014b86 <_malloc_r+0x1e>
 8014bbc:	680b      	ldr	r3, [r1, #0]
 8014bbe:	1b5b      	subs	r3, r3, r5
 8014bc0:	d418      	bmi.n	8014bf4 <_malloc_r+0x8c>
 8014bc2:	2b0b      	cmp	r3, #11
 8014bc4:	d90f      	bls.n	8014be6 <_malloc_r+0x7e>
 8014bc6:	600b      	str	r3, [r1, #0]
 8014bc8:	50cd      	str	r5, [r1, r3]
 8014bca:	18cc      	adds	r4, r1, r3
 8014bcc:	4630      	mov	r0, r6
 8014bce:	f002 fddc 	bl	801778a <__malloc_unlock>
 8014bd2:	f104 000b 	add.w	r0, r4, #11
 8014bd6:	1d23      	adds	r3, r4, #4
 8014bd8:	f020 0007 	bic.w	r0, r0, #7
 8014bdc:	1ac3      	subs	r3, r0, r3
 8014bde:	d0d3      	beq.n	8014b88 <_malloc_r+0x20>
 8014be0:	425a      	negs	r2, r3
 8014be2:	50e2      	str	r2, [r4, r3]
 8014be4:	e7d0      	b.n	8014b88 <_malloc_r+0x20>
 8014be6:	428c      	cmp	r4, r1
 8014be8:	684b      	ldr	r3, [r1, #4]
 8014bea:	bf16      	itet	ne
 8014bec:	6063      	strne	r3, [r4, #4]
 8014bee:	6013      	streq	r3, [r2, #0]
 8014bf0:	460c      	movne	r4, r1
 8014bf2:	e7eb      	b.n	8014bcc <_malloc_r+0x64>
 8014bf4:	460c      	mov	r4, r1
 8014bf6:	6849      	ldr	r1, [r1, #4]
 8014bf8:	e7cc      	b.n	8014b94 <_malloc_r+0x2c>
 8014bfa:	1cc4      	adds	r4, r0, #3
 8014bfc:	f024 0403 	bic.w	r4, r4, #3
 8014c00:	42a0      	cmp	r0, r4
 8014c02:	d005      	beq.n	8014c10 <_malloc_r+0xa8>
 8014c04:	1a21      	subs	r1, r4, r0
 8014c06:	4630      	mov	r0, r6
 8014c08:	f000 fcb0 	bl	801556c <_sbrk_r>
 8014c0c:	3001      	adds	r0, #1
 8014c0e:	d0cf      	beq.n	8014bb0 <_malloc_r+0x48>
 8014c10:	6025      	str	r5, [r4, #0]
 8014c12:	e7db      	b.n	8014bcc <_malloc_r+0x64>
 8014c14:	2000690c 	.word	0x2000690c
 8014c18:	20006910 	.word	0x20006910

08014c1c <__cvt>:
 8014c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c20:	ec55 4b10 	vmov	r4, r5, d0
 8014c24:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014c26:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014c2a:	2d00      	cmp	r5, #0
 8014c2c:	460e      	mov	r6, r1
 8014c2e:	4691      	mov	r9, r2
 8014c30:	4619      	mov	r1, r3
 8014c32:	bfb8      	it	lt
 8014c34:	4622      	movlt	r2, r4
 8014c36:	462b      	mov	r3, r5
 8014c38:	f027 0720 	bic.w	r7, r7, #32
 8014c3c:	bfbb      	ittet	lt
 8014c3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014c42:	461d      	movlt	r5, r3
 8014c44:	2300      	movge	r3, #0
 8014c46:	232d      	movlt	r3, #45	; 0x2d
 8014c48:	bfb8      	it	lt
 8014c4a:	4614      	movlt	r4, r2
 8014c4c:	2f46      	cmp	r7, #70	; 0x46
 8014c4e:	700b      	strb	r3, [r1, #0]
 8014c50:	d004      	beq.n	8014c5c <__cvt+0x40>
 8014c52:	2f45      	cmp	r7, #69	; 0x45
 8014c54:	d100      	bne.n	8014c58 <__cvt+0x3c>
 8014c56:	3601      	adds	r6, #1
 8014c58:	2102      	movs	r1, #2
 8014c5a:	e000      	b.n	8014c5e <__cvt+0x42>
 8014c5c:	2103      	movs	r1, #3
 8014c5e:	ab03      	add	r3, sp, #12
 8014c60:	9301      	str	r3, [sp, #4]
 8014c62:	ab02      	add	r3, sp, #8
 8014c64:	9300      	str	r3, [sp, #0]
 8014c66:	4632      	mov	r2, r6
 8014c68:	4653      	mov	r3, sl
 8014c6a:	ec45 4b10 	vmov	d0, r4, r5
 8014c6e:	f001 fbd3 	bl	8016418 <_dtoa_r>
 8014c72:	2f47      	cmp	r7, #71	; 0x47
 8014c74:	4680      	mov	r8, r0
 8014c76:	d102      	bne.n	8014c7e <__cvt+0x62>
 8014c78:	f019 0f01 	tst.w	r9, #1
 8014c7c:	d026      	beq.n	8014ccc <__cvt+0xb0>
 8014c7e:	2f46      	cmp	r7, #70	; 0x46
 8014c80:	eb08 0906 	add.w	r9, r8, r6
 8014c84:	d111      	bne.n	8014caa <__cvt+0x8e>
 8014c86:	f898 3000 	ldrb.w	r3, [r8]
 8014c8a:	2b30      	cmp	r3, #48	; 0x30
 8014c8c:	d10a      	bne.n	8014ca4 <__cvt+0x88>
 8014c8e:	2200      	movs	r2, #0
 8014c90:	2300      	movs	r3, #0
 8014c92:	4620      	mov	r0, r4
 8014c94:	4629      	mov	r1, r5
 8014c96:	f7eb ff37 	bl	8000b08 <__aeabi_dcmpeq>
 8014c9a:	b918      	cbnz	r0, 8014ca4 <__cvt+0x88>
 8014c9c:	f1c6 0601 	rsb	r6, r6, #1
 8014ca0:	f8ca 6000 	str.w	r6, [sl]
 8014ca4:	f8da 3000 	ldr.w	r3, [sl]
 8014ca8:	4499      	add	r9, r3
 8014caa:	2200      	movs	r2, #0
 8014cac:	2300      	movs	r3, #0
 8014cae:	4620      	mov	r0, r4
 8014cb0:	4629      	mov	r1, r5
 8014cb2:	f7eb ff29 	bl	8000b08 <__aeabi_dcmpeq>
 8014cb6:	b938      	cbnz	r0, 8014cc8 <__cvt+0xac>
 8014cb8:	2230      	movs	r2, #48	; 0x30
 8014cba:	9b03      	ldr	r3, [sp, #12]
 8014cbc:	454b      	cmp	r3, r9
 8014cbe:	d205      	bcs.n	8014ccc <__cvt+0xb0>
 8014cc0:	1c59      	adds	r1, r3, #1
 8014cc2:	9103      	str	r1, [sp, #12]
 8014cc4:	701a      	strb	r2, [r3, #0]
 8014cc6:	e7f8      	b.n	8014cba <__cvt+0x9e>
 8014cc8:	f8cd 900c 	str.w	r9, [sp, #12]
 8014ccc:	9b03      	ldr	r3, [sp, #12]
 8014cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014cd0:	eba3 0308 	sub.w	r3, r3, r8
 8014cd4:	4640      	mov	r0, r8
 8014cd6:	6013      	str	r3, [r2, #0]
 8014cd8:	b004      	add	sp, #16
 8014cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014cde <__exponent>:
 8014cde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ce0:	2900      	cmp	r1, #0
 8014ce2:	4604      	mov	r4, r0
 8014ce4:	bfba      	itte	lt
 8014ce6:	4249      	neglt	r1, r1
 8014ce8:	232d      	movlt	r3, #45	; 0x2d
 8014cea:	232b      	movge	r3, #43	; 0x2b
 8014cec:	2909      	cmp	r1, #9
 8014cee:	f804 2b02 	strb.w	r2, [r4], #2
 8014cf2:	7043      	strb	r3, [r0, #1]
 8014cf4:	dd20      	ble.n	8014d38 <__exponent+0x5a>
 8014cf6:	f10d 0307 	add.w	r3, sp, #7
 8014cfa:	461f      	mov	r7, r3
 8014cfc:	260a      	movs	r6, #10
 8014cfe:	fb91 f5f6 	sdiv	r5, r1, r6
 8014d02:	fb06 1115 	mls	r1, r6, r5, r1
 8014d06:	3130      	adds	r1, #48	; 0x30
 8014d08:	2d09      	cmp	r5, #9
 8014d0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014d0e:	f103 32ff 	add.w	r2, r3, #4294967295
 8014d12:	4629      	mov	r1, r5
 8014d14:	dc09      	bgt.n	8014d2a <__exponent+0x4c>
 8014d16:	3130      	adds	r1, #48	; 0x30
 8014d18:	3b02      	subs	r3, #2
 8014d1a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014d1e:	42bb      	cmp	r3, r7
 8014d20:	4622      	mov	r2, r4
 8014d22:	d304      	bcc.n	8014d2e <__exponent+0x50>
 8014d24:	1a10      	subs	r0, r2, r0
 8014d26:	b003      	add	sp, #12
 8014d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d2a:	4613      	mov	r3, r2
 8014d2c:	e7e7      	b.n	8014cfe <__exponent+0x20>
 8014d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d32:	f804 2b01 	strb.w	r2, [r4], #1
 8014d36:	e7f2      	b.n	8014d1e <__exponent+0x40>
 8014d38:	2330      	movs	r3, #48	; 0x30
 8014d3a:	4419      	add	r1, r3
 8014d3c:	7083      	strb	r3, [r0, #2]
 8014d3e:	1d02      	adds	r2, r0, #4
 8014d40:	70c1      	strb	r1, [r0, #3]
 8014d42:	e7ef      	b.n	8014d24 <__exponent+0x46>

08014d44 <_printf_float>:
 8014d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d48:	b08d      	sub	sp, #52	; 0x34
 8014d4a:	460c      	mov	r4, r1
 8014d4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014d50:	4616      	mov	r6, r2
 8014d52:	461f      	mov	r7, r3
 8014d54:	4605      	mov	r5, r0
 8014d56:	f002 fd09 	bl	801776c <_localeconv_r>
 8014d5a:	6803      	ldr	r3, [r0, #0]
 8014d5c:	9304      	str	r3, [sp, #16]
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7eb fa56 	bl	8000210 <strlen>
 8014d64:	2300      	movs	r3, #0
 8014d66:	930a      	str	r3, [sp, #40]	; 0x28
 8014d68:	f8d8 3000 	ldr.w	r3, [r8]
 8014d6c:	9005      	str	r0, [sp, #20]
 8014d6e:	3307      	adds	r3, #7
 8014d70:	f023 0307 	bic.w	r3, r3, #7
 8014d74:	f103 0208 	add.w	r2, r3, #8
 8014d78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014d7c:	f8d4 b000 	ldr.w	fp, [r4]
 8014d80:	f8c8 2000 	str.w	r2, [r8]
 8014d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d88:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014d8c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014d90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014d94:	9307      	str	r3, [sp, #28]
 8014d96:	f8cd 8018 	str.w	r8, [sp, #24]
 8014d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8014d9e:	4ba7      	ldr	r3, [pc, #668]	; (801503c <_printf_float+0x2f8>)
 8014da0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014da4:	f7eb fee2 	bl	8000b6c <__aeabi_dcmpun>
 8014da8:	bb70      	cbnz	r0, 8014e08 <_printf_float+0xc4>
 8014daa:	f04f 32ff 	mov.w	r2, #4294967295
 8014dae:	4ba3      	ldr	r3, [pc, #652]	; (801503c <_printf_float+0x2f8>)
 8014db0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014db4:	f7eb febc 	bl	8000b30 <__aeabi_dcmple>
 8014db8:	bb30      	cbnz	r0, 8014e08 <_printf_float+0xc4>
 8014dba:	2200      	movs	r2, #0
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	4640      	mov	r0, r8
 8014dc0:	4649      	mov	r1, r9
 8014dc2:	f7eb feab 	bl	8000b1c <__aeabi_dcmplt>
 8014dc6:	b110      	cbz	r0, 8014dce <_printf_float+0x8a>
 8014dc8:	232d      	movs	r3, #45	; 0x2d
 8014dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014dce:	4a9c      	ldr	r2, [pc, #624]	; (8015040 <_printf_float+0x2fc>)
 8014dd0:	4b9c      	ldr	r3, [pc, #624]	; (8015044 <_printf_float+0x300>)
 8014dd2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014dd6:	bf8c      	ite	hi
 8014dd8:	4690      	movhi	r8, r2
 8014dda:	4698      	movls	r8, r3
 8014ddc:	2303      	movs	r3, #3
 8014dde:	f02b 0204 	bic.w	r2, fp, #4
 8014de2:	6123      	str	r3, [r4, #16]
 8014de4:	6022      	str	r2, [r4, #0]
 8014de6:	f04f 0900 	mov.w	r9, #0
 8014dea:	9700      	str	r7, [sp, #0]
 8014dec:	4633      	mov	r3, r6
 8014dee:	aa0b      	add	r2, sp, #44	; 0x2c
 8014df0:	4621      	mov	r1, r4
 8014df2:	4628      	mov	r0, r5
 8014df4:	f000 f9e6 	bl	80151c4 <_printf_common>
 8014df8:	3001      	adds	r0, #1
 8014dfa:	f040 808d 	bne.w	8014f18 <_printf_float+0x1d4>
 8014dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8014e02:	b00d      	add	sp, #52	; 0x34
 8014e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e08:	4642      	mov	r2, r8
 8014e0a:	464b      	mov	r3, r9
 8014e0c:	4640      	mov	r0, r8
 8014e0e:	4649      	mov	r1, r9
 8014e10:	f7eb feac 	bl	8000b6c <__aeabi_dcmpun>
 8014e14:	b110      	cbz	r0, 8014e1c <_printf_float+0xd8>
 8014e16:	4a8c      	ldr	r2, [pc, #560]	; (8015048 <_printf_float+0x304>)
 8014e18:	4b8c      	ldr	r3, [pc, #560]	; (801504c <_printf_float+0x308>)
 8014e1a:	e7da      	b.n	8014dd2 <_printf_float+0x8e>
 8014e1c:	6861      	ldr	r1, [r4, #4]
 8014e1e:	1c4b      	adds	r3, r1, #1
 8014e20:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014e24:	a80a      	add	r0, sp, #40	; 0x28
 8014e26:	d13e      	bne.n	8014ea6 <_printf_float+0x162>
 8014e28:	2306      	movs	r3, #6
 8014e2a:	6063      	str	r3, [r4, #4]
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014e32:	ab09      	add	r3, sp, #36	; 0x24
 8014e34:	9300      	str	r3, [sp, #0]
 8014e36:	ec49 8b10 	vmov	d0, r8, r9
 8014e3a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014e3e:	6022      	str	r2, [r4, #0]
 8014e40:	f8cd a004 	str.w	sl, [sp, #4]
 8014e44:	6861      	ldr	r1, [r4, #4]
 8014e46:	4628      	mov	r0, r5
 8014e48:	f7ff fee8 	bl	8014c1c <__cvt>
 8014e4c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014e50:	2b47      	cmp	r3, #71	; 0x47
 8014e52:	4680      	mov	r8, r0
 8014e54:	d109      	bne.n	8014e6a <_printf_float+0x126>
 8014e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e58:	1cd8      	adds	r0, r3, #3
 8014e5a:	db02      	blt.n	8014e62 <_printf_float+0x11e>
 8014e5c:	6862      	ldr	r2, [r4, #4]
 8014e5e:	4293      	cmp	r3, r2
 8014e60:	dd47      	ble.n	8014ef2 <_printf_float+0x1ae>
 8014e62:	f1aa 0a02 	sub.w	sl, sl, #2
 8014e66:	fa5f fa8a 	uxtb.w	sl, sl
 8014e6a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014e6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e70:	d824      	bhi.n	8014ebc <_printf_float+0x178>
 8014e72:	3901      	subs	r1, #1
 8014e74:	4652      	mov	r2, sl
 8014e76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014e7a:	9109      	str	r1, [sp, #36]	; 0x24
 8014e7c:	f7ff ff2f 	bl	8014cde <__exponent>
 8014e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e82:	1813      	adds	r3, r2, r0
 8014e84:	2a01      	cmp	r2, #1
 8014e86:	4681      	mov	r9, r0
 8014e88:	6123      	str	r3, [r4, #16]
 8014e8a:	dc02      	bgt.n	8014e92 <_printf_float+0x14e>
 8014e8c:	6822      	ldr	r2, [r4, #0]
 8014e8e:	07d1      	lsls	r1, r2, #31
 8014e90:	d501      	bpl.n	8014e96 <_printf_float+0x152>
 8014e92:	3301      	adds	r3, #1
 8014e94:	6123      	str	r3, [r4, #16]
 8014e96:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d0a5      	beq.n	8014dea <_printf_float+0xa6>
 8014e9e:	232d      	movs	r3, #45	; 0x2d
 8014ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ea4:	e7a1      	b.n	8014dea <_printf_float+0xa6>
 8014ea6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014eaa:	f000 8177 	beq.w	801519c <_printf_float+0x458>
 8014eae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014eb2:	d1bb      	bne.n	8014e2c <_printf_float+0xe8>
 8014eb4:	2900      	cmp	r1, #0
 8014eb6:	d1b9      	bne.n	8014e2c <_printf_float+0xe8>
 8014eb8:	2301      	movs	r3, #1
 8014eba:	e7b6      	b.n	8014e2a <_printf_float+0xe6>
 8014ebc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014ec0:	d119      	bne.n	8014ef6 <_printf_float+0x1b2>
 8014ec2:	2900      	cmp	r1, #0
 8014ec4:	6863      	ldr	r3, [r4, #4]
 8014ec6:	dd0c      	ble.n	8014ee2 <_printf_float+0x19e>
 8014ec8:	6121      	str	r1, [r4, #16]
 8014eca:	b913      	cbnz	r3, 8014ed2 <_printf_float+0x18e>
 8014ecc:	6822      	ldr	r2, [r4, #0]
 8014ece:	07d2      	lsls	r2, r2, #31
 8014ed0:	d502      	bpl.n	8014ed8 <_printf_float+0x194>
 8014ed2:	3301      	adds	r3, #1
 8014ed4:	440b      	add	r3, r1
 8014ed6:	6123      	str	r3, [r4, #16]
 8014ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014eda:	65a3      	str	r3, [r4, #88]	; 0x58
 8014edc:	f04f 0900 	mov.w	r9, #0
 8014ee0:	e7d9      	b.n	8014e96 <_printf_float+0x152>
 8014ee2:	b913      	cbnz	r3, 8014eea <_printf_float+0x1a6>
 8014ee4:	6822      	ldr	r2, [r4, #0]
 8014ee6:	07d0      	lsls	r0, r2, #31
 8014ee8:	d501      	bpl.n	8014eee <_printf_float+0x1aa>
 8014eea:	3302      	adds	r3, #2
 8014eec:	e7f3      	b.n	8014ed6 <_printf_float+0x192>
 8014eee:	2301      	movs	r3, #1
 8014ef0:	e7f1      	b.n	8014ed6 <_printf_float+0x192>
 8014ef2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8014ef6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014efa:	4293      	cmp	r3, r2
 8014efc:	db05      	blt.n	8014f0a <_printf_float+0x1c6>
 8014efe:	6822      	ldr	r2, [r4, #0]
 8014f00:	6123      	str	r3, [r4, #16]
 8014f02:	07d1      	lsls	r1, r2, #31
 8014f04:	d5e8      	bpl.n	8014ed8 <_printf_float+0x194>
 8014f06:	3301      	adds	r3, #1
 8014f08:	e7e5      	b.n	8014ed6 <_printf_float+0x192>
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	bfd4      	ite	le
 8014f0e:	f1c3 0302 	rsble	r3, r3, #2
 8014f12:	2301      	movgt	r3, #1
 8014f14:	4413      	add	r3, r2
 8014f16:	e7de      	b.n	8014ed6 <_printf_float+0x192>
 8014f18:	6823      	ldr	r3, [r4, #0]
 8014f1a:	055a      	lsls	r2, r3, #21
 8014f1c:	d407      	bmi.n	8014f2e <_printf_float+0x1ea>
 8014f1e:	6923      	ldr	r3, [r4, #16]
 8014f20:	4642      	mov	r2, r8
 8014f22:	4631      	mov	r1, r6
 8014f24:	4628      	mov	r0, r5
 8014f26:	47b8      	blx	r7
 8014f28:	3001      	adds	r0, #1
 8014f2a:	d12b      	bne.n	8014f84 <_printf_float+0x240>
 8014f2c:	e767      	b.n	8014dfe <_printf_float+0xba>
 8014f2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014f32:	f240 80dc 	bls.w	80150ee <_printf_float+0x3aa>
 8014f36:	2200      	movs	r2, #0
 8014f38:	2300      	movs	r3, #0
 8014f3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014f3e:	f7eb fde3 	bl	8000b08 <__aeabi_dcmpeq>
 8014f42:	2800      	cmp	r0, #0
 8014f44:	d033      	beq.n	8014fae <_printf_float+0x26a>
 8014f46:	2301      	movs	r3, #1
 8014f48:	4a41      	ldr	r2, [pc, #260]	; (8015050 <_printf_float+0x30c>)
 8014f4a:	4631      	mov	r1, r6
 8014f4c:	4628      	mov	r0, r5
 8014f4e:	47b8      	blx	r7
 8014f50:	3001      	adds	r0, #1
 8014f52:	f43f af54 	beq.w	8014dfe <_printf_float+0xba>
 8014f56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014f5a:	429a      	cmp	r2, r3
 8014f5c:	db02      	blt.n	8014f64 <_printf_float+0x220>
 8014f5e:	6823      	ldr	r3, [r4, #0]
 8014f60:	07d8      	lsls	r0, r3, #31
 8014f62:	d50f      	bpl.n	8014f84 <_printf_float+0x240>
 8014f64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f68:	4631      	mov	r1, r6
 8014f6a:	4628      	mov	r0, r5
 8014f6c:	47b8      	blx	r7
 8014f6e:	3001      	adds	r0, #1
 8014f70:	f43f af45 	beq.w	8014dfe <_printf_float+0xba>
 8014f74:	f04f 0800 	mov.w	r8, #0
 8014f78:	f104 091a 	add.w	r9, r4, #26
 8014f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f7e:	3b01      	subs	r3, #1
 8014f80:	4543      	cmp	r3, r8
 8014f82:	dc09      	bgt.n	8014f98 <_printf_float+0x254>
 8014f84:	6823      	ldr	r3, [r4, #0]
 8014f86:	079b      	lsls	r3, r3, #30
 8014f88:	f100 8103 	bmi.w	8015192 <_printf_float+0x44e>
 8014f8c:	68e0      	ldr	r0, [r4, #12]
 8014f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f90:	4298      	cmp	r0, r3
 8014f92:	bfb8      	it	lt
 8014f94:	4618      	movlt	r0, r3
 8014f96:	e734      	b.n	8014e02 <_printf_float+0xbe>
 8014f98:	2301      	movs	r3, #1
 8014f9a:	464a      	mov	r2, r9
 8014f9c:	4631      	mov	r1, r6
 8014f9e:	4628      	mov	r0, r5
 8014fa0:	47b8      	blx	r7
 8014fa2:	3001      	adds	r0, #1
 8014fa4:	f43f af2b 	beq.w	8014dfe <_printf_float+0xba>
 8014fa8:	f108 0801 	add.w	r8, r8, #1
 8014fac:	e7e6      	b.n	8014f7c <_printf_float+0x238>
 8014fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	dc2b      	bgt.n	801500c <_printf_float+0x2c8>
 8014fb4:	2301      	movs	r3, #1
 8014fb6:	4a26      	ldr	r2, [pc, #152]	; (8015050 <_printf_float+0x30c>)
 8014fb8:	4631      	mov	r1, r6
 8014fba:	4628      	mov	r0, r5
 8014fbc:	47b8      	blx	r7
 8014fbe:	3001      	adds	r0, #1
 8014fc0:	f43f af1d 	beq.w	8014dfe <_printf_float+0xba>
 8014fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fc6:	b923      	cbnz	r3, 8014fd2 <_printf_float+0x28e>
 8014fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fca:	b913      	cbnz	r3, 8014fd2 <_printf_float+0x28e>
 8014fcc:	6823      	ldr	r3, [r4, #0]
 8014fce:	07d9      	lsls	r1, r3, #31
 8014fd0:	d5d8      	bpl.n	8014f84 <_printf_float+0x240>
 8014fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014fd6:	4631      	mov	r1, r6
 8014fd8:	4628      	mov	r0, r5
 8014fda:	47b8      	blx	r7
 8014fdc:	3001      	adds	r0, #1
 8014fde:	f43f af0e 	beq.w	8014dfe <_printf_float+0xba>
 8014fe2:	f04f 0900 	mov.w	r9, #0
 8014fe6:	f104 0a1a 	add.w	sl, r4, #26
 8014fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fec:	425b      	negs	r3, r3
 8014fee:	454b      	cmp	r3, r9
 8014ff0:	dc01      	bgt.n	8014ff6 <_printf_float+0x2b2>
 8014ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ff4:	e794      	b.n	8014f20 <_printf_float+0x1dc>
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	4652      	mov	r2, sl
 8014ffa:	4631      	mov	r1, r6
 8014ffc:	4628      	mov	r0, r5
 8014ffe:	47b8      	blx	r7
 8015000:	3001      	adds	r0, #1
 8015002:	f43f aefc 	beq.w	8014dfe <_printf_float+0xba>
 8015006:	f109 0901 	add.w	r9, r9, #1
 801500a:	e7ee      	b.n	8014fea <_printf_float+0x2a6>
 801500c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801500e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015010:	429a      	cmp	r2, r3
 8015012:	bfa8      	it	ge
 8015014:	461a      	movge	r2, r3
 8015016:	2a00      	cmp	r2, #0
 8015018:	4691      	mov	r9, r2
 801501a:	dd07      	ble.n	801502c <_printf_float+0x2e8>
 801501c:	4613      	mov	r3, r2
 801501e:	4631      	mov	r1, r6
 8015020:	4642      	mov	r2, r8
 8015022:	4628      	mov	r0, r5
 8015024:	47b8      	blx	r7
 8015026:	3001      	adds	r0, #1
 8015028:	f43f aee9 	beq.w	8014dfe <_printf_float+0xba>
 801502c:	f104 031a 	add.w	r3, r4, #26
 8015030:	f04f 0b00 	mov.w	fp, #0
 8015034:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015038:	9306      	str	r3, [sp, #24]
 801503a:	e015      	b.n	8015068 <_printf_float+0x324>
 801503c:	7fefffff 	.word	0x7fefffff
 8015040:	0801bf1a 	.word	0x0801bf1a
 8015044:	0801bf16 	.word	0x0801bf16
 8015048:	0801bf22 	.word	0x0801bf22
 801504c:	0801bf1e 	.word	0x0801bf1e
 8015050:	0801bf26 	.word	0x0801bf26
 8015054:	2301      	movs	r3, #1
 8015056:	9a06      	ldr	r2, [sp, #24]
 8015058:	4631      	mov	r1, r6
 801505a:	4628      	mov	r0, r5
 801505c:	47b8      	blx	r7
 801505e:	3001      	adds	r0, #1
 8015060:	f43f aecd 	beq.w	8014dfe <_printf_float+0xba>
 8015064:	f10b 0b01 	add.w	fp, fp, #1
 8015068:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801506c:	ebaa 0309 	sub.w	r3, sl, r9
 8015070:	455b      	cmp	r3, fp
 8015072:	dcef      	bgt.n	8015054 <_printf_float+0x310>
 8015074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015078:	429a      	cmp	r2, r3
 801507a:	44d0      	add	r8, sl
 801507c:	db15      	blt.n	80150aa <_printf_float+0x366>
 801507e:	6823      	ldr	r3, [r4, #0]
 8015080:	07da      	lsls	r2, r3, #31
 8015082:	d412      	bmi.n	80150aa <_printf_float+0x366>
 8015084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015086:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015088:	eba3 020a 	sub.w	r2, r3, sl
 801508c:	eba3 0a01 	sub.w	sl, r3, r1
 8015090:	4592      	cmp	sl, r2
 8015092:	bfa8      	it	ge
 8015094:	4692      	movge	sl, r2
 8015096:	f1ba 0f00 	cmp.w	sl, #0
 801509a:	dc0e      	bgt.n	80150ba <_printf_float+0x376>
 801509c:	f04f 0800 	mov.w	r8, #0
 80150a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80150a4:	f104 091a 	add.w	r9, r4, #26
 80150a8:	e019      	b.n	80150de <_printf_float+0x39a>
 80150aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80150ae:	4631      	mov	r1, r6
 80150b0:	4628      	mov	r0, r5
 80150b2:	47b8      	blx	r7
 80150b4:	3001      	adds	r0, #1
 80150b6:	d1e5      	bne.n	8015084 <_printf_float+0x340>
 80150b8:	e6a1      	b.n	8014dfe <_printf_float+0xba>
 80150ba:	4653      	mov	r3, sl
 80150bc:	4642      	mov	r2, r8
 80150be:	4631      	mov	r1, r6
 80150c0:	4628      	mov	r0, r5
 80150c2:	47b8      	blx	r7
 80150c4:	3001      	adds	r0, #1
 80150c6:	d1e9      	bne.n	801509c <_printf_float+0x358>
 80150c8:	e699      	b.n	8014dfe <_printf_float+0xba>
 80150ca:	2301      	movs	r3, #1
 80150cc:	464a      	mov	r2, r9
 80150ce:	4631      	mov	r1, r6
 80150d0:	4628      	mov	r0, r5
 80150d2:	47b8      	blx	r7
 80150d4:	3001      	adds	r0, #1
 80150d6:	f43f ae92 	beq.w	8014dfe <_printf_float+0xba>
 80150da:	f108 0801 	add.w	r8, r8, #1
 80150de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80150e2:	1a9b      	subs	r3, r3, r2
 80150e4:	eba3 030a 	sub.w	r3, r3, sl
 80150e8:	4543      	cmp	r3, r8
 80150ea:	dcee      	bgt.n	80150ca <_printf_float+0x386>
 80150ec:	e74a      	b.n	8014f84 <_printf_float+0x240>
 80150ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80150f0:	2a01      	cmp	r2, #1
 80150f2:	dc01      	bgt.n	80150f8 <_printf_float+0x3b4>
 80150f4:	07db      	lsls	r3, r3, #31
 80150f6:	d53a      	bpl.n	801516e <_printf_float+0x42a>
 80150f8:	2301      	movs	r3, #1
 80150fa:	4642      	mov	r2, r8
 80150fc:	4631      	mov	r1, r6
 80150fe:	4628      	mov	r0, r5
 8015100:	47b8      	blx	r7
 8015102:	3001      	adds	r0, #1
 8015104:	f43f ae7b 	beq.w	8014dfe <_printf_float+0xba>
 8015108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801510c:	4631      	mov	r1, r6
 801510e:	4628      	mov	r0, r5
 8015110:	47b8      	blx	r7
 8015112:	3001      	adds	r0, #1
 8015114:	f108 0801 	add.w	r8, r8, #1
 8015118:	f43f ae71 	beq.w	8014dfe <_printf_float+0xba>
 801511c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801511e:	2200      	movs	r2, #0
 8015120:	f103 3aff 	add.w	sl, r3, #4294967295
 8015124:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015128:	2300      	movs	r3, #0
 801512a:	f7eb fced 	bl	8000b08 <__aeabi_dcmpeq>
 801512e:	b9c8      	cbnz	r0, 8015164 <_printf_float+0x420>
 8015130:	4653      	mov	r3, sl
 8015132:	4642      	mov	r2, r8
 8015134:	4631      	mov	r1, r6
 8015136:	4628      	mov	r0, r5
 8015138:	47b8      	blx	r7
 801513a:	3001      	adds	r0, #1
 801513c:	d10e      	bne.n	801515c <_printf_float+0x418>
 801513e:	e65e      	b.n	8014dfe <_printf_float+0xba>
 8015140:	2301      	movs	r3, #1
 8015142:	4652      	mov	r2, sl
 8015144:	4631      	mov	r1, r6
 8015146:	4628      	mov	r0, r5
 8015148:	47b8      	blx	r7
 801514a:	3001      	adds	r0, #1
 801514c:	f43f ae57 	beq.w	8014dfe <_printf_float+0xba>
 8015150:	f108 0801 	add.w	r8, r8, #1
 8015154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015156:	3b01      	subs	r3, #1
 8015158:	4543      	cmp	r3, r8
 801515a:	dcf1      	bgt.n	8015140 <_printf_float+0x3fc>
 801515c:	464b      	mov	r3, r9
 801515e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015162:	e6de      	b.n	8014f22 <_printf_float+0x1de>
 8015164:	f04f 0800 	mov.w	r8, #0
 8015168:	f104 0a1a 	add.w	sl, r4, #26
 801516c:	e7f2      	b.n	8015154 <_printf_float+0x410>
 801516e:	2301      	movs	r3, #1
 8015170:	e7df      	b.n	8015132 <_printf_float+0x3ee>
 8015172:	2301      	movs	r3, #1
 8015174:	464a      	mov	r2, r9
 8015176:	4631      	mov	r1, r6
 8015178:	4628      	mov	r0, r5
 801517a:	47b8      	blx	r7
 801517c:	3001      	adds	r0, #1
 801517e:	f43f ae3e 	beq.w	8014dfe <_printf_float+0xba>
 8015182:	f108 0801 	add.w	r8, r8, #1
 8015186:	68e3      	ldr	r3, [r4, #12]
 8015188:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801518a:	1a9b      	subs	r3, r3, r2
 801518c:	4543      	cmp	r3, r8
 801518e:	dcf0      	bgt.n	8015172 <_printf_float+0x42e>
 8015190:	e6fc      	b.n	8014f8c <_printf_float+0x248>
 8015192:	f04f 0800 	mov.w	r8, #0
 8015196:	f104 0919 	add.w	r9, r4, #25
 801519a:	e7f4      	b.n	8015186 <_printf_float+0x442>
 801519c:	2900      	cmp	r1, #0
 801519e:	f43f ae8b 	beq.w	8014eb8 <_printf_float+0x174>
 80151a2:	2300      	movs	r3, #0
 80151a4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80151a8:	ab09      	add	r3, sp, #36	; 0x24
 80151aa:	9300      	str	r3, [sp, #0]
 80151ac:	ec49 8b10 	vmov	d0, r8, r9
 80151b0:	6022      	str	r2, [r4, #0]
 80151b2:	f8cd a004 	str.w	sl, [sp, #4]
 80151b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80151ba:	4628      	mov	r0, r5
 80151bc:	f7ff fd2e 	bl	8014c1c <__cvt>
 80151c0:	4680      	mov	r8, r0
 80151c2:	e648      	b.n	8014e56 <_printf_float+0x112>

080151c4 <_printf_common>:
 80151c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151c8:	4691      	mov	r9, r2
 80151ca:	461f      	mov	r7, r3
 80151cc:	688a      	ldr	r2, [r1, #8]
 80151ce:	690b      	ldr	r3, [r1, #16]
 80151d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80151d4:	4293      	cmp	r3, r2
 80151d6:	bfb8      	it	lt
 80151d8:	4613      	movlt	r3, r2
 80151da:	f8c9 3000 	str.w	r3, [r9]
 80151de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80151e2:	4606      	mov	r6, r0
 80151e4:	460c      	mov	r4, r1
 80151e6:	b112      	cbz	r2, 80151ee <_printf_common+0x2a>
 80151e8:	3301      	adds	r3, #1
 80151ea:	f8c9 3000 	str.w	r3, [r9]
 80151ee:	6823      	ldr	r3, [r4, #0]
 80151f0:	0699      	lsls	r1, r3, #26
 80151f2:	bf42      	ittt	mi
 80151f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80151f8:	3302      	addmi	r3, #2
 80151fa:	f8c9 3000 	strmi.w	r3, [r9]
 80151fe:	6825      	ldr	r5, [r4, #0]
 8015200:	f015 0506 	ands.w	r5, r5, #6
 8015204:	d107      	bne.n	8015216 <_printf_common+0x52>
 8015206:	f104 0a19 	add.w	sl, r4, #25
 801520a:	68e3      	ldr	r3, [r4, #12]
 801520c:	f8d9 2000 	ldr.w	r2, [r9]
 8015210:	1a9b      	subs	r3, r3, r2
 8015212:	42ab      	cmp	r3, r5
 8015214:	dc28      	bgt.n	8015268 <_printf_common+0xa4>
 8015216:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801521a:	6822      	ldr	r2, [r4, #0]
 801521c:	3300      	adds	r3, #0
 801521e:	bf18      	it	ne
 8015220:	2301      	movne	r3, #1
 8015222:	0692      	lsls	r2, r2, #26
 8015224:	d42d      	bmi.n	8015282 <_printf_common+0xbe>
 8015226:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801522a:	4639      	mov	r1, r7
 801522c:	4630      	mov	r0, r6
 801522e:	47c0      	blx	r8
 8015230:	3001      	adds	r0, #1
 8015232:	d020      	beq.n	8015276 <_printf_common+0xb2>
 8015234:	6823      	ldr	r3, [r4, #0]
 8015236:	68e5      	ldr	r5, [r4, #12]
 8015238:	f8d9 2000 	ldr.w	r2, [r9]
 801523c:	f003 0306 	and.w	r3, r3, #6
 8015240:	2b04      	cmp	r3, #4
 8015242:	bf08      	it	eq
 8015244:	1aad      	subeq	r5, r5, r2
 8015246:	68a3      	ldr	r3, [r4, #8]
 8015248:	6922      	ldr	r2, [r4, #16]
 801524a:	bf0c      	ite	eq
 801524c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015250:	2500      	movne	r5, #0
 8015252:	4293      	cmp	r3, r2
 8015254:	bfc4      	itt	gt
 8015256:	1a9b      	subgt	r3, r3, r2
 8015258:	18ed      	addgt	r5, r5, r3
 801525a:	f04f 0900 	mov.w	r9, #0
 801525e:	341a      	adds	r4, #26
 8015260:	454d      	cmp	r5, r9
 8015262:	d11a      	bne.n	801529a <_printf_common+0xd6>
 8015264:	2000      	movs	r0, #0
 8015266:	e008      	b.n	801527a <_printf_common+0xb6>
 8015268:	2301      	movs	r3, #1
 801526a:	4652      	mov	r2, sl
 801526c:	4639      	mov	r1, r7
 801526e:	4630      	mov	r0, r6
 8015270:	47c0      	blx	r8
 8015272:	3001      	adds	r0, #1
 8015274:	d103      	bne.n	801527e <_printf_common+0xba>
 8015276:	f04f 30ff 	mov.w	r0, #4294967295
 801527a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801527e:	3501      	adds	r5, #1
 8015280:	e7c3      	b.n	801520a <_printf_common+0x46>
 8015282:	18e1      	adds	r1, r4, r3
 8015284:	1c5a      	adds	r2, r3, #1
 8015286:	2030      	movs	r0, #48	; 0x30
 8015288:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801528c:	4422      	add	r2, r4
 801528e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015292:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015296:	3302      	adds	r3, #2
 8015298:	e7c5      	b.n	8015226 <_printf_common+0x62>
 801529a:	2301      	movs	r3, #1
 801529c:	4622      	mov	r2, r4
 801529e:	4639      	mov	r1, r7
 80152a0:	4630      	mov	r0, r6
 80152a2:	47c0      	blx	r8
 80152a4:	3001      	adds	r0, #1
 80152a6:	d0e6      	beq.n	8015276 <_printf_common+0xb2>
 80152a8:	f109 0901 	add.w	r9, r9, #1
 80152ac:	e7d8      	b.n	8015260 <_printf_common+0x9c>
	...

080152b0 <_printf_i>:
 80152b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80152b8:	460c      	mov	r4, r1
 80152ba:	7e09      	ldrb	r1, [r1, #24]
 80152bc:	b085      	sub	sp, #20
 80152be:	296e      	cmp	r1, #110	; 0x6e
 80152c0:	4617      	mov	r7, r2
 80152c2:	4606      	mov	r6, r0
 80152c4:	4698      	mov	r8, r3
 80152c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80152c8:	f000 80b3 	beq.w	8015432 <_printf_i+0x182>
 80152cc:	d822      	bhi.n	8015314 <_printf_i+0x64>
 80152ce:	2963      	cmp	r1, #99	; 0x63
 80152d0:	d036      	beq.n	8015340 <_printf_i+0x90>
 80152d2:	d80a      	bhi.n	80152ea <_printf_i+0x3a>
 80152d4:	2900      	cmp	r1, #0
 80152d6:	f000 80b9 	beq.w	801544c <_printf_i+0x19c>
 80152da:	2958      	cmp	r1, #88	; 0x58
 80152dc:	f000 8083 	beq.w	80153e6 <_printf_i+0x136>
 80152e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80152e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80152e8:	e032      	b.n	8015350 <_printf_i+0xa0>
 80152ea:	2964      	cmp	r1, #100	; 0x64
 80152ec:	d001      	beq.n	80152f2 <_printf_i+0x42>
 80152ee:	2969      	cmp	r1, #105	; 0x69
 80152f0:	d1f6      	bne.n	80152e0 <_printf_i+0x30>
 80152f2:	6820      	ldr	r0, [r4, #0]
 80152f4:	6813      	ldr	r3, [r2, #0]
 80152f6:	0605      	lsls	r5, r0, #24
 80152f8:	f103 0104 	add.w	r1, r3, #4
 80152fc:	d52a      	bpl.n	8015354 <_printf_i+0xa4>
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	6011      	str	r1, [r2, #0]
 8015302:	2b00      	cmp	r3, #0
 8015304:	da03      	bge.n	801530e <_printf_i+0x5e>
 8015306:	222d      	movs	r2, #45	; 0x2d
 8015308:	425b      	negs	r3, r3
 801530a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801530e:	486f      	ldr	r0, [pc, #444]	; (80154cc <_printf_i+0x21c>)
 8015310:	220a      	movs	r2, #10
 8015312:	e039      	b.n	8015388 <_printf_i+0xd8>
 8015314:	2973      	cmp	r1, #115	; 0x73
 8015316:	f000 809d 	beq.w	8015454 <_printf_i+0x1a4>
 801531a:	d808      	bhi.n	801532e <_printf_i+0x7e>
 801531c:	296f      	cmp	r1, #111	; 0x6f
 801531e:	d020      	beq.n	8015362 <_printf_i+0xb2>
 8015320:	2970      	cmp	r1, #112	; 0x70
 8015322:	d1dd      	bne.n	80152e0 <_printf_i+0x30>
 8015324:	6823      	ldr	r3, [r4, #0]
 8015326:	f043 0320 	orr.w	r3, r3, #32
 801532a:	6023      	str	r3, [r4, #0]
 801532c:	e003      	b.n	8015336 <_printf_i+0x86>
 801532e:	2975      	cmp	r1, #117	; 0x75
 8015330:	d017      	beq.n	8015362 <_printf_i+0xb2>
 8015332:	2978      	cmp	r1, #120	; 0x78
 8015334:	d1d4      	bne.n	80152e0 <_printf_i+0x30>
 8015336:	2378      	movs	r3, #120	; 0x78
 8015338:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801533c:	4864      	ldr	r0, [pc, #400]	; (80154d0 <_printf_i+0x220>)
 801533e:	e055      	b.n	80153ec <_printf_i+0x13c>
 8015340:	6813      	ldr	r3, [r2, #0]
 8015342:	1d19      	adds	r1, r3, #4
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	6011      	str	r1, [r2, #0]
 8015348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801534c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015350:	2301      	movs	r3, #1
 8015352:	e08c      	b.n	801546e <_printf_i+0x1be>
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	6011      	str	r1, [r2, #0]
 8015358:	f010 0f40 	tst.w	r0, #64	; 0x40
 801535c:	bf18      	it	ne
 801535e:	b21b      	sxthne	r3, r3
 8015360:	e7cf      	b.n	8015302 <_printf_i+0x52>
 8015362:	6813      	ldr	r3, [r2, #0]
 8015364:	6825      	ldr	r5, [r4, #0]
 8015366:	1d18      	adds	r0, r3, #4
 8015368:	6010      	str	r0, [r2, #0]
 801536a:	0628      	lsls	r0, r5, #24
 801536c:	d501      	bpl.n	8015372 <_printf_i+0xc2>
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	e002      	b.n	8015378 <_printf_i+0xc8>
 8015372:	0668      	lsls	r0, r5, #25
 8015374:	d5fb      	bpl.n	801536e <_printf_i+0xbe>
 8015376:	881b      	ldrh	r3, [r3, #0]
 8015378:	4854      	ldr	r0, [pc, #336]	; (80154cc <_printf_i+0x21c>)
 801537a:	296f      	cmp	r1, #111	; 0x6f
 801537c:	bf14      	ite	ne
 801537e:	220a      	movne	r2, #10
 8015380:	2208      	moveq	r2, #8
 8015382:	2100      	movs	r1, #0
 8015384:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015388:	6865      	ldr	r5, [r4, #4]
 801538a:	60a5      	str	r5, [r4, #8]
 801538c:	2d00      	cmp	r5, #0
 801538e:	f2c0 8095 	blt.w	80154bc <_printf_i+0x20c>
 8015392:	6821      	ldr	r1, [r4, #0]
 8015394:	f021 0104 	bic.w	r1, r1, #4
 8015398:	6021      	str	r1, [r4, #0]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d13d      	bne.n	801541a <_printf_i+0x16a>
 801539e:	2d00      	cmp	r5, #0
 80153a0:	f040 808e 	bne.w	80154c0 <_printf_i+0x210>
 80153a4:	4665      	mov	r5, ip
 80153a6:	2a08      	cmp	r2, #8
 80153a8:	d10b      	bne.n	80153c2 <_printf_i+0x112>
 80153aa:	6823      	ldr	r3, [r4, #0]
 80153ac:	07db      	lsls	r3, r3, #31
 80153ae:	d508      	bpl.n	80153c2 <_printf_i+0x112>
 80153b0:	6923      	ldr	r3, [r4, #16]
 80153b2:	6862      	ldr	r2, [r4, #4]
 80153b4:	429a      	cmp	r2, r3
 80153b6:	bfde      	ittt	le
 80153b8:	2330      	movle	r3, #48	; 0x30
 80153ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80153be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80153c2:	ebac 0305 	sub.w	r3, ip, r5
 80153c6:	6123      	str	r3, [r4, #16]
 80153c8:	f8cd 8000 	str.w	r8, [sp]
 80153cc:	463b      	mov	r3, r7
 80153ce:	aa03      	add	r2, sp, #12
 80153d0:	4621      	mov	r1, r4
 80153d2:	4630      	mov	r0, r6
 80153d4:	f7ff fef6 	bl	80151c4 <_printf_common>
 80153d8:	3001      	adds	r0, #1
 80153da:	d14d      	bne.n	8015478 <_printf_i+0x1c8>
 80153dc:	f04f 30ff 	mov.w	r0, #4294967295
 80153e0:	b005      	add	sp, #20
 80153e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153e6:	4839      	ldr	r0, [pc, #228]	; (80154cc <_printf_i+0x21c>)
 80153e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80153ec:	6813      	ldr	r3, [r2, #0]
 80153ee:	6821      	ldr	r1, [r4, #0]
 80153f0:	1d1d      	adds	r5, r3, #4
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	6015      	str	r5, [r2, #0]
 80153f6:	060a      	lsls	r2, r1, #24
 80153f8:	d50b      	bpl.n	8015412 <_printf_i+0x162>
 80153fa:	07ca      	lsls	r2, r1, #31
 80153fc:	bf44      	itt	mi
 80153fe:	f041 0120 	orrmi.w	r1, r1, #32
 8015402:	6021      	strmi	r1, [r4, #0]
 8015404:	b91b      	cbnz	r3, 801540e <_printf_i+0x15e>
 8015406:	6822      	ldr	r2, [r4, #0]
 8015408:	f022 0220 	bic.w	r2, r2, #32
 801540c:	6022      	str	r2, [r4, #0]
 801540e:	2210      	movs	r2, #16
 8015410:	e7b7      	b.n	8015382 <_printf_i+0xd2>
 8015412:	064d      	lsls	r5, r1, #25
 8015414:	bf48      	it	mi
 8015416:	b29b      	uxthmi	r3, r3
 8015418:	e7ef      	b.n	80153fa <_printf_i+0x14a>
 801541a:	4665      	mov	r5, ip
 801541c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015420:	fb02 3311 	mls	r3, r2, r1, r3
 8015424:	5cc3      	ldrb	r3, [r0, r3]
 8015426:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801542a:	460b      	mov	r3, r1
 801542c:	2900      	cmp	r1, #0
 801542e:	d1f5      	bne.n	801541c <_printf_i+0x16c>
 8015430:	e7b9      	b.n	80153a6 <_printf_i+0xf6>
 8015432:	6813      	ldr	r3, [r2, #0]
 8015434:	6825      	ldr	r5, [r4, #0]
 8015436:	6961      	ldr	r1, [r4, #20]
 8015438:	1d18      	adds	r0, r3, #4
 801543a:	6010      	str	r0, [r2, #0]
 801543c:	0628      	lsls	r0, r5, #24
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	d501      	bpl.n	8015446 <_printf_i+0x196>
 8015442:	6019      	str	r1, [r3, #0]
 8015444:	e002      	b.n	801544c <_printf_i+0x19c>
 8015446:	066a      	lsls	r2, r5, #25
 8015448:	d5fb      	bpl.n	8015442 <_printf_i+0x192>
 801544a:	8019      	strh	r1, [r3, #0]
 801544c:	2300      	movs	r3, #0
 801544e:	6123      	str	r3, [r4, #16]
 8015450:	4665      	mov	r5, ip
 8015452:	e7b9      	b.n	80153c8 <_printf_i+0x118>
 8015454:	6813      	ldr	r3, [r2, #0]
 8015456:	1d19      	adds	r1, r3, #4
 8015458:	6011      	str	r1, [r2, #0]
 801545a:	681d      	ldr	r5, [r3, #0]
 801545c:	6862      	ldr	r2, [r4, #4]
 801545e:	2100      	movs	r1, #0
 8015460:	4628      	mov	r0, r5
 8015462:	f7ea fedd 	bl	8000220 <memchr>
 8015466:	b108      	cbz	r0, 801546c <_printf_i+0x1bc>
 8015468:	1b40      	subs	r0, r0, r5
 801546a:	6060      	str	r0, [r4, #4]
 801546c:	6863      	ldr	r3, [r4, #4]
 801546e:	6123      	str	r3, [r4, #16]
 8015470:	2300      	movs	r3, #0
 8015472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015476:	e7a7      	b.n	80153c8 <_printf_i+0x118>
 8015478:	6923      	ldr	r3, [r4, #16]
 801547a:	462a      	mov	r2, r5
 801547c:	4639      	mov	r1, r7
 801547e:	4630      	mov	r0, r6
 8015480:	47c0      	blx	r8
 8015482:	3001      	adds	r0, #1
 8015484:	d0aa      	beq.n	80153dc <_printf_i+0x12c>
 8015486:	6823      	ldr	r3, [r4, #0]
 8015488:	079b      	lsls	r3, r3, #30
 801548a:	d413      	bmi.n	80154b4 <_printf_i+0x204>
 801548c:	68e0      	ldr	r0, [r4, #12]
 801548e:	9b03      	ldr	r3, [sp, #12]
 8015490:	4298      	cmp	r0, r3
 8015492:	bfb8      	it	lt
 8015494:	4618      	movlt	r0, r3
 8015496:	e7a3      	b.n	80153e0 <_printf_i+0x130>
 8015498:	2301      	movs	r3, #1
 801549a:	464a      	mov	r2, r9
 801549c:	4639      	mov	r1, r7
 801549e:	4630      	mov	r0, r6
 80154a0:	47c0      	blx	r8
 80154a2:	3001      	adds	r0, #1
 80154a4:	d09a      	beq.n	80153dc <_printf_i+0x12c>
 80154a6:	3501      	adds	r5, #1
 80154a8:	68e3      	ldr	r3, [r4, #12]
 80154aa:	9a03      	ldr	r2, [sp, #12]
 80154ac:	1a9b      	subs	r3, r3, r2
 80154ae:	42ab      	cmp	r3, r5
 80154b0:	dcf2      	bgt.n	8015498 <_printf_i+0x1e8>
 80154b2:	e7eb      	b.n	801548c <_printf_i+0x1dc>
 80154b4:	2500      	movs	r5, #0
 80154b6:	f104 0919 	add.w	r9, r4, #25
 80154ba:	e7f5      	b.n	80154a8 <_printf_i+0x1f8>
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d1ac      	bne.n	801541a <_printf_i+0x16a>
 80154c0:	7803      	ldrb	r3, [r0, #0]
 80154c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80154c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80154ca:	e76c      	b.n	80153a6 <_printf_i+0xf6>
 80154cc:	0801bf28 	.word	0x0801bf28
 80154d0:	0801bf39 	.word	0x0801bf39

080154d4 <iprintf>:
 80154d4:	b40f      	push	{r0, r1, r2, r3}
 80154d6:	4b0a      	ldr	r3, [pc, #40]	; (8015500 <iprintf+0x2c>)
 80154d8:	b513      	push	{r0, r1, r4, lr}
 80154da:	681c      	ldr	r4, [r3, #0]
 80154dc:	b124      	cbz	r4, 80154e8 <iprintf+0x14>
 80154de:	69a3      	ldr	r3, [r4, #24]
 80154e0:	b913      	cbnz	r3, 80154e8 <iprintf+0x14>
 80154e2:	4620      	mov	r0, r4
 80154e4:	f001 fd90 	bl	8017008 <__sinit>
 80154e8:	ab05      	add	r3, sp, #20
 80154ea:	9a04      	ldr	r2, [sp, #16]
 80154ec:	68a1      	ldr	r1, [r4, #8]
 80154ee:	9301      	str	r3, [sp, #4]
 80154f0:	4620      	mov	r0, r4
 80154f2:	f002 fed5 	bl	80182a0 <_vfiprintf_r>
 80154f6:	b002      	add	sp, #8
 80154f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154fc:	b004      	add	sp, #16
 80154fe:	4770      	bx	lr
 8015500:	2000003c 	.word	0x2000003c

08015504 <rand>:
 8015504:	b538      	push	{r3, r4, r5, lr}
 8015506:	4b13      	ldr	r3, [pc, #76]	; (8015554 <rand+0x50>)
 8015508:	681c      	ldr	r4, [r3, #0]
 801550a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801550c:	b97b      	cbnz	r3, 801552e <rand+0x2a>
 801550e:	2018      	movs	r0, #24
 8015510:	f7ff fa7e 	bl	8014a10 <malloc>
 8015514:	4a10      	ldr	r2, [pc, #64]	; (8015558 <rand+0x54>)
 8015516:	4b11      	ldr	r3, [pc, #68]	; (801555c <rand+0x58>)
 8015518:	63a0      	str	r0, [r4, #56]	; 0x38
 801551a:	e9c0 2300 	strd	r2, r3, [r0]
 801551e:	4b10      	ldr	r3, [pc, #64]	; (8015560 <rand+0x5c>)
 8015520:	6083      	str	r3, [r0, #8]
 8015522:	230b      	movs	r3, #11
 8015524:	8183      	strh	r3, [r0, #12]
 8015526:	2201      	movs	r2, #1
 8015528:	2300      	movs	r3, #0
 801552a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801552e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015530:	480c      	ldr	r0, [pc, #48]	; (8015564 <rand+0x60>)
 8015532:	690a      	ldr	r2, [r1, #16]
 8015534:	694b      	ldr	r3, [r1, #20]
 8015536:	4c0c      	ldr	r4, [pc, #48]	; (8015568 <rand+0x64>)
 8015538:	4350      	muls	r0, r2
 801553a:	fb04 0003 	mla	r0, r4, r3, r0
 801553e:	fba2 2304 	umull	r2, r3, r2, r4
 8015542:	4403      	add	r3, r0
 8015544:	1c54      	adds	r4, r2, #1
 8015546:	f143 0500 	adc.w	r5, r3, #0
 801554a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801554e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8015552:	bd38      	pop	{r3, r4, r5, pc}
 8015554:	2000003c 	.word	0x2000003c
 8015558:	abcd330e 	.word	0xabcd330e
 801555c:	e66d1234 	.word	0xe66d1234
 8015560:	0005deec 	.word	0x0005deec
 8015564:	5851f42d 	.word	0x5851f42d
 8015568:	4c957f2d 	.word	0x4c957f2d

0801556c <_sbrk_r>:
 801556c:	b538      	push	{r3, r4, r5, lr}
 801556e:	4c06      	ldr	r4, [pc, #24]	; (8015588 <_sbrk_r+0x1c>)
 8015570:	2300      	movs	r3, #0
 8015572:	4605      	mov	r5, r0
 8015574:	4608      	mov	r0, r1
 8015576:	6023      	str	r3, [r4, #0]
 8015578:	f7eb fd50 	bl	800101c <_sbrk>
 801557c:	1c43      	adds	r3, r0, #1
 801557e:	d102      	bne.n	8015586 <_sbrk_r+0x1a>
 8015580:	6823      	ldr	r3, [r4, #0]
 8015582:	b103      	cbz	r3, 8015586 <_sbrk_r+0x1a>
 8015584:	602b      	str	r3, [r5, #0]
 8015586:	bd38      	pop	{r3, r4, r5, pc}
 8015588:	2000cfe0 	.word	0x2000cfe0

0801558c <siprintf>:
 801558c:	b40e      	push	{r1, r2, r3}
 801558e:	b500      	push	{lr}
 8015590:	b09c      	sub	sp, #112	; 0x70
 8015592:	ab1d      	add	r3, sp, #116	; 0x74
 8015594:	9002      	str	r0, [sp, #8]
 8015596:	9006      	str	r0, [sp, #24]
 8015598:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801559c:	4809      	ldr	r0, [pc, #36]	; (80155c4 <siprintf+0x38>)
 801559e:	9107      	str	r1, [sp, #28]
 80155a0:	9104      	str	r1, [sp, #16]
 80155a2:	4909      	ldr	r1, [pc, #36]	; (80155c8 <siprintf+0x3c>)
 80155a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80155a8:	9105      	str	r1, [sp, #20]
 80155aa:	6800      	ldr	r0, [r0, #0]
 80155ac:	9301      	str	r3, [sp, #4]
 80155ae:	a902      	add	r1, sp, #8
 80155b0:	f002 fd54 	bl	801805c <_svfiprintf_r>
 80155b4:	9b02      	ldr	r3, [sp, #8]
 80155b6:	2200      	movs	r2, #0
 80155b8:	701a      	strb	r2, [r3, #0]
 80155ba:	b01c      	add	sp, #112	; 0x70
 80155bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80155c0:	b003      	add	sp, #12
 80155c2:	4770      	bx	lr
 80155c4:	2000003c 	.word	0x2000003c
 80155c8:	ffff0208 	.word	0xffff0208

080155cc <strncmp>:
 80155cc:	b510      	push	{r4, lr}
 80155ce:	b16a      	cbz	r2, 80155ec <strncmp+0x20>
 80155d0:	3901      	subs	r1, #1
 80155d2:	1884      	adds	r4, r0, r2
 80155d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80155d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80155dc:	4293      	cmp	r3, r2
 80155de:	d103      	bne.n	80155e8 <strncmp+0x1c>
 80155e0:	42a0      	cmp	r0, r4
 80155e2:	d001      	beq.n	80155e8 <strncmp+0x1c>
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d1f5      	bne.n	80155d4 <strncmp+0x8>
 80155e8:	1a98      	subs	r0, r3, r2
 80155ea:	bd10      	pop	{r4, pc}
 80155ec:	4610      	mov	r0, r2
 80155ee:	e7fc      	b.n	80155ea <strncmp+0x1e>

080155f0 <sulp>:
 80155f0:	b570      	push	{r4, r5, r6, lr}
 80155f2:	4604      	mov	r4, r0
 80155f4:	460d      	mov	r5, r1
 80155f6:	ec45 4b10 	vmov	d0, r4, r5
 80155fa:	4616      	mov	r6, r2
 80155fc:	f002 fb92 	bl	8017d24 <__ulp>
 8015600:	ec51 0b10 	vmov	r0, r1, d0
 8015604:	b17e      	cbz	r6, 8015626 <sulp+0x36>
 8015606:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801560a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801560e:	2b00      	cmp	r3, #0
 8015610:	dd09      	ble.n	8015626 <sulp+0x36>
 8015612:	051b      	lsls	r3, r3, #20
 8015614:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015618:	2400      	movs	r4, #0
 801561a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801561e:	4622      	mov	r2, r4
 8015620:	462b      	mov	r3, r5
 8015622:	f7eb f809 	bl	8000638 <__aeabi_dmul>
 8015626:	bd70      	pop	{r4, r5, r6, pc}

08015628 <_strtod_l>:
 8015628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801562c:	461f      	mov	r7, r3
 801562e:	b0a1      	sub	sp, #132	; 0x84
 8015630:	2300      	movs	r3, #0
 8015632:	4681      	mov	r9, r0
 8015634:	4638      	mov	r0, r7
 8015636:	460e      	mov	r6, r1
 8015638:	9217      	str	r2, [sp, #92]	; 0x5c
 801563a:	931c      	str	r3, [sp, #112]	; 0x70
 801563c:	f002 f894 	bl	8017768 <__localeconv_l>
 8015640:	4680      	mov	r8, r0
 8015642:	6800      	ldr	r0, [r0, #0]
 8015644:	f7ea fde4 	bl	8000210 <strlen>
 8015648:	f04f 0a00 	mov.w	sl, #0
 801564c:	4604      	mov	r4, r0
 801564e:	f04f 0b00 	mov.w	fp, #0
 8015652:	961b      	str	r6, [sp, #108]	; 0x6c
 8015654:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015656:	781a      	ldrb	r2, [r3, #0]
 8015658:	2a0d      	cmp	r2, #13
 801565a:	d832      	bhi.n	80156c2 <_strtod_l+0x9a>
 801565c:	2a09      	cmp	r2, #9
 801565e:	d236      	bcs.n	80156ce <_strtod_l+0xa6>
 8015660:	2a00      	cmp	r2, #0
 8015662:	d03e      	beq.n	80156e2 <_strtod_l+0xba>
 8015664:	2300      	movs	r3, #0
 8015666:	930d      	str	r3, [sp, #52]	; 0x34
 8015668:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801566a:	782b      	ldrb	r3, [r5, #0]
 801566c:	2b30      	cmp	r3, #48	; 0x30
 801566e:	f040 80ac 	bne.w	80157ca <_strtod_l+0x1a2>
 8015672:	786b      	ldrb	r3, [r5, #1]
 8015674:	2b58      	cmp	r3, #88	; 0x58
 8015676:	d001      	beq.n	801567c <_strtod_l+0x54>
 8015678:	2b78      	cmp	r3, #120	; 0x78
 801567a:	d167      	bne.n	801574c <_strtod_l+0x124>
 801567c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801567e:	9301      	str	r3, [sp, #4]
 8015680:	ab1c      	add	r3, sp, #112	; 0x70
 8015682:	9300      	str	r3, [sp, #0]
 8015684:	9702      	str	r7, [sp, #8]
 8015686:	ab1d      	add	r3, sp, #116	; 0x74
 8015688:	4a88      	ldr	r2, [pc, #544]	; (80158ac <_strtod_l+0x284>)
 801568a:	a91b      	add	r1, sp, #108	; 0x6c
 801568c:	4648      	mov	r0, r9
 801568e:	f001 fd94 	bl	80171ba <__gethex>
 8015692:	f010 0407 	ands.w	r4, r0, #7
 8015696:	4606      	mov	r6, r0
 8015698:	d005      	beq.n	80156a6 <_strtod_l+0x7e>
 801569a:	2c06      	cmp	r4, #6
 801569c:	d12b      	bne.n	80156f6 <_strtod_l+0xce>
 801569e:	3501      	adds	r5, #1
 80156a0:	2300      	movs	r3, #0
 80156a2:	951b      	str	r5, [sp, #108]	; 0x6c
 80156a4:	930d      	str	r3, [sp, #52]	; 0x34
 80156a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	f040 859a 	bne.w	80161e2 <_strtod_l+0xbba>
 80156ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156b0:	b1e3      	cbz	r3, 80156ec <_strtod_l+0xc4>
 80156b2:	4652      	mov	r2, sl
 80156b4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80156b8:	ec43 2b10 	vmov	d0, r2, r3
 80156bc:	b021      	add	sp, #132	; 0x84
 80156be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156c2:	2a2b      	cmp	r2, #43	; 0x2b
 80156c4:	d015      	beq.n	80156f2 <_strtod_l+0xca>
 80156c6:	2a2d      	cmp	r2, #45	; 0x2d
 80156c8:	d004      	beq.n	80156d4 <_strtod_l+0xac>
 80156ca:	2a20      	cmp	r2, #32
 80156cc:	d1ca      	bne.n	8015664 <_strtod_l+0x3c>
 80156ce:	3301      	adds	r3, #1
 80156d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80156d2:	e7bf      	b.n	8015654 <_strtod_l+0x2c>
 80156d4:	2201      	movs	r2, #1
 80156d6:	920d      	str	r2, [sp, #52]	; 0x34
 80156d8:	1c5a      	adds	r2, r3, #1
 80156da:	921b      	str	r2, [sp, #108]	; 0x6c
 80156dc:	785b      	ldrb	r3, [r3, #1]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d1c2      	bne.n	8015668 <_strtod_l+0x40>
 80156e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80156e4:	961b      	str	r6, [sp, #108]	; 0x6c
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	f040 8579 	bne.w	80161de <_strtod_l+0xbb6>
 80156ec:	4652      	mov	r2, sl
 80156ee:	465b      	mov	r3, fp
 80156f0:	e7e2      	b.n	80156b8 <_strtod_l+0x90>
 80156f2:	2200      	movs	r2, #0
 80156f4:	e7ef      	b.n	80156d6 <_strtod_l+0xae>
 80156f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80156f8:	b13a      	cbz	r2, 801570a <_strtod_l+0xe2>
 80156fa:	2135      	movs	r1, #53	; 0x35
 80156fc:	a81e      	add	r0, sp, #120	; 0x78
 80156fe:	f002 fc09 	bl	8017f14 <__copybits>
 8015702:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015704:	4648      	mov	r0, r9
 8015706:	f002 f875 	bl	80177f4 <_Bfree>
 801570a:	3c01      	subs	r4, #1
 801570c:	2c04      	cmp	r4, #4
 801570e:	d806      	bhi.n	801571e <_strtod_l+0xf6>
 8015710:	e8df f004 	tbb	[pc, r4]
 8015714:	1714030a 	.word	0x1714030a
 8015718:	0a          	.byte	0x0a
 8015719:	00          	.byte	0x00
 801571a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801571e:	0730      	lsls	r0, r6, #28
 8015720:	d5c1      	bpl.n	80156a6 <_strtod_l+0x7e>
 8015722:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015726:	e7be      	b.n	80156a6 <_strtod_l+0x7e>
 8015728:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801572c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801572e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015732:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015736:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801573a:	e7f0      	b.n	801571e <_strtod_l+0xf6>
 801573c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80158b0 <_strtod_l+0x288>
 8015740:	e7ed      	b.n	801571e <_strtod_l+0xf6>
 8015742:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015746:	f04f 3aff 	mov.w	sl, #4294967295
 801574a:	e7e8      	b.n	801571e <_strtod_l+0xf6>
 801574c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801574e:	1c5a      	adds	r2, r3, #1
 8015750:	921b      	str	r2, [sp, #108]	; 0x6c
 8015752:	785b      	ldrb	r3, [r3, #1]
 8015754:	2b30      	cmp	r3, #48	; 0x30
 8015756:	d0f9      	beq.n	801574c <_strtod_l+0x124>
 8015758:	2b00      	cmp	r3, #0
 801575a:	d0a4      	beq.n	80156a6 <_strtod_l+0x7e>
 801575c:	2301      	movs	r3, #1
 801575e:	2500      	movs	r5, #0
 8015760:	9306      	str	r3, [sp, #24]
 8015762:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015764:	9308      	str	r3, [sp, #32]
 8015766:	9507      	str	r5, [sp, #28]
 8015768:	9505      	str	r5, [sp, #20]
 801576a:	220a      	movs	r2, #10
 801576c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801576e:	7807      	ldrb	r7, [r0, #0]
 8015770:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015774:	b2d9      	uxtb	r1, r3
 8015776:	2909      	cmp	r1, #9
 8015778:	d929      	bls.n	80157ce <_strtod_l+0x1a6>
 801577a:	4622      	mov	r2, r4
 801577c:	f8d8 1000 	ldr.w	r1, [r8]
 8015780:	f7ff ff24 	bl	80155cc <strncmp>
 8015784:	2800      	cmp	r0, #0
 8015786:	d031      	beq.n	80157ec <_strtod_l+0x1c4>
 8015788:	2000      	movs	r0, #0
 801578a:	9c05      	ldr	r4, [sp, #20]
 801578c:	9004      	str	r0, [sp, #16]
 801578e:	463b      	mov	r3, r7
 8015790:	4602      	mov	r2, r0
 8015792:	2b65      	cmp	r3, #101	; 0x65
 8015794:	d001      	beq.n	801579a <_strtod_l+0x172>
 8015796:	2b45      	cmp	r3, #69	; 0x45
 8015798:	d114      	bne.n	80157c4 <_strtod_l+0x19c>
 801579a:	b924      	cbnz	r4, 80157a6 <_strtod_l+0x17e>
 801579c:	b910      	cbnz	r0, 80157a4 <_strtod_l+0x17c>
 801579e:	9b06      	ldr	r3, [sp, #24]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d09e      	beq.n	80156e2 <_strtod_l+0xba>
 80157a4:	2400      	movs	r4, #0
 80157a6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80157a8:	1c73      	adds	r3, r6, #1
 80157aa:	931b      	str	r3, [sp, #108]	; 0x6c
 80157ac:	7873      	ldrb	r3, [r6, #1]
 80157ae:	2b2b      	cmp	r3, #43	; 0x2b
 80157b0:	d078      	beq.n	80158a4 <_strtod_l+0x27c>
 80157b2:	2b2d      	cmp	r3, #45	; 0x2d
 80157b4:	d070      	beq.n	8015898 <_strtod_l+0x270>
 80157b6:	f04f 0c00 	mov.w	ip, #0
 80157ba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80157be:	2f09      	cmp	r7, #9
 80157c0:	d97c      	bls.n	80158bc <_strtod_l+0x294>
 80157c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80157c4:	f04f 0e00 	mov.w	lr, #0
 80157c8:	e09a      	b.n	8015900 <_strtod_l+0x2d8>
 80157ca:	2300      	movs	r3, #0
 80157cc:	e7c7      	b.n	801575e <_strtod_l+0x136>
 80157ce:	9905      	ldr	r1, [sp, #20]
 80157d0:	2908      	cmp	r1, #8
 80157d2:	bfdd      	ittte	le
 80157d4:	9907      	ldrle	r1, [sp, #28]
 80157d6:	fb02 3301 	mlale	r3, r2, r1, r3
 80157da:	9307      	strle	r3, [sp, #28]
 80157dc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80157e0:	9b05      	ldr	r3, [sp, #20]
 80157e2:	3001      	adds	r0, #1
 80157e4:	3301      	adds	r3, #1
 80157e6:	9305      	str	r3, [sp, #20]
 80157e8:	901b      	str	r0, [sp, #108]	; 0x6c
 80157ea:	e7bf      	b.n	801576c <_strtod_l+0x144>
 80157ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157ee:	191a      	adds	r2, r3, r4
 80157f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80157f2:	9a05      	ldr	r2, [sp, #20]
 80157f4:	5d1b      	ldrb	r3, [r3, r4]
 80157f6:	2a00      	cmp	r2, #0
 80157f8:	d037      	beq.n	801586a <_strtod_l+0x242>
 80157fa:	9c05      	ldr	r4, [sp, #20]
 80157fc:	4602      	mov	r2, r0
 80157fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015802:	2909      	cmp	r1, #9
 8015804:	d913      	bls.n	801582e <_strtod_l+0x206>
 8015806:	2101      	movs	r1, #1
 8015808:	9104      	str	r1, [sp, #16]
 801580a:	e7c2      	b.n	8015792 <_strtod_l+0x16a>
 801580c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801580e:	1c5a      	adds	r2, r3, #1
 8015810:	921b      	str	r2, [sp, #108]	; 0x6c
 8015812:	785b      	ldrb	r3, [r3, #1]
 8015814:	3001      	adds	r0, #1
 8015816:	2b30      	cmp	r3, #48	; 0x30
 8015818:	d0f8      	beq.n	801580c <_strtod_l+0x1e4>
 801581a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801581e:	2a08      	cmp	r2, #8
 8015820:	f200 84e4 	bhi.w	80161ec <_strtod_l+0xbc4>
 8015824:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015826:	9208      	str	r2, [sp, #32]
 8015828:	4602      	mov	r2, r0
 801582a:	2000      	movs	r0, #0
 801582c:	4604      	mov	r4, r0
 801582e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8015832:	f100 0101 	add.w	r1, r0, #1
 8015836:	d012      	beq.n	801585e <_strtod_l+0x236>
 8015838:	440a      	add	r2, r1
 801583a:	eb00 0c04 	add.w	ip, r0, r4
 801583e:	4621      	mov	r1, r4
 8015840:	270a      	movs	r7, #10
 8015842:	458c      	cmp	ip, r1
 8015844:	d113      	bne.n	801586e <_strtod_l+0x246>
 8015846:	1821      	adds	r1, r4, r0
 8015848:	2908      	cmp	r1, #8
 801584a:	f104 0401 	add.w	r4, r4, #1
 801584e:	4404      	add	r4, r0
 8015850:	dc19      	bgt.n	8015886 <_strtod_l+0x25e>
 8015852:	9b07      	ldr	r3, [sp, #28]
 8015854:	210a      	movs	r1, #10
 8015856:	fb01 e303 	mla	r3, r1, r3, lr
 801585a:	9307      	str	r3, [sp, #28]
 801585c:	2100      	movs	r1, #0
 801585e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015860:	1c58      	adds	r0, r3, #1
 8015862:	901b      	str	r0, [sp, #108]	; 0x6c
 8015864:	785b      	ldrb	r3, [r3, #1]
 8015866:	4608      	mov	r0, r1
 8015868:	e7c9      	b.n	80157fe <_strtod_l+0x1d6>
 801586a:	9805      	ldr	r0, [sp, #20]
 801586c:	e7d3      	b.n	8015816 <_strtod_l+0x1ee>
 801586e:	2908      	cmp	r1, #8
 8015870:	f101 0101 	add.w	r1, r1, #1
 8015874:	dc03      	bgt.n	801587e <_strtod_l+0x256>
 8015876:	9b07      	ldr	r3, [sp, #28]
 8015878:	437b      	muls	r3, r7
 801587a:	9307      	str	r3, [sp, #28]
 801587c:	e7e1      	b.n	8015842 <_strtod_l+0x21a>
 801587e:	2910      	cmp	r1, #16
 8015880:	bfd8      	it	le
 8015882:	437d      	mulle	r5, r7
 8015884:	e7dd      	b.n	8015842 <_strtod_l+0x21a>
 8015886:	2c10      	cmp	r4, #16
 8015888:	bfdc      	itt	le
 801588a:	210a      	movle	r1, #10
 801588c:	fb01 e505 	mlale	r5, r1, r5, lr
 8015890:	e7e4      	b.n	801585c <_strtod_l+0x234>
 8015892:	2301      	movs	r3, #1
 8015894:	9304      	str	r3, [sp, #16]
 8015896:	e781      	b.n	801579c <_strtod_l+0x174>
 8015898:	f04f 0c01 	mov.w	ip, #1
 801589c:	1cb3      	adds	r3, r6, #2
 801589e:	931b      	str	r3, [sp, #108]	; 0x6c
 80158a0:	78b3      	ldrb	r3, [r6, #2]
 80158a2:	e78a      	b.n	80157ba <_strtod_l+0x192>
 80158a4:	f04f 0c00 	mov.w	ip, #0
 80158a8:	e7f8      	b.n	801589c <_strtod_l+0x274>
 80158aa:	bf00      	nop
 80158ac:	0801bf4c 	.word	0x0801bf4c
 80158b0:	7ff00000 	.word	0x7ff00000
 80158b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80158b6:	1c5f      	adds	r7, r3, #1
 80158b8:	971b      	str	r7, [sp, #108]	; 0x6c
 80158ba:	785b      	ldrb	r3, [r3, #1]
 80158bc:	2b30      	cmp	r3, #48	; 0x30
 80158be:	d0f9      	beq.n	80158b4 <_strtod_l+0x28c>
 80158c0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80158c4:	2f08      	cmp	r7, #8
 80158c6:	f63f af7d 	bhi.w	80157c4 <_strtod_l+0x19c>
 80158ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80158ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80158d0:	930a      	str	r3, [sp, #40]	; 0x28
 80158d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80158d4:	1c5f      	adds	r7, r3, #1
 80158d6:	971b      	str	r7, [sp, #108]	; 0x6c
 80158d8:	785b      	ldrb	r3, [r3, #1]
 80158da:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80158de:	f1b8 0f09 	cmp.w	r8, #9
 80158e2:	d937      	bls.n	8015954 <_strtod_l+0x32c>
 80158e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80158e6:	1a7f      	subs	r7, r7, r1
 80158e8:	2f08      	cmp	r7, #8
 80158ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80158ee:	dc37      	bgt.n	8015960 <_strtod_l+0x338>
 80158f0:	45be      	cmp	lr, r7
 80158f2:	bfa8      	it	ge
 80158f4:	46be      	movge	lr, r7
 80158f6:	f1bc 0f00 	cmp.w	ip, #0
 80158fa:	d001      	beq.n	8015900 <_strtod_l+0x2d8>
 80158fc:	f1ce 0e00 	rsb	lr, lr, #0
 8015900:	2c00      	cmp	r4, #0
 8015902:	d151      	bne.n	80159a8 <_strtod_l+0x380>
 8015904:	2800      	cmp	r0, #0
 8015906:	f47f aece 	bne.w	80156a6 <_strtod_l+0x7e>
 801590a:	9a06      	ldr	r2, [sp, #24]
 801590c:	2a00      	cmp	r2, #0
 801590e:	f47f aeca 	bne.w	80156a6 <_strtod_l+0x7e>
 8015912:	9a04      	ldr	r2, [sp, #16]
 8015914:	2a00      	cmp	r2, #0
 8015916:	f47f aee4 	bne.w	80156e2 <_strtod_l+0xba>
 801591a:	2b4e      	cmp	r3, #78	; 0x4e
 801591c:	d027      	beq.n	801596e <_strtod_l+0x346>
 801591e:	dc21      	bgt.n	8015964 <_strtod_l+0x33c>
 8015920:	2b49      	cmp	r3, #73	; 0x49
 8015922:	f47f aede 	bne.w	80156e2 <_strtod_l+0xba>
 8015926:	49a0      	ldr	r1, [pc, #640]	; (8015ba8 <_strtod_l+0x580>)
 8015928:	a81b      	add	r0, sp, #108	; 0x6c
 801592a:	f001 fe79 	bl	8017620 <__match>
 801592e:	2800      	cmp	r0, #0
 8015930:	f43f aed7 	beq.w	80156e2 <_strtod_l+0xba>
 8015934:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015936:	499d      	ldr	r1, [pc, #628]	; (8015bac <_strtod_l+0x584>)
 8015938:	3b01      	subs	r3, #1
 801593a:	a81b      	add	r0, sp, #108	; 0x6c
 801593c:	931b      	str	r3, [sp, #108]	; 0x6c
 801593e:	f001 fe6f 	bl	8017620 <__match>
 8015942:	b910      	cbnz	r0, 801594a <_strtod_l+0x322>
 8015944:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015946:	3301      	adds	r3, #1
 8015948:	931b      	str	r3, [sp, #108]	; 0x6c
 801594a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015bc0 <_strtod_l+0x598>
 801594e:	f04f 0a00 	mov.w	sl, #0
 8015952:	e6a8      	b.n	80156a6 <_strtod_l+0x7e>
 8015954:	210a      	movs	r1, #10
 8015956:	fb01 3e0e 	mla	lr, r1, lr, r3
 801595a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801595e:	e7b8      	b.n	80158d2 <_strtod_l+0x2aa>
 8015960:	46be      	mov	lr, r7
 8015962:	e7c8      	b.n	80158f6 <_strtod_l+0x2ce>
 8015964:	2b69      	cmp	r3, #105	; 0x69
 8015966:	d0de      	beq.n	8015926 <_strtod_l+0x2fe>
 8015968:	2b6e      	cmp	r3, #110	; 0x6e
 801596a:	f47f aeba 	bne.w	80156e2 <_strtod_l+0xba>
 801596e:	4990      	ldr	r1, [pc, #576]	; (8015bb0 <_strtod_l+0x588>)
 8015970:	a81b      	add	r0, sp, #108	; 0x6c
 8015972:	f001 fe55 	bl	8017620 <__match>
 8015976:	2800      	cmp	r0, #0
 8015978:	f43f aeb3 	beq.w	80156e2 <_strtod_l+0xba>
 801597c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801597e:	781b      	ldrb	r3, [r3, #0]
 8015980:	2b28      	cmp	r3, #40	; 0x28
 8015982:	d10e      	bne.n	80159a2 <_strtod_l+0x37a>
 8015984:	aa1e      	add	r2, sp, #120	; 0x78
 8015986:	498b      	ldr	r1, [pc, #556]	; (8015bb4 <_strtod_l+0x58c>)
 8015988:	a81b      	add	r0, sp, #108	; 0x6c
 801598a:	f001 fe5d 	bl	8017648 <__hexnan>
 801598e:	2805      	cmp	r0, #5
 8015990:	d107      	bne.n	80159a2 <_strtod_l+0x37a>
 8015992:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015994:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015998:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801599c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80159a0:	e681      	b.n	80156a6 <_strtod_l+0x7e>
 80159a2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015bc8 <_strtod_l+0x5a0>
 80159a6:	e7d2      	b.n	801594e <_strtod_l+0x326>
 80159a8:	ebae 0302 	sub.w	r3, lr, r2
 80159ac:	9306      	str	r3, [sp, #24]
 80159ae:	9b05      	ldr	r3, [sp, #20]
 80159b0:	9807      	ldr	r0, [sp, #28]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	bf08      	it	eq
 80159b6:	4623      	moveq	r3, r4
 80159b8:	2c10      	cmp	r4, #16
 80159ba:	9305      	str	r3, [sp, #20]
 80159bc:	46a0      	mov	r8, r4
 80159be:	bfa8      	it	ge
 80159c0:	f04f 0810 	movge.w	r8, #16
 80159c4:	f7ea fdbe 	bl	8000544 <__aeabi_ui2d>
 80159c8:	2c09      	cmp	r4, #9
 80159ca:	4682      	mov	sl, r0
 80159cc:	468b      	mov	fp, r1
 80159ce:	dc13      	bgt.n	80159f8 <_strtod_l+0x3d0>
 80159d0:	9b06      	ldr	r3, [sp, #24]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	f43f ae67 	beq.w	80156a6 <_strtod_l+0x7e>
 80159d8:	9b06      	ldr	r3, [sp, #24]
 80159da:	dd7a      	ble.n	8015ad2 <_strtod_l+0x4aa>
 80159dc:	2b16      	cmp	r3, #22
 80159de:	dc61      	bgt.n	8015aa4 <_strtod_l+0x47c>
 80159e0:	4a75      	ldr	r2, [pc, #468]	; (8015bb8 <_strtod_l+0x590>)
 80159e2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80159e6:	e9de 0100 	ldrd	r0, r1, [lr]
 80159ea:	4652      	mov	r2, sl
 80159ec:	465b      	mov	r3, fp
 80159ee:	f7ea fe23 	bl	8000638 <__aeabi_dmul>
 80159f2:	4682      	mov	sl, r0
 80159f4:	468b      	mov	fp, r1
 80159f6:	e656      	b.n	80156a6 <_strtod_l+0x7e>
 80159f8:	4b6f      	ldr	r3, [pc, #444]	; (8015bb8 <_strtod_l+0x590>)
 80159fa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80159fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015a02:	f7ea fe19 	bl	8000638 <__aeabi_dmul>
 8015a06:	4606      	mov	r6, r0
 8015a08:	4628      	mov	r0, r5
 8015a0a:	460f      	mov	r7, r1
 8015a0c:	f7ea fd9a 	bl	8000544 <__aeabi_ui2d>
 8015a10:	4602      	mov	r2, r0
 8015a12:	460b      	mov	r3, r1
 8015a14:	4630      	mov	r0, r6
 8015a16:	4639      	mov	r1, r7
 8015a18:	f7ea fc58 	bl	80002cc <__adddf3>
 8015a1c:	2c0f      	cmp	r4, #15
 8015a1e:	4682      	mov	sl, r0
 8015a20:	468b      	mov	fp, r1
 8015a22:	ddd5      	ble.n	80159d0 <_strtod_l+0x3a8>
 8015a24:	9b06      	ldr	r3, [sp, #24]
 8015a26:	eba4 0808 	sub.w	r8, r4, r8
 8015a2a:	4498      	add	r8, r3
 8015a2c:	f1b8 0f00 	cmp.w	r8, #0
 8015a30:	f340 8096 	ble.w	8015b60 <_strtod_l+0x538>
 8015a34:	f018 030f 	ands.w	r3, r8, #15
 8015a38:	d00a      	beq.n	8015a50 <_strtod_l+0x428>
 8015a3a:	495f      	ldr	r1, [pc, #380]	; (8015bb8 <_strtod_l+0x590>)
 8015a3c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015a40:	4652      	mov	r2, sl
 8015a42:	465b      	mov	r3, fp
 8015a44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a48:	f7ea fdf6 	bl	8000638 <__aeabi_dmul>
 8015a4c:	4682      	mov	sl, r0
 8015a4e:	468b      	mov	fp, r1
 8015a50:	f038 080f 	bics.w	r8, r8, #15
 8015a54:	d073      	beq.n	8015b3e <_strtod_l+0x516>
 8015a56:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015a5a:	dd47      	ble.n	8015aec <_strtod_l+0x4c4>
 8015a5c:	2400      	movs	r4, #0
 8015a5e:	46a0      	mov	r8, r4
 8015a60:	9407      	str	r4, [sp, #28]
 8015a62:	9405      	str	r4, [sp, #20]
 8015a64:	2322      	movs	r3, #34	; 0x22
 8015a66:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015bc0 <_strtod_l+0x598>
 8015a6a:	f8c9 3000 	str.w	r3, [r9]
 8015a6e:	f04f 0a00 	mov.w	sl, #0
 8015a72:	9b07      	ldr	r3, [sp, #28]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	f43f ae16 	beq.w	80156a6 <_strtod_l+0x7e>
 8015a7a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015a7c:	4648      	mov	r0, r9
 8015a7e:	f001 feb9 	bl	80177f4 <_Bfree>
 8015a82:	9905      	ldr	r1, [sp, #20]
 8015a84:	4648      	mov	r0, r9
 8015a86:	f001 feb5 	bl	80177f4 <_Bfree>
 8015a8a:	4641      	mov	r1, r8
 8015a8c:	4648      	mov	r0, r9
 8015a8e:	f001 feb1 	bl	80177f4 <_Bfree>
 8015a92:	9907      	ldr	r1, [sp, #28]
 8015a94:	4648      	mov	r0, r9
 8015a96:	f001 fead 	bl	80177f4 <_Bfree>
 8015a9a:	4621      	mov	r1, r4
 8015a9c:	4648      	mov	r0, r9
 8015a9e:	f001 fea9 	bl	80177f4 <_Bfree>
 8015aa2:	e600      	b.n	80156a6 <_strtod_l+0x7e>
 8015aa4:	9a06      	ldr	r2, [sp, #24]
 8015aa6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015aaa:	4293      	cmp	r3, r2
 8015aac:	dbba      	blt.n	8015a24 <_strtod_l+0x3fc>
 8015aae:	4d42      	ldr	r5, [pc, #264]	; (8015bb8 <_strtod_l+0x590>)
 8015ab0:	f1c4 040f 	rsb	r4, r4, #15
 8015ab4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015ab8:	4652      	mov	r2, sl
 8015aba:	465b      	mov	r3, fp
 8015abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ac0:	f7ea fdba 	bl	8000638 <__aeabi_dmul>
 8015ac4:	9b06      	ldr	r3, [sp, #24]
 8015ac6:	1b1c      	subs	r4, r3, r4
 8015ac8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015acc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015ad0:	e78d      	b.n	80159ee <_strtod_l+0x3c6>
 8015ad2:	f113 0f16 	cmn.w	r3, #22
 8015ad6:	dba5      	blt.n	8015a24 <_strtod_l+0x3fc>
 8015ad8:	4a37      	ldr	r2, [pc, #220]	; (8015bb8 <_strtod_l+0x590>)
 8015ada:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015ade:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015ae2:	4650      	mov	r0, sl
 8015ae4:	4659      	mov	r1, fp
 8015ae6:	f7ea fed1 	bl	800088c <__aeabi_ddiv>
 8015aea:	e782      	b.n	80159f2 <_strtod_l+0x3ca>
 8015aec:	2300      	movs	r3, #0
 8015aee:	4e33      	ldr	r6, [pc, #204]	; (8015bbc <_strtod_l+0x594>)
 8015af0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015af4:	4650      	mov	r0, sl
 8015af6:	4659      	mov	r1, fp
 8015af8:	461d      	mov	r5, r3
 8015afa:	f1b8 0f01 	cmp.w	r8, #1
 8015afe:	dc21      	bgt.n	8015b44 <_strtod_l+0x51c>
 8015b00:	b10b      	cbz	r3, 8015b06 <_strtod_l+0x4de>
 8015b02:	4682      	mov	sl, r0
 8015b04:	468b      	mov	fp, r1
 8015b06:	4b2d      	ldr	r3, [pc, #180]	; (8015bbc <_strtod_l+0x594>)
 8015b08:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015b0c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015b10:	4652      	mov	r2, sl
 8015b12:	465b      	mov	r3, fp
 8015b14:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015b18:	f7ea fd8e 	bl	8000638 <__aeabi_dmul>
 8015b1c:	4b28      	ldr	r3, [pc, #160]	; (8015bc0 <_strtod_l+0x598>)
 8015b1e:	460a      	mov	r2, r1
 8015b20:	400b      	ands	r3, r1
 8015b22:	4928      	ldr	r1, [pc, #160]	; (8015bc4 <_strtod_l+0x59c>)
 8015b24:	428b      	cmp	r3, r1
 8015b26:	4682      	mov	sl, r0
 8015b28:	d898      	bhi.n	8015a5c <_strtod_l+0x434>
 8015b2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015b2e:	428b      	cmp	r3, r1
 8015b30:	bf86      	itte	hi
 8015b32:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015bcc <_strtod_l+0x5a4>
 8015b36:	f04f 3aff 	movhi.w	sl, #4294967295
 8015b3a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015b3e:	2300      	movs	r3, #0
 8015b40:	9304      	str	r3, [sp, #16]
 8015b42:	e077      	b.n	8015c34 <_strtod_l+0x60c>
 8015b44:	f018 0f01 	tst.w	r8, #1
 8015b48:	d006      	beq.n	8015b58 <_strtod_l+0x530>
 8015b4a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8015b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b52:	f7ea fd71 	bl	8000638 <__aeabi_dmul>
 8015b56:	2301      	movs	r3, #1
 8015b58:	3501      	adds	r5, #1
 8015b5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015b5e:	e7cc      	b.n	8015afa <_strtod_l+0x4d2>
 8015b60:	d0ed      	beq.n	8015b3e <_strtod_l+0x516>
 8015b62:	f1c8 0800 	rsb	r8, r8, #0
 8015b66:	f018 020f 	ands.w	r2, r8, #15
 8015b6a:	d00a      	beq.n	8015b82 <_strtod_l+0x55a>
 8015b6c:	4b12      	ldr	r3, [pc, #72]	; (8015bb8 <_strtod_l+0x590>)
 8015b6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015b72:	4650      	mov	r0, sl
 8015b74:	4659      	mov	r1, fp
 8015b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b7a:	f7ea fe87 	bl	800088c <__aeabi_ddiv>
 8015b7e:	4682      	mov	sl, r0
 8015b80:	468b      	mov	fp, r1
 8015b82:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015b86:	d0da      	beq.n	8015b3e <_strtod_l+0x516>
 8015b88:	f1b8 0f1f 	cmp.w	r8, #31
 8015b8c:	dd20      	ble.n	8015bd0 <_strtod_l+0x5a8>
 8015b8e:	2400      	movs	r4, #0
 8015b90:	46a0      	mov	r8, r4
 8015b92:	9407      	str	r4, [sp, #28]
 8015b94:	9405      	str	r4, [sp, #20]
 8015b96:	2322      	movs	r3, #34	; 0x22
 8015b98:	f04f 0a00 	mov.w	sl, #0
 8015b9c:	f04f 0b00 	mov.w	fp, #0
 8015ba0:	f8c9 3000 	str.w	r3, [r9]
 8015ba4:	e765      	b.n	8015a72 <_strtod_l+0x44a>
 8015ba6:	bf00      	nop
 8015ba8:	0801bf1b 	.word	0x0801bf1b
 8015bac:	0801c0a4 	.word	0x0801c0a4
 8015bb0:	0801bf23 	.word	0x0801bf23
 8015bb4:	0801bf60 	.word	0x0801bf60
 8015bb8:	0801c138 	.word	0x0801c138
 8015bbc:	0801c110 	.word	0x0801c110
 8015bc0:	7ff00000 	.word	0x7ff00000
 8015bc4:	7ca00000 	.word	0x7ca00000
 8015bc8:	fff80000 	.word	0xfff80000
 8015bcc:	7fefffff 	.word	0x7fefffff
 8015bd0:	f018 0310 	ands.w	r3, r8, #16
 8015bd4:	bf18      	it	ne
 8015bd6:	236a      	movne	r3, #106	; 0x6a
 8015bd8:	4da0      	ldr	r5, [pc, #640]	; (8015e5c <_strtod_l+0x834>)
 8015bda:	9304      	str	r3, [sp, #16]
 8015bdc:	4650      	mov	r0, sl
 8015bde:	4659      	mov	r1, fp
 8015be0:	2300      	movs	r3, #0
 8015be2:	f1b8 0f00 	cmp.w	r8, #0
 8015be6:	f300 810a 	bgt.w	8015dfe <_strtod_l+0x7d6>
 8015bea:	b10b      	cbz	r3, 8015bf0 <_strtod_l+0x5c8>
 8015bec:	4682      	mov	sl, r0
 8015bee:	468b      	mov	fp, r1
 8015bf0:	9b04      	ldr	r3, [sp, #16]
 8015bf2:	b1bb      	cbz	r3, 8015c24 <_strtod_l+0x5fc>
 8015bf4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015bf8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	4659      	mov	r1, fp
 8015c00:	dd10      	ble.n	8015c24 <_strtod_l+0x5fc>
 8015c02:	2b1f      	cmp	r3, #31
 8015c04:	f340 8107 	ble.w	8015e16 <_strtod_l+0x7ee>
 8015c08:	2b34      	cmp	r3, #52	; 0x34
 8015c0a:	bfde      	ittt	le
 8015c0c:	3b20      	suble	r3, #32
 8015c0e:	f04f 32ff 	movle.w	r2, #4294967295
 8015c12:	fa02 f303 	lslle.w	r3, r2, r3
 8015c16:	f04f 0a00 	mov.w	sl, #0
 8015c1a:	bfcc      	ite	gt
 8015c1c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015c20:	ea03 0b01 	andle.w	fp, r3, r1
 8015c24:	2200      	movs	r2, #0
 8015c26:	2300      	movs	r3, #0
 8015c28:	4650      	mov	r0, sl
 8015c2a:	4659      	mov	r1, fp
 8015c2c:	f7ea ff6c 	bl	8000b08 <__aeabi_dcmpeq>
 8015c30:	2800      	cmp	r0, #0
 8015c32:	d1ac      	bne.n	8015b8e <_strtod_l+0x566>
 8015c34:	9b07      	ldr	r3, [sp, #28]
 8015c36:	9300      	str	r3, [sp, #0]
 8015c38:	9a05      	ldr	r2, [sp, #20]
 8015c3a:	9908      	ldr	r1, [sp, #32]
 8015c3c:	4623      	mov	r3, r4
 8015c3e:	4648      	mov	r0, r9
 8015c40:	f001 fe2a 	bl	8017898 <__s2b>
 8015c44:	9007      	str	r0, [sp, #28]
 8015c46:	2800      	cmp	r0, #0
 8015c48:	f43f af08 	beq.w	8015a5c <_strtod_l+0x434>
 8015c4c:	9a06      	ldr	r2, [sp, #24]
 8015c4e:	9b06      	ldr	r3, [sp, #24]
 8015c50:	2a00      	cmp	r2, #0
 8015c52:	f1c3 0300 	rsb	r3, r3, #0
 8015c56:	bfa8      	it	ge
 8015c58:	2300      	movge	r3, #0
 8015c5a:	930e      	str	r3, [sp, #56]	; 0x38
 8015c5c:	2400      	movs	r4, #0
 8015c5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015c62:	9316      	str	r3, [sp, #88]	; 0x58
 8015c64:	46a0      	mov	r8, r4
 8015c66:	9b07      	ldr	r3, [sp, #28]
 8015c68:	4648      	mov	r0, r9
 8015c6a:	6859      	ldr	r1, [r3, #4]
 8015c6c:	f001 fd8e 	bl	801778c <_Balloc>
 8015c70:	9005      	str	r0, [sp, #20]
 8015c72:	2800      	cmp	r0, #0
 8015c74:	f43f aef6 	beq.w	8015a64 <_strtod_l+0x43c>
 8015c78:	9b07      	ldr	r3, [sp, #28]
 8015c7a:	691a      	ldr	r2, [r3, #16]
 8015c7c:	3202      	adds	r2, #2
 8015c7e:	f103 010c 	add.w	r1, r3, #12
 8015c82:	0092      	lsls	r2, r2, #2
 8015c84:	300c      	adds	r0, #12
 8015c86:	f7fe fef4 	bl	8014a72 <memcpy>
 8015c8a:	aa1e      	add	r2, sp, #120	; 0x78
 8015c8c:	a91d      	add	r1, sp, #116	; 0x74
 8015c8e:	ec4b ab10 	vmov	d0, sl, fp
 8015c92:	4648      	mov	r0, r9
 8015c94:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015c98:	f002 f8ba 	bl	8017e10 <__d2b>
 8015c9c:	901c      	str	r0, [sp, #112]	; 0x70
 8015c9e:	2800      	cmp	r0, #0
 8015ca0:	f43f aee0 	beq.w	8015a64 <_strtod_l+0x43c>
 8015ca4:	2101      	movs	r1, #1
 8015ca6:	4648      	mov	r0, r9
 8015ca8:	f001 fe82 	bl	80179b0 <__i2b>
 8015cac:	4680      	mov	r8, r0
 8015cae:	2800      	cmp	r0, #0
 8015cb0:	f43f aed8 	beq.w	8015a64 <_strtod_l+0x43c>
 8015cb4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015cb6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015cb8:	2e00      	cmp	r6, #0
 8015cba:	bfab      	itete	ge
 8015cbc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015cbe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015cc0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015cc2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015cc4:	bfac      	ite	ge
 8015cc6:	18f7      	addge	r7, r6, r3
 8015cc8:	1b9d      	sublt	r5, r3, r6
 8015cca:	9b04      	ldr	r3, [sp, #16]
 8015ccc:	1af6      	subs	r6, r6, r3
 8015cce:	4416      	add	r6, r2
 8015cd0:	4b63      	ldr	r3, [pc, #396]	; (8015e60 <_strtod_l+0x838>)
 8015cd2:	3e01      	subs	r6, #1
 8015cd4:	429e      	cmp	r6, r3
 8015cd6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015cda:	f280 80af 	bge.w	8015e3c <_strtod_l+0x814>
 8015cde:	1b9b      	subs	r3, r3, r6
 8015ce0:	2b1f      	cmp	r3, #31
 8015ce2:	eba2 0203 	sub.w	r2, r2, r3
 8015ce6:	f04f 0101 	mov.w	r1, #1
 8015cea:	f300 809b 	bgt.w	8015e24 <_strtod_l+0x7fc>
 8015cee:	fa01 f303 	lsl.w	r3, r1, r3
 8015cf2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8015cf8:	18be      	adds	r6, r7, r2
 8015cfa:	9b04      	ldr	r3, [sp, #16]
 8015cfc:	42b7      	cmp	r7, r6
 8015cfe:	4415      	add	r5, r2
 8015d00:	441d      	add	r5, r3
 8015d02:	463b      	mov	r3, r7
 8015d04:	bfa8      	it	ge
 8015d06:	4633      	movge	r3, r6
 8015d08:	42ab      	cmp	r3, r5
 8015d0a:	bfa8      	it	ge
 8015d0c:	462b      	movge	r3, r5
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	bfc2      	ittt	gt
 8015d12:	1af6      	subgt	r6, r6, r3
 8015d14:	1aed      	subgt	r5, r5, r3
 8015d16:	1aff      	subgt	r7, r7, r3
 8015d18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d1a:	b1bb      	cbz	r3, 8015d4c <_strtod_l+0x724>
 8015d1c:	4641      	mov	r1, r8
 8015d1e:	461a      	mov	r2, r3
 8015d20:	4648      	mov	r0, r9
 8015d22:	f001 fee5 	bl	8017af0 <__pow5mult>
 8015d26:	4680      	mov	r8, r0
 8015d28:	2800      	cmp	r0, #0
 8015d2a:	f43f ae9b 	beq.w	8015a64 <_strtod_l+0x43c>
 8015d2e:	4601      	mov	r1, r0
 8015d30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015d32:	4648      	mov	r0, r9
 8015d34:	f001 fe45 	bl	80179c2 <__multiply>
 8015d38:	900c      	str	r0, [sp, #48]	; 0x30
 8015d3a:	2800      	cmp	r0, #0
 8015d3c:	f43f ae92 	beq.w	8015a64 <_strtod_l+0x43c>
 8015d40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015d42:	4648      	mov	r0, r9
 8015d44:	f001 fd56 	bl	80177f4 <_Bfree>
 8015d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d4a:	931c      	str	r3, [sp, #112]	; 0x70
 8015d4c:	2e00      	cmp	r6, #0
 8015d4e:	dc7a      	bgt.n	8015e46 <_strtod_l+0x81e>
 8015d50:	9b06      	ldr	r3, [sp, #24]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	dd08      	ble.n	8015d68 <_strtod_l+0x740>
 8015d56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015d58:	9905      	ldr	r1, [sp, #20]
 8015d5a:	4648      	mov	r0, r9
 8015d5c:	f001 fec8 	bl	8017af0 <__pow5mult>
 8015d60:	9005      	str	r0, [sp, #20]
 8015d62:	2800      	cmp	r0, #0
 8015d64:	f43f ae7e 	beq.w	8015a64 <_strtod_l+0x43c>
 8015d68:	2d00      	cmp	r5, #0
 8015d6a:	dd08      	ble.n	8015d7e <_strtod_l+0x756>
 8015d6c:	462a      	mov	r2, r5
 8015d6e:	9905      	ldr	r1, [sp, #20]
 8015d70:	4648      	mov	r0, r9
 8015d72:	f001 ff0b 	bl	8017b8c <__lshift>
 8015d76:	9005      	str	r0, [sp, #20]
 8015d78:	2800      	cmp	r0, #0
 8015d7a:	f43f ae73 	beq.w	8015a64 <_strtod_l+0x43c>
 8015d7e:	2f00      	cmp	r7, #0
 8015d80:	dd08      	ble.n	8015d94 <_strtod_l+0x76c>
 8015d82:	4641      	mov	r1, r8
 8015d84:	463a      	mov	r2, r7
 8015d86:	4648      	mov	r0, r9
 8015d88:	f001 ff00 	bl	8017b8c <__lshift>
 8015d8c:	4680      	mov	r8, r0
 8015d8e:	2800      	cmp	r0, #0
 8015d90:	f43f ae68 	beq.w	8015a64 <_strtod_l+0x43c>
 8015d94:	9a05      	ldr	r2, [sp, #20]
 8015d96:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015d98:	4648      	mov	r0, r9
 8015d9a:	f001 ff65 	bl	8017c68 <__mdiff>
 8015d9e:	4604      	mov	r4, r0
 8015da0:	2800      	cmp	r0, #0
 8015da2:	f43f ae5f 	beq.w	8015a64 <_strtod_l+0x43c>
 8015da6:	68c3      	ldr	r3, [r0, #12]
 8015da8:	930c      	str	r3, [sp, #48]	; 0x30
 8015daa:	2300      	movs	r3, #0
 8015dac:	60c3      	str	r3, [r0, #12]
 8015dae:	4641      	mov	r1, r8
 8015db0:	f001 ff40 	bl	8017c34 <__mcmp>
 8015db4:	2800      	cmp	r0, #0
 8015db6:	da55      	bge.n	8015e64 <_strtod_l+0x83c>
 8015db8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015dba:	b9e3      	cbnz	r3, 8015df6 <_strtod_l+0x7ce>
 8015dbc:	f1ba 0f00 	cmp.w	sl, #0
 8015dc0:	d119      	bne.n	8015df6 <_strtod_l+0x7ce>
 8015dc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015dc6:	b9b3      	cbnz	r3, 8015df6 <_strtod_l+0x7ce>
 8015dc8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015dcc:	0d1b      	lsrs	r3, r3, #20
 8015dce:	051b      	lsls	r3, r3, #20
 8015dd0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015dd4:	d90f      	bls.n	8015df6 <_strtod_l+0x7ce>
 8015dd6:	6963      	ldr	r3, [r4, #20]
 8015dd8:	b913      	cbnz	r3, 8015de0 <_strtod_l+0x7b8>
 8015dda:	6923      	ldr	r3, [r4, #16]
 8015ddc:	2b01      	cmp	r3, #1
 8015dde:	dd0a      	ble.n	8015df6 <_strtod_l+0x7ce>
 8015de0:	4621      	mov	r1, r4
 8015de2:	2201      	movs	r2, #1
 8015de4:	4648      	mov	r0, r9
 8015de6:	f001 fed1 	bl	8017b8c <__lshift>
 8015dea:	4641      	mov	r1, r8
 8015dec:	4604      	mov	r4, r0
 8015dee:	f001 ff21 	bl	8017c34 <__mcmp>
 8015df2:	2800      	cmp	r0, #0
 8015df4:	dc67      	bgt.n	8015ec6 <_strtod_l+0x89e>
 8015df6:	9b04      	ldr	r3, [sp, #16]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d171      	bne.n	8015ee0 <_strtod_l+0x8b8>
 8015dfc:	e63d      	b.n	8015a7a <_strtod_l+0x452>
 8015dfe:	f018 0f01 	tst.w	r8, #1
 8015e02:	d004      	beq.n	8015e0e <_strtod_l+0x7e6>
 8015e04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015e08:	f7ea fc16 	bl	8000638 <__aeabi_dmul>
 8015e0c:	2301      	movs	r3, #1
 8015e0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015e12:	3508      	adds	r5, #8
 8015e14:	e6e5      	b.n	8015be2 <_strtod_l+0x5ba>
 8015e16:	f04f 32ff 	mov.w	r2, #4294967295
 8015e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8015e1e:	ea03 0a0a 	and.w	sl, r3, sl
 8015e22:	e6ff      	b.n	8015c24 <_strtod_l+0x5fc>
 8015e24:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015e28:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015e2c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015e30:	36e2      	adds	r6, #226	; 0xe2
 8015e32:	fa01 f306 	lsl.w	r3, r1, r6
 8015e36:	930a      	str	r3, [sp, #40]	; 0x28
 8015e38:	910f      	str	r1, [sp, #60]	; 0x3c
 8015e3a:	e75d      	b.n	8015cf8 <_strtod_l+0x6d0>
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8015e40:	2301      	movs	r3, #1
 8015e42:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e44:	e758      	b.n	8015cf8 <_strtod_l+0x6d0>
 8015e46:	4632      	mov	r2, r6
 8015e48:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015e4a:	4648      	mov	r0, r9
 8015e4c:	f001 fe9e 	bl	8017b8c <__lshift>
 8015e50:	901c      	str	r0, [sp, #112]	; 0x70
 8015e52:	2800      	cmp	r0, #0
 8015e54:	f47f af7c 	bne.w	8015d50 <_strtod_l+0x728>
 8015e58:	e604      	b.n	8015a64 <_strtod_l+0x43c>
 8015e5a:	bf00      	nop
 8015e5c:	0801bf78 	.word	0x0801bf78
 8015e60:	fffffc02 	.word	0xfffffc02
 8015e64:	465d      	mov	r5, fp
 8015e66:	f040 8086 	bne.w	8015f76 <_strtod_l+0x94e>
 8015e6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015e6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015e70:	b32a      	cbz	r2, 8015ebe <_strtod_l+0x896>
 8015e72:	4aaf      	ldr	r2, [pc, #700]	; (8016130 <_strtod_l+0xb08>)
 8015e74:	4293      	cmp	r3, r2
 8015e76:	d153      	bne.n	8015f20 <_strtod_l+0x8f8>
 8015e78:	9b04      	ldr	r3, [sp, #16]
 8015e7a:	4650      	mov	r0, sl
 8015e7c:	b1d3      	cbz	r3, 8015eb4 <_strtod_l+0x88c>
 8015e7e:	4aad      	ldr	r2, [pc, #692]	; (8016134 <_strtod_l+0xb0c>)
 8015e80:	402a      	ands	r2, r5
 8015e82:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015e86:	f04f 31ff 	mov.w	r1, #4294967295
 8015e8a:	d816      	bhi.n	8015eba <_strtod_l+0x892>
 8015e8c:	0d12      	lsrs	r2, r2, #20
 8015e8e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015e92:	fa01 f303 	lsl.w	r3, r1, r3
 8015e96:	4298      	cmp	r0, r3
 8015e98:	d142      	bne.n	8015f20 <_strtod_l+0x8f8>
 8015e9a:	4ba7      	ldr	r3, [pc, #668]	; (8016138 <_strtod_l+0xb10>)
 8015e9c:	429d      	cmp	r5, r3
 8015e9e:	d102      	bne.n	8015ea6 <_strtod_l+0x87e>
 8015ea0:	3001      	adds	r0, #1
 8015ea2:	f43f addf 	beq.w	8015a64 <_strtod_l+0x43c>
 8015ea6:	4ba3      	ldr	r3, [pc, #652]	; (8016134 <_strtod_l+0xb0c>)
 8015ea8:	402b      	ands	r3, r5
 8015eaa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015eae:	f04f 0a00 	mov.w	sl, #0
 8015eb2:	e7a0      	b.n	8015df6 <_strtod_l+0x7ce>
 8015eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8015eb8:	e7ed      	b.n	8015e96 <_strtod_l+0x86e>
 8015eba:	460b      	mov	r3, r1
 8015ebc:	e7eb      	b.n	8015e96 <_strtod_l+0x86e>
 8015ebe:	bb7b      	cbnz	r3, 8015f20 <_strtod_l+0x8f8>
 8015ec0:	f1ba 0f00 	cmp.w	sl, #0
 8015ec4:	d12c      	bne.n	8015f20 <_strtod_l+0x8f8>
 8015ec6:	9904      	ldr	r1, [sp, #16]
 8015ec8:	4a9a      	ldr	r2, [pc, #616]	; (8016134 <_strtod_l+0xb0c>)
 8015eca:	465b      	mov	r3, fp
 8015ecc:	b1f1      	cbz	r1, 8015f0c <_strtod_l+0x8e4>
 8015ece:	ea02 010b 	and.w	r1, r2, fp
 8015ed2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015ed6:	dc19      	bgt.n	8015f0c <_strtod_l+0x8e4>
 8015ed8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015edc:	f77f ae5b 	ble.w	8015b96 <_strtod_l+0x56e>
 8015ee0:	4a96      	ldr	r2, [pc, #600]	; (801613c <_strtod_l+0xb14>)
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015ee8:	4650      	mov	r0, sl
 8015eea:	4659      	mov	r1, fp
 8015eec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015ef0:	f7ea fba2 	bl	8000638 <__aeabi_dmul>
 8015ef4:	4682      	mov	sl, r0
 8015ef6:	468b      	mov	fp, r1
 8015ef8:	2900      	cmp	r1, #0
 8015efa:	f47f adbe 	bne.w	8015a7a <_strtod_l+0x452>
 8015efe:	2800      	cmp	r0, #0
 8015f00:	f47f adbb 	bne.w	8015a7a <_strtod_l+0x452>
 8015f04:	2322      	movs	r3, #34	; 0x22
 8015f06:	f8c9 3000 	str.w	r3, [r9]
 8015f0a:	e5b6      	b.n	8015a7a <_strtod_l+0x452>
 8015f0c:	4013      	ands	r3, r2
 8015f0e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015f12:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015f16:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015f1a:	f04f 3aff 	mov.w	sl, #4294967295
 8015f1e:	e76a      	b.n	8015df6 <_strtod_l+0x7ce>
 8015f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f22:	b193      	cbz	r3, 8015f4a <_strtod_l+0x922>
 8015f24:	422b      	tst	r3, r5
 8015f26:	f43f af66 	beq.w	8015df6 <_strtod_l+0x7ce>
 8015f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f2c:	9a04      	ldr	r2, [sp, #16]
 8015f2e:	4650      	mov	r0, sl
 8015f30:	4659      	mov	r1, fp
 8015f32:	b173      	cbz	r3, 8015f52 <_strtod_l+0x92a>
 8015f34:	f7ff fb5c 	bl	80155f0 <sulp>
 8015f38:	4602      	mov	r2, r0
 8015f3a:	460b      	mov	r3, r1
 8015f3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015f40:	f7ea f9c4 	bl	80002cc <__adddf3>
 8015f44:	4682      	mov	sl, r0
 8015f46:	468b      	mov	fp, r1
 8015f48:	e755      	b.n	8015df6 <_strtod_l+0x7ce>
 8015f4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f4c:	ea13 0f0a 	tst.w	r3, sl
 8015f50:	e7e9      	b.n	8015f26 <_strtod_l+0x8fe>
 8015f52:	f7ff fb4d 	bl	80155f0 <sulp>
 8015f56:	4602      	mov	r2, r0
 8015f58:	460b      	mov	r3, r1
 8015f5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015f5e:	f7ea f9b3 	bl	80002c8 <__aeabi_dsub>
 8015f62:	2200      	movs	r2, #0
 8015f64:	2300      	movs	r3, #0
 8015f66:	4682      	mov	sl, r0
 8015f68:	468b      	mov	fp, r1
 8015f6a:	f7ea fdcd 	bl	8000b08 <__aeabi_dcmpeq>
 8015f6e:	2800      	cmp	r0, #0
 8015f70:	f47f ae11 	bne.w	8015b96 <_strtod_l+0x56e>
 8015f74:	e73f      	b.n	8015df6 <_strtod_l+0x7ce>
 8015f76:	4641      	mov	r1, r8
 8015f78:	4620      	mov	r0, r4
 8015f7a:	f001 ff98 	bl	8017eae <__ratio>
 8015f7e:	ec57 6b10 	vmov	r6, r7, d0
 8015f82:	2200      	movs	r2, #0
 8015f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015f88:	ee10 0a10 	vmov	r0, s0
 8015f8c:	4639      	mov	r1, r7
 8015f8e:	f7ea fdcf 	bl	8000b30 <__aeabi_dcmple>
 8015f92:	2800      	cmp	r0, #0
 8015f94:	d077      	beq.n	8016086 <_strtod_l+0xa5e>
 8015f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d04a      	beq.n	8016032 <_strtod_l+0xa0a>
 8015f9c:	4b68      	ldr	r3, [pc, #416]	; (8016140 <_strtod_l+0xb18>)
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015fa4:	4f66      	ldr	r7, [pc, #408]	; (8016140 <_strtod_l+0xb18>)
 8015fa6:	2600      	movs	r6, #0
 8015fa8:	4b62      	ldr	r3, [pc, #392]	; (8016134 <_strtod_l+0xb0c>)
 8015faa:	402b      	ands	r3, r5
 8015fac:	930f      	str	r3, [sp, #60]	; 0x3c
 8015fae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015fb0:	4b64      	ldr	r3, [pc, #400]	; (8016144 <_strtod_l+0xb1c>)
 8015fb2:	429a      	cmp	r2, r3
 8015fb4:	f040 80ce 	bne.w	8016154 <_strtod_l+0xb2c>
 8015fb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015fbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015fc0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8015fc4:	ec4b ab10 	vmov	d0, sl, fp
 8015fc8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8015fcc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015fd0:	f001 fea8 	bl	8017d24 <__ulp>
 8015fd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015fd8:	ec53 2b10 	vmov	r2, r3, d0
 8015fdc:	f7ea fb2c 	bl	8000638 <__aeabi_dmul>
 8015fe0:	4652      	mov	r2, sl
 8015fe2:	465b      	mov	r3, fp
 8015fe4:	f7ea f972 	bl	80002cc <__adddf3>
 8015fe8:	460b      	mov	r3, r1
 8015fea:	4952      	ldr	r1, [pc, #328]	; (8016134 <_strtod_l+0xb0c>)
 8015fec:	4a56      	ldr	r2, [pc, #344]	; (8016148 <_strtod_l+0xb20>)
 8015fee:	4019      	ands	r1, r3
 8015ff0:	4291      	cmp	r1, r2
 8015ff2:	4682      	mov	sl, r0
 8015ff4:	d95b      	bls.n	80160ae <_strtod_l+0xa86>
 8015ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ff8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015ffc:	4293      	cmp	r3, r2
 8015ffe:	d103      	bne.n	8016008 <_strtod_l+0x9e0>
 8016000:	9b08      	ldr	r3, [sp, #32]
 8016002:	3301      	adds	r3, #1
 8016004:	f43f ad2e 	beq.w	8015a64 <_strtod_l+0x43c>
 8016008:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016138 <_strtod_l+0xb10>
 801600c:	f04f 3aff 	mov.w	sl, #4294967295
 8016010:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016012:	4648      	mov	r0, r9
 8016014:	f001 fbee 	bl	80177f4 <_Bfree>
 8016018:	9905      	ldr	r1, [sp, #20]
 801601a:	4648      	mov	r0, r9
 801601c:	f001 fbea 	bl	80177f4 <_Bfree>
 8016020:	4641      	mov	r1, r8
 8016022:	4648      	mov	r0, r9
 8016024:	f001 fbe6 	bl	80177f4 <_Bfree>
 8016028:	4621      	mov	r1, r4
 801602a:	4648      	mov	r0, r9
 801602c:	f001 fbe2 	bl	80177f4 <_Bfree>
 8016030:	e619      	b.n	8015c66 <_strtod_l+0x63e>
 8016032:	f1ba 0f00 	cmp.w	sl, #0
 8016036:	d11a      	bne.n	801606e <_strtod_l+0xa46>
 8016038:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801603c:	b9eb      	cbnz	r3, 801607a <_strtod_l+0xa52>
 801603e:	2200      	movs	r2, #0
 8016040:	4b3f      	ldr	r3, [pc, #252]	; (8016140 <_strtod_l+0xb18>)
 8016042:	4630      	mov	r0, r6
 8016044:	4639      	mov	r1, r7
 8016046:	f7ea fd69 	bl	8000b1c <__aeabi_dcmplt>
 801604a:	b9c8      	cbnz	r0, 8016080 <_strtod_l+0xa58>
 801604c:	4630      	mov	r0, r6
 801604e:	4639      	mov	r1, r7
 8016050:	2200      	movs	r2, #0
 8016052:	4b3e      	ldr	r3, [pc, #248]	; (801614c <_strtod_l+0xb24>)
 8016054:	f7ea faf0 	bl	8000638 <__aeabi_dmul>
 8016058:	4606      	mov	r6, r0
 801605a:	460f      	mov	r7, r1
 801605c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016060:	9618      	str	r6, [sp, #96]	; 0x60
 8016062:	9319      	str	r3, [sp, #100]	; 0x64
 8016064:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016068:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801606c:	e79c      	b.n	8015fa8 <_strtod_l+0x980>
 801606e:	f1ba 0f01 	cmp.w	sl, #1
 8016072:	d102      	bne.n	801607a <_strtod_l+0xa52>
 8016074:	2d00      	cmp	r5, #0
 8016076:	f43f ad8e 	beq.w	8015b96 <_strtod_l+0x56e>
 801607a:	2200      	movs	r2, #0
 801607c:	4b34      	ldr	r3, [pc, #208]	; (8016150 <_strtod_l+0xb28>)
 801607e:	e78f      	b.n	8015fa0 <_strtod_l+0x978>
 8016080:	2600      	movs	r6, #0
 8016082:	4f32      	ldr	r7, [pc, #200]	; (801614c <_strtod_l+0xb24>)
 8016084:	e7ea      	b.n	801605c <_strtod_l+0xa34>
 8016086:	4b31      	ldr	r3, [pc, #196]	; (801614c <_strtod_l+0xb24>)
 8016088:	4630      	mov	r0, r6
 801608a:	4639      	mov	r1, r7
 801608c:	2200      	movs	r2, #0
 801608e:	f7ea fad3 	bl	8000638 <__aeabi_dmul>
 8016092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016094:	4606      	mov	r6, r0
 8016096:	460f      	mov	r7, r1
 8016098:	b933      	cbnz	r3, 80160a8 <_strtod_l+0xa80>
 801609a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801609e:	9010      	str	r0, [sp, #64]	; 0x40
 80160a0:	9311      	str	r3, [sp, #68]	; 0x44
 80160a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80160a6:	e7df      	b.n	8016068 <_strtod_l+0xa40>
 80160a8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80160ac:	e7f9      	b.n	80160a2 <_strtod_l+0xa7a>
 80160ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80160b2:	9b04      	ldr	r3, [sp, #16]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d1ab      	bne.n	8016010 <_strtod_l+0x9e8>
 80160b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80160bc:	0d1b      	lsrs	r3, r3, #20
 80160be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80160c0:	051b      	lsls	r3, r3, #20
 80160c2:	429a      	cmp	r2, r3
 80160c4:	465d      	mov	r5, fp
 80160c6:	d1a3      	bne.n	8016010 <_strtod_l+0x9e8>
 80160c8:	4639      	mov	r1, r7
 80160ca:	4630      	mov	r0, r6
 80160cc:	f7ea fd64 	bl	8000b98 <__aeabi_d2iz>
 80160d0:	f7ea fa48 	bl	8000564 <__aeabi_i2d>
 80160d4:	460b      	mov	r3, r1
 80160d6:	4602      	mov	r2, r0
 80160d8:	4639      	mov	r1, r7
 80160da:	4630      	mov	r0, r6
 80160dc:	f7ea f8f4 	bl	80002c8 <__aeabi_dsub>
 80160e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160e2:	4606      	mov	r6, r0
 80160e4:	460f      	mov	r7, r1
 80160e6:	b933      	cbnz	r3, 80160f6 <_strtod_l+0xace>
 80160e8:	f1ba 0f00 	cmp.w	sl, #0
 80160ec:	d103      	bne.n	80160f6 <_strtod_l+0xace>
 80160ee:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80160f2:	2d00      	cmp	r5, #0
 80160f4:	d06d      	beq.n	80161d2 <_strtod_l+0xbaa>
 80160f6:	a30a      	add	r3, pc, #40	; (adr r3, 8016120 <_strtod_l+0xaf8>)
 80160f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160fc:	4630      	mov	r0, r6
 80160fe:	4639      	mov	r1, r7
 8016100:	f7ea fd0c 	bl	8000b1c <__aeabi_dcmplt>
 8016104:	2800      	cmp	r0, #0
 8016106:	f47f acb8 	bne.w	8015a7a <_strtod_l+0x452>
 801610a:	a307      	add	r3, pc, #28	; (adr r3, 8016128 <_strtod_l+0xb00>)
 801610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016110:	4630      	mov	r0, r6
 8016112:	4639      	mov	r1, r7
 8016114:	f7ea fd20 	bl	8000b58 <__aeabi_dcmpgt>
 8016118:	2800      	cmp	r0, #0
 801611a:	f43f af79 	beq.w	8016010 <_strtod_l+0x9e8>
 801611e:	e4ac      	b.n	8015a7a <_strtod_l+0x452>
 8016120:	94a03595 	.word	0x94a03595
 8016124:	3fdfffff 	.word	0x3fdfffff
 8016128:	35afe535 	.word	0x35afe535
 801612c:	3fe00000 	.word	0x3fe00000
 8016130:	000fffff 	.word	0x000fffff
 8016134:	7ff00000 	.word	0x7ff00000
 8016138:	7fefffff 	.word	0x7fefffff
 801613c:	39500000 	.word	0x39500000
 8016140:	3ff00000 	.word	0x3ff00000
 8016144:	7fe00000 	.word	0x7fe00000
 8016148:	7c9fffff 	.word	0x7c9fffff
 801614c:	3fe00000 	.word	0x3fe00000
 8016150:	bff00000 	.word	0xbff00000
 8016154:	9b04      	ldr	r3, [sp, #16]
 8016156:	b333      	cbz	r3, 80161a6 <_strtod_l+0xb7e>
 8016158:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801615a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801615e:	d822      	bhi.n	80161a6 <_strtod_l+0xb7e>
 8016160:	a327      	add	r3, pc, #156	; (adr r3, 8016200 <_strtod_l+0xbd8>)
 8016162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016166:	4630      	mov	r0, r6
 8016168:	4639      	mov	r1, r7
 801616a:	f7ea fce1 	bl	8000b30 <__aeabi_dcmple>
 801616e:	b1a0      	cbz	r0, 801619a <_strtod_l+0xb72>
 8016170:	4639      	mov	r1, r7
 8016172:	4630      	mov	r0, r6
 8016174:	f7ea fd38 	bl	8000be8 <__aeabi_d2uiz>
 8016178:	2800      	cmp	r0, #0
 801617a:	bf08      	it	eq
 801617c:	2001      	moveq	r0, #1
 801617e:	f7ea f9e1 	bl	8000544 <__aeabi_ui2d>
 8016182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016184:	4606      	mov	r6, r0
 8016186:	460f      	mov	r7, r1
 8016188:	bb03      	cbnz	r3, 80161cc <_strtod_l+0xba4>
 801618a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801618e:	9012      	str	r0, [sp, #72]	; 0x48
 8016190:	9313      	str	r3, [sp, #76]	; 0x4c
 8016192:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016196:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801619a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801619c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801619e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80161a2:	1a9b      	subs	r3, r3, r2
 80161a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80161a6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80161aa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80161ae:	f001 fdb9 	bl	8017d24 <__ulp>
 80161b2:	4650      	mov	r0, sl
 80161b4:	ec53 2b10 	vmov	r2, r3, d0
 80161b8:	4659      	mov	r1, fp
 80161ba:	f7ea fa3d 	bl	8000638 <__aeabi_dmul>
 80161be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80161c2:	f7ea f883 	bl	80002cc <__adddf3>
 80161c6:	4682      	mov	sl, r0
 80161c8:	468b      	mov	fp, r1
 80161ca:	e772      	b.n	80160b2 <_strtod_l+0xa8a>
 80161cc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80161d0:	e7df      	b.n	8016192 <_strtod_l+0xb6a>
 80161d2:	a30d      	add	r3, pc, #52	; (adr r3, 8016208 <_strtod_l+0xbe0>)
 80161d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161d8:	f7ea fca0 	bl	8000b1c <__aeabi_dcmplt>
 80161dc:	e79c      	b.n	8016118 <_strtod_l+0xaf0>
 80161de:	2300      	movs	r3, #0
 80161e0:	930d      	str	r3, [sp, #52]	; 0x34
 80161e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80161e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161e6:	6013      	str	r3, [r2, #0]
 80161e8:	f7ff ba61 	b.w	80156ae <_strtod_l+0x86>
 80161ec:	2b65      	cmp	r3, #101	; 0x65
 80161ee:	f04f 0200 	mov.w	r2, #0
 80161f2:	f43f ab4e 	beq.w	8015892 <_strtod_l+0x26a>
 80161f6:	2101      	movs	r1, #1
 80161f8:	4614      	mov	r4, r2
 80161fa:	9104      	str	r1, [sp, #16]
 80161fc:	f7ff bacb 	b.w	8015796 <_strtod_l+0x16e>
 8016200:	ffc00000 	.word	0xffc00000
 8016204:	41dfffff 	.word	0x41dfffff
 8016208:	94a03595 	.word	0x94a03595
 801620c:	3fcfffff 	.word	0x3fcfffff

08016210 <strtod>:
 8016210:	4b07      	ldr	r3, [pc, #28]	; (8016230 <strtod+0x20>)
 8016212:	4a08      	ldr	r2, [pc, #32]	; (8016234 <strtod+0x24>)
 8016214:	b410      	push	{r4}
 8016216:	681c      	ldr	r4, [r3, #0]
 8016218:	6a23      	ldr	r3, [r4, #32]
 801621a:	2b00      	cmp	r3, #0
 801621c:	bf08      	it	eq
 801621e:	4613      	moveq	r3, r2
 8016220:	460a      	mov	r2, r1
 8016222:	4601      	mov	r1, r0
 8016224:	4620      	mov	r0, r4
 8016226:	f85d 4b04 	ldr.w	r4, [sp], #4
 801622a:	f7ff b9fd 	b.w	8015628 <_strtod_l>
 801622e:	bf00      	nop
 8016230:	2000003c 	.word	0x2000003c
 8016234:	200000a0 	.word	0x200000a0

08016238 <strtok>:
 8016238:	4b13      	ldr	r3, [pc, #76]	; (8016288 <strtok+0x50>)
 801623a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801623e:	681d      	ldr	r5, [r3, #0]
 8016240:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8016242:	4606      	mov	r6, r0
 8016244:	460f      	mov	r7, r1
 8016246:	b9b4      	cbnz	r4, 8016276 <strtok+0x3e>
 8016248:	2050      	movs	r0, #80	; 0x50
 801624a:	f7fe fbe1 	bl	8014a10 <malloc>
 801624e:	65a8      	str	r0, [r5, #88]	; 0x58
 8016250:	e9c0 4400 	strd	r4, r4, [r0]
 8016254:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8016258:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801625c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8016260:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8016264:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8016268:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801626c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8016270:	6184      	str	r4, [r0, #24]
 8016272:	7704      	strb	r4, [r0, #28]
 8016274:	6244      	str	r4, [r0, #36]	; 0x24
 8016276:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8016278:	4639      	mov	r1, r7
 801627a:	4630      	mov	r0, r6
 801627c:	2301      	movs	r3, #1
 801627e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016282:	f000 b803 	b.w	801628c <__strtok_r>
 8016286:	bf00      	nop
 8016288:	2000003c 	.word	0x2000003c

0801628c <__strtok_r>:
 801628c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801628e:	b918      	cbnz	r0, 8016298 <__strtok_r+0xc>
 8016290:	6810      	ldr	r0, [r2, #0]
 8016292:	b908      	cbnz	r0, 8016298 <__strtok_r+0xc>
 8016294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016296:	4620      	mov	r0, r4
 8016298:	4604      	mov	r4, r0
 801629a:	460f      	mov	r7, r1
 801629c:	f814 5b01 	ldrb.w	r5, [r4], #1
 80162a0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80162a4:	b91e      	cbnz	r6, 80162ae <__strtok_r+0x22>
 80162a6:	b96d      	cbnz	r5, 80162c4 <__strtok_r+0x38>
 80162a8:	6015      	str	r5, [r2, #0]
 80162aa:	4628      	mov	r0, r5
 80162ac:	e7f2      	b.n	8016294 <__strtok_r+0x8>
 80162ae:	42b5      	cmp	r5, r6
 80162b0:	d1f6      	bne.n	80162a0 <__strtok_r+0x14>
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d1ef      	bne.n	8016296 <__strtok_r+0xa>
 80162b6:	6014      	str	r4, [r2, #0]
 80162b8:	7003      	strb	r3, [r0, #0]
 80162ba:	e7eb      	b.n	8016294 <__strtok_r+0x8>
 80162bc:	462b      	mov	r3, r5
 80162be:	e00d      	b.n	80162dc <__strtok_r+0x50>
 80162c0:	b926      	cbnz	r6, 80162cc <__strtok_r+0x40>
 80162c2:	461c      	mov	r4, r3
 80162c4:	4623      	mov	r3, r4
 80162c6:	460f      	mov	r7, r1
 80162c8:	f813 5b01 	ldrb.w	r5, [r3], #1
 80162cc:	f817 6b01 	ldrb.w	r6, [r7], #1
 80162d0:	42b5      	cmp	r5, r6
 80162d2:	d1f5      	bne.n	80162c0 <__strtok_r+0x34>
 80162d4:	2d00      	cmp	r5, #0
 80162d6:	d0f1      	beq.n	80162bc <__strtok_r+0x30>
 80162d8:	2100      	movs	r1, #0
 80162da:	7021      	strb	r1, [r4, #0]
 80162dc:	6013      	str	r3, [r2, #0]
 80162de:	e7d9      	b.n	8016294 <__strtok_r+0x8>

080162e0 <__ascii_wctomb>:
 80162e0:	b149      	cbz	r1, 80162f6 <__ascii_wctomb+0x16>
 80162e2:	2aff      	cmp	r2, #255	; 0xff
 80162e4:	bf85      	ittet	hi
 80162e6:	238a      	movhi	r3, #138	; 0x8a
 80162e8:	6003      	strhi	r3, [r0, #0]
 80162ea:	700a      	strbls	r2, [r1, #0]
 80162ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80162f0:	bf98      	it	ls
 80162f2:	2001      	movls	r0, #1
 80162f4:	4770      	bx	lr
 80162f6:	4608      	mov	r0, r1
 80162f8:	4770      	bx	lr

080162fa <quorem>:
 80162fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162fe:	6903      	ldr	r3, [r0, #16]
 8016300:	690c      	ldr	r4, [r1, #16]
 8016302:	42a3      	cmp	r3, r4
 8016304:	4680      	mov	r8, r0
 8016306:	f2c0 8082 	blt.w	801640e <quorem+0x114>
 801630a:	3c01      	subs	r4, #1
 801630c:	f101 0714 	add.w	r7, r1, #20
 8016310:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016314:	f100 0614 	add.w	r6, r0, #20
 8016318:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801631c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016320:	eb06 030c 	add.w	r3, r6, ip
 8016324:	3501      	adds	r5, #1
 8016326:	eb07 090c 	add.w	r9, r7, ip
 801632a:	9301      	str	r3, [sp, #4]
 801632c:	fbb0 f5f5 	udiv	r5, r0, r5
 8016330:	b395      	cbz	r5, 8016398 <quorem+0x9e>
 8016332:	f04f 0a00 	mov.w	sl, #0
 8016336:	4638      	mov	r0, r7
 8016338:	46b6      	mov	lr, r6
 801633a:	46d3      	mov	fp, sl
 801633c:	f850 2b04 	ldr.w	r2, [r0], #4
 8016340:	b293      	uxth	r3, r2
 8016342:	fb05 a303 	mla	r3, r5, r3, sl
 8016346:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801634a:	b29b      	uxth	r3, r3
 801634c:	ebab 0303 	sub.w	r3, fp, r3
 8016350:	0c12      	lsrs	r2, r2, #16
 8016352:	f8de b000 	ldr.w	fp, [lr]
 8016356:	fb05 a202 	mla	r2, r5, r2, sl
 801635a:	fa13 f38b 	uxtah	r3, r3, fp
 801635e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016362:	fa1f fb82 	uxth.w	fp, r2
 8016366:	f8de 2000 	ldr.w	r2, [lr]
 801636a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801636e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016372:	b29b      	uxth	r3, r3
 8016374:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016378:	4581      	cmp	r9, r0
 801637a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801637e:	f84e 3b04 	str.w	r3, [lr], #4
 8016382:	d2db      	bcs.n	801633c <quorem+0x42>
 8016384:	f856 300c 	ldr.w	r3, [r6, ip]
 8016388:	b933      	cbnz	r3, 8016398 <quorem+0x9e>
 801638a:	9b01      	ldr	r3, [sp, #4]
 801638c:	3b04      	subs	r3, #4
 801638e:	429e      	cmp	r6, r3
 8016390:	461a      	mov	r2, r3
 8016392:	d330      	bcc.n	80163f6 <quorem+0xfc>
 8016394:	f8c8 4010 	str.w	r4, [r8, #16]
 8016398:	4640      	mov	r0, r8
 801639a:	f001 fc4b 	bl	8017c34 <__mcmp>
 801639e:	2800      	cmp	r0, #0
 80163a0:	db25      	blt.n	80163ee <quorem+0xf4>
 80163a2:	3501      	adds	r5, #1
 80163a4:	4630      	mov	r0, r6
 80163a6:	f04f 0c00 	mov.w	ip, #0
 80163aa:	f857 2b04 	ldr.w	r2, [r7], #4
 80163ae:	f8d0 e000 	ldr.w	lr, [r0]
 80163b2:	b293      	uxth	r3, r2
 80163b4:	ebac 0303 	sub.w	r3, ip, r3
 80163b8:	0c12      	lsrs	r2, r2, #16
 80163ba:	fa13 f38e 	uxtah	r3, r3, lr
 80163be:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80163c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80163c6:	b29b      	uxth	r3, r3
 80163c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80163cc:	45b9      	cmp	r9, r7
 80163ce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80163d2:	f840 3b04 	str.w	r3, [r0], #4
 80163d6:	d2e8      	bcs.n	80163aa <quorem+0xb0>
 80163d8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80163dc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80163e0:	b92a      	cbnz	r2, 80163ee <quorem+0xf4>
 80163e2:	3b04      	subs	r3, #4
 80163e4:	429e      	cmp	r6, r3
 80163e6:	461a      	mov	r2, r3
 80163e8:	d30b      	bcc.n	8016402 <quorem+0x108>
 80163ea:	f8c8 4010 	str.w	r4, [r8, #16]
 80163ee:	4628      	mov	r0, r5
 80163f0:	b003      	add	sp, #12
 80163f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163f6:	6812      	ldr	r2, [r2, #0]
 80163f8:	3b04      	subs	r3, #4
 80163fa:	2a00      	cmp	r2, #0
 80163fc:	d1ca      	bne.n	8016394 <quorem+0x9a>
 80163fe:	3c01      	subs	r4, #1
 8016400:	e7c5      	b.n	801638e <quorem+0x94>
 8016402:	6812      	ldr	r2, [r2, #0]
 8016404:	3b04      	subs	r3, #4
 8016406:	2a00      	cmp	r2, #0
 8016408:	d1ef      	bne.n	80163ea <quorem+0xf0>
 801640a:	3c01      	subs	r4, #1
 801640c:	e7ea      	b.n	80163e4 <quorem+0xea>
 801640e:	2000      	movs	r0, #0
 8016410:	e7ee      	b.n	80163f0 <quorem+0xf6>
 8016412:	0000      	movs	r0, r0
 8016414:	0000      	movs	r0, r0
	...

08016418 <_dtoa_r>:
 8016418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801641c:	ec57 6b10 	vmov	r6, r7, d0
 8016420:	b097      	sub	sp, #92	; 0x5c
 8016422:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016424:	9106      	str	r1, [sp, #24]
 8016426:	4604      	mov	r4, r0
 8016428:	920b      	str	r2, [sp, #44]	; 0x2c
 801642a:	9312      	str	r3, [sp, #72]	; 0x48
 801642c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016430:	e9cd 6700 	strd	r6, r7, [sp]
 8016434:	b93d      	cbnz	r5, 8016446 <_dtoa_r+0x2e>
 8016436:	2010      	movs	r0, #16
 8016438:	f7fe faea 	bl	8014a10 <malloc>
 801643c:	6260      	str	r0, [r4, #36]	; 0x24
 801643e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016442:	6005      	str	r5, [r0, #0]
 8016444:	60c5      	str	r5, [r0, #12]
 8016446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016448:	6819      	ldr	r1, [r3, #0]
 801644a:	b151      	cbz	r1, 8016462 <_dtoa_r+0x4a>
 801644c:	685a      	ldr	r2, [r3, #4]
 801644e:	604a      	str	r2, [r1, #4]
 8016450:	2301      	movs	r3, #1
 8016452:	4093      	lsls	r3, r2
 8016454:	608b      	str	r3, [r1, #8]
 8016456:	4620      	mov	r0, r4
 8016458:	f001 f9cc 	bl	80177f4 <_Bfree>
 801645c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801645e:	2200      	movs	r2, #0
 8016460:	601a      	str	r2, [r3, #0]
 8016462:	1e3b      	subs	r3, r7, #0
 8016464:	bfbb      	ittet	lt
 8016466:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801646a:	9301      	strlt	r3, [sp, #4]
 801646c:	2300      	movge	r3, #0
 801646e:	2201      	movlt	r2, #1
 8016470:	bfac      	ite	ge
 8016472:	f8c8 3000 	strge.w	r3, [r8]
 8016476:	f8c8 2000 	strlt.w	r2, [r8]
 801647a:	4baf      	ldr	r3, [pc, #700]	; (8016738 <_dtoa_r+0x320>)
 801647c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016480:	ea33 0308 	bics.w	r3, r3, r8
 8016484:	d114      	bne.n	80164b0 <_dtoa_r+0x98>
 8016486:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016488:	f242 730f 	movw	r3, #9999	; 0x270f
 801648c:	6013      	str	r3, [r2, #0]
 801648e:	9b00      	ldr	r3, [sp, #0]
 8016490:	b923      	cbnz	r3, 801649c <_dtoa_r+0x84>
 8016492:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016496:	2800      	cmp	r0, #0
 8016498:	f000 8542 	beq.w	8016f20 <_dtoa_r+0xb08>
 801649c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801649e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801674c <_dtoa_r+0x334>
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	f000 8544 	beq.w	8016f30 <_dtoa_r+0xb18>
 80164a8:	f10b 0303 	add.w	r3, fp, #3
 80164ac:	f000 bd3e 	b.w	8016f2c <_dtoa_r+0xb14>
 80164b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80164b4:	2200      	movs	r2, #0
 80164b6:	2300      	movs	r3, #0
 80164b8:	4630      	mov	r0, r6
 80164ba:	4639      	mov	r1, r7
 80164bc:	f7ea fb24 	bl	8000b08 <__aeabi_dcmpeq>
 80164c0:	4681      	mov	r9, r0
 80164c2:	b168      	cbz	r0, 80164e0 <_dtoa_r+0xc8>
 80164c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80164c6:	2301      	movs	r3, #1
 80164c8:	6013      	str	r3, [r2, #0]
 80164ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	f000 8524 	beq.w	8016f1a <_dtoa_r+0xb02>
 80164d2:	4b9a      	ldr	r3, [pc, #616]	; (801673c <_dtoa_r+0x324>)
 80164d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80164d6:	f103 3bff 	add.w	fp, r3, #4294967295
 80164da:	6013      	str	r3, [r2, #0]
 80164dc:	f000 bd28 	b.w	8016f30 <_dtoa_r+0xb18>
 80164e0:	aa14      	add	r2, sp, #80	; 0x50
 80164e2:	a915      	add	r1, sp, #84	; 0x54
 80164e4:	ec47 6b10 	vmov	d0, r6, r7
 80164e8:	4620      	mov	r0, r4
 80164ea:	f001 fc91 	bl	8017e10 <__d2b>
 80164ee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80164f2:	9004      	str	r0, [sp, #16]
 80164f4:	2d00      	cmp	r5, #0
 80164f6:	d07c      	beq.n	80165f2 <_dtoa_r+0x1da>
 80164f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80164fc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016500:	46b2      	mov	sl, r6
 8016502:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016506:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801650a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801650e:	2200      	movs	r2, #0
 8016510:	4b8b      	ldr	r3, [pc, #556]	; (8016740 <_dtoa_r+0x328>)
 8016512:	4650      	mov	r0, sl
 8016514:	4659      	mov	r1, fp
 8016516:	f7e9 fed7 	bl	80002c8 <__aeabi_dsub>
 801651a:	a381      	add	r3, pc, #516	; (adr r3, 8016720 <_dtoa_r+0x308>)
 801651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016520:	f7ea f88a 	bl	8000638 <__aeabi_dmul>
 8016524:	a380      	add	r3, pc, #512	; (adr r3, 8016728 <_dtoa_r+0x310>)
 8016526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801652a:	f7e9 fecf 	bl	80002cc <__adddf3>
 801652e:	4606      	mov	r6, r0
 8016530:	4628      	mov	r0, r5
 8016532:	460f      	mov	r7, r1
 8016534:	f7ea f816 	bl	8000564 <__aeabi_i2d>
 8016538:	a37d      	add	r3, pc, #500	; (adr r3, 8016730 <_dtoa_r+0x318>)
 801653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801653e:	f7ea f87b 	bl	8000638 <__aeabi_dmul>
 8016542:	4602      	mov	r2, r0
 8016544:	460b      	mov	r3, r1
 8016546:	4630      	mov	r0, r6
 8016548:	4639      	mov	r1, r7
 801654a:	f7e9 febf 	bl	80002cc <__adddf3>
 801654e:	4606      	mov	r6, r0
 8016550:	460f      	mov	r7, r1
 8016552:	f7ea fb21 	bl	8000b98 <__aeabi_d2iz>
 8016556:	2200      	movs	r2, #0
 8016558:	4682      	mov	sl, r0
 801655a:	2300      	movs	r3, #0
 801655c:	4630      	mov	r0, r6
 801655e:	4639      	mov	r1, r7
 8016560:	f7ea fadc 	bl	8000b1c <__aeabi_dcmplt>
 8016564:	b148      	cbz	r0, 801657a <_dtoa_r+0x162>
 8016566:	4650      	mov	r0, sl
 8016568:	f7e9 fffc 	bl	8000564 <__aeabi_i2d>
 801656c:	4632      	mov	r2, r6
 801656e:	463b      	mov	r3, r7
 8016570:	f7ea faca 	bl	8000b08 <__aeabi_dcmpeq>
 8016574:	b908      	cbnz	r0, 801657a <_dtoa_r+0x162>
 8016576:	f10a 3aff 	add.w	sl, sl, #4294967295
 801657a:	f1ba 0f16 	cmp.w	sl, #22
 801657e:	d859      	bhi.n	8016634 <_dtoa_r+0x21c>
 8016580:	4970      	ldr	r1, [pc, #448]	; (8016744 <_dtoa_r+0x32c>)
 8016582:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016586:	e9dd 2300 	ldrd	r2, r3, [sp]
 801658a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801658e:	f7ea fae3 	bl	8000b58 <__aeabi_dcmpgt>
 8016592:	2800      	cmp	r0, #0
 8016594:	d050      	beq.n	8016638 <_dtoa_r+0x220>
 8016596:	f10a 3aff 	add.w	sl, sl, #4294967295
 801659a:	2300      	movs	r3, #0
 801659c:	930f      	str	r3, [sp, #60]	; 0x3c
 801659e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80165a0:	1b5d      	subs	r5, r3, r5
 80165a2:	f1b5 0801 	subs.w	r8, r5, #1
 80165a6:	bf49      	itett	mi
 80165a8:	f1c5 0301 	rsbmi	r3, r5, #1
 80165ac:	2300      	movpl	r3, #0
 80165ae:	9305      	strmi	r3, [sp, #20]
 80165b0:	f04f 0800 	movmi.w	r8, #0
 80165b4:	bf58      	it	pl
 80165b6:	9305      	strpl	r3, [sp, #20]
 80165b8:	f1ba 0f00 	cmp.w	sl, #0
 80165bc:	db3e      	blt.n	801663c <_dtoa_r+0x224>
 80165be:	2300      	movs	r3, #0
 80165c0:	44d0      	add	r8, sl
 80165c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80165c6:	9307      	str	r3, [sp, #28]
 80165c8:	9b06      	ldr	r3, [sp, #24]
 80165ca:	2b09      	cmp	r3, #9
 80165cc:	f200 8090 	bhi.w	80166f0 <_dtoa_r+0x2d8>
 80165d0:	2b05      	cmp	r3, #5
 80165d2:	bfc4      	itt	gt
 80165d4:	3b04      	subgt	r3, #4
 80165d6:	9306      	strgt	r3, [sp, #24]
 80165d8:	9b06      	ldr	r3, [sp, #24]
 80165da:	f1a3 0302 	sub.w	r3, r3, #2
 80165de:	bfcc      	ite	gt
 80165e0:	2500      	movgt	r5, #0
 80165e2:	2501      	movle	r5, #1
 80165e4:	2b03      	cmp	r3, #3
 80165e6:	f200 808f 	bhi.w	8016708 <_dtoa_r+0x2f0>
 80165ea:	e8df f003 	tbb	[pc, r3]
 80165ee:	7f7d      	.short	0x7f7d
 80165f0:	7131      	.short	0x7131
 80165f2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80165f6:	441d      	add	r5, r3
 80165f8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80165fc:	2820      	cmp	r0, #32
 80165fe:	dd13      	ble.n	8016628 <_dtoa_r+0x210>
 8016600:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016604:	9b00      	ldr	r3, [sp, #0]
 8016606:	fa08 f800 	lsl.w	r8, r8, r0
 801660a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801660e:	fa23 f000 	lsr.w	r0, r3, r0
 8016612:	ea48 0000 	orr.w	r0, r8, r0
 8016616:	f7e9 ff95 	bl	8000544 <__aeabi_ui2d>
 801661a:	2301      	movs	r3, #1
 801661c:	4682      	mov	sl, r0
 801661e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016622:	3d01      	subs	r5, #1
 8016624:	9313      	str	r3, [sp, #76]	; 0x4c
 8016626:	e772      	b.n	801650e <_dtoa_r+0xf6>
 8016628:	9b00      	ldr	r3, [sp, #0]
 801662a:	f1c0 0020 	rsb	r0, r0, #32
 801662e:	fa03 f000 	lsl.w	r0, r3, r0
 8016632:	e7f0      	b.n	8016616 <_dtoa_r+0x1fe>
 8016634:	2301      	movs	r3, #1
 8016636:	e7b1      	b.n	801659c <_dtoa_r+0x184>
 8016638:	900f      	str	r0, [sp, #60]	; 0x3c
 801663a:	e7b0      	b.n	801659e <_dtoa_r+0x186>
 801663c:	9b05      	ldr	r3, [sp, #20]
 801663e:	eba3 030a 	sub.w	r3, r3, sl
 8016642:	9305      	str	r3, [sp, #20]
 8016644:	f1ca 0300 	rsb	r3, sl, #0
 8016648:	9307      	str	r3, [sp, #28]
 801664a:	2300      	movs	r3, #0
 801664c:	930e      	str	r3, [sp, #56]	; 0x38
 801664e:	e7bb      	b.n	80165c8 <_dtoa_r+0x1b0>
 8016650:	2301      	movs	r3, #1
 8016652:	930a      	str	r3, [sp, #40]	; 0x28
 8016654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016656:	2b00      	cmp	r3, #0
 8016658:	dd59      	ble.n	801670e <_dtoa_r+0x2f6>
 801665a:	9302      	str	r3, [sp, #8]
 801665c:	4699      	mov	r9, r3
 801665e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016660:	2200      	movs	r2, #0
 8016662:	6072      	str	r2, [r6, #4]
 8016664:	2204      	movs	r2, #4
 8016666:	f102 0014 	add.w	r0, r2, #20
 801666a:	4298      	cmp	r0, r3
 801666c:	6871      	ldr	r1, [r6, #4]
 801666e:	d953      	bls.n	8016718 <_dtoa_r+0x300>
 8016670:	4620      	mov	r0, r4
 8016672:	f001 f88b 	bl	801778c <_Balloc>
 8016676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016678:	6030      	str	r0, [r6, #0]
 801667a:	f1b9 0f0e 	cmp.w	r9, #14
 801667e:	f8d3 b000 	ldr.w	fp, [r3]
 8016682:	f200 80e6 	bhi.w	8016852 <_dtoa_r+0x43a>
 8016686:	2d00      	cmp	r5, #0
 8016688:	f000 80e3 	beq.w	8016852 <_dtoa_r+0x43a>
 801668c:	ed9d 7b00 	vldr	d7, [sp]
 8016690:	f1ba 0f00 	cmp.w	sl, #0
 8016694:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016698:	dd74      	ble.n	8016784 <_dtoa_r+0x36c>
 801669a:	4a2a      	ldr	r2, [pc, #168]	; (8016744 <_dtoa_r+0x32c>)
 801669c:	f00a 030f 	and.w	r3, sl, #15
 80166a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80166a4:	ed93 7b00 	vldr	d7, [r3]
 80166a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80166ac:	06f0      	lsls	r0, r6, #27
 80166ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 80166b2:	d565      	bpl.n	8016780 <_dtoa_r+0x368>
 80166b4:	4b24      	ldr	r3, [pc, #144]	; (8016748 <_dtoa_r+0x330>)
 80166b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80166ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80166be:	f7ea f8e5 	bl	800088c <__aeabi_ddiv>
 80166c2:	e9cd 0100 	strd	r0, r1, [sp]
 80166c6:	f006 060f 	and.w	r6, r6, #15
 80166ca:	2503      	movs	r5, #3
 80166cc:	4f1e      	ldr	r7, [pc, #120]	; (8016748 <_dtoa_r+0x330>)
 80166ce:	e04c      	b.n	801676a <_dtoa_r+0x352>
 80166d0:	2301      	movs	r3, #1
 80166d2:	930a      	str	r3, [sp, #40]	; 0x28
 80166d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166d6:	4453      	add	r3, sl
 80166d8:	f103 0901 	add.w	r9, r3, #1
 80166dc:	9302      	str	r3, [sp, #8]
 80166de:	464b      	mov	r3, r9
 80166e0:	2b01      	cmp	r3, #1
 80166e2:	bfb8      	it	lt
 80166e4:	2301      	movlt	r3, #1
 80166e6:	e7ba      	b.n	801665e <_dtoa_r+0x246>
 80166e8:	2300      	movs	r3, #0
 80166ea:	e7b2      	b.n	8016652 <_dtoa_r+0x23a>
 80166ec:	2300      	movs	r3, #0
 80166ee:	e7f0      	b.n	80166d2 <_dtoa_r+0x2ba>
 80166f0:	2501      	movs	r5, #1
 80166f2:	2300      	movs	r3, #0
 80166f4:	9306      	str	r3, [sp, #24]
 80166f6:	950a      	str	r5, [sp, #40]	; 0x28
 80166f8:	f04f 33ff 	mov.w	r3, #4294967295
 80166fc:	9302      	str	r3, [sp, #8]
 80166fe:	4699      	mov	r9, r3
 8016700:	2200      	movs	r2, #0
 8016702:	2312      	movs	r3, #18
 8016704:	920b      	str	r2, [sp, #44]	; 0x2c
 8016706:	e7aa      	b.n	801665e <_dtoa_r+0x246>
 8016708:	2301      	movs	r3, #1
 801670a:	930a      	str	r3, [sp, #40]	; 0x28
 801670c:	e7f4      	b.n	80166f8 <_dtoa_r+0x2e0>
 801670e:	2301      	movs	r3, #1
 8016710:	9302      	str	r3, [sp, #8]
 8016712:	4699      	mov	r9, r3
 8016714:	461a      	mov	r2, r3
 8016716:	e7f5      	b.n	8016704 <_dtoa_r+0x2ec>
 8016718:	3101      	adds	r1, #1
 801671a:	6071      	str	r1, [r6, #4]
 801671c:	0052      	lsls	r2, r2, #1
 801671e:	e7a2      	b.n	8016666 <_dtoa_r+0x24e>
 8016720:	636f4361 	.word	0x636f4361
 8016724:	3fd287a7 	.word	0x3fd287a7
 8016728:	8b60c8b3 	.word	0x8b60c8b3
 801672c:	3fc68a28 	.word	0x3fc68a28
 8016730:	509f79fb 	.word	0x509f79fb
 8016734:	3fd34413 	.word	0x3fd34413
 8016738:	7ff00000 	.word	0x7ff00000
 801673c:	0801bf27 	.word	0x0801bf27
 8016740:	3ff80000 	.word	0x3ff80000
 8016744:	0801c138 	.word	0x0801c138
 8016748:	0801c110 	.word	0x0801c110
 801674c:	0801c0aa 	.word	0x0801c0aa
 8016750:	07f1      	lsls	r1, r6, #31
 8016752:	d508      	bpl.n	8016766 <_dtoa_r+0x34e>
 8016754:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016758:	e9d7 2300 	ldrd	r2, r3, [r7]
 801675c:	f7e9 ff6c 	bl	8000638 <__aeabi_dmul>
 8016760:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016764:	3501      	adds	r5, #1
 8016766:	1076      	asrs	r6, r6, #1
 8016768:	3708      	adds	r7, #8
 801676a:	2e00      	cmp	r6, #0
 801676c:	d1f0      	bne.n	8016750 <_dtoa_r+0x338>
 801676e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016772:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016776:	f7ea f889 	bl	800088c <__aeabi_ddiv>
 801677a:	e9cd 0100 	strd	r0, r1, [sp]
 801677e:	e01a      	b.n	80167b6 <_dtoa_r+0x39e>
 8016780:	2502      	movs	r5, #2
 8016782:	e7a3      	b.n	80166cc <_dtoa_r+0x2b4>
 8016784:	f000 80a0 	beq.w	80168c8 <_dtoa_r+0x4b0>
 8016788:	f1ca 0600 	rsb	r6, sl, #0
 801678c:	4b9f      	ldr	r3, [pc, #636]	; (8016a0c <_dtoa_r+0x5f4>)
 801678e:	4fa0      	ldr	r7, [pc, #640]	; (8016a10 <_dtoa_r+0x5f8>)
 8016790:	f006 020f 	and.w	r2, r6, #15
 8016794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801679c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80167a0:	f7e9 ff4a 	bl	8000638 <__aeabi_dmul>
 80167a4:	e9cd 0100 	strd	r0, r1, [sp]
 80167a8:	1136      	asrs	r6, r6, #4
 80167aa:	2300      	movs	r3, #0
 80167ac:	2502      	movs	r5, #2
 80167ae:	2e00      	cmp	r6, #0
 80167b0:	d17f      	bne.n	80168b2 <_dtoa_r+0x49a>
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d1e1      	bne.n	801677a <_dtoa_r+0x362>
 80167b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	f000 8087 	beq.w	80168cc <_dtoa_r+0x4b4>
 80167be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80167c2:	2200      	movs	r2, #0
 80167c4:	4b93      	ldr	r3, [pc, #588]	; (8016a14 <_dtoa_r+0x5fc>)
 80167c6:	4630      	mov	r0, r6
 80167c8:	4639      	mov	r1, r7
 80167ca:	f7ea f9a7 	bl	8000b1c <__aeabi_dcmplt>
 80167ce:	2800      	cmp	r0, #0
 80167d0:	d07c      	beq.n	80168cc <_dtoa_r+0x4b4>
 80167d2:	f1b9 0f00 	cmp.w	r9, #0
 80167d6:	d079      	beq.n	80168cc <_dtoa_r+0x4b4>
 80167d8:	9b02      	ldr	r3, [sp, #8]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	dd35      	ble.n	801684a <_dtoa_r+0x432>
 80167de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80167e2:	9308      	str	r3, [sp, #32]
 80167e4:	4639      	mov	r1, r7
 80167e6:	2200      	movs	r2, #0
 80167e8:	4b8b      	ldr	r3, [pc, #556]	; (8016a18 <_dtoa_r+0x600>)
 80167ea:	4630      	mov	r0, r6
 80167ec:	f7e9 ff24 	bl	8000638 <__aeabi_dmul>
 80167f0:	e9cd 0100 	strd	r0, r1, [sp]
 80167f4:	9f02      	ldr	r7, [sp, #8]
 80167f6:	3501      	adds	r5, #1
 80167f8:	4628      	mov	r0, r5
 80167fa:	f7e9 feb3 	bl	8000564 <__aeabi_i2d>
 80167fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016802:	f7e9 ff19 	bl	8000638 <__aeabi_dmul>
 8016806:	2200      	movs	r2, #0
 8016808:	4b84      	ldr	r3, [pc, #528]	; (8016a1c <_dtoa_r+0x604>)
 801680a:	f7e9 fd5f 	bl	80002cc <__adddf3>
 801680e:	4605      	mov	r5, r0
 8016810:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016814:	2f00      	cmp	r7, #0
 8016816:	d15d      	bne.n	80168d4 <_dtoa_r+0x4bc>
 8016818:	2200      	movs	r2, #0
 801681a:	4b81      	ldr	r3, [pc, #516]	; (8016a20 <_dtoa_r+0x608>)
 801681c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016820:	f7e9 fd52 	bl	80002c8 <__aeabi_dsub>
 8016824:	462a      	mov	r2, r5
 8016826:	4633      	mov	r3, r6
 8016828:	e9cd 0100 	strd	r0, r1, [sp]
 801682c:	f7ea f994 	bl	8000b58 <__aeabi_dcmpgt>
 8016830:	2800      	cmp	r0, #0
 8016832:	f040 8288 	bne.w	8016d46 <_dtoa_r+0x92e>
 8016836:	462a      	mov	r2, r5
 8016838:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801683c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016840:	f7ea f96c 	bl	8000b1c <__aeabi_dcmplt>
 8016844:	2800      	cmp	r0, #0
 8016846:	f040 827c 	bne.w	8016d42 <_dtoa_r+0x92a>
 801684a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801684e:	e9cd 2300 	strd	r2, r3, [sp]
 8016852:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016854:	2b00      	cmp	r3, #0
 8016856:	f2c0 8150 	blt.w	8016afa <_dtoa_r+0x6e2>
 801685a:	f1ba 0f0e 	cmp.w	sl, #14
 801685e:	f300 814c 	bgt.w	8016afa <_dtoa_r+0x6e2>
 8016862:	4b6a      	ldr	r3, [pc, #424]	; (8016a0c <_dtoa_r+0x5f4>)
 8016864:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016868:	ed93 7b00 	vldr	d7, [r3]
 801686c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801686e:	2b00      	cmp	r3, #0
 8016870:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016874:	f280 80d8 	bge.w	8016a28 <_dtoa_r+0x610>
 8016878:	f1b9 0f00 	cmp.w	r9, #0
 801687c:	f300 80d4 	bgt.w	8016a28 <_dtoa_r+0x610>
 8016880:	f040 825e 	bne.w	8016d40 <_dtoa_r+0x928>
 8016884:	2200      	movs	r2, #0
 8016886:	4b66      	ldr	r3, [pc, #408]	; (8016a20 <_dtoa_r+0x608>)
 8016888:	ec51 0b17 	vmov	r0, r1, d7
 801688c:	f7e9 fed4 	bl	8000638 <__aeabi_dmul>
 8016890:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016894:	f7ea f956 	bl	8000b44 <__aeabi_dcmpge>
 8016898:	464f      	mov	r7, r9
 801689a:	464e      	mov	r6, r9
 801689c:	2800      	cmp	r0, #0
 801689e:	f040 8234 	bne.w	8016d0a <_dtoa_r+0x8f2>
 80168a2:	2331      	movs	r3, #49	; 0x31
 80168a4:	f10b 0501 	add.w	r5, fp, #1
 80168a8:	f88b 3000 	strb.w	r3, [fp]
 80168ac:	f10a 0a01 	add.w	sl, sl, #1
 80168b0:	e22f      	b.n	8016d12 <_dtoa_r+0x8fa>
 80168b2:	07f2      	lsls	r2, r6, #31
 80168b4:	d505      	bpl.n	80168c2 <_dtoa_r+0x4aa>
 80168b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80168ba:	f7e9 febd 	bl	8000638 <__aeabi_dmul>
 80168be:	3501      	adds	r5, #1
 80168c0:	2301      	movs	r3, #1
 80168c2:	1076      	asrs	r6, r6, #1
 80168c4:	3708      	adds	r7, #8
 80168c6:	e772      	b.n	80167ae <_dtoa_r+0x396>
 80168c8:	2502      	movs	r5, #2
 80168ca:	e774      	b.n	80167b6 <_dtoa_r+0x39e>
 80168cc:	f8cd a020 	str.w	sl, [sp, #32]
 80168d0:	464f      	mov	r7, r9
 80168d2:	e791      	b.n	80167f8 <_dtoa_r+0x3e0>
 80168d4:	4b4d      	ldr	r3, [pc, #308]	; (8016a0c <_dtoa_r+0x5f4>)
 80168d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80168da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80168de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d047      	beq.n	8016974 <_dtoa_r+0x55c>
 80168e4:	4602      	mov	r2, r0
 80168e6:	460b      	mov	r3, r1
 80168e8:	2000      	movs	r0, #0
 80168ea:	494e      	ldr	r1, [pc, #312]	; (8016a24 <_dtoa_r+0x60c>)
 80168ec:	f7e9 ffce 	bl	800088c <__aeabi_ddiv>
 80168f0:	462a      	mov	r2, r5
 80168f2:	4633      	mov	r3, r6
 80168f4:	f7e9 fce8 	bl	80002c8 <__aeabi_dsub>
 80168f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80168fc:	465d      	mov	r5, fp
 80168fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016902:	f7ea f949 	bl	8000b98 <__aeabi_d2iz>
 8016906:	4606      	mov	r6, r0
 8016908:	f7e9 fe2c 	bl	8000564 <__aeabi_i2d>
 801690c:	4602      	mov	r2, r0
 801690e:	460b      	mov	r3, r1
 8016910:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016914:	f7e9 fcd8 	bl	80002c8 <__aeabi_dsub>
 8016918:	3630      	adds	r6, #48	; 0x30
 801691a:	f805 6b01 	strb.w	r6, [r5], #1
 801691e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016922:	e9cd 0100 	strd	r0, r1, [sp]
 8016926:	f7ea f8f9 	bl	8000b1c <__aeabi_dcmplt>
 801692a:	2800      	cmp	r0, #0
 801692c:	d163      	bne.n	80169f6 <_dtoa_r+0x5de>
 801692e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016932:	2000      	movs	r0, #0
 8016934:	4937      	ldr	r1, [pc, #220]	; (8016a14 <_dtoa_r+0x5fc>)
 8016936:	f7e9 fcc7 	bl	80002c8 <__aeabi_dsub>
 801693a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801693e:	f7ea f8ed 	bl	8000b1c <__aeabi_dcmplt>
 8016942:	2800      	cmp	r0, #0
 8016944:	f040 80b7 	bne.w	8016ab6 <_dtoa_r+0x69e>
 8016948:	eba5 030b 	sub.w	r3, r5, fp
 801694c:	429f      	cmp	r7, r3
 801694e:	f77f af7c 	ble.w	801684a <_dtoa_r+0x432>
 8016952:	2200      	movs	r2, #0
 8016954:	4b30      	ldr	r3, [pc, #192]	; (8016a18 <_dtoa_r+0x600>)
 8016956:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801695a:	f7e9 fe6d 	bl	8000638 <__aeabi_dmul>
 801695e:	2200      	movs	r2, #0
 8016960:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016964:	4b2c      	ldr	r3, [pc, #176]	; (8016a18 <_dtoa_r+0x600>)
 8016966:	e9dd 0100 	ldrd	r0, r1, [sp]
 801696a:	f7e9 fe65 	bl	8000638 <__aeabi_dmul>
 801696e:	e9cd 0100 	strd	r0, r1, [sp]
 8016972:	e7c4      	b.n	80168fe <_dtoa_r+0x4e6>
 8016974:	462a      	mov	r2, r5
 8016976:	4633      	mov	r3, r6
 8016978:	f7e9 fe5e 	bl	8000638 <__aeabi_dmul>
 801697c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016980:	eb0b 0507 	add.w	r5, fp, r7
 8016984:	465e      	mov	r6, fp
 8016986:	e9dd 0100 	ldrd	r0, r1, [sp]
 801698a:	f7ea f905 	bl	8000b98 <__aeabi_d2iz>
 801698e:	4607      	mov	r7, r0
 8016990:	f7e9 fde8 	bl	8000564 <__aeabi_i2d>
 8016994:	3730      	adds	r7, #48	; 0x30
 8016996:	4602      	mov	r2, r0
 8016998:	460b      	mov	r3, r1
 801699a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801699e:	f7e9 fc93 	bl	80002c8 <__aeabi_dsub>
 80169a2:	f806 7b01 	strb.w	r7, [r6], #1
 80169a6:	42ae      	cmp	r6, r5
 80169a8:	e9cd 0100 	strd	r0, r1, [sp]
 80169ac:	f04f 0200 	mov.w	r2, #0
 80169b0:	d126      	bne.n	8016a00 <_dtoa_r+0x5e8>
 80169b2:	4b1c      	ldr	r3, [pc, #112]	; (8016a24 <_dtoa_r+0x60c>)
 80169b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80169b8:	f7e9 fc88 	bl	80002cc <__adddf3>
 80169bc:	4602      	mov	r2, r0
 80169be:	460b      	mov	r3, r1
 80169c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169c4:	f7ea f8c8 	bl	8000b58 <__aeabi_dcmpgt>
 80169c8:	2800      	cmp	r0, #0
 80169ca:	d174      	bne.n	8016ab6 <_dtoa_r+0x69e>
 80169cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80169d0:	2000      	movs	r0, #0
 80169d2:	4914      	ldr	r1, [pc, #80]	; (8016a24 <_dtoa_r+0x60c>)
 80169d4:	f7e9 fc78 	bl	80002c8 <__aeabi_dsub>
 80169d8:	4602      	mov	r2, r0
 80169da:	460b      	mov	r3, r1
 80169dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169e0:	f7ea f89c 	bl	8000b1c <__aeabi_dcmplt>
 80169e4:	2800      	cmp	r0, #0
 80169e6:	f43f af30 	beq.w	801684a <_dtoa_r+0x432>
 80169ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80169ee:	2b30      	cmp	r3, #48	; 0x30
 80169f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80169f4:	d002      	beq.n	80169fc <_dtoa_r+0x5e4>
 80169f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80169fa:	e04a      	b.n	8016a92 <_dtoa_r+0x67a>
 80169fc:	4615      	mov	r5, r2
 80169fe:	e7f4      	b.n	80169ea <_dtoa_r+0x5d2>
 8016a00:	4b05      	ldr	r3, [pc, #20]	; (8016a18 <_dtoa_r+0x600>)
 8016a02:	f7e9 fe19 	bl	8000638 <__aeabi_dmul>
 8016a06:	e9cd 0100 	strd	r0, r1, [sp]
 8016a0a:	e7bc      	b.n	8016986 <_dtoa_r+0x56e>
 8016a0c:	0801c138 	.word	0x0801c138
 8016a10:	0801c110 	.word	0x0801c110
 8016a14:	3ff00000 	.word	0x3ff00000
 8016a18:	40240000 	.word	0x40240000
 8016a1c:	401c0000 	.word	0x401c0000
 8016a20:	40140000 	.word	0x40140000
 8016a24:	3fe00000 	.word	0x3fe00000
 8016a28:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016a2c:	465d      	mov	r5, fp
 8016a2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a32:	4630      	mov	r0, r6
 8016a34:	4639      	mov	r1, r7
 8016a36:	f7e9 ff29 	bl	800088c <__aeabi_ddiv>
 8016a3a:	f7ea f8ad 	bl	8000b98 <__aeabi_d2iz>
 8016a3e:	4680      	mov	r8, r0
 8016a40:	f7e9 fd90 	bl	8000564 <__aeabi_i2d>
 8016a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a48:	f7e9 fdf6 	bl	8000638 <__aeabi_dmul>
 8016a4c:	4602      	mov	r2, r0
 8016a4e:	460b      	mov	r3, r1
 8016a50:	4630      	mov	r0, r6
 8016a52:	4639      	mov	r1, r7
 8016a54:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016a58:	f7e9 fc36 	bl	80002c8 <__aeabi_dsub>
 8016a5c:	f805 6b01 	strb.w	r6, [r5], #1
 8016a60:	eba5 060b 	sub.w	r6, r5, fp
 8016a64:	45b1      	cmp	r9, r6
 8016a66:	4602      	mov	r2, r0
 8016a68:	460b      	mov	r3, r1
 8016a6a:	d139      	bne.n	8016ae0 <_dtoa_r+0x6c8>
 8016a6c:	f7e9 fc2e 	bl	80002cc <__adddf3>
 8016a70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a74:	4606      	mov	r6, r0
 8016a76:	460f      	mov	r7, r1
 8016a78:	f7ea f86e 	bl	8000b58 <__aeabi_dcmpgt>
 8016a7c:	b9c8      	cbnz	r0, 8016ab2 <_dtoa_r+0x69a>
 8016a7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a82:	4630      	mov	r0, r6
 8016a84:	4639      	mov	r1, r7
 8016a86:	f7ea f83f 	bl	8000b08 <__aeabi_dcmpeq>
 8016a8a:	b110      	cbz	r0, 8016a92 <_dtoa_r+0x67a>
 8016a8c:	f018 0f01 	tst.w	r8, #1
 8016a90:	d10f      	bne.n	8016ab2 <_dtoa_r+0x69a>
 8016a92:	9904      	ldr	r1, [sp, #16]
 8016a94:	4620      	mov	r0, r4
 8016a96:	f000 fead 	bl	80177f4 <_Bfree>
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a9e:	702b      	strb	r3, [r5, #0]
 8016aa0:	f10a 0301 	add.w	r3, sl, #1
 8016aa4:	6013      	str	r3, [r2, #0]
 8016aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	f000 8241 	beq.w	8016f30 <_dtoa_r+0xb18>
 8016aae:	601d      	str	r5, [r3, #0]
 8016ab0:	e23e      	b.n	8016f30 <_dtoa_r+0xb18>
 8016ab2:	f8cd a020 	str.w	sl, [sp, #32]
 8016ab6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016aba:	2a39      	cmp	r2, #57	; 0x39
 8016abc:	f105 33ff 	add.w	r3, r5, #4294967295
 8016ac0:	d108      	bne.n	8016ad4 <_dtoa_r+0x6bc>
 8016ac2:	459b      	cmp	fp, r3
 8016ac4:	d10a      	bne.n	8016adc <_dtoa_r+0x6c4>
 8016ac6:	9b08      	ldr	r3, [sp, #32]
 8016ac8:	3301      	adds	r3, #1
 8016aca:	9308      	str	r3, [sp, #32]
 8016acc:	2330      	movs	r3, #48	; 0x30
 8016ace:	f88b 3000 	strb.w	r3, [fp]
 8016ad2:	465b      	mov	r3, fp
 8016ad4:	781a      	ldrb	r2, [r3, #0]
 8016ad6:	3201      	adds	r2, #1
 8016ad8:	701a      	strb	r2, [r3, #0]
 8016ada:	e78c      	b.n	80169f6 <_dtoa_r+0x5de>
 8016adc:	461d      	mov	r5, r3
 8016ade:	e7ea      	b.n	8016ab6 <_dtoa_r+0x69e>
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	4b9b      	ldr	r3, [pc, #620]	; (8016d50 <_dtoa_r+0x938>)
 8016ae4:	f7e9 fda8 	bl	8000638 <__aeabi_dmul>
 8016ae8:	2200      	movs	r2, #0
 8016aea:	2300      	movs	r3, #0
 8016aec:	4606      	mov	r6, r0
 8016aee:	460f      	mov	r7, r1
 8016af0:	f7ea f80a 	bl	8000b08 <__aeabi_dcmpeq>
 8016af4:	2800      	cmp	r0, #0
 8016af6:	d09a      	beq.n	8016a2e <_dtoa_r+0x616>
 8016af8:	e7cb      	b.n	8016a92 <_dtoa_r+0x67a>
 8016afa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016afc:	2a00      	cmp	r2, #0
 8016afe:	f000 808b 	beq.w	8016c18 <_dtoa_r+0x800>
 8016b02:	9a06      	ldr	r2, [sp, #24]
 8016b04:	2a01      	cmp	r2, #1
 8016b06:	dc6e      	bgt.n	8016be6 <_dtoa_r+0x7ce>
 8016b08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016b0a:	2a00      	cmp	r2, #0
 8016b0c:	d067      	beq.n	8016bde <_dtoa_r+0x7c6>
 8016b0e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016b12:	9f07      	ldr	r7, [sp, #28]
 8016b14:	9d05      	ldr	r5, [sp, #20]
 8016b16:	9a05      	ldr	r2, [sp, #20]
 8016b18:	2101      	movs	r1, #1
 8016b1a:	441a      	add	r2, r3
 8016b1c:	4620      	mov	r0, r4
 8016b1e:	9205      	str	r2, [sp, #20]
 8016b20:	4498      	add	r8, r3
 8016b22:	f000 ff45 	bl	80179b0 <__i2b>
 8016b26:	4606      	mov	r6, r0
 8016b28:	2d00      	cmp	r5, #0
 8016b2a:	dd0c      	ble.n	8016b46 <_dtoa_r+0x72e>
 8016b2c:	f1b8 0f00 	cmp.w	r8, #0
 8016b30:	dd09      	ble.n	8016b46 <_dtoa_r+0x72e>
 8016b32:	4545      	cmp	r5, r8
 8016b34:	9a05      	ldr	r2, [sp, #20]
 8016b36:	462b      	mov	r3, r5
 8016b38:	bfa8      	it	ge
 8016b3a:	4643      	movge	r3, r8
 8016b3c:	1ad2      	subs	r2, r2, r3
 8016b3e:	9205      	str	r2, [sp, #20]
 8016b40:	1aed      	subs	r5, r5, r3
 8016b42:	eba8 0803 	sub.w	r8, r8, r3
 8016b46:	9b07      	ldr	r3, [sp, #28]
 8016b48:	b1eb      	cbz	r3, 8016b86 <_dtoa_r+0x76e>
 8016b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d067      	beq.n	8016c20 <_dtoa_r+0x808>
 8016b50:	b18f      	cbz	r7, 8016b76 <_dtoa_r+0x75e>
 8016b52:	4631      	mov	r1, r6
 8016b54:	463a      	mov	r2, r7
 8016b56:	4620      	mov	r0, r4
 8016b58:	f000 ffca 	bl	8017af0 <__pow5mult>
 8016b5c:	9a04      	ldr	r2, [sp, #16]
 8016b5e:	4601      	mov	r1, r0
 8016b60:	4606      	mov	r6, r0
 8016b62:	4620      	mov	r0, r4
 8016b64:	f000 ff2d 	bl	80179c2 <__multiply>
 8016b68:	9904      	ldr	r1, [sp, #16]
 8016b6a:	9008      	str	r0, [sp, #32]
 8016b6c:	4620      	mov	r0, r4
 8016b6e:	f000 fe41 	bl	80177f4 <_Bfree>
 8016b72:	9b08      	ldr	r3, [sp, #32]
 8016b74:	9304      	str	r3, [sp, #16]
 8016b76:	9b07      	ldr	r3, [sp, #28]
 8016b78:	1bda      	subs	r2, r3, r7
 8016b7a:	d004      	beq.n	8016b86 <_dtoa_r+0x76e>
 8016b7c:	9904      	ldr	r1, [sp, #16]
 8016b7e:	4620      	mov	r0, r4
 8016b80:	f000 ffb6 	bl	8017af0 <__pow5mult>
 8016b84:	9004      	str	r0, [sp, #16]
 8016b86:	2101      	movs	r1, #1
 8016b88:	4620      	mov	r0, r4
 8016b8a:	f000 ff11 	bl	80179b0 <__i2b>
 8016b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b90:	4607      	mov	r7, r0
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	f000 81d0 	beq.w	8016f38 <_dtoa_r+0xb20>
 8016b98:	461a      	mov	r2, r3
 8016b9a:	4601      	mov	r1, r0
 8016b9c:	4620      	mov	r0, r4
 8016b9e:	f000 ffa7 	bl	8017af0 <__pow5mult>
 8016ba2:	9b06      	ldr	r3, [sp, #24]
 8016ba4:	2b01      	cmp	r3, #1
 8016ba6:	4607      	mov	r7, r0
 8016ba8:	dc40      	bgt.n	8016c2c <_dtoa_r+0x814>
 8016baa:	9b00      	ldr	r3, [sp, #0]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d139      	bne.n	8016c24 <_dtoa_r+0x80c>
 8016bb0:	9b01      	ldr	r3, [sp, #4]
 8016bb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d136      	bne.n	8016c28 <_dtoa_r+0x810>
 8016bba:	9b01      	ldr	r3, [sp, #4]
 8016bbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016bc0:	0d1b      	lsrs	r3, r3, #20
 8016bc2:	051b      	lsls	r3, r3, #20
 8016bc4:	b12b      	cbz	r3, 8016bd2 <_dtoa_r+0x7ba>
 8016bc6:	9b05      	ldr	r3, [sp, #20]
 8016bc8:	3301      	adds	r3, #1
 8016bca:	9305      	str	r3, [sp, #20]
 8016bcc:	f108 0801 	add.w	r8, r8, #1
 8016bd0:	2301      	movs	r3, #1
 8016bd2:	9307      	str	r3, [sp, #28]
 8016bd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d12a      	bne.n	8016c30 <_dtoa_r+0x818>
 8016bda:	2001      	movs	r0, #1
 8016bdc:	e030      	b.n	8016c40 <_dtoa_r+0x828>
 8016bde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016be0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016be4:	e795      	b.n	8016b12 <_dtoa_r+0x6fa>
 8016be6:	9b07      	ldr	r3, [sp, #28]
 8016be8:	f109 37ff 	add.w	r7, r9, #4294967295
 8016bec:	42bb      	cmp	r3, r7
 8016bee:	bfbf      	itttt	lt
 8016bf0:	9b07      	ldrlt	r3, [sp, #28]
 8016bf2:	9707      	strlt	r7, [sp, #28]
 8016bf4:	1afa      	sublt	r2, r7, r3
 8016bf6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016bf8:	bfbb      	ittet	lt
 8016bfa:	189b      	addlt	r3, r3, r2
 8016bfc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016bfe:	1bdf      	subge	r7, r3, r7
 8016c00:	2700      	movlt	r7, #0
 8016c02:	f1b9 0f00 	cmp.w	r9, #0
 8016c06:	bfb5      	itete	lt
 8016c08:	9b05      	ldrlt	r3, [sp, #20]
 8016c0a:	9d05      	ldrge	r5, [sp, #20]
 8016c0c:	eba3 0509 	sublt.w	r5, r3, r9
 8016c10:	464b      	movge	r3, r9
 8016c12:	bfb8      	it	lt
 8016c14:	2300      	movlt	r3, #0
 8016c16:	e77e      	b.n	8016b16 <_dtoa_r+0x6fe>
 8016c18:	9f07      	ldr	r7, [sp, #28]
 8016c1a:	9d05      	ldr	r5, [sp, #20]
 8016c1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016c1e:	e783      	b.n	8016b28 <_dtoa_r+0x710>
 8016c20:	9a07      	ldr	r2, [sp, #28]
 8016c22:	e7ab      	b.n	8016b7c <_dtoa_r+0x764>
 8016c24:	2300      	movs	r3, #0
 8016c26:	e7d4      	b.n	8016bd2 <_dtoa_r+0x7ba>
 8016c28:	9b00      	ldr	r3, [sp, #0]
 8016c2a:	e7d2      	b.n	8016bd2 <_dtoa_r+0x7ba>
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	9307      	str	r3, [sp, #28]
 8016c30:	693b      	ldr	r3, [r7, #16]
 8016c32:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016c36:	6918      	ldr	r0, [r3, #16]
 8016c38:	f000 fe6c 	bl	8017914 <__hi0bits>
 8016c3c:	f1c0 0020 	rsb	r0, r0, #32
 8016c40:	4440      	add	r0, r8
 8016c42:	f010 001f 	ands.w	r0, r0, #31
 8016c46:	d047      	beq.n	8016cd8 <_dtoa_r+0x8c0>
 8016c48:	f1c0 0320 	rsb	r3, r0, #32
 8016c4c:	2b04      	cmp	r3, #4
 8016c4e:	dd3b      	ble.n	8016cc8 <_dtoa_r+0x8b0>
 8016c50:	9b05      	ldr	r3, [sp, #20]
 8016c52:	f1c0 001c 	rsb	r0, r0, #28
 8016c56:	4403      	add	r3, r0
 8016c58:	9305      	str	r3, [sp, #20]
 8016c5a:	4405      	add	r5, r0
 8016c5c:	4480      	add	r8, r0
 8016c5e:	9b05      	ldr	r3, [sp, #20]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	dd05      	ble.n	8016c70 <_dtoa_r+0x858>
 8016c64:	461a      	mov	r2, r3
 8016c66:	9904      	ldr	r1, [sp, #16]
 8016c68:	4620      	mov	r0, r4
 8016c6a:	f000 ff8f 	bl	8017b8c <__lshift>
 8016c6e:	9004      	str	r0, [sp, #16]
 8016c70:	f1b8 0f00 	cmp.w	r8, #0
 8016c74:	dd05      	ble.n	8016c82 <_dtoa_r+0x86a>
 8016c76:	4639      	mov	r1, r7
 8016c78:	4642      	mov	r2, r8
 8016c7a:	4620      	mov	r0, r4
 8016c7c:	f000 ff86 	bl	8017b8c <__lshift>
 8016c80:	4607      	mov	r7, r0
 8016c82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c84:	b353      	cbz	r3, 8016cdc <_dtoa_r+0x8c4>
 8016c86:	4639      	mov	r1, r7
 8016c88:	9804      	ldr	r0, [sp, #16]
 8016c8a:	f000 ffd3 	bl	8017c34 <__mcmp>
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	da24      	bge.n	8016cdc <_dtoa_r+0x8c4>
 8016c92:	2300      	movs	r3, #0
 8016c94:	220a      	movs	r2, #10
 8016c96:	9904      	ldr	r1, [sp, #16]
 8016c98:	4620      	mov	r0, r4
 8016c9a:	f000 fdc2 	bl	8017822 <__multadd>
 8016c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ca0:	9004      	str	r0, [sp, #16]
 8016ca2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	f000 814d 	beq.w	8016f46 <_dtoa_r+0xb2e>
 8016cac:	2300      	movs	r3, #0
 8016cae:	4631      	mov	r1, r6
 8016cb0:	220a      	movs	r2, #10
 8016cb2:	4620      	mov	r0, r4
 8016cb4:	f000 fdb5 	bl	8017822 <__multadd>
 8016cb8:	9b02      	ldr	r3, [sp, #8]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	4606      	mov	r6, r0
 8016cbe:	dc4f      	bgt.n	8016d60 <_dtoa_r+0x948>
 8016cc0:	9b06      	ldr	r3, [sp, #24]
 8016cc2:	2b02      	cmp	r3, #2
 8016cc4:	dd4c      	ble.n	8016d60 <_dtoa_r+0x948>
 8016cc6:	e011      	b.n	8016cec <_dtoa_r+0x8d4>
 8016cc8:	d0c9      	beq.n	8016c5e <_dtoa_r+0x846>
 8016cca:	9a05      	ldr	r2, [sp, #20]
 8016ccc:	331c      	adds	r3, #28
 8016cce:	441a      	add	r2, r3
 8016cd0:	9205      	str	r2, [sp, #20]
 8016cd2:	441d      	add	r5, r3
 8016cd4:	4498      	add	r8, r3
 8016cd6:	e7c2      	b.n	8016c5e <_dtoa_r+0x846>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	e7f6      	b.n	8016cca <_dtoa_r+0x8b2>
 8016cdc:	f1b9 0f00 	cmp.w	r9, #0
 8016ce0:	dc38      	bgt.n	8016d54 <_dtoa_r+0x93c>
 8016ce2:	9b06      	ldr	r3, [sp, #24]
 8016ce4:	2b02      	cmp	r3, #2
 8016ce6:	dd35      	ble.n	8016d54 <_dtoa_r+0x93c>
 8016ce8:	f8cd 9008 	str.w	r9, [sp, #8]
 8016cec:	9b02      	ldr	r3, [sp, #8]
 8016cee:	b963      	cbnz	r3, 8016d0a <_dtoa_r+0x8f2>
 8016cf0:	4639      	mov	r1, r7
 8016cf2:	2205      	movs	r2, #5
 8016cf4:	4620      	mov	r0, r4
 8016cf6:	f000 fd94 	bl	8017822 <__multadd>
 8016cfa:	4601      	mov	r1, r0
 8016cfc:	4607      	mov	r7, r0
 8016cfe:	9804      	ldr	r0, [sp, #16]
 8016d00:	f000 ff98 	bl	8017c34 <__mcmp>
 8016d04:	2800      	cmp	r0, #0
 8016d06:	f73f adcc 	bgt.w	80168a2 <_dtoa_r+0x48a>
 8016d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d0c:	465d      	mov	r5, fp
 8016d0e:	ea6f 0a03 	mvn.w	sl, r3
 8016d12:	f04f 0900 	mov.w	r9, #0
 8016d16:	4639      	mov	r1, r7
 8016d18:	4620      	mov	r0, r4
 8016d1a:	f000 fd6b 	bl	80177f4 <_Bfree>
 8016d1e:	2e00      	cmp	r6, #0
 8016d20:	f43f aeb7 	beq.w	8016a92 <_dtoa_r+0x67a>
 8016d24:	f1b9 0f00 	cmp.w	r9, #0
 8016d28:	d005      	beq.n	8016d36 <_dtoa_r+0x91e>
 8016d2a:	45b1      	cmp	r9, r6
 8016d2c:	d003      	beq.n	8016d36 <_dtoa_r+0x91e>
 8016d2e:	4649      	mov	r1, r9
 8016d30:	4620      	mov	r0, r4
 8016d32:	f000 fd5f 	bl	80177f4 <_Bfree>
 8016d36:	4631      	mov	r1, r6
 8016d38:	4620      	mov	r0, r4
 8016d3a:	f000 fd5b 	bl	80177f4 <_Bfree>
 8016d3e:	e6a8      	b.n	8016a92 <_dtoa_r+0x67a>
 8016d40:	2700      	movs	r7, #0
 8016d42:	463e      	mov	r6, r7
 8016d44:	e7e1      	b.n	8016d0a <_dtoa_r+0x8f2>
 8016d46:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016d4a:	463e      	mov	r6, r7
 8016d4c:	e5a9      	b.n	80168a2 <_dtoa_r+0x48a>
 8016d4e:	bf00      	nop
 8016d50:	40240000 	.word	0x40240000
 8016d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d56:	f8cd 9008 	str.w	r9, [sp, #8]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	f000 80fa 	beq.w	8016f54 <_dtoa_r+0xb3c>
 8016d60:	2d00      	cmp	r5, #0
 8016d62:	dd05      	ble.n	8016d70 <_dtoa_r+0x958>
 8016d64:	4631      	mov	r1, r6
 8016d66:	462a      	mov	r2, r5
 8016d68:	4620      	mov	r0, r4
 8016d6a:	f000 ff0f 	bl	8017b8c <__lshift>
 8016d6e:	4606      	mov	r6, r0
 8016d70:	9b07      	ldr	r3, [sp, #28]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d04c      	beq.n	8016e10 <_dtoa_r+0x9f8>
 8016d76:	6871      	ldr	r1, [r6, #4]
 8016d78:	4620      	mov	r0, r4
 8016d7a:	f000 fd07 	bl	801778c <_Balloc>
 8016d7e:	6932      	ldr	r2, [r6, #16]
 8016d80:	3202      	adds	r2, #2
 8016d82:	4605      	mov	r5, r0
 8016d84:	0092      	lsls	r2, r2, #2
 8016d86:	f106 010c 	add.w	r1, r6, #12
 8016d8a:	300c      	adds	r0, #12
 8016d8c:	f7fd fe71 	bl	8014a72 <memcpy>
 8016d90:	2201      	movs	r2, #1
 8016d92:	4629      	mov	r1, r5
 8016d94:	4620      	mov	r0, r4
 8016d96:	f000 fef9 	bl	8017b8c <__lshift>
 8016d9a:	9b00      	ldr	r3, [sp, #0]
 8016d9c:	f8cd b014 	str.w	fp, [sp, #20]
 8016da0:	f003 0301 	and.w	r3, r3, #1
 8016da4:	46b1      	mov	r9, r6
 8016da6:	9307      	str	r3, [sp, #28]
 8016da8:	4606      	mov	r6, r0
 8016daa:	4639      	mov	r1, r7
 8016dac:	9804      	ldr	r0, [sp, #16]
 8016dae:	f7ff faa4 	bl	80162fa <quorem>
 8016db2:	4649      	mov	r1, r9
 8016db4:	4605      	mov	r5, r0
 8016db6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016dba:	9804      	ldr	r0, [sp, #16]
 8016dbc:	f000 ff3a 	bl	8017c34 <__mcmp>
 8016dc0:	4632      	mov	r2, r6
 8016dc2:	9000      	str	r0, [sp, #0]
 8016dc4:	4639      	mov	r1, r7
 8016dc6:	4620      	mov	r0, r4
 8016dc8:	f000 ff4e 	bl	8017c68 <__mdiff>
 8016dcc:	68c3      	ldr	r3, [r0, #12]
 8016dce:	4602      	mov	r2, r0
 8016dd0:	bb03      	cbnz	r3, 8016e14 <_dtoa_r+0x9fc>
 8016dd2:	4601      	mov	r1, r0
 8016dd4:	9008      	str	r0, [sp, #32]
 8016dd6:	9804      	ldr	r0, [sp, #16]
 8016dd8:	f000 ff2c 	bl	8017c34 <__mcmp>
 8016ddc:	9a08      	ldr	r2, [sp, #32]
 8016dde:	4603      	mov	r3, r0
 8016de0:	4611      	mov	r1, r2
 8016de2:	4620      	mov	r0, r4
 8016de4:	9308      	str	r3, [sp, #32]
 8016de6:	f000 fd05 	bl	80177f4 <_Bfree>
 8016dea:	9b08      	ldr	r3, [sp, #32]
 8016dec:	b9a3      	cbnz	r3, 8016e18 <_dtoa_r+0xa00>
 8016dee:	9a06      	ldr	r2, [sp, #24]
 8016df0:	b992      	cbnz	r2, 8016e18 <_dtoa_r+0xa00>
 8016df2:	9a07      	ldr	r2, [sp, #28]
 8016df4:	b982      	cbnz	r2, 8016e18 <_dtoa_r+0xa00>
 8016df6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016dfa:	d029      	beq.n	8016e50 <_dtoa_r+0xa38>
 8016dfc:	9b00      	ldr	r3, [sp, #0]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	dd01      	ble.n	8016e06 <_dtoa_r+0x9ee>
 8016e02:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016e06:	9b05      	ldr	r3, [sp, #20]
 8016e08:	1c5d      	adds	r5, r3, #1
 8016e0a:	f883 8000 	strb.w	r8, [r3]
 8016e0e:	e782      	b.n	8016d16 <_dtoa_r+0x8fe>
 8016e10:	4630      	mov	r0, r6
 8016e12:	e7c2      	b.n	8016d9a <_dtoa_r+0x982>
 8016e14:	2301      	movs	r3, #1
 8016e16:	e7e3      	b.n	8016de0 <_dtoa_r+0x9c8>
 8016e18:	9a00      	ldr	r2, [sp, #0]
 8016e1a:	2a00      	cmp	r2, #0
 8016e1c:	db04      	blt.n	8016e28 <_dtoa_r+0xa10>
 8016e1e:	d125      	bne.n	8016e6c <_dtoa_r+0xa54>
 8016e20:	9a06      	ldr	r2, [sp, #24]
 8016e22:	bb1a      	cbnz	r2, 8016e6c <_dtoa_r+0xa54>
 8016e24:	9a07      	ldr	r2, [sp, #28]
 8016e26:	bb0a      	cbnz	r2, 8016e6c <_dtoa_r+0xa54>
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	ddec      	ble.n	8016e06 <_dtoa_r+0x9ee>
 8016e2c:	2201      	movs	r2, #1
 8016e2e:	9904      	ldr	r1, [sp, #16]
 8016e30:	4620      	mov	r0, r4
 8016e32:	f000 feab 	bl	8017b8c <__lshift>
 8016e36:	4639      	mov	r1, r7
 8016e38:	9004      	str	r0, [sp, #16]
 8016e3a:	f000 fefb 	bl	8017c34 <__mcmp>
 8016e3e:	2800      	cmp	r0, #0
 8016e40:	dc03      	bgt.n	8016e4a <_dtoa_r+0xa32>
 8016e42:	d1e0      	bne.n	8016e06 <_dtoa_r+0x9ee>
 8016e44:	f018 0f01 	tst.w	r8, #1
 8016e48:	d0dd      	beq.n	8016e06 <_dtoa_r+0x9ee>
 8016e4a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016e4e:	d1d8      	bne.n	8016e02 <_dtoa_r+0x9ea>
 8016e50:	9b05      	ldr	r3, [sp, #20]
 8016e52:	9a05      	ldr	r2, [sp, #20]
 8016e54:	1c5d      	adds	r5, r3, #1
 8016e56:	2339      	movs	r3, #57	; 0x39
 8016e58:	7013      	strb	r3, [r2, #0]
 8016e5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016e5e:	2b39      	cmp	r3, #57	; 0x39
 8016e60:	f105 32ff 	add.w	r2, r5, #4294967295
 8016e64:	d04f      	beq.n	8016f06 <_dtoa_r+0xaee>
 8016e66:	3301      	adds	r3, #1
 8016e68:	7013      	strb	r3, [r2, #0]
 8016e6a:	e754      	b.n	8016d16 <_dtoa_r+0x8fe>
 8016e6c:	9a05      	ldr	r2, [sp, #20]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	f102 0501 	add.w	r5, r2, #1
 8016e74:	dd06      	ble.n	8016e84 <_dtoa_r+0xa6c>
 8016e76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016e7a:	d0e9      	beq.n	8016e50 <_dtoa_r+0xa38>
 8016e7c:	f108 0801 	add.w	r8, r8, #1
 8016e80:	9b05      	ldr	r3, [sp, #20]
 8016e82:	e7c2      	b.n	8016e0a <_dtoa_r+0x9f2>
 8016e84:	9a02      	ldr	r2, [sp, #8]
 8016e86:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016e8a:	eba5 030b 	sub.w	r3, r5, fp
 8016e8e:	4293      	cmp	r3, r2
 8016e90:	d021      	beq.n	8016ed6 <_dtoa_r+0xabe>
 8016e92:	2300      	movs	r3, #0
 8016e94:	220a      	movs	r2, #10
 8016e96:	9904      	ldr	r1, [sp, #16]
 8016e98:	4620      	mov	r0, r4
 8016e9a:	f000 fcc2 	bl	8017822 <__multadd>
 8016e9e:	45b1      	cmp	r9, r6
 8016ea0:	9004      	str	r0, [sp, #16]
 8016ea2:	f04f 0300 	mov.w	r3, #0
 8016ea6:	f04f 020a 	mov.w	r2, #10
 8016eaa:	4649      	mov	r1, r9
 8016eac:	4620      	mov	r0, r4
 8016eae:	d105      	bne.n	8016ebc <_dtoa_r+0xaa4>
 8016eb0:	f000 fcb7 	bl	8017822 <__multadd>
 8016eb4:	4681      	mov	r9, r0
 8016eb6:	4606      	mov	r6, r0
 8016eb8:	9505      	str	r5, [sp, #20]
 8016eba:	e776      	b.n	8016daa <_dtoa_r+0x992>
 8016ebc:	f000 fcb1 	bl	8017822 <__multadd>
 8016ec0:	4631      	mov	r1, r6
 8016ec2:	4681      	mov	r9, r0
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	220a      	movs	r2, #10
 8016ec8:	4620      	mov	r0, r4
 8016eca:	f000 fcaa 	bl	8017822 <__multadd>
 8016ece:	4606      	mov	r6, r0
 8016ed0:	e7f2      	b.n	8016eb8 <_dtoa_r+0xaa0>
 8016ed2:	f04f 0900 	mov.w	r9, #0
 8016ed6:	2201      	movs	r2, #1
 8016ed8:	9904      	ldr	r1, [sp, #16]
 8016eda:	4620      	mov	r0, r4
 8016edc:	f000 fe56 	bl	8017b8c <__lshift>
 8016ee0:	4639      	mov	r1, r7
 8016ee2:	9004      	str	r0, [sp, #16]
 8016ee4:	f000 fea6 	bl	8017c34 <__mcmp>
 8016ee8:	2800      	cmp	r0, #0
 8016eea:	dcb6      	bgt.n	8016e5a <_dtoa_r+0xa42>
 8016eec:	d102      	bne.n	8016ef4 <_dtoa_r+0xadc>
 8016eee:	f018 0f01 	tst.w	r8, #1
 8016ef2:	d1b2      	bne.n	8016e5a <_dtoa_r+0xa42>
 8016ef4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016ef8:	2b30      	cmp	r3, #48	; 0x30
 8016efa:	f105 32ff 	add.w	r2, r5, #4294967295
 8016efe:	f47f af0a 	bne.w	8016d16 <_dtoa_r+0x8fe>
 8016f02:	4615      	mov	r5, r2
 8016f04:	e7f6      	b.n	8016ef4 <_dtoa_r+0xadc>
 8016f06:	4593      	cmp	fp, r2
 8016f08:	d105      	bne.n	8016f16 <_dtoa_r+0xafe>
 8016f0a:	2331      	movs	r3, #49	; 0x31
 8016f0c:	f10a 0a01 	add.w	sl, sl, #1
 8016f10:	f88b 3000 	strb.w	r3, [fp]
 8016f14:	e6ff      	b.n	8016d16 <_dtoa_r+0x8fe>
 8016f16:	4615      	mov	r5, r2
 8016f18:	e79f      	b.n	8016e5a <_dtoa_r+0xa42>
 8016f1a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016f80 <_dtoa_r+0xb68>
 8016f1e:	e007      	b.n	8016f30 <_dtoa_r+0xb18>
 8016f20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f22:	f8df b060 	ldr.w	fp, [pc, #96]	; 8016f84 <_dtoa_r+0xb6c>
 8016f26:	b11b      	cbz	r3, 8016f30 <_dtoa_r+0xb18>
 8016f28:	f10b 0308 	add.w	r3, fp, #8
 8016f2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016f2e:	6013      	str	r3, [r2, #0]
 8016f30:	4658      	mov	r0, fp
 8016f32:	b017      	add	sp, #92	; 0x5c
 8016f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f38:	9b06      	ldr	r3, [sp, #24]
 8016f3a:	2b01      	cmp	r3, #1
 8016f3c:	f77f ae35 	ble.w	8016baa <_dtoa_r+0x792>
 8016f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f42:	9307      	str	r3, [sp, #28]
 8016f44:	e649      	b.n	8016bda <_dtoa_r+0x7c2>
 8016f46:	9b02      	ldr	r3, [sp, #8]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	dc03      	bgt.n	8016f54 <_dtoa_r+0xb3c>
 8016f4c:	9b06      	ldr	r3, [sp, #24]
 8016f4e:	2b02      	cmp	r3, #2
 8016f50:	f73f aecc 	bgt.w	8016cec <_dtoa_r+0x8d4>
 8016f54:	465d      	mov	r5, fp
 8016f56:	4639      	mov	r1, r7
 8016f58:	9804      	ldr	r0, [sp, #16]
 8016f5a:	f7ff f9ce 	bl	80162fa <quorem>
 8016f5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016f62:	f805 8b01 	strb.w	r8, [r5], #1
 8016f66:	9a02      	ldr	r2, [sp, #8]
 8016f68:	eba5 030b 	sub.w	r3, r5, fp
 8016f6c:	429a      	cmp	r2, r3
 8016f6e:	ddb0      	ble.n	8016ed2 <_dtoa_r+0xaba>
 8016f70:	2300      	movs	r3, #0
 8016f72:	220a      	movs	r2, #10
 8016f74:	9904      	ldr	r1, [sp, #16]
 8016f76:	4620      	mov	r0, r4
 8016f78:	f000 fc53 	bl	8017822 <__multadd>
 8016f7c:	9004      	str	r0, [sp, #16]
 8016f7e:	e7ea      	b.n	8016f56 <_dtoa_r+0xb3e>
 8016f80:	0801bf26 	.word	0x0801bf26
 8016f84:	0801c0a1 	.word	0x0801c0a1

08016f88 <std>:
 8016f88:	2300      	movs	r3, #0
 8016f8a:	b510      	push	{r4, lr}
 8016f8c:	4604      	mov	r4, r0
 8016f8e:	e9c0 3300 	strd	r3, r3, [r0]
 8016f92:	6083      	str	r3, [r0, #8]
 8016f94:	8181      	strh	r1, [r0, #12]
 8016f96:	6643      	str	r3, [r0, #100]	; 0x64
 8016f98:	81c2      	strh	r2, [r0, #14]
 8016f9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016f9e:	6183      	str	r3, [r0, #24]
 8016fa0:	4619      	mov	r1, r3
 8016fa2:	2208      	movs	r2, #8
 8016fa4:	305c      	adds	r0, #92	; 0x5c
 8016fa6:	f7fd fd88 	bl	8014aba <memset>
 8016faa:	4b05      	ldr	r3, [pc, #20]	; (8016fc0 <std+0x38>)
 8016fac:	6263      	str	r3, [r4, #36]	; 0x24
 8016fae:	4b05      	ldr	r3, [pc, #20]	; (8016fc4 <std+0x3c>)
 8016fb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8016fb2:	4b05      	ldr	r3, [pc, #20]	; (8016fc8 <std+0x40>)
 8016fb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016fb6:	4b05      	ldr	r3, [pc, #20]	; (8016fcc <std+0x44>)
 8016fb8:	6224      	str	r4, [r4, #32]
 8016fba:	6323      	str	r3, [r4, #48]	; 0x30
 8016fbc:	bd10      	pop	{r4, pc}
 8016fbe:	bf00      	nop
 8016fc0:	080184cd 	.word	0x080184cd
 8016fc4:	080184ef 	.word	0x080184ef
 8016fc8:	08018527 	.word	0x08018527
 8016fcc:	0801854b 	.word	0x0801854b

08016fd0 <_cleanup_r>:
 8016fd0:	4901      	ldr	r1, [pc, #4]	; (8016fd8 <_cleanup_r+0x8>)
 8016fd2:	f000 b885 	b.w	80170e0 <_fwalk_reent>
 8016fd6:	bf00      	nop
 8016fd8:	08018825 	.word	0x08018825

08016fdc <__sfmoreglue>:
 8016fdc:	b570      	push	{r4, r5, r6, lr}
 8016fde:	1e4a      	subs	r2, r1, #1
 8016fe0:	2568      	movs	r5, #104	; 0x68
 8016fe2:	4355      	muls	r5, r2
 8016fe4:	460e      	mov	r6, r1
 8016fe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016fea:	f7fd fdbd 	bl	8014b68 <_malloc_r>
 8016fee:	4604      	mov	r4, r0
 8016ff0:	b140      	cbz	r0, 8017004 <__sfmoreglue+0x28>
 8016ff2:	2100      	movs	r1, #0
 8016ff4:	e9c0 1600 	strd	r1, r6, [r0]
 8016ff8:	300c      	adds	r0, #12
 8016ffa:	60a0      	str	r0, [r4, #8]
 8016ffc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017000:	f7fd fd5b 	bl	8014aba <memset>
 8017004:	4620      	mov	r0, r4
 8017006:	bd70      	pop	{r4, r5, r6, pc}

08017008 <__sinit>:
 8017008:	6983      	ldr	r3, [r0, #24]
 801700a:	b510      	push	{r4, lr}
 801700c:	4604      	mov	r4, r0
 801700e:	bb33      	cbnz	r3, 801705e <__sinit+0x56>
 8017010:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017014:	6503      	str	r3, [r0, #80]	; 0x50
 8017016:	4b12      	ldr	r3, [pc, #72]	; (8017060 <__sinit+0x58>)
 8017018:	4a12      	ldr	r2, [pc, #72]	; (8017064 <__sinit+0x5c>)
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	6282      	str	r2, [r0, #40]	; 0x28
 801701e:	4298      	cmp	r0, r3
 8017020:	bf04      	itt	eq
 8017022:	2301      	moveq	r3, #1
 8017024:	6183      	streq	r3, [r0, #24]
 8017026:	f000 f81f 	bl	8017068 <__sfp>
 801702a:	6060      	str	r0, [r4, #4]
 801702c:	4620      	mov	r0, r4
 801702e:	f000 f81b 	bl	8017068 <__sfp>
 8017032:	60a0      	str	r0, [r4, #8]
 8017034:	4620      	mov	r0, r4
 8017036:	f000 f817 	bl	8017068 <__sfp>
 801703a:	2200      	movs	r2, #0
 801703c:	60e0      	str	r0, [r4, #12]
 801703e:	2104      	movs	r1, #4
 8017040:	6860      	ldr	r0, [r4, #4]
 8017042:	f7ff ffa1 	bl	8016f88 <std>
 8017046:	2201      	movs	r2, #1
 8017048:	2109      	movs	r1, #9
 801704a:	68a0      	ldr	r0, [r4, #8]
 801704c:	f7ff ff9c 	bl	8016f88 <std>
 8017050:	2202      	movs	r2, #2
 8017052:	2112      	movs	r1, #18
 8017054:	68e0      	ldr	r0, [r4, #12]
 8017056:	f7ff ff97 	bl	8016f88 <std>
 801705a:	2301      	movs	r3, #1
 801705c:	61a3      	str	r3, [r4, #24]
 801705e:	bd10      	pop	{r4, pc}
 8017060:	0801bf08 	.word	0x0801bf08
 8017064:	08016fd1 	.word	0x08016fd1

08017068 <__sfp>:
 8017068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801706a:	4b1b      	ldr	r3, [pc, #108]	; (80170d8 <__sfp+0x70>)
 801706c:	681e      	ldr	r6, [r3, #0]
 801706e:	69b3      	ldr	r3, [r6, #24]
 8017070:	4607      	mov	r7, r0
 8017072:	b913      	cbnz	r3, 801707a <__sfp+0x12>
 8017074:	4630      	mov	r0, r6
 8017076:	f7ff ffc7 	bl	8017008 <__sinit>
 801707a:	3648      	adds	r6, #72	; 0x48
 801707c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017080:	3b01      	subs	r3, #1
 8017082:	d503      	bpl.n	801708c <__sfp+0x24>
 8017084:	6833      	ldr	r3, [r6, #0]
 8017086:	b133      	cbz	r3, 8017096 <__sfp+0x2e>
 8017088:	6836      	ldr	r6, [r6, #0]
 801708a:	e7f7      	b.n	801707c <__sfp+0x14>
 801708c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017090:	b16d      	cbz	r5, 80170ae <__sfp+0x46>
 8017092:	3468      	adds	r4, #104	; 0x68
 8017094:	e7f4      	b.n	8017080 <__sfp+0x18>
 8017096:	2104      	movs	r1, #4
 8017098:	4638      	mov	r0, r7
 801709a:	f7ff ff9f 	bl	8016fdc <__sfmoreglue>
 801709e:	6030      	str	r0, [r6, #0]
 80170a0:	2800      	cmp	r0, #0
 80170a2:	d1f1      	bne.n	8017088 <__sfp+0x20>
 80170a4:	230c      	movs	r3, #12
 80170a6:	603b      	str	r3, [r7, #0]
 80170a8:	4604      	mov	r4, r0
 80170aa:	4620      	mov	r0, r4
 80170ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170ae:	4b0b      	ldr	r3, [pc, #44]	; (80170dc <__sfp+0x74>)
 80170b0:	6665      	str	r5, [r4, #100]	; 0x64
 80170b2:	e9c4 5500 	strd	r5, r5, [r4]
 80170b6:	60a5      	str	r5, [r4, #8]
 80170b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80170bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80170c0:	2208      	movs	r2, #8
 80170c2:	4629      	mov	r1, r5
 80170c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80170c8:	f7fd fcf7 	bl	8014aba <memset>
 80170cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80170d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80170d4:	e7e9      	b.n	80170aa <__sfp+0x42>
 80170d6:	bf00      	nop
 80170d8:	0801bf08 	.word	0x0801bf08
 80170dc:	ffff0001 	.word	0xffff0001

080170e0 <_fwalk_reent>:
 80170e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170e4:	4680      	mov	r8, r0
 80170e6:	4689      	mov	r9, r1
 80170e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80170ec:	2600      	movs	r6, #0
 80170ee:	b914      	cbnz	r4, 80170f6 <_fwalk_reent+0x16>
 80170f0:	4630      	mov	r0, r6
 80170f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80170fa:	3f01      	subs	r7, #1
 80170fc:	d501      	bpl.n	8017102 <_fwalk_reent+0x22>
 80170fe:	6824      	ldr	r4, [r4, #0]
 8017100:	e7f5      	b.n	80170ee <_fwalk_reent+0xe>
 8017102:	89ab      	ldrh	r3, [r5, #12]
 8017104:	2b01      	cmp	r3, #1
 8017106:	d907      	bls.n	8017118 <_fwalk_reent+0x38>
 8017108:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801710c:	3301      	adds	r3, #1
 801710e:	d003      	beq.n	8017118 <_fwalk_reent+0x38>
 8017110:	4629      	mov	r1, r5
 8017112:	4640      	mov	r0, r8
 8017114:	47c8      	blx	r9
 8017116:	4306      	orrs	r6, r0
 8017118:	3568      	adds	r5, #104	; 0x68
 801711a:	e7ee      	b.n	80170fa <_fwalk_reent+0x1a>

0801711c <rshift>:
 801711c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801711e:	6906      	ldr	r6, [r0, #16]
 8017120:	114b      	asrs	r3, r1, #5
 8017122:	429e      	cmp	r6, r3
 8017124:	f100 0414 	add.w	r4, r0, #20
 8017128:	dd30      	ble.n	801718c <rshift+0x70>
 801712a:	f011 011f 	ands.w	r1, r1, #31
 801712e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017132:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017136:	d108      	bne.n	801714a <rshift+0x2e>
 8017138:	4621      	mov	r1, r4
 801713a:	42b2      	cmp	r2, r6
 801713c:	460b      	mov	r3, r1
 801713e:	d211      	bcs.n	8017164 <rshift+0x48>
 8017140:	f852 3b04 	ldr.w	r3, [r2], #4
 8017144:	f841 3b04 	str.w	r3, [r1], #4
 8017148:	e7f7      	b.n	801713a <rshift+0x1e>
 801714a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801714e:	f1c1 0c20 	rsb	ip, r1, #32
 8017152:	40cd      	lsrs	r5, r1
 8017154:	3204      	adds	r2, #4
 8017156:	4623      	mov	r3, r4
 8017158:	42b2      	cmp	r2, r6
 801715a:	4617      	mov	r7, r2
 801715c:	d30c      	bcc.n	8017178 <rshift+0x5c>
 801715e:	601d      	str	r5, [r3, #0]
 8017160:	b105      	cbz	r5, 8017164 <rshift+0x48>
 8017162:	3304      	adds	r3, #4
 8017164:	1b1a      	subs	r2, r3, r4
 8017166:	42a3      	cmp	r3, r4
 8017168:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801716c:	bf08      	it	eq
 801716e:	2300      	moveq	r3, #0
 8017170:	6102      	str	r2, [r0, #16]
 8017172:	bf08      	it	eq
 8017174:	6143      	streq	r3, [r0, #20]
 8017176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017178:	683f      	ldr	r7, [r7, #0]
 801717a:	fa07 f70c 	lsl.w	r7, r7, ip
 801717e:	433d      	orrs	r5, r7
 8017180:	f843 5b04 	str.w	r5, [r3], #4
 8017184:	f852 5b04 	ldr.w	r5, [r2], #4
 8017188:	40cd      	lsrs	r5, r1
 801718a:	e7e5      	b.n	8017158 <rshift+0x3c>
 801718c:	4623      	mov	r3, r4
 801718e:	e7e9      	b.n	8017164 <rshift+0x48>

08017190 <__hexdig_fun>:
 8017190:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017194:	2b09      	cmp	r3, #9
 8017196:	d802      	bhi.n	801719e <__hexdig_fun+0xe>
 8017198:	3820      	subs	r0, #32
 801719a:	b2c0      	uxtb	r0, r0
 801719c:	4770      	bx	lr
 801719e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80171a2:	2b05      	cmp	r3, #5
 80171a4:	d801      	bhi.n	80171aa <__hexdig_fun+0x1a>
 80171a6:	3847      	subs	r0, #71	; 0x47
 80171a8:	e7f7      	b.n	801719a <__hexdig_fun+0xa>
 80171aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80171ae:	2b05      	cmp	r3, #5
 80171b0:	d801      	bhi.n	80171b6 <__hexdig_fun+0x26>
 80171b2:	3827      	subs	r0, #39	; 0x27
 80171b4:	e7f1      	b.n	801719a <__hexdig_fun+0xa>
 80171b6:	2000      	movs	r0, #0
 80171b8:	4770      	bx	lr

080171ba <__gethex>:
 80171ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171be:	b08b      	sub	sp, #44	; 0x2c
 80171c0:	468a      	mov	sl, r1
 80171c2:	9002      	str	r0, [sp, #8]
 80171c4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80171c6:	9306      	str	r3, [sp, #24]
 80171c8:	4690      	mov	r8, r2
 80171ca:	f000 facd 	bl	8017768 <__localeconv_l>
 80171ce:	6803      	ldr	r3, [r0, #0]
 80171d0:	9303      	str	r3, [sp, #12]
 80171d2:	4618      	mov	r0, r3
 80171d4:	f7e9 f81c 	bl	8000210 <strlen>
 80171d8:	9b03      	ldr	r3, [sp, #12]
 80171da:	9001      	str	r0, [sp, #4]
 80171dc:	4403      	add	r3, r0
 80171de:	f04f 0b00 	mov.w	fp, #0
 80171e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80171e6:	9307      	str	r3, [sp, #28]
 80171e8:	f8da 3000 	ldr.w	r3, [sl]
 80171ec:	3302      	adds	r3, #2
 80171ee:	461f      	mov	r7, r3
 80171f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80171f4:	2830      	cmp	r0, #48	; 0x30
 80171f6:	d06c      	beq.n	80172d2 <__gethex+0x118>
 80171f8:	f7ff ffca 	bl	8017190 <__hexdig_fun>
 80171fc:	4604      	mov	r4, r0
 80171fe:	2800      	cmp	r0, #0
 8017200:	d16a      	bne.n	80172d8 <__gethex+0x11e>
 8017202:	9a01      	ldr	r2, [sp, #4]
 8017204:	9903      	ldr	r1, [sp, #12]
 8017206:	4638      	mov	r0, r7
 8017208:	f7fe f9e0 	bl	80155cc <strncmp>
 801720c:	2800      	cmp	r0, #0
 801720e:	d166      	bne.n	80172de <__gethex+0x124>
 8017210:	9b01      	ldr	r3, [sp, #4]
 8017212:	5cf8      	ldrb	r0, [r7, r3]
 8017214:	18fe      	adds	r6, r7, r3
 8017216:	f7ff ffbb 	bl	8017190 <__hexdig_fun>
 801721a:	2800      	cmp	r0, #0
 801721c:	d062      	beq.n	80172e4 <__gethex+0x12a>
 801721e:	4633      	mov	r3, r6
 8017220:	7818      	ldrb	r0, [r3, #0]
 8017222:	2830      	cmp	r0, #48	; 0x30
 8017224:	461f      	mov	r7, r3
 8017226:	f103 0301 	add.w	r3, r3, #1
 801722a:	d0f9      	beq.n	8017220 <__gethex+0x66>
 801722c:	f7ff ffb0 	bl	8017190 <__hexdig_fun>
 8017230:	fab0 f580 	clz	r5, r0
 8017234:	096d      	lsrs	r5, r5, #5
 8017236:	4634      	mov	r4, r6
 8017238:	f04f 0b01 	mov.w	fp, #1
 801723c:	463a      	mov	r2, r7
 801723e:	4616      	mov	r6, r2
 8017240:	3201      	adds	r2, #1
 8017242:	7830      	ldrb	r0, [r6, #0]
 8017244:	f7ff ffa4 	bl	8017190 <__hexdig_fun>
 8017248:	2800      	cmp	r0, #0
 801724a:	d1f8      	bne.n	801723e <__gethex+0x84>
 801724c:	9a01      	ldr	r2, [sp, #4]
 801724e:	9903      	ldr	r1, [sp, #12]
 8017250:	4630      	mov	r0, r6
 8017252:	f7fe f9bb 	bl	80155cc <strncmp>
 8017256:	b950      	cbnz	r0, 801726e <__gethex+0xb4>
 8017258:	b954      	cbnz	r4, 8017270 <__gethex+0xb6>
 801725a:	9b01      	ldr	r3, [sp, #4]
 801725c:	18f4      	adds	r4, r6, r3
 801725e:	4622      	mov	r2, r4
 8017260:	4616      	mov	r6, r2
 8017262:	3201      	adds	r2, #1
 8017264:	7830      	ldrb	r0, [r6, #0]
 8017266:	f7ff ff93 	bl	8017190 <__hexdig_fun>
 801726a:	2800      	cmp	r0, #0
 801726c:	d1f8      	bne.n	8017260 <__gethex+0xa6>
 801726e:	b10c      	cbz	r4, 8017274 <__gethex+0xba>
 8017270:	1ba4      	subs	r4, r4, r6
 8017272:	00a4      	lsls	r4, r4, #2
 8017274:	7833      	ldrb	r3, [r6, #0]
 8017276:	2b50      	cmp	r3, #80	; 0x50
 8017278:	d001      	beq.n	801727e <__gethex+0xc4>
 801727a:	2b70      	cmp	r3, #112	; 0x70
 801727c:	d140      	bne.n	8017300 <__gethex+0x146>
 801727e:	7873      	ldrb	r3, [r6, #1]
 8017280:	2b2b      	cmp	r3, #43	; 0x2b
 8017282:	d031      	beq.n	80172e8 <__gethex+0x12e>
 8017284:	2b2d      	cmp	r3, #45	; 0x2d
 8017286:	d033      	beq.n	80172f0 <__gethex+0x136>
 8017288:	1c71      	adds	r1, r6, #1
 801728a:	f04f 0900 	mov.w	r9, #0
 801728e:	7808      	ldrb	r0, [r1, #0]
 8017290:	f7ff ff7e 	bl	8017190 <__hexdig_fun>
 8017294:	1e43      	subs	r3, r0, #1
 8017296:	b2db      	uxtb	r3, r3
 8017298:	2b18      	cmp	r3, #24
 801729a:	d831      	bhi.n	8017300 <__gethex+0x146>
 801729c:	f1a0 0210 	sub.w	r2, r0, #16
 80172a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80172a4:	f7ff ff74 	bl	8017190 <__hexdig_fun>
 80172a8:	1e43      	subs	r3, r0, #1
 80172aa:	b2db      	uxtb	r3, r3
 80172ac:	2b18      	cmp	r3, #24
 80172ae:	d922      	bls.n	80172f6 <__gethex+0x13c>
 80172b0:	f1b9 0f00 	cmp.w	r9, #0
 80172b4:	d000      	beq.n	80172b8 <__gethex+0xfe>
 80172b6:	4252      	negs	r2, r2
 80172b8:	4414      	add	r4, r2
 80172ba:	f8ca 1000 	str.w	r1, [sl]
 80172be:	b30d      	cbz	r5, 8017304 <__gethex+0x14a>
 80172c0:	f1bb 0f00 	cmp.w	fp, #0
 80172c4:	bf0c      	ite	eq
 80172c6:	2706      	moveq	r7, #6
 80172c8:	2700      	movne	r7, #0
 80172ca:	4638      	mov	r0, r7
 80172cc:	b00b      	add	sp, #44	; 0x2c
 80172ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172d2:	f10b 0b01 	add.w	fp, fp, #1
 80172d6:	e78a      	b.n	80171ee <__gethex+0x34>
 80172d8:	2500      	movs	r5, #0
 80172da:	462c      	mov	r4, r5
 80172dc:	e7ae      	b.n	801723c <__gethex+0x82>
 80172de:	463e      	mov	r6, r7
 80172e0:	2501      	movs	r5, #1
 80172e2:	e7c7      	b.n	8017274 <__gethex+0xba>
 80172e4:	4604      	mov	r4, r0
 80172e6:	e7fb      	b.n	80172e0 <__gethex+0x126>
 80172e8:	f04f 0900 	mov.w	r9, #0
 80172ec:	1cb1      	adds	r1, r6, #2
 80172ee:	e7ce      	b.n	801728e <__gethex+0xd4>
 80172f0:	f04f 0901 	mov.w	r9, #1
 80172f4:	e7fa      	b.n	80172ec <__gethex+0x132>
 80172f6:	230a      	movs	r3, #10
 80172f8:	fb03 0202 	mla	r2, r3, r2, r0
 80172fc:	3a10      	subs	r2, #16
 80172fe:	e7cf      	b.n	80172a0 <__gethex+0xe6>
 8017300:	4631      	mov	r1, r6
 8017302:	e7da      	b.n	80172ba <__gethex+0x100>
 8017304:	1bf3      	subs	r3, r6, r7
 8017306:	3b01      	subs	r3, #1
 8017308:	4629      	mov	r1, r5
 801730a:	2b07      	cmp	r3, #7
 801730c:	dc49      	bgt.n	80173a2 <__gethex+0x1e8>
 801730e:	9802      	ldr	r0, [sp, #8]
 8017310:	f000 fa3c 	bl	801778c <_Balloc>
 8017314:	9b01      	ldr	r3, [sp, #4]
 8017316:	f100 0914 	add.w	r9, r0, #20
 801731a:	f04f 0b00 	mov.w	fp, #0
 801731e:	f1c3 0301 	rsb	r3, r3, #1
 8017322:	4605      	mov	r5, r0
 8017324:	f8cd 9010 	str.w	r9, [sp, #16]
 8017328:	46da      	mov	sl, fp
 801732a:	9308      	str	r3, [sp, #32]
 801732c:	42b7      	cmp	r7, r6
 801732e:	d33b      	bcc.n	80173a8 <__gethex+0x1ee>
 8017330:	9804      	ldr	r0, [sp, #16]
 8017332:	f840 ab04 	str.w	sl, [r0], #4
 8017336:	eba0 0009 	sub.w	r0, r0, r9
 801733a:	1080      	asrs	r0, r0, #2
 801733c:	6128      	str	r0, [r5, #16]
 801733e:	0147      	lsls	r7, r0, #5
 8017340:	4650      	mov	r0, sl
 8017342:	f000 fae7 	bl	8017914 <__hi0bits>
 8017346:	f8d8 6000 	ldr.w	r6, [r8]
 801734a:	1a3f      	subs	r7, r7, r0
 801734c:	42b7      	cmp	r7, r6
 801734e:	dd64      	ble.n	801741a <__gethex+0x260>
 8017350:	1bbf      	subs	r7, r7, r6
 8017352:	4639      	mov	r1, r7
 8017354:	4628      	mov	r0, r5
 8017356:	f000 fdf7 	bl	8017f48 <__any_on>
 801735a:	4682      	mov	sl, r0
 801735c:	b178      	cbz	r0, 801737e <__gethex+0x1c4>
 801735e:	1e7b      	subs	r3, r7, #1
 8017360:	1159      	asrs	r1, r3, #5
 8017362:	f003 021f 	and.w	r2, r3, #31
 8017366:	f04f 0a01 	mov.w	sl, #1
 801736a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801736e:	fa0a f202 	lsl.w	r2, sl, r2
 8017372:	420a      	tst	r2, r1
 8017374:	d003      	beq.n	801737e <__gethex+0x1c4>
 8017376:	4553      	cmp	r3, sl
 8017378:	dc46      	bgt.n	8017408 <__gethex+0x24e>
 801737a:	f04f 0a02 	mov.w	sl, #2
 801737e:	4639      	mov	r1, r7
 8017380:	4628      	mov	r0, r5
 8017382:	f7ff fecb 	bl	801711c <rshift>
 8017386:	443c      	add	r4, r7
 8017388:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801738c:	42a3      	cmp	r3, r4
 801738e:	da52      	bge.n	8017436 <__gethex+0x27c>
 8017390:	4629      	mov	r1, r5
 8017392:	9802      	ldr	r0, [sp, #8]
 8017394:	f000 fa2e 	bl	80177f4 <_Bfree>
 8017398:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801739a:	2300      	movs	r3, #0
 801739c:	6013      	str	r3, [r2, #0]
 801739e:	27a3      	movs	r7, #163	; 0xa3
 80173a0:	e793      	b.n	80172ca <__gethex+0x110>
 80173a2:	3101      	adds	r1, #1
 80173a4:	105b      	asrs	r3, r3, #1
 80173a6:	e7b0      	b.n	801730a <__gethex+0x150>
 80173a8:	1e73      	subs	r3, r6, #1
 80173aa:	9305      	str	r3, [sp, #20]
 80173ac:	9a07      	ldr	r2, [sp, #28]
 80173ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80173b2:	4293      	cmp	r3, r2
 80173b4:	d018      	beq.n	80173e8 <__gethex+0x22e>
 80173b6:	f1bb 0f20 	cmp.w	fp, #32
 80173ba:	d107      	bne.n	80173cc <__gethex+0x212>
 80173bc:	9b04      	ldr	r3, [sp, #16]
 80173be:	f8c3 a000 	str.w	sl, [r3]
 80173c2:	3304      	adds	r3, #4
 80173c4:	f04f 0a00 	mov.w	sl, #0
 80173c8:	9304      	str	r3, [sp, #16]
 80173ca:	46d3      	mov	fp, sl
 80173cc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80173d0:	f7ff fede 	bl	8017190 <__hexdig_fun>
 80173d4:	f000 000f 	and.w	r0, r0, #15
 80173d8:	fa00 f00b 	lsl.w	r0, r0, fp
 80173dc:	ea4a 0a00 	orr.w	sl, sl, r0
 80173e0:	f10b 0b04 	add.w	fp, fp, #4
 80173e4:	9b05      	ldr	r3, [sp, #20]
 80173e6:	e00d      	b.n	8017404 <__gethex+0x24a>
 80173e8:	9b05      	ldr	r3, [sp, #20]
 80173ea:	9a08      	ldr	r2, [sp, #32]
 80173ec:	4413      	add	r3, r2
 80173ee:	42bb      	cmp	r3, r7
 80173f0:	d3e1      	bcc.n	80173b6 <__gethex+0x1fc>
 80173f2:	4618      	mov	r0, r3
 80173f4:	9a01      	ldr	r2, [sp, #4]
 80173f6:	9903      	ldr	r1, [sp, #12]
 80173f8:	9309      	str	r3, [sp, #36]	; 0x24
 80173fa:	f7fe f8e7 	bl	80155cc <strncmp>
 80173fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017400:	2800      	cmp	r0, #0
 8017402:	d1d8      	bne.n	80173b6 <__gethex+0x1fc>
 8017404:	461e      	mov	r6, r3
 8017406:	e791      	b.n	801732c <__gethex+0x172>
 8017408:	1eb9      	subs	r1, r7, #2
 801740a:	4628      	mov	r0, r5
 801740c:	f000 fd9c 	bl	8017f48 <__any_on>
 8017410:	2800      	cmp	r0, #0
 8017412:	d0b2      	beq.n	801737a <__gethex+0x1c0>
 8017414:	f04f 0a03 	mov.w	sl, #3
 8017418:	e7b1      	b.n	801737e <__gethex+0x1c4>
 801741a:	da09      	bge.n	8017430 <__gethex+0x276>
 801741c:	1bf7      	subs	r7, r6, r7
 801741e:	4629      	mov	r1, r5
 8017420:	463a      	mov	r2, r7
 8017422:	9802      	ldr	r0, [sp, #8]
 8017424:	f000 fbb2 	bl	8017b8c <__lshift>
 8017428:	1be4      	subs	r4, r4, r7
 801742a:	4605      	mov	r5, r0
 801742c:	f100 0914 	add.w	r9, r0, #20
 8017430:	f04f 0a00 	mov.w	sl, #0
 8017434:	e7a8      	b.n	8017388 <__gethex+0x1ce>
 8017436:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801743a:	42a0      	cmp	r0, r4
 801743c:	dd6a      	ble.n	8017514 <__gethex+0x35a>
 801743e:	1b04      	subs	r4, r0, r4
 8017440:	42a6      	cmp	r6, r4
 8017442:	dc2e      	bgt.n	80174a2 <__gethex+0x2e8>
 8017444:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017448:	2b02      	cmp	r3, #2
 801744a:	d022      	beq.n	8017492 <__gethex+0x2d8>
 801744c:	2b03      	cmp	r3, #3
 801744e:	d024      	beq.n	801749a <__gethex+0x2e0>
 8017450:	2b01      	cmp	r3, #1
 8017452:	d115      	bne.n	8017480 <__gethex+0x2c6>
 8017454:	42a6      	cmp	r6, r4
 8017456:	d113      	bne.n	8017480 <__gethex+0x2c6>
 8017458:	2e01      	cmp	r6, #1
 801745a:	dc0b      	bgt.n	8017474 <__gethex+0x2ba>
 801745c:	9a06      	ldr	r2, [sp, #24]
 801745e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017462:	6013      	str	r3, [r2, #0]
 8017464:	2301      	movs	r3, #1
 8017466:	612b      	str	r3, [r5, #16]
 8017468:	f8c9 3000 	str.w	r3, [r9]
 801746c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801746e:	2762      	movs	r7, #98	; 0x62
 8017470:	601d      	str	r5, [r3, #0]
 8017472:	e72a      	b.n	80172ca <__gethex+0x110>
 8017474:	1e71      	subs	r1, r6, #1
 8017476:	4628      	mov	r0, r5
 8017478:	f000 fd66 	bl	8017f48 <__any_on>
 801747c:	2800      	cmp	r0, #0
 801747e:	d1ed      	bne.n	801745c <__gethex+0x2a2>
 8017480:	4629      	mov	r1, r5
 8017482:	9802      	ldr	r0, [sp, #8]
 8017484:	f000 f9b6 	bl	80177f4 <_Bfree>
 8017488:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801748a:	2300      	movs	r3, #0
 801748c:	6013      	str	r3, [r2, #0]
 801748e:	2750      	movs	r7, #80	; 0x50
 8017490:	e71b      	b.n	80172ca <__gethex+0x110>
 8017492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017494:	2b00      	cmp	r3, #0
 8017496:	d0e1      	beq.n	801745c <__gethex+0x2a2>
 8017498:	e7f2      	b.n	8017480 <__gethex+0x2c6>
 801749a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801749c:	2b00      	cmp	r3, #0
 801749e:	d1dd      	bne.n	801745c <__gethex+0x2a2>
 80174a0:	e7ee      	b.n	8017480 <__gethex+0x2c6>
 80174a2:	1e67      	subs	r7, r4, #1
 80174a4:	f1ba 0f00 	cmp.w	sl, #0
 80174a8:	d131      	bne.n	801750e <__gethex+0x354>
 80174aa:	b127      	cbz	r7, 80174b6 <__gethex+0x2fc>
 80174ac:	4639      	mov	r1, r7
 80174ae:	4628      	mov	r0, r5
 80174b0:	f000 fd4a 	bl	8017f48 <__any_on>
 80174b4:	4682      	mov	sl, r0
 80174b6:	117a      	asrs	r2, r7, #5
 80174b8:	2301      	movs	r3, #1
 80174ba:	f007 071f 	and.w	r7, r7, #31
 80174be:	fa03 f707 	lsl.w	r7, r3, r7
 80174c2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80174c6:	4621      	mov	r1, r4
 80174c8:	421f      	tst	r7, r3
 80174ca:	4628      	mov	r0, r5
 80174cc:	bf18      	it	ne
 80174ce:	f04a 0a02 	orrne.w	sl, sl, #2
 80174d2:	1b36      	subs	r6, r6, r4
 80174d4:	f7ff fe22 	bl	801711c <rshift>
 80174d8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80174dc:	2702      	movs	r7, #2
 80174de:	f1ba 0f00 	cmp.w	sl, #0
 80174e2:	d048      	beq.n	8017576 <__gethex+0x3bc>
 80174e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80174e8:	2b02      	cmp	r3, #2
 80174ea:	d015      	beq.n	8017518 <__gethex+0x35e>
 80174ec:	2b03      	cmp	r3, #3
 80174ee:	d017      	beq.n	8017520 <__gethex+0x366>
 80174f0:	2b01      	cmp	r3, #1
 80174f2:	d109      	bne.n	8017508 <__gethex+0x34e>
 80174f4:	f01a 0f02 	tst.w	sl, #2
 80174f8:	d006      	beq.n	8017508 <__gethex+0x34e>
 80174fa:	f8d9 3000 	ldr.w	r3, [r9]
 80174fe:	ea4a 0a03 	orr.w	sl, sl, r3
 8017502:	f01a 0f01 	tst.w	sl, #1
 8017506:	d10e      	bne.n	8017526 <__gethex+0x36c>
 8017508:	f047 0710 	orr.w	r7, r7, #16
 801750c:	e033      	b.n	8017576 <__gethex+0x3bc>
 801750e:	f04f 0a01 	mov.w	sl, #1
 8017512:	e7d0      	b.n	80174b6 <__gethex+0x2fc>
 8017514:	2701      	movs	r7, #1
 8017516:	e7e2      	b.n	80174de <__gethex+0x324>
 8017518:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801751a:	f1c3 0301 	rsb	r3, r3, #1
 801751e:	9315      	str	r3, [sp, #84]	; 0x54
 8017520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017522:	2b00      	cmp	r3, #0
 8017524:	d0f0      	beq.n	8017508 <__gethex+0x34e>
 8017526:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801752a:	f105 0314 	add.w	r3, r5, #20
 801752e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017532:	eb03 010a 	add.w	r1, r3, sl
 8017536:	f04f 0c00 	mov.w	ip, #0
 801753a:	4618      	mov	r0, r3
 801753c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017540:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017544:	d01c      	beq.n	8017580 <__gethex+0x3c6>
 8017546:	3201      	adds	r2, #1
 8017548:	6002      	str	r2, [r0, #0]
 801754a:	2f02      	cmp	r7, #2
 801754c:	f105 0314 	add.w	r3, r5, #20
 8017550:	d138      	bne.n	80175c4 <__gethex+0x40a>
 8017552:	f8d8 2000 	ldr.w	r2, [r8]
 8017556:	3a01      	subs	r2, #1
 8017558:	42b2      	cmp	r2, r6
 801755a:	d10a      	bne.n	8017572 <__gethex+0x3b8>
 801755c:	1171      	asrs	r1, r6, #5
 801755e:	2201      	movs	r2, #1
 8017560:	f006 061f 	and.w	r6, r6, #31
 8017564:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017568:	fa02 f606 	lsl.w	r6, r2, r6
 801756c:	421e      	tst	r6, r3
 801756e:	bf18      	it	ne
 8017570:	4617      	movne	r7, r2
 8017572:	f047 0720 	orr.w	r7, r7, #32
 8017576:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017578:	601d      	str	r5, [r3, #0]
 801757a:	9b06      	ldr	r3, [sp, #24]
 801757c:	601c      	str	r4, [r3, #0]
 801757e:	e6a4      	b.n	80172ca <__gethex+0x110>
 8017580:	4299      	cmp	r1, r3
 8017582:	f843 cc04 	str.w	ip, [r3, #-4]
 8017586:	d8d8      	bhi.n	801753a <__gethex+0x380>
 8017588:	68ab      	ldr	r3, [r5, #8]
 801758a:	4599      	cmp	r9, r3
 801758c:	db12      	blt.n	80175b4 <__gethex+0x3fa>
 801758e:	6869      	ldr	r1, [r5, #4]
 8017590:	9802      	ldr	r0, [sp, #8]
 8017592:	3101      	adds	r1, #1
 8017594:	f000 f8fa 	bl	801778c <_Balloc>
 8017598:	692a      	ldr	r2, [r5, #16]
 801759a:	3202      	adds	r2, #2
 801759c:	f105 010c 	add.w	r1, r5, #12
 80175a0:	4683      	mov	fp, r0
 80175a2:	0092      	lsls	r2, r2, #2
 80175a4:	300c      	adds	r0, #12
 80175a6:	f7fd fa64 	bl	8014a72 <memcpy>
 80175aa:	4629      	mov	r1, r5
 80175ac:	9802      	ldr	r0, [sp, #8]
 80175ae:	f000 f921 	bl	80177f4 <_Bfree>
 80175b2:	465d      	mov	r5, fp
 80175b4:	692b      	ldr	r3, [r5, #16]
 80175b6:	1c5a      	adds	r2, r3, #1
 80175b8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80175bc:	612a      	str	r2, [r5, #16]
 80175be:	2201      	movs	r2, #1
 80175c0:	615a      	str	r2, [r3, #20]
 80175c2:	e7c2      	b.n	801754a <__gethex+0x390>
 80175c4:	692a      	ldr	r2, [r5, #16]
 80175c6:	454a      	cmp	r2, r9
 80175c8:	dd0b      	ble.n	80175e2 <__gethex+0x428>
 80175ca:	2101      	movs	r1, #1
 80175cc:	4628      	mov	r0, r5
 80175ce:	f7ff fda5 	bl	801711c <rshift>
 80175d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80175d6:	3401      	adds	r4, #1
 80175d8:	42a3      	cmp	r3, r4
 80175da:	f6ff aed9 	blt.w	8017390 <__gethex+0x1d6>
 80175de:	2701      	movs	r7, #1
 80175e0:	e7c7      	b.n	8017572 <__gethex+0x3b8>
 80175e2:	f016 061f 	ands.w	r6, r6, #31
 80175e6:	d0fa      	beq.n	80175de <__gethex+0x424>
 80175e8:	449a      	add	sl, r3
 80175ea:	f1c6 0620 	rsb	r6, r6, #32
 80175ee:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80175f2:	f000 f98f 	bl	8017914 <__hi0bits>
 80175f6:	42b0      	cmp	r0, r6
 80175f8:	dbe7      	blt.n	80175ca <__gethex+0x410>
 80175fa:	e7f0      	b.n	80175de <__gethex+0x424>

080175fc <L_shift>:
 80175fc:	f1c2 0208 	rsb	r2, r2, #8
 8017600:	0092      	lsls	r2, r2, #2
 8017602:	b570      	push	{r4, r5, r6, lr}
 8017604:	f1c2 0620 	rsb	r6, r2, #32
 8017608:	6843      	ldr	r3, [r0, #4]
 801760a:	6804      	ldr	r4, [r0, #0]
 801760c:	fa03 f506 	lsl.w	r5, r3, r6
 8017610:	432c      	orrs	r4, r5
 8017612:	40d3      	lsrs	r3, r2
 8017614:	6004      	str	r4, [r0, #0]
 8017616:	f840 3f04 	str.w	r3, [r0, #4]!
 801761a:	4288      	cmp	r0, r1
 801761c:	d3f4      	bcc.n	8017608 <L_shift+0xc>
 801761e:	bd70      	pop	{r4, r5, r6, pc}

08017620 <__match>:
 8017620:	b530      	push	{r4, r5, lr}
 8017622:	6803      	ldr	r3, [r0, #0]
 8017624:	3301      	adds	r3, #1
 8017626:	f811 4b01 	ldrb.w	r4, [r1], #1
 801762a:	b914      	cbnz	r4, 8017632 <__match+0x12>
 801762c:	6003      	str	r3, [r0, #0]
 801762e:	2001      	movs	r0, #1
 8017630:	bd30      	pop	{r4, r5, pc}
 8017632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017636:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801763a:	2d19      	cmp	r5, #25
 801763c:	bf98      	it	ls
 801763e:	3220      	addls	r2, #32
 8017640:	42a2      	cmp	r2, r4
 8017642:	d0f0      	beq.n	8017626 <__match+0x6>
 8017644:	2000      	movs	r0, #0
 8017646:	e7f3      	b.n	8017630 <__match+0x10>

08017648 <__hexnan>:
 8017648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801764c:	680b      	ldr	r3, [r1, #0]
 801764e:	6801      	ldr	r1, [r0, #0]
 8017650:	115f      	asrs	r7, r3, #5
 8017652:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017656:	f013 031f 	ands.w	r3, r3, #31
 801765a:	b087      	sub	sp, #28
 801765c:	bf18      	it	ne
 801765e:	3704      	addne	r7, #4
 8017660:	2500      	movs	r5, #0
 8017662:	1f3e      	subs	r6, r7, #4
 8017664:	4682      	mov	sl, r0
 8017666:	4690      	mov	r8, r2
 8017668:	9301      	str	r3, [sp, #4]
 801766a:	f847 5c04 	str.w	r5, [r7, #-4]
 801766e:	46b1      	mov	r9, r6
 8017670:	4634      	mov	r4, r6
 8017672:	9502      	str	r5, [sp, #8]
 8017674:	46ab      	mov	fp, r5
 8017676:	784a      	ldrb	r2, [r1, #1]
 8017678:	1c4b      	adds	r3, r1, #1
 801767a:	9303      	str	r3, [sp, #12]
 801767c:	b342      	cbz	r2, 80176d0 <__hexnan+0x88>
 801767e:	4610      	mov	r0, r2
 8017680:	9105      	str	r1, [sp, #20]
 8017682:	9204      	str	r2, [sp, #16]
 8017684:	f7ff fd84 	bl	8017190 <__hexdig_fun>
 8017688:	2800      	cmp	r0, #0
 801768a:	d143      	bne.n	8017714 <__hexnan+0xcc>
 801768c:	9a04      	ldr	r2, [sp, #16]
 801768e:	9905      	ldr	r1, [sp, #20]
 8017690:	2a20      	cmp	r2, #32
 8017692:	d818      	bhi.n	80176c6 <__hexnan+0x7e>
 8017694:	9b02      	ldr	r3, [sp, #8]
 8017696:	459b      	cmp	fp, r3
 8017698:	dd13      	ble.n	80176c2 <__hexnan+0x7a>
 801769a:	454c      	cmp	r4, r9
 801769c:	d206      	bcs.n	80176ac <__hexnan+0x64>
 801769e:	2d07      	cmp	r5, #7
 80176a0:	dc04      	bgt.n	80176ac <__hexnan+0x64>
 80176a2:	462a      	mov	r2, r5
 80176a4:	4649      	mov	r1, r9
 80176a6:	4620      	mov	r0, r4
 80176a8:	f7ff ffa8 	bl	80175fc <L_shift>
 80176ac:	4544      	cmp	r4, r8
 80176ae:	d944      	bls.n	801773a <__hexnan+0xf2>
 80176b0:	2300      	movs	r3, #0
 80176b2:	f1a4 0904 	sub.w	r9, r4, #4
 80176b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80176ba:	f8cd b008 	str.w	fp, [sp, #8]
 80176be:	464c      	mov	r4, r9
 80176c0:	461d      	mov	r5, r3
 80176c2:	9903      	ldr	r1, [sp, #12]
 80176c4:	e7d7      	b.n	8017676 <__hexnan+0x2e>
 80176c6:	2a29      	cmp	r2, #41	; 0x29
 80176c8:	d14a      	bne.n	8017760 <__hexnan+0x118>
 80176ca:	3102      	adds	r1, #2
 80176cc:	f8ca 1000 	str.w	r1, [sl]
 80176d0:	f1bb 0f00 	cmp.w	fp, #0
 80176d4:	d044      	beq.n	8017760 <__hexnan+0x118>
 80176d6:	454c      	cmp	r4, r9
 80176d8:	d206      	bcs.n	80176e8 <__hexnan+0xa0>
 80176da:	2d07      	cmp	r5, #7
 80176dc:	dc04      	bgt.n	80176e8 <__hexnan+0xa0>
 80176de:	462a      	mov	r2, r5
 80176e0:	4649      	mov	r1, r9
 80176e2:	4620      	mov	r0, r4
 80176e4:	f7ff ff8a 	bl	80175fc <L_shift>
 80176e8:	4544      	cmp	r4, r8
 80176ea:	d928      	bls.n	801773e <__hexnan+0xf6>
 80176ec:	4643      	mov	r3, r8
 80176ee:	f854 2b04 	ldr.w	r2, [r4], #4
 80176f2:	f843 2b04 	str.w	r2, [r3], #4
 80176f6:	42a6      	cmp	r6, r4
 80176f8:	d2f9      	bcs.n	80176ee <__hexnan+0xa6>
 80176fa:	2200      	movs	r2, #0
 80176fc:	f843 2b04 	str.w	r2, [r3], #4
 8017700:	429e      	cmp	r6, r3
 8017702:	d2fb      	bcs.n	80176fc <__hexnan+0xb4>
 8017704:	6833      	ldr	r3, [r6, #0]
 8017706:	b91b      	cbnz	r3, 8017710 <__hexnan+0xc8>
 8017708:	4546      	cmp	r6, r8
 801770a:	d127      	bne.n	801775c <__hexnan+0x114>
 801770c:	2301      	movs	r3, #1
 801770e:	6033      	str	r3, [r6, #0]
 8017710:	2005      	movs	r0, #5
 8017712:	e026      	b.n	8017762 <__hexnan+0x11a>
 8017714:	3501      	adds	r5, #1
 8017716:	2d08      	cmp	r5, #8
 8017718:	f10b 0b01 	add.w	fp, fp, #1
 801771c:	dd06      	ble.n	801772c <__hexnan+0xe4>
 801771e:	4544      	cmp	r4, r8
 8017720:	d9cf      	bls.n	80176c2 <__hexnan+0x7a>
 8017722:	2300      	movs	r3, #0
 8017724:	f844 3c04 	str.w	r3, [r4, #-4]
 8017728:	2501      	movs	r5, #1
 801772a:	3c04      	subs	r4, #4
 801772c:	6822      	ldr	r2, [r4, #0]
 801772e:	f000 000f 	and.w	r0, r0, #15
 8017732:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017736:	6020      	str	r0, [r4, #0]
 8017738:	e7c3      	b.n	80176c2 <__hexnan+0x7a>
 801773a:	2508      	movs	r5, #8
 801773c:	e7c1      	b.n	80176c2 <__hexnan+0x7a>
 801773e:	9b01      	ldr	r3, [sp, #4]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d0df      	beq.n	8017704 <__hexnan+0xbc>
 8017744:	f04f 32ff 	mov.w	r2, #4294967295
 8017748:	f1c3 0320 	rsb	r3, r3, #32
 801774c:	fa22 f303 	lsr.w	r3, r2, r3
 8017750:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017754:	401a      	ands	r2, r3
 8017756:	f847 2c04 	str.w	r2, [r7, #-4]
 801775a:	e7d3      	b.n	8017704 <__hexnan+0xbc>
 801775c:	3e04      	subs	r6, #4
 801775e:	e7d1      	b.n	8017704 <__hexnan+0xbc>
 8017760:	2004      	movs	r0, #4
 8017762:	b007      	add	sp, #28
 8017764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017768 <__localeconv_l>:
 8017768:	30f0      	adds	r0, #240	; 0xf0
 801776a:	4770      	bx	lr

0801776c <_localeconv_r>:
 801776c:	4b04      	ldr	r3, [pc, #16]	; (8017780 <_localeconv_r+0x14>)
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	6a18      	ldr	r0, [r3, #32]
 8017772:	4b04      	ldr	r3, [pc, #16]	; (8017784 <_localeconv_r+0x18>)
 8017774:	2800      	cmp	r0, #0
 8017776:	bf08      	it	eq
 8017778:	4618      	moveq	r0, r3
 801777a:	30f0      	adds	r0, #240	; 0xf0
 801777c:	4770      	bx	lr
 801777e:	bf00      	nop
 8017780:	2000003c 	.word	0x2000003c
 8017784:	200000a0 	.word	0x200000a0

08017788 <__malloc_lock>:
 8017788:	4770      	bx	lr

0801778a <__malloc_unlock>:
 801778a:	4770      	bx	lr

0801778c <_Balloc>:
 801778c:	b570      	push	{r4, r5, r6, lr}
 801778e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017790:	4604      	mov	r4, r0
 8017792:	460e      	mov	r6, r1
 8017794:	b93d      	cbnz	r5, 80177a6 <_Balloc+0x1a>
 8017796:	2010      	movs	r0, #16
 8017798:	f7fd f93a 	bl	8014a10 <malloc>
 801779c:	6260      	str	r0, [r4, #36]	; 0x24
 801779e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80177a2:	6005      	str	r5, [r0, #0]
 80177a4:	60c5      	str	r5, [r0, #12]
 80177a6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80177a8:	68eb      	ldr	r3, [r5, #12]
 80177aa:	b183      	cbz	r3, 80177ce <_Balloc+0x42>
 80177ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80177ae:	68db      	ldr	r3, [r3, #12]
 80177b0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80177b4:	b9b8      	cbnz	r0, 80177e6 <_Balloc+0x5a>
 80177b6:	2101      	movs	r1, #1
 80177b8:	fa01 f506 	lsl.w	r5, r1, r6
 80177bc:	1d6a      	adds	r2, r5, #5
 80177be:	0092      	lsls	r2, r2, #2
 80177c0:	4620      	mov	r0, r4
 80177c2:	f000 fbe2 	bl	8017f8a <_calloc_r>
 80177c6:	b160      	cbz	r0, 80177e2 <_Balloc+0x56>
 80177c8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80177cc:	e00e      	b.n	80177ec <_Balloc+0x60>
 80177ce:	2221      	movs	r2, #33	; 0x21
 80177d0:	2104      	movs	r1, #4
 80177d2:	4620      	mov	r0, r4
 80177d4:	f000 fbd9 	bl	8017f8a <_calloc_r>
 80177d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80177da:	60e8      	str	r0, [r5, #12]
 80177dc:	68db      	ldr	r3, [r3, #12]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d1e4      	bne.n	80177ac <_Balloc+0x20>
 80177e2:	2000      	movs	r0, #0
 80177e4:	bd70      	pop	{r4, r5, r6, pc}
 80177e6:	6802      	ldr	r2, [r0, #0]
 80177e8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80177ec:	2300      	movs	r3, #0
 80177ee:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80177f2:	e7f7      	b.n	80177e4 <_Balloc+0x58>

080177f4 <_Bfree>:
 80177f4:	b570      	push	{r4, r5, r6, lr}
 80177f6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80177f8:	4606      	mov	r6, r0
 80177fa:	460d      	mov	r5, r1
 80177fc:	b93c      	cbnz	r4, 801780e <_Bfree+0x1a>
 80177fe:	2010      	movs	r0, #16
 8017800:	f7fd f906 	bl	8014a10 <malloc>
 8017804:	6270      	str	r0, [r6, #36]	; 0x24
 8017806:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801780a:	6004      	str	r4, [r0, #0]
 801780c:	60c4      	str	r4, [r0, #12]
 801780e:	b13d      	cbz	r5, 8017820 <_Bfree+0x2c>
 8017810:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017812:	686a      	ldr	r2, [r5, #4]
 8017814:	68db      	ldr	r3, [r3, #12]
 8017816:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801781a:	6029      	str	r1, [r5, #0]
 801781c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017820:	bd70      	pop	{r4, r5, r6, pc}

08017822 <__multadd>:
 8017822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017826:	690d      	ldr	r5, [r1, #16]
 8017828:	461f      	mov	r7, r3
 801782a:	4606      	mov	r6, r0
 801782c:	460c      	mov	r4, r1
 801782e:	f101 0c14 	add.w	ip, r1, #20
 8017832:	2300      	movs	r3, #0
 8017834:	f8dc 0000 	ldr.w	r0, [ip]
 8017838:	b281      	uxth	r1, r0
 801783a:	fb02 7101 	mla	r1, r2, r1, r7
 801783e:	0c0f      	lsrs	r7, r1, #16
 8017840:	0c00      	lsrs	r0, r0, #16
 8017842:	fb02 7000 	mla	r0, r2, r0, r7
 8017846:	b289      	uxth	r1, r1
 8017848:	3301      	adds	r3, #1
 801784a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801784e:	429d      	cmp	r5, r3
 8017850:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017854:	f84c 1b04 	str.w	r1, [ip], #4
 8017858:	dcec      	bgt.n	8017834 <__multadd+0x12>
 801785a:	b1d7      	cbz	r7, 8017892 <__multadd+0x70>
 801785c:	68a3      	ldr	r3, [r4, #8]
 801785e:	42ab      	cmp	r3, r5
 8017860:	dc12      	bgt.n	8017888 <__multadd+0x66>
 8017862:	6861      	ldr	r1, [r4, #4]
 8017864:	4630      	mov	r0, r6
 8017866:	3101      	adds	r1, #1
 8017868:	f7ff ff90 	bl	801778c <_Balloc>
 801786c:	6922      	ldr	r2, [r4, #16]
 801786e:	3202      	adds	r2, #2
 8017870:	f104 010c 	add.w	r1, r4, #12
 8017874:	4680      	mov	r8, r0
 8017876:	0092      	lsls	r2, r2, #2
 8017878:	300c      	adds	r0, #12
 801787a:	f7fd f8fa 	bl	8014a72 <memcpy>
 801787e:	4621      	mov	r1, r4
 8017880:	4630      	mov	r0, r6
 8017882:	f7ff ffb7 	bl	80177f4 <_Bfree>
 8017886:	4644      	mov	r4, r8
 8017888:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801788c:	3501      	adds	r5, #1
 801788e:	615f      	str	r7, [r3, #20]
 8017890:	6125      	str	r5, [r4, #16]
 8017892:	4620      	mov	r0, r4
 8017894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017898 <__s2b>:
 8017898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801789c:	460c      	mov	r4, r1
 801789e:	4615      	mov	r5, r2
 80178a0:	461f      	mov	r7, r3
 80178a2:	2209      	movs	r2, #9
 80178a4:	3308      	adds	r3, #8
 80178a6:	4606      	mov	r6, r0
 80178a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80178ac:	2100      	movs	r1, #0
 80178ae:	2201      	movs	r2, #1
 80178b0:	429a      	cmp	r2, r3
 80178b2:	db20      	blt.n	80178f6 <__s2b+0x5e>
 80178b4:	4630      	mov	r0, r6
 80178b6:	f7ff ff69 	bl	801778c <_Balloc>
 80178ba:	9b08      	ldr	r3, [sp, #32]
 80178bc:	6143      	str	r3, [r0, #20]
 80178be:	2d09      	cmp	r5, #9
 80178c0:	f04f 0301 	mov.w	r3, #1
 80178c4:	6103      	str	r3, [r0, #16]
 80178c6:	dd19      	ble.n	80178fc <__s2b+0x64>
 80178c8:	f104 0809 	add.w	r8, r4, #9
 80178cc:	46c1      	mov	r9, r8
 80178ce:	442c      	add	r4, r5
 80178d0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80178d4:	4601      	mov	r1, r0
 80178d6:	3b30      	subs	r3, #48	; 0x30
 80178d8:	220a      	movs	r2, #10
 80178da:	4630      	mov	r0, r6
 80178dc:	f7ff ffa1 	bl	8017822 <__multadd>
 80178e0:	45a1      	cmp	r9, r4
 80178e2:	d1f5      	bne.n	80178d0 <__s2b+0x38>
 80178e4:	eb08 0405 	add.w	r4, r8, r5
 80178e8:	3c08      	subs	r4, #8
 80178ea:	1b2d      	subs	r5, r5, r4
 80178ec:	1963      	adds	r3, r4, r5
 80178ee:	42bb      	cmp	r3, r7
 80178f0:	db07      	blt.n	8017902 <__s2b+0x6a>
 80178f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178f6:	0052      	lsls	r2, r2, #1
 80178f8:	3101      	adds	r1, #1
 80178fa:	e7d9      	b.n	80178b0 <__s2b+0x18>
 80178fc:	340a      	adds	r4, #10
 80178fe:	2509      	movs	r5, #9
 8017900:	e7f3      	b.n	80178ea <__s2b+0x52>
 8017902:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017906:	4601      	mov	r1, r0
 8017908:	3b30      	subs	r3, #48	; 0x30
 801790a:	220a      	movs	r2, #10
 801790c:	4630      	mov	r0, r6
 801790e:	f7ff ff88 	bl	8017822 <__multadd>
 8017912:	e7eb      	b.n	80178ec <__s2b+0x54>

08017914 <__hi0bits>:
 8017914:	0c02      	lsrs	r2, r0, #16
 8017916:	0412      	lsls	r2, r2, #16
 8017918:	4603      	mov	r3, r0
 801791a:	b9b2      	cbnz	r2, 801794a <__hi0bits+0x36>
 801791c:	0403      	lsls	r3, r0, #16
 801791e:	2010      	movs	r0, #16
 8017920:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017924:	bf04      	itt	eq
 8017926:	021b      	lsleq	r3, r3, #8
 8017928:	3008      	addeq	r0, #8
 801792a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801792e:	bf04      	itt	eq
 8017930:	011b      	lsleq	r3, r3, #4
 8017932:	3004      	addeq	r0, #4
 8017934:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017938:	bf04      	itt	eq
 801793a:	009b      	lsleq	r3, r3, #2
 801793c:	3002      	addeq	r0, #2
 801793e:	2b00      	cmp	r3, #0
 8017940:	db06      	blt.n	8017950 <__hi0bits+0x3c>
 8017942:	005b      	lsls	r3, r3, #1
 8017944:	d503      	bpl.n	801794e <__hi0bits+0x3a>
 8017946:	3001      	adds	r0, #1
 8017948:	4770      	bx	lr
 801794a:	2000      	movs	r0, #0
 801794c:	e7e8      	b.n	8017920 <__hi0bits+0xc>
 801794e:	2020      	movs	r0, #32
 8017950:	4770      	bx	lr

08017952 <__lo0bits>:
 8017952:	6803      	ldr	r3, [r0, #0]
 8017954:	f013 0207 	ands.w	r2, r3, #7
 8017958:	4601      	mov	r1, r0
 801795a:	d00b      	beq.n	8017974 <__lo0bits+0x22>
 801795c:	07da      	lsls	r2, r3, #31
 801795e:	d423      	bmi.n	80179a8 <__lo0bits+0x56>
 8017960:	0798      	lsls	r0, r3, #30
 8017962:	bf49      	itett	mi
 8017964:	085b      	lsrmi	r3, r3, #1
 8017966:	089b      	lsrpl	r3, r3, #2
 8017968:	2001      	movmi	r0, #1
 801796a:	600b      	strmi	r3, [r1, #0]
 801796c:	bf5c      	itt	pl
 801796e:	600b      	strpl	r3, [r1, #0]
 8017970:	2002      	movpl	r0, #2
 8017972:	4770      	bx	lr
 8017974:	b298      	uxth	r0, r3
 8017976:	b9a8      	cbnz	r0, 80179a4 <__lo0bits+0x52>
 8017978:	0c1b      	lsrs	r3, r3, #16
 801797a:	2010      	movs	r0, #16
 801797c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017980:	bf04      	itt	eq
 8017982:	0a1b      	lsreq	r3, r3, #8
 8017984:	3008      	addeq	r0, #8
 8017986:	071a      	lsls	r2, r3, #28
 8017988:	bf04      	itt	eq
 801798a:	091b      	lsreq	r3, r3, #4
 801798c:	3004      	addeq	r0, #4
 801798e:	079a      	lsls	r2, r3, #30
 8017990:	bf04      	itt	eq
 8017992:	089b      	lsreq	r3, r3, #2
 8017994:	3002      	addeq	r0, #2
 8017996:	07da      	lsls	r2, r3, #31
 8017998:	d402      	bmi.n	80179a0 <__lo0bits+0x4e>
 801799a:	085b      	lsrs	r3, r3, #1
 801799c:	d006      	beq.n	80179ac <__lo0bits+0x5a>
 801799e:	3001      	adds	r0, #1
 80179a0:	600b      	str	r3, [r1, #0]
 80179a2:	4770      	bx	lr
 80179a4:	4610      	mov	r0, r2
 80179a6:	e7e9      	b.n	801797c <__lo0bits+0x2a>
 80179a8:	2000      	movs	r0, #0
 80179aa:	4770      	bx	lr
 80179ac:	2020      	movs	r0, #32
 80179ae:	4770      	bx	lr

080179b0 <__i2b>:
 80179b0:	b510      	push	{r4, lr}
 80179b2:	460c      	mov	r4, r1
 80179b4:	2101      	movs	r1, #1
 80179b6:	f7ff fee9 	bl	801778c <_Balloc>
 80179ba:	2201      	movs	r2, #1
 80179bc:	6144      	str	r4, [r0, #20]
 80179be:	6102      	str	r2, [r0, #16]
 80179c0:	bd10      	pop	{r4, pc}

080179c2 <__multiply>:
 80179c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179c6:	4614      	mov	r4, r2
 80179c8:	690a      	ldr	r2, [r1, #16]
 80179ca:	6923      	ldr	r3, [r4, #16]
 80179cc:	429a      	cmp	r2, r3
 80179ce:	bfb8      	it	lt
 80179d0:	460b      	movlt	r3, r1
 80179d2:	4688      	mov	r8, r1
 80179d4:	bfbc      	itt	lt
 80179d6:	46a0      	movlt	r8, r4
 80179d8:	461c      	movlt	r4, r3
 80179da:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80179de:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80179e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80179e6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80179ea:	eb07 0609 	add.w	r6, r7, r9
 80179ee:	42b3      	cmp	r3, r6
 80179f0:	bfb8      	it	lt
 80179f2:	3101      	addlt	r1, #1
 80179f4:	f7ff feca 	bl	801778c <_Balloc>
 80179f8:	f100 0514 	add.w	r5, r0, #20
 80179fc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017a00:	462b      	mov	r3, r5
 8017a02:	2200      	movs	r2, #0
 8017a04:	4573      	cmp	r3, lr
 8017a06:	d316      	bcc.n	8017a36 <__multiply+0x74>
 8017a08:	f104 0214 	add.w	r2, r4, #20
 8017a0c:	f108 0114 	add.w	r1, r8, #20
 8017a10:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017a14:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017a18:	9300      	str	r3, [sp, #0]
 8017a1a:	9b00      	ldr	r3, [sp, #0]
 8017a1c:	9201      	str	r2, [sp, #4]
 8017a1e:	4293      	cmp	r3, r2
 8017a20:	d80c      	bhi.n	8017a3c <__multiply+0x7a>
 8017a22:	2e00      	cmp	r6, #0
 8017a24:	dd03      	ble.n	8017a2e <__multiply+0x6c>
 8017a26:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d05d      	beq.n	8017aea <__multiply+0x128>
 8017a2e:	6106      	str	r6, [r0, #16]
 8017a30:	b003      	add	sp, #12
 8017a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a36:	f843 2b04 	str.w	r2, [r3], #4
 8017a3a:	e7e3      	b.n	8017a04 <__multiply+0x42>
 8017a3c:	f8b2 b000 	ldrh.w	fp, [r2]
 8017a40:	f1bb 0f00 	cmp.w	fp, #0
 8017a44:	d023      	beq.n	8017a8e <__multiply+0xcc>
 8017a46:	4689      	mov	r9, r1
 8017a48:	46ac      	mov	ip, r5
 8017a4a:	f04f 0800 	mov.w	r8, #0
 8017a4e:	f859 4b04 	ldr.w	r4, [r9], #4
 8017a52:	f8dc a000 	ldr.w	sl, [ip]
 8017a56:	b2a3      	uxth	r3, r4
 8017a58:	fa1f fa8a 	uxth.w	sl, sl
 8017a5c:	fb0b a303 	mla	r3, fp, r3, sl
 8017a60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017a64:	f8dc 4000 	ldr.w	r4, [ip]
 8017a68:	4443      	add	r3, r8
 8017a6a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017a6e:	fb0b 840a 	mla	r4, fp, sl, r8
 8017a72:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017a76:	46e2      	mov	sl, ip
 8017a78:	b29b      	uxth	r3, r3
 8017a7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017a7e:	454f      	cmp	r7, r9
 8017a80:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017a84:	f84a 3b04 	str.w	r3, [sl], #4
 8017a88:	d82b      	bhi.n	8017ae2 <__multiply+0x120>
 8017a8a:	f8cc 8004 	str.w	r8, [ip, #4]
 8017a8e:	9b01      	ldr	r3, [sp, #4]
 8017a90:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017a94:	3204      	adds	r2, #4
 8017a96:	f1ba 0f00 	cmp.w	sl, #0
 8017a9a:	d020      	beq.n	8017ade <__multiply+0x11c>
 8017a9c:	682b      	ldr	r3, [r5, #0]
 8017a9e:	4689      	mov	r9, r1
 8017aa0:	46a8      	mov	r8, r5
 8017aa2:	f04f 0b00 	mov.w	fp, #0
 8017aa6:	f8b9 c000 	ldrh.w	ip, [r9]
 8017aaa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017aae:	fb0a 440c 	mla	r4, sl, ip, r4
 8017ab2:	445c      	add	r4, fp
 8017ab4:	46c4      	mov	ip, r8
 8017ab6:	b29b      	uxth	r3, r3
 8017ab8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017abc:	f84c 3b04 	str.w	r3, [ip], #4
 8017ac0:	f859 3b04 	ldr.w	r3, [r9], #4
 8017ac4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017ac8:	0c1b      	lsrs	r3, r3, #16
 8017aca:	fb0a b303 	mla	r3, sl, r3, fp
 8017ace:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017ad2:	454f      	cmp	r7, r9
 8017ad4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017ad8:	d805      	bhi.n	8017ae6 <__multiply+0x124>
 8017ada:	f8c8 3004 	str.w	r3, [r8, #4]
 8017ade:	3504      	adds	r5, #4
 8017ae0:	e79b      	b.n	8017a1a <__multiply+0x58>
 8017ae2:	46d4      	mov	ip, sl
 8017ae4:	e7b3      	b.n	8017a4e <__multiply+0x8c>
 8017ae6:	46e0      	mov	r8, ip
 8017ae8:	e7dd      	b.n	8017aa6 <__multiply+0xe4>
 8017aea:	3e01      	subs	r6, #1
 8017aec:	e799      	b.n	8017a22 <__multiply+0x60>
	...

08017af0 <__pow5mult>:
 8017af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017af4:	4615      	mov	r5, r2
 8017af6:	f012 0203 	ands.w	r2, r2, #3
 8017afa:	4606      	mov	r6, r0
 8017afc:	460f      	mov	r7, r1
 8017afe:	d007      	beq.n	8017b10 <__pow5mult+0x20>
 8017b00:	3a01      	subs	r2, #1
 8017b02:	4c21      	ldr	r4, [pc, #132]	; (8017b88 <__pow5mult+0x98>)
 8017b04:	2300      	movs	r3, #0
 8017b06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017b0a:	f7ff fe8a 	bl	8017822 <__multadd>
 8017b0e:	4607      	mov	r7, r0
 8017b10:	10ad      	asrs	r5, r5, #2
 8017b12:	d035      	beq.n	8017b80 <__pow5mult+0x90>
 8017b14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017b16:	b93c      	cbnz	r4, 8017b28 <__pow5mult+0x38>
 8017b18:	2010      	movs	r0, #16
 8017b1a:	f7fc ff79 	bl	8014a10 <malloc>
 8017b1e:	6270      	str	r0, [r6, #36]	; 0x24
 8017b20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017b24:	6004      	str	r4, [r0, #0]
 8017b26:	60c4      	str	r4, [r0, #12]
 8017b28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017b2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017b30:	b94c      	cbnz	r4, 8017b46 <__pow5mult+0x56>
 8017b32:	f240 2171 	movw	r1, #625	; 0x271
 8017b36:	4630      	mov	r0, r6
 8017b38:	f7ff ff3a 	bl	80179b0 <__i2b>
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017b42:	4604      	mov	r4, r0
 8017b44:	6003      	str	r3, [r0, #0]
 8017b46:	f04f 0800 	mov.w	r8, #0
 8017b4a:	07eb      	lsls	r3, r5, #31
 8017b4c:	d50a      	bpl.n	8017b64 <__pow5mult+0x74>
 8017b4e:	4639      	mov	r1, r7
 8017b50:	4622      	mov	r2, r4
 8017b52:	4630      	mov	r0, r6
 8017b54:	f7ff ff35 	bl	80179c2 <__multiply>
 8017b58:	4639      	mov	r1, r7
 8017b5a:	4681      	mov	r9, r0
 8017b5c:	4630      	mov	r0, r6
 8017b5e:	f7ff fe49 	bl	80177f4 <_Bfree>
 8017b62:	464f      	mov	r7, r9
 8017b64:	106d      	asrs	r5, r5, #1
 8017b66:	d00b      	beq.n	8017b80 <__pow5mult+0x90>
 8017b68:	6820      	ldr	r0, [r4, #0]
 8017b6a:	b938      	cbnz	r0, 8017b7c <__pow5mult+0x8c>
 8017b6c:	4622      	mov	r2, r4
 8017b6e:	4621      	mov	r1, r4
 8017b70:	4630      	mov	r0, r6
 8017b72:	f7ff ff26 	bl	80179c2 <__multiply>
 8017b76:	6020      	str	r0, [r4, #0]
 8017b78:	f8c0 8000 	str.w	r8, [r0]
 8017b7c:	4604      	mov	r4, r0
 8017b7e:	e7e4      	b.n	8017b4a <__pow5mult+0x5a>
 8017b80:	4638      	mov	r0, r7
 8017b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b86:	bf00      	nop
 8017b88:	0801c200 	.word	0x0801c200

08017b8c <__lshift>:
 8017b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b90:	460c      	mov	r4, r1
 8017b92:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017b96:	6923      	ldr	r3, [r4, #16]
 8017b98:	6849      	ldr	r1, [r1, #4]
 8017b9a:	eb0a 0903 	add.w	r9, sl, r3
 8017b9e:	68a3      	ldr	r3, [r4, #8]
 8017ba0:	4607      	mov	r7, r0
 8017ba2:	4616      	mov	r6, r2
 8017ba4:	f109 0501 	add.w	r5, r9, #1
 8017ba8:	42ab      	cmp	r3, r5
 8017baa:	db32      	blt.n	8017c12 <__lshift+0x86>
 8017bac:	4638      	mov	r0, r7
 8017bae:	f7ff fded 	bl	801778c <_Balloc>
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	4680      	mov	r8, r0
 8017bb6:	f100 0114 	add.w	r1, r0, #20
 8017bba:	461a      	mov	r2, r3
 8017bbc:	4553      	cmp	r3, sl
 8017bbe:	db2b      	blt.n	8017c18 <__lshift+0x8c>
 8017bc0:	6920      	ldr	r0, [r4, #16]
 8017bc2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017bc6:	f104 0314 	add.w	r3, r4, #20
 8017bca:	f016 021f 	ands.w	r2, r6, #31
 8017bce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017bd2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017bd6:	d025      	beq.n	8017c24 <__lshift+0x98>
 8017bd8:	f1c2 0e20 	rsb	lr, r2, #32
 8017bdc:	2000      	movs	r0, #0
 8017bde:	681e      	ldr	r6, [r3, #0]
 8017be0:	468a      	mov	sl, r1
 8017be2:	4096      	lsls	r6, r2
 8017be4:	4330      	orrs	r0, r6
 8017be6:	f84a 0b04 	str.w	r0, [sl], #4
 8017bea:	f853 0b04 	ldr.w	r0, [r3], #4
 8017bee:	459c      	cmp	ip, r3
 8017bf0:	fa20 f00e 	lsr.w	r0, r0, lr
 8017bf4:	d814      	bhi.n	8017c20 <__lshift+0x94>
 8017bf6:	6048      	str	r0, [r1, #4]
 8017bf8:	b108      	cbz	r0, 8017bfe <__lshift+0x72>
 8017bfa:	f109 0502 	add.w	r5, r9, #2
 8017bfe:	3d01      	subs	r5, #1
 8017c00:	4638      	mov	r0, r7
 8017c02:	f8c8 5010 	str.w	r5, [r8, #16]
 8017c06:	4621      	mov	r1, r4
 8017c08:	f7ff fdf4 	bl	80177f4 <_Bfree>
 8017c0c:	4640      	mov	r0, r8
 8017c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c12:	3101      	adds	r1, #1
 8017c14:	005b      	lsls	r3, r3, #1
 8017c16:	e7c7      	b.n	8017ba8 <__lshift+0x1c>
 8017c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017c1c:	3301      	adds	r3, #1
 8017c1e:	e7cd      	b.n	8017bbc <__lshift+0x30>
 8017c20:	4651      	mov	r1, sl
 8017c22:	e7dc      	b.n	8017bde <__lshift+0x52>
 8017c24:	3904      	subs	r1, #4
 8017c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c2a:	f841 2f04 	str.w	r2, [r1, #4]!
 8017c2e:	459c      	cmp	ip, r3
 8017c30:	d8f9      	bhi.n	8017c26 <__lshift+0x9a>
 8017c32:	e7e4      	b.n	8017bfe <__lshift+0x72>

08017c34 <__mcmp>:
 8017c34:	6903      	ldr	r3, [r0, #16]
 8017c36:	690a      	ldr	r2, [r1, #16]
 8017c38:	1a9b      	subs	r3, r3, r2
 8017c3a:	b530      	push	{r4, r5, lr}
 8017c3c:	d10c      	bne.n	8017c58 <__mcmp+0x24>
 8017c3e:	0092      	lsls	r2, r2, #2
 8017c40:	3014      	adds	r0, #20
 8017c42:	3114      	adds	r1, #20
 8017c44:	1884      	adds	r4, r0, r2
 8017c46:	4411      	add	r1, r2
 8017c48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017c4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017c50:	4295      	cmp	r5, r2
 8017c52:	d003      	beq.n	8017c5c <__mcmp+0x28>
 8017c54:	d305      	bcc.n	8017c62 <__mcmp+0x2e>
 8017c56:	2301      	movs	r3, #1
 8017c58:	4618      	mov	r0, r3
 8017c5a:	bd30      	pop	{r4, r5, pc}
 8017c5c:	42a0      	cmp	r0, r4
 8017c5e:	d3f3      	bcc.n	8017c48 <__mcmp+0x14>
 8017c60:	e7fa      	b.n	8017c58 <__mcmp+0x24>
 8017c62:	f04f 33ff 	mov.w	r3, #4294967295
 8017c66:	e7f7      	b.n	8017c58 <__mcmp+0x24>

08017c68 <__mdiff>:
 8017c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c6c:	460d      	mov	r5, r1
 8017c6e:	4607      	mov	r7, r0
 8017c70:	4611      	mov	r1, r2
 8017c72:	4628      	mov	r0, r5
 8017c74:	4614      	mov	r4, r2
 8017c76:	f7ff ffdd 	bl	8017c34 <__mcmp>
 8017c7a:	1e06      	subs	r6, r0, #0
 8017c7c:	d108      	bne.n	8017c90 <__mdiff+0x28>
 8017c7e:	4631      	mov	r1, r6
 8017c80:	4638      	mov	r0, r7
 8017c82:	f7ff fd83 	bl	801778c <_Balloc>
 8017c86:	2301      	movs	r3, #1
 8017c88:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c90:	bfa4      	itt	ge
 8017c92:	4623      	movge	r3, r4
 8017c94:	462c      	movge	r4, r5
 8017c96:	4638      	mov	r0, r7
 8017c98:	6861      	ldr	r1, [r4, #4]
 8017c9a:	bfa6      	itte	ge
 8017c9c:	461d      	movge	r5, r3
 8017c9e:	2600      	movge	r6, #0
 8017ca0:	2601      	movlt	r6, #1
 8017ca2:	f7ff fd73 	bl	801778c <_Balloc>
 8017ca6:	692b      	ldr	r3, [r5, #16]
 8017ca8:	60c6      	str	r6, [r0, #12]
 8017caa:	6926      	ldr	r6, [r4, #16]
 8017cac:	f105 0914 	add.w	r9, r5, #20
 8017cb0:	f104 0214 	add.w	r2, r4, #20
 8017cb4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017cb8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017cbc:	f100 0514 	add.w	r5, r0, #20
 8017cc0:	f04f 0e00 	mov.w	lr, #0
 8017cc4:	f852 ab04 	ldr.w	sl, [r2], #4
 8017cc8:	f859 4b04 	ldr.w	r4, [r9], #4
 8017ccc:	fa1e f18a 	uxtah	r1, lr, sl
 8017cd0:	b2a3      	uxth	r3, r4
 8017cd2:	1ac9      	subs	r1, r1, r3
 8017cd4:	0c23      	lsrs	r3, r4, #16
 8017cd6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017cda:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017cde:	b289      	uxth	r1, r1
 8017ce0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017ce4:	45c8      	cmp	r8, r9
 8017ce6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017cea:	4694      	mov	ip, r2
 8017cec:	f845 3b04 	str.w	r3, [r5], #4
 8017cf0:	d8e8      	bhi.n	8017cc4 <__mdiff+0x5c>
 8017cf2:	45bc      	cmp	ip, r7
 8017cf4:	d304      	bcc.n	8017d00 <__mdiff+0x98>
 8017cf6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017cfa:	b183      	cbz	r3, 8017d1e <__mdiff+0xb6>
 8017cfc:	6106      	str	r6, [r0, #16]
 8017cfe:	e7c5      	b.n	8017c8c <__mdiff+0x24>
 8017d00:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017d04:	fa1e f381 	uxtah	r3, lr, r1
 8017d08:	141a      	asrs	r2, r3, #16
 8017d0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017d0e:	b29b      	uxth	r3, r3
 8017d10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d14:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017d18:	f845 3b04 	str.w	r3, [r5], #4
 8017d1c:	e7e9      	b.n	8017cf2 <__mdiff+0x8a>
 8017d1e:	3e01      	subs	r6, #1
 8017d20:	e7e9      	b.n	8017cf6 <__mdiff+0x8e>
	...

08017d24 <__ulp>:
 8017d24:	4b12      	ldr	r3, [pc, #72]	; (8017d70 <__ulp+0x4c>)
 8017d26:	ee10 2a90 	vmov	r2, s1
 8017d2a:	401a      	ands	r2, r3
 8017d2c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	dd04      	ble.n	8017d3e <__ulp+0x1a>
 8017d34:	2000      	movs	r0, #0
 8017d36:	4619      	mov	r1, r3
 8017d38:	ec41 0b10 	vmov	d0, r0, r1
 8017d3c:	4770      	bx	lr
 8017d3e:	425b      	negs	r3, r3
 8017d40:	151b      	asrs	r3, r3, #20
 8017d42:	2b13      	cmp	r3, #19
 8017d44:	f04f 0000 	mov.w	r0, #0
 8017d48:	f04f 0100 	mov.w	r1, #0
 8017d4c:	dc04      	bgt.n	8017d58 <__ulp+0x34>
 8017d4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017d52:	fa42 f103 	asr.w	r1, r2, r3
 8017d56:	e7ef      	b.n	8017d38 <__ulp+0x14>
 8017d58:	3b14      	subs	r3, #20
 8017d5a:	2b1e      	cmp	r3, #30
 8017d5c:	f04f 0201 	mov.w	r2, #1
 8017d60:	bfda      	itte	le
 8017d62:	f1c3 031f 	rsble	r3, r3, #31
 8017d66:	fa02 f303 	lslle.w	r3, r2, r3
 8017d6a:	4613      	movgt	r3, r2
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	e7e3      	b.n	8017d38 <__ulp+0x14>
 8017d70:	7ff00000 	.word	0x7ff00000

08017d74 <__b2d>:
 8017d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d76:	6905      	ldr	r5, [r0, #16]
 8017d78:	f100 0714 	add.w	r7, r0, #20
 8017d7c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017d80:	1f2e      	subs	r6, r5, #4
 8017d82:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017d86:	4620      	mov	r0, r4
 8017d88:	f7ff fdc4 	bl	8017914 <__hi0bits>
 8017d8c:	f1c0 0320 	rsb	r3, r0, #32
 8017d90:	280a      	cmp	r0, #10
 8017d92:	600b      	str	r3, [r1, #0]
 8017d94:	f8df c074 	ldr.w	ip, [pc, #116]	; 8017e0c <__b2d+0x98>
 8017d98:	dc14      	bgt.n	8017dc4 <__b2d+0x50>
 8017d9a:	f1c0 0e0b 	rsb	lr, r0, #11
 8017d9e:	fa24 f10e 	lsr.w	r1, r4, lr
 8017da2:	42b7      	cmp	r7, r6
 8017da4:	ea41 030c 	orr.w	r3, r1, ip
 8017da8:	bf34      	ite	cc
 8017daa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017dae:	2100      	movcs	r1, #0
 8017db0:	3015      	adds	r0, #21
 8017db2:	fa04 f000 	lsl.w	r0, r4, r0
 8017db6:	fa21 f10e 	lsr.w	r1, r1, lr
 8017dba:	ea40 0201 	orr.w	r2, r0, r1
 8017dbe:	ec43 2b10 	vmov	d0, r2, r3
 8017dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017dc4:	42b7      	cmp	r7, r6
 8017dc6:	bf3a      	itte	cc
 8017dc8:	f1a5 0608 	subcc.w	r6, r5, #8
 8017dcc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017dd0:	2100      	movcs	r1, #0
 8017dd2:	380b      	subs	r0, #11
 8017dd4:	d015      	beq.n	8017e02 <__b2d+0x8e>
 8017dd6:	4084      	lsls	r4, r0
 8017dd8:	f1c0 0520 	rsb	r5, r0, #32
 8017ddc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017de0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8017de4:	42be      	cmp	r6, r7
 8017de6:	fa21 fc05 	lsr.w	ip, r1, r5
 8017dea:	ea44 030c 	orr.w	r3, r4, ip
 8017dee:	bf8c      	ite	hi
 8017df0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017df4:	2400      	movls	r4, #0
 8017df6:	fa01 f000 	lsl.w	r0, r1, r0
 8017dfa:	40ec      	lsrs	r4, r5
 8017dfc:	ea40 0204 	orr.w	r2, r0, r4
 8017e00:	e7dd      	b.n	8017dbe <__b2d+0x4a>
 8017e02:	ea44 030c 	orr.w	r3, r4, ip
 8017e06:	460a      	mov	r2, r1
 8017e08:	e7d9      	b.n	8017dbe <__b2d+0x4a>
 8017e0a:	bf00      	nop
 8017e0c:	3ff00000 	.word	0x3ff00000

08017e10 <__d2b>:
 8017e10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017e14:	460e      	mov	r6, r1
 8017e16:	2101      	movs	r1, #1
 8017e18:	ec59 8b10 	vmov	r8, r9, d0
 8017e1c:	4615      	mov	r5, r2
 8017e1e:	f7ff fcb5 	bl	801778c <_Balloc>
 8017e22:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017e26:	4607      	mov	r7, r0
 8017e28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017e2c:	bb34      	cbnz	r4, 8017e7c <__d2b+0x6c>
 8017e2e:	9301      	str	r3, [sp, #4]
 8017e30:	f1b8 0300 	subs.w	r3, r8, #0
 8017e34:	d027      	beq.n	8017e86 <__d2b+0x76>
 8017e36:	a802      	add	r0, sp, #8
 8017e38:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017e3c:	f7ff fd89 	bl	8017952 <__lo0bits>
 8017e40:	9900      	ldr	r1, [sp, #0]
 8017e42:	b1f0      	cbz	r0, 8017e82 <__d2b+0x72>
 8017e44:	9a01      	ldr	r2, [sp, #4]
 8017e46:	f1c0 0320 	rsb	r3, r0, #32
 8017e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8017e4e:	430b      	orrs	r3, r1
 8017e50:	40c2      	lsrs	r2, r0
 8017e52:	617b      	str	r3, [r7, #20]
 8017e54:	9201      	str	r2, [sp, #4]
 8017e56:	9b01      	ldr	r3, [sp, #4]
 8017e58:	61bb      	str	r3, [r7, #24]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	bf14      	ite	ne
 8017e5e:	2102      	movne	r1, #2
 8017e60:	2101      	moveq	r1, #1
 8017e62:	6139      	str	r1, [r7, #16]
 8017e64:	b1c4      	cbz	r4, 8017e98 <__d2b+0x88>
 8017e66:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017e6a:	4404      	add	r4, r0
 8017e6c:	6034      	str	r4, [r6, #0]
 8017e6e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017e72:	6028      	str	r0, [r5, #0]
 8017e74:	4638      	mov	r0, r7
 8017e76:	b003      	add	sp, #12
 8017e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017e80:	e7d5      	b.n	8017e2e <__d2b+0x1e>
 8017e82:	6179      	str	r1, [r7, #20]
 8017e84:	e7e7      	b.n	8017e56 <__d2b+0x46>
 8017e86:	a801      	add	r0, sp, #4
 8017e88:	f7ff fd63 	bl	8017952 <__lo0bits>
 8017e8c:	9b01      	ldr	r3, [sp, #4]
 8017e8e:	617b      	str	r3, [r7, #20]
 8017e90:	2101      	movs	r1, #1
 8017e92:	6139      	str	r1, [r7, #16]
 8017e94:	3020      	adds	r0, #32
 8017e96:	e7e5      	b.n	8017e64 <__d2b+0x54>
 8017e98:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017e9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017ea0:	6030      	str	r0, [r6, #0]
 8017ea2:	6918      	ldr	r0, [r3, #16]
 8017ea4:	f7ff fd36 	bl	8017914 <__hi0bits>
 8017ea8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017eac:	e7e1      	b.n	8017e72 <__d2b+0x62>

08017eae <__ratio>:
 8017eae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb2:	4688      	mov	r8, r1
 8017eb4:	4669      	mov	r1, sp
 8017eb6:	4681      	mov	r9, r0
 8017eb8:	f7ff ff5c 	bl	8017d74 <__b2d>
 8017ebc:	a901      	add	r1, sp, #4
 8017ebe:	4640      	mov	r0, r8
 8017ec0:	ec57 6b10 	vmov	r6, r7, d0
 8017ec4:	f7ff ff56 	bl	8017d74 <__b2d>
 8017ec8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017ecc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017ed0:	eba3 0c02 	sub.w	ip, r3, r2
 8017ed4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017ed8:	1a9b      	subs	r3, r3, r2
 8017eda:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017ede:	ec5b ab10 	vmov	sl, fp, d0
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	bfce      	itee	gt
 8017ee6:	463a      	movgt	r2, r7
 8017ee8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017eec:	465a      	movle	r2, fp
 8017eee:	4659      	mov	r1, fp
 8017ef0:	463d      	mov	r5, r7
 8017ef2:	bfd4      	ite	le
 8017ef4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017ef8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8017efc:	4630      	mov	r0, r6
 8017efe:	ee10 2a10 	vmov	r2, s0
 8017f02:	460b      	mov	r3, r1
 8017f04:	4629      	mov	r1, r5
 8017f06:	f7e8 fcc1 	bl	800088c <__aeabi_ddiv>
 8017f0a:	ec41 0b10 	vmov	d0, r0, r1
 8017f0e:	b003      	add	sp, #12
 8017f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f14 <__copybits>:
 8017f14:	3901      	subs	r1, #1
 8017f16:	b510      	push	{r4, lr}
 8017f18:	1149      	asrs	r1, r1, #5
 8017f1a:	6914      	ldr	r4, [r2, #16]
 8017f1c:	3101      	adds	r1, #1
 8017f1e:	f102 0314 	add.w	r3, r2, #20
 8017f22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017f26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017f2a:	42a3      	cmp	r3, r4
 8017f2c:	4602      	mov	r2, r0
 8017f2e:	d303      	bcc.n	8017f38 <__copybits+0x24>
 8017f30:	2300      	movs	r3, #0
 8017f32:	428a      	cmp	r2, r1
 8017f34:	d305      	bcc.n	8017f42 <__copybits+0x2e>
 8017f36:	bd10      	pop	{r4, pc}
 8017f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f3c:	f840 2b04 	str.w	r2, [r0], #4
 8017f40:	e7f3      	b.n	8017f2a <__copybits+0x16>
 8017f42:	f842 3b04 	str.w	r3, [r2], #4
 8017f46:	e7f4      	b.n	8017f32 <__copybits+0x1e>

08017f48 <__any_on>:
 8017f48:	f100 0214 	add.w	r2, r0, #20
 8017f4c:	6900      	ldr	r0, [r0, #16]
 8017f4e:	114b      	asrs	r3, r1, #5
 8017f50:	4298      	cmp	r0, r3
 8017f52:	b510      	push	{r4, lr}
 8017f54:	db11      	blt.n	8017f7a <__any_on+0x32>
 8017f56:	dd0a      	ble.n	8017f6e <__any_on+0x26>
 8017f58:	f011 011f 	ands.w	r1, r1, #31
 8017f5c:	d007      	beq.n	8017f6e <__any_on+0x26>
 8017f5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017f62:	fa24 f001 	lsr.w	r0, r4, r1
 8017f66:	fa00 f101 	lsl.w	r1, r0, r1
 8017f6a:	428c      	cmp	r4, r1
 8017f6c:	d10b      	bne.n	8017f86 <__any_on+0x3e>
 8017f6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017f72:	4293      	cmp	r3, r2
 8017f74:	d803      	bhi.n	8017f7e <__any_on+0x36>
 8017f76:	2000      	movs	r0, #0
 8017f78:	bd10      	pop	{r4, pc}
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	e7f7      	b.n	8017f6e <__any_on+0x26>
 8017f7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017f82:	2900      	cmp	r1, #0
 8017f84:	d0f5      	beq.n	8017f72 <__any_on+0x2a>
 8017f86:	2001      	movs	r0, #1
 8017f88:	e7f6      	b.n	8017f78 <__any_on+0x30>

08017f8a <_calloc_r>:
 8017f8a:	b538      	push	{r3, r4, r5, lr}
 8017f8c:	fb02 f401 	mul.w	r4, r2, r1
 8017f90:	4621      	mov	r1, r4
 8017f92:	f7fc fde9 	bl	8014b68 <_malloc_r>
 8017f96:	4605      	mov	r5, r0
 8017f98:	b118      	cbz	r0, 8017fa2 <_calloc_r+0x18>
 8017f9a:	4622      	mov	r2, r4
 8017f9c:	2100      	movs	r1, #0
 8017f9e:	f7fc fd8c 	bl	8014aba <memset>
 8017fa2:	4628      	mov	r0, r5
 8017fa4:	bd38      	pop	{r3, r4, r5, pc}

08017fa6 <__ssputs_r>:
 8017fa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017faa:	688e      	ldr	r6, [r1, #8]
 8017fac:	429e      	cmp	r6, r3
 8017fae:	4682      	mov	sl, r0
 8017fb0:	460c      	mov	r4, r1
 8017fb2:	4690      	mov	r8, r2
 8017fb4:	4699      	mov	r9, r3
 8017fb6:	d837      	bhi.n	8018028 <__ssputs_r+0x82>
 8017fb8:	898a      	ldrh	r2, [r1, #12]
 8017fba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017fbe:	d031      	beq.n	8018024 <__ssputs_r+0x7e>
 8017fc0:	6825      	ldr	r5, [r4, #0]
 8017fc2:	6909      	ldr	r1, [r1, #16]
 8017fc4:	1a6f      	subs	r7, r5, r1
 8017fc6:	6965      	ldr	r5, [r4, #20]
 8017fc8:	2302      	movs	r3, #2
 8017fca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017fce:	fb95 f5f3 	sdiv	r5, r5, r3
 8017fd2:	f109 0301 	add.w	r3, r9, #1
 8017fd6:	443b      	add	r3, r7
 8017fd8:	429d      	cmp	r5, r3
 8017fda:	bf38      	it	cc
 8017fdc:	461d      	movcc	r5, r3
 8017fde:	0553      	lsls	r3, r2, #21
 8017fe0:	d530      	bpl.n	8018044 <__ssputs_r+0x9e>
 8017fe2:	4629      	mov	r1, r5
 8017fe4:	f7fc fdc0 	bl	8014b68 <_malloc_r>
 8017fe8:	4606      	mov	r6, r0
 8017fea:	b950      	cbnz	r0, 8018002 <__ssputs_r+0x5c>
 8017fec:	230c      	movs	r3, #12
 8017fee:	f8ca 3000 	str.w	r3, [sl]
 8017ff2:	89a3      	ldrh	r3, [r4, #12]
 8017ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ff8:	81a3      	strh	r3, [r4, #12]
 8017ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8017ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018002:	463a      	mov	r2, r7
 8018004:	6921      	ldr	r1, [r4, #16]
 8018006:	f7fc fd34 	bl	8014a72 <memcpy>
 801800a:	89a3      	ldrh	r3, [r4, #12]
 801800c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018014:	81a3      	strh	r3, [r4, #12]
 8018016:	6126      	str	r6, [r4, #16]
 8018018:	6165      	str	r5, [r4, #20]
 801801a:	443e      	add	r6, r7
 801801c:	1bed      	subs	r5, r5, r7
 801801e:	6026      	str	r6, [r4, #0]
 8018020:	60a5      	str	r5, [r4, #8]
 8018022:	464e      	mov	r6, r9
 8018024:	454e      	cmp	r6, r9
 8018026:	d900      	bls.n	801802a <__ssputs_r+0x84>
 8018028:	464e      	mov	r6, r9
 801802a:	4632      	mov	r2, r6
 801802c:	4641      	mov	r1, r8
 801802e:	6820      	ldr	r0, [r4, #0]
 8018030:	f7fc fd2a 	bl	8014a88 <memmove>
 8018034:	68a3      	ldr	r3, [r4, #8]
 8018036:	1b9b      	subs	r3, r3, r6
 8018038:	60a3      	str	r3, [r4, #8]
 801803a:	6823      	ldr	r3, [r4, #0]
 801803c:	441e      	add	r6, r3
 801803e:	6026      	str	r6, [r4, #0]
 8018040:	2000      	movs	r0, #0
 8018042:	e7dc      	b.n	8017ffe <__ssputs_r+0x58>
 8018044:	462a      	mov	r2, r5
 8018046:	f000 fc8d 	bl	8018964 <_realloc_r>
 801804a:	4606      	mov	r6, r0
 801804c:	2800      	cmp	r0, #0
 801804e:	d1e2      	bne.n	8018016 <__ssputs_r+0x70>
 8018050:	6921      	ldr	r1, [r4, #16]
 8018052:	4650      	mov	r0, sl
 8018054:	f7fc fd3a 	bl	8014acc <_free_r>
 8018058:	e7c8      	b.n	8017fec <__ssputs_r+0x46>
	...

0801805c <_svfiprintf_r>:
 801805c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018060:	461d      	mov	r5, r3
 8018062:	898b      	ldrh	r3, [r1, #12]
 8018064:	061f      	lsls	r7, r3, #24
 8018066:	b09d      	sub	sp, #116	; 0x74
 8018068:	4680      	mov	r8, r0
 801806a:	460c      	mov	r4, r1
 801806c:	4616      	mov	r6, r2
 801806e:	d50f      	bpl.n	8018090 <_svfiprintf_r+0x34>
 8018070:	690b      	ldr	r3, [r1, #16]
 8018072:	b96b      	cbnz	r3, 8018090 <_svfiprintf_r+0x34>
 8018074:	2140      	movs	r1, #64	; 0x40
 8018076:	f7fc fd77 	bl	8014b68 <_malloc_r>
 801807a:	6020      	str	r0, [r4, #0]
 801807c:	6120      	str	r0, [r4, #16]
 801807e:	b928      	cbnz	r0, 801808c <_svfiprintf_r+0x30>
 8018080:	230c      	movs	r3, #12
 8018082:	f8c8 3000 	str.w	r3, [r8]
 8018086:	f04f 30ff 	mov.w	r0, #4294967295
 801808a:	e0c8      	b.n	801821e <_svfiprintf_r+0x1c2>
 801808c:	2340      	movs	r3, #64	; 0x40
 801808e:	6163      	str	r3, [r4, #20]
 8018090:	2300      	movs	r3, #0
 8018092:	9309      	str	r3, [sp, #36]	; 0x24
 8018094:	2320      	movs	r3, #32
 8018096:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801809a:	2330      	movs	r3, #48	; 0x30
 801809c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80180a0:	9503      	str	r5, [sp, #12]
 80180a2:	f04f 0b01 	mov.w	fp, #1
 80180a6:	4637      	mov	r7, r6
 80180a8:	463d      	mov	r5, r7
 80180aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80180ae:	b10b      	cbz	r3, 80180b4 <_svfiprintf_r+0x58>
 80180b0:	2b25      	cmp	r3, #37	; 0x25
 80180b2:	d13e      	bne.n	8018132 <_svfiprintf_r+0xd6>
 80180b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80180b8:	d00b      	beq.n	80180d2 <_svfiprintf_r+0x76>
 80180ba:	4653      	mov	r3, sl
 80180bc:	4632      	mov	r2, r6
 80180be:	4621      	mov	r1, r4
 80180c0:	4640      	mov	r0, r8
 80180c2:	f7ff ff70 	bl	8017fa6 <__ssputs_r>
 80180c6:	3001      	adds	r0, #1
 80180c8:	f000 80a4 	beq.w	8018214 <_svfiprintf_r+0x1b8>
 80180cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180ce:	4453      	add	r3, sl
 80180d0:	9309      	str	r3, [sp, #36]	; 0x24
 80180d2:	783b      	ldrb	r3, [r7, #0]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	f000 809d 	beq.w	8018214 <_svfiprintf_r+0x1b8>
 80180da:	2300      	movs	r3, #0
 80180dc:	f04f 32ff 	mov.w	r2, #4294967295
 80180e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80180e4:	9304      	str	r3, [sp, #16]
 80180e6:	9307      	str	r3, [sp, #28]
 80180e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80180ec:	931a      	str	r3, [sp, #104]	; 0x68
 80180ee:	462f      	mov	r7, r5
 80180f0:	2205      	movs	r2, #5
 80180f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80180f6:	4850      	ldr	r0, [pc, #320]	; (8018238 <_svfiprintf_r+0x1dc>)
 80180f8:	f7e8 f892 	bl	8000220 <memchr>
 80180fc:	9b04      	ldr	r3, [sp, #16]
 80180fe:	b9d0      	cbnz	r0, 8018136 <_svfiprintf_r+0xda>
 8018100:	06d9      	lsls	r1, r3, #27
 8018102:	bf44      	itt	mi
 8018104:	2220      	movmi	r2, #32
 8018106:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801810a:	071a      	lsls	r2, r3, #28
 801810c:	bf44      	itt	mi
 801810e:	222b      	movmi	r2, #43	; 0x2b
 8018110:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018114:	782a      	ldrb	r2, [r5, #0]
 8018116:	2a2a      	cmp	r2, #42	; 0x2a
 8018118:	d015      	beq.n	8018146 <_svfiprintf_r+0xea>
 801811a:	9a07      	ldr	r2, [sp, #28]
 801811c:	462f      	mov	r7, r5
 801811e:	2000      	movs	r0, #0
 8018120:	250a      	movs	r5, #10
 8018122:	4639      	mov	r1, r7
 8018124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018128:	3b30      	subs	r3, #48	; 0x30
 801812a:	2b09      	cmp	r3, #9
 801812c:	d94d      	bls.n	80181ca <_svfiprintf_r+0x16e>
 801812e:	b1b8      	cbz	r0, 8018160 <_svfiprintf_r+0x104>
 8018130:	e00f      	b.n	8018152 <_svfiprintf_r+0xf6>
 8018132:	462f      	mov	r7, r5
 8018134:	e7b8      	b.n	80180a8 <_svfiprintf_r+0x4c>
 8018136:	4a40      	ldr	r2, [pc, #256]	; (8018238 <_svfiprintf_r+0x1dc>)
 8018138:	1a80      	subs	r0, r0, r2
 801813a:	fa0b f000 	lsl.w	r0, fp, r0
 801813e:	4318      	orrs	r0, r3
 8018140:	9004      	str	r0, [sp, #16]
 8018142:	463d      	mov	r5, r7
 8018144:	e7d3      	b.n	80180ee <_svfiprintf_r+0x92>
 8018146:	9a03      	ldr	r2, [sp, #12]
 8018148:	1d11      	adds	r1, r2, #4
 801814a:	6812      	ldr	r2, [r2, #0]
 801814c:	9103      	str	r1, [sp, #12]
 801814e:	2a00      	cmp	r2, #0
 8018150:	db01      	blt.n	8018156 <_svfiprintf_r+0xfa>
 8018152:	9207      	str	r2, [sp, #28]
 8018154:	e004      	b.n	8018160 <_svfiprintf_r+0x104>
 8018156:	4252      	negs	r2, r2
 8018158:	f043 0302 	orr.w	r3, r3, #2
 801815c:	9207      	str	r2, [sp, #28]
 801815e:	9304      	str	r3, [sp, #16]
 8018160:	783b      	ldrb	r3, [r7, #0]
 8018162:	2b2e      	cmp	r3, #46	; 0x2e
 8018164:	d10c      	bne.n	8018180 <_svfiprintf_r+0x124>
 8018166:	787b      	ldrb	r3, [r7, #1]
 8018168:	2b2a      	cmp	r3, #42	; 0x2a
 801816a:	d133      	bne.n	80181d4 <_svfiprintf_r+0x178>
 801816c:	9b03      	ldr	r3, [sp, #12]
 801816e:	1d1a      	adds	r2, r3, #4
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	9203      	str	r2, [sp, #12]
 8018174:	2b00      	cmp	r3, #0
 8018176:	bfb8      	it	lt
 8018178:	f04f 33ff 	movlt.w	r3, #4294967295
 801817c:	3702      	adds	r7, #2
 801817e:	9305      	str	r3, [sp, #20]
 8018180:	4d2e      	ldr	r5, [pc, #184]	; (801823c <_svfiprintf_r+0x1e0>)
 8018182:	7839      	ldrb	r1, [r7, #0]
 8018184:	2203      	movs	r2, #3
 8018186:	4628      	mov	r0, r5
 8018188:	f7e8 f84a 	bl	8000220 <memchr>
 801818c:	b138      	cbz	r0, 801819e <_svfiprintf_r+0x142>
 801818e:	2340      	movs	r3, #64	; 0x40
 8018190:	1b40      	subs	r0, r0, r5
 8018192:	fa03 f000 	lsl.w	r0, r3, r0
 8018196:	9b04      	ldr	r3, [sp, #16]
 8018198:	4303      	orrs	r3, r0
 801819a:	3701      	adds	r7, #1
 801819c:	9304      	str	r3, [sp, #16]
 801819e:	7839      	ldrb	r1, [r7, #0]
 80181a0:	4827      	ldr	r0, [pc, #156]	; (8018240 <_svfiprintf_r+0x1e4>)
 80181a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80181a6:	2206      	movs	r2, #6
 80181a8:	1c7e      	adds	r6, r7, #1
 80181aa:	f7e8 f839 	bl	8000220 <memchr>
 80181ae:	2800      	cmp	r0, #0
 80181b0:	d038      	beq.n	8018224 <_svfiprintf_r+0x1c8>
 80181b2:	4b24      	ldr	r3, [pc, #144]	; (8018244 <_svfiprintf_r+0x1e8>)
 80181b4:	bb13      	cbnz	r3, 80181fc <_svfiprintf_r+0x1a0>
 80181b6:	9b03      	ldr	r3, [sp, #12]
 80181b8:	3307      	adds	r3, #7
 80181ba:	f023 0307 	bic.w	r3, r3, #7
 80181be:	3308      	adds	r3, #8
 80181c0:	9303      	str	r3, [sp, #12]
 80181c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181c4:	444b      	add	r3, r9
 80181c6:	9309      	str	r3, [sp, #36]	; 0x24
 80181c8:	e76d      	b.n	80180a6 <_svfiprintf_r+0x4a>
 80181ca:	fb05 3202 	mla	r2, r5, r2, r3
 80181ce:	2001      	movs	r0, #1
 80181d0:	460f      	mov	r7, r1
 80181d2:	e7a6      	b.n	8018122 <_svfiprintf_r+0xc6>
 80181d4:	2300      	movs	r3, #0
 80181d6:	3701      	adds	r7, #1
 80181d8:	9305      	str	r3, [sp, #20]
 80181da:	4619      	mov	r1, r3
 80181dc:	250a      	movs	r5, #10
 80181de:	4638      	mov	r0, r7
 80181e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181e4:	3a30      	subs	r2, #48	; 0x30
 80181e6:	2a09      	cmp	r2, #9
 80181e8:	d903      	bls.n	80181f2 <_svfiprintf_r+0x196>
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d0c8      	beq.n	8018180 <_svfiprintf_r+0x124>
 80181ee:	9105      	str	r1, [sp, #20]
 80181f0:	e7c6      	b.n	8018180 <_svfiprintf_r+0x124>
 80181f2:	fb05 2101 	mla	r1, r5, r1, r2
 80181f6:	2301      	movs	r3, #1
 80181f8:	4607      	mov	r7, r0
 80181fa:	e7f0      	b.n	80181de <_svfiprintf_r+0x182>
 80181fc:	ab03      	add	r3, sp, #12
 80181fe:	9300      	str	r3, [sp, #0]
 8018200:	4622      	mov	r2, r4
 8018202:	4b11      	ldr	r3, [pc, #68]	; (8018248 <_svfiprintf_r+0x1ec>)
 8018204:	a904      	add	r1, sp, #16
 8018206:	4640      	mov	r0, r8
 8018208:	f7fc fd9c 	bl	8014d44 <_printf_float>
 801820c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018210:	4681      	mov	r9, r0
 8018212:	d1d6      	bne.n	80181c2 <_svfiprintf_r+0x166>
 8018214:	89a3      	ldrh	r3, [r4, #12]
 8018216:	065b      	lsls	r3, r3, #25
 8018218:	f53f af35 	bmi.w	8018086 <_svfiprintf_r+0x2a>
 801821c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801821e:	b01d      	add	sp, #116	; 0x74
 8018220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018224:	ab03      	add	r3, sp, #12
 8018226:	9300      	str	r3, [sp, #0]
 8018228:	4622      	mov	r2, r4
 801822a:	4b07      	ldr	r3, [pc, #28]	; (8018248 <_svfiprintf_r+0x1ec>)
 801822c:	a904      	add	r1, sp, #16
 801822e:	4640      	mov	r0, r8
 8018230:	f7fd f83e 	bl	80152b0 <_printf_i>
 8018234:	e7ea      	b.n	801820c <_svfiprintf_r+0x1b0>
 8018236:	bf00      	nop
 8018238:	0801c20c 	.word	0x0801c20c
 801823c:	0801c212 	.word	0x0801c212
 8018240:	0801c216 	.word	0x0801c216
 8018244:	08014d45 	.word	0x08014d45
 8018248:	08017fa7 	.word	0x08017fa7

0801824c <__sfputc_r>:
 801824c:	6893      	ldr	r3, [r2, #8]
 801824e:	3b01      	subs	r3, #1
 8018250:	2b00      	cmp	r3, #0
 8018252:	b410      	push	{r4}
 8018254:	6093      	str	r3, [r2, #8]
 8018256:	da08      	bge.n	801826a <__sfputc_r+0x1e>
 8018258:	6994      	ldr	r4, [r2, #24]
 801825a:	42a3      	cmp	r3, r4
 801825c:	db01      	blt.n	8018262 <__sfputc_r+0x16>
 801825e:	290a      	cmp	r1, #10
 8018260:	d103      	bne.n	801826a <__sfputc_r+0x1e>
 8018262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018266:	f000 b975 	b.w	8018554 <__swbuf_r>
 801826a:	6813      	ldr	r3, [r2, #0]
 801826c:	1c58      	adds	r0, r3, #1
 801826e:	6010      	str	r0, [r2, #0]
 8018270:	7019      	strb	r1, [r3, #0]
 8018272:	4608      	mov	r0, r1
 8018274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018278:	4770      	bx	lr

0801827a <__sfputs_r>:
 801827a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801827c:	4606      	mov	r6, r0
 801827e:	460f      	mov	r7, r1
 8018280:	4614      	mov	r4, r2
 8018282:	18d5      	adds	r5, r2, r3
 8018284:	42ac      	cmp	r4, r5
 8018286:	d101      	bne.n	801828c <__sfputs_r+0x12>
 8018288:	2000      	movs	r0, #0
 801828a:	e007      	b.n	801829c <__sfputs_r+0x22>
 801828c:	463a      	mov	r2, r7
 801828e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018292:	4630      	mov	r0, r6
 8018294:	f7ff ffda 	bl	801824c <__sfputc_r>
 8018298:	1c43      	adds	r3, r0, #1
 801829a:	d1f3      	bne.n	8018284 <__sfputs_r+0xa>
 801829c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080182a0 <_vfiprintf_r>:
 80182a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182a4:	460c      	mov	r4, r1
 80182a6:	b09d      	sub	sp, #116	; 0x74
 80182a8:	4617      	mov	r7, r2
 80182aa:	461d      	mov	r5, r3
 80182ac:	4606      	mov	r6, r0
 80182ae:	b118      	cbz	r0, 80182b8 <_vfiprintf_r+0x18>
 80182b0:	6983      	ldr	r3, [r0, #24]
 80182b2:	b90b      	cbnz	r3, 80182b8 <_vfiprintf_r+0x18>
 80182b4:	f7fe fea8 	bl	8017008 <__sinit>
 80182b8:	4b7c      	ldr	r3, [pc, #496]	; (80184ac <_vfiprintf_r+0x20c>)
 80182ba:	429c      	cmp	r4, r3
 80182bc:	d158      	bne.n	8018370 <_vfiprintf_r+0xd0>
 80182be:	6874      	ldr	r4, [r6, #4]
 80182c0:	89a3      	ldrh	r3, [r4, #12]
 80182c2:	0718      	lsls	r0, r3, #28
 80182c4:	d55e      	bpl.n	8018384 <_vfiprintf_r+0xe4>
 80182c6:	6923      	ldr	r3, [r4, #16]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d05b      	beq.n	8018384 <_vfiprintf_r+0xe4>
 80182cc:	2300      	movs	r3, #0
 80182ce:	9309      	str	r3, [sp, #36]	; 0x24
 80182d0:	2320      	movs	r3, #32
 80182d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80182d6:	2330      	movs	r3, #48	; 0x30
 80182d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80182dc:	9503      	str	r5, [sp, #12]
 80182de:	f04f 0b01 	mov.w	fp, #1
 80182e2:	46b8      	mov	r8, r7
 80182e4:	4645      	mov	r5, r8
 80182e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80182ea:	b10b      	cbz	r3, 80182f0 <_vfiprintf_r+0x50>
 80182ec:	2b25      	cmp	r3, #37	; 0x25
 80182ee:	d154      	bne.n	801839a <_vfiprintf_r+0xfa>
 80182f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80182f4:	d00b      	beq.n	801830e <_vfiprintf_r+0x6e>
 80182f6:	4653      	mov	r3, sl
 80182f8:	463a      	mov	r2, r7
 80182fa:	4621      	mov	r1, r4
 80182fc:	4630      	mov	r0, r6
 80182fe:	f7ff ffbc 	bl	801827a <__sfputs_r>
 8018302:	3001      	adds	r0, #1
 8018304:	f000 80c2 	beq.w	801848c <_vfiprintf_r+0x1ec>
 8018308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801830a:	4453      	add	r3, sl
 801830c:	9309      	str	r3, [sp, #36]	; 0x24
 801830e:	f898 3000 	ldrb.w	r3, [r8]
 8018312:	2b00      	cmp	r3, #0
 8018314:	f000 80ba 	beq.w	801848c <_vfiprintf_r+0x1ec>
 8018318:	2300      	movs	r3, #0
 801831a:	f04f 32ff 	mov.w	r2, #4294967295
 801831e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018322:	9304      	str	r3, [sp, #16]
 8018324:	9307      	str	r3, [sp, #28]
 8018326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801832a:	931a      	str	r3, [sp, #104]	; 0x68
 801832c:	46a8      	mov	r8, r5
 801832e:	2205      	movs	r2, #5
 8018330:	f818 1b01 	ldrb.w	r1, [r8], #1
 8018334:	485e      	ldr	r0, [pc, #376]	; (80184b0 <_vfiprintf_r+0x210>)
 8018336:	f7e7 ff73 	bl	8000220 <memchr>
 801833a:	9b04      	ldr	r3, [sp, #16]
 801833c:	bb78      	cbnz	r0, 801839e <_vfiprintf_r+0xfe>
 801833e:	06d9      	lsls	r1, r3, #27
 8018340:	bf44      	itt	mi
 8018342:	2220      	movmi	r2, #32
 8018344:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018348:	071a      	lsls	r2, r3, #28
 801834a:	bf44      	itt	mi
 801834c:	222b      	movmi	r2, #43	; 0x2b
 801834e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018352:	782a      	ldrb	r2, [r5, #0]
 8018354:	2a2a      	cmp	r2, #42	; 0x2a
 8018356:	d02a      	beq.n	80183ae <_vfiprintf_r+0x10e>
 8018358:	9a07      	ldr	r2, [sp, #28]
 801835a:	46a8      	mov	r8, r5
 801835c:	2000      	movs	r0, #0
 801835e:	250a      	movs	r5, #10
 8018360:	4641      	mov	r1, r8
 8018362:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018366:	3b30      	subs	r3, #48	; 0x30
 8018368:	2b09      	cmp	r3, #9
 801836a:	d969      	bls.n	8018440 <_vfiprintf_r+0x1a0>
 801836c:	b360      	cbz	r0, 80183c8 <_vfiprintf_r+0x128>
 801836e:	e024      	b.n	80183ba <_vfiprintf_r+0x11a>
 8018370:	4b50      	ldr	r3, [pc, #320]	; (80184b4 <_vfiprintf_r+0x214>)
 8018372:	429c      	cmp	r4, r3
 8018374:	d101      	bne.n	801837a <_vfiprintf_r+0xda>
 8018376:	68b4      	ldr	r4, [r6, #8]
 8018378:	e7a2      	b.n	80182c0 <_vfiprintf_r+0x20>
 801837a:	4b4f      	ldr	r3, [pc, #316]	; (80184b8 <_vfiprintf_r+0x218>)
 801837c:	429c      	cmp	r4, r3
 801837e:	bf08      	it	eq
 8018380:	68f4      	ldreq	r4, [r6, #12]
 8018382:	e79d      	b.n	80182c0 <_vfiprintf_r+0x20>
 8018384:	4621      	mov	r1, r4
 8018386:	4630      	mov	r0, r6
 8018388:	f000 f948 	bl	801861c <__swsetup_r>
 801838c:	2800      	cmp	r0, #0
 801838e:	d09d      	beq.n	80182cc <_vfiprintf_r+0x2c>
 8018390:	f04f 30ff 	mov.w	r0, #4294967295
 8018394:	b01d      	add	sp, #116	; 0x74
 8018396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801839a:	46a8      	mov	r8, r5
 801839c:	e7a2      	b.n	80182e4 <_vfiprintf_r+0x44>
 801839e:	4a44      	ldr	r2, [pc, #272]	; (80184b0 <_vfiprintf_r+0x210>)
 80183a0:	1a80      	subs	r0, r0, r2
 80183a2:	fa0b f000 	lsl.w	r0, fp, r0
 80183a6:	4318      	orrs	r0, r3
 80183a8:	9004      	str	r0, [sp, #16]
 80183aa:	4645      	mov	r5, r8
 80183ac:	e7be      	b.n	801832c <_vfiprintf_r+0x8c>
 80183ae:	9a03      	ldr	r2, [sp, #12]
 80183b0:	1d11      	adds	r1, r2, #4
 80183b2:	6812      	ldr	r2, [r2, #0]
 80183b4:	9103      	str	r1, [sp, #12]
 80183b6:	2a00      	cmp	r2, #0
 80183b8:	db01      	blt.n	80183be <_vfiprintf_r+0x11e>
 80183ba:	9207      	str	r2, [sp, #28]
 80183bc:	e004      	b.n	80183c8 <_vfiprintf_r+0x128>
 80183be:	4252      	negs	r2, r2
 80183c0:	f043 0302 	orr.w	r3, r3, #2
 80183c4:	9207      	str	r2, [sp, #28]
 80183c6:	9304      	str	r3, [sp, #16]
 80183c8:	f898 3000 	ldrb.w	r3, [r8]
 80183cc:	2b2e      	cmp	r3, #46	; 0x2e
 80183ce:	d10e      	bne.n	80183ee <_vfiprintf_r+0x14e>
 80183d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80183d4:	2b2a      	cmp	r3, #42	; 0x2a
 80183d6:	d138      	bne.n	801844a <_vfiprintf_r+0x1aa>
 80183d8:	9b03      	ldr	r3, [sp, #12]
 80183da:	1d1a      	adds	r2, r3, #4
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	9203      	str	r2, [sp, #12]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	bfb8      	it	lt
 80183e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80183e8:	f108 0802 	add.w	r8, r8, #2
 80183ec:	9305      	str	r3, [sp, #20]
 80183ee:	4d33      	ldr	r5, [pc, #204]	; (80184bc <_vfiprintf_r+0x21c>)
 80183f0:	f898 1000 	ldrb.w	r1, [r8]
 80183f4:	2203      	movs	r2, #3
 80183f6:	4628      	mov	r0, r5
 80183f8:	f7e7 ff12 	bl	8000220 <memchr>
 80183fc:	b140      	cbz	r0, 8018410 <_vfiprintf_r+0x170>
 80183fe:	2340      	movs	r3, #64	; 0x40
 8018400:	1b40      	subs	r0, r0, r5
 8018402:	fa03 f000 	lsl.w	r0, r3, r0
 8018406:	9b04      	ldr	r3, [sp, #16]
 8018408:	4303      	orrs	r3, r0
 801840a:	f108 0801 	add.w	r8, r8, #1
 801840e:	9304      	str	r3, [sp, #16]
 8018410:	f898 1000 	ldrb.w	r1, [r8]
 8018414:	482a      	ldr	r0, [pc, #168]	; (80184c0 <_vfiprintf_r+0x220>)
 8018416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801841a:	2206      	movs	r2, #6
 801841c:	f108 0701 	add.w	r7, r8, #1
 8018420:	f7e7 fefe 	bl	8000220 <memchr>
 8018424:	2800      	cmp	r0, #0
 8018426:	d037      	beq.n	8018498 <_vfiprintf_r+0x1f8>
 8018428:	4b26      	ldr	r3, [pc, #152]	; (80184c4 <_vfiprintf_r+0x224>)
 801842a:	bb1b      	cbnz	r3, 8018474 <_vfiprintf_r+0x1d4>
 801842c:	9b03      	ldr	r3, [sp, #12]
 801842e:	3307      	adds	r3, #7
 8018430:	f023 0307 	bic.w	r3, r3, #7
 8018434:	3308      	adds	r3, #8
 8018436:	9303      	str	r3, [sp, #12]
 8018438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801843a:	444b      	add	r3, r9
 801843c:	9309      	str	r3, [sp, #36]	; 0x24
 801843e:	e750      	b.n	80182e2 <_vfiprintf_r+0x42>
 8018440:	fb05 3202 	mla	r2, r5, r2, r3
 8018444:	2001      	movs	r0, #1
 8018446:	4688      	mov	r8, r1
 8018448:	e78a      	b.n	8018360 <_vfiprintf_r+0xc0>
 801844a:	2300      	movs	r3, #0
 801844c:	f108 0801 	add.w	r8, r8, #1
 8018450:	9305      	str	r3, [sp, #20]
 8018452:	4619      	mov	r1, r3
 8018454:	250a      	movs	r5, #10
 8018456:	4640      	mov	r0, r8
 8018458:	f810 2b01 	ldrb.w	r2, [r0], #1
 801845c:	3a30      	subs	r2, #48	; 0x30
 801845e:	2a09      	cmp	r2, #9
 8018460:	d903      	bls.n	801846a <_vfiprintf_r+0x1ca>
 8018462:	2b00      	cmp	r3, #0
 8018464:	d0c3      	beq.n	80183ee <_vfiprintf_r+0x14e>
 8018466:	9105      	str	r1, [sp, #20]
 8018468:	e7c1      	b.n	80183ee <_vfiprintf_r+0x14e>
 801846a:	fb05 2101 	mla	r1, r5, r1, r2
 801846e:	2301      	movs	r3, #1
 8018470:	4680      	mov	r8, r0
 8018472:	e7f0      	b.n	8018456 <_vfiprintf_r+0x1b6>
 8018474:	ab03      	add	r3, sp, #12
 8018476:	9300      	str	r3, [sp, #0]
 8018478:	4622      	mov	r2, r4
 801847a:	4b13      	ldr	r3, [pc, #76]	; (80184c8 <_vfiprintf_r+0x228>)
 801847c:	a904      	add	r1, sp, #16
 801847e:	4630      	mov	r0, r6
 8018480:	f7fc fc60 	bl	8014d44 <_printf_float>
 8018484:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018488:	4681      	mov	r9, r0
 801848a:	d1d5      	bne.n	8018438 <_vfiprintf_r+0x198>
 801848c:	89a3      	ldrh	r3, [r4, #12]
 801848e:	065b      	lsls	r3, r3, #25
 8018490:	f53f af7e 	bmi.w	8018390 <_vfiprintf_r+0xf0>
 8018494:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018496:	e77d      	b.n	8018394 <_vfiprintf_r+0xf4>
 8018498:	ab03      	add	r3, sp, #12
 801849a:	9300      	str	r3, [sp, #0]
 801849c:	4622      	mov	r2, r4
 801849e:	4b0a      	ldr	r3, [pc, #40]	; (80184c8 <_vfiprintf_r+0x228>)
 80184a0:	a904      	add	r1, sp, #16
 80184a2:	4630      	mov	r0, r6
 80184a4:	f7fc ff04 	bl	80152b0 <_printf_i>
 80184a8:	e7ec      	b.n	8018484 <_vfiprintf_r+0x1e4>
 80184aa:	bf00      	nop
 80184ac:	0801c0d0 	.word	0x0801c0d0
 80184b0:	0801c20c 	.word	0x0801c20c
 80184b4:	0801c0f0 	.word	0x0801c0f0
 80184b8:	0801c0b0 	.word	0x0801c0b0
 80184bc:	0801c212 	.word	0x0801c212
 80184c0:	0801c216 	.word	0x0801c216
 80184c4:	08014d45 	.word	0x08014d45
 80184c8:	0801827b 	.word	0x0801827b

080184cc <__sread>:
 80184cc:	b510      	push	{r4, lr}
 80184ce:	460c      	mov	r4, r1
 80184d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184d4:	f000 fa6c 	bl	80189b0 <_read_r>
 80184d8:	2800      	cmp	r0, #0
 80184da:	bfab      	itete	ge
 80184dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80184de:	89a3      	ldrhlt	r3, [r4, #12]
 80184e0:	181b      	addge	r3, r3, r0
 80184e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80184e6:	bfac      	ite	ge
 80184e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80184ea:	81a3      	strhlt	r3, [r4, #12]
 80184ec:	bd10      	pop	{r4, pc}

080184ee <__swrite>:
 80184ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184f2:	461f      	mov	r7, r3
 80184f4:	898b      	ldrh	r3, [r1, #12]
 80184f6:	05db      	lsls	r3, r3, #23
 80184f8:	4605      	mov	r5, r0
 80184fa:	460c      	mov	r4, r1
 80184fc:	4616      	mov	r6, r2
 80184fe:	d505      	bpl.n	801850c <__swrite+0x1e>
 8018500:	2302      	movs	r3, #2
 8018502:	2200      	movs	r2, #0
 8018504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018508:	f000 f9b6 	bl	8018878 <_lseek_r>
 801850c:	89a3      	ldrh	r3, [r4, #12]
 801850e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018516:	81a3      	strh	r3, [r4, #12]
 8018518:	4632      	mov	r2, r6
 801851a:	463b      	mov	r3, r7
 801851c:	4628      	mov	r0, r5
 801851e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018522:	f000 b869 	b.w	80185f8 <_write_r>

08018526 <__sseek>:
 8018526:	b510      	push	{r4, lr}
 8018528:	460c      	mov	r4, r1
 801852a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801852e:	f000 f9a3 	bl	8018878 <_lseek_r>
 8018532:	1c43      	adds	r3, r0, #1
 8018534:	89a3      	ldrh	r3, [r4, #12]
 8018536:	bf15      	itete	ne
 8018538:	6560      	strne	r0, [r4, #84]	; 0x54
 801853a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801853e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018542:	81a3      	strheq	r3, [r4, #12]
 8018544:	bf18      	it	ne
 8018546:	81a3      	strhne	r3, [r4, #12]
 8018548:	bd10      	pop	{r4, pc}

0801854a <__sclose>:
 801854a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801854e:	f000 b8d3 	b.w	80186f8 <_close_r>
	...

08018554 <__swbuf_r>:
 8018554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018556:	460e      	mov	r6, r1
 8018558:	4614      	mov	r4, r2
 801855a:	4605      	mov	r5, r0
 801855c:	b118      	cbz	r0, 8018566 <__swbuf_r+0x12>
 801855e:	6983      	ldr	r3, [r0, #24]
 8018560:	b90b      	cbnz	r3, 8018566 <__swbuf_r+0x12>
 8018562:	f7fe fd51 	bl	8017008 <__sinit>
 8018566:	4b21      	ldr	r3, [pc, #132]	; (80185ec <__swbuf_r+0x98>)
 8018568:	429c      	cmp	r4, r3
 801856a:	d12a      	bne.n	80185c2 <__swbuf_r+0x6e>
 801856c:	686c      	ldr	r4, [r5, #4]
 801856e:	69a3      	ldr	r3, [r4, #24]
 8018570:	60a3      	str	r3, [r4, #8]
 8018572:	89a3      	ldrh	r3, [r4, #12]
 8018574:	071a      	lsls	r2, r3, #28
 8018576:	d52e      	bpl.n	80185d6 <__swbuf_r+0x82>
 8018578:	6923      	ldr	r3, [r4, #16]
 801857a:	b363      	cbz	r3, 80185d6 <__swbuf_r+0x82>
 801857c:	6923      	ldr	r3, [r4, #16]
 801857e:	6820      	ldr	r0, [r4, #0]
 8018580:	1ac0      	subs	r0, r0, r3
 8018582:	6963      	ldr	r3, [r4, #20]
 8018584:	b2f6      	uxtb	r6, r6
 8018586:	4283      	cmp	r3, r0
 8018588:	4637      	mov	r7, r6
 801858a:	dc04      	bgt.n	8018596 <__swbuf_r+0x42>
 801858c:	4621      	mov	r1, r4
 801858e:	4628      	mov	r0, r5
 8018590:	f000 f948 	bl	8018824 <_fflush_r>
 8018594:	bb28      	cbnz	r0, 80185e2 <__swbuf_r+0x8e>
 8018596:	68a3      	ldr	r3, [r4, #8]
 8018598:	3b01      	subs	r3, #1
 801859a:	60a3      	str	r3, [r4, #8]
 801859c:	6823      	ldr	r3, [r4, #0]
 801859e:	1c5a      	adds	r2, r3, #1
 80185a0:	6022      	str	r2, [r4, #0]
 80185a2:	701e      	strb	r6, [r3, #0]
 80185a4:	6963      	ldr	r3, [r4, #20]
 80185a6:	3001      	adds	r0, #1
 80185a8:	4283      	cmp	r3, r0
 80185aa:	d004      	beq.n	80185b6 <__swbuf_r+0x62>
 80185ac:	89a3      	ldrh	r3, [r4, #12]
 80185ae:	07db      	lsls	r3, r3, #31
 80185b0:	d519      	bpl.n	80185e6 <__swbuf_r+0x92>
 80185b2:	2e0a      	cmp	r6, #10
 80185b4:	d117      	bne.n	80185e6 <__swbuf_r+0x92>
 80185b6:	4621      	mov	r1, r4
 80185b8:	4628      	mov	r0, r5
 80185ba:	f000 f933 	bl	8018824 <_fflush_r>
 80185be:	b190      	cbz	r0, 80185e6 <__swbuf_r+0x92>
 80185c0:	e00f      	b.n	80185e2 <__swbuf_r+0x8e>
 80185c2:	4b0b      	ldr	r3, [pc, #44]	; (80185f0 <__swbuf_r+0x9c>)
 80185c4:	429c      	cmp	r4, r3
 80185c6:	d101      	bne.n	80185cc <__swbuf_r+0x78>
 80185c8:	68ac      	ldr	r4, [r5, #8]
 80185ca:	e7d0      	b.n	801856e <__swbuf_r+0x1a>
 80185cc:	4b09      	ldr	r3, [pc, #36]	; (80185f4 <__swbuf_r+0xa0>)
 80185ce:	429c      	cmp	r4, r3
 80185d0:	bf08      	it	eq
 80185d2:	68ec      	ldreq	r4, [r5, #12]
 80185d4:	e7cb      	b.n	801856e <__swbuf_r+0x1a>
 80185d6:	4621      	mov	r1, r4
 80185d8:	4628      	mov	r0, r5
 80185da:	f000 f81f 	bl	801861c <__swsetup_r>
 80185de:	2800      	cmp	r0, #0
 80185e0:	d0cc      	beq.n	801857c <__swbuf_r+0x28>
 80185e2:	f04f 37ff 	mov.w	r7, #4294967295
 80185e6:	4638      	mov	r0, r7
 80185e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185ea:	bf00      	nop
 80185ec:	0801c0d0 	.word	0x0801c0d0
 80185f0:	0801c0f0 	.word	0x0801c0f0
 80185f4:	0801c0b0 	.word	0x0801c0b0

080185f8 <_write_r>:
 80185f8:	b538      	push	{r3, r4, r5, lr}
 80185fa:	4c07      	ldr	r4, [pc, #28]	; (8018618 <_write_r+0x20>)
 80185fc:	4605      	mov	r5, r0
 80185fe:	4608      	mov	r0, r1
 8018600:	4611      	mov	r1, r2
 8018602:	2200      	movs	r2, #0
 8018604:	6022      	str	r2, [r4, #0]
 8018606:	461a      	mov	r2, r3
 8018608:	f7e8 fd3e 	bl	8001088 <_write>
 801860c:	1c43      	adds	r3, r0, #1
 801860e:	d102      	bne.n	8018616 <_write_r+0x1e>
 8018610:	6823      	ldr	r3, [r4, #0]
 8018612:	b103      	cbz	r3, 8018616 <_write_r+0x1e>
 8018614:	602b      	str	r3, [r5, #0]
 8018616:	bd38      	pop	{r3, r4, r5, pc}
 8018618:	2000cfe0 	.word	0x2000cfe0

0801861c <__swsetup_r>:
 801861c:	4b32      	ldr	r3, [pc, #200]	; (80186e8 <__swsetup_r+0xcc>)
 801861e:	b570      	push	{r4, r5, r6, lr}
 8018620:	681d      	ldr	r5, [r3, #0]
 8018622:	4606      	mov	r6, r0
 8018624:	460c      	mov	r4, r1
 8018626:	b125      	cbz	r5, 8018632 <__swsetup_r+0x16>
 8018628:	69ab      	ldr	r3, [r5, #24]
 801862a:	b913      	cbnz	r3, 8018632 <__swsetup_r+0x16>
 801862c:	4628      	mov	r0, r5
 801862e:	f7fe fceb 	bl	8017008 <__sinit>
 8018632:	4b2e      	ldr	r3, [pc, #184]	; (80186ec <__swsetup_r+0xd0>)
 8018634:	429c      	cmp	r4, r3
 8018636:	d10f      	bne.n	8018658 <__swsetup_r+0x3c>
 8018638:	686c      	ldr	r4, [r5, #4]
 801863a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801863e:	b29a      	uxth	r2, r3
 8018640:	0715      	lsls	r5, r2, #28
 8018642:	d42c      	bmi.n	801869e <__swsetup_r+0x82>
 8018644:	06d0      	lsls	r0, r2, #27
 8018646:	d411      	bmi.n	801866c <__swsetup_r+0x50>
 8018648:	2209      	movs	r2, #9
 801864a:	6032      	str	r2, [r6, #0]
 801864c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018650:	81a3      	strh	r3, [r4, #12]
 8018652:	f04f 30ff 	mov.w	r0, #4294967295
 8018656:	e03e      	b.n	80186d6 <__swsetup_r+0xba>
 8018658:	4b25      	ldr	r3, [pc, #148]	; (80186f0 <__swsetup_r+0xd4>)
 801865a:	429c      	cmp	r4, r3
 801865c:	d101      	bne.n	8018662 <__swsetup_r+0x46>
 801865e:	68ac      	ldr	r4, [r5, #8]
 8018660:	e7eb      	b.n	801863a <__swsetup_r+0x1e>
 8018662:	4b24      	ldr	r3, [pc, #144]	; (80186f4 <__swsetup_r+0xd8>)
 8018664:	429c      	cmp	r4, r3
 8018666:	bf08      	it	eq
 8018668:	68ec      	ldreq	r4, [r5, #12]
 801866a:	e7e6      	b.n	801863a <__swsetup_r+0x1e>
 801866c:	0751      	lsls	r1, r2, #29
 801866e:	d512      	bpl.n	8018696 <__swsetup_r+0x7a>
 8018670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018672:	b141      	cbz	r1, 8018686 <__swsetup_r+0x6a>
 8018674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018678:	4299      	cmp	r1, r3
 801867a:	d002      	beq.n	8018682 <__swsetup_r+0x66>
 801867c:	4630      	mov	r0, r6
 801867e:	f7fc fa25 	bl	8014acc <_free_r>
 8018682:	2300      	movs	r3, #0
 8018684:	6363      	str	r3, [r4, #52]	; 0x34
 8018686:	89a3      	ldrh	r3, [r4, #12]
 8018688:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801868c:	81a3      	strh	r3, [r4, #12]
 801868e:	2300      	movs	r3, #0
 8018690:	6063      	str	r3, [r4, #4]
 8018692:	6923      	ldr	r3, [r4, #16]
 8018694:	6023      	str	r3, [r4, #0]
 8018696:	89a3      	ldrh	r3, [r4, #12]
 8018698:	f043 0308 	orr.w	r3, r3, #8
 801869c:	81a3      	strh	r3, [r4, #12]
 801869e:	6923      	ldr	r3, [r4, #16]
 80186a0:	b94b      	cbnz	r3, 80186b6 <__swsetup_r+0x9a>
 80186a2:	89a3      	ldrh	r3, [r4, #12]
 80186a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80186a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80186ac:	d003      	beq.n	80186b6 <__swsetup_r+0x9a>
 80186ae:	4621      	mov	r1, r4
 80186b0:	4630      	mov	r0, r6
 80186b2:	f000 f917 	bl	80188e4 <__smakebuf_r>
 80186b6:	89a2      	ldrh	r2, [r4, #12]
 80186b8:	f012 0301 	ands.w	r3, r2, #1
 80186bc:	d00c      	beq.n	80186d8 <__swsetup_r+0xbc>
 80186be:	2300      	movs	r3, #0
 80186c0:	60a3      	str	r3, [r4, #8]
 80186c2:	6963      	ldr	r3, [r4, #20]
 80186c4:	425b      	negs	r3, r3
 80186c6:	61a3      	str	r3, [r4, #24]
 80186c8:	6923      	ldr	r3, [r4, #16]
 80186ca:	b953      	cbnz	r3, 80186e2 <__swsetup_r+0xc6>
 80186cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80186d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80186d4:	d1ba      	bne.n	801864c <__swsetup_r+0x30>
 80186d6:	bd70      	pop	{r4, r5, r6, pc}
 80186d8:	0792      	lsls	r2, r2, #30
 80186da:	bf58      	it	pl
 80186dc:	6963      	ldrpl	r3, [r4, #20]
 80186de:	60a3      	str	r3, [r4, #8]
 80186e0:	e7f2      	b.n	80186c8 <__swsetup_r+0xac>
 80186e2:	2000      	movs	r0, #0
 80186e4:	e7f7      	b.n	80186d6 <__swsetup_r+0xba>
 80186e6:	bf00      	nop
 80186e8:	2000003c 	.word	0x2000003c
 80186ec:	0801c0d0 	.word	0x0801c0d0
 80186f0:	0801c0f0 	.word	0x0801c0f0
 80186f4:	0801c0b0 	.word	0x0801c0b0

080186f8 <_close_r>:
 80186f8:	b538      	push	{r3, r4, r5, lr}
 80186fa:	4c06      	ldr	r4, [pc, #24]	; (8018714 <_close_r+0x1c>)
 80186fc:	2300      	movs	r3, #0
 80186fe:	4605      	mov	r5, r0
 8018700:	4608      	mov	r0, r1
 8018702:	6023      	str	r3, [r4, #0]
 8018704:	f7e8 fcdc 	bl	80010c0 <_close>
 8018708:	1c43      	adds	r3, r0, #1
 801870a:	d102      	bne.n	8018712 <_close_r+0x1a>
 801870c:	6823      	ldr	r3, [r4, #0]
 801870e:	b103      	cbz	r3, 8018712 <_close_r+0x1a>
 8018710:	602b      	str	r3, [r5, #0]
 8018712:	bd38      	pop	{r3, r4, r5, pc}
 8018714:	2000cfe0 	.word	0x2000cfe0

08018718 <__sflush_r>:
 8018718:	898a      	ldrh	r2, [r1, #12]
 801871a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801871e:	4605      	mov	r5, r0
 8018720:	0710      	lsls	r0, r2, #28
 8018722:	460c      	mov	r4, r1
 8018724:	d458      	bmi.n	80187d8 <__sflush_r+0xc0>
 8018726:	684b      	ldr	r3, [r1, #4]
 8018728:	2b00      	cmp	r3, #0
 801872a:	dc05      	bgt.n	8018738 <__sflush_r+0x20>
 801872c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801872e:	2b00      	cmp	r3, #0
 8018730:	dc02      	bgt.n	8018738 <__sflush_r+0x20>
 8018732:	2000      	movs	r0, #0
 8018734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801873a:	2e00      	cmp	r6, #0
 801873c:	d0f9      	beq.n	8018732 <__sflush_r+0x1a>
 801873e:	2300      	movs	r3, #0
 8018740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018744:	682f      	ldr	r7, [r5, #0]
 8018746:	6a21      	ldr	r1, [r4, #32]
 8018748:	602b      	str	r3, [r5, #0]
 801874a:	d032      	beq.n	80187b2 <__sflush_r+0x9a>
 801874c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801874e:	89a3      	ldrh	r3, [r4, #12]
 8018750:	075a      	lsls	r2, r3, #29
 8018752:	d505      	bpl.n	8018760 <__sflush_r+0x48>
 8018754:	6863      	ldr	r3, [r4, #4]
 8018756:	1ac0      	subs	r0, r0, r3
 8018758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801875a:	b10b      	cbz	r3, 8018760 <__sflush_r+0x48>
 801875c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801875e:	1ac0      	subs	r0, r0, r3
 8018760:	2300      	movs	r3, #0
 8018762:	4602      	mov	r2, r0
 8018764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018766:	6a21      	ldr	r1, [r4, #32]
 8018768:	4628      	mov	r0, r5
 801876a:	47b0      	blx	r6
 801876c:	1c43      	adds	r3, r0, #1
 801876e:	89a3      	ldrh	r3, [r4, #12]
 8018770:	d106      	bne.n	8018780 <__sflush_r+0x68>
 8018772:	6829      	ldr	r1, [r5, #0]
 8018774:	291d      	cmp	r1, #29
 8018776:	d848      	bhi.n	801880a <__sflush_r+0xf2>
 8018778:	4a29      	ldr	r2, [pc, #164]	; (8018820 <__sflush_r+0x108>)
 801877a:	40ca      	lsrs	r2, r1
 801877c:	07d6      	lsls	r6, r2, #31
 801877e:	d544      	bpl.n	801880a <__sflush_r+0xf2>
 8018780:	2200      	movs	r2, #0
 8018782:	6062      	str	r2, [r4, #4]
 8018784:	04d9      	lsls	r1, r3, #19
 8018786:	6922      	ldr	r2, [r4, #16]
 8018788:	6022      	str	r2, [r4, #0]
 801878a:	d504      	bpl.n	8018796 <__sflush_r+0x7e>
 801878c:	1c42      	adds	r2, r0, #1
 801878e:	d101      	bne.n	8018794 <__sflush_r+0x7c>
 8018790:	682b      	ldr	r3, [r5, #0]
 8018792:	b903      	cbnz	r3, 8018796 <__sflush_r+0x7e>
 8018794:	6560      	str	r0, [r4, #84]	; 0x54
 8018796:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018798:	602f      	str	r7, [r5, #0]
 801879a:	2900      	cmp	r1, #0
 801879c:	d0c9      	beq.n	8018732 <__sflush_r+0x1a>
 801879e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80187a2:	4299      	cmp	r1, r3
 80187a4:	d002      	beq.n	80187ac <__sflush_r+0x94>
 80187a6:	4628      	mov	r0, r5
 80187a8:	f7fc f990 	bl	8014acc <_free_r>
 80187ac:	2000      	movs	r0, #0
 80187ae:	6360      	str	r0, [r4, #52]	; 0x34
 80187b0:	e7c0      	b.n	8018734 <__sflush_r+0x1c>
 80187b2:	2301      	movs	r3, #1
 80187b4:	4628      	mov	r0, r5
 80187b6:	47b0      	blx	r6
 80187b8:	1c41      	adds	r1, r0, #1
 80187ba:	d1c8      	bne.n	801874e <__sflush_r+0x36>
 80187bc:	682b      	ldr	r3, [r5, #0]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d0c5      	beq.n	801874e <__sflush_r+0x36>
 80187c2:	2b1d      	cmp	r3, #29
 80187c4:	d001      	beq.n	80187ca <__sflush_r+0xb2>
 80187c6:	2b16      	cmp	r3, #22
 80187c8:	d101      	bne.n	80187ce <__sflush_r+0xb6>
 80187ca:	602f      	str	r7, [r5, #0]
 80187cc:	e7b1      	b.n	8018732 <__sflush_r+0x1a>
 80187ce:	89a3      	ldrh	r3, [r4, #12]
 80187d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80187d4:	81a3      	strh	r3, [r4, #12]
 80187d6:	e7ad      	b.n	8018734 <__sflush_r+0x1c>
 80187d8:	690f      	ldr	r7, [r1, #16]
 80187da:	2f00      	cmp	r7, #0
 80187dc:	d0a9      	beq.n	8018732 <__sflush_r+0x1a>
 80187de:	0793      	lsls	r3, r2, #30
 80187e0:	680e      	ldr	r6, [r1, #0]
 80187e2:	bf08      	it	eq
 80187e4:	694b      	ldreq	r3, [r1, #20]
 80187e6:	600f      	str	r7, [r1, #0]
 80187e8:	bf18      	it	ne
 80187ea:	2300      	movne	r3, #0
 80187ec:	eba6 0807 	sub.w	r8, r6, r7
 80187f0:	608b      	str	r3, [r1, #8]
 80187f2:	f1b8 0f00 	cmp.w	r8, #0
 80187f6:	dd9c      	ble.n	8018732 <__sflush_r+0x1a>
 80187f8:	4643      	mov	r3, r8
 80187fa:	463a      	mov	r2, r7
 80187fc:	6a21      	ldr	r1, [r4, #32]
 80187fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018800:	4628      	mov	r0, r5
 8018802:	47b0      	blx	r6
 8018804:	2800      	cmp	r0, #0
 8018806:	dc06      	bgt.n	8018816 <__sflush_r+0xfe>
 8018808:	89a3      	ldrh	r3, [r4, #12]
 801880a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801880e:	81a3      	strh	r3, [r4, #12]
 8018810:	f04f 30ff 	mov.w	r0, #4294967295
 8018814:	e78e      	b.n	8018734 <__sflush_r+0x1c>
 8018816:	4407      	add	r7, r0
 8018818:	eba8 0800 	sub.w	r8, r8, r0
 801881c:	e7e9      	b.n	80187f2 <__sflush_r+0xda>
 801881e:	bf00      	nop
 8018820:	20400001 	.word	0x20400001

08018824 <_fflush_r>:
 8018824:	b538      	push	{r3, r4, r5, lr}
 8018826:	690b      	ldr	r3, [r1, #16]
 8018828:	4605      	mov	r5, r0
 801882a:	460c      	mov	r4, r1
 801882c:	b1db      	cbz	r3, 8018866 <_fflush_r+0x42>
 801882e:	b118      	cbz	r0, 8018838 <_fflush_r+0x14>
 8018830:	6983      	ldr	r3, [r0, #24]
 8018832:	b90b      	cbnz	r3, 8018838 <_fflush_r+0x14>
 8018834:	f7fe fbe8 	bl	8017008 <__sinit>
 8018838:	4b0c      	ldr	r3, [pc, #48]	; (801886c <_fflush_r+0x48>)
 801883a:	429c      	cmp	r4, r3
 801883c:	d109      	bne.n	8018852 <_fflush_r+0x2e>
 801883e:	686c      	ldr	r4, [r5, #4]
 8018840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018844:	b17b      	cbz	r3, 8018866 <_fflush_r+0x42>
 8018846:	4621      	mov	r1, r4
 8018848:	4628      	mov	r0, r5
 801884a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801884e:	f7ff bf63 	b.w	8018718 <__sflush_r>
 8018852:	4b07      	ldr	r3, [pc, #28]	; (8018870 <_fflush_r+0x4c>)
 8018854:	429c      	cmp	r4, r3
 8018856:	d101      	bne.n	801885c <_fflush_r+0x38>
 8018858:	68ac      	ldr	r4, [r5, #8]
 801885a:	e7f1      	b.n	8018840 <_fflush_r+0x1c>
 801885c:	4b05      	ldr	r3, [pc, #20]	; (8018874 <_fflush_r+0x50>)
 801885e:	429c      	cmp	r4, r3
 8018860:	bf08      	it	eq
 8018862:	68ec      	ldreq	r4, [r5, #12]
 8018864:	e7ec      	b.n	8018840 <_fflush_r+0x1c>
 8018866:	2000      	movs	r0, #0
 8018868:	bd38      	pop	{r3, r4, r5, pc}
 801886a:	bf00      	nop
 801886c:	0801c0d0 	.word	0x0801c0d0
 8018870:	0801c0f0 	.word	0x0801c0f0
 8018874:	0801c0b0 	.word	0x0801c0b0

08018878 <_lseek_r>:
 8018878:	b538      	push	{r3, r4, r5, lr}
 801887a:	4c07      	ldr	r4, [pc, #28]	; (8018898 <_lseek_r+0x20>)
 801887c:	4605      	mov	r5, r0
 801887e:	4608      	mov	r0, r1
 8018880:	4611      	mov	r1, r2
 8018882:	2200      	movs	r2, #0
 8018884:	6022      	str	r2, [r4, #0]
 8018886:	461a      	mov	r2, r3
 8018888:	f7e8 fc41 	bl	800110e <_lseek>
 801888c:	1c43      	adds	r3, r0, #1
 801888e:	d102      	bne.n	8018896 <_lseek_r+0x1e>
 8018890:	6823      	ldr	r3, [r4, #0]
 8018892:	b103      	cbz	r3, 8018896 <_lseek_r+0x1e>
 8018894:	602b      	str	r3, [r5, #0]
 8018896:	bd38      	pop	{r3, r4, r5, pc}
 8018898:	2000cfe0 	.word	0x2000cfe0

0801889c <__swhatbuf_r>:
 801889c:	b570      	push	{r4, r5, r6, lr}
 801889e:	460e      	mov	r6, r1
 80188a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188a4:	2900      	cmp	r1, #0
 80188a6:	b096      	sub	sp, #88	; 0x58
 80188a8:	4614      	mov	r4, r2
 80188aa:	461d      	mov	r5, r3
 80188ac:	da07      	bge.n	80188be <__swhatbuf_r+0x22>
 80188ae:	2300      	movs	r3, #0
 80188b0:	602b      	str	r3, [r5, #0]
 80188b2:	89b3      	ldrh	r3, [r6, #12]
 80188b4:	061a      	lsls	r2, r3, #24
 80188b6:	d410      	bmi.n	80188da <__swhatbuf_r+0x3e>
 80188b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80188bc:	e00e      	b.n	80188dc <__swhatbuf_r+0x40>
 80188be:	466a      	mov	r2, sp
 80188c0:	f000 f888 	bl	80189d4 <_fstat_r>
 80188c4:	2800      	cmp	r0, #0
 80188c6:	dbf2      	blt.n	80188ae <__swhatbuf_r+0x12>
 80188c8:	9a01      	ldr	r2, [sp, #4]
 80188ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80188ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80188d2:	425a      	negs	r2, r3
 80188d4:	415a      	adcs	r2, r3
 80188d6:	602a      	str	r2, [r5, #0]
 80188d8:	e7ee      	b.n	80188b8 <__swhatbuf_r+0x1c>
 80188da:	2340      	movs	r3, #64	; 0x40
 80188dc:	2000      	movs	r0, #0
 80188de:	6023      	str	r3, [r4, #0]
 80188e0:	b016      	add	sp, #88	; 0x58
 80188e2:	bd70      	pop	{r4, r5, r6, pc}

080188e4 <__smakebuf_r>:
 80188e4:	898b      	ldrh	r3, [r1, #12]
 80188e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80188e8:	079d      	lsls	r5, r3, #30
 80188ea:	4606      	mov	r6, r0
 80188ec:	460c      	mov	r4, r1
 80188ee:	d507      	bpl.n	8018900 <__smakebuf_r+0x1c>
 80188f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80188f4:	6023      	str	r3, [r4, #0]
 80188f6:	6123      	str	r3, [r4, #16]
 80188f8:	2301      	movs	r3, #1
 80188fa:	6163      	str	r3, [r4, #20]
 80188fc:	b002      	add	sp, #8
 80188fe:	bd70      	pop	{r4, r5, r6, pc}
 8018900:	ab01      	add	r3, sp, #4
 8018902:	466a      	mov	r2, sp
 8018904:	f7ff ffca 	bl	801889c <__swhatbuf_r>
 8018908:	9900      	ldr	r1, [sp, #0]
 801890a:	4605      	mov	r5, r0
 801890c:	4630      	mov	r0, r6
 801890e:	f7fc f92b 	bl	8014b68 <_malloc_r>
 8018912:	b948      	cbnz	r0, 8018928 <__smakebuf_r+0x44>
 8018914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018918:	059a      	lsls	r2, r3, #22
 801891a:	d4ef      	bmi.n	80188fc <__smakebuf_r+0x18>
 801891c:	f023 0303 	bic.w	r3, r3, #3
 8018920:	f043 0302 	orr.w	r3, r3, #2
 8018924:	81a3      	strh	r3, [r4, #12]
 8018926:	e7e3      	b.n	80188f0 <__smakebuf_r+0xc>
 8018928:	4b0d      	ldr	r3, [pc, #52]	; (8018960 <__smakebuf_r+0x7c>)
 801892a:	62b3      	str	r3, [r6, #40]	; 0x28
 801892c:	89a3      	ldrh	r3, [r4, #12]
 801892e:	6020      	str	r0, [r4, #0]
 8018930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018934:	81a3      	strh	r3, [r4, #12]
 8018936:	9b00      	ldr	r3, [sp, #0]
 8018938:	6163      	str	r3, [r4, #20]
 801893a:	9b01      	ldr	r3, [sp, #4]
 801893c:	6120      	str	r0, [r4, #16]
 801893e:	b15b      	cbz	r3, 8018958 <__smakebuf_r+0x74>
 8018940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018944:	4630      	mov	r0, r6
 8018946:	f000 f857 	bl	80189f8 <_isatty_r>
 801894a:	b128      	cbz	r0, 8018958 <__smakebuf_r+0x74>
 801894c:	89a3      	ldrh	r3, [r4, #12]
 801894e:	f023 0303 	bic.w	r3, r3, #3
 8018952:	f043 0301 	orr.w	r3, r3, #1
 8018956:	81a3      	strh	r3, [r4, #12]
 8018958:	89a3      	ldrh	r3, [r4, #12]
 801895a:	431d      	orrs	r5, r3
 801895c:	81a5      	strh	r5, [r4, #12]
 801895e:	e7cd      	b.n	80188fc <__smakebuf_r+0x18>
 8018960:	08016fd1 	.word	0x08016fd1

08018964 <_realloc_r>:
 8018964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018966:	4607      	mov	r7, r0
 8018968:	4614      	mov	r4, r2
 801896a:	460e      	mov	r6, r1
 801896c:	b921      	cbnz	r1, 8018978 <_realloc_r+0x14>
 801896e:	4611      	mov	r1, r2
 8018970:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018974:	f7fc b8f8 	b.w	8014b68 <_malloc_r>
 8018978:	b922      	cbnz	r2, 8018984 <_realloc_r+0x20>
 801897a:	f7fc f8a7 	bl	8014acc <_free_r>
 801897e:	4625      	mov	r5, r4
 8018980:	4628      	mov	r0, r5
 8018982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018984:	f000 f848 	bl	8018a18 <_malloc_usable_size_r>
 8018988:	42a0      	cmp	r0, r4
 801898a:	d20f      	bcs.n	80189ac <_realloc_r+0x48>
 801898c:	4621      	mov	r1, r4
 801898e:	4638      	mov	r0, r7
 8018990:	f7fc f8ea 	bl	8014b68 <_malloc_r>
 8018994:	4605      	mov	r5, r0
 8018996:	2800      	cmp	r0, #0
 8018998:	d0f2      	beq.n	8018980 <_realloc_r+0x1c>
 801899a:	4631      	mov	r1, r6
 801899c:	4622      	mov	r2, r4
 801899e:	f7fc f868 	bl	8014a72 <memcpy>
 80189a2:	4631      	mov	r1, r6
 80189a4:	4638      	mov	r0, r7
 80189a6:	f7fc f891 	bl	8014acc <_free_r>
 80189aa:	e7e9      	b.n	8018980 <_realloc_r+0x1c>
 80189ac:	4635      	mov	r5, r6
 80189ae:	e7e7      	b.n	8018980 <_realloc_r+0x1c>

080189b0 <_read_r>:
 80189b0:	b538      	push	{r3, r4, r5, lr}
 80189b2:	4c07      	ldr	r4, [pc, #28]	; (80189d0 <_read_r+0x20>)
 80189b4:	4605      	mov	r5, r0
 80189b6:	4608      	mov	r0, r1
 80189b8:	4611      	mov	r1, r2
 80189ba:	2200      	movs	r2, #0
 80189bc:	6022      	str	r2, [r4, #0]
 80189be:	461a      	mov	r2, r3
 80189c0:	f7e8 fbb2 	bl	8001128 <_read>
 80189c4:	1c43      	adds	r3, r0, #1
 80189c6:	d102      	bne.n	80189ce <_read_r+0x1e>
 80189c8:	6823      	ldr	r3, [r4, #0]
 80189ca:	b103      	cbz	r3, 80189ce <_read_r+0x1e>
 80189cc:	602b      	str	r3, [r5, #0]
 80189ce:	bd38      	pop	{r3, r4, r5, pc}
 80189d0:	2000cfe0 	.word	0x2000cfe0

080189d4 <_fstat_r>:
 80189d4:	b538      	push	{r3, r4, r5, lr}
 80189d6:	4c07      	ldr	r4, [pc, #28]	; (80189f4 <_fstat_r+0x20>)
 80189d8:	2300      	movs	r3, #0
 80189da:	4605      	mov	r5, r0
 80189dc:	4608      	mov	r0, r1
 80189de:	4611      	mov	r1, r2
 80189e0:	6023      	str	r3, [r4, #0]
 80189e2:	f7e8 fb79 	bl	80010d8 <_fstat>
 80189e6:	1c43      	adds	r3, r0, #1
 80189e8:	d102      	bne.n	80189f0 <_fstat_r+0x1c>
 80189ea:	6823      	ldr	r3, [r4, #0]
 80189ec:	b103      	cbz	r3, 80189f0 <_fstat_r+0x1c>
 80189ee:	602b      	str	r3, [r5, #0]
 80189f0:	bd38      	pop	{r3, r4, r5, pc}
 80189f2:	bf00      	nop
 80189f4:	2000cfe0 	.word	0x2000cfe0

080189f8 <_isatty_r>:
 80189f8:	b538      	push	{r3, r4, r5, lr}
 80189fa:	4c06      	ldr	r4, [pc, #24]	; (8018a14 <_isatty_r+0x1c>)
 80189fc:	2300      	movs	r3, #0
 80189fe:	4605      	mov	r5, r0
 8018a00:	4608      	mov	r0, r1
 8018a02:	6023      	str	r3, [r4, #0]
 8018a04:	f7e8 fb78 	bl	80010f8 <_isatty>
 8018a08:	1c43      	adds	r3, r0, #1
 8018a0a:	d102      	bne.n	8018a12 <_isatty_r+0x1a>
 8018a0c:	6823      	ldr	r3, [r4, #0]
 8018a0e:	b103      	cbz	r3, 8018a12 <_isatty_r+0x1a>
 8018a10:	602b      	str	r3, [r5, #0]
 8018a12:	bd38      	pop	{r3, r4, r5, pc}
 8018a14:	2000cfe0 	.word	0x2000cfe0

08018a18 <_malloc_usable_size_r>:
 8018a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a1c:	1f18      	subs	r0, r3, #4
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	bfbc      	itt	lt
 8018a22:	580b      	ldrlt	r3, [r1, r0]
 8018a24:	18c0      	addlt	r0, r0, r3
 8018a26:	4770      	bx	lr

08018a28 <_init>:
 8018a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a2a:	bf00      	nop
 8018a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a2e:	bc08      	pop	{r3}
 8018a30:	469e      	mov	lr, r3
 8018a32:	4770      	bx	lr

08018a34 <_fini>:
 8018a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a36:	bf00      	nop
 8018a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a3a:	bc08      	pop	{r3}
 8018a3c:	469e      	mov	lr, r3
 8018a3e:	4770      	bx	lr
